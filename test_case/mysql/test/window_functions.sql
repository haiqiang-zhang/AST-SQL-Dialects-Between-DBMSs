SELECT i, j, SUM(i+j) OVER (ROWS UNBOUNDED PRECEDING) foo FROM t;
SELECT i, j, SUM(i+j) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) foo FROM t;
SELECT i, j, SUM(i+j) OVER (ROWS UNBOUNDED PRECEDING) foo FROM t ORDER BY foo;
SELECT i, j, SUM(i+j) OVER (ROWS UNBOUNDED PRECEDING) foo FROM t ORDER BY foo DESC;
SELECT i, j, SUM(i+j) OVER (ROWS UNBOUNDED PRECEDING) foo FROM t ORDER BY NULL DESC;
SELECT i, j, SUM(i+j) OVER (ROWS UNBOUNDED PRECEDING) foo FROM t ORDER BY foo DESC LIMIT 3;
CREATE TABLE t1 (i INT);
INSERT INTO t1 (i) VALUES (1);
INSERT INTO t1 (i) VALUES (2);
INSERT INTO t1 (i) VALUES (3);
INSERT INTO t1 (i) VALUES (4);
INSERT INTO t1 (i) VALUES (5);
SELECT i, SUM(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM t1 LIMIT 3;
DROP TABLE t1;
SELECT i, j, SUM(i+j) OVER (ORDER BY j ROWS UNBOUNDED PRECEDING) foo FROM t;
SELECT i, j, SUM(i+j) OVER (ORDER BY j ROWS UNBOUNDED PRECEDING) foo FROM t ORDER BY foo;
SELECT i, j, SUM(i+j) OVER (ORDER BY j ROWS UNBOUNDED PRECEDING) foo FROM t ORDER BY foo DESC;
SELECT i, j, SUM(i+j) OVER (ORDER BY j DESC ROWS UNBOUNDED PRECEDING) foo FROM t;
CREATE VIEW v AS
SELECT i, j, SUM(i+j) OVER (ORDER BY j DESC ROWS UNBOUNDED PRECEDING) foo FROM t;
SELECT * FROM v;
DROP VIEW v;
SELECT i, j, SUM(i+j) OVER (ORDER BY j DESC ROWS UNBOUNDED PRECEDING) foo FROM t ORDER BY foo;
SELECT i, j, SUM(i+j) OVER (ORDER BY j DESC ROWS UNBOUNDED PRECEDING) foo FROM t ORDER BY foo DESC;
INSERT INTO t VALUES (999961560, DEFAULT);
INSERT INTO t VALUES (44721, DEFAULT);
DROP TABLE t;
CREATE TABLE t(i INT, j INT, k INT);
INSERT INTO t VALUES (1,1,1);
INSERT INTO t VALUES (1,4,1);
INSERT INTO t VALUES (1,2,1);
INSERT INTO t VALUES (1,4,1);
INSERT INTO t VALUES (1,1,2);
INSERT INTO t VALUES (1,4,2);
INSERT INTO t VALUES (1,2,2);
INSERT INTO t VALUES (1,4,2);
INSERT INTO t VALUES (1,1,3);
INSERT INTO t VALUES (1,4,3);
INSERT INTO t VALUES (1,2,3);
INSERT INTO t VALUES (1,4,3);
INSERT INTO t VALUES (1,1,4);
INSERT INTO t VALUES (1,4,4);
INSERT INTO t VALUES (1,2,4);
INSERT INTO t VALUES (1,4,4);
CREATE TABLE tb(a INT, b INT);
DROP TABLE tb;
SELECT k, SUM(k) OVER (ROWS UNBOUNDED PRECEDING) wf FROM t;
SELECT k, MIN(i), SUM(j), SUM(k) OVER (ROWS UNBOUNDED PRECEDING) wf FROM t GROUP BY (k);
SELECT k, GROUP_CONCAT(j ORDER BY j), SUM(k) OVER (ROWS UNBOUNDED PRECEDING) foo FROM t GROUP BY (k);
SELECT k, AVG(DISTINCT j), SUM(k) OVER (ROWS UNBOUNDED PRECEDING) foo FROM t GROUP BY (k);
CREATE TABLE t1 (id INTEGER, sex CHAR(1));
INSERT INTO t1 VALUES (1, 'M');
INSERT INTO t1 VALUES (2, 'F');
INSERT INTO t1 VALUES (3, 'F');
INSERT INTO t1 VALUES (4, 'F');
INSERT INTO t1 VALUES (5, 'M');
INSERT INTO t1 VALUES (10, NULL);
INSERT INTO t1 VALUES (11, NULL);
CREATE TABLE ss(c CHAR(1));
INSERT INTO ss VALUES ('M');
SELECT sex, AVG(id), ROW_NUMBER() OVER w FROM t1
    GROUP BY sex
    WINDOW w AS () ORDER BY sex DESC;
SELECT sex, AVG(id), SUM(AVG(id)) OVER w FROM t1
    GROUP BY sex
    WINDOW w AS (ROWS UNBOUNDED PRECEDING) ORDER BY sex DESC;
PREPARE p FROM "SELECT sex, AVG(id), ROW_NUMBER() OVER w FROM t1
    GROUP BY sex HAVING sex='M' OR sex IS NULL
    WINDOW w AS () ORDER BY sex DESC";
DROP PREPARE p;
SELECT sex, AVG(id), NTILE(2) OVER w FROM t1
    GROUP BY sex
    WINDOW w AS (ORDER BY sex) ORDER BY sex DESC;
SELECT sex, AVG(id), SUM(AVG(id)) OVER w, NTILE(2) OVER w FROM t1
    GROUP BY sex
    WINDOW w AS (ORDER BY sex ROWS UNBOUNDED PRECEDING) ORDER BY sex DESC;
SELECT sex, NTILE(2) OVER w, SUM(ASCII(sex)) OVER w s FROM t1
   HAVING sex=(SELECT c FROM ss LIMIT 1)
   WINDOW w AS (ORDER BY sex ROWS UNBOUNDED PRECEDING);
PREPARE p FROM "SELECT sex, AVG(id), SUM(AVG(id)) OVER w, NTILE(2) OVER w FROM t1
    GROUP BY sex HAVING sex=(SELECT c FROM ss LIMIT 1) OR sex='F' OR sex IS NULL
    WINDOW w AS (ORDER BY sex ROWS UNBOUNDED PRECEDING) ORDER BY sex DESC";
DROP PREPARE p;
SELECT sex, AVG(id) FROM t1
   GROUP BY sex WITH ROLLUP
   HAVING (sex='M' OR sex IS NULL) AND AVG(id)=3.0
   ORDER BY GROUPING(sex), sex;
SELECT id, FIRST_VALUE(id) OVER w first, LAST_VALUE(id) OVER w last, sex FROM t1
   WINDOW w AS (PARTITION BY sex
                ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING);
CREATE TABLE t_a (a INT, b INT);
INSERT INTO t_a VALUES (4, 40), (1, 10), (2, 20), (2, 20), (3, 30);
CREATE TABLE t_b SELECT DISTINCT a FROM t_a;
SELECT (SELECT SUM(t_b.a) OVER () FROM t_b WHERE t_b.a = t_a.a) aa, b FROM t_a GROUP BY aa, b;
DROP TABLE t_a, t_b;
SELECT sex, COUNT(id) OVER (ORDER BY id RANGE BETWEEN 1 PRECEDING and 2 PRECEDING) FROM t1;
CREATE TABLE t_time(t TIME, ts TIMESTAMP);
INSERT INTO t_time VALUES ('12:30', '2016-07-05 08:30:42');
SELECT t, FIRST_VALUE(t) OVER (ORDER BY t ) FROM t_time;
SELECT ADDTIME(FIRST_VALUE(time'18:00:00') OVER (ORDER BY NULL), '01:00:00');
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS BETWEEN ? PRECEDING and ? PRECEDING) FROM t1";
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS BETWEEN ? FOLLOWING and ? FOLLOWING) FROM t1";
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS BETWEEN ? FOLLOWING and ? FOLLOWING) FROM t1";
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS ? PRECEDING) FROM t1";
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id RANGE ? PRECEDING) FROM t1";
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS BETWEEN CURRENT ROW AND ? FOLLOWING) FROM t1";
DROP PREPARE p;
PREPARE p FROM "SELECT t, FIRST_VALUE(t) OVER (ORDER BY t RANGE INTERVAL ? HOUR PRECEDING) FROM t_time";
PREPARE p FROM "SELECT t, FIRST_VALUE(t) OVER (ORDER BY t RANGE BETWEEN INTERVAL ? HOUR PRECEDING AND INTERVAL ? HOUR PRECEDING) FROM t_time";
PREPARE p FROM "SELECT t, FIRST_VALUE(t) OVER (ORDER BY t RANGE BETWEEN INTERVAL ? HOUR PRECEDING AND INTERVAL ? HOUR_MINUTE PRECEDING) FROM t_time";
DROP TABLE t, t1, ss, t_time;
CREATE TABLE t1 (id INTEGER, sex CHAR(1));
INSERT INTO t1 VALUES (1, 'M');
INSERT INTO t1 VALUES (2, 'F');
INSERT INTO t1 VALUES (3, 'F');
INSERT INTO t1 VALUES (4, 'F');
INSERT INTO t1 VALUES (5, 'M');
CREATE TABLE t2 (user_id INTEGER NOT NULL, date DATE);
INSERT INTO t2 VALUES (1, '2002-06-09');
INSERT INTO t2 VALUES (2, '2002-06-09');
INSERT INTO t2 VALUES (1, '2002-06-09');
INSERT INTO t2 VALUES (3, '2002-06-09');
INSERT INTO t2 VALUES (4, '2002-06-09');
INSERT INTO t2 VALUES (4, '2002-06-09');
INSERT INTO t2 VALUES (5, '2002-06-09');
SELECT RANK() OVER (ORDER BY user_id) r FROM t2;
SELECT DENSE_RANK() OVER (ORDER BY user_id) r FROM t2;
SELECT PERCENT_RANK() OVER (ORDER BY user_id) r FROM t2;
SELECT CUME_DIST() OVER (ORDER BY user_id) cd FROM t2;
SELECT RANK() OVER () r FROM t2;
SELECT DENSE_RANK() OVER () r FROM t2;
SELECT PERCENT_RANK() OVER () r FROM t2;
SELECT CUME_DIST() OVER () cd FROM t2;
SELECT sex, SUM(DISTINCT id) AS uids FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex ORDER BY uids;
SELECT id, sex, RANK() OVER (ORDER BY sex) FROM t1 ORDER BY id;
SELECT id, sex, DENSE_RANK() OVER (ORDER BY sex) FROM t1 ORDER BY id;
SELECT id, sex, PERCENT_RANK() OVER (ORDER BY sex) FROM t1 ORDER BY id;
SELECT id, sex, CUME_DIST() OVER (ORDER BY sex) FROM t1 ORDER BY id;
SELECT sex, RANK() OVER (ORDER BY sex DESC) `rank`, AVG(DISTINCT id) AS uids FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex ORDER BY sex;
SELECT sex, PERCENT_RANK() OVER (ORDER BY sex DESC) `rank`, AVG(DISTINCT id) AS uids FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex ORDER BY sex;
SELECT sex, CUME_DIST() OVER (ORDER BY sex DESC) `cume_dist`, AVG(DISTINCT id) AS uids FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex ORDER BY sex;
SELECT  sex, AVG(id) AS uids, RANK() OVER w `rank` FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex
   WINDOW w AS (ORDER BY AVG(id));
SELECT  sex, AVG(id) AS uids, PERCENT_RANK() OVER w `p_rank` FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex
   WINDOW w AS (ORDER BY AVG(id));
SELECT  sex, AVG(id) AS uids, CUME_DIST() OVER w `c_dist` FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex
   WINDOW w AS (ORDER BY AVG(id));
SELECT  sex, AVG(DISTINCT id) AS uids, RANK() OVER w `rank` FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex
   WINDOW w AS (ORDER BY AVG(DISTINCT id) DESC) ORDER BY sex;
SELECT  sex, AVG(DISTINCT id) AS uids, PERCENT_RANK() OVER w `p_rank` FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex
   WINDOW w AS (ORDER BY AVG(DISTINCT id) DESC) ORDER BY sex;
SELECT  sex, AVG(DISTINCT id) AS uids, CUME_DIST() OVER w `c_dist` FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex
   WINDOW w AS (ORDER BY AVG(DISTINCT id) DESC) ORDER BY sex;
SELECT  sex, AVG(id) AS uids, RANK() OVER w `rank` FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex
   WINDOW w AS (ORDER BY AVG(id) DESC)
   ORDER BY `rank` DESC;
SELECT  sex, AVG(id) AS uids, PERCENT_RANK() OVER w `p_rank`, CUME_DIST() OVER w `c_dist`
   FROM t1 u, t2
   WHERE t2.user_id = u.id GROUP BY sex
   WINDOW w AS (ORDER BY AVG(id) DESC)
   ORDER BY `p_rank` DESC;
INSERT INTO t1 VALUES (10, NULL);
INSERT INTO t1 VALUES (11, NULL);
SELECT id, sex, RANK() OVER w, DENSE_RANK() OVER w FROM t1
   WINDOW w AS (ORDER BY sex) ORDER BY id;
SELECT id, sex, PERCENT_RANK() OVER w, CUME_DIST() OVER w FROM t1
   WINDOW w AS (ORDER BY sex) ORDER BY id;
SELECT sex, AVG(id), RANK() OVER (ORDER BY AVG(id) DESC) FROM t1 GROUP BY sex ORDER BY sex;
SELECT AVG(id), PERCENT_RANK() OVER (ORDER BY AVG(id)) FROM t1;
SELECT AVG(id), CUME_DIST() OVER (ORDER BY AVG(id)) FROM t1;
SELECT sex, id, SUM(id) OVER w summ, RANK() OVER w `rank` FROM t1
       WINDOW w AS (PARTITION BY sex ORDER BY id ASC ROWS UNBOUNDED PRECEDING);
SELECT sex, id, SUM(id) OVER w summ, PERCENT_RANK() OVER w `p_rank`,
       CUME_DIST() OVER w `c_dist` FROM t1
       WINDOW w AS (PARTITION BY sex ORDER BY id ASC ROWS UNBOUNDED PRECEDING);
SELECT sex, id, SUM(id) OVER w summ, RANK() OVER w `rank` FROM t1
       WINDOW w AS (PARTITION BY sex ORDER BY id ASC ROWS UNBOUNDED PRECEDING) ORDER BY summ;
SELECT sex, id, SUM(id) OVER w summ, PERCENT_RANK() OVER w `p_rank`,
       CUME_DIST() OVER w `c_dist` FROM t1
       WINDOW w AS (PARTITION BY sex ORDER BY id ASC ROWS UNBOUNDED PRECEDING) ORDER BY summ;
CREATE TABLE t(d decimal(10,2), date DATE);
INSERT INTO t values (10.4, '2002-06-09');
INSERT INTO t values (20.5, '2002-06-09');
INSERT INTO t values (10.4, '2002-06-10');
INSERT INTO t values (3,    '2002-06-09');
INSERT INTO t values (40.2, '2015-08-01');
INSERT INTO t values (40.2, '2002-06-09');
INSERT INTO t values (5,    '2015-08-01');
SELECT * FROM (SELECT  RANK() OVER (ORDER BY d) AS `rank`, d, date FROM t) alias ORDER BY `rank`, d, date;
SELECT * FROM (SELECT  PERCENT_RANK() OVER (ORDER BY d) AS `p_rank`, d, date FROM t) alias ORDER BY `p_rank`, d, date;
SELECT * FROM (SELECT  CUME_DIST() OVER (ORDER BY d) AS `c_dist`, d, date FROM t) alias ORDER BY `c_dist`, d, date;
SELECT * FROM (SELECT RANK() OVER (ORDER BY date) AS `rank`, date, d FROM t) alias ORDER BY `rank`, d DESC;
SELECT * FROM (SELECT PERCENT_RANK() OVER (ORDER BY date) AS `p_rank`, date, d FROM t) alias ORDER BY `p_rank`, d DESC;
SELECT * FROM (SELECT CUME_DIST() OVER (ORDER BY date) AS `c_dist`, date, d FROM t) alias ORDER BY `c_dist`, d DESC;
DROP TABLE t;
CREATE TABLE t(i INT, j INT);
INSERT INTO t VALUES (1,NULL);
INSERT INTO t VALUES (1,NULL);
INSERT INTO t VALUES (1,1);
INSERT INTO t VALUES (1,NULL);
INSERT INTO t VALUES (1,2);
INSERT INTO t VALUES (2,1);
INSERT INTO t VALUES (2,2);
INSERT INTO t VALUES (2,NULL);
INSERT INTO t VALUES (2,NULL);
SELECT  SUM(id) OVER (PARTITION BY sex ORDER BY id ROWS UNBOUNDED PRECEDING) summ, sex FROM t1;
CREATE TABLE t3(t3_id INT, k INT);
INSERT INTO t3 VALUES (0, 0);
INSERT INTO t3 VALUES (0, 0);
INSERT INTO t3 VALUES (2, 0);
INSERT INTO t3 VALUES (2, 0);
INSERT INTO t3 VALUES (4, 0);
INSERT INTO t3 VALUES (4, 0);
INSERT INTO t3 VALUES (6, 0);
INSERT INTO t3 VALUES (6, 0);
INSERT INTO t3 VALUES (8, 0);
INSERT INTO t3 VALUES (8, 0);
INSERT INTO t3 VALUES (1, 1);
INSERT INTO t3 VALUES (1, 1);
INSERT INTO t3 VALUES (3, 1);
INSERT INTO t3 VALUES (3, 1);
INSERT INTO t3 VALUES (5, 1);
INSERT INTO t3 VALUES (5, 1);
INSERT INTO t3 VALUES (7, 1);
INSERT INTO t3 VALUES (7, 1);
INSERT INTO t3 VALUES (9, 1);
INSERT INTO t3 VALUES (9, 1);
SELECT t3_id, SUM(t3_id) OVER w,
              CUME_DIST() OVER w,
              LEAD(t3_id, 2) OVER w `lead2`,
              NTH_VALUE(t3_id, 3) OVER w `nth`,
              k FROM t3
       WINDOW w AS (PARTITION BY k ORDER BY t3_id);
SELECT t3_id, LAST_VALUE(t3_id) OVER w, k FROM t3
       WINDOW w AS (PARTITION BY k ORDER BY t3_id RANGE UNBOUNDED PRECEDING);
DROP TABLE t3;
SELECT user_id, ROW_NUMBER() OVER (PARTITION BY user_id) FROM t2 t1;
SELECT * FROM t1,t2 WHERE t1.id=t2.user_id;
SELECT sex, id, date, ROW_NUMBER() OVER w AS row_no, RANK() OVER w AS `rank` FROM t1,t2
       WHERE t1.id=t2.user_id
       WINDOW w AS (PARTITION BY id ORDER BY sex);
SELECT sex, id, date, ROW_NUMBER() OVER w AS row_no, RANK() OVER w AS `rank` FROM t1,t2
       WHERE t1.id=t2.user_id
       WINDOW w AS (PARTITION BY date ORDER BY id);
SELECT CONCAT(ROW_NUMBER() OVER (), 1);
SELECT  date,id, RANK() OVER w AS `rank` FROM t1,t2 WINDOW w AS (PARTITION BY date ORDER BY id);
SELECT * from (SELECT  date,id, RANK() OVER w AS `rank` FROM t1,t2 WINDOW w AS (PARTITION BY date ORDER BY id)) t;
SELECT * from (SELECT  date,id, PERCENT_RANK() OVER w AS `p_rank`, CUME_DIST() OVER w as `c_dist` FROM t1,t2 WINDOW w AS (PARTITION BY date ORDER BY id)) t;
SELECT t1.*, RANK() OVER (ORDER BY sex), SUM(id) OVER (ORDER BY sex,id ROWS UNBOUNDED PRECEDING) FROM t1;
SELECT t1.*, PERCENT_RANK() OVER (ORDER BY sex), SUM(id) OVER (ORDER BY sex,id ROWS UNBOUNDED PRECEDING) FROM t1;
SELECT * from (SELECT t1.*, SUM(id) OVER (ROWS UNBOUNDED PRECEDING), RANK() OVER (ORDER BY sex) FROM t1) alias ORDER BY id;
SELECT * from (SELECT t1.*, SUM(id) OVER (ROWS UNBOUNDED PRECEDING), PERCENT_RANK() OVER (ORDER BY sex) FROM t1) alias ORDER BY id;
SELECT * from (SELECT t1.*, SUM(id) OVER (ROWS UNBOUNDED PRECEDING), CUME_DIST() OVER (ORDER BY sex) FROM t1) alias ORDER BY id;
SELECT t1.*, SUM(id) OVER (ORDER BY id ROWS UNBOUNDED PRECEDING),
             RANK() OVER (ORDER BY sex,id),
             ROW_NUMBER() OVER (ORDER BY sex,id)
             FROM t1;
SELECT t1.*, SUM(id) OVER (ORDER BY id ROWS UNBOUNDED PRECEDING),
             PERCENT_RANK() OVER (ORDER BY sex,id),
             CUME_DIST() OVER (ORDER BY sex,id),
             ROW_NUMBER() OVER (ORDER BY sex,id)
             FROM t1;
SELECT t.*, SUM(id + r00 + r01) OVER (ORDER BY id ROWS UNBOUNDED PRECEDING) AS s FROM (
   SELECT t1.*,
       RANK() OVER (ORDER BY sex, id) AS r00,
       RANK() OVER (ORDER BY sex, id DESC) AS r01,
       RANK() OVER (ORDER BY sex, id DESC) AS r02,
       RANK() OVER (PARTITION BY id ORDER BY sex) AS r03,
       RANK() OVER (ORDER BY sex,id) AS r04,
       RANK() OVER (ORDER BY sex,id) AS r05,
       RANK() OVER (ORDER BY sex, id) AS r06,
       RANK() OVER (ORDER BY sex, id) AS r07,
       RANK() OVER (ORDER BY sex, id) AS r08,
       RANK() OVER (ORDER BY sex, id) AS r09,
       RANK() OVER (ORDER BY sex, id) AS r10,
       RANK() OVER (ORDER BY sex, id) AS r11,
       RANK() OVER (ORDER BY sex, id) AS r12,
       RANK() OVER (ORDER BY sex, id) AS r13,
       RANK() OVER (ORDER BY sex, id) AS r14
       FROM t1) t;
SELECT t.*, SUM(id + r00 + r01) OVER (ORDER BY id ROWS UNBOUNDED PRECEDING) AS s FROM (
   SELECT t1.*,
       RANK() OVER (ORDER BY sex, id) AS r00,
       RANK() OVER (ORDER BY sex DESC, id) AS r01,
       RANK() OVER (ORDER BY sex, id DESC) AS r02,
       RANK() OVER (PARTITION BY id ORDER BY sex) AS r03,
       RANK() OVER (ORDER BY sex, id) AS r04,
       RANK() OVER (ORDER BY sex, id) AS r05,
       RANK() OVER (ORDER BY sex, id) AS r06,
       RANK() OVER (ORDER BY sex, id) AS r07,
       RANK() OVER (ORDER BY sex, id) AS r08,
       RANK() OVER (ORDER BY sex, id) AS r09,
       RANK() OVER (ORDER BY sex, id) AS r10,
       RANK() OVER (ORDER BY sex, id) AS r11,
       RANK() OVER (ORDER BY sex, id) AS r12,
       RANK() OVER (ORDER BY sex, id) AS r13,
       RANK() OVER (ORDER BY sex, id) AS r14
       FROM t1 LIMIT 4) t;
SELECT t.*, SUM(id + r00 + r01) OVER (ORDER BY id ROWS UNBOUNDED PRECEDING) AS s FROM (
   SELECT t1.*,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r00,
       PERCENT_RANK() OVER (ORDER BY sex DESC, id) AS r01,
       PERCENT_RANK() OVER (ORDER BY sex, id DESC) AS r02,
       PERCENT_RANK() OVER (PARTITION BY id ORDER BY sex) AS r03,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r04,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r05,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r06,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r07,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r08,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r09,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r10,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r11,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r12,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r13,
       PERCENT_RANK() OVER (ORDER BY sex, id) AS r14
       FROM t1) t;
SELECT t.*, SUM(id + r00 + r01) OVER (ORDER BY id ROWS UNBOUNDED PRECEDING) AS s FROM (
   SELECT t1.*,
       CUME_DIST() OVER (ORDER BY sex, id) AS r00,
       CUME_DIST() OVER (ORDER BY sex DESC, id) AS r01,
       CUME_DIST() OVER (ORDER BY sex, id DESC) AS r02,
       CUME_DIST() OVER (PARTITION BY id ORDER BY sex) AS r03,
       CUME_DIST() OVER (ORDER BY sex, id) AS r04,
       CUME_DIST() OVER (ORDER BY sex, id) AS r05,
       CUME_DIST() OVER (ORDER BY sex, id) AS r06,
       CUME_DIST() OVER (ORDER BY sex, id) AS r07,
       CUME_DIST() OVER (ORDER BY sex, id) AS r08,
       CUME_DIST() OVER (ORDER BY sex, id) AS r09,
       CUME_DIST() OVER (ORDER BY sex, id) AS r10,
       CUME_DIST() OVER (ORDER BY sex, id) AS r11,
       CUME_DIST() OVER (ORDER BY sex, id) AS r12,
       CUME_DIST() OVER (ORDER BY sex, id) AS r13,
       CUME_DIST() OVER (ORDER BY sex, id) AS r14
       FROM t1) t;
SELECT t.*, SUM(id + r00 + r01) OVER (ORDER BY id ROWS UNBOUNDED PRECEDING) AS s FROM (
   SELECT t1.*,
       RANK() OVER w00 AS r00,
       RANK() OVER w01 AS r01,
       RANK() OVER w02 AS r02,
       RANK() OVER w03 AS r03,
       RANK() OVER w04 AS r04,
       RANK() OVER w05 AS r05,
       RANK() OVER w06 AS r06,
       RANK() OVER w07 AS r07,
       RANK() OVER w08 AS r08,
       RANK() OVER w09 AS r09,
       RANK() OVER w10 AS r10,
       RANK() OVER w11 AS r11,
       RANK() OVER w12 AS r12,
       RANK() OVER w13 AS r13,
       RANK() OVER w14 AS r14
       FROM t1
       WINDOW w00 AS (ORDER BY sex),
              w01 AS (ORDER BY sex DESC),
              w02 AS (ORDER BY sex, id DESC),
              w03 AS (PARTITION BY id ORDER BY sex),
              w04 AS (ORDER BY sex),
              w05 AS (ORDER BY sex),
              w06 AS (ORDER BY sex),
              w07 AS (ORDER BY sex),
              w08 AS (ORDER BY sex),
              w09 AS (ORDER BY sex),
              w10 AS (ORDER BY sex),
              w11 AS (ORDER BY sex),
              w12 AS (ORDER BY sex),
              w13 AS (ORDER BY sex),
              w14 AS (ORDER BY sex)) t;
SELECT SUM(id) OVER w * 2, AVG(id) OVER w, COUNT(id) OVER w FROM t1
       WINDOW w AS (PARTITION BY sex);
SELECT * FROM (
SELECT id, SUM(id) OVER w, COUNT(*) OVER w, sex FROM t1
       WINDOW w AS (PARTITION BY sex)
       ) alias ORDER BY id;
CREATE VIEW v AS
SELECT id, SUM(id) OVER w, sex FROM t1
       WINDOW w AS (PARTITION BY sex ORDER BY id
                    ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING);
SELECT * FROM v;
DROP VIEW v;
SELECT SUM(id) OVER w, COUNT(*) OVER w FROM t1
       WINDOW w AS (PARTITION BY sex ORDER BY id
                    ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING);
CREATE TABLE td(d DOUBLE);
INSERT INTO td VALUES (2);
INSERT INTO td VALUES (2);
INSERT INTO td VALUES (3);
INSERT INTO td VALUES (1);
INSERT INTO td VALUES (1.2);
INSERT INTO td VALUES (NULL);
INSERT INTO td VALUES (1.7976931348623157E+307);
INSERT INTO td VALUES (1);
INSERT INTO td VALUES (10);
INSERT INTO td VALUES (1);
INSERT INTO td VALUES (2);
INSERT INTO td VALUES (3);
INSERT INTO td VALUES (4);
INSERT INTO td VALUES (5);
INSERT INTO td VALUES (6);
INSERT INTO td VALUES (7);
INSERT INTO td VALUES (8);
INSERT INTO td VALUES (9);
INSERT INTO td SELECT * FROM td;
DROP TABLE td;
PREPARE s FROM
  'SELECT id, NTILE(?) OVER w FROM t1 WINDOW w AS (ORDER BY id)';
SELECT id, ROW_NUMBER() OVER w, NTILE(4) OVER w, SUM(id) OVER w FROM t1
    WINDOW w AS (ORDER BY id ROWS 1 PRECEDING);
DELETE FROM t1 WHERE id=11;
INSERT INTO t1 VALUES (11, NULL);
PREPARE p FROM "SELECT id, NTILE(?) OVER w FROM t1 WINDOW w AS (ORDER BY id)";
DROP PREPARE p;
SELECT (ROW_NUMBER() OVER w1 * 5 - 1) DIV (COUNT(*) OVER w2) + 1 AS cnt
    FROM t1 WINDOW w1 AS (ORDER BY id ASC),
                   w2 AS ();
SELECT ROW_NUMBER() OVER w, id, SUM(id) OVER w, sex FROM t1
       WINDOW w AS (PARTITION BY sex ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING);
INSERT INTO t1 VALUES (10, NULL);
SELECT id, sex, SUM(id) OVER w,
                ROW_NUMBER() OVER w,
                CUME_DIST() OVER w  FROM t1
       WINDOW w AS (PARTITION BY sex ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING);
INSERT INTO t1 VALUES (NULL, 'M');
CREATE VIEW v AS
SELECT id, FIRST_VALUE(id) OVER w FROM t1 WINDOW w AS (ORDER BY id RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING);
SELECT * FROM v;
DROP VIEW v;
CREATE TABLE td1 (id DOUBLE, sex CHAR(1));
INSERT INTO td1 SELECT * FROM t1;
SELECT id, FIRST_VALUE(id) OVER w, CUME_DIST() OVER w FROM td1 WINDOW w AS (ORDER BY id ROWS  BETWEEN 2 FOLLOWING AND 3 FOLLOWING);
DROP TABLE td1;
CREATE TABLE td_dec (id DECIMAL(10,2), sex CHAR(1));
INSERT INTO td_dec SELECT * FROM t1;
DROP TABLE td_dec;
CREATE TABLE td_str (id VARCHAR(20), sex CHAR(1));
INSERT INTO td_str SELECT * FROM t1;
DROP TABLE td_str;
CREATE TABLE t_date(id DATE);
INSERT INTO t_date VALUES ('2002-06-09');
INSERT INTO t_date VALUES ('2002-06-09');
INSERT INTO t_date VALUES ('2002-06-10');
INSERT INTO t_date VALUES ('2002-06-09');
INSERT INTO t_date VALUES ('2015-08-01');
INSERT INTO t_date VALUES ('2002-06-09');
INSERT INTO t_date VALUES ('2015-08-01');
CREATE VIEW v AS
SELECT id, FIRST_VALUE(id) OVER w FROM t_date WINDOW w AS (ORDER BY id RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING);
SELECT * FROM v;
DROP VIEW v;
CREATE VIEW v AS
SELECT id, FIRST_VALUE(id) OVER w FROM t_date WINDOW w AS (ORDER BY id RANGE BETWEEN INTERVAL 2 DAY FOLLOWING AND INTERVAL 3 DAY FOLLOWING);
SELECT * FROM v;
DROP VIEW v;
DROP TABLE t_date;
CREATE TABLE t_time(t TIME, ts TIMESTAMP);
INSERT INTO t_time VALUES ('12:30', '2016-07-05 08:30:42');
INSERT INTO t_time VALUES ('22:30', '2015-07-05 08:30:43');
INSERT INTO t_time VALUES ('13:30', '2014-07-05 08:30:44');
INSERT INTO t_time VALUES ('01:30', '2013-07-05 08:30:45');
INSERT INTO t_time VALUES ('15:30', '2016-08-05 08:31:42');
INSERT INTO t_time VALUES ('20:30', '2016-09-05 08:32:42');
INSERT INTO t_time VALUES ('04:30', '2016-10-05 08:33:42');
INSERT INTO t_time VALUES ('06:30', '2016-11-05 08:34:42');
INSERT INTO t_time VALUES ('18:30', '2016-07-05 09:30:42');
INSERT INTO t_time VALUES ('21:30', '2016-07-06 10:30:42');
INSERT INTO t_time VALUES ('00:30', '2016-07-07 11:30:42');
INSERT INTO t_time VALUES ('00:31', '2016-07-08 12:30:42');
CREATE TABLE t_time2(t TIME, ts TIMESTAMP, p INTEGER DEFAULT 1);
INSERT INTO t_time2(t, ts) SELECT * FROM t_time;
UPDATE t_time2 SET p=p+1;
INSERT INTO t_time2(t, ts) SELECT * FROM t_time;
DROP TABLE t_time, t_time2;
SELECT * FROM t1;
CREATE TABLE t11 (id INTEGER, sex CHAR(1), p INTEGER DEFAULT 1);
INSERT INTO t11(id, sex) SELECT * FROM t1;
UPDATE t11 SET p=p+1;
INSERT INTO t11(id, sex) SELECT * FROM t1;
CREATE TABLE t22 (user_id INTEGER NOT NULL, date DATE, p INTEGER DEFAULT 1);
INSERT INTO t22(user_id, date) SELECT * FROM t2;
UPDATE t22 SET p=p+1;
INSERT INTO t22(user_id, date) SELECT * FROM t2;
update t2 set date=date + user_id;
CREATE TABLE t3(d DOUBLE);
INSERT INTO t3 VALUES (1.1);
INSERT INTO t3 VALUES (1.9);
INSERT INTO t3 VALUES (4.0);
INSERT INTO t3 VALUES (8.3);
INSERT INTO t3 VALUES (16.0);
INSERT INTO t3 VALUES (24.0);
INSERT INTO t3 VALUES (20.1);
INSERT INTO t3 VALUES (22.0);
INSERT INTO t3 VALUES (23.0);
CREATE TABLE t4(c VARCHAR(30), i INT, j INT);
CREATE TABLE tj(j JSON, i INT DEFAULT 7);
INSERT INTO tj(j) VALUES ('1');
INSERT INTO tj(j) VALUES ('2');
INSERT INTO tj(j) VALUES ('3');
INSERT INTO tj(j) VALUES ('4');
INSERT INTO tj(j) VALUES ('5');
INSERT INTO tj(j) VALUES (NULL);
INSERT INTO tj(j) VALUES ('3.14');
INSERT INTO tj(j) VALUES ('[1,2,3]');
SELECT CAST(SUM(j) OVER () AS JSON) FROM tj;
SELECT DISTINCT i,NTILE(3) OVER (ORDER BY i), SUM(i) OVER (), COUNT(*) OVER () FROM tj ORDER BY NTILE(3) OVER (ORDER BY i);
UPDATE tj SET i=i+CASE WHEN JSON_TYPE(j) = 'ARRAY' THEN 1 ELSE j END;
UPDATE tj SET i=7 where i=8 AND JSON_TYPE(j) != 'ARRAY';
CREATE TABLE tj2 AS SELECT * FROM tj;
UPDATE tj2 SET i=MOD(i,3);
SELECT * FROM tj2;
SELECT          COUNT(*) OVER (), MOD(SUM(i),2) FROM tj2 GROUP BY i;
SELECT i, SUM(i) OVER (), MOD(SUM(i),2) FROM tj2 GROUP BY i;
DROP TABLE tj2;
SELECT * FROM (SELECT i, j, ROW_NUMBER() OVER (ORDER BY j) FROM tj UNION SELECT i, j, ROW_NUMBER() OVER (ORDER BY j) FROM tj) alias;
SELECT i, NTH_VALUE(i,3) OVER (ORDER BY i) FROM tj UNION ALL SELECT i, NTH_VALUE(i, 3) OVER (ORDER BY i) FROM tj;
SELECT i, LEAD(i,3) OVER (ORDER BY i) FROM tj UNION ALL SELECT i, LEAD(i, 3) OVER (ORDER BY i) FROM tj;
DROP TABLE tj;
CREATE TABLE tj(j JSON);
INSERT INTO tj VALUES ('1');
INSERT INTO tj VALUES ('2');
INSERT INTO tj VALUES ('3');
INSERT INTO tj VALUES ('4');
INSERT INTO tj VALUES ('5');
INSERT INTO tj VALUES (NULL);
SELECT j, JSON_TYPE(j), SUM(j) OVER (ORDER BY j ROWS 3 PRECEDING) FROM tj;
INSERT INTO tj VALUES ('3.14');
INSERT INTO tj VALUES ('[1,2,3]');
CREATE TABLE t5(b BIGINT UNSIGNED);
INSERT INTO t5 VALUES (1);
INSERT INTO t5 VALUES (2);
INSERT INTO t5 VALUES (3);
INSERT INTO t5 VALUES (4);
INSERT INTO t5 VALUES (5);
INSERT INTO t5 VALUES (6);
INSERT INTO t5 VALUES (7);
SELECT b, COUNT(*) OVER (ORDER BY b RANGE BETWEEN 1 FOLLOWING AND  100 FOLLOWING) bb FROM t5;
CREATE TABLE t6(t TIME, ts TIMESTAMP);
INSERT INTO t6 VALUES ('12:30', '2016-07-05 08:30:42');
INSERT INTO t6 VALUES ('22:30', '2015-07-05 08:30:43');
INSERT INTO t6 VALUES ('13:30', '2014-07-05 08:30:44');
INSERT INTO t6 VALUES ('01:30', '2013-07-05 08:30:45');
INSERT INTO t6 VALUES ('15:30', '2016-08-05 08:31:42');
INSERT INTO t6 VALUES ('20:30', '2016-09-05 08:32:42');
INSERT INTO t6 VALUES ('04:30', '2016-10-05 08:33:42');
INSERT INTO t6 VALUES ('06:30', '2016-11-05 08:34:42');
INSERT INTO t6 VALUES ('18:30', '2016-07-05 09:30:42');
INSERT INTO t6 VALUES ('21:30', '2016-07-06 10:30:42');
INSERT INTO t6 VALUES ('00:30', '2016-07-07 11:30:42');
INSERT INTO t6 VALUES ('00:31', '2016-07-08 12:30:42');
SELECT t, COUNT(*) OVER (ORDER BY t RANGE
  BETWEEN INTERVAL 1 HOUR PRECEDING AND INTERVAL '2:2' MINUTE_SECOND FOLLOWING) AS cnt FROM t6;
CREATE VIEW v AS
SELECT COUNT(*) OVER w0,
       COUNT(*) OVER w,
       COUNT(*) OVER w1 FROM t6
   WINDOW w0 AS (),
          w  AS (w0 ORDER BY t),
          w1 AS (w RANGE BETWEEN INTERVAL 24 HOUR  PRECEDING AND
                 INTERVAL '2:2' MINUTE_SECOND FOLLOWING);
SELECT * FROM v;
DROP VIEW v;
SELECT id, AVG(id) OVER (PARTITION BY id) summ FROM t1;
SELECT     AVG(id) OVER (PARTITION BY id) summ FROM t1;
SELECT id, AVG(id) OVER (PARTITION BY id) summ,
           AVG(id) OVER (PARTITION BY id) summ2 FROM t1;
SELECT     AVG(id) OVER (PARTITION BY id) summ,
           AVG(id) OVER (PARTITION BY id) summ2 FROM t1;
INSERT INTO t1 VALUES (NULL, 'F');
SELECT COUNT(id) OVER w, id, AVG(id) OVER w, SUM(id) OVER w, FIRST_VALUE(id) OVER w FROM t1
  WINDOW w AS (ORDER BY id RANGE 1 PRECEDING);
CREATE TABLE t1r (id REAL, sex CHAR(1));
INSERT INTO t1r VALUES (1.0, 'M');
INSERT INTO t1r VALUES (2.0, 'F');
INSERT INTO t1r VALUES (3.0, 'F');
INSERT INTO t1r VALUES (4.0, 'F');
INSERT INTO t1r VALUES (5.0, 'M');
INSERT INTO t1r VALUES (10.0, NULL);
INSERT INTO t1r VALUES (11.0, NULL);
INSERT INTO t1r VALUES (10.0, NULL);
INSERT INTO t1r VALUES (NULL, 'M');
INSERT INTO t1r VALUES (NULL, 'F');
DROP TABLE t1r;
SELECT id, count(id) over w, count(*) over w, FIRST_VALUE(id) OVER w FROM t1
  WINDOW w AS (ORDER BY id ASC  RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING);
DROP TABLE t1, t11, t2, t22, t3, t4, t5, t6, tj;
DROP TABLE t;
CREATE TABLE t(i INT);
INSERT INTO t VALUES (NULL), (NULL), (1), (2), (3), (4), (5);
DROP TABLE t;
CREATE TABLE t(i INT, j INT, k INT);
INSERT INTO t VALUES (1,1,1);
INSERT INTO t VALUES (1,1,2);
INSERT INTO t VALUES (1,1,2);
INSERT INTO t VALUES (1,2,1);
INSERT INTO t VALUES (1,2,2);
INSERT INTO t VALUES (2,1,1);
INSERT INTO t VALUES (2,1,1);
INSERT INTO t VALUES (2,1,2);
INSERT INTO t VALUES (2,2,1);
INSERT INTO t VALUES (2,2,2);
SELECT *, RANK() OVER (ORDER BY i,j,k) AS O_IJK,
          RANK() OVER (ORDER BY j) AS O_J,
          RANK() OVER (ORDER BY k,j) AS O_KJ FROM t ORDER BY i,j,k;
DROP TABLE t;
CREATE TABLE t1 (s1 INT, s2 CHAR(5));
INSERT INTO t1 VALUES (1, 'a');
INSERT INTO t1 VALUES (NULL, NULL);
INSERT INTO t1 VALUES (1, NULL);
INSERT INTO t1 VALUES (NULL, 'a');
INSERT INTO t1 VALUES (2, 'b');
INSERT INTO t1 VALUES (-1, '');
SELECT *, ABS(ROW_NUMBER() OVER (ORDER BY s1,s2))
 - ROW_NUMBER() OVER (ORDER BY s1,s2) AS X FROM t1;
SELECT * FROM (
  SELECT *,DENSE_RANK() OVER (ORDER BY s2 DESC),
           DENSE_RANK() OVER (ORDER BY s2) FROM t1
           ) alias ORDER BY s1,s2;
SELECT * FROM (
  SELECT *, SUM(s1) OVER (ORDER BY s1) FROM t1 ORDER BY s1
         ) alias ORDER BY s1,s2;
DROP TABLE t1;
CREATE TABLE t (a INT, b INT, c INT);
INSERT INTO t VALUES (1,1,1);
INSERT INTO t VALUES (1,1,2);
INSERT INTO t VALUES (1,1,3);
INSERT INTO t VALUES (1,2,1);
INSERT INTO t VALUES (1,2,2);
INSERT INTO t VALUES (1,2,3);
INSERT INTO t VALUES (1,3,1);
INSERT INTO t VALUES (1,3,2);
INSERT INTO t VALUES (1,3,3);
INSERT INTO t VALUES (2,1,1);
INSERT INTO t VALUES (2,1,2);
INSERT INTO t VALUES (2,1,3);
INSERT INTO t VALUES (2,2,1);
INSERT INTO t VALUES (2,2,2);
INSERT INTO t VALUES (2,2,3);
INSERT INTO t VALUES (2,3,1);
INSERT INTO t VALUES (2,3,2);
INSERT INTO t VALUES (2,3,3);
SELECT *, RANK() OVER (ORDER BY a DESC,b,c) AS `rank` FROM t ORDER BY `rank`;
CREATE TABLE tb(a LONGBLOB NOT NULL);
INSERT INTO tb VALUES ('1'), ('2'), ('3'), ('4'), ('5');
DROP TABLE tb;
SELECT * FROM (
  SELECT a,b,c, RANK() OVER (ORDER BY 1*1) FROM t
  ) alias ORDER BY a,b,c;
SELECT * FROM (SELECT count(*) OVER (), sum(c) OVER () AS sum1, a from t) as alias;
SELECT * FROM (SELECT count(*) OVER () + sum(c) OVER () AS sum1, a from t) as alias;
SELECT * FROM (SELECT SUM(b) OVER (), a FROM t) AS alias;
SELECT * FROM (SELECT SUM(b) OVER (), b FROM t) AS alias;
CREATE TABLE t_time(t TIME, ts TIMESTAMP);
DROP TABLE t, t_time;
CREATE TABLE t(a int, b int);
INSERT INTO t VALUES (1,1);
INSERT INTO t VALUES (2,1);
INSERT INTO t VALUES (3,2);
INSERT INTO t VALUES (4,2);
INSERT INTO t VALUES (5,3);
INSERT INTO t VALUES (6,3);
DROP TABLE t;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1,2);
INSERT INTO t1 VALUES (1,3);
INSERT INTO t1 VALUES (1,3);
DROP TABLE t1;
CREATE TABLE ta (a INT(11) DEFAULT NULL, b INT(11) DEFAULT NULL);
INSERT INTO  ta VALUES (1,1);
INSERT INTO  ta VALUES (1,2);
INSERT INTO  ta VALUES (1,3);
INSERT INTO  ta VALUES (2,1);
INSERT INTO  ta VALUES (2,2);
INSERT INTO  ta VALUES (2,3);
SELECT last_value(b) OVER (ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM ta;
DROP TABLE ta;
CREATE TABLE t(d DOUBLE);
INSERT INTO t VALUES (1.0);
INSERT INTO t VALUES (2.0);
INSERT INTO t VALUES (3.0);
DROP TABLE t;
CREATE TABLE t1 (d DOUBLE, id INT, sex CHAR(1), n INT NOT NULL AUTO_INCREMENT, PRIMARY KEY(n));
INSERT INTO t1(d, id, sex) VALUES (1.0, 1, 'M');
INSERT INTO t1(d, id, sex) VALUES (2.0, 2, 'F');
INSERT INTO t1(d, id, sex) VALUES (3.0, 3, 'F');
INSERT INTO t1(d, id, sex) VALUES (4.0, 4, 'F');
INSERT INTO t1(d, id, sex) VALUES (5.0, 5, 'M');
INSERT INTO t1(d, id, sex) VALUES (NULL, NULL, 'M');
INSERT INTO t1(d, id, sex) VALUES (10.0, 10, NULL);
INSERT INTO t1(d, id, sex) VALUES (10.0, 10, NULL);
INSERT INTO t1(d, id, sex) VALUES (11.0, 11, NULL);
SELECT id, AVG(id) over w `avg`, SUM(id) OVER w `sum`, COUNT(*) OVER w cnt FROM t1 WINDOW w as (ORDER BY id RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING);
SELECT d, AVG(d) over w `avg`, SUM(d) OVER w `sum`, COUNT(*) OVER w cnt FROM t1 WINDOW w as (ORDER BY d RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING);
DROP TABLE t1;
CREATE TABLE t (i char(10), j int);
INSERT INTO t VALUES('A', 1);
INSERT INTO t VALUES('A', 3);
INSERT INTO t VALUES('A', 5);
INSERT INTO t VALUES('B', 1);
INSERT INTO t VALUES('B', 7);
DROP TABLE t;
CREATE TABLE t1 (t1_id INT);
INSERT INTO t1 (t1_id) VALUES (1);
INSERT INTO t1 (t1_id) VALUES (2);
INSERT INTO t1 (t1_id) VALUES (3);
INSERT INTO t1 (t1_id) VALUES (4);
INSERT INTO t1 (t1_id) VALUES (5);
DROP TABLE t1;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES(1),(1),(2),(2);
DROP TABLE t1;
CREATE TABLE t1 (i INT);
INSERT INTO t1 VALUES (1),(2);
SELECT i FROM t1 WHERE i IN ( SELECT CAST(  SUM(i) OVER (ROWS CURRENT ROW) AS UNSIGNED) FROM t1);
SELECT i FROM t1 WHERE i IN ( SELECT CAST(0+SUM(i) OVER (ROWS CURRENT ROW) AS UNSIGNED) FROM t1);
DROP TABLE t1;
CREATE TABLE t1(i INT, j INT);
DROP TABLE t1;
CREATE TABLE t1 (pk INT, j INT, PRIMARY KEY (pk), KEY(j));
INSERT INTO t1 values (1,2);
DROP TABLE t1;
CREATE TABLE t1 (a INTEGER);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
SELECT a, RANK() OVER (ORDER BY a) rank_asc,
RANK() OVER (ORDER BY a desc) rank_desc,
RANK() OVER (ORDER BY a) + RANK() OVER (ORDER BY a desc) rank_asc_desc FROM t1;
DROP TABLE t1;
CREATE TABLE t(a INT);
INSERT INTO t VALUES(5);
SELECT ROW_NUMBER () OVER (), COUNT(*) FROM t WHERE a < 5;
DROP TABLE t;
CREATE TABLE t1(i INT, j INT, k INT);
INSERT INTO t1 VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4);
INSERT INTO t1 SELECT 10*i,j,5*j FROM t1 UNION SELECT 20*i,j,5*j FROM t1
UNION SELECT 30*i,j,5*j FROM t1;
SELECT 1+SUM(SUM(i)) OVER W FROM t1 GROUP BY i WINDOW w AS (PARTITION BY i ORDER BY i)
  ORDER BY 1+SUM(SUM(i)) OVER w;
DROP TABLE t1;
CREATE TABLE t(a INT);
INSERT INTO t VALUES (1),(2),(3);
DROP TABLE t;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1),(2,2),(3,3),
                      (3,1),(2,2),(1,3);
DROP TABLE t1;
CREATE TABLE t(a INT);
INSERT INTO t VALUES (1),(2),(3);
SELECT * FROM t WHERE a IN (SELECT ROW_NUMBER() OVER () FROM t);
SELECT * FROM t WHERE a IN (SELECT ROW_NUMBER() OVER () + 1 FROM t);
SELECT * FROM t WHERE a = SOME(SELECT ROW_NUMBER() OVER () + 1 FROM t);
SELECT * FROM t WHERE a = ANY(SELECT ROW_NUMBER() OVER () + 1 FROM t);
SELECT * FROM t WHERE a <> ALL(SELECT ROW_NUMBER() OVER () + 1 FROM t);
SELECT * FROM t WHERE a >= ALL(SELECT ROW_NUMBER() OVER () + 1 FROM t);
SELECT * FROM t WHERE a >= SOME(SELECT ROW_NUMBER() OVER () + 1 FROM t);
SELECT * from t WHERE EXISTS(SELECT ROW_NUMBER() OVER () FROM t);
SELECT * FROM t upper
    WHERE EXISTS(SELECT rn FROM (SELECT ROW_NUMBER() OVER () AS rn FROM t) ta
                 WHERE rn > upper.a);
DROP TABLE t;
CREATE TABLE t1(i INT, j INT, k INT);
INSERT INTO t1 VALUES (1,1,1),(2,2,2);
SELECT (SELECT ROW_NUMBER() OVER (ORDER BY upper.j) FROM t1 LIMIT 1)
    FROM t1 AS upper;
SELECT (SELECT ROW_NUMBER() OVER (PARTITION BY upper.j) FROM t1 LIMIT 1)
    FROM t1 AS upper;
SELECT (SELECT ROW_NUMBER() OVER (PARTITION BY upper.j)
        FROM t1 LIMIT 1 OFFSET 1)
    FROM t1 AS upper;
SELECT (SELECT FIRST_VALUE(j) OVER (ORDER BY upper.j) FROM t1 LIMIT 1)
    FROM t1 AS upper;
SELECT (SELECT FIRST_VALUE(j) OVER (ORDER BY upper.j DESC) FROM t1 LIMIT 1)
    FROM t1 AS upper;
SELECT (SELECT FIRST_VALUE(upper.j) OVER (ORDER BY upper.j DESC)
        FROM t1 LIMIT 1)
    FROM t1 AS upper;
SELECT (SELECT LAST_VALUE(j) OVER (ORDER BY upper.j) FROM t1 LIMIT 1)
    FROM t1 AS upper;
SELECT (SELECT LAST_VALUE(j) OVER (ORDER BY upper.j DESC) FROM t1 LIMIT 1)
    FROM t1 AS upper;
SELECT * FROM t1 AS upper
    WHERE (SELECT FIRST_VALUE(upper.j) OVER (ORDER BY upper.j)
           FROM t1 LIMIT 1) = 1;
SELECT * FROM t1 AS upper
    WHERE (SELECT FIRST_VALUE(upper.j) OVER (ORDER BY upper.j)
           FROM t1 LIMIT 1) = 2;
SELECT * FROM t1 AS upper ORDER BY (0 + (SELECT FIRST_VALUE(upper.j) OVER (ORDER BY upper.j)
                                         FROM t1 LIMIT 1));
DROP TABLE t1;
CREATE TABLE t(i INT, c VARCHAR(20));
INSERT INTO t VALUES (1, 'abra'),(2, 'akaba'),(3, 'bravo'),(4, 'beg');
SELECT i, SUBSTR(c,1,2), SUM(i) OVER (PARTITION BY SUBSTR(c,1,2)) `sum` FROM t;
select I, substr(c,1,2), SUM(i) OVER (PARTITION BY SUBSTR(c,1,1)) `sum` FROM t;
DROP TABLE t;
CREATE TABLE t1( i INT, j INT);
INSERT INTO t1 VALUES (1,1),
                      (2,1),
                      (3,2),
                      (4,2),
                      (1,3),
                      (2,3),
                      (3,4),
                      (4,4);
DROP TABLE t1;
CREATE TABLE t1(a INT, b INT);
CREATE TABLE t2(c INT, d INT);
INSERT INTO t1 VALUES(1,1),(2,2);
DROP TABLE t1,t2;
CREATE TABLE t(a INT, b INT);
INSERT INTO t VALUES (5,6), (1,7);
SELECT (SELECT SUM(a) OVER ())  FROM t;
SELECT (SELECT SUM(a) OVER () FROM t LIMIT 1)  FROM t;
CREATE TABLE t2(i INT);
INSERT INTO t2 VALUES (10),(100);
SELECT (SELECT SUM(a) OVER () FROM t2 LIMIT 1)  FROM t;
DROP TABLE t, t2;
CREATE TABLE t(a INT, b INT);
INSERT INTO t VALUES (1,2), (4,5);
SELECT SUM(a) OVER () AS c FROM t ORDER BY c;
DROP TABLE t;
CREATE TABLE t(a INT, b INT, c INT);
INSERT INTO t VALUES (1,1,1),(1,2,3),(2,1,2),(2,2,3);
DROP TABLE t;
CREATE TABLE t1(i INT, j INT, k INT);
INSERT INTO t1 VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4);
DROP TABLE t1;
CREATE TABLE t(a INT, b INT, c INT, d INT);
INSERT INTO t VALUES (1,1,1,1), (2,2,4,2), (3,3,9,3);
SELECT SUM(c/d), LAST_VALUE(SUM(c/d)) OVER (ORDER BY a)  FROM t GROUP BY a,b;
SELECT 1+FIRST_VALUE(SUM(c/d)) OVER (ORDER BY a)  FROM t GROUP BY a,b;
SELECT ROW_NUMBER() OVER () rn,
       1+FIRST_VALUE(SUM(c/d)) OVER (ORDER BY a) plus_fv,
       1+LAST_VALUE(SUM(c/d)) OVER (ORDER BY a) plus_lv FROM t GROUP BY a,b;
DROP TABLE t;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1,2),(3,4);
DROP TABLE t1;
CREATE TABLE t (a INT DEFAULT NULL);
INSERT INTO t VALUES (1),(2),(3),(4),(5);
DROP TABLE t;
CREATE TABLE t (a INT DEFAULT NULL);
DROP TABLE t;
CREATE TABLE t1 (id INTEGER, sex CHAR(1), d DOUBLE);
INSERT INTO t1 VALUES (1, 'M', 1.0);
INSERT INTO t1 VALUES (2, 'F', 2.0);
INSERT INTO t1 VALUES (3, 'F', 3.0);
INSERT INTO t1 VALUES (4, 'F', 4.0);
INSERT INTO t1 VALUES (5, 'M', 5.0);
INSERT INTO t1 VALUES (10, NULL, 10.0);
INSERT INTO t1 VALUES (11, NULL, 11.0);
SELECT sex, id, PERCENT_RANK() OVER w, CUME_DIST() OVER w, SUM(d) OVER w
   FROM t1 WINDOW w AS (PARTITION BY sex ORDER BY id DESC ROWS
                        BETWEEN 1 PRECEDING AND CURRENT ROW);
DROP TABLE t1;
CREATE TABLE t(a int);
INSERT INTO t VALUES (1),(2);
DROP TABLE t;
CREATE TABLE t1 (id INTEGER, sex CHAR(1));
PREPARE p from 'SELECT sex, PERCENT_RANK() OVER (ORDER BY AVG(id) DESC)
                FROM t1 GROUP BY sex ORDER BY sex';
DROP TABLE t1;
CREATE TABLE t1 (a INT PRIMARY KEY);
CREATE TABLE t2 LIKE t1;
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES (2);
INSERT INTO t2 VALUES (1),(2);
DROP TABLE t1, t2;
CREATE TABLE t (
   col_date date
);
INSERT INTO t VALUES ('2017-01-10'), ('2017-01-18');
SELECT
   MIN(alias1.col_date) OVER () FV,
   DENSE_RANK() OVER (ORDER BY alias2.col_date
                      RANGE UNBOUNDED PRECEDING) DR,
   RANK() OVER (ORDER BY alias1.col_date
                RANGE BETWEEN INTERVAL 1 WEEK PRECEDING AND CURRENT ROW) R
   FROM (t AS alias1, t AS alias2);
DROP TABLE t;
CREATE TABLE t (a INT PRIMARY KEY, b INT);
INSERT INTO t VALUES(1, 1);
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES(1),(1),(2),(2);
CREATE TABLE t2(a INT NOT NULL);
INSERT INTO t2 VALUES(3);
SELECT t1.a, t2.a FROM t1 LEFT JOIN t2 ON 0;
DROP TABLE t, t1, t2;
CREATE TABLE t1 (id INT);
INSERT INTO t1 VALUES (1), (2), (3), (2);
CREATE INDEX idx ON t1(id);
SELECT SUM(MAX(id)) OVER (ORDER BY MAX(id)) AS ss FROM t1;
DROP TABLE t1;
CREATE TABLE t(a INT PRIMARY KEY);
INSERT INTO t VALUES (1);
DROP TABLE t;
CREATE TABLE `test`(
  `pk` INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `dt` DATETIME DEFAULT NULL,
  `ge` GEOMETRY DEFAULT NULL
);
SELECT dt, FIRST_VALUE(dt) OVER w1 fv,
           CAST(FIRST_VALUE(ge) OVER w1 AS JSON) ge FROM test WHERE `pk` = 2 WINDOW w1 AS ();
DROP TABLE `test`;
CREATE TABLE t(a int PRIMARY KEY, b date);
INSERT INTO t VALUES (1, '1979-01-01');
INSERT INTO t VALUES (2, '1979-01-02'), (3, '1979-01-03');
DROP TABLE t;
CREATE TABLE t(a int);
INSERT INTO t VALUES (1),(2);
SELECT ROW_NUMBER() OVER (ORDER BY AVG(a)) AS rn FROM t ORDER BY rn;
DROP TABLE t;
CREATE TABLE t1 (a INT PRIMARY KEY);
CREATE TABLE tno (a INT);
INSERT INTO tno VALUES(20);
INSERT INTO tno VALUES(20),(21),(21),(null);
DROP TABLE tno;
DROP TABLE t1;
CREATE TABLE t(a int, b int);
INSERT INTO t VALUES (1,2),(3,4);
SELECT 1 UNION
 (SELECT ROW_NUMBER() OVER ( ORDER BY b ) AS rn    FROM t ORDER BY b);
DROP TABLE t;
CREATE TABLE AA (
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_dec_key decimal(20,4) NOT NULL,
  col_varchar_key varchar(1) NOT NULL,
  PRIMARY KEY (pk),
  KEY col_dec_key (col_dec_key),
  KEY col_varchar_key (col_varchar_key,pk)
) ENGINE=InnoDB AUTO_INCREMENT=11;
INSERT INTO AA VALUES(10,6473.2230,'a');
CREATE TABLE D (
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_int int(11) NOT NULL,
  col_int_key int(11) NOT NULL,
  col_dec decimal(20,4) NOT NULL,
  col_dec_key decimal(20,4) NOT NULL,
  col_varchar_key varchar(1) NOT NULL,
  col_varchar varchar(1) NOT NULL,
  PRIMARY KEY (pk),
  KEY col_int_key (col_int_key),
  KEY col_dec_key (col_dec_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=latin1;
INSERT INTO D VALUES
(1,5,4,4090.3920,5170.7060,'q','q'),(2,8,3,2634.3480,695.3360,'e','e');
DROP TABLE AA, D;
CREATE TABLE G (
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_int int(11) DEFAULT NULL,
  PRIMARY KEY (pk)
) ENGINE=innodb AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
INSERT INTO G VALUES (1,7);
CREATE TABLE H (
  col_varchar_10_utf8 varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  col_varchar_10_latin1 varchar(10) DEFAULT NULL,
  pk int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (pk)
) ENGINE=innodb AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
INSERT INTO H VALUES('RDDGR','so',1);
SELECT
alias1 . col_varchar_10_latin1 AS field1,
NTH_VALUE(alias2.col_int, 4) OVER ( ORDER BY alias1.col_varchar_10_utf8 ASC )
AS field2
FROM  ( SELECT * FROM  H  ) AS  alias1  LEFT  JOIN ( SELECT * FROM  G  ) AS
alias2
ON  alias1 . pk =  alias2 . pk
WHERE  alias1 . pk = 1;
DROP TABLE G,H;
CREATE TABLE t(a int);
INSERT INTO t VALUES  (1),(2);
DROP TABLE t;
CREATE TABLE t(pk int PRIMARY KEY, col_int int, col_varchar varchar(10));
PREPARE ps FROM "SELECT
RANK() OVER ( PARTITION BY pk ORDER BY col_int, col_varchar, pk) AS rnk,
CUME_DIST() OVER ( PARTITION BY col_int ORDER BY pk ) AS c_dist
FROM t";
DROP PREPARE ps;
DROP TABLE t;
CREATE TABLE t1 (a INT, d CHAR(1));
PREPARE ps FROM "
SELECT ROW_NUMBER() OVER ( ORDER BY d ) AS rn
FROM t1
WINDOW  w1 AS ( ORDER BY d ),
        w2 AS ( ORDER BY a RANGE 5 PRECEDING )";
DROP PREPARE ps;
DROP TABLE t1;
CREATE TABLE t (a int, b int, c int);
INSERT INTO t VALUES (5,6,1),(NULL,6,1),(4,6,1),(5,6,1),(NULL,6,1);
SELECT  ROW_NUMBER() OVER ( ORDER BY a ) AS f1,
   RANK() OVER ( ORDER BY c ) AS f2,
   LEAD(c) OVER ( ORDER BY a ROWS UNBOUNDED PRECEDING ) AS f7
   FROM t;
DROP TABLE t;
CREATE TABLE t (a int, b int);
INSERT INTO t values (1,2),(3,4);
SELECT RANK() OVER w1 AS rnk FROM t
   WINDOW w1 AS (ORDER BY AVG(a))
   ORDER BY b;
DROP TABLE t;
CREATE TABLE t1(a int, b int);
CREATE TABLE t2(a int, b int);
SELECT ROW_NUMBER() OVER ( ORDER BY t1.a ) AS rn
FROM t1, t2 WHERE t1.a = 1 GROUP BY t1.a;
DROP TABLE t1,t2;
CREATE TABLE t1 (a date);
CREATE TABLE t2 (a int);
INSERT INTO t1 SELECT CURRENT_DATE();
INSERT INTO t2 VALUES (5);
DROP TABLE t1, t2;
CREATE TABLE t (a int, b varchar(10));
INSERT INTO t VALUES (1, 'are'), (2, 'not'), (3, 'have');
SELECT a AS field1, ROW_NUMBER() OVER () AS field2 FROM t
    HAVING field1 >= 2;
SELECT a AS field1, ROW_NUMBER() OVER () AS field2 FROM t
    HAVING field1 >= 2 ORDER BY field1;
DROP TABLE t;
CREATE TABLE a (pk int PRIMARY KEY, c varchar(10));
INSERT INTO a VALUES (6, 's');
CREATE TABLE b (pk int PRIMARY KEY,  c varchar(255));
INSERT INTO b VALUES (9,'s');
DROP TABLE a, b;
CREATE TABLE `B` (
  `col_varchar_255_utf8_2` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_10_latin1_2` varchar(10) DEFAULT NULL,
  `col_datetime_2` datetime DEFAULT NULL,
  `col_varchar_255_utf8` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_date` date DEFAULT NULL,
  `col_varchar_10_utf8_2` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_date_2` date DEFAULT NULL,
  `col_varchar_255_latin1_2` varchar(255) DEFAULT NULL,
  `pk` int(11) NOT NULL AUTO_INCREMENT,
  `col_int` int(11) DEFAULT NULL,
  `col_varchar_10_utf8` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_255_latin1` varchar(255) DEFAULT NULL,
  `col_datetime` datetime DEFAULT NULL,
  `col_int_2` int(11) DEFAULT NULL,
  `col_varchar_10_latin1` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`pk`)
);
CREATE TABLE `C` (
  `col_varchar_10_latin1` varchar(10) DEFAULT NULL,
  `col_varchar_255_utf8` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_255_utf8_2` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_10_utf8` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_int_2` int(11) DEFAULT NULL,
  `col_datetime_2` datetime DEFAULT NULL,
  `col_datetime` datetime DEFAULT NULL,
  `col_int` int(11) DEFAULT NULL,
  `pk` int(11) NOT NULL AUTO_INCREMENT,
  `col_varchar_255_latin1_2` varchar(255) DEFAULT NULL,
  `col_varchar_10_latin1_2` varchar(10) DEFAULT NULL,
  `col_varchar_255_latin1` varchar(255) DEFAULT NULL,
  `col_varchar_10_utf8_2` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_date_2` date DEFAULT NULL,
  `col_date` date DEFAULT NULL,
  PRIMARY KEY (`pk`)
);
SELECT DISTINCT MAX( table2.`col_varchar_255_utf8` ) AS max1 ,
                MIN( table1.`col_date` ) AS min1 ,
                AVG( table2.`col_int` ) AS avg1 ,
                MAX( table1.`col_varchar_255_utf8_2` ) AS max2 ,
                table2.`col_varchar_255_utf8`  ,
                FIRST_VALUE( table1. `col_varchar_255_utf8` )  OVER (ORDER BY MAX( table2.`col_varchar_255_utf8` ),
                                                                              MIN( table1.`col_date` ),
                                                                              AVG( table2.`col_int` ),
                                                                              MAX( table1.`col_varchar_255_utf8_2` ),
                                                                              table2.`col_varchar_255_utf8` ) AS 1st_val
    FROM  C AS table1 LEFT JOIN
          B AS table2 ON  table1.`col_int_2` < table2.`col_int_2`
    GROUP BY  table2.`col_varchar_255_utf8`,  table1.`col_varchar_255_utf8`;
DROP TABLE C,B;
CREATE TABLE t (a int PRIMARY KEY, b varchar(10), KEY idx1 (b));
INSERT INTO t VALUES (2,'b'),(1,'back'),(5,'think'),(4,'v'),(3,'y');
SELECT  LAG(b) OVER () AS wf_lag,
        ROW_NUMBER() OVER () AS wf_rn
        FROM t
        WHERE b LIKE ('_') AND a=2;
DROP TABLE t;
CREATE TABLE t1 (
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_int int(11) DEFAULT NULL,
  col_datetime datetime DEFAULT NULL,
  PRIMARY KEY (pk)
);
INSERT INTO t1 VALUES (1,8,'2004-03-26 11:59:45'),(2,-692387840,'2000-11-03
14:56:50'),(3,8,'2008-04-11 14:04:45'),(4,-660865024,'2004-08-11
07:07:20'),(5,9,'2001-04-11 00:00:00');
CREATE TEMPORARY TABLE t2 (
  pk int(11) NOT NULL AUTO_INCREMENT,
  col1 varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  PRIMARY KEY (pk)
) ENGINE=Memory;
INSERT INTO t2 VALUES (1,'ntdajwwdda');
SELECT LEAD(t2.col1, 5)
 OVER ( ORDER BY t1.col_int DESC ) as lead1 ,
t1.pk, LEAD(t1.pk, 4) OVER ( PARTITION BY t1.col_int ORDER BY t1.col_int
 ) as lead2 FROM  t1 RIGHT JOIN t2 ON t1.pk=t2.pk
WHERE  t2.pk IS NOT NULL;
DROP TABLE t1,t2;
CREATE TABLE t1 (
pk INTEGER NOT NULL AUTO_INCREMENT,
col1 varchar(255) DEFAULT NULL,
PRIMARY KEY (pk)
)DEFAULT CHARSET=latin1;
INSERT INTO t1 VALUES (1,'I\'ll'),(2,'BORKU'),(3,'HZISF'),(4,'q'),(5,'o'),
       (6,'now'),(7,'WIBYB'),(8,'could'),(9,'were'),(10,'on'),(11,'HYADL'),
       (12,'l'),(13,'asdas'),(14,'n'),(16,'my'),(17,'NNTTK'),(18,'as'),
       (19,'TOAAB'),(20,'asdas'),(21,'well'),(22,'i'),(23,'u'),(24,'e'),
       (25,'o'),(26,'c'),(28,'YLZRI'),(29,'well'),(30,'want'),(31,'with'),
       (32,'VMVLI'),(33,'right'),(34,'llotd'),(35,'DNLWV'),(36,'SIPKW'),
       (37,'o'),(38,'mean'),(39,'asdas'),(40,'asdas');
CREATE VIEW view_t1 AS SELECT * FROM t1;
DROP TABLE t1;
DROP VIEW view_t1;
CREATE TABLE t1(a int);
CREATE TABLE t2(b int);
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (3);
SELECT  RANK() OVER ( ORDER BY a ) + 1 AS rank_expr FROM t1, t2;
DROP TABLE t1,t2;
CREATE TABLE t1 (a int, b float);
INSERT INTO t1 VALUES
   (4,12),(5,2),(9,14),(12,10),(6,8),(5,7),(2,15),(2,15),(15,11),(14,5),(14,240),
   (1,10),(14,5),(5,9),(1,11),(2,5),(11,9),(13,13),(6,187),(8,12),(10,12),(15,14),
   (50,4),(14,3),(166,2),(15,13),(10,12),(48,4),(13,3),(7,10);
SELECT a, b, LEAD (b, 1) OVER (ORDER BY a,b ASC) AS c FROM t1 a ORDER BY a, b, c;
SELECT a, b, LEAD (b, 1) OVER (PARTITION BY NULL ORDER BY a,b ASC) AS c FROM t1 a ORDER BY a, b, c;
DROP TABLE t1;
CREATE TABLE CC (
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_varchar_key varchar(1) NOT NULL,
  col_varchar varchar(1) NOT NULL,
  PRIMARY KEY (pk),
  KEY col_varchar_key (col_varchar_key)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4;
INSERT INTO CC VALUES
(10,'v','v'),(18,'a','a'),(19,'v','v'),(20,'u','u'),(21,'s','s'),(22,'y','y'),
(23,'z','z'),(28,'y','y');
SELECT  MAX( col_varchar_key  )  AS field1  FROM CC  AS alias1
 HAVING field1 <>  5;
CREATE OR REPLACE VIEW v1 AS
 SELECT  MAX( col_varchar_key  )  AS field1  FROM CC  AS alias1
  HAVING field1  <>  5;
SELECT * FROM v1;
DROP VIEW v1;
DROP TABLE CC;
CREATE TABLE t(v INT);
INSERT INTO t VALUES (NULL), (3);
DROP TABLE t;
CREATE TABLE t1(a TEXT);
INSERT INTO t1 VALUES('1');
DROP TABLE t1;
CREATE TABLE t1(a DECIMAL(4,2));
INSERT INTO t1 VALUES(1);
DROP TABLE t1;
CREATE TABLE t1(a REAL);
INSERT INTO t1 VALUES(1.0);
DROP TABLE t1;
CREATE TABLE t1(a TIME);
INSERT INTO t1 VALUES('00:00:01');
DROP TABLE t1;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES(1);
DROP TABLE t1;
CREATE TABLE t1(a JSON);
INSERT INTO t1 VALUES('1');
DROP TABLE t1;
CREATE TABLE t1 (i INTEGER);
INSERT INTO t1 values (1);
INSERT INTO t1 values (1);
INSERT INTO t1 values (2);
INSERT INTO t1 values (2);
INSERT INTO t1 values (3);
INSERT INTO t1 values (3);
INSERT INTO t1 values (4);
INSERT INTO t1 values (4);
DROP TABLE t1;
CREATE TABLE t(a INT, b INT);
INSERT INTO t VALUES (1,1), (1,2), (2,3), (2,4), (2,5), (2,6), (3,7), (3,11), (4,8);
SELECT * FROM (SELECT b, RANK() OVER (ORDER BY b) AS c FROM t GROUP BY a,b) s1 UNION
              (SELECT b, MAX(a) AS c FROM t GROUP BY a,b ) ORDER BY b;
DROP TABLE t;
CREATE TABLE t (col_int int);
INSERT INTO t VALUES
(7),(184),(12),(8),(14),(14),(2),(11),(6),(113),(4),(9),(2),(6),(10),(178),(1)
,(2),(8),(204),(4),(15),(7),(253),(14),(3),(10),(11),(15),(15);
DROP TABLE t;
CREATE TABLE t1(a INT, b CHAR(1), c DATETIME, d BLOB);
INSERT INTO t1 VALUES (1,'x','2010-01-01','blob'), (2, 'y', '2011-01-01', ''),
(3, 'y', '2012-01-01', ''), (4, 't', '2012-01-01', 'blob'),
(5, null, '2013-01-01', null);
DROP TABLE t1;
CREATE TABLE t1 (pk int NOT NULL, col_int int DEFAULT NULL);
CREATE TABLE t2 (pk int NOT NULL AUTO_INCREMENT PRIMARY KEY,
                 col_int int DEFAULT NULL,
                 col_int2 int DEFAULT NULL);
INSERT INTO t1 VALUES (1,88), (2,99);
INSERT INTO t2 VALUES (1,2,3) , (4,5,6);
SELECT ROW_NUMBER() OVER (ORDER BY t2.col_int) AS rn,
       COUNT(DISTINCT t1.col_int) AS cnt,
       SUM(DISTINCT t1.col_int) AS `sum`
   FROM t1 LEFT JOIN t2 ON t1.pk = t2.pk WHERE t1.pk IN (1)
   GROUP BY t1.pk;
SELECT ROW_NUMBER() OVER () AS rn,
       COUNT(DISTINCT t1.col_int) AS cnt,
       SUM(DISTINCT t1.col_int) AS `sum`
   FROM t1 LEFT JOIN t2 ON t1.pk = t2.pk WHERE t1.pk IN (1)
   GROUP BY t1.pk;
SELECT ROW_NUMBER() OVER (),
       FIRST_VALUE(SUM(DISTINCT t1.col_int)) OVER (ORDER BY t1.pk),
       FIRST_VALUE(SUM(DISTINCT t1.col_int) + 1) OVER (ORDER BY t1.pk),
       SUM(DISTINCT t1.col_int),
       RANK() OVER (ORDER BY t1.pk)
   FROM t1 LEFT JOIN t2 ON t1.pk = t2.pk WHERE t1.pk IN (1)
   GROUP BY t1.pk;
DROP TABLE t1, t2;
CREATE TABLE t(a int);
INSERT INTO t VALUES (NULL), (1), (3), (6), (10);
CREATE VIEW v1 AS
  SELECT STDDEV_SAMP(a) OVER ( ORDER BY a ROWS CURRENT ROW) AS std_dev_samp FROM t;
SELECT STDDEV_SAMP(a) OVER ( ORDER BY a ROWS CURRENT ROW ) AS std_dev_samp FROM t;
SELECT * FROM v1;
CREATE OR REPLACE VIEW v1 AS SELECT STDDEV_SAMP(a) FROM  t;
SELECT STDDEV_SAMP(a) FROM t;
SELECT * FROM v1;
DROP VIEW v1;
DROP TABLE t;
CREATE TABLE t1(c1 int, c2 int);
CREATE TABLE t2(c1 int, c2 int);
INSERT INTO t1 VALUES
(1,-1208352768),(2,NULL),(3,212140032),(4,5),(5,3),(6,NULL),(7,1),(8,9),
(9,-1563688960),(10,-288358400),(11,NULL),(12,9),(13,9),(14,NULL),(15,NULL),
(16,NULL),(17,5),(18,1),(19,4),(20,0),(21,-2036334592),(22,1),
(23,1961558016),(24,0),(25,NULL);
INSERT INTO t2 VALUES
(1,553648128),(2,0),(3,3),(4,8),(5,1662844928),(6,0),(7,NULL),
(8,7),(9,NULL),(10,NULL);
SELECT RANK() OVER ( ORDER BY MIN( t2 . c1 ) + MAX( t1 . c2 )  ) AS rnk
   FROM t1 RIGHT OUTER JOIN t2 ON t1.c1 = t2.c2
   ORDER BY rnk;
DROP TABLE t1, t2;
CREATE TABLE te2 (c1 int, c2 int) ENGINE=Memory;
INSERT INTO te2 VALUES(1,1351614464 );
PREPARE ps FROM "SELECT  AVG(c2)  OVER ( ) AS res FROM  te2";
CREATE PROCEDURE p1() SELECT  AVG(c2)  OVER ( ) AS res FROM  te2;
DROP PROCEDURE p1;
DROP TABLE te2;
CREATE TABLE `A` (
  `col_varchar_10_utf8` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_10_latin1_key` varchar(10) DEFAULT NULL,
  `col_int` int(11) DEFAULT NULL,
  `col_date` date DEFAULT NULL,
  `col_date_key` date DEFAULT NULL,
  `col_varchar_255_utf8` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `pk` int(11) NOT NULL AUTO_INCREMENT,
  `col_varchar_255_latin1` varchar(255) DEFAULT NULL,
  `col_datetime_key` datetime DEFAULT NULL,
  `col_varchar_10_utf8_key` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_255_utf8_key` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_10_latin1` varchar(10) DEFAULT NULL,
  `col_datetime` datetime DEFAULT NULL,
  `col_varchar_255_latin1_key` varchar(255) DEFAULT NULL,
  `col_int_key` int(11) DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `col_varchar_10_latin1_key` (`col_varchar_10_latin1_key`),
  KEY `col_date_key` (`col_date_key`),
  KEY `col_datetime_key` (`col_datetime_key`),
  KEY `col_varchar_10_utf8_key` (`col_varchar_10_utf8_key`),
  KEY `col_varchar_255_utf8_key` (`col_varchar_255_utf8_key`),
  KEY `col_varchar_255_latin1_key` (`col_varchar_255_latin1_key`),
  KEY `col_int_key` (`col_int_key`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
CREATE TABLE `AA` (
  `col_datetime` datetime DEFAULT NULL,
  `col_date` date DEFAULT NULL,
  `col_varchar_255_latin1` varchar(255) DEFAULT NULL,
  `col_varchar_255_utf8_key` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_datetime_key` datetime DEFAULT NULL,
  `col_int` int(11) DEFAULT NULL,
  `col_varchar_255_utf8` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_date_key` date DEFAULT NULL,
  `col_varchar_255_latin1_key` varchar(255) DEFAULT NULL,
  `col_varchar_10_utf8_key` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_10_latin1_key` varchar(10) DEFAULT NULL,
  `pk` int(11) NOT NULL AUTO_INCREMENT,
  `col_varchar_10_latin1` varchar(10) DEFAULT NULL,
  `col_varchar_10_utf8` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_int_key` int(11) DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `col_varchar_255_utf8_key` (`col_varchar_255_utf8_key`),
  KEY `col_datetime_key` (`col_datetime_key`),
  KEY `col_date_key` (`col_date_key`),
  KEY `col_varchar_255_latin1_key` (`col_varchar_255_latin1_key`),
  KEY `col_varchar_10_utf8_key` (`col_varchar_10_utf8_key`),
  KEY `col_varchar_10_latin1_key` (`col_varchar_10_latin1_key`),
  KEY `col_int_key` (`col_int_key`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
CREATE TABLE `B` (
  `pk` int(11) NOT NULL AUTO_INCREMENT,
  `col_int` int(11) DEFAULT NULL,
  `col_varchar_255_utf8_key` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_datetime` datetime DEFAULT NULL,
  `col_varchar_255_latin1_key` varchar(255) DEFAULT NULL,
  `col_datetime_key` datetime DEFAULT NULL,
  `col_varchar_255_utf8` varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_10_utf8_key` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_10_latin1_key` varchar(10) DEFAULT NULL,
  `col_date` date DEFAULT NULL,
  `col_varchar_10_utf8` varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  `col_varchar_255_latin1` varchar(255) DEFAULT NULL,
  `col_varchar_10_latin1` varchar(10) DEFAULT NULL,
  `col_int_key` int(11) DEFAULT NULL,
  `col_date_key` date DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `col_varchar_255_utf8_key` (`col_varchar_255_utf8_key`),
  KEY `col_varchar_255_latin1_key` (`col_varchar_255_latin1_key`),
  KEY `col_datetime_key` (`col_datetime_key`),
  KEY `col_varchar_10_utf8_key` (`col_varchar_10_utf8_key`),
  KEY `col_varchar_10_latin1_key` (`col_varchar_10_latin1_key`),
  KEY `col_int_key` (`col_int_key`),
  KEY `col_date_key` (`col_date_key`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
ALTER TABLE A ADD COLUMN col_varchar_10_latin1_gckey VARCHAR(20) GENERATED ALWAYS AS (CONCAT(col_varchar_10_latin1_key,'x')) VIRTUAL;
ALTER TABLE B ADD COLUMN col_int_gckey INT GENERATED ALWAYS AS (col_int_key + col_int_key) VIRTUAL;
ALTER TABLE B ADD COLUMN col_varchar_255_utf8_gckey TEXT GENERATED ALWAYS AS (CONCAT(col_varchar_255_utf8_key,'x')) VIRTUAL;
SELECT
   PERCENT_RANK() OVER ( PARTITION BY  alias1 . `col_int`,
                                       alias2 . `col_int`,
                                       alias1 . `col_int_key`,
                                       alias1 . `col_varchar_10_utf8_key`
                         ORDER BY  alias1 . `col_varchar_255_utf8_key`,
                                   alias1 . `col_varchar_10_latin1_gckey`,
                                   alias2 . `col_varchar_255_utf8_gckey`,
                                   alias1 . `pk`
                         ROWS 430 PRECEDING  ) AS pr
   FROM  A AS alias1  RIGHT OUTER JOIN
            B AS alias2
            LEFT  JOIN
            AA AS alias3
            ON  alias2 . `col_int_key` =  alias3 . `pk`
         ON  alias1 . `pk` =  alias2 . `col_int_gckey`
   WHERE  alias2 . `pk` > 5 AND alias2 . `pk` <= ( 5 + 5 )
      AND alias2 . `pk` > 5 AND alias2 . `pk` <= ( 5 + 2 )
      AND alias3 . `pk`  IN (5, 0)
      AND alias3 . `pk` >= 5
      AND alias3 . `pk` < ( 8 + 4 )
      AND alias1 . `col_int` >= 5
      AND alias1 . `col_int` <= ( 4 + 0 )
      OR  alias2 . `col_int` != 5
      OR  alias3 . `col_int` <> 7
      OR  alias3 . `col_int` >= 5
      AND alias3 . `col_int` < ( 5 + 2 )
   ORDER BY pr  LIMIT 1000 OFFSET 4;
DROP TABLE `A`, `AA`, `B`;
CREATE TABLE t (a INT, b INT);
INSERT INTO t VALUES(1,2),(3,4),(4,6),(4,7);
DROP TABLE t;
CREATE TABLE t (
col_int INT,
pk INT NOT NULL AUTO_INCREMENT,
col_int_key INT GENERATED ALWAYS AS (col_int+col_int)
VIRTUAL, PRIMARY KEY (pk));
INSERT INTO t (col_int, pk) VALUES
(7,6),(6,5),(4,4),(3,3),(2,2),(1,1);
PREPARE ps FROM  "SELECT AVG(col_int_key) OVER () FROM t
WHERE pk=3 GROUP BY col_int_key";
PREPARE ps FROM "SELECT AVG(12) OVER () FROM dual";
DROP PREPARE ps;
DROP TABLE t;
SELECT 0 & (SUM(1) OVER w) FROM (select 1) as dt  WINDOW w as ();
SELECT 1 & (SUM(1) OVER w) FROM (select 1) as dt  WINDOW w as ();
CREATE TABLE t(a int);
INSERT INTO t VALUES
(NULL),(NULL),(NULL),(NULL),(NULL),
(NULL),(NULL),(NULL),(NULL),(NULL),
(-1802764288),(-1438121984),(-1237843968),
(6),(9),(10),(11),(12),(13),(15),
(476839936),(780206080),(1887961088);
CREATE TABLE twf AS SELECT RANK() OVER ( ORDER BY a ) AS rnk FROM t  GROUP BY a;
SELECT RANK() OVER ( ORDER BY a ) AS rnk FROM t GROUP BY a;
SELECT * FROM twf WHERE rnk IN (SELECT RANK() OVER ( ORDER BY a ) AS rnk FROM
t  GROUP BY a);
SELECT * FROM twf WHERE rnk NOT IN (SELECT RANK() OVER ( ORDER BY a ) AS rnk
FROM t  GROUP BY a);
DROP TABLE twf,t;
CREATE TABLE employee(department_id INT, salary INT);
INSERT INTO employee VALUES (10, NULL),
                            (10, 100000),
                            (10, 60000),
                            (10, 60000),
                            (10, 70000),
                            (20, 80000),
                            (20, 65000),
                            (20, 65000),
                            (30, 300000),
                            (30, 70000),
                            (NULL, 75000);
SELECT department_id, salary,
       RANK() OVER w AS rnk,
       DENSE_RANK() OVER w AS dense,
       NTILE(4) over w AS ntil,
       CUME_DIST() OVER w AS cume,
       PERCENT_RANK() over w AS `%rnk`
  FROM employee
  WINDOW w AS (PARTITION BY department_id
               ORDER BY salary DESC)
  ORDER BY department_id, salary DESC, ntil;
SELECT department_id, salary,
       RANK() OVER w AS rnk,
       DENSE_RANK() OVER w AS dense,
       NTILE(4) over w AS ntil,
       CUME_DIST() OVER w AS cume,
       PERCENT_RANK() over w AS `%rnk`
  FROM employee
  WINDOW w AS (ORDER BY salary DESC)
  ORDER BY salary DESC, department_id, ntil;
DROP TABLE employee;
CREATE TABLE t(a INT);
INSERT INTO t VALUES (1), (2), (3), (4);
SELECT ISNULL(COS(RANK() OVER())) FROM t;
DROP TABLE t;
CREATE TABLE t1 (
  pk int NOT NULL DEFAULT '0',
  col_int int DEFAULT NULL,
  col_int_key int DEFAULT NULL
);
INSERT INTO t1 VALUES
  (1,4,858718208),          (2,-28508160,723386368),
  (3,6,3),                  (4,828112896,-409141248),
  (5,1454702592,856424448), (6,7,7),
  (7,2,4),                  (8,7,4),
  (9,1990590464,8),         (10,-538705920,2),
  (11,7,2002124800),        (12,776273920,-1472200704),
  (13,7,8),                 (14,0,952041472),
  (15,9,-427819008),        (16,8,-686096384),
  (17,397934592,7),         (18,-768671744,6),
  (19,3,5),                 (20,1533739008,5),
  (21,1,-1301872640),       (22,798425088,4),
  (23,5,-561971200),        (24,9,-1901854720),
  (25,9,811401216),         (26,1856700416,0),
  (27,7,4),                 (28,9,-1491992576),
  (29,9,1),                 (30,1724252160,7);
SELECT MIN(table2.pk) + table2.col_int AS part_expr,
       DENSE_RANK() OVER (PARTITION BY MIN(table2.pk) + table2.col_int
                          ORDER BY  table1.col_int_key) AS field1
  FROM  t1 AS table1 LEFT JOIN t1 AS table2
        ON table1.pk = table2.col_int
  GROUP BY table2.col_int, table1.col_int_key;
DROP TABLE t1;
CREATE TABLE E (
  col_int int(11) DEFAULT NULL,
  col_varchar_10_utf8 varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_varchar_10_latin1 varchar(10) DEFAULT NULL,
  col_varchar_255_utf8 varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  col_varchar_255_latin1 varchar(255) DEFAULT NULL,
  col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL,
  col_varchar_255_utf8_key varchar(255) CHARACTER SET utf8mb3
   GENERATED ALWAYS AS
   (concat(repeat(col_varchar_10_utf8,3),repeat(col_varchar_10_utf8,3)))
   VIRTUAL,
  col_varchar_255_latin1_key varchar(255)
   GENERATED ALWAYS AS
   (concat(repeat(col_varchar_10_latin1,3),repeat(col_varchar_10_latin1,3)))
   VIRTUAL,
  col_varchar_10_utf8_key varchar(10) CHARACTER SET utf8mb3
   GENERATED ALWAYS AS
   (repeat(substr(col_varchar_10_utf8,-(1)),5)) VIRTUAL,
  col_varchar_10_latin1_key varchar(10) GENERATED ALWAYS AS
   (repeat(substr(col_varchar_10_latin1,-(1)),7)) VIRTUAL,
  PRIMARY KEY (pk DESC),
  UNIQUE KEY ucover_key1
   (pk DESC, col_int_key DESC, col_varchar_255_utf8_key DESC,
    col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC,
    col_varchar_10_latin1_key DESC),
  UNIQUE KEY ucover_key2
   (pk, col_int_key, col_varchar_255_utf8_key, col_varchar_255_latin1_key,
    col_varchar_10_utf8_key, col_varchar_10_latin1_key),
  KEY col_int_key (col_int_key DESC),
  KEY col_varchar_255_utf8_key (col_varchar_255_utf8_key DESC),
  KEY col_varchar_255_latin1_key (col_varchar_255_latin1_key DESC),
  KEY col_varchar_10_utf8_key (col_varchar_10_utf8_key DESC),
  KEY col_varchar_10_latin1_key (col_varchar_10_latin1_key),
  KEY multi_key1 (col_int_key DESC, col_varchar_10_latin1_key),
  KEY multi_key1a (col_int_key DESC, col_varchar_10_latin1_key DESC),
  KEY multi_key2 (col_int_key,col_int DESC),
  KEY multi_key3 (col_varchar_255_utf8_key DESC, col_varchar_255_utf8),
  KEY multi_key4 (col_varchar_255_latin1_key, col_varchar_255_latin1),
  KEY multi_key5 (pk DESC,col_int_key DESC, col_varchar_10_latin1_key),
  KEY cover_key1
   (pk DESC,col_int_key DESC, col_varchar_255_utf8_key,
    col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC,
    col_varchar_10_latin1_key)
);
INSERT INTO E (col_int, col_varchar_10_utf8, pk, col_varchar_10_latin1,
               col_varchar_255_utf8, col_varchar_255_latin1)
 VALUES
 (NULL,NULL,10,'this','really','mxwcftedxq'),
 (22216704,'159973376',9,'l','mean','cidtumxwcf'),
 (-693376,'1',8,'of','gqmwcidtum','qmwcidtumx'),
 (-183840,'5',7,'xnvgqmwcid','b','nvgqmwcidt'),
 (2,NULL,6,'is','f','gxqxnvgqmw'),
 (4,NULL,5,'xdoygxqxnv','h','good'),
 (3,'1074462720',4,'z','cjxdoygxqx','m'),
 (-584581120,'-1176634',3,'urqdhj','rhjxdo','but'),
 (-19295040,'1235025920',2,'svasurqdhu','can','a'),
 (9,'951910400',1,'qlzsvasurq','lzsvasurqd','in');
CREATE TABLE C (
  col_int int(11) DEFAULT NULL,
  col_varchar_10_utf8 varchar(10) CHARACTER SET utf8mb3 DEFAULT NULL,
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_varchar_10_latin1 varchar(10) DEFAULT NULL,
  col_varchar_255_utf8 varchar(255) CHARACTER SET utf8mb3 DEFAULT NULL,
  col_varchar_255_latin1 varchar(255) DEFAULT NULL,
  col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL,
  col_varchar_255_utf8_key varchar(255) CHARACTER SET utf8mb3
  GENERATED ALWAYS AS
   (concat(repeat(col_varchar_10_utf8,3),repeat(col_varchar_10_utf8,3)))
   VIRTUAL,
  col_varchar_255_latin1_key varchar(255) GENERATED ALWAYS AS
   (concat(repeat(col_varchar_10_latin1,3),repeat(col_varchar_10_latin1,3)))
   VIRTUAL,
  col_varchar_10_utf8_key varchar(10) CHARACTER SET utf8mb3 GENERATED ALWAYS AS
   (repeat(substr(col_varchar_10_utf8,-(1)),5)) VIRTUAL,
  col_varchar_10_latin1_key varchar(10) GENERATED ALWAYS AS
   (repeat(substr(col_varchar_10_latin1,-(1)),7)) VIRTUAL,
  PRIMARY KEY (pk DESC),
  UNIQUE KEY ucover_key1
   (pk DESC, col_int_key DESC, col_varchar_255_utf8_key DESC,
    col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC,
    col_varchar_10_latin1_key DESC),
  UNIQUE KEY ucover_key2
   (pk, col_int_key, col_varchar_255_utf8_key, col_varchar_255_latin1_key,
    col_varchar_10_utf8_key, col_varchar_10_latin1_key),
  KEY col_int_key (col_int_key DESC),
  KEY col_varchar_255_utf8_key (col_varchar_255_utf8_key DESC),
  KEY col_varchar_255_latin1_key (col_varchar_255_latin1_key DESC),
  KEY col_varchar_10_utf8_key (col_varchar_10_utf8_key DESC),
  KEY col_varchar_10_latin1_key (col_varchar_10_latin1_key),
  KEY multi_key1 (col_int_key DESC, col_varchar_10_latin1_key),
  KEY multi_key1a (col_int_key DESC, col_varchar_10_latin1_key DESC),
  KEY multi_key2 (col_int_key, col_int DESC),
  KEY multi_key3 (col_varchar_255_utf8_key DESC, col_varchar_255_utf8),
  KEY multi_key4 (col_varchar_255_latin1_key, col_varchar_255_latin1),
  KEY multi_key5
   (pk DESC, col_int_key DESC, col_varchar_10_latin1_key),
  KEY cover_key1
   (pk DESC, col_int_key DESC, col_varchar_255_utf8_key,
    col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC,
    col_varchar_10_latin1_key)
);
INSERT INTO C
 (col_int, col_varchar_10_utf8, pk, col_varchar_10_latin1,
 col_varchar_255_utf8, col_varchar_255_latin1)
 VALUES
 (5,'pmfyvvuqvt',6,'so','he','mfyvvuq'),
 (5,'q',5,'iwsgpmfyvv','wsgpmf','s'),
 (9,'oeiwsgpmfy',4,'at','can','come'),
 (-108947046,'kkoeiwsgpm',3,'koeiwsgpmf','o','t'),
 (NULL,'p',2,'ukkoeiwsgp','now','is'),
 (NULL,'now',1,'up','u','u');
CREATE VIEW view_E AS SELECT * FROM E;
SELECT  MAX( alias1 .col_int )  AS field1  FROM view_E  AS alias1  LEFT
JOIN C  AS alias2  ON alias1 .col_int  = alias2 .pk  WHERE alias1 .pk
IN (  5  )  HAVING field1  <=  6;
SELECT * FROM (SELECT MAX( alias1.col_int) AS field1 FROM view_E AS alias1
                 LEFT JOIN C                                       AS alias2
                 ON alias1 .col_int  = alias2 .pk
                 WHERE alias1 .pk IN (5)  HAVING field1  <=  6) s1;
SELECT * FROM (SELECT MAX( alias1.col_int) AS field1 FROM view_E AS alias1
                 LEFT JOIN C                                       AS alias2
                 ON alias1 .col_int  = alias2 .pk
                 WHERE alias1 .pk IN (5)  HAVING MAX(alias1 .col_int) <=  6) s1;
DROP TABLE E,C;
DROP VIEW view_E;
CREATE TABLE t(a JSON NOT NULL);
DROP TABLE t;
CREATE TABLE t(a INTEGER);
INSERT INTO t VALUES (1), (2), (3);
DROP TABLE t;
CREATE TABLE t (
  b VARCHAR(20) DEFAULT NULL,
  d INT DEFAULT NULL);
INSERT INTO t VALUES(1,-1);
INSERT INTO t VALUES(1,-1);
SELECT b,d,LAST_VALUE(b) OVER(ORDER BY d RANGE BETWEEN 1 FOLLOWING AND
                              UNBOUNDED FOLLOWING) FROM t;
DROP TABLE t;
CREATE TABLE t(w INT);
INSERT INTO t VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9);
PREPARE stmt FROM "SELECT w, SUM(w) OVER (ROWS 3.14 PRECEDING) FROM t";
PREPARE stmt FROM "SELECT w, SUM(w) OVER (ROWS ? PRECEDING) FROM t";
DROP PREPARE stmt;
DROP TABLE t;
CREATE TABLE t(a INTEGER NOT NULL);
INSERT INTO t VALUES ('1'), ('2'), ('3');
SELECT LEAD(a,1) OVER() FROM t GROUP BY a WITH ROLLUP;
DROP TABLE t;
CREATE TABLE t(
 a INTEGER,
 b BLOB,
 PRIMARY KEY (b(1))
);
INSERT INTO t(b) VALUES('a'),('b'),('c'),('d');
DROP TABLE t;
CREATE TABLE t(a INT);
DROP TABLE t;
CREATE TABLE t1 (i INTEGER);
INSERT INTO t1 VALUES (1),(1),(2);
SELECT * FROM
    (SELECT LEAD(i) OVER w AS a, i AS b FROM t1
     WINDOW w AS
     (ORDER BY i ROWS CURRENT ROW))
AS t WHERE a = b;
DROP TABLE t1;
CREATE TABLE sales(id INT AUTO_INCREMENT PRIMARY KEY, `date` DATE, sale INT);
INSERT INTO sales(`date`, sale) VALUES
  ('2017-03-01', 200),
  ('2017-04-01', 300),
  ('2017-05-01', 400),
  ('2017-06-01', 200),
  ('2017-07-01', 600),
  ('2017-08-01', 100),
  ('2017-03-01', 400),
  ('2017-04-01', 300),
  ('2017-05-01', 500),
  ('2017-06-01', 400),
  ('2017-07-01', 600),
  ('2017-08-01', 150);
SELECT MONTH(date), SUM(sale),
       AVG(SUM(sale)) OVER w AS sliding_avg FROM sales GROUP BY MONTH(date)
WINDOW w AS (ORDER BY MONTH(date)
             RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)
ORDER BY AVG(SUM(sale)) OVER (ORDER BY MONTH(date)
                              RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING),
         MONTH(date);
DROP TABLE sales;
SELECT FROM_UNIXTIME(LAG('',99)OVER(ROWS UNBOUNDED PRECEDING),'%I %l %I');
SELECT ((NTILE(70)OVER())<<(FROM_UNIXTIME(LEAD('',67) RESPECT NULLS
                                      OVER(),SHA(''))));
CREATE TABLE t1 (
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_int int(11) DEFAULT NULL,
  PRIMARY KEY (pk)
);
INSERT INTO t1 VALUES (1,NULL),(2,4),(3,-501481472),(4,NULL),(5,3);
CREATE TABLE t2 (
  col_int_key int(11) DEFAULT NULL,
  KEY col_int_key (col_int_key)
);
INSERT INTO t2 VALUES (NULL),(NULL),(NULL),(NULL),(5),(5);
SELECT FIRST_VALUE( alias1.pk ) OVER
       (ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) AS field1
   FROM  t1 AS alias1 RIGHT JOIN t2 AS alias2
         ON  alias1.pk = alias2.col_int_key;
SELECT FIRST_VALUE( alias1.pk ) OVER
       (ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) AS field1
   FROM  t1 AS alias1 RIGHT JOIN t2 AS alias2
         ON  alias1.pk > alias2.col_int_key;
SELECT ROW_NUMBER() OVER () AS `row#`,
       FIRST_VALUE( alias1.pk ) OVER
       (ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) AS field1
   FROM  t1 AS alias1 RIGHT JOIN t2 AS alias2
         ON  alias1.pk = alias2.col_int_key;
DROP TABLE t1, t2;
SELECT ((MAKETIME(((QUARTER('| !*c>*{/'))<=>
               (FIRST_VALUE(JSON_OBJECTAGG('key4',0x067c13d0d0d7d8c8d768aef7)
                    )OVER())),'9236-05-27',0xe2a7d4))^(0x1109));
SELECT JSON_LENGTH(FIRST_VALUE(JSON_OBJECTAGG('key2','*B'))OVER());
CREATE TABLE t1 (i INTEGER);
DROP TABLE t1;
CREATE TABLE t(a INT, b INT);
INSERT INTO t VALUES (1,1),
                     (2,1),
                     (3,2),
                     (4,2),
                     (5,3),
                     (6,3);
SELECT a, b,
       LAST_VALUE(a) OVER (ORDER BY b,a) AS `last` FROM t;
SELECT a, b,
       LAST_VALUE(a) OVER (ORDER BY b,a
                           RANGE BETWEEN UNBOUNDED PRECEDING AND
                                 CURRENT ROW) AS `last`
  FROM t;
INSERT INTO t VALUES (1,1),
                     (4,2),
                     (NULL, 2),
                     (NULL, NULL),
                     (2, NULL);
SELECT a, b, COUNT(a) OVER w AS cnt,
       COUNT(*) OVER w AS `cnt(*)`,
       FIRST_VALUE(a) OVER w AS first,
       LAST_VALUE (a) OVER w AS last
  FROM t WINDOW w AS (ORDER BY b,a DESC);
SELECT a, b, COUNT(a) OVER w AS cnt,
       COUNT(*) OVER w AS `cnt(*)`,
       FIRST_VALUE(a) OVER w AS first,
       LAST_VALUE (a) OVER w AS last
  FROM t WINDOW w AS (ORDER BY b,a DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW);
SELECT a, b, COUNT(a) OVER w AS cnt,
       COUNT(*) OVER w AS `cnt(*)`,
       FIRST_VALUE(a) OVER w AS first,
       LAST_VALUE (a) OVER w AS last
  FROM t WINDOW w AS (ORDER BY b,a DESC
                      RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING);
DROP TABLE t;
SELECT IFNULL((JSON_TYPE(@c)),(FIRST_VALUE(@b)OVER()));
CREATE TABLE t(a INTEGER);
INSERT INTO t VALUES(1),(2),(3),(4);
SELECT PERCENT_RANK() OVER(),
       LAG(1,35,1) OVER w2
FROM t
WINDOW w1 AS (ROWS UNBOUNDED PRECEDING),
       w2 AS (ROWS BETWEEN 18446744073709551615 FOLLOWING AND 1 FOLLOWING);
DROP TABLE t;
CREATE TABLE t(a INT);
INSERT INTO t VALUES (3), (10), (100), (103);
DROP TABLE t;
CREATE TABLE t (a INT,b INT);
INSERT INTO t(a) VALUES(2147483647),(0),(-2),(-1),(0);
INSERT INTO t(a) VALUES(5430600),(0),(-91),(2147483647),(0);
INSERT INTO t(a) VALUES(-1),(0),(-26164),(37583),(-1),(79);
DROP TABLE t;
CREATE PROCEDURE p1(n INT) DO NTILE(n) OVER();
DROP PROCEDURE p1;
PREPARE stmt FROM 'DO NTILE(?) OVER()';
CREATE PROCEDURE p2(n INT) DO LEAD(1, n) OVER();
DROP PROCEDURE p2;
CREATE PROCEDURE p3(n INT) DO LAG(1, n) OVER();
DROP PROCEDURE p3;
PREPARE stmt FROM 'DO LAG(1, ?) OVER()';
PREPARE stmt FROM 'DO LEAD(1, ?) OVER()';
CREATE TABLE `t1` (`c1` INT, `c2` INT, `c3` CHAR(255), `c4` CHAR(255));
INSERT INTO t1 VALUES
(1,1,'t1','t1'), (2,2,'t1','t1'), (3,3,'t1','t1'), (4,4,'t1','t1'), (5,5,'t1','t1'),
(6,6,'t1','t1'), (7,7,'t1','t1'), (8,8,'t1','t1'), (9,9,'t1','t1'), (10,10,'t1','t1'),
(11,11,'t1','t1'), (12,12,'t1','t1'), (13,13,'t1','t1'), (14,14,'t1','t1'), (15,15,'t1','t1'),
(16,16,'t1','t1'), (17,17,'t1','t1'), (18,18,'t1','t1'), (19,19,'t1','t1'), (20,20,'t1','t1'),
(21,21,'t1','t1'), (22,22,'t1','t1'), (23,23,'t1','t1'), (24,24,'t1','t1'), (25,25,'t1','t1');
SELECT * FROM (SELECT c2, c3, c4, SUM(c1) OVER (PARTITION BY c2) AS wcol FROM t1)o WHERE c2=10;
SELECT * FROM (SELECT c2, c3, c4, SUM(c1) OVER (PARTITION BY c2) AS wcol FROM t1)o WHERE c2=10;
DROP TABLE t1;
SELECT (3.14 DIV (
  FIRST_VALUE(
    FROM_DAYS(2486378174430980553)
  )
  OVER()
  )
);
SELECT (3.14 DIV (
  NTH_VALUE(
    FROM_DAYS(2486378174430980553), 1
  )
  OVER()
  )
);
