SELECT 'end of proc';
drop table t1, t2;
CREATE TABLE t_bug_12490(a int);
DROP TABLE t_bug_12490;
drop function if exists bug11834_1;
drop function if exists bug11834_2;
drop procedure if exists bug12712;
drop function if exists bug12712;
create procedure bug12712()
  set session autocommit = 0;
select @@autocommit;
select @@autocommit;
create table t1 (s1 int);
select s1 from t1;
drop table t1;
drop function if exists bug12329;
create table t1 as select 1 a;
create table t2 as select 1 a;
drop table t1, t2;
create database mysqltest1;
drop database mysqltest1;
DROP PROCEDURE IF EXISTS bug13037_p1;
DROP PROCEDURE IF EXISTS bug13037_p2;
DROP PROCEDURE IF EXISTS bug13037_p3;
create database mysqltest1;
create database mysqltest2;
drop database mysqltest1;
create procedure p2() select version();
drop database mysqltest2;
drop function if exists bug11555_1;
drop function if exists bug11555_2;
drop view if exists v1, v2, v3, v4;
create table t1 (i int);
drop table t1;
create table t1 (i int);
create table t2 (i int);
create view v1 as select * from t1;
drop table t2;
insert into v1 values (1);
insert into v1 values (2);
drop table t1;
drop view v1;
create procedure ` bug15658`() select 1;
drop procedure ` bug15658`;
drop function if exists bug14270;
drop table if exists t1;
create table t1 (s1 int primary key);
drop table t1;
CREATE TABLE t1 (i INT);
CREATE PROCEDURE bug20953() CREATE VIEW v AS SELECT 1 FROM (SELECT 1) AS d1;
DROP PROCEDURE bug20953;
DROP TABLE t1;
drop tables if exists t1;
drop procedure if exists bug24491;
create table t1 (id int primary key auto_increment, value varchar(10));
insert into t1 (id, value) values (1, 'FIRST'), (2, 'SECOND'), (3, 'THIRD');
create procedure bug24491()
  insert into t1 (id, value) select * from (select 4 as i, 'FOURTH' as v) as y on duplicate key update v = 'DUP';
drop procedure bug24491;
create procedure bug24491()
  insert into t1 (id, value) select * from (select 4 as id, 'FOURTH' as value) as y on duplicate key update y.value = 'DUP';
drop procedure bug24491;
drop tables t1;
DROP FUNCTION IF EXISTS bug18914_f1;
DROP FUNCTION IF EXISTS bug18914_f2;
DROP PROCEDURE IF EXISTS bug18914_p1;
DROP PROCEDURE IF EXISTS bug18914_p2;
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1 (i INT);
CREATE PROCEDURE bug18914_p1() CREATE TABLE t2 (i INT);
CREATE PROCEDURE bug18914_p2() DROP TABLE IF EXISTS no_such_table;
INSERT INTO t1 VALUES (1);
DROP PROCEDURE bug18914_p1;
DROP PROCEDURE bug18914_p2;
DROP TABLE t1;
drop table if exists bogus_table_20713;
drop function if exists func_20713_a;
drop function if exists func_20713_b;
create table bogus_table_20713( id int(10) not null primary key);
insert into bogus_table_20713 values (1), (2), (3);
select @in_func;
select @in_func;
drop table bogus_table_20713;
select @in_func;
select @in_func;
drop function if exists func_20713_a;
drop function if exists func_20713_b;
drop table if exists table_25345_a;
drop table if exists table_25345_b;
drop procedure if exists proc_25345;
drop function if exists func_25345;
drop function if exists func_25345_b;
create table table_25345_a (a int);
create table table_25345_b (b int);
select 1 as result;
drop table table_25345_a;
drop table table_25345_b;
select "do something";
select "do something";
select "do something";
select "do something";
CREATE DATABASE mysqltest;
DROP DATABASE mysqltest;
drop function if exists f1;
drop function if exists f2;
drop table if exists t1, t2;
create temporary table t2(a int);
select * from t2;
drop table t2;
drop procedure if exists proc_33983_a;
drop procedure if exists proc_33983_b;
drop procedure if exists proc_33983_c;
drop procedure if exists proc_33983_d;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1), (2,2);
SELECT AVG (a) FROM t1 WHERE b = 999999;
DROP TABLE t1;
CREATE TABLE t1 ( f2 INTEGER, f3 INTEGER );
INSERT INTO t1 VALUES  ( 1, 1 );
DROP TABLE t1;
CREATE TABLE t1 (pk INT, b INT, KEY (b));
CREATE ALGORITHM = TEMPTABLE VIEW v1 AS SELECT * FROM t1;
CREATE PROCEDURE p1 (a int) UPDATE IGNORE v1 SET b = a;
ALTER TABLE t1 CHANGE COLUMN b b2 INT;
DROP PROCEDURE p1;
DROP VIEW v1;
DROP TABLE t1;
DROP PROCEDURE IF EXISTS p1;
DROP PROCEDURE IF EXISTS p2;
DROP PROCEDURE IF EXISTS p3;
DROP PROCEDURE IF EXISTS p4;
DROP PROCEDURE IF EXISTS p5;
DROP PROCEDURE IF EXISTS p6;
SELECT 1;
CREATE TABLE t1(a INT);
SELECT 'Warning caught!' AS Msg;
SELECT @@warning_count;
INSERT INTO t1 VALUES(1);
SELECT 'Warning caught!' AS Msg;
DROP TABLE t1;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1), (2), (3);
SELECT "Error caught (expected)";
SELECT "End of Result Set found!";
SELECT a INTO @foo FROM t1 LIMIT 1;
DROP TABLE t1;
DROP TABLE IF EXISTS t1;
DROP PROCEDURE IF EXISTS p1;
CREATE TABLE t1 (a INT, b INT NOT NULL);
DROP TABLE t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
UPDATE t1 SET b = 20;
SELECT * FROM t1;
DROP TABLE t1;
CREATE TABLE t1(a INT PRIMARY KEY);
INSERT INTO t1 VALUES(1);
INSERT IGNORE INTO t1 VALUES (1);
INSERT IGNORE INTO t1 VALUES (1);
DROP TABLE t1;
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
DROP PROCEDURE IF EXISTS p1;
CREATE TABLE t1(x SMALLINT, y SMALLINT, z SMALLINT);
CREATE TABLE t2(a SMALLINT, b SMALLINT, c SMALLINT,
                d SMALLINT, e SMALLINT, f SMALLINT);
CREATE PROCEDURE p1()
  INSERT INTO t1 VALUES(99999, 99999, 99999);
DROP TABLE t1;
DROP TABLE t2;
DROP PROCEDURE p1;
CREATE TABLE t1(x SMALLINT, y SMALLINT, z SMALLINT);
CREATE TABLE t2(a SMALLINT, b SMALLINT, c SMALLINT NOT NULL);
CREATE PROCEDURE p1()
  INSERT INTO t1 VALUES(99999, 99999, 99999);
DROP TABLE t1;
DROP TABLE t2;
DROP PROCEDURE p1;
SELECT 'H2' AS HandlerId;
SELECT 'H2' AS HandlerId;
SELECT 'B1' AS BlockId;
SELECT 'B2' AS BlockId;
SELECT 'B3' AS BlockId;
SELECT 'H2' AS HandlerId;
SELECT 'H3' AS HandlerId;
SELECT 'H2' AS HandlerId;
SELECT 'H3' AS HandlerId;
SELECT 'H2' AS HandlerId;
SELECT 'H3' AS HandlerId;
SELECT 'S1' AS SignalId;
SELECT 'S1' AS SignalId;
SELECT 'H2' AS HandlerId;
SELECT 'S1' AS SignalId;
SELECT 'Wrong:H1:2' AS HandlerId;
SELECT 'Wrong:H2:1' AS HandlerId;
SELECT 'Wrong:H2:2' AS HandlerId;
SELECT 'Wrong:H3:1' AS HandlerId;
SELECT 'Wrong:H3:2' AS HandlerId;
SELECT 'Wrong:H4:1' AS HandlerId;
SELECT 'Wrong:H4:2' AS HandlerId;
SELECT 'Wrong:H5:1' AS HandlerId;
SELECT 'Wrong:H5:2' AS HandlerId;
SELECT 'Wrong:H6:1' AS HandlerId;
SELECT 'Wrong:H6:2' AS HandlerId;
SELECT 'H2' AS HandlerId;
SELECT 'S6' AS SignalId;
SELECT 'S5' AS SignalId;
SELECT 'S4' AS SignalId;
SELECT 'S3' AS SignalId;
SELECT 'S2' AS SignalId;
SELECT 'S1' AS SignalId;
SELECT 'H2' AS HandlerId;
SELECT 'Wrong:H1:1' AS HandlerId;
SELECT 'Wrong:H1:2' AS HandlerId;
SELECT 'Wrong:H2:1' AS HandlerId;
SELECT 'Wrong:H2:2' AS HandlerId;
SELECT 'Wrong:H3:1' AS HandlerId;
SELECT 'Wrong:H3:2' AS HandlerId;
SELECT 'Wrong:H4:1' AS HandlerId;
SELECT 'Wrong:H4:2' AS HandlerId;
SELECT 'Wrong:H5:1' AS HandlerId;
SELECT 'Wrong:H5:2' AS HandlerId;
SELECT 'Wrong:H6:1' AS HandlerId;
SELECT 'Wrong:H6:2' AS HandlerId;
SELECT 'H2' AS HandlerId;
SELECT 'S6' AS SignalId;
SELECT 'S5' AS SignalId;
SELECT 'S4' AS SignalId;
SELECT 'S3' AS SignalId;
SELECT 'S2' AS SignalId;
SELECT 'S1' AS SignalId;
SELECT 'H2' AS HandlerId;
SELECT 'H3' AS HandlerId;
SELECT 'H4' AS HandlerId;
SELECT 'H5' AS HandlerId;
SELECT 'S3' AS SignalId;
SELECT 'S4' AS SignalId;
SELECT 'S5' AS SignalId;
SELECT 'S6' AS SignalId;
SELECT 'S7' AS SignalId;
SELECT 'S8' AS SignalId;
SELECT 'S1' AS SignalId;
SELECT 'S2' AS SignalId;
SELECT 'H1:4' AS HandlerId;
SELECT 'H1:3' AS HandlerId;
SELECT 'H1:2' AS HandlerId;
SELECT 'H1:1' AS HandlerId;
SELECT 'OK' AS Msg;
SELECT 'H2:5' AS HandlerId;
SELECT 'H2:4' AS HandlerId;
SELECT 'H2:3' AS HandlerId;
SELECT 'H2:2' AS HandlerId;
SELECT 'H2:1' AS HandlerId;
SELECT 'Throw 01000' AS Msg;
SELECT 'CONTINUE handler 2: 1' AS Msg;
SELECT 'CONTINUE handler 2: 2' AS Msg;
SELECT 'CONTINUE handler 1: 1' AS Msg;
SELECT 'CONTINUE handler 1: 2' AS Msg;
SELECT 'Throw 01000' AS Msg;
DROP FUNCTION IF EXISTS f1;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(msg VARCHAR(255));
INSERT INTO t1 VALUE('CORRECT: Inside H1');
INSERT INTO t1 VALUE('WRONG: Inside H3');
INSERT INTO t1 VALUE('CORRECT: Calling f1()');
INSERT INTO t1 VALUE('WRONG: Returning 10');
SELECT * FROM t1;
DROP TABLE t1;
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
DROP PROCEDURE IF EXISTS p1;
DROP PROCEDURE IF EXISTS p2;
DROP PROCEDURE IF EXISTS p3;
DROP PROCEDURE IF EXISTS p4;
DROP PROCEDURE IF EXISTS p5;
CREATE TABLE t1(a CHAR, b CHAR, c CHAR);
CREATE TABLE t2(a SMALLINT, b SMALLINT, c SMALLINT);
SELECT 'Warning 1264 caught' AS msg;
SELECT 'Warning 1264 caught' AS msg;
SELECT 'Handler for 1292' Msg;
DROP TABLE t1;
DROP TABLE t2;
DROP PROCEDURE IF EXISTS p1;
DROP PROCEDURE IF EXISTS p2;
DROP PROCEDURE IF EXISTS p1;
DROP PROCEDURE IF EXISTS p2;
DROP FUNCTION IF EXISTS f1;
DROP FUNCTION IF EXISTS f2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
SELECT @msg;
DROP TABLE t1;
CREATE PROCEDURE testÃÂ°ÃÂÃÂÃÂ() SELECT 1;
CREATE PROCEDURE p(IN testÃÂ°ÃÂÃÂÃÂ INT) SELECT 1;
CREATE PROCEDURE p1() SELECT 1;
DROP PROCEDURE p1;
CREATE PROCEDURE p2() COMMENT 'testÃÂ°ÃÂÃÂÃÂ' SELECT 1;
ALTER PROCEDURE p2 COMMENT 'testÃÂ°ÃÂÃÂÃÂ';
DROP PROCEDURE p2;
CREATE DATABASE mysqltest;
DROP DATABASE mysqltest;
SELECT DATABASE();
CREATE DATABASE mysqltest;
DROP FUNCTION IF EXISTS f2;
DROP FUNCTION IF EXISTS f1;
DROP DATABASE mysqltest;
