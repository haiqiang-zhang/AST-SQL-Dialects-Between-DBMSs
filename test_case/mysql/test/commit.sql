
-- init
--echo connection default;

SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE t1 (s1 INT) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1),(2);

--
-- Verify that SET TRANS ISO LEVEL is not allowed 
-- inside a transaction
--
START TRANSACTION;
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

--
-- Verify consistent output from 
-- SELECT @@transaction_isolation  (Bug#20837)
--
-- The transaction will be in READ UNCOMMITTED mode,
-- but SELECT @@transaction_isolation should report the session
-- value, which is REPEATABLE READ
--
SET @@autocommit=0;
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SELECT @@transaction_isolation;
SELECT * FROM t1;
SELECT @@transaction_isolation;
INSERT INTO t1 VALUES (-1);
SELECT @@transaction_isolation;

--
-- Verify that a change in the session variable
-- does not affect the currently started
-- transaction
--
START TRANSACTION;
SELECT * FROM t1;
SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;
INSERT INTO t1 VALUES (1000);
SELECT * FROM t1;
SELECT * FROM t1;

-- restore the session value
SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

--
-- A set of test cases for verification that
-- isolation level during chaining works. MySQL
-- has three variants of chaining, i.e
-- COMMIT AND CHAIN, ROLLBACK AND CHAIN, and
-- the use of @completion_type
--

--
-- Verify isolation level with COMMIT AND CHAIN
--
-- COMMIT AND CHAIN causes a new transaction to
-- begin as soon as the current ends, and the new
-- transaction will have the same tran. iso. level
-- as the first.
--
--echo connection default
connection default;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
INSERT INTO t1 VALUES (1001);
SELECT COUNT(*) FROM t1 WHERE s1 = 1001;
INSERT INTO t1 VALUES (1002);
SELECT COUNT(*) FROM t1 WHERE s1 = 1002;
SELECT * FROM t1;
DELETE FROM t1 WHERE s1 >= 1000;

--
-- Verify isolation level with ROLLBACK AND CHAIN
--
--echo connection default
connection default;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
INSERT INTO t1 VALUES (1001);
SELECT COUNT(*) FROM t1 WHERE s1 = 1001;
INSERT INTO t1 VALUES (1002);
SELECT COUNT(*) FROM t1 WHERE s1 = 1002;
SELECT * FROM t1;
DELETE FROM t1 WHERE s1 >= 1000;

--
-- Verify isolation level with @completion_type=1.
-- (A @@completion_type value of 1 is equivalentl to 
-- explicitly adding "AND CHAIN" to COMMIT or ROLLBACK)
--

--
-- Verify that COMMIT AND NO CHAIN  overrides the value
-- of @@completion_type
--
SET @@completion_type=1;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
INSERT INTO t1 VALUES (1001);
SELECT * FROM t1 WHERE s1 >= 1000;
INSERT INTO t1 VALUES (1002);
SELECT * FROM t1 WHERE s1 >= 1000;
INSERT INTO t1 VALUES (1003);
SELECT * FROM t1 WHERE s1 >= 1000;

SELECT * FROM t1;
DELETE FROM t1 WHERE s1 >= 1000;
SET @@completion_type=0;

--
-- Verify that ROLLBACK AND NO CHAIN  overrides the value
-- of @@completion_type
--
--echo connection default
connection default;
SET @@completion_type=1;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
INSERT INTO t1 VALUES (1001);
SELECT * FROM t1 WHERE s1 >= 1000;
INSERT INTO t1 VALUES (1002);
SELECT * FROM t1 WHERE s1 >= 1000;
INSERT INTO t1 VALUES (1003);
SELECT * FROM t1 WHERE s1 >= 1000;
SELECT * FROM t1;
DELETE FROM t1 WHERE s1 >= 1000;
SET @@completion_type=0;

--
-- Verify that in the sequence:
--  SET TRANSACTION ISOLATION LEVEL
--  SET SESSION ISOLATION LEVEL
--
-- SET SESSION ISOLATION LEVEL has precedence over 
-- SET TRANSACTION.  (Note that this is _not_ 
-- in accordance with ISO 9075.)
--
--echo connection default
connection default;

SET TRANSACTION ISOLATION LEVEL	READ COMMITTED;
SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT * FROM t1;
INSERT INTO t1 VALUES (1000);
SELECT * FROM t1;

DELETE FROM t1 WHERE s1 >= 1000;


--
-- Verify that a transaction ended with an
-- implicit commit (i.e a DDL statement), the
-- @@completetion_type setting is ignored, and
-- the next transaction's isolation level is
-- the session level.
--
SET @@completion_type=1;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
INSERT INTO t1 VALUES (1000);
SELECT * FROM t1;
INSERT INTO t1 VALUES (1001);
SELECT * FROM t1;

SET @@completion_type=0;


--
-- Cleanup
--
SET @@autocommit=1;

DROP TABLE t1;

SET TRANSACTION READ ONLY;
SET TRANSACTION READ WRITE;
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ ONLY;
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ WRITE;
SET TRANSACTION READ ONLY, ISOLATION LEVEL READ COMMITTED;
SET TRANSACTION READ WRITE, ISOLATION LEVEL READ COMMITTED;
SET TRANSACTION READ ONLY, READ WRITE;

SET SESSION TRANSACTION READ WRITE;
SELECT @@transaction_read_only;

SET SESSION TRANSACTION READ ONLY;
SELECT @@transaction_read_only;

SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ WRITE;
SELECT @@transaction_read_only;

SET SESSION TRANSACTION READ ONLY, ISOLATION LEVEL REPEATABLE READ;
SELECT @@transaction_read_only;
SET TRANSACTION READ ONLY;
SET SESSION TRANSACTION READ ONLY;
SET GLOBAL TRANSACTION READ ONLY;

-- Reset to defaults
SET SESSION TRANSACTION READ WRITE;
SET GLOBAL TRANSACTION READ WRITE;

CREATE TABLE t1(a INT);
CREATE TEMPORARY TABLE temp_t2(a INT);

SET SESSION TRANSACTION READ ONLY;
CREATE TABLE t3(a INT);
ALTER TABLE t1 COMMENT "Test";
DROP TABLE t1;
CREATE TEMPORARY TABLE temp_t3(a INT);
ALTER TABLE temp_t2 COMMENT "Test";
DROP TEMPORARY TABLE temp_t2;
CREATE FUNCTION f1() RETURNS INT RETURN 1;
DROP FUNCTION f1;
CREATE PROCEDURE p1() BEGIN END;
DROP PROCEDURE p1;
CREATE VIEW v1 AS SELECT 1;
SET SESSION TRANSACTION READ WRITE;
CREATE VIEW v1 AS SELECT 1;
SET SESSION TRANSACTION READ ONLY;
DROP VIEW v1;
SET SESSION TRANSACTION READ WRITE;
DROP VIEW v1;
SET SESSION TRANSACTION READ ONLY;
CREATE DATABASE db1;
DROP DATABASE db1;
SET SESSION TRANSACTION READ WRITE;
INSERT INTO t1 VALUES (1), (2);
UPDATE t1 SET a= 3;
DELETE FROM t1;
INSERT INTO temp_t2 VALUES (1), (2);
UPDATE temp_t2 SET a= 3;
DELETE FROM temp_t2;
SELECT * FROM t1;
SELECT * FROM temp_t2;
CREATE FUNCTION f1() RETURNS INT
BEGIN
  DELETE FROM t1;

CREATE FUNCTION f2() RETURNS INT
BEGIN
  DELETE FROM temp_t2;

CREATE PROCEDURE p1() DELETE FROM t1;
CREATE PROCEDURE p2() DELETE FROM temp_t2;
SELECT f1();
SELECT f2();

DROP FUNCTION f1;
DROP FUNCTION f2;
DROP PROCEDURE p1;
DROP PROCEDURE p2;
CREATE VIEW v1 AS SELECT a FROM t1;
INSERT INTO v1 VALUES (1), (2);
SELECT * FROM v1;

DROP VIEW v1;
SET SESSION TRANSACTION READ ONLY;

-- Not supported for temporary tables.

SET SESSION TRANSACTION READ WRITE;
DROP TABLE temp_t2, t1;

CREATE TABLE t1(a INT);

SET SESSION TRANSACTION READ ONLY;
DELETE FROM t1;
DELETE FROM t1;

SET SESSION TRANSACTION READ WRITE;
SET TRANSACTION READ ONLY;
DELETE FROM t1;
DELETE FROM t1;
SELECT * FROM t1;
DELETE FROM t1;
SELECT * FROM t1;
DELETE FROM t1;

DROP TABLE t1;

SET @only= 1;

CREATE TABLE t1 (only INT);
INSERT INTO t1 (only) values (1);
SELECT only FROM t1 WHERE only = 1;
DROP TABLE t1;
CREATE PROCEDURE p1()
BEGIN
  DECLARE only INT DEFAULT 1;

DROP PROCEDURE p1;

CREATE TABLE t1(a INT);

SET TRANSACTION READ ONLY;
INSERT INTO t1 VALUES (1);
UPDATE t1 SET a=2;
DELETE FROM t1;

DROP TABLE t1;

CREATE PROCEDURE p1() SET SESSION TRANSACTION READ ONLY;
SELECT @@transaction_read_only;
SET SESSION TRANSACTION READ WRITE;
DROP PROCEDURE p1;

CREATE PROCEDURE p1() SET SESSION TRANSACTION READ ONLY,
                                              ISOLATION LEVEL SERIALIZABLE;
SELECT @@transaction_read_only;
SET SESSION TRANSACTION READ WRITE, ISOLATION LEVEL REPEATABLE READ;
DROP PROCEDURE p1;
CREATE FUNCTION f1() RETURNS INT
BEGIN
  SET SESSION TRANSACTION READ ONLY;

SELECT f1();
SELECT @@transaction_read_only;
SET SESSION TRANSACTION READ WRITE;
DROP FUNCTION f1;
CREATE FUNCTION f1() RETURNS INT
BEGIN
  SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ ONLY;

SELECT f1();
SELECT @@transaction_read_only;
SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ WRITE;
DROP FUNCTION f1;

SELECT @@autocommit;
CREATE TABLE t1(a INT) engine=InnoDB;

SET TRANSACTION READ ONLY;
SELECT * FROM t1;
INSERT INTO t1 VALUES (1);

DROP TABLE t1;
