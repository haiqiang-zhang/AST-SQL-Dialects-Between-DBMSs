
CREATE TABLE t1 (
 a int STORAGE DISK,
 b int STORAGE MEMORY NOT NULL,
 c int COLUMN_FORMAT DYNAMIC,
 d int COLUMN_FORMAT FIXED,
 e int COLUMN_FORMAT DEFAULT,
 f int STORAGE DISK COLUMN_FORMAT DYNAMIC NOT NULL,
 g int STORAGE MEMORY COLUMN_FORMAT DYNAMIC,
 h int STORAGE DISK COLUMN_FORMAT FIXED,
 i int STORAGE MEMORY COLUMN_FORMAT FIXED
);

-- Add new columns with all variations of the new column
-- level attributes
ALTER TABLE t1
  ADD COLUMN j int STORAGE DISK,
  ADD COLUMN k int STORAGE MEMORY NOT NULL,
  ADD COLUMN l int COLUMN_FORMAT DYNAMIC,
  ADD COLUMN m int COLUMN_FORMAT FIXED,
  ADD COLUMN n int COLUMN_FORMAT DEFAULT,
  ADD COLUMN o int STORAGE DISK COLUMN_FORMAT DYNAMIC NOT NULL,
  ADD COLUMN p int STORAGE MEMORY COLUMN_FORMAT DYNAMIC,
  ADD COLUMN q int STORAGE DISK COLUMN_FORMAT FIXED,
  ADD COLUMN r int STORAGE MEMORY COLUMN_FORMAT FIXED;

-- Use MODIFY COLUMN to "shift" all new attributes to the next column
ALTER TABLE t1
  MODIFY COLUMN j int STORAGE MEMORY NOT NULL,
  MODIFY COLUMN k int COLUMN_FORMAT DYNAMIC,
  MODIFY COLUMN l int COLUMN_FORMAT FIXED,
  MODIFY COLUMN m int COLUMN_FORMAT DEFAULT,
  MODIFY COLUMN n int STORAGE DISK COLUMN_FORMAT DYNAMIC NOT NULL,
  MODIFY COLUMN o int STORAGE MEMORY COLUMN_FORMAT DYNAMIC,
  MODIFY COLUMN p int STORAGE DISK COLUMN_FORMAT FIXED,
  MODIFY COLUMN q int STORAGE MEMORY COLUMN_FORMAT FIXED,
  MODIFY COLUMN r int STORAGE DISK;

-- Check behaviour of multiple COLUMN_FORMAT and/or STORAGE definitions
ALTER TABLE t1
  MODIFY COLUMN h int COLUMN_FORMAT DYNAMIC COLUMN_FORMAT FIXED,
  MODIFY COLUMN i int COLUMN_FORMAT DYNAMIC COLUMN_FORMAT DEFAULT,
  MODIFY COLUMN j int COLUMN_FORMAT FIXED COLUMN_FORMAT DYNAMIC,
  MODIFY COLUMN k int COLUMN_FORMAT FIXED COLUMN_FORMAT DEFAULT,
  MODIFY COLUMN l int STORAGE DISK STORAGE MEMORY,
  MODIFY COLUMN m int STORAGE DISK STORAGE DEFAULT,
  MODIFY COLUMN n int STORAGE MEMORY STORAGE DISK,
  MODIFY COLUMN o int STORAGE MEMORY STORAGE DEFAULT,
  MODIFY COLUMN p int STORAGE DISK STORAGE MEMORY
                      COLUMN_FORMAT FIXED COLUMN_FORMAT DYNAMIC,
  MODIFY COLUMN q int STORAGE DISK STORAGE MEMORY STORAGE DEFAULT
                      COLUMN_FORMAT FIXED COLUMN_FORMAT DYNAMIC COLUMN_FORMAT DEFAULT,
  MODIFY COLUMN r int STORAGE DEFAULT STORAGE DEFAULT STORAGE MEMORY
                      STORAGE DISK STORAGE MEMORY STORAGE DISK STORAGE DISK;

DROP TABLE t1;
SET SESSION debug="+d,out_of_tablespace_disk";
CREATE TABLESPACE `ts6` ADD DATAFILE 'ts6.ibd' ENGINE=INNODB;
SET SESSION debug="-d,out_of_tablespace_disk";
ALTER TABLESPACE no_such_ts ADD DATAFILE 'ts.ibd';
CREATE TABLESPACE ts ADD DATAFILE 'ts.ibd' ENGINE=InnoDB;
ALTER TABLESPACE ts DROP DATAFILE 'no_such_file.ibd';
DROP TABLESPACE ts;
CREATE TABLESPACE innodb_system ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE innodb_file_per_table ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE innodb_temporary ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE mysql ADD DATAFILE 'f.ibd' ENGINE InnoDB;
DROP TABLESPACE innodb_system;
DROP TABLESPACE innodb_file_per_table;
DROP TABLESPACE innodb_temporary;
DROP TABLESPACE mysql;
CREATE TABLESPACE `innodb_file_per_table.2` ADD DATAFILE 'f.ibd' ENGINE InnoDB;
DROP TABLESPACE `innodb_file_per_table.2`;
CREATE TABLESPACE innodb_file_per_table_whatever ADD DATAFILE 'f.ibd' ENGINE InnoDB;
DROP TABLESPACE innodb_file_per_table_whatever;
CREATE TABLESPACE innodb_file_per_table ADD DATAFILE 'f.ibd' ENGINE InnoDB;
DROP TABLESPACE innodb_file_per_table;

CREATE TABLE t1 (i INTEGER) TABLESPACE innodb_file_per_table ENGINE InnoDB;
CREATE TABLE t2 (i INTEGER) TABLESPACE innodb_system ENGINE InnoDB;
CREATE TABLE t_bad (i INTEGER) TABLESPACE `innodb_file_per_table.2` ENGINE InnoDB;
ALTER TABLE t1 ENGINE InnoDB;
ALTER TABLE t1 TABLESPACE innodb_system ENGINE InnoDB;
ALTER TABLE t2 TABLESPACE innodb_file_per_table ENGINE InnoDB;
ALTER TABLE t1 ADD COLUMN (j INTEGER);
CREATE TABLESPACE ts ADD DATAFILE 'f.ibd' ENGINE InnoDB;
ALTER TABLE t1 TABLESPACE ts;
ALTER TABLE t1 ENGINE InnoDB;
ALTER TABLE t1 ENGINE InnoDB;

DROP TABLE t1;
DROP TABLE t2;
DROP TABLESPACE ts;
CREATE TABLE t_part_bad (i INTEGER) PARTITION BY RANGE(i)
PARTITIONS 2 (
    PARTITION p0 VALUES LESS THAN(100) TABLESPACE `innodb_file_per_table.2`,
    PARTITION p1 VALUES LESS THAN(200));

CREATE TABLE t_part (i INTEGER) TABLESPACE innodb_file_per_table PARTITION BY RANGE(i)
PARTITIONS 2 (
    PARTITION p0 VALUES LESS THAN(100),
    PARTITION p1 VALUES LESS THAN(200));

CREATE TABLE t_subpart (i INTEGER) PARTITION BY RANGE(i)
PARTITIONS 2 SUBPARTITION BY HASH(i) (
    PARTITION p0 VALUES LESS THAN(100) (
      SUBPARTITION sp00,
      SUBPARTITION sp01),
    PARTITION p1 VALUES LESS THAN(200) (
      SUBPARTITION sp10,
      SUBPARTITION sp11));

-- TODO : Enable following once shared tablespaces are allowed in Partitioned
--	 Tables (wl#12034).
-- ALTER TABLE t_part TABLESPACE innodb_system;

ALTER TABLE t_subpart TABLESPACE innodb_file_per_table;
ALTER TABLE t_part TABLESPACE `innodb_file_per_table.2`;
ALTER TABLE t_subpart TABLESPACE `innodb_file_per_table.2`;
ALTER TABLE t_part REORGANIZE PARTITION p1 INTO
  (PARTITION p1 VALUES LESS THAN (300) TABLESPACE `innodb_file_per_table.2`);
ALTER TABLE t_subpart REORGANIZE PARTITION p1 INTO
  (PARTITION p1 VALUES LESS THAN (300) TABLESPACE `innodb_file_per_table.2`);
ALTER TABLE t_subpart REORGANIZE PARTITION s11 INTO
  (PARTITION s11 TABLESPACE `innodb_file_per_table.2`);

DROP TABLE t_part;
DROP TABLE t_subpart;

CREATE TABLESPACE ts ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLE t1(i INT) TABLESPACE ts;
ALTER TABLESPACE ts RENAME TO innodb_system;
ALTER TABLESPACE ts RENAME TO innodb_file_per_table;
ALTER TABLESPACE ts RENAME TO innodb_temporary;
ALTER TABLESPACE ts RENAME TO mysql;
ALTER TABLESPACE innodb_system RENAME TO ts3;
ALTER TABLESPACE innodb_temporary RENAME TO ts3;
ALTER TABLESPACE mysql RENAME TO ts3;
ALTER TABLESPACE ts RENAME TO `innodb_file_per_table.2`;
ALTER TABLESPACE ts RENAME TO innodb_file_per_table_whatever;
ALTER TABLESPACE ts RENAME TO innodb_file_per_table;
CREATE TABLESPACE altering ADD DATAFILE 'altering.ibd' ENGINE InnoDB;
CREATE TABLE altering_table (id int) TABLESPACE altering;
ALTER TABLE mysql.user ENGINE InnoDB TABLESPACE mysql;
ALTER TABLE altering_table TABLESPACE mysql;
CREATE TABLE foos (id int) TABLESPACE mysql;
CREATE TABLE partition_test (a INT, b INT) ENGINE = InnoDB ROW_FORMAT=DYNAMIC
PARTITION BY RANGE(a) SUBPARTITION BY KEY(b) (
PARTITION p1 VALUES LESS THAN (100) TABLESPACE mysql,
PARTITION p2 VALUES LESS THAN (200) TABLESPACE mysql,
PARTITION p3 VALUES LESS THAN (300) TABLESPACE mysql,
PARTITION p4 VALUES LESS THAN (400) TABLESPACE mysql);
CREATE TABLE partition_test2 (a INT, b INT) ENGINE = InnoDB ROW_FORMAT=DYNAMIC
PARTITION BY RANGE(a) SUBPARTITION BY KEY(b) (
PARTITION p1 VALUES LESS THAN (100) TABLESPACE altering,
PARTITION p2 VALUES LESS THAN (200) TABLESPACE altering,
PARTITION p3 VALUES LESS THAN (300) TABLESPACE mysql,
PARTITION p4 VALUES LESS THAN (400) TABLESPACE mysql);

-- TODO : Enable following once shared tablespaces are allowed in partitioned
--	 Tables (wl#12034).
-- --echo # Create a partitioned table to be altered later.
-- CREATE TABLE partition_test3 (a INT, b INT) ENGINE = InnoDB ROW_FORMAT=DYNAMIC
-- PARTITION BY RANGE(a) SUBPARTITION BY KEY(b) (
-- PARTITION p1 VALUES LESS THAN (100) TABLESPACE altering,
-- PARTITION p2 VALUES LESS THAN (200) TABLESPACE altering,
-- PARTITION p3 VALUES LESS THAN (300) TABLESPACE altering,
-- PARTITION p4 VALUES LESS THAN (400) TABLESPACE altering);
--   (PARTITION p1 VALUES LESS THAN (100) TABLESPACE `mysql`);
CREATE TABLE partition_test4 (i INTEGER) PARTITION BY RANGE(i)
PARTITIONS 2 SUBPARTITION BY HASH(i) (
    PARTITION p0 VALUES LESS THAN(100) (
      SUBPARTITION sp00,
      SUBPARTITION sp01),
    PARTITION p1 VALUES LESS THAN(200) (
      SUBPARTITION sp10,
      SUBPARTITION sp11 TABLESPACE mysql));
DROP TABLE altering_table;
DROP TABLESPACE altering;

-- Check that new name shows up in I_S
SELECT (COUNT(*)=1) FROM INFORMATION_SCHEMA.FILES WHERE TABLESPACE_NAME = 'ts';

ALTER TABLESPACE ts RENAME TO ts2;

SELECT (COUNT(*)=1) FROM INFORMATION_SCHEMA.FILES WHERE TABLESPACE_NAME = 'ts2';
SELECT (COUNT(*)=0) FROM INFORMATION_SCHEMA.FILES WHERE TABLESPACE_NAME = 'ts';
SELECT * FROM t1;
ALTER TABLE t1 ADD COLUMN j VARCHAR(32);

INSERT INTO t1 VALUES (0,'0'),(1,'1'),(2,'2'),(3,'3');
CREATE TABLE t2(j int) TABLESPACE ts2;

INSERT INTO t2 VALUES (0),(1),(2),(3);

DROP TABLE t2;
DROP TABLE t1;
DROP TABLESPACE ts2;
CREATE USER noprivs@localhost;
CREATE TABLESPACE ts1 ADD DATAFILE 'df1.ibd';
ALTER TABLESPACE ts1 ADD DATAFILE 'df2.ibd';
ALTER TABLESPACE ts1 DROP DATAFILE 'df2.ibd';
ALTER TABLESPACE ts1 RENAME TO ts2;
DROP TABLESPACE ts1;
CREATE LOGFILE GROUP lg1
  ADD UNDOFILE 'lg1_undofile.dat'
  INITIAL_SIZE 1M
  UNDO_BUFFER_SIZE = 1M;
DROP LOGFILE GROUP lg1;
DROP USER noprivs@localhost;
SET AUTOCOMMIT=OFF;
CREATE TABLESPACE ts1 ADD DATAFILE 'df1.ibd';
ALTER TABLESPACE ts1 RENAME TO ts2;
DROP TABLESPACE ts2;

SET AUTOCOMMIT=ON;

-- TODO : Enable following once shared tablespaces are allowed in Partitioned
--	 Tables (wl#12034).
-- --echo #
-- --echo # Additional test cases requested by QA
-- --echo #
--
-- --echo # Test ALTER TABLESPACE RENAME with partition tables
-- CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd' Engine=InnoDB;

CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd' Engine=InnoDB;
CREATE TABLE t1 (a INT, b INT) ENGINE = InnoDB TABLESPACE=ts1;
ALTER TABLESPACE ts1 RENAME TO ts11;
DROP TABLE t1;
DROP TABLESPACE ts11;

CREATE TABLESPACE ts Engine=InnoDB;
CREATE TABLESPACE ts1 Engine=InnoDB;
SELECT NAME FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME LIKE 'ts%';
CREATE TABLE t1(c INT) ENGINE=InnoDB TABLESPACE=ts;
INSERT INTO t1 VALUES(1);
ALTER TABLE t1 TABLESPACE ts1;
DROP TABLE t1;
DROP TABLESPACE ts1;
DROP TABLESPACE ts;
CREATE PROCEDURE cr(IN start BIGINT)
BEGIN
SET @idx =start;
CREATE TABLESPACE x;
DROP TABLESPACE x;
SET @idx = @idx - 1;
END WHILE;
END |
DELIMITER ;
DROP PROCEDURE cr;

CREATE TABLESPACE ts1 Engine=InnoDB;
CREATE TABLESPACE ts2 ADD DATAFILE 'ts2.ibd' Engine=InnoDB;
CREATE TABLE t1(c1 INT, c2 CHAR(1)) ENGINE=InnoDB TABLESPACE=ts1;
INSERT INTO t1 VALUES(1,'a');
CREATE TABLE t2(c1 INT, c2 CHAR(1)) ENGINE=InnoDB TABLESPACE=ts2;
INSERT INTO t2 VALUES(1,'b');
SELECT * FROM t1 JOIN t2 WHERE t1.c1 = t2.c1;
ALTER TABLESPACE ts2 RENAME TO ts3;
SELECT * FROM t1 JOIN t2 WHERE t1.c1 = t2.c1;
DROP TABLE t1;
DROP TABLE t2;
DROP TABLESPACE ts1;
DROP TABLESPACE ts3;
CREATE USER user1@localhost;
CREATE TABLESPACE ts2 Engine=InnoDB;
CREATE TABLESPACE ts2 Engine=InnoDB;
CREATE TABLE t2(c INT) ENGINE=InnoDB TABLESPACE=ts2;
DROP TABLE t2;
DROP TABLESPACE ts2;
DROP USER user1@localhost;
CREATE TABLESPACE ts ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLE t1 (f1 int) tablespace=ts;
let $ID= `SELECT @id := CONNECTION_ID()`;
SET DEBUG_SYNC= 'upgrade_lock_for_tables_in_tablespace_kill_point SIGNAL cond2 WAIT_FOR cond3';
let $ignore= `SELECT @id := $ID`;
SET DEBUG_SYNC= 'now WAIT_FOR cond2';
SET DEBUG_SYNC= 'now SIGNAL cond3';
SET DEBUG_SYNC= "RESET";

DROP TABLE t1;
DROP TABLESPACE ts;
CREATE TABLESPACE ts ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLE t1 (f1 INT) TABLESPACE=ts;
set @@session.lock_wait_timeout=1;
let $ID= `SELECT @id := CONNECTION_ID()`;
let $wait_condition=
    SELECT COUNT(*) = 1 FROM performance_schema.threads
    WHERE PROCESSLIST_STATE = "Waiting for table metadata lock"
    AND PROCESSLIST_ID=$ID;

DROP TABLE t1;
DROP TABLESPACE ts;
SET SESSION DEBUG="+d, pre_commit_error";
CREATE TABLESPACE ts1;
SET SESSION DEBUG="-d, pre_commit_error";
CREATE TABLESPACE ts1;

SET SESSION DEBUG="+d,pre_commit_error";
ALTER TABLESPACE ts1 RENAME TO ts11;
SET SESSION DEBUG="-d,pre_commit_error";

ALTER TABLESPACE ts1 RENAME TO ts11;

DROP TABLESPACE ts11;

CREATE TABLESPACE ts1 ENGINE_ATTRIBUTE='';
CREATE TABLESPACE ts2 ENGINE_ATTRIBUTE='{"c": "v"}';
SELECT * FROM information_schema.tablespaces_extensions WHERE tablespace_name = 'ts2';
CREATE TABLESPACE ts3 ENGINE_ATTRIBUTE='{"c": v}';
ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{"foo": "bar}';

ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{"foo": "bar"}';
SELECT * FROM information_schema.tablespaces_extensions WHERE tablespace_name = 'ts1';
ALTER TABLESPACE ts1 RENAME TO ts11;
SELECT * FROM information_schema.tablespaces_extensions WHERE tablespace_name = 'ts11';

DROP TABLESPACE ts2;
DROP TABLESPACE ts11;
