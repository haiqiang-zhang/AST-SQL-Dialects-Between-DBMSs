--Query--
SELECT alias1 . col_int AS field1 , CUME_DIST() OVER (   ORDER BY alias1 . pk) AS field2 , alias1 . col_int_key AS field3 , PERCENT_RANK() OVER ( ORDER BY  alias2 .col_varchar_255_utf8_key, alias1 . col_varchar_10_latin1_key,  alias1. col_varchar_255_utf8 ) AS field4 , alias1 . col_int_key AS field5 , PERCENT_RANK() OVER ( PARTITION BY  alias2 .col_varchar_10_utf8,  alias1 .col_int_key, alias2 .col_varchar_255_utf8 ORDER BY alias1. col_varchar_10_latin1 ROWS CURRENT ROW  ) AS field6 , alias1 . col_int AS field7 , RANK() OVER ( ORDER BY  alias1 . col_int ) AS field8 , alias2 . pk AS field9 , NTILE ( 1 ) OVER ( PARTITION BY alias1 .col_varchar_255_latin1,alias2 . col_varchar_255_latin1, alias1. col_varchar_255_utf8_key,  alias1. col_varchar_10_latin1, alias2 . col_int_key ORDER BY alias1 . col_int,  alias1 . col_int_key) AS field10 , alias1 . col_int AS field11 , NTILE ( 5 ) OVER ( ORDER BY  alias1. col_int ) AS field12 FROM DD AS alias1 LEFT  JOIN H AS alias2 ON alias1 . pk =  alias2 . col_int WHERE alias1 . pk > 3 GROUP BY field1, alias1.pk, field3,alias2.col_varchar_255_utf8_key, alias1.col_varchar_10_latin1_key,alias1.col_varchar_255_utf8, field5, alias2.col_varchar_10_utf8,alias1.col_int_key, alias2.col_varchar_255_utf8,alias1.col_varchar_10_latin1, field7, alias1.col_int, field9,alias1.col_varchar_255_latin1, alias2.col_varchar_255_latin1,alias1.col_varchar_255_utf8_key, alias1.col_varchar_10_latin1,alias2.col_int_key, alias1.col_int, alias1.col_int_key, field11,alias1.col_int HAVING field3 >= 7 ORDER BY field10  , field6  , field4
--Result--
[(8, 0.5, 9, 0.0, 9, 0.0, 8, 2, None, 1, 8, 2), (-988545024, 1.0, 559546368, 1.0, 559546368, 0.0, -988545024, 1, None, 1, -988545024, 1)]
+--------------------+
--Query--
SELECT a, PERCENT_RANK() OVER w1 FROM t GROUP BY b,1 WITH ROLLUP WINDOW w1 AS()
--Result--
[(1, 0.0), (None, 0.0), (None, 0.0)]
+--------------------+
--Query--
SELECT doc->'$.txt', LAG(doc->'$.txt') OVER (ORDER BY doc->'$.txt') FROM t1
--Result--
[('"abcd"', None), ('"bcde"', '"abcd"'), ('"cdef"', '"bcde"'), ('"defg"', '"cdef"')]
+--------------------+
--Query--
SELECT FIRST_VALUE(-2605.952148) OVER          (PARTITION BY a ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM t WINDOW w1 AS (PARTITION BY a)
--Result--
[(-2605.952148,), (-2605.952148,), (-2605.952148,)]
+--------------------+
--Query--
SELECT LAST_VALUE(-2605.952148) OVER          (PARTITION BY a ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM t WINDOW w1 AS (PARTITION BY a)
--Result--
[(-2605.952148,), (-2605.952148,), (-2605.952148,)]
+--------------------+
--Query--
SELECT NTH_VALUE(-2605.952148, 1) OVER          (PARTITION BY a ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM t WINDOW w1 AS (PARTITION BY a)
--Result--
[(-2605.952148,), (-2605.952148,), (-2605.952148,)]
+--------------------+
--Query--
SELECT LEAD(-2605.952148, 1) OVER          (PARTITION BY a ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM t WINDOW w1 AS (PARTITION BY a)
--Result--
[(None,), (None,), (None,)]
+--------------------+
--Query--
SELECT MAX(-2605.952148) OVER          (PARTITION BY a ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM t WINDOW w1 AS (PARTITION BY a)
--Result--
[(-2605.952148,), (-2605.952148,), (-2605.952148,)]
+--------------------+
--Query--
SELECT 1 FROM t WINDOW w AS(PARTITION BY NULL,NULL ORDER BY NULL ASC)
--Result--
[(1,), (1,), (1,), (1,), (1,)]
+--------------------+
--Query--
SELECT 1 FROM t WINDOW w AS(PARTITION BY 1+2,3+4,5+6 ORDER BY 1+2,3+4)
--Result--
[(1,), (1,), (1,), (1,), (1,)]
+--------------------+
--Query--
SELECT RANK() OVER w1 FROM t WINDOW w1 AS (ORDER BY a), w2 AS (w1)
--Result--
[(1,), (2,), (3,), (4,), (5,)]
+--------------------+
--Query--
SELECT FIRST_VALUE(c) OVER w fv, LAST_VALUE(c) OVER w lv        FROM t WINDOW w AS (ORDER BY c                            ROWS BETWEEN 3 FOLLOWING AND 5 FOLLOWING)
--Result--
[('1', '1'), (None, None), (None, None), (None, None)]
+--------------------+
--Query--
SELECT EXISTS     (SELECT a, LAST_VALUE(INET_ATON(1)) OVER() FROM t WHERE BIT_OR(1))
--Result--
[(1,)]
+--------------------+
--Query--
SELECT COALESCE(LAG(f1,1,1) OVER (ORDER BY f1)) FROM t GROUP BY f1 WITH ROLLUP
--Result--
[('1',), (None,)]
+--------------------+
--Query--
SELECT VARIANCE(b) over w `var`,        AVG(b) OVER w `avg`,        SUM(b) OVER w `sum`,        b,        COUNT(b) OVER w count FROM t1        WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--Result--
[(0.25, 2.5, 5.0, 2, 2), (0.25, 2.5, 5.0, 3, 2)]
+--------------------+
--Query--
SELECT VARIANCE(b) over w `var`,        AVG(b) OVER w `avg`,        SUM(b) OVER w `sum`,        b,        count(b) OVER w count FROM t1        WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--Result--
[(0.25, 2.5, 5.0, 2, 2), (0.25, 2.5, 5.0, 3, 2)]
+--------------------+
--Query--
SELECT * FROM (SELECT IF(1, WEEKDAY('1'), ROW_NUMBER() OVER (PARTITION BY f1))                FROM t) AS a
--Result--
[(None,), (None,), (None,), (None,)]
+--------------------+
--Query--
SELECT a, COUNT(a) OVER w, LAG(1,13) RESPECT NULLS OVER w   FROM t   WINDOW w AS (ORDER BY a RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING)
--Result--
[(-32768, 4, None), (-1, 3, None), (1, 2, None), (32767, 0, None), (32767, 0, None)]
+--------------------+
--Query--
SELECT bit_count(sum(cos(-66365726))over())
--Result--
[(64,)]
+--------------------+
--Query--
SELECT NTILE(74) OVER(ORDER BY a ROWS BETWEEN CURRENT ROW AND                       9223372036854775807 FOLLOWING) FROM t
--Result--
[(1,), (2,), (3,), (4,)]
+--------------------+
--Query--
SELECT SUM(a) OVER(ORDER BY a ROWS BETWEEN 9223372036854775807 FOLLOWING AND                    9223372036854775807 FOLLOWING) as `sum` FROM t
--Result--
[(None,), (None,), (None,), (None,)]
+--------------------+
--Query--
SELECT SUM(a) OVER(ORDER BY a ROWS BETWEEN 9223372036854775806 FOLLOWING AND                    9223372036854775807 FOLLOWING) as `sum` FROM t
--Result--
[(None,), (None,), (None,), (None,)]
+--------------------+
--Query--
SELECT SUM(a) OVER(ORDER BY a ROWS BETWEEN 9223372036854775805 FOLLOWING AND                    9223372036854775807 FOLLOWING) as `sum` FROM t
--Result--
[(None,), (None,), (None,), (None,)]
+--------------------+
--Query--
SELECT SUM(a) OVER(ORDER BY a ROWS BETWEEN 9223372036854775807 FOLLOWING AND                    9223372036854775805 FOLLOWING) as `sum` FROM t
--Result--
[(None,), (None,), (None,), (None,)]
+--------------------+
--Query--
SELECT SUM(a) OVER(ORDER BY a ROWS BETWEEN 9223372036854775807 PRECEDING AND                    9223372036854775805 PRECEDING) as `sum` FROM t
--Result--
[(None,), (None,), (None,), (None,)]
+--------------------+
--Query--
SELECT 3 AS i, ROW_NUMBER() OVER (ORDER BY i) FROM t1
--Result--
[]
+--------------------+
--Query--
SELECT SUM(a) OVER w FROM t WINDOW w AS(ORDER BY a,b RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
--Result--
[(5952.0,), (3981.0,), (1995.0,)]
+--------------------+
--Query--
PREPARE stmt FROM 'SELECT NTILE(39) OVER w1 FROM t WINDOW w1 AS(ORDER BY a)'
--Result--
[]
+--------------------+
--Query--
PREPARE stmt FROM 'SELECT NTILE(39) OVER w1 FROM t WINDOW w1 AS(ORDER BY b)'
--Result--
[]
+--------------------+
--Query--
SELECT DISTINCT i, 1 + SUM(i) OVER (ORDER BY i ROWS UNBOUNDED PRECEDING) FROM t
--Result--
[(0, 1.0), (1, 2.0)]
+--------------------+
--Query--
SELECT DISTINCT 1 + SUM(i) OVER (ORDER BY i ROWS UNBOUNDED PRECEDING) FROM t
--Result--
[(1.0,), (2.0,)]
+--------------------+
--Query--
SELECT a,b, FIRST_VALUE(b) OVER w AS first, LAST_VALUE (a) OVER w AS last     FROM t WINDOW w AS (ORDER BY a  desc RANGE 3 PRECEDING)
--Result--
[(6, 3, 3, 6), (5, 3, 3, 5), (4, 2, 3, 4), (4, 2, 3, 4), (3, 2, 3, 3), (2, 1, 3, 2), (2, None, 3, 2), (1, 1, 2, 1), (1, 1, 2, 1), (None, 2, 2, None), (None, None, 2, None)]
+--------------------+
--Query--
SELECT a + INTERVAL(LAST_VALUE(1) OVER ()) SECOND FROM (SELECT a FROM t1) q
--Result--
[(datetime.datetime(2000, 1, 1, 0, 0, 1),)]
+--------------------+
--Query--
SELECT 0.2 * AVG(f1) OVER w AS avg, f1  FROM t1 JOIN t2 ON t1_partkey = t2_partkey  WINDOW w AS (PARTITION BY t1_partkey)
--Result--
[(2.7, 34), (2.7, 10), (2.7, 4), (2.7, 6), (6.93334, 9), (6.93334, 64), (6.93334, 31)]
+--------------------+
--Query--
SELECT FIRST_VALUE(f2) OVER(ORDER BY f1 RANGE CURRENT ROW) FROM t
--Result--
[(2,), (2,), (1,), (1,), (3,)]
+--------------------+
--Query--
SELECT a, SUM(a) OVER () AS s FROM t1 GROUP BY a ORDER BY a, s
--Result--
[(4, 4.0)]
+--------------------+
--Query--
PREPARE stmt FROM "SELECT RANK() OVER (ORDER BY a) FROM t1 GROUP BY a"
--Result--
[]
+--------------------+
--Query--
SELECT a   FROM t1 AS outer_t1   WHERE (a,a) IN (     SELECT MAX(a) OVER (), a FROM t1   )
--Result--
[(1,)]
+--------------------+
--Query--
SELECT   CUME_DIST() OVER (ORDER BY t1.a) FROM   t1   NATURAL JOIN t1 AS t2   NATURAL JOIN t1 AS t3   NATURAL JOIN t1 AS t4 GROUP BY t1.a WITH ROLLUP
--Result--
[]
+--------------------+
--Query--
SELECT DISTINCT   0 AS field1,   RANK() OVER (ORDER BY a) AS field2,   LAST_VALUE(a) OVER (ORDER BY a + 1) AS field3 FROM t1 GROUP BY a, field1 WITH ROLLUP ORDER BY field1, field2, field3
--Result--
[]
+--------------------+
--Query--
SELECT a, SUM(b)+1 AS cnt,        ROW_NUMBER() OVER (ORDER BY SUM(b) DESC) AS rn FROM t GROUP BY a ORDER BY rn
--Result--
[(1, 5.66, 1), (2, 4.63, 2)]
+--------------------+
--Query--
SELECT a, ROUND(SUM(b), 2) AS cnt,        ROW_NUMBER() OVER (ORDER BY SUM(b) DESC) AS rn FROM t GROUP BY a ORDER BY rn DESC
--Result--
[(2, 3.63, 2), (1, 4.66, 1)]
+--------------------+
--Query--
SELECT v1, (SELECT v1 FROM (SELECT AVG(0) OVER (), v1) AS v2) FROM v0
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT   FIRST_VALUE(col1) OVER (ORDER BY col1) AS wf1,   FIRST_VALUE(col1) OVER (ORDER BY col2) AS wf2,   FIRST_VALUE(col1) OVER (ORDER BY col3) AS wf3,   FIRST_VALUE(col1) OVER (ORDER BY col4) AS wf4,   FIRST_VALUE(col1) OVER (ORDER BY col5) AS wf5,   FIRST_VALUE(col1) OVER (ORDER BY col6) AS wf6,   FIRST_VALUE(col1) OVER (ORDER BY col7) AS wf7,   FIRST_VALUE(col1) OVER (ORDER BY col8) AS wf8,   FIRST_VALUE(col1) OVER (ORDER BY col9) AS wf9,   FIRST_VALUE(col1) OVER (ORDER BY col10) AS wf10,   FIRST_VALUE(col1) OVER (ORDER BY col11) AS wf11,   FIRST_VALUE(col1) OVER (ORDER BY col12) AS wf12,   FIRST_VALUE(col1) OVER (ORDER BY col13) AS wf13,   FIRST_VALUE(col1) OVER (ORDER BY col14) AS wf14,   FIRST_VALUE(col1) OVER (ORDER BY col15) AS wf15,   FIRST_VALUE(col1) OVER (ORDER BY col16) AS wf16,   FIRST_VALUE(col1) OVER (ORDER BY col17) AS wf17,   FIRST_VALUE(col1) OVER (ORDER BY col18) AS wf18,   FIRST_VALUE(col1) OVER (ORDER BY col19) AS wf19,   FIRST_VALUE(col1) OVER (ORDER BY col20) AS wf20,   FIRST_VALUE(col1) OVER (ORDER BY col21) AS wf21,   FIRST_VALUE(col1) OVER (ORDER BY col22) AS wf22,   FIRST_VALUE(col1) OVER (ORDER BY col23) AS wf23,   FIRST_VALUE(col1) OVER (ORDER BY col24) AS wf24,   FIRST_VALUE(col1) OVER (ORDER BY col25) AS wf25,   FIRST_VALUE(col1) OVER (ORDER BY col26) AS wf26,   FIRST_VALUE(col1) OVER (ORDER BY col27) AS wf27,   FIRST_VALUE(col1) OVER (ORDER BY col28) AS wf28,   FIRST_VALUE(col1) OVER (ORDER BY col29) AS wf29,   FIRST_VALUE(col1) OVER (ORDER BY col30) AS wf30,   FIRST_VALUE(col1) OVER (ORDER BY col31) AS wf31,   FIRST_VALUE(col1) OVER (ORDER BY col32) AS wf32,   FIRST_VALUE(col1) OVER (ORDER BY col33) AS wf33,   FIRST_VALUE(col1) OVER (ORDER BY col34) AS wf34,   FIRST_VALUE(col1) OVER (ORDER BY col35) AS wf35,   FIRST_VALUE(col1) OVER (ORDER BY col36) AS wf36,   FIRST_VALUE(col1) OVER (ORDER BY col37) AS wf37,   FIRST_VALUE(col1) OVER (ORDER BY col38) AS wf38,   FIRST_VALUE(col1) OVER (ORDER BY col39) AS wf39,   FIRST_VALUE(col1) OVER (ORDER BY col40) AS wf40,   FIRST_VALUE(col1) OVER (ORDER BY col41) AS wf41,   FIRST_VALUE(col1) OVER (ORDER BY col42) AS wf42,   FIRST_VALUE(col1) OVER (ORDER BY col43) AS wf43,   FIRST_VALUE(col1) OVER (ORDER BY col44) AS wf44,   FIRST_VALUE(col1) OVER (ORDER BY col45) AS wf45,   FIRST_VALUE(col1) OVER (ORDER BY col46) AS wf46,   FIRST_VALUE(col1) OVER (ORDER BY col47) AS wf47,   FIRST_VALUE(col1) OVER (ORDER BY col48) AS wf48,   FIRST_VALUE(col1) OVER (ORDER BY col49) AS wf49,   FIRST_VALUE(col1) OVER (ORDER BY col50) AS wf50,   FIRST_VALUE(col1) OVER (ORDER BY col51) AS wf51,   FIRST_VALUE(col1) OVER (ORDER BY col52) AS wf52,   FIRST_VALUE(col1) OVER (ORDER BY col53) AS wf53,   FIRST_VALUE(col1) OVER (ORDER BY col54) AS wf54,   FIRST_VALUE(col1) OVER (ORDER BY col55) AS wf55,   FIRST_VALUE(col1) OVER (ORDER BY col56) AS wf56,   FIRST_VALUE(col1) OVER (ORDER BY col57) AS wf57,   FIRST_VALUE(col1) OVER (ORDER BY col58) AS wf58,   FIRST_VALUE(col1) OVER (ORDER BY col59) AS wf59,   FIRST_VALUE(col1) OVER (ORDER BY col60) AS wf60,   FIRST_VALUE(col1) OVER (ORDER BY col61) AS wf61,   FIRST_VALUE(col1) OVER (ORDER BY col62) AS wf62,   FIRST_VALUE(col1) OVER (ORDER BY col63) AS wf63,   FIRST_VALUE(col1) OVER (ORDER BY col64) AS wf64,   FIRST_VALUE(col1) OVER (ORDER BY col65) AS wf65,   FIRST_VALUE(col1) OVER (ORDER BY col66) AS wf66,   FIRST_VALUE(col1) OVER (ORDER BY col67) AS wf67,   FIRST_VALUE(col1) OVER (ORDER BY col68) AS wf68,   FIRST_VALUE(col1) OVER (ORDER BY col69) AS wf69,   FIRST_VALUE(col1) OVER (ORDER BY col70) AS wf70 FROM t
--Result--
[]
+--------------------+
--Query--
SELECT DISTINCT   FIRST_VALUE(col1) OVER (ORDER BY col1) AS wf1,   FIRST_VALUE(col1) OVER (ORDER BY col2) AS wf2,   FIRST_VALUE(col1) OVER (ORDER BY col3) AS wf3,   FIRST_VALUE(col1) OVER (ORDER BY col4) AS wf4,   FIRST_VALUE(col1) OVER (ORDER BY col5) AS wf5,   FIRST_VALUE(col1) OVER (ORDER BY col6) AS wf6,   FIRST_VALUE(col1) OVER (ORDER BY col7) AS wf7,   FIRST_VALUE(col1) OVER (ORDER BY col8) AS wf8,   FIRST_VALUE(col1) OVER (ORDER BY col9) AS wf9,   FIRST_VALUE(col1) OVER (ORDER BY col10) AS wf10,   FIRST_VALUE(col1) OVER (ORDER BY col11) AS wf11,   FIRST_VALUE(col1) OVER (ORDER BY col12) AS wf12,   FIRST_VALUE(col1) OVER (ORDER BY col13) AS wf13,   FIRST_VALUE(col1) OVER (ORDER BY col14) AS wf14,   FIRST_VALUE(col1) OVER (ORDER BY col15) AS wf15,   FIRST_VALUE(col1) OVER (ORDER BY col16) AS wf16,   FIRST_VALUE(col1) OVER (ORDER BY col17) AS wf17,   FIRST_VALUE(col1) OVER (ORDER BY col18) AS wf18,   FIRST_VALUE(col1) OVER (ORDER BY col19) AS wf19,   FIRST_VALUE(col1) OVER (ORDER BY col20) AS wf20,   FIRST_VALUE(col1) OVER (ORDER BY col21) AS wf21,   FIRST_VALUE(col1) OVER (ORDER BY col22) AS wf22,   FIRST_VALUE(col1) OVER (ORDER BY col23) AS wf23,   FIRST_VALUE(col1) OVER (ORDER BY col24) AS wf24,   FIRST_VALUE(col1) OVER (ORDER BY col25) AS wf25,   FIRST_VALUE(col1) OVER (ORDER BY col26) AS wf26,   FIRST_VALUE(col1) OVER (ORDER BY col27) AS wf27,   FIRST_VALUE(col1) OVER (ORDER BY col28) AS wf28,   FIRST_VALUE(col1) OVER (ORDER BY col29) AS wf29,   FIRST_VALUE(col1) OVER (ORDER BY col30) AS wf30,   FIRST_VALUE(col1) OVER (ORDER BY col31) AS wf31,   FIRST_VALUE(col1) OVER (ORDER BY col32) AS wf32,   FIRST_VALUE(col1) OVER (ORDER BY col33) AS wf33,   FIRST_VALUE(col1) OVER (ORDER BY col34) AS wf34,   FIRST_VALUE(col1) OVER (ORDER BY col35) AS wf35,   FIRST_VALUE(col1) OVER (ORDER BY col36) AS wf36,   FIRST_VALUE(col1) OVER (ORDER BY col37) AS wf37,   FIRST_VALUE(col1) OVER (ORDER BY col38) AS wf38,   FIRST_VALUE(col1) OVER (ORDER BY col39) AS wf39,   FIRST_VALUE(col1) OVER (ORDER BY col40) AS wf40,   FIRST_VALUE(col1) OVER (ORDER BY col41) AS wf41,   FIRST_VALUE(col1) OVER (ORDER BY col42) AS wf42,   FIRST_VALUE(col1) OVER (ORDER BY col43) AS wf43,   FIRST_VALUE(col1) OVER (ORDER BY col44) AS wf44,   FIRST_VALUE(col1) OVER (ORDER BY col45) AS wf45,   FIRST_VALUE(col1) OVER (ORDER BY col46) AS wf46,   FIRST_VALUE(col1) OVER (ORDER BY col47) AS wf47,   FIRST_VALUE(col1) OVER (ORDER BY col48) AS wf48,   FIRST_VALUE(col1) OVER (ORDER BY col49) AS wf49,   FIRST_VALUE(col1) OVER (ORDER BY col50) AS wf50,   FIRST_VALUE(col1) OVER (ORDER BY col51) AS wf51,   FIRST_VALUE(col1) OVER (ORDER BY col52) AS wf52,   FIRST_VALUE(col1) OVER (ORDER BY col53) AS wf53,   FIRST_VALUE(col1) OVER (ORDER BY col54) AS wf54,   FIRST_VALUE(col1) OVER (ORDER BY col55) AS wf55,   FIRST_VALUE(col1) OVER (ORDER BY col56) AS wf56,   FIRST_VALUE(col1) OVER (ORDER BY col57) AS wf57,   FIRST_VALUE(col1) OVER (ORDER BY col58) AS wf58,   FIRST_VALUE(col1) OVER (ORDER BY col59) AS wf59,   FIRST_VALUE(col1) OVER (ORDER BY col60) AS wf60,   FIRST_VALUE(col1) OVER (ORDER BY col61) AS wf61,   FIRST_VALUE(col1) OVER (ORDER BY col62) AS wf62,   FIRST_VALUE(col1) OVER (ORDER BY col63) AS wf63,   FIRST_VALUE(col1) OVER (ORDER BY col64) AS wf64,   FIRST_VALUE(col1) OVER (ORDER BY col65) AS wf65,   FIRST_VALUE(col1) OVER (ORDER BY col66) AS wf66,   FIRST_VALUE(col1) OVER (ORDER BY col67) AS wf67,   FIRST_VALUE(col1) OVER (ORDER BY col68) AS wf68,   FIRST_VALUE(col1) OVER (ORDER BY col69) AS wf69,   FIRST_VALUE(col1) OVER (ORDER BY col70) AS wf70 FROM t
--Result--
[]
+--------------------+
--Query--
SELECT f1,f2,f3,        FIRST_VALUE(f3) OVER w  AS 'FIRST_VALUE',        LAG(f3) OVER w          AS 'LAG',        NTH_VALUE(f3, 4) OVER w AS 'NTH_VALUE' FROM t1 WINDOW w AS (PARTITION BY f2 ORDER BY f3                      ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING)
--Result--
[(1, 1, 1, 1, None, None), (2, 1, 20, 1, 1, 4000), (3, 1, 300, 20, 20, None), (4, 1, 4000, 300, 300, None)]
+--------------------+
--Query--
SELECT f1, f2, DENSE_RANK() OVER (ORDER BY f1), RANK() OVER (ORDER BY f1) FROM t1 GROUP BY f1,f2 WITH ROLLUP
--Result--
[(None, None, 1, 1), (1, 1, 2, 2), (1, 2, 2, 2), (1, None, 2, 2), (2, 1, 3, 5), (2, 2, 3, 5), (2, None, 3, 5)]
+--------------------+
--Query--
SELECT n      , SUM(n)   OVER w AS "sum(n)"      , COUNT(*) OVER w AS "count(n)"      , AVG(n)   OVER w AS "avg(n)"      , SUM(n)   OVER w / COUNT(*) OVER w AS "sum(n)/count(n)",      r      , SUM(r)   OVER w AS "sum(r)"      , COUNT(*) OVER w AS "count(r)"      , AVG(r)   OVER w AS "avg(r)"      , SUM(r)   OVER w / COUNT(*) OVER w AS "sum(r)/count(r)" FROM t WINDOW w AS (ORDER BY n ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) ORDER BY n
--Result--
[(1, 9.0, 3, 3.0, 3.0, 1.0, 9.0, 3, 3.0, 3.0), (2, 7.0, 2, 3.5, 3.5, 2.0, 7.0, 2, 3.5, 3.5), (3, 4.0, 1, 4.0, 4.0, 3.0, 4.0, 1, 4.0, 4.0), (4, None, 0, None, None, 4.0, None, 0, None, None)]
+--------------------+
--Query--
SELECT n      , SUM(n)   OVER w AS "sum(n)"      , COUNT(*) OVER w AS "count(n)"      , AVG(n)   OVER w AS "avg(n)"      , SUM(n)   OVER w / COUNT(*) OVER w AS "sum(n)/count(n)",      r      , SUM(r)   OVER w AS "sum(r)"      , COUNT(*) OVER w AS "count(r)"      , AVG(r)   OVER w AS "avg(r)"      , SUM(r)   OVER w / COUNT(*) OVER w AS "sum(r)/count(r)" FROM t WINDOW w AS (ORDER BY n ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) ORDER BY n
--Result--
[(1, 9.0, 3, 3.0, 3.0, 1.0, 9.0, 3, 3.0, 3.0), (2, 7.0, 2, 3.5, 3.5, 2.0, 7.0, 2, 3.5, 3.5), (3, 4.0, 1, 4.0, 4.0, 3.0, 4.0, 1, 4.0, 4.0), (4, None, 0, None, None, 4.0, None, 0, None, None)]
+--------------------+
--Query--
SELECT 1 FROM t1 ORDER BY BIT_OR(a) OVER (ORDER BY b ROWS CURRENT ROW)
--Result--
[(1,), (1,)]
+--------------------+
--Query--
PREPARE stmt1 FROM "   SELECT a.i, (LAST_VALUE(a.i) OVER outer_window) = a.i AS result   FROM (SELECT LAG(i) OVER inner_window AS i_lag,                i AS i         FROM t         WINDOW inner_window AS (ORDER BY i) ) AS a   WINDOW outer_window AS (ORDER BY a.i)"
--Result--
[]
+--------------------+
--Query--
SELECT AVG( @A := c1 ) OVER (ROWS 1 PRECEDING) FROM t1
--Result--
[(None,), (None,), (-2128216064.0,)]
+--------------------+
--Query--
SELECT @A
--Result--
[(-2128216064,)]
+--------------------+
--Query--
SELECT DISTINCT        POW( COUNT(*), @a:=(SELECT 1 FROM t1 LEFT JOIN                                          t1 AS t2                                          ON @a)           ) AS b FROM t1 GROUP BY a
--Result--
[(1.0,)]
+--------------------+
--Query--
SELECT DISTINCT        pow( COUNT(*), @a:=(SELECT 1 FROM t1 LEFT JOIN                                          t1 t2                                          ON @a)           ) AS `pow`,        AVG( @a:= a ) OVER (ROWS 1 PRECEDING) AS `avg` FROM t1 GROUP BY a
--Result--
[(1.0, 0.0)]
+--------------------+
--Query--
SELECT @a
--Result--
[(1,)]
+--------------------+
--Query--
SELECT DISTINCT        pow( COUNT(*), @a:=(SELECT MAX( @a := t1.a) OVER w                            FROM t1                                 LEFT JOIN                                 t1 t2                                 ON @a                            WINDOW w AS (ROWS 1 PRECEDING)                           )           ) AS `pow` FROM t1 GROUP BY a
--Result--
[(1.0,)]
+--------------------+
--Query--
SELECT @a
--Result--
[(0,)]
+--------------------+
--Query--
SELECT @A := (CUME_DIST() OVER () + f1 + RANK() OVER ()) FROM t1 GROUP BY f1 WITH ROLLUP
--Result--
[]
+--------------------+
