--Query--
select "stmt 1"
--Result--
[('stmt 1',)]
+--------------------+
--Query--
select "stmt 1"
--Result--
[('stmt 1',)]
+--------------------+
--Query--
select "stmt 1"
--Result--
[('stmt 1',)]
+--------------------+
--Query--
select "stmt 1"
--Result--
[('stmt 1',)]
+--------------------+
--Query--
select "stmt 1"
--Result--
[('stmt 1',)]
+--------------------+
--Query--
select "stmt 1"
--Result--
[('stmt 1',)]
+--------------------+
--Query--
select "stmt 1"
--Result--
[('stmt 1',)]
+--------------------+
--Query--
select "stmt 1"
--Result--
[('stmt 1',)]
+--------------------+
--Query--
select concat("foo")
--Result--
[('foo',)]
+--------------------+
--Query--
select abs(3)
--Result--
[(3,)]
+--------------------+
--Query--
select instr("foobar", "bar")
--Result--
[(4,)]
+--------------------+
--Query--
select conv(255, 10, 16)
--Result--
[('FF',)]
+--------------------+
--Query--
select atan(10)
--Result--
[(1.4711276743037345,)]
+--------------------+
--Query--
SELECT STR_TO_DATE('10:00 PM', '%h:%i %p') + INTERVAL 10 MINUTE
--Result--
[(datetime.timedelta(seconds=79800),)]
+--------------------+
--Query--
SELECT STR_TO_DATE('10:00 PM', '%h:%i %p') + INTERVAL (INTERVAL(1,2,3) + 1) MINUTE
--Result--
[(datetime.timedelta(seconds=79260),)]
+--------------------+
--Query--
SELECT "1997-12-31 23:59:59" + INTERVAL 1 SECOND
--Result--
[('1998-01-01 00:00:00',)]
+--------------------+
--Query--
SELECT 1 + INTERVAL(1,0,1,2) + 1
--Result--
[(4,)]
+--------------------+
--Query--
SELECT INTERVAL(1^1,0,1,2) + 1
--Result--
[(2,)]
+--------------------+
--Query--
SELECT INTERVAL(1,0+1,2,3) * 5.5
--Result--
[(5.5,)]
+--------------------+
--Query--
SELECT INTERVAL(3,3,1+3,4+4) / 0.5
--Result--
[(2.0,)]
+--------------------+
--Query--
SELECT (INTERVAL(1,0,1,2) + 5) * 7 + INTERVAL(1,0,1,2) / 2
--Result--
[(50.0,)]
+--------------------+
--Query--
SELECT INTERVAL(1,0,1,2) + 1, 5 * INTERVAL(1,0,1,2)
--Result--
[(3, 10)]
+--------------------+
--Query--
SELECT INTERVAL(0,(1*5)/2) + INTERVAL(5,4,3)
--Result--
[(2,)]
+--------------------+
--Query--
SELECT 1^1 + INTERVAL 1+1 SECOND & 1 + INTERVAL 1+1 SECOND
--Result--
[(None,)]
+--------------------+
--Query--
SELECT 1%2 - INTERVAL 1^1 SECOND | 1%2 - INTERVAL 1^1 SECOND
--Result--
[(None,)]
+--------------------+
--Query--
SELECT * FROM t1 WHERE a = INTERVAL(3,2,1) + 1
--Result--
[(3, datetime.datetime(1998, 1, 1, 0, 0))]
+--------------------+
--Query--
SELECT t1.* FROM t1 AS t0, { OJ t2 INNER JOIN t1 ON (t1.a1=t2.a1) } WHERE t0.a3=2
--Result--
[]
+--------------------+
--Query--
SELECT t1.*,t2.* FROM { OJ ((t1 INNER JOIN t2 ON (t1.a1=t2.a2)) LEFT OUTER JOIN t3 ON t3.a3=t2.a1)}
--Result--
[]
+--------------------+
--Query--
SELECT * FROM {oj t1 LEFT OUTER JOIN t2 ON t1.a1=t2.a3} WHERE t1.a2 > 10
--Result--
[]
+--------------------+
--Query--
SELECT {fn CONCAT(a1,a2)} FROM t1
--Result--
[]
+--------------------+
--Query--
SELECT a1, a4 FROM t2 WHERE a4 LIKE {fn UCASE('1789-07-14')}
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM DUAL WHERE 1 GROUP BY 1 HAVING 1 ORDER BY 1   FOR UPDATE
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 FROM   (SELECT 1 FROM DUAL WHERE 1 GROUP BY 1 HAVING 1 ORDER BY 1    FOR UPDATE) a
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 FROM t1   WHERE EXISTS(SELECT 1 FROM DUAL WHERE 1 GROUP BY 1 HAVING 1 ORDER BY 1                FOR UPDATE)
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM t1 UNION SELECT 1 FROM DUAL WHERE 1 GROUP BY 1 HAVING 1 ORDER BY 1   FOR UPDATE
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 FROM t1 UNION SELECT 1 FROM t1 ORDER BY 1 LIMIT 1
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM t1 UNION SELECT 1 FROM t1 ORDER BY 1 LIMIT 1 FOR UPDATE
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM t1 INTO @var17727401
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM DUAL INTO @var17727401
--Result--
[]
+--------------------+
--Query--
SELECT 1 INTO @var17727401
--Result--
[]
+--------------------+
--Query--
SELECT 1 INTO @var17727401 FROM t1
--Result--
[]
+--------------------+
--Query--
SELECT 1 INTO @var17727401 FROM DUAL
--Result--
[]
+--------------------+
--Query--
SELECT 1 INTO @var17727401 FROM t1 WHERE 1 GROUP BY 1 HAVING 1 ORDER BY 1 LIMIT 1
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM t1 WHERE 1 GROUP BY 1 HAVING 1 ORDER BY 1 LIMIT 1 INTO @var17727401
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM t1 UNION SELECT 1 FROM t1 INTO @var17727401
--Result--
[]
+--------------------+
--Query--
SELECT COUNT(1) FROM DUAL GROUP BY '1' ORDER BY 1
--Result--
[(1,)]
+--------------------+
--Query--
SELECT (SELECT 1 c                   GROUP BY 1 HAVING 1 ORDER BY COUNT(1)) AS   'null is not expected'
--Result--
[(1,)]
+--------------------+
--Query--
SELECT (SELECT 1 c FROM DUAL         GROUP BY 1 HAVING 1 ORDER BY COUNT(1)) AS   'null is not expected'
--Result--
[(1,)]
+--------------------+
--Query--
SELECT (SELECT 1 c                   GROUP BY 1 HAVING 0 ORDER BY COUNT(1)) AS   'null is expected'
--Result--
[(None,)]
+--------------------+
--Query--
SELECT (SELECT 1 c FROM DUAL         GROUP BY 1 HAVING 0 ORDER BY COUNT(1)) AS   'null is expected'
--Result--
[(None,)]
+--------------------+
--Query--
SELECT (SELECT 1 c           WHERE 1 GROUP BY 1 HAVING 1 ORDER BY COUNT(1)) AS   'null is not expected'
--Result--
[(1,)]
+--------------------+
--Query--
SELECT (SELECT 1 c FROM DUAL WHERE 1 GROUP BY 1 HAVING 1 ORDER BY COUNT(1)) AS   'null is not expected'
--Result--
[(1,)]
+--------------------+
--Query--
SELECT (SELECT 1 c           WHERE 1 GROUP BY 1 HAVING 0 ORDER BY COUNT(1)) AS   'null is expected'
--Result--
[(None,)]
+--------------------+
--Query--
SELECT (SELECT 1 c FROM DUAL WHERE 1 GROUP BY 1 HAVING 0 ORDER BY COUNT(1)) AS   'null is expected'
--Result--
[(None,)]
+--------------------+
--Query--
SELECT (SELECT 1 c           WHERE 0 GROUP BY 1 HAVING 1 ORDER BY COUNT(1)) AS   'null is expected'
--Result--
[(None,)]
+--------------------+
--Query--
SELECT (SELECT 1 c FROM DUAL WHERE 0 GROUP BY 1 HAVING 1 ORDER BY COUNT(1)) AS   'null is expected'
--Result--
[(None,)]
+--------------------+
--Query--
SELECT (SELECT 1 c           WHERE 0 GROUP BY 1 HAVING 0 ORDER BY COUNT(1)) AS   'null is expected'
--Result--
[(None,)]
+--------------------+
--Query--
SELECT (SELECT 1 c FROM DUAL WHERE 0 GROUP BY 1 HAVING 0 ORDER BY COUNT(1)) AS   'null is expected'
--Result--
[(None,)]
+--------------------+
--Query--
SELECT ((SELECT 1 AS f           HAVING EXISTS(SELECT 1 FROM t1) IS TRUE   ORDER BY f))
--Result--
[(1,)]
+--------------------+
--Query--
SELECT ((SELECT 1 AS f FROM DUAL HAVING EXISTS(SELECT 1 FROM t1) IS TRUE   ORDER BY f))
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 AS f          FROM DUAL HAVING EXISTS(SELECT 1 FROM t1) IS TRUE   ORDER BY f
--Result--
[(1,)]
+--------------------+
--Query--
SELECT i FROM t1 WHERE i = 1 UNION SELECT i FROM t2 WHERE i = 10 ORDER BY i
--Result--
[(1,), (10,)]
+--------------------+
--Query--
SELECT i FROM t1 WHERE i = 1 UNION SELECT i FROM t2 WHERE i = 10 LIMIT 100
--Result--
[(1,), (10,)]
+--------------------+
--Query--
SELECT i FROM t1 WHERE i = 1 UNION SELECT i FROM t2 GROUP BY i HAVING i = 10 ORDER BY i
--Result--
[(1,), (10,)]
+--------------------+
--Query--
SELECT i FROM t1 WHERE i = 1 UNION SELECT i FROM t2 GROUP BY i HAVING i = 10 LIMIT 100
--Result--
[(1,), (10,)]
+--------------------+
--Query--
SELECT * FROM ( SELECT a FROM t1 UNION SELECT 1 ORDER BY a ) AS a1 WHERE a1.a = 1 OR a1.a = 2
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT HEX(a) FROM t1
--Result--
[]
+--------------------+
--Query--
SELECT 1 AS parse_gcol_expr
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 UNION SELECT 2
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT 1 UNION (SELECT 2)
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT 2 FROM t1 UNION ((SELECT 3 FROM t1))
--Result--
[(2,), (3,)]
+--------------------+
--Query--
SELECT 1 UNION (SELECT 2 FROM t1 ORDER BY a LIMIT 1)
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT 1 UNION ( SELECT 1 UNION SELECT 1 )
--Result--
[(1,)]
+--------------------+
--Query--
SELECT * FROM    (SELECT 1 FROM t1   UNION   SELECT 2 FROM t1) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM   ((SELECT 1 FROM t1   UNION   SELECT 2 FROM t1)) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM    (SELECT 1 FROM t1   UNION  (SELECT 2 FROM t1)) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM   ((SELECT 1 FROM t1   UNION  (SELECT 2 FROM t1))) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM   ((SELECT 1 FROM t1   UNION ((SELECT 2 FROM t1)))) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM   ((SELECT 1 FROM t1)  UNION   SELECT 2 FROM t1) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM  (((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM ((((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1)) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM   ((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1)) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM  (((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1))) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM ((((SELECT 1 FROM t1)) UNION  (SELECT 2 FROM t1))) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM  (((SELECT 1 FROM t1)  UNION ((SELECT 2 FROM t1)))) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM ((((SELECT 1 FROM t1)) UNION ((SELECT 2 FROM t1)))) dt
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM  ( t1 JOIN t2 ON TRUE )
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM (( t1 JOIN t2 ON TRUE ))
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM ( t1 JOIN t2 ON TRUE  JOIN t3 ON TRUE )
--Result--
[(1, 2, 3)]
+--------------------+
--Query--
SELECT * FROM ((t1 JOIN t2 ON TRUE) JOIN t3 ON TRUE )
--Result--
[(1, 2, 3)]
+--------------------+
--Query--
SELECT * FROM (t1 INNER JOIN t2 ON (t1.a = t2.a))
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM (t1)
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 FROM ((t1))
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 UNION SELECT 2 FROM (t2)
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT 1 FROM  (SELECT 2  ORDER BY 1) AS res
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 FROM ((SELECT 2) ORDER BY 1) AS res
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 FROM ((SELECT 2) LIMIT 1) AS res
--Result--
[(1,)]
+--------------------+
--Query--
SELECT * FROM ( t1 AS alias1 )
--Result--
[(1,)]
+--------------------+
--Query--
SELECT * FROM   t1 AS alias1, t2 AS alias2
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM ( t1 AS alias1, t2 AS alias2 )
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM ( t1 JOIN t2 ON TRUE, (SELECT 1 FROM DUAL) t1a )
--Result--
[(1, 2, 1)]
+--------------------+
--Query--
SELECT * FROM t1 JOIN t2 ON TRUE, (SELECT 1 FROM DUAL) t1a
--Result--
[(1, 2, 1)]
+--------------------+
--Query--
SELECT * FROM ( SELECT 1 FROM DUAL ) t1a
--Result--
[(1,)]
+--------------------+
--Query--
SELECT * FROM  ( t1, t2 )
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM (( t1, t2 ))
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM  ( (t1),   t2  )
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM  (((t1)),  t2  )
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM  ( (t1),  (t2) )
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM  (  t1,   (t2) )
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM ((SELECT 1 UNION SELECT 1) UNION SELECT 1) a
--Result--
[(1,)]
+--------------------+
--Query--
SELECT * FROM (t1, t2) JOIN (t3, t4) ON TRUE
--Result--
[(1, 2, 3, 3)]
+--------------------+
--Query--
SELECT * FROM ((t1, t2) JOIN t3 ON TRUE)
--Result--
[(1, 2, 3)]
+--------------------+
--Query--
SELECT * FROM t1 LEFT JOIN ( t2, t3, t4 ) ON a = c
--Result--
[(1, None, None, None)]
+--------------------+
--Query--
SELECT * FROM t5 NATURAL JOIN ((t1 NATURAL JOIN t2), (t3 NATURAL JOIN t4))
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ((t1 NATURAL JOIN t2), (t3 NATURAL JOIN t4)) NATURAL JOIN t5
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 JOIN ( t2, t3 ) ON TRUE
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ( t1, t2 , t3 )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ( ( t1, t2 ), t3 )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ( ((t1, t2)), t3 )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ( t1, ( t2, t3 ) )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ( t1, ((t2, t3)) )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ((( t1, t2 ), t3))
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ((((t1, t2)), t3))
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ((t1, ( t2, t3 )))
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ((t1, ((t2, t3))))
--Result--
[]
+--------------------+
--Query--
SELECT 1 INTO @v
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM t1 INTO @v
--Result--
[]
+--------------------+
--Query--
SELECT 1 UNION SELECT 1 INTO @v FROM t1
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 JOIN t2
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 JOIN t2 ON a = b
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 JOIN t1 t12 USING ( a )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 INNER JOIN t2
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 INNER JOIN t2 ON a = b
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 INNER JOIN t1 t12 USING ( a )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 CROSS JOIN t2
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 CROSS JOIN t2 ON a = b
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 CROSS JOIN t1 t12 USING ( a )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 STRAIGHT_JOIN t2
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 STRAIGHT_JOIN t2 ON a = b
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 STRAIGHT_JOIN t1 t12 USING ( a )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 NATURAL JOIN t1 t12
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 NATURAL INNER JOIN t1 t12
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 LEFT JOIN t2 ON a = b
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 LEFT JOIN t1 t12 USING ( a )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 NATURAL LEFT JOIN t2
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 LEFT OUTER JOIN t2 ON a = b
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 LEFT OUTER JOIN t1 t12 USING ( a )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 NATURAL LEFT OUTER JOIN t2
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 RIGHT JOIN t2 ON a = b
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 RIGHT JOIN t1 t12 USING ( a )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 NATURAL RIGHT JOIN t2
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 RIGHT OUTER JOIN t2 ON a = b
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 t11 RIGHT OUTER JOIN t1 t12 USING ( a )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 NATURAL RIGHT OUTER JOIN t2
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 NATURAL LEFT JOIN t2 NATURAL RIGHT JOIN t3
--Result--
[(3, 3, 3, 3), (4, 4, None, None), (5, 5, None, None)]
+--------------------+
--Query--
SELECT * FROM (t1 NATURAL LEFT JOIN t2) NATURAL RIGHT JOIN t3
--Result--
[(3, 3, 3, 3), (4, 4, None, None), (5, 5, None, None)]
+--------------------+
--Query--
SELECT * FROM t1 NATURAL LEFT JOIN (t2 NATURAL RIGHT JOIN t3)
--Result--
[(1, 1, None, None), (2, 2, None, None), (3, 3, 3, 3)]
+--------------------+
--Query--
SELECT * FROM v1
--Result--
[(1,)]
+--------------------+
--Query--
SELECT * FROM v1
--Result--
[(1,)]
+--------------------+
--Query--
select 2 as expected, /*!01000/**/*/ 2 as result
--Result--
[(2, 2)]
+--------------------+
--Query--
select 1 as expected, /*!99998/**/*/ 1 as result
--Result--
[(1, 1)]
+--------------------+
--Query--
select 3 as expected, /*!01000 1 + */ 2 as result
--Result--
[(3, 3)]
+--------------------+
--Query--
select 2 as expected, /*!99990 1 + */ 2 as result
--Result--
[(2, 2)]
+--------------------+
--Query--
select 7 as expected, /*!01000 1 + /* 8 + */ 2 + */ 4 as result
--Result--
[(7, 7)]
+--------------------+
--Query--
select 8 as expected, /*!99998 1 + /* 2 + */ 4 + */ 8 as result
--Result--
[(8, 8)]
+--------------------+
--Query--
select 7 as expected, /*!01000 1 + /*!99998 8 + */ 2 + */ 4 as result
--Result--
[(7, 7)]
+--------------------+
--Query--
select 4 as expected, /*!99998 1 + /*!99998 8 + */ 2 + */ 4 as result
--Result--
[(4, 4)]
+--------------------+
--Query--
select 4 as expected, /*!99998 1 + /*!01000 8 + */ 2 + */ 4 as result
--Result--
[(4, 4)]
+--------------------+
--Query--
SELECT @@default_collation_for_utf8mb4
--Result--
[('utf8mb4_0900_ai_ci',)]
+--------------------+
--Query--
SELECT @@default_collation_for_utf8mb4
--Result--
[('utf8mb4_0900_ai_ci',)]
+--------------------+
--Query--
SELECT 1 AS PERSIST, 2 AS PERSIST_ONLY
--Result--
[(1, 2)]
+--------------------+
--Query--
SELECT * FROM { OJ t1 LEFT JOIN t2 ON TRUE }
--Result--
[]
+--------------------+
--Query--
SELECT 'ab' LIKE 'a%', 'ab' LIKE 'a' || '%'
--Result--
[(1, 0)]
+--------------------+
--Query--
SELECT 'ab' NOT LIKE 'a%', 'ab' NOT LIKE 'a' || '%'
--Result--
[(0, 1)]
+--------------------+
--Query--
SELECT 'ab' LIKE 'ac', 'ab' LIKE 'a' || 'c'
--Result--
[(0, 0)]
+--------------------+
--Query--
SELECT 'ab' NOT LIKE 'ac', 'ab' NOT LIKE 'a' || 'c'
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT 'a%' LIKE 'a!%' ESCAPE '!', 'a%' LIKE 'a!%' ESCAPE '' || '!'
--Result--
[(1, 0)]
+--------------------+
--Query--
SELECT 'a%' NOT LIKE 'a!%' ESCAPE '!', 'a%' NOT LIKE 'a!%' ESCAPE '' || '!'
--Result--
[(0, 1)]
+--------------------+
--Query--
SELECT 'a%' LIKE 'a!%' ESCAPE '' || '$', 'a%' LIKE 'a!%' ESCAPE '' || '$'
--Result--
[(0, 0)]
+--------------------+
--Query--
SELECT 'a%' NOT LIKE 'a!%' ESCAPE '' || '$', 'a%' NOT LIKE 'a!%' ESCAPE '' || '$'
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT 1 ^ 100, 1 ^ '10' || '0'
--Result--
[(101, 1)]
+--------------------+
--Query--
SELECT -1 || '0'
--Result--
[(1,)]
+--------------------+
--Query--
SELECT 1 UNION SELECT 1 INTO @var
--Result--
[]
+--------------------+
--Query--
SELECT 1 UNION SELECT 1 FROM DUAL INTO @var
--Result--
[]
+--------------------+
--Query--
SELECT 1 UNION SELECT 1 FROM DUAL FOR UPDATE INTO @var
--Result--
[]
+--------------------+
--Query--
SELECT 1 UNION SELECT 1 INTO @var FROM DUAL
--Result--
[]
+--------------------+
--Query--
SELECT 1 UNION (SELECT 1 INTO @var FROM DUAL)
--Result--
[]
+--------------------+
--Query--
SELECT 1 UNION SELECT 1 FROM DUAL INTO @var FOR UPDATE
--Result--
[]
+--------------------+
--Query--
SELECT 1 UNION SELECT 1 INTO @var FOR UPDATE
--Result--
[]
+--------------------+
--Query--
SELECT `*` FROM t1
--Result--
[(2,)]
+--------------------+
--Query--
SELECT t1.`*`, t1.* FROM t1
--Result--
[(2, 1, 2, 3)]
+--------------------+
--Query--
SELECT @var
--Result--
[(1,)]
+--------------------+
--Query--
SELECT @var
--Result--
[(1,)]
+--------------------+
--Query--
SELECT @var
--Result--
[(1,)]
+--------------------+
--Query--
SELECT @var
--Result--
[(1,)]
+--------------------+
--Query--
SELECT * from `full`
--Result--
[]
+--------------------+
--Query--
SELECT * from `full` AS full
--Result--
[]
+--------------------+
--Query--
SELECT * from `full` AS `full`
--Result--
[]
+--------------------+
--Query--
SELECT * from full
--Result--
[]
+--------------------+
--Query--
SELECT * from full as full
--Result--
[]
+--------------------+
--Query--
SELECT * from `full` full
--Result--
[]
+--------------------+
--Query--
SELECT * from `full`
--Result--
[]
+--------------------+
--Query--
SELECT * from full
--Result--
[]
+--------------------+
