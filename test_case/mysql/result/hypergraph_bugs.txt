--Query--
SELECT IF(TRACE LIKE '%Left join [companion set %] (extra join condition = (t1.a = 5) AND (t2.a = 5))%',    'OK', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t0, t1 LEFT JOIN (t2,t3) ON a1=5 WHERE a0=a1 AND a0=1
--Result--
[(1, 1, None, None)]
+--------------------+
--Query--
SELECT f1 FROM t1 GROUP BY f1 HAVING f1 = 10 AND f1 <> 11
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM t1 LEFT JOIN (SELECT t2.*                    FROM (t1 AS t2 INNER JOIN t1 AS t3 ON (t3.f1 = t2.f1))                    WHERE (t3.f1 <> 1 OR t2.f1 > t2.f1)) AS dt ON (t1.f1 = dt.f1)
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1 WHERE t1.f1 NOT IN (SELECT t2.f1                     FROM (t1 AS t2 JOIN t1 AS t3 ON (t3.f1 = t2.f1))                     WHERE (t3.f1 <> t2.f1 OR t3.f1 < t2.f1))
--Result--
[]
+--------------------+
--Query--
PREPARE ps FROM "SELECT * FROM (WITH RECURSIVE qn AS (SELECT 1 FROM t1 UNION ALL                                       SELECT 1 FROM t1 STRAIGHT_JOIN qn)                                      SELECT * FROM qn) AS dt1,                                      (SELECT COUNT(*) FROM t1) AS dt2"
--Result--
[]
+--------------------+
--Query--
SELECT * FROM   t RIGHT JOIN   (SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt   ON t.x = dt.m
--Result--
[]
+--------------------+
--Query--
SELECT * FROM   t LEFT JOIN   (SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt   ON t.x = dt.m
--Result--
[(1, 10, None), (2, 20, None), (3, 30, None)]
+--------------------+
--Query--
SELECT * FROM   t AS t1 LEFT JOIN   (t AS t2    INNER JOIN (SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt    ON t2.x = dt.m)   ON t1.x = t2.y
--Result--
[(1, 10, None, None, None), (2, 20, None, None, None), (3, 30, None, None, None)]
+--------------------+
--Query--
SELECT 1  FROM t1 LEFT JOIN (SELECT * FROM t1 AS t2                     WHERE f1 IN (SELECT f1+1 FROM t1 AS t3)) AS dt  ON t1.f1=dt.f1
--Result--
[]
+--------------------+
--Query--
SELECT f1 FROM t1 WHERE EXISTS (SELECT t2.f1               FROM (t1 AS t2 JOIN t1 AS t3 ON (t3.f1 = t2.f2))               LEFT JOIN t1 AS t4 ON TRUE               WHERE t4.f1 = t3.f1 OR t3.f2 >= t2.f2) GROUP BY f1
--Result--
[]
+--------------------+
--Query--
SELECT 1 FROM (SELECT * FROM t1       WHERE f1 IN (SELECT t1.f1 FROM (t1 AS t2 JOIN t1 AS t3 ON t3.f1 = t2.f2)                    LEFT JOIN t1 AS t4 ON TRUE                    WHERE (t3.f2 <> t3.f2 OR t4.f2 = t2.f2))) AS t5 JOIN t1 AS t6 ON TRUE
--Result--
[]
+--------------------+
--Query--
SELECT 1 IN (   SELECT COUNT(*) FROM t1 WHERE x NOT IN (     SELECT 1 FROM t2 WHERE y <> y OR z <> z))
--Result--
[(0,)]
+--------------------+
--Query--
SELECT /*+ SET_VAR(optimizer_max_subgraph_pairs = 1) */ 1 FROM t AS t1 JOIN t AS t2 USING (table_id)      JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t3 USING (table_id)      JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t4 USING (table_id)      JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t5 USING (table_id)      JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t6 USING (table_id)      JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t7 USING (table_id)      JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t8 USING (table_id)
--Result--
[]
+--------------------+
--Query--
SELECT /*+ SET_VAR(optimizer_max_subgraph_pairs = 1) */ 1 FROM t0 AS a NATURAL JOIN      t0 AS b NATURAL JOIN      t0 AS c NATURAL JOIN      t0 AS d NATURAL JOIN      t0 AS e NATURAL JOIN      t0 AS f NATURAL JOIN      t1 AS g NATURAL JOIN      t1 AS h
--Result--
[]
+--------------------+
--Query--
PREPARE ps FROM 'SELECT *  FROM t AS t1 LEFT JOIN t AS t2 ON t1.x=t2.x AND t1.y IN (SELECT x FROM t)'
--Result--
[]
+--------------------+
--Query--
PREPARE ps FROM 'SELECT *  FROM t AS t1 LEFT JOIN t AS t2 ON t1.x=t2.x AND t1.y IN (SELECT x FROM t)'
--Result--
[]
+--------------------+
--Query--
PREPARE ps FROM 'SELECT x, MATCH(x) AGAINST (''abc'') AS score FROM t  GROUP BY x HAVING MATCH(x) AGAINST(''abc'') > 0'
--Result--
[]
+--------------------+
--Query--
PREPARE ps FROM 'SELECT x, MATCH(x) AGAINST (''abc'') AS score FROM t  GROUP BY x HAVING MATCH(x) AGAINST(''abc'') > 0'
--Result--
[]
+--------------------+
