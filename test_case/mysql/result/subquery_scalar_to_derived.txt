--Query--
SELECT t0.*, t1.* FROM t0 LEFT OUTER JOIN t1 ON t0.a != t1.a WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2)
--Result--
[(1, 4), (1, 3), (2, 4), (2, 3), (3, 4), (4, 3)]
+--------------------+
--Query--
SELECT * FROM t0 LEFT OUTER JOIN t1 on t0.a = t1.a WHERE t0.a > (SELECT COUNT(a) AS cnt FROM t2)
--Result--
[(3, 3), (4, 4)]
+--------------------+
--Query--
SELECT t0.*, t1.* FROM (t0 LEFT OUTER JOIN t1 ON t0.a != t1.a) LEFT OUTER JOIN        (SELECT COUNT(a) AS cnt FROM t2) AS derived ON TRUE WHERE t1.a > derived.cnt
--Result--
[(1, 4), (1, 3), (2, 4), (2, 3), (3, 4), (4, 3)]
+--------------------+
--Query--
SELECT (SELECT SUM(a) + (SELECT SUM(t1.a) FROM t1) + SUM(t3.a) FROM t2) FROM t3
--Result--
[(16.0,)]
+--------------------+
--Query--
SELECT SUM(a), (SELECT SUM(b) FROM t3) scalar FROM t1 HAVING SUM(a) > scalar
--Result--
[(10.0, 6.0)]
+--------------------+
--Query--
SELECT t1.a, t2.a, t3.a FROM t1      LEFT JOIN (SELECT MIN(a) FROM t1) derived_1      ON TRUE      LEFT JOIN ( t2                  LEFT JOIN (SELECT COUNT(*) FROM t1) AS derived_2                  ON TRUE                  JOIN t3                  ON t2.a = derived_2.`COUNT(*)` )      ON t1.a + derived_1.`MIN(a)` = t3.b
--Result--
[(1, None, None), (2, None, None), (3, None, None), (4, None, None)]
+--------------------+
--Query--
SELECT a + (SELECT SUM(a) FROM t1) FROM t1
--Result--
[(11.0,), (12.0,), (13.0,), (14.0,)]
+--------------------+
--Query--
SELECT (t2.a + derived_1_0.sum_plus_cnt) AS cnt FROM t2      LEFT JOIN (SELECT (derived_2_0.tmp_aggr_1 + derived_2_1.count_a) AS sum_plus_cnt                 FROM (SELECT STRAIGHT_JOIN SUM(t1.a) AS tmp_aggr_1 from t1) derived_2_0                 LEFT JOIN (SELECT COUNT(t1.a) AS count_a from t1) derived_2_1                 ON TRUE) derived_1_0      ON TRUE
--Result--
[(15.0,), (16.0,)]
+--------------------+
--Query--
SELECT a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1)     FROM (SELECT * from t1) t11) AS cnt FROM t2
--Result--
[(15.0,), (16.0,)]
+--------------------+
--Query--
SELECT AVG(a) OVER () AS `avg`,        a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1)     FROM (SELECT * from t1) t11) AS cnt FROM t2
--Result--
[(1.5, 15.0), (1.5, 16.0)]
+--------------------+
--Query--
SELECT (WITH RECURSIVE dt AS (SELECT t1.a AS a UNION                               SELECT a+1 FROM dt WHERE a<10)         SELECT t1.a * CONCAT(COUNT(*), '.', FLOOR(AVG(dt.a)))         FROM dt) AS subq FROM t1
--Result--
[(10.5,), (19.2,)]
+--------------------+
--Query--
SELECT derived0.cnct AS subq FROM t1      LEFT JOIN LATERAL (WITH RECURSIVE dt AS (SELECT t1.a AS a UNION                                               SELECT (dt.a + 1)                                               FROM dt WHERE dt.a < 10)                         SELECT t1.a * CONCAT(COUNT(0), '.', FLOOR(AVG(dt.a))) AS cnct                         FROM dt) derived0      ON TRUE
--Result--
[(10.5,), (19.2,)]
+--------------------+
--Query--
SELECT (    SELECT (SELECT COUNT(*) FROM t2) +           (SELECT AVG(a)            FROM t2            WHERE t2.a = t3.x) AS aggs    FROM t1 ) AS bignest FROM t3
--Result--
[]
+--------------------+
--Query--
SELECT (    SELECT (SELECT COUNT(*) FROM t2) AS aggs    FROM t1 ) AS bignest FROM t3
--Result--
[]
+--------------------+
--Query--
SELECT (SELECT COUNT(*)         FROM t1         WHERE a=11725) AS tot,        IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 WHERE false
--Result--
[(0, 6)]
+--------------------+
--Query--
SELECT (SELECT COUNT(*)         FROM t1         WHERE a=11725) +        IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 WHERE false
--Result--
[(6,)]
+--------------------+
--Query--
SELECT DISTINCT (SELECT COUNT(*)                  FROM t1) +                 IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 WHERE a > 5 GROUP BY a
--Result--
[(20,)]
+--------------------+
--Query--
SELECT (SELECT COUNT(*)         FROM t1) +        IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 GROUP BY a LIMIT 1
--Result--
[(20,)]
+--------------------+
--Query--
SELECT   (SELECT (SELECT COUNT(*)            FROM t1) +           MAX(t1.b) + MIN(t1_outer.a) AS tot    FROM t1) FROM t1 AS t1_outer
--Result--
[(26,)]
+--------------------+
--Query--
SELECT (SELECT COUNT(*)         FROM t1) +        MAX(b) +        (SELECT MIN(a) + AVG(top.a) FROM t1)        AS tot FROM t1 top
--Result--
[(38.5,)]
+--------------------+
--Query--
SELECT (SELECT COUNT(*) + `outer`.a         FROM t1) +        IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 AS `outer` GROUP BY a
--Result--
[(32,), (33,)]
+--------------------+
--Query--
SELECT (SELECT COUNT(*) + derived_1.d_1 FROM t1) +         IFNULL(derived_1.`MAX(b)`,0) + 1 + 5 AS mx  FROM (SELECT STRAIGHT_JOIN MAX(outer_t.b) AS `MAX(b)`,                            outer_t.a AS d_1       FROM t1 outer_t       GROUP BY outer_t.a) derived_1
--Result--
[(32,), (33,)]
+--------------------+
--Query--
SELECT (derived_1.`COUNT(*) + outer_t.a` +         IFNULL(derived_0.`MAX(b)`,0)) + 1 + 5 AS mx FROM (SELECT STRAIGHT_JOIN MAX(outer_t.b) AS `MAX(b)`,                            outer_t.a AS d_1       FROM t1 outer_t       GROUP BY outer_t.a) derived_0      LEFT JOIN LATERAL (SELECT (COUNT(0) + derived_0.d_1)                                AS `COUNT(*) + outer_t.a`                         FROM t1) derived_1      ON(true) WHERE true
--Result--
[(32,), (33,)]
+--------------------+
--Query--
SELECT (SELECT COUNT(*) + MAX(outer_t.b)         FROM t1) +        IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 AS outer_t GROUP BY a
--Result--
[(32,), (32,)]
+--------------------+
--Query--
SELECT (SELECT COUNT(i) FROM cc AS cc_alias         WHERE (cc.i IN (SELECT cc_alias.i FROM cc))) AS cnt FROM cc GROUP BY i
--Result--
[(1,)]
+--------------------+
--Query--
SELECT * FROM t1 AS ta WHERE ta.a IN (SELECT c FROM t2 AS tb                WHERE (SELECT MIN(e) FROM t3 as tc                       WHERE tc.e IS NOT NULL) < SOME(SELECT e FROM t3 as tc                                                      WHERE ta.b=tc.e))
--Result--
[(2, 20), (3, 20), (2, 30)]
+--------------------+
--Query--
SELECT SUM(t1.a) + (SELECT SUM(t2.c)                     FROM t2),        (SELECT COUNT(t3.e) FROM t3) FROM t1
--Result--
[(33.0, 4)]
+--------------------+
--Query--
SELECT (SELECT COUNT(*)         FROM t1         WHERE pedcompralote=11725) AS tot,        IFNULL(MAX(pedcompraseq),0)+1 AS newcode FROM t1 WHERE pedcompralote IN (SELECT cod FROM t2 WHERE ped=1779)
--Result--
[(0, 1)]
+--------------------+
--Query--
SELECT ANY_VALUE(i) AS i1,        (SELECT i FROM t) AS subquery,        SUM(i) AS summ FROM t
--Result--
[(4, 4, 4.0)]
+--------------------+
--Query--
SELECT ANY_VALUE(ANY_VALUE(i) + i) AS i1,        (SELECT i FROM t) AS subquery,        SUM(i) AS summ FROM t
--Result--
[(8, 4, 4.0)]
+--------------------+
--Query--
SELECT ANY_VALUE(i) as i2, ANY_VALUE(i) AS i1,        (SELECT i FROM t) AS subquery,        SUM(i) AS summ FROM t
--Result--
[(4, 4, 4, 4.0)]
+--------------------+
--Query--
SELECT j FROM t1 HAVING j > (SELECT MIN(t2.i) FROM t2)
--Result--
[(30,), (30,)]
+--------------------+
--Query--
SELECT i, j FROM t1 GROUP BY i, j HAVING SUM(j) > (SELECT SUM(t2.i) FROM t2)
--Result--
[(1, 30), (2, 30)]
+--------------------+
--Query--
SELECT i, j FROM t1 GROUP BY i, j WITH ROLLUP HAVING SUM(j) > (SELECT SUM(t2.i) FROM t2)
--Result--
[(1, 30), (1, None), (2, 30), (2, None), (None, None)]
+--------------------+
--Query--
SELECT     ps_partkey,     SUM(ps_supplycost * ps_availqty) AS value FROM     partsupp,     supplier,     nation WHERE     ps_suppkey = s_suppkey AND     s_nationkey = n_nationkey AND     n_name = 'germany' GROUP BY     ps_partkey HAVING         SUM(ps_supplycost * ps_availqty) > (             SELECT                 SUM(ps_supplycost * ps_availqty) * 0.1             FROM                 partsupp,                 supplier,                 nation             WHERE                 ps_suppkey = s_suppkey AND                 s_nationkey = n_nationkey AND                 n_name = 'germany'         ) ORDER BY value DESC
--Result--
[(6, 300000.0), (3, 210000.0), (4, 103600.0)]
+--------------------+
--Query--
SELECT t1.login AS tlogin,   numb -   IFNULL((SELECT sum(nump) FROM tbl2 WHERE login=t1.login), 0) -   IFNULL((SELECT sum(nump) FROM tbl2 WHERE login=t1.login), 0) as sp FROM tbl1 t1, tbl2 t2 WHERE t1.login=t2.login GROUP BY t1.login LIMIT 5
--Result--
[]
+--------------------+
--Query--
SELECT t1.login AS tlogin,   numb -   IFNULL((SELECT sum(nump) FROM tbl2 WHERE login=t1.login), 0) -   IFNULL((SELECT sum(nump) FROM tbl2 WHERE login=t1.login), 0) as sp FROM tbl1 t1, tbl2 t2 WHERE t1.login=t2.login GROUP BY t1.login ORDER BY sp LIMIT 5
--Result--
[]
+--------------------+
--Query--
SELECT t1.login AS tlogin,   numb -   IFNULL((SELECT sum(nump) FROM tbl2 WHERE login=t1.login), 0) -   IFNULL((SELECT sum(nump) FROM tbl2 WHERE login=t1.login), 0) as sp FROM tbl1 t1, tbl2 t2 WHERE t1.login=t2.login GROUP BY t1.login ORDER BY numb - IFNULL((SELECT sum(nump) FROM tbl2 WHERE login=t1.login), 0)               - IFNULL((SELECT sum(nump) FROM tbl2 WHERE login=t1.login), 0) LIMIT 5
--Result--
[]
+--------------------+
--Query--
SELECT b, MAX(a) AS ma FROM t4 GROUP BY b HAVING ma < (SELECT MAX(t2.a) FROM t2 WHERE t2.b=t4.b)
--Result--
[(10, 1)]
+--------------------+
--Query--
SELECT * from tmp_digest_95th_percentile_by_avg_us
--Result--
[]
+--------------------+
--Query--
SELECT * FROM where_subselect_20070 WHERE (field1, ( SELECT COUNT( col_int_key ) FROM t1 )) IN (   SELECT table2 .col_int_key AS field1,         ( SELECT COUNT( col_int_key )           FROM t1         )   FROM t1 AS table1        JOIN t1 AS table2        ON table2.col_int_key = table1.col_int_key )
--Result--
[(0, 4), (1, 4), (8, 4), (8, 4), (8, 4), (8, 4)]
+--------------------+
--Query--
PREPARE s FROM   'SELECT a FROM t1 WHERE a=(SELECT MAX(a) FROM t1) AND (a="20060606155555")'
--Result--
[]
+--------------------+
--Query--
PREPARE s FROM   'SELECT a FROM t1 WHERE a=(SELECT MAX(a) FROM t1) AND (a="20060606155555")'
--Result--
[]
+--------------------+
--Query--
SELECT (SELECT MIN(a) FROM t1) a, MAX(a) AS mx FROM t1 WHERE FALSE HAVING (SELECT MIN(a) FROM t1) > 0
--Result--
[(1, None)]
+--------------------+
--Query--
SELECT MAX(a) AS mx FROM t1 WHERE FALSE HAVING (SELECT MIN(a) FROM t1) > 0
--Result--
[(None,)]
+--------------------+
--Query--
SELECT * FROM tab1 AS table1      LEFT JOIN      ( tab1 AS table2 JOIN        tab1 AS table3        ON 1 <= (SELECT COUNT(pk) FROM tab1) )      ON 1 WHERE (SELECT MIN(pk) FROM tab1)
--Result--
[]
+--------------------+
--Query--
SELECT alias1.col_varchar_key FROM c2 AS alias1 HAVING   alias1.col_varchar_key > SOME (SELECT col_varchar_key FROM c2) ORDER BY alias1.col_varchar_key
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ((t1 AS a2        LEFT JOIN        t1 AS a1        ON  1 <= SOME (SELECT COUNT(*) FROM t1))      LEFT JOIN      t1      ON true)
--Result--
[]
+--------------------+
--Query--
SELECT * FROM ((t1 AS a2        LEFT JOIN        t1 AS a1        ON  1 <= ALL (SELECT COUNT(*) FROM t1))      LEFT JOIN      t1      ON true)
--Result--
[]
+--------------------+
--Query--
SELECT * FROM (t1       RIGHT JOIN       (t1 AS a1        RIGHT JOIN        t1 AS a2        ON  1 <= SOME (SELECT COUNT(*) FROM t1))       ON true)
--Result--
[]
+--------------------+
--Query--
SELECT t1.pk  FROM t1 LEFT JOIN ( SELECT t1.pk AS pk                      FROM t1                      WHERE (1 <= (SELECT MAX(t1.pk)                                   FROM t1)) ) alias2       ON true
--Result--
[]
+--------------------+
--Query--
SELECT alias1.pk FROM t1 AS alias1 LEFT JOIN        t1 AS alias2 LEFT JOIN          (SELECT *           FROM t1           WHERE 1 <= ANY (SELECT c_sq1_alias1.pk                           FROM t1 AS c_sq1_alias1 JOIN t1 AS c_sq1_alias2                                ON TRUE                          )          ) AS alias3        ON TRUE      ON TRUE
--Result--
[]
+--------------------+
--Query--
PREPARE prep_stmt FROM 'SELECT col_varchar_key  FROM (SELECT * FROM X        WHERE X.col_varchar_key > (SELECT MIN(col_varchar_key)                                   FROM X)) AS table1'
--Result--
[]
+--------------------+
--Query--
SELECT alias2.col_int FROM (SELECT * FROM n) AS alias1      JOIN        (SELECT * FROM n) AS alias2        JOIN n        ON alias2.col_int < (SELECT MAX(col_int) FROM n)      ON TRUE
--Result--
[(1,), (2,), (1,), (2,), (1,), (2,), (1,), (2,), (1,), (2,), (1,), (2,), (1,), (2,), (1,), (2,), (1,), (2,)]
+--------------------+
--Query--
SELECT table1.col_int_key AS field1 FROM ((SELECT * FROM x        WHERE col_int_key <= (SELECT SUM(col_int_key)                              FROM x                              WHERE col_int_key < @var1)) AS table1       JOIN       x AS table2)
--Result--
[]
+--------------------+
--Query--
SELECT table1.col_int_key AS field1 FROM ((SELECT * FROM x        WHERE col_int_key <= (SELECT SUM(col_int_key)                              FROM x                              WHERE col_int_key < 1)) AS table1       JOIN       x AS table2)
--Result--
[]
+--------------------+
--Query--
SELECT (SELECT COUNT(*)          FROM t1          WHERE 1 <> table1.col_varchar)  FROM ((SELECT a2.*         FROM (t1 AS a1               JOIN               t1 AS a2               ON (1 <> ( SELECT COUNT(*)                          FROM t1)))) AS table1         JOIN         t1         ON 1)
--Result--
[]
+--------------------+
--Query--
SELECT * FROM b WHERE EXISTS (SELECT *               FROM (b                     JOIN                     (a AS sq1_alias2                      JOIN                      c                      ON (sq1_alias2.i >= (SELECT MAX(i)                                                 FROM b)))                     ON (6 IN (SELECT i                               FROM b))))
--Result--
[]
+--------------------+
--Query--
PREPARE prep_stmt FROM  'SELECT (SELECT t2.pk FROM (m AS t1                             JOIN                             (m AS t2                              JOIN m AS t3))),         (SELECT SUM(pk) FROM m),         MIN(table1.pk)  FROM (m AS table1 JOIN        ((view_m AS table2          JOIN          m AS table3))        ON (table3.pk = table2.pk))'
--Result--
[]
+--------------------+
--Query--
SELECT COUNT(table1.pk),        (SELECT MIN(col_varchar_key) FROM cc1 ) FROM (cc1 AS table1       JOIN (cc1 JOIN              cc1 AS table3              ON true)       ON true) WHERE (1 <> (SELECT COUNT(*) FROM cc1))
--Result--
[(0, None)]
+--------------------+
--Query--
SELECT * from t1
--Result--
[]
+--------------------+
--Query--
SELECT   AVG(cc.col_varchar_key),   (     SELECT SUM(cc.col_int_key)     FROM cc,a   ) FROM cc STRAIGHT_JOIN bb ON bb.col_varchar = cc.col_varchar_key WHERE cc.col_varchar <> 'w'
--Result--
[(None, None)]
+--------------------+
--Query--
PREPARE p FROM 'SELECT (SELECT MAX(i) FROM n) AS field2,         COUNT(table1.i) AS field3 ,         (SELECT AVG(i) FROM n) AS field4  FROM (n AS table1        JOIN        ( view_n AS table2          JOIN          n AS table3          ON true )        ON (table2.i = table2.i))'
--Result--
[]
+--------------------+
--Query--
SELECT AVG(table2.col_int) AS field1 ,        ( SELECT COUNT(subquery1_t1.col_varchar_key ) AS subquery1_field1          FROM ( cc AS subquery1_t1                 LEFT OUTER JOIN                 ( cc AS subquery1_t2                   INNER JOIN view_cc AS subquery1_t3                   ON ( subquery1_t3.col_varchar = subquery1_t2.col_varchar_key ) )                 ON ( subquery1_t3.col_int_key = subquery1_t2.col_int  ) )          WHERE subquery1_t1.col_varchar_key != subquery1_t2.col_varchar ) AS field2 FROM ( cc AS table1        STRAIGHT_JOIN        cc AS table2        ON ( table1.col_varchar_key = table1.col_varchar_key ) ) WHERE ( table1.pk = 1 ) AND       ( table1.col_varchar_key = 'D' OR         table1.col_varchar_key = table1.col_varchar_key) OR       table1.col_varchar_key < 'O' ORDER BY table1.col_varchar ASC, field2, field1 LIMIT 1000 OFFSET 2
--Result--
[]
+--------------------+
--Query--
SELECT MIN(table1.col_int)           AS field1,        ( SELECT COUNT(col_int )          FROM m AS t1 )              AS field2,        AVG(table1.col_int)           AS field4,        ( SELECT MAX(t1.col_int)          FROM ( m AS t1 JOIN                      ( m AS t2                        JOIN                        m AS t3 ) ) ) AS field5 FROM ( m AS table1        JOIN ( ( m AS table2                 JOIN                 ( SELECT COUNT(col_int) FROM m ) AS table3 ) ) )
--Result--
[(None, 0, None, None)]
+--------------------+
--Query--
SELECT MIN( table2.col_int ) AS field1 ,        SUM( table2.col_int ) AS field2 ,        ( SELECT MAX( subquery1_t1.pk ) AS subquery1_field1          FROM ( cc AS subquery1_t1                 INNER JOIN                 cc AS subquery1_t2                 ON ( subquery1_t2.col_varchar_key =                      subquery1_t1.col_varchar_key ) ) ) AS field3 FROM ( c AS table1        RIGHT JOIN        ( ( cc AS table2            STRAIGHT_JOIN            c AS table3            ON ( table2.pk = table2.col_int ) ) )        ON ( table2.col_varchar_key = table2.col_varchar AND             table1.col_int_key > ( SELECT 9 FROM cc ) ) ) WHERE ( EXISTS ( SELECT subquery3_t1.col_int AS subquery3_field1                   FROM c AS subquery3_t1                   WHERE subquery3_t1.col_int_key = table1.pk ) ) AND       table1.col_varchar_key <> table2.col_varchar
--Result--
[(None, None, 1)]
+--------------------+
--Query--
SELECT * FROM view_c
--Result--
[]
+--------------------+
--Query--
SELECT t2.i FROM t2 WHERE ( false ) AND       ( t2.i  IN ( SELECT t1.i FROM t1                   WHERE t1.i <= SOME ( SELECT 8 UNION  SELECT 3 ) ) )
--Result--
[]
+--------------------+
--Query--
SELECT a FROM t1 WHERE (SELECT 1 FROM DUAL WHERE 1=0) IS NULL
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT table1.col_varchar_key FROM ( SELECT sub1_t2.*        FROM (a             JOIN             (a AS sub1_t2)             ON sub1_t2.col_varchar_key IN (SELECT col_varchar_key FROM a))        WHERE EXISTS (SELECT sub2_t1.col_varchar_key                      FROM a AS sub2_t1))  AS table1      JOIN      (a AS table2        JOIN        a        ON 1 >= (SELECT MIN( col_varchar_key) FROM a))      ON true
--Result--
[]
+--------------------+
--Query--
SELECT   (SELECT COUNT(*) FROM t1) AS f1,   (SELECT COUNT(*) FROM t1) AS f2 FROM t1 GROUP BY f1, f2 WITH ROLLUP
--Result--
[]
+--------------------+
--Query--
SELECT (SELECT MIN(f1) AS min FROM t1 ) AS field1 FROM t1 GROUP BY field1 WITH ROLLUP
--Result--
[(0,), (None,)]
+--------------------+
--Query--
SELECT (SELECT SUM(f1) AS SQ1_field1 FROM t1) as field1  FROM t1 GROUP BY f1 WITH ROLLUP ORDER BY f1
--Result--
[]
+--------------------+
--Query--
SELECT SUM(f1), ROW_NUMBER() OVER (), (SELECT MIN(f1) FROM t1) FROM t1 ORDER BY f1
--Result--
[(None, 1, None)]
+--------------------+
