create table t1 (i int);
select @a;
insert into t1 values (1);
select @a;
insert into t1 values (123);
select @a;
drop table t1;
create table t1 (i int not null, j int);
select @a;
drop table t1;
create table t1 (aid int not null primary key, balance int not null default 0);
insert into t1 values (1, 1000), (2,3000);
select @total_change;
drop table t1;
create table t1 (i int);
insert into t1 values (1),(2),(3),(4);
delete from t1 where i <= 3;
select @del_sum;
drop table t1;
create table t1 (i int);
insert into t1 values (1),(2),(3),(4);
delete from t1 where i <> 0;
select @del;
drop table t1;
create table t1 (i int, j int);
insert into t1 values (1,2),(2,3),(3,14);
select @fired;
select * from t1;
update t1 set j= 20;
select @fired;
select * from t1;
drop table t1;
create table t1 (id int not null primary key, data int);
insert into t1 values (1, 1);
select @log;
insert ignore t1 values (1, 2);
select @log;
insert into t1 (id, data) values (1, 3), (2, 2) on duplicate key update data= data + 1;
select @log;
select @log;
select @log;
drop table t1;
create table t1 (id int primary key, data varchar(10), fk int);
create table t2 (event varchar(100));
create table t3 (id int primary key);
insert into t1 (id, data) values (1, "one"), (2, "two");
select * from t1;
select * from t2;
insert into t3 values (1);
insert into t1 values (4, "four", 1), (5, "five", 2);
select * from t1;
select * from t2;
drop table t1, t2, t3;
create table t1 (id int primary key, data varchar(10));
create table t2 (seq int);
insert into t2 values (10);
insert into t1 values (1, "first");
select * from t1;
drop table t1, t2;
create table t1 (id int primary key, fk_t2 int);
create table t2 (id int primary key, fk_t3 int);
create table t3 (id int primary key);
insert into t1 values (1,1), (2,1), (3,2);
insert into t2 values (1,1), (2,2);
insert into t3 values (1), (2);
delete from t3 where id = 1;
select * from t1 left join (t2 left join t3 on t2.fk_t3 = t3.id) on t1.fk_t2 = t2.id;
drop table t1, t2, t3;
create table t1 (id int primary key, copy int);
create table t2 (id int primary key, data int);
insert into t2 values (1,1), (2,2);
insert into t1 values (1,3), (2,4), (3,3);
update t1 set copy= 1 where id = 2;
select * from t1;
drop table t1, t2;
create table t1 (i int);
create table t3 (i int);
create view v1 as select * from t1;
drop view v1;
drop table t1;
drop table t3;
create temporary table t1 (i int);
drop table t1;
create table t1 (x1col char);
insert into t1 values ('y');
drop table t1;
create table t1 (i int);
insert into t1 values (1), (2);
delete from t1;
select @del_before, @del_after;
drop table t1;
create table t1 (a int);
drop table t1;
create table t1 (a int);
insert into t1 values ();
select * from t1;
drop table t1;
create database mysqltest;
create table t1 (i int);
drop database mysqltest;
create database mysqltest;
create table mysqltest.t1 (i int);
drop database mysqltest;
create table t2 (i int);
insert into t2 values (1);
select @a, @b;
insert into t2 values (2);
select @a, @b;
delete t1, t2 from t1, t2 where t1.i = t2.i;
select @c, @d, @e, @f;
drop table t1, t2;
create table t1 (i int, j int, k int);
select *, @b from t1;
select *, @b from t1;
drop table t1;
create table t1 (i int, bt int, k int, key(k));
create table t2 (i int);
insert into t1 values (1, 1, 1), (2, 2, 2);
insert into t2 values (1), (2), (3);
alter table t1 drop column bt;
insert into t1 values (3, 3);
select * from t1;
update t1 set i = 2;
select * from t1;
delete from t1;
select * from t1;
select * from t1;
insert into t1 select 3, 3;
select * from t1;
update t1, t2 set k = k + 10 where t1.i = t2.i;
select * from t1;
update t1, t2 set k = k + 10 where t1.i = t2.i and k < 2;
select * from t1;
delete t1, t2 from t1 straight_join t2 where t1.i = t2.i;
select * from t1;
delete t2, t1 from t2 straight_join t1 where t1.i = t2.i;
select * from t1;
alter table t1 add primary key (i);
insert into t1 values (2, 4) on duplicate key update k= k + 10;
select * from t1;
select * from t1;
drop table t1, t2;
create table t1 (col1 int, col2 int);
insert into t1 values (1, 2);
update t1 set col2 = 4;
drop table t1;
select @a;
create table t1 (a date);
insert into t1 values ('2004-01-01');
select * from t1;
drop table t1;
create table t1 (id int);
create procedure p1() flush tables;
insert into t1 values (0);
drop procedure p1;
create procedure p1() reset binary logs and gtids;
insert into t1 values (0);
drop procedure p1;
create procedure p1() reset slave;
insert into t1 values (0);
drop procedure p1;
create procedure p1() flush privileges;
insert into t1 values (0);
drop procedure p1;
create procedure p1() flush tables with read lock;
insert into t1 values (0);
drop procedure p1;
create procedure p1() flush tables;
insert into t1 values (0);
drop procedure p1;
create procedure p1() flush logs;
insert into t1 values (0);
drop procedure p1;
create procedure p1() flush status;
insert into t1 values (0);
drop procedure p1;
create procedure p1() flush user_resources;
insert into t1 values (0);
drop procedure p1;
drop table t1;
create table t1 (id int, data int, username varchar(16));
insert into t1 (id, data) values (1, 0);
update t1 set data = 1;
update t1 set data = 2;
drop table t1;
create table t1 (c1 int, c2 datetime);
select 'hello';
insert into t1 (c1) values (1),(2),(3);
select * from t1;
select "hello again";
insert into t1 (c1) values (4),(5),(6);
select * from t1;
drop table t1;
create table t1 (f1 integer);
create table t2 (f2 integer);
insert into t1 values (1);
select * from t1;
select * from t2;
insert into t1 values (1);
update t1 set f1= 10;
select * from t1;
update t1 set f1= 10;
select * from t1;
insert into t1 values (3);
select * from t1;
drop tables t1, t2;
create table t1 (id int);
create table t2 (id int);
create table t3 (id int);
lock tables t2 write;
unlock tables;
select * from t1;
insert into t2 values (3);
lock tables t2 write;
unlock tables;
select * from t1;
select * from t3;
lock tables t2 write;
unlock tables;
select * from t1;
select * from t3;
lock tables t2 write;
unlock tables;
select * from t1;
select * from t3;
create view v1 as select t1.id as id1 from t1, t2 where t1.id= t2.id;
insert into t2 values (10);
lock tables t2 write;
unlock tables;
select * from t1;
select * from t3;
drop view v1;
drop table t1, t2, t3;
create table t1 (id int);
create table t2 (id int);
prepare stmt1 from "insert into t1 values (10)";
create procedure p1() insert into t1 values (10);
deallocate prepare stmt1;
drop procedure p1;
create table t3 (id int);
prepare stmt1 from "insert into t1 values (10)";
create procedure p1() insert into t1 values (10);
deallocate prepare stmt1;
drop procedure p1;
drop table t1, t2, t3;
create table t1 (a int);
drop table t1;
create table t1 (id int);
insert into t1 values (101);
select @a, @b;
select trigger_schema, trigger_name, event_object_schema,
       event_object_table, action_statement from information_schema.triggers
       where event_object_schema = 'test';
select @a, @b;
select trigger_schema, trigger_name, event_object_schema,
       event_object_table, action_statement from information_schema.triggers
       where event_object_schema = 'test';
select @a, @b;
select trigger_schema, trigger_name, event_object_schema,
       event_object_table, action_statement from information_schema.triggers
       where event_object_schema = 'test';
select @a, @b;
select trigger_schema, trigger_name, event_object_schema,
       event_object_table, action_statement from information_schema.triggers
       where event_object_schema = 'test';
create database mysqltest;
insert into t1 values (101);
select @a;
select trigger_schema, trigger_name, event_object_schema,
       event_object_table, action_statement from information_schema.triggers
       where event_object_schema = 'test' or event_object_schema = 'mysqltest';
insert into t1 values (102);
select @a;
select trigger_schema, trigger_name, event_object_schema,
       event_object_table, action_statement from information_schema.triggers
       where event_object_schema = 'test' or event_object_schema = 'mysqltest';
insert into t1 values (103);
select @a;
select trigger_schema, trigger_name, event_object_schema,
       event_object_table, action_statement from information_schema.triggers
       where event_object_schema = 'test' or event_object_schema = 'mysqltest';
insert into t1 values (104);
select @a;
select trigger_schema, trigger_name, event_object_schema,
       event_object_table, action_statement from information_schema.triggers
       where event_object_schema = 'test' or event_object_schema = 'mysqltest';
drop table t1;
drop database mysqltest;
create table t1 (i int);
insert into t1 values (1);
drop table t1;
create table t1 (a varchar(64), b int);
create table t2 like t1;
insert into t1 (a) values
  ("Twas"),("brillig"),("and"),("the"),("slithy"),("toves"),
  ("Did"),("gyre"),("and"),("gimble"),("in"),("the"),("wabe");
insert into t2 select * from t1;
drop table t1, t2;
create table t1(i int not null, j int not null, n numeric(15,2), primary key(i,j));
create table t2(i int not null, n numeric(15,2), primary key(i));
insert into t1 values
  (1,1,10.00),(1,2,10.00),(1,3,10.00),(1,4,10.00),(1,5,10.00),
  (1,6,10.00),(1,7,10.00),(1,8,10.00),(1,9,10.00),(1,10,10.00),
  (1,11,10.00),(1,12,10.00),(1,13,10.00),(1,14,10.00),(1,15,10.00);
select * from t1;
select * from t2;
drop tables t1, t2;
CREATE TABLE t1 (
    conn_id INT,
    trigger_conn_id INT
);
INSERT INTO t1 (conn_id, trigger_conn_id) VALUES (CONNECTION_ID(), -1);
INSERT INTO t1 (conn_id, trigger_conn_id) VALUES (CONNECTION_ID(), -1);
SELECT * FROM t1 WHERE conn_id != trigger_conn_id;
DROP TABLE t1;
CREATE TABLE t1 (i1 INT);
INSERT INTO t1 VALUES (@x);
SELECT @x;
UPDATE t1 SET i1 = @x;
SELECT @x;
INSERT INTO t1 VALUES (@x);
SELECT @x;
UPDATE t1 SET i1 = @x;
SELECT @x;
DROP TABLE t1;
DROP TABLE IF EXISTS t1;
DROP PROCEDURE IF EXISTS p1;
DROP PROCEDURE IF EXISTS p2;
CREATE TABLE t1 (i1 INT);
INSERT INTO t1 VALUES (3);
CREATE PROCEDURE p1(OUT i1 INT) DETERMINISTIC NO SQL SET i1 = 5;
CREATE PROCEDURE p2(INOUT i1 INT) DETERMINISTIC NO SQL SET i1 = i1 * 7;
UPDATE t1 SET i1 = 11 WHERE i1 = 3;
DROP PROCEDURE p2;
DROP PROCEDURE p1;
INSERT INTO t1 VALUES (13);
CREATE PROCEDURE p1(OUT i1 INT) DETERMINISTIC NO SQL SET @a = 17;
UPDATE t1 SET i1 = 19 WHERE i1 = 13;
DROP PROCEDURE p1;
INSERT INTO t1 VALUES (23);
CREATE PROCEDURE p1(INOUT i1 INT) DETERMINISTIC NO SQL SET @a = i1 * 29;
UPDATE t1 SET i1 = 31 WHERE i1 = 23;
DROP PROCEDURE p1;
INSERT INTO t1 VALUES (37);
CREATE PROCEDURE p1(OUT i1 INT) DETERMINISTIC NO SQL SET @a = 41;
UPDATE t1 SET i1 = 43 WHERE i1 = 37;
DROP PROCEDURE p1;
INSERT INTO t1 VALUES (47);
CREATE PROCEDURE p1(INOUT i1 INT) DETERMINISTIC NO SQL SET @a = i1 * 49;
UPDATE t1 SET i1 = 51 WHERE i1 = 47;
DROP PROCEDURE p1;
SELECT * FROM t1;
DROP TABLE t1;
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(c INT);
CREATE TABLE t2(c INT);
DROP TABLE t1;
DROP TABLE t2;
drop table if exists t1;
drop table if exists t2;
drop table if exists t3;
drop table if exists t4;
create table t1 (i int, j int key);
insert into t1 values (1,1), (2,2), (3,3);
update t1 set i= i+ 10 where j > 2;
select * from t1;
drop table t1;
CREATE TABLE t1 (a INT PRIMARY KEY);
CREATE TABLE t2 (a INT PRIMARY KEY);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5),(6),(7),(8);
SELECT COUNT(*) FROM t2;
DELETE FROM t2;
DELETE FROM t1;
DROP TABLE t1,t2;
drop table if exists t1;
drop function if exists f1;
create table t1 (i int);
insert into t1 values ();
select @a;
insert into t1 values ();
select @a;
drop table t1;
create table t1(a int, b varchar(50));
drop trigger if exists not_a_trigger;
insert into t1 values (1, "a");
drop trigger if exists t1_bi;
insert into t1 values (2, "b");
drop trigger if exists t1_bi;
insert into t1 values (3, "c");
select * from t1;
drop table t1;
CREATE TABLE t1 (
  id int NOT NULL DEFAULT '0',
  a  varchar(10) NOT NULL,
  b  varchar(10),
  c  varchar(10),
  d  timestamp NOT NULL,
  PRIMARY KEY (id, a)
);
INSERT INTO t1 (id,a, b,c,d) VALUES
 (1,'a','b','c',now()),(2,'a','b','c',now());
UPDATE t1 SET c='Bang!' WHERE id=1;
DROP TABLE IF EXISTS bug21825_A;
DROP TABLE IF EXISTS bug21825_B;
CREATE TABLE bug21825_A (id int(10));
CREATE TABLE bug21825_B (id int(10));
INSERT INTO bug21825_A (id) VALUES (10);
INSERT INTO bug21825_A (id) VALUES (20);
DROP TABLE bug21825_B;
DELETE FROM bug21825_A WHERE id = 20;
DROP TABLE bug21825_A;
DROP TABLE IF EXISTS bug22580_t1;
DROP PROCEDURE IF EXISTS bug22580_proc_1;
DROP PROCEDURE IF EXISTS bug22580_proc_2;
CREATE TABLE bug22580_t1 (a INT, b INT);
CREATE TEMPORARY TABLE bug22580_tmp (a INT);
DROP TABLE bug22580_tmp;
INSERT INTO bug22580_t1 VALUES (1,1);
DROP TABLE bug22580_t1;
DROP TRIGGER IF EXISTS trg27006_a_update;
DROP TRIGGER IF EXISTS trg27006_a_insert;
CREATE TABLE t2 like t1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t1;
SELECT * FROM t2;
drop table t1,t2;
create table t1 (i int);
create table t2 (j int);
insert into t2 values (1), (2);
insert into t1 select * from t2;
select * from t1;
select @a;
create table t3 (isave int);
insert into t1 select * from t2;
select * from t1;
select * from t3;
drop table t1, t2, t3;
drop table if exists t1, t2;
drop trigger if exists trg_bug28502_au;
create table t1 (id int, count int);
create table t2 (id int);
insert into t1 (id, count) values (1, 0);
lock table t1 write;
unlock tables;
update t2 set id=1 where id=1;
select * from t1;
select * from t2;
drop table t1, t2;
drop table if exists t1, t2, t1_op_log;
drop view if exists v1;
drop trigger if exists trg_bug28502_bi;
drop trigger if exists trg_bug28502_ai;
drop trigger if exists trg_bug28502_bu;
drop trigger if exists trg_bug28502_au;
drop trigger if exists trg_bug28502_bd;
drop trigger if exists trg_bug28502_ad;
create table t1 (id int primary key auto_increment, operation varchar(255));
create table t2 (id int primary key);
create table t1_op_log(operation varchar(255));
create view v1 as select * from t1;
insert into t1 (operation) values ("INSERT");
select * from t1;
select * from t1_op_log;
update t1 set operation="UPDATE" where id=@id;
select * from t1;
select * from t1_op_log;
delete from t1 where id=@id;
select * from t1;
select * from t1_op_log;
insert into t1 (id, operation) values
(NULL, "INSERT ON DUPLICATE KEY UPDATE, inserting a new key")
on duplicate key update id=NULL, operation="Should never happen";
select * from t1;
select * from t1_op_log;
insert into t1 (id, operation) values
(@id, "INSERT ON DUPLICATE KEY UPDATE, the key value is the same")
on duplicate key update id=NULL,
operation="INSERT ON DUPLICATE KEY UPDATE, updating the duplicate";
select * from t1;
select * from t1_op_log;
select * from t1;
select * from t1_op_log;
select * from t1;
select * from t1_op_log;
insert into t1
select NULL, "CREATE TABLE ... SELECT, inserting a new key";
select * from t1;
select * from t1_op_log;
select @id, "CREATE TABLE ... REPLACE SELECT, deleting a duplicate key";
select * from t1;
select * from t1_op_log;
insert into t1 (id, operation)
select NULL, "INSERT ... SELECT, inserting a new key";
select * from t1;
select * from t1_op_log;
insert into t1 (id, operation)
select @id,
"INSERT ... SELECT ... ON DUPLICATE KEY UPDATE, updating a duplicate"
on duplicate key update id=NULL,
operation="INSERT ... SELECT ... ON DUPLICATE KEY UPDATE, updating a duplicate";
select * from t1;
select * from t1_op_log;
select NULL, "REPLACE ... SELECT, inserting a new key";
select * from t1;
select * from t1_op_log;
select @id, "REPLACE ... SELECT, deleting a duplicate";
select * from t1;
select * from t1_op_log;
insert into t2 (id) values (1);
delete t1.*, t2.* from t1, t2 where t1.id=1;
select * from t1;
select * from t2;
select * from t1_op_log;
insert into t1 (id, operation) values (1, "INSERT for multi-UPDATE");
insert into t2 (id) values (1);
update t1, t2
set t2.id=3, operation="multi-UPDATE, SET for t2, but the trigger is fired" where t1.id=2;
select * from t1;
select * from t2;
select * from t1_op_log;
insert into v1 (operation) values ("INSERT");
select * from t1;
select * from t1_op_log;
update v1 set operation="UPDATE" where id=@id;
select * from t1;
select * from t1_op_log;
delete from v1 where id=@id;
select * from t1;
select * from t1_op_log;
insert into v1 (id, operation) values
(NULL, "INSERT ON DUPLICATE KEY UPDATE, inserting a new key")
on duplicate key update id=NULL, operation="Should never happen";
select * from t1;
select * from t1_op_log;
insert into v1 (id, operation) values
(@id, "INSERT ON DUPLICATE KEY UPDATE, the key value is the same")
on duplicate key update id=NULL,
operation="INSERT ON DUPLICATE KEY UPDATE, updating the duplicate";
select * from t1;
select * from t1_op_log;
select * from t1;
select * from t1_op_log;
select * from t1;
select * from t1_op_log;
insert into v1
select NULL, "CREATE TABLE ... SELECT, inserting a new key";
select * from t1;
select * from t1_op_log;
select @id, "CREATE TABLE ... REPLACE SELECT, deleting a duplicate key";
select * from t1;
select * from t1_op_log;
insert into v1 (id, operation)
select NULL, "INSERT ... SELECT, inserting a new key";
select * from t1;
select * from t1_op_log;
insert into v1 (id, operation)
select @id,
"INSERT ... SELECT ... ON DUPLICATE KEY UPDATE, updating a duplicate"
on duplicate key update id=NULL,
operation="INSERT ... SELECT ... ON DUPLICATE KEY UPDATE, updating a duplicate";
select * from t1;
select * from t1_op_log;
select NULL, "REPLACE ... SELECT, inserting a new key";
select * from t1;
select * from t1_op_log;
select @id, "REPLACE ... SELECT, deleting a duplicate";
select * from t1;
select * from t1_op_log;
insert into t2 (id) values (1);
delete v1.*, t2.* from v1, t2 where v1.id=1;
select * from t1;
select * from t2;
select * from t1_op_log;
insert into v1 (id, operation) values (1, "INSERT for multi-UPDATE");
insert into t2 (id) values (1);
update v1, t2
set t2.id=3, operation="multi-UPDATE, SET for t2, but the trigger is fired" where v1.id=2;
select * from t1;
select * from t2;
select * from t1_op_log;
drop view v1;
drop table t1, t2, t1_op_log;
drop table if exists t1;
drop temporary table if exists t2;
create table t1 (s1 int);
create temporary table t2 (s1 int);
insert into t1 values (0);
insert into t1 values (0);
select * from t1;
select * from t2;
delete from t1;
select * from t1;
select * from t2;
drop table t1;
drop temporary table t2;
DROP TABLE IF EXISTS t1;
DROP TRIGGER IF EXISTS t_insert;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1 (a int, date_insert timestamp, PRIMARY KEY (a));
INSERT INTO t1 (a) VALUES (2),(5);
CREATE TABLE t2 (a int, b int, PRIMARY KEY (a));
INSERT INTO t2 (a,b) VALUES (1,2);
INSERT INTO t2 (a,b) VALUES (3,5);
DROP TABLE t1;
DROP TABLE t2;
drop table if exists table_25411_a;
drop table if exists table_25411_b;
create table table_25411_a(a int);
create table table_25411_b(b int);
select * from table_25411_a;
insert into table_25411_a values (1);
select * from table_25411_a;
drop table table_25411_a;
drop table table_25411_b;
create table t1 (i int, j int);
lock tables t1 read;
unlock tables;
lock tables t1 read;
unlock tables;
lock tables t1 write;
insert into t1 values (10, 10);
insert into t1 values (10, 10);
select * from t1;
unlock tables;
drop table t1;
drop table if exists t1, t2;
drop trigger if exists trg1;
drop trigger if exists trg2;
create table t1 (a int);
create table t2 (b int);
insert into t1 values (1), (2), (3);
insert into t2 values (1), (2), (3);
update t1, t2 set t1.a= t1.a, t2.b= t2.b;
select @a, @b;
update t1, t2 set t1.a= t2.b, t2.b= t1.a;
select @a, @b;
update t1 set a= a;
select @a, @b;
update t2 set b= b;
select @a, @b;
update t1 set a= 1;
select @a, @b;
update t2 set b= 1;
select @a, @b;
drop table t1, t2;
CREATE TABLE t1 ( a INT, b INT );
CREATE TABLE t2 ( a INT AUTO_INCREMENT KEY, b INT );
INSERT INTO t1 (a) VALUES (1);
CREATE TABLE IF NOT EXISTS t2 ( a INT, b INT ) SELECT a, b FROM t1;
SELECT * FROM t2;
DROP TABLE t1, t2;
DROP TRIGGER IF EXISTS trg1;
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1 (b VARCHAR(50) NOT NULL);
CREATE TABLE t2 (a VARCHAR(10) NOT NULL DEFAULT '');
INSERT IGNORE INTO t2 VALUES();
INSERT IGNORE INTO t1 SET b = '777';
INSERT IGNORE INTO t2 SET a = '111';
INSERT IGNORE INTO t2 SET a = '777';
DROP TABLE t1, t2;
DROP DATABASE IF EXISTS db1;
DROP TRIGGER IF EXISTS trg1;
DROP TABLE IF EXISTS t1, t2;
CREATE DATABASE db1;
CREATE TABLE t1 (b INT);
CREATE TABLE t2 (a INT);
INSERT INTO t2 VALUES (1);
SELECT * FROM t1;
DROP DATABASE db1;
DROP TRIGGER IF EXISTS t1_bi;
DROP TRIGGER IF EXISTS t1_bd;
DROP TABLE IF EXISTS t1;
DROP TEMPORARY TABLE IF EXISTS t2;
CREATE TABLE t1 (s1 INT);
CREATE TEMPORARY TABLE t2 (s1 INT);
INSERT INTO t1 VALUES (0);
INSERT INTO t1 VALUES (0);
SELECT * FROM t1;
SELECT * FROM t2;
DELETE FROM t1;
DROP TABLE t1;
DROP TEMPORARY TABLE t2;
DROP TRIGGER IF EXISTS trg1;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1);
DROP TABLE t1;
DROP TRIGGER IF EXISTS trg1;
DROP TRIGGER IF EXISTS trg2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (0);
SELECT * FROM t1;
INSERT INTO t1 VALUES (1),(2);
DROP TABLE t1;
drop trigger if exists t1_bi;
drop temporary table if exists t1;
drop table if exists t1;
create table t1 (i int);
create temporary table t1 (j int);
select trigger_name from information_schema.triggers
  where event_object_schema = 'test' and event_object_table = 't1';
drop temporary table t1;
drop table t1;
CREATE TABLE t1(c TEXT);
INSERT INTO t1 VALUES('qazwsxedc');
SELECT c FROM t1;
DROP TABLE t1;
DROP TABLE IF EXISTS t1, t2, t3;
DROP TRIGGER IF EXISTS t2_ai;
CREATE TABLE t2 
       (
         value CHAR(30),
         domain_id INT,
         mailaccount_id INT, 
         program CHAR(30),
         keey CHAR(30),
         PRIMARY KEY(domain_id)
       );
CREATE TABLE t3 
       (
         value CHAR(30),
         domain_id INT,
         mailaccount_id INT,
         program CHAR(30),
         keey CHAR(30),
         PRIMARY KEY(domain_id)
       );
CREATE TABLE t1 (id INT,domain CHAR(30),PRIMARY KEY(id));
INSERT INTO t2 VALUES ('Yes', 1, NULL, 'spamfilter','scan_incoming');
DROP TABLE t1, t2, t3;
CREATE TABLE t1 (a INT, b INT DEFAULT 150);
INSERT INTO t1 VALUES (1, 2);
DROP TABLE t1;
CREATE TABLE t1(a INT);
CREATE DATABASE db1;
DROP DATABASE db1;
DROP TABLE t1;
CREATE TABLE t1(id INT);
CREATE TABLE t2(id INT);
INSERT INTO t2 VALUES(0);
INSERT INTO t1 VALUES(0);
INSERT INTO t2 VALUES(0);
INSERT INTO t1 VALUES(0);
DROP TABLE t2;
INSERT INTO t1 VALUES(0);
DROP TABLE t1;
CREATE TABLE t1 (a INT PRIMARY KEY);
CREATE TABLE t2 (after_update CHAR(50));
CREATE TABLE t3(b INT PRIMARY KEY);
INSERT INTO t1 VALUES (1), (2);
INSERT INTO t3 VALUES (1);
UPDATE IGNORE t1 SET a=2 WHERE a=1;
SELECT * FROM t2;
UPDATE IGNORE t1,t3 SET t1.a=2 WHERE t1.a=1;
SELECT * FROM t2;
UPDATE IGNORE t3,t1 SET t1.a=2 WHERE t1.a=1;
SELECT * FROM t1;
SELECT * FROM t2;
DROP TABLE t1,t2,t3;
SELECT DEFINER FROM information_schema.triggers WHERE TRIGGER_NAME='silly_trigger';
CREATE TABLE t1 (a INT) ENGINE=InnoDB;
DROP TABLE t1;
CREATE TABLE t1 (a INT);
SELECT TRIGGER_NAME FROM information_schema.triggers WHERE TRIGGER_NAME LIKE 'trg1%' ORDER BY TRIGGER_NAME;
DROP TABLE t1;
CREATE TABLE t1(a INT);
CREATE SCHEMA s1;
UNLOCK TABLES;
DROP TABLE t1;
DROP SCHEMA s1;
DROP DATABASE IF EXISTS mysqltest_db1;
CREATE DATABASE mysqltest_db1;
CREATE TABLE t1(num_value INT);
CREATE TABLE t2(user_str TEXT);
INSERT INTO t1 VALUES(0);
INSERT INTO t1 VALUES(0);
INSERT INTO t1 VALUES(1);
SELECT * FROM t1;
SELECT * FROM t2;
INSERT INTO t1 VALUES(2);
SELECT * FROM t1;
SELECT * FROM t2;
INSERT INTO t1 VALUES(3);
SELECT * FROM t1;
SELECT * FROM t2;
INSERT INTO t1 VALUES(6);
DROP DATABASE mysqltest_db1;
DROP DATABASE IF EXISTS mysqltest_db1;
CREATE DATABASE mysqltest_db1;
CREATE TABLE t3(col CHAR(20));
CREATE TABLE t4(col CHAR(20));
SELECT * FROM t1;
SELECT @mysqltest_var;
INSERT INTO t2 VALUES('line2');
SELECT * FROM t2;
INSERT INTO t3 VALUES('t3_line1');
SELECT * FROM t3;
SELECT @mysqltest_var;
INSERT INTO t4 VALUES('t4_line2');
SELECT * FROM t4;
SELECT * FROM t1;
SELECT @mysqltest_var;
INSERT INTO t2 VALUES('line4');
SELECT * FROM t2;
INSERT INTO t3 VALUES('t3_line2');
SELECT * FROM t3;
SELECT @mysqltest_var;
INSERT INTO t4 VALUES('t4_line2');
SELECT * FROM t4;
DELETE FROM t1;
SELECT @mysqltest_var;
DROP DATABASE mysqltest_db1;
DROP DATABASE IF EXISTS mysqltest_db1;
CREATE DATABASE mysqltest_db1;
CREATE PROCEDURE p1(OUT i INT) DETERMINISTIC NO SQL SET i = 3;
CREATE PROCEDURE p2(INOUT i INT) DETERMINISTIC NO SQL SET i = i * 5;
INSERT INTO t1 VALUES (7);
INSERT INTO t2 VALUES (11);
INSERT INTO t1 VALUES (13);
INSERT INTO t2 VALUES (17);
INSERT INTO t1 VALUES (19);
INSERT INTO t2 VALUES (23);
INSERT INTO t1 VALUES (29);
INSERT INTO t2 VALUES (31);
DROP PROCEDURE p2;
DROP PROCEDURE p1;
CREATE PROCEDURE p1(OUT i INT) DETERMINISTIC NO SQL SET i = 37;
INSERT INTO t1 VALUES (41);
DROP PROCEDURE p1;
CREATE PROCEDURE p1(IN i INT) DETERMINISTIC NO SQL SET @v1 = i + 43;
INSERT INTO t1 VALUES (47);
DROP PROCEDURE p1;
CREATE PROCEDURE p1(INOUT i INT) DETERMINISTIC NO SQL SET i = i + 51;
INSERT INTO t1 VALUES (53);
DROP PROCEDURE p1;
DROP TABLE t2;
DROP TABLE t1;
DROP DATABASE mysqltest_db1;
drop table if exists t1;
create table t1 (i int);
lock tables t1 write;
select count(*) = 1 from information_schema.processlist
  where state = "Waiting for global read lock";
unlock tables;
unlock tables;
select * from t1;
drop table t1;
CREATE DATABASE db1;
CREATE TABLE db1.t1 (a char(30)) ENGINE=MEMORY;
SELECT trigger_name FROM INFORMATION_SCHEMA.TRIGGERS
 WHERE trigger_schema = 'db1';
DROP DATABASE db1;
DROP DATABASE IF EXISTS mysqltest_db1;
CREATE DATABASE mysqltest_db1;
CREATE TABLE t1 (
  a1 int,
  a2 int
);
INSERT INTO t1 VALUES (1, 20);
CREATE TABLE t2 (
  a1 int
);
INSERT INTO t2 VALUES (2);
UPDATE IGNORE t1, t2 SET t1.a1 = 2, t2.a1 = 3 WHERE t1.a1 = 1 AND t2.a1 = 2;
DROP DATABASE mysqltest_db1;
CREATE DATABASE test1;
CREATE TABLE test1.t1 (
  int_field INTEGER UNSIGNED NOT NULL,
  char_field CHAR(10),
  INDEX(`int_field`)
);
SELECT @a;
DROP DATABASE test1;
INSERT INTO t1() VALUES();
SELECT * FROM t1;
SELECT @x;
DROP TABLE t1;
CREATE TABLE t1(a DATETIME NOT NULL DEFAULT NOW(), b INT);
INSERT INTO t1(b) SELECT 1;
SELECT * FROM t1;
SELECT @x;
DROP TABLE t1;
CREATE TABLE t1( a TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP );
SELECT * FROM t1;
SELECT @x;
DROP TABLE t1;
CREATE TABLE t1(a DATETIME NOT NULL DEFAULT NOW(), b INT);
SELECT * FROM t1;
SELECT @x;
DROP TABLE t1;
CREATE TABLE t1( a TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
                 ON UPDATE NOW(), b INT DEFAULT 1 );
INSERT INTO t1 VALUES();
SELECT * FROM t1;
UPDATE t1 SET b= 2;
SELECT * FROM t1;
SELECT @x;
DROP TABLE t1;
CREATE TABLE t1( a TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                 b INT DEFAULT 1 );
INSERT INTO t1 VALUES();
SELECT * FROM t1;
UPDATE t1 SET b= 2;
SELECT * FROM t1;
SELECT @x;
DROP TABLE t1;
CREATE TABLE t1( a DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
                 ON UPDATE CURRENT_TIMESTAMP, b INT);
INSERT INTO t1(b) VALUES(1);
INSERT INTO t2 VALUES(2);
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t1;
SELECT @x;
DROP TABLE t1, t2;
CREATE TABLE t1( a TIMESTAMP NOT NULL DEFAULT NOW(), b INT );
SELECT * FROM t1;
SELECT @x;
DROP TABLE t1;
CREATE TABLE t1 (fld1 VARCHAR(64) NOT NULL,
fld2 INT DEFAULT 0, PRIMARY KEY (fld1));
CREATE TABLE t2 (fld1 VARCHAR(64) NOT NULL,
fld2 INT(11) DEFAULT NULL, PRIMARY KEY (fld1));
INSERT INTO t1(fld1) VALUES (1100);
INSERT INTO t2 VALUES (1100, 40);
SELECT * FROM t1;
SELECT * FROM t2;
INSERT INTO t2 (fld1) values (1100) ON DUPLICATE KEY UPDATE
fld2= 50;
SELECT * FROM t1;
SELECT * FROM t2;
INSERT INTO t2 (fld1) values (1100) ON DUPLICATE KEY UPDATE
fld2= 50;
SELECT * FROM t1;
SELECT * FROM t2;
INSERT INTO t2 (fld1) values (1100) ON DUPLICATE KEY UPDATE
fld2= 60;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t1;
SELECT * FROM t2;
INSERT INTO t2 (fld1) values (1100) ON DUPLICATE KEY UPDATE
fld2= 50;
SELECT * FROM t1;
SELECT * FROM t2;
INSERT INTO t2 (fld1) values (1100) ON DUPLICATE KEY UPDATE
fld2= 50;
SELECT * FROM t1;
SELECT * FROM t2;
INSERT INTO t2 (fld1) values (1100) ON DUPLICATE KEY UPDATE
fld2= 60;
SELECT * FROM t1;
SELECT * FROM t2;
DROP TABLE t1, t2;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1);
SELECT @t1_var;
DROP TABLE t1;
CREATE TABLE t1 (i INT, j VARCHAR(32));
DROP TABLE t1;
CREATE TABLE t1 (i INT, j VARCHAR(32));
DROP TABLE t1;
CREATE TABLE t1 (f1 INT, f2 INT);
DROP TABLE t1;
