--Query--
EXPLAIN QUERY TREE run_passes=1 SELECT avg(log(2) * number) AS k FROM numbers(10000000) GROUP BY GROUPING SETS (((number % 2) * (number % 3)), number % 3, number % 2) HAVING avg(log(2) * number) > 3465735.3 ORDER BY k
--Result--
[('QUERY id: 0, group_by_type: grouping_sets',), ('  PROJECTION COLUMNS',), ('    k Float64',), ('  PROJECTION',), ('    LIST id: 1, nodes: 1',), ('      FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: Float64',), ('        ARGUMENTS',), ('          LIST id: 3, nodes: 2',), ('            CONSTANT id: 4, constant_value: Float64_0.6931471805599453, constant_value_type: Float64',), ('              EXPRESSION',), ('                FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64',), ('                  ARGUMENTS',), ('                    LIST id: 6, nodes: 1',), ('                      CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8',), ('            FUNCTION id: 8, function_name: avg, function_type: aggregate, result_type: Float64',), ('              ARGUMENTS',), ('                LIST id: 9, nodes: 1',), ('                  COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11',), ('  JOIN TREE',), ('    TABLE_FUNCTION id: 11, alias: __table1, table_function_name: numbers',), ('      ARGUMENTS',), ('        LIST id: 12, nodes: 1',), ('          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32',), ('  GROUP BY',), ('    LIST id: 14, nodes: 3',), ('      LIST id: 15, nodes: 1',), ('        FUNCTION id: 16, function_name: multiply, function_type: ordinary, result_type: UInt16',), ('          ARGUMENTS',), ('            LIST id: 17, nodes: 2',), ('              FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: UInt8',), ('                ARGUMENTS',), ('                  LIST id: 19, nodes: 2',), ('                    COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11',), ('                    CONSTANT id: 21, constant_value: UInt64_2, constant_value_type: UInt8',), ('              FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8',), ('                ARGUMENTS',), ('                  LIST id: 23, nodes: 2',), ('                    COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11',), ('                    CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8',), ('      LIST id: 25, nodes: 1',), ('        FUNCTION id: 26, function_name: modulo, function_type: ordinary, result_type: UInt8',), ('          ARGUMENTS',), ('            LIST id: 27, nodes: 2',), ('              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11',), ('              CONSTANT id: 28, constant_value: UInt64_3, constant_value_type: UInt8',), ('      LIST id: 29, nodes: 1',), ('        FUNCTION id: 30, function_name: modulo, function_type: ordinary, result_type: UInt8',), ('          ARGUMENTS',), ('            LIST id: 31, nodes: 2',), ('              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11',), ('              CONSTANT id: 32, constant_value: UInt64_2, constant_value_type: UInt8',), ('  HAVING',), ('    FUNCTION id: 33, function_name: greater, function_type: ordinary, result_type: UInt8',), ('      ARGUMENTS',), ('        LIST id: 34, nodes: 2',), ('          FUNCTION id: 35, function_name: multiply, function_type: ordinary, result_type: Float64',), ('            ARGUMENTS',), ('              LIST id: 36, nodes: 2',), ('                CONSTANT id: 37, constant_value: Float64_0.6931471805599453, constant_value_type: Float64',), ('                  EXPRESSION',), ('                    FUNCTION id: 38, function_name: log, function_type: ordinary, result_type: Float64',), ('                      ARGUMENTS',), ('                        LIST id: 39, nodes: 1',), ('                          CONSTANT id: 40, constant_value: UInt64_2, constant_value_type: UInt8',), ('                FUNCTION id: 41, function_name: avg, function_type: aggregate, result_type: Float64',), ('                  ARGUMENTS',), ('                    LIST id: 42, nodes: 1',), ('                      COLUMN id: 43, column_name: number, result_type: UInt64, source_id: 11',), ('          CONSTANT id: 44, constant_value: Float64_3465735.3, constant_value_type: Float64',), ('  ORDER BY',), ('    LIST id: 45, nodes: 1',), ('      SORT id: 46, sort_direction: ASCENDING, with_fill: 0',), ('        EXPRESSION',), ('          FUNCTION id: 47, function_name: multiply, function_type: ordinary, result_type: Float64',), ('            ARGUMENTS',), ('              LIST id: 48, nodes: 2',), ('                CONSTANT id: 49, constant_value: Float64_0.6931471805599453, constant_value_type: Float64',), ('                  EXPRESSION',), ('                    FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64',), ('                      ARGUMENTS',), ('                        LIST id: 6, nodes: 1',), ('                          CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8',), ('                FUNCTION id: 50, function_name: avg, function_type: aggregate, result_type: Float64',), ('                  ARGUMENTS',), ('                    LIST id: 51, nodes: 1',), ('                      COLUMN id: 52, column_name: number, result_type: UInt64, source_id: 11',)]
+--------------------+
--Query--
EXPLAIN QUERY TREE run_passes=1 SELECT count() FROM numbers(1000) GROUP BY GROUPING SETS     (         (number, number + 1, number +2),         (number % 2, number % 3),         (number / 2, number / 3)     )
--Result--
[('QUERY id: 0, group_by_type: grouping_sets',), ('  PROJECTION COLUMNS',), ('    count() UInt64',), ('  PROJECTION',), ('    LIST id: 1, nodes: 1',), ('      FUNCTION id: 2, function_name: count, function_type: aggregate, result_type: UInt64',), ('  JOIN TREE',), ('    TABLE_FUNCTION id: 3, alias: __table1, table_function_name: numbers',), ('      ARGUMENTS',), ('        LIST id: 4, nodes: 1',), ('          CONSTANT id: 5, constant_value: UInt64_1000, constant_value_type: UInt16',), ('  GROUP BY',), ('    LIST id: 6, nodes: 3',), ('      LIST id: 7, nodes: 1',), ('        COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 3',), ('      LIST id: 9, nodes: 2',), ('        FUNCTION id: 10, function_name: modulo, function_type: ordinary, result_type: UInt8',), ('          ARGUMENTS',), ('            LIST id: 11, nodes: 2',), ('              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 3',), ('              CONSTANT id: 12, constant_value: UInt64_2, constant_value_type: UInt8',), ('        FUNCTION id: 13, function_name: modulo, function_type: ordinary, result_type: UInt8',), ('          ARGUMENTS',), ('            LIST id: 14, nodes: 2',), ('              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 3',), ('              CONSTANT id: 15, constant_value: UInt64_3, constant_value_type: UInt8',), ('      LIST id: 16, nodes: 2',), ('        FUNCTION id: 17, function_name: divide, function_type: ordinary, result_type: Float64',), ('          ARGUMENTS',), ('            LIST id: 18, nodes: 2',), ('              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 3',), ('              CONSTANT id: 19, constant_value: UInt64_2, constant_value_type: UInt8',), ('        FUNCTION id: 20, function_name: divide, function_type: ordinary, result_type: Float64',), ('          ARGUMENTS',), ('            LIST id: 21, nodes: 2',), ('              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 3',), ('              CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8',)]
+--------------------+
