--Query--
SELECT * FROM (SELECT col1, col2 FROM (select '1' as col1, '2' as col2) GROUP by col1, col2) AS expr_qry WHERE col2 != ''
--Result--
[('1', '2')]
+--------------------+
--Query--
SELECT * FROM (SELECT materialize('1') AS s1, materialize('2') AS s2 GROUP BY s1, s2) WHERE s2 = '2'
--Result--
[('1', '2')]
+--------------------+
--Query--
SELECT * FROM (SELECT materialize([1]) AS s1, materialize('2') AS s2 GROUP BY s1, s2) WHERE s2 = '2'
--Result--
[([1], '2')]
+--------------------+
--Query--
SELECT * FROM (SELECT materialize([[1]]) AS s1, materialize('2') AS s2 GROUP BY s1, s2) WHERE s2 = '2'
--Result--
[([[1]], '2')]
+--------------------+
--Query--
SELECT * FROM   (    SELECT String1,String2,String3,String4,COUNT(*)    FROM Test    GROUP by String1,String2,String3,String4   ) AS expr_qry
--Result--
[('String1_0', 'String2_0', 'String3_0', 'String4_0', 1)]
+--------------------+
--Query--
SELECT * FROM   (     SELECT String1,String2,String3,String4,COUNT(*)     FROM Test     GROUP by String1,String2,String3,String4   ) AS expr_qry WHERE  String4 ='String4_0'
--Result--
[('String1_0', 'String2_0', 'String3_0', 'String4_0', 1)]
+--------------------+
--Query--
select x, y from (select [0, 1, 2] as y, 1 as a, 2 as b) array join y as x where a = 1 and b = 2 and (x = 1 or x != 1) and x = 1
--Result--
[(1, [0, 1, 2])]
+--------------------+
--Query--
select a from t t1 join t t2 on t1.a = t2.a where t1.a
--Result--
[(1,)]
+--------------------+
--Query--
EXPLAIN indexes=1 SELECT id, delete_time FROM t1  CROSS JOIN (     SELECT delete_time     FROM t2 ) AS d WHERE create_time < delete_time AND id = 101 SETTINGS allow_experimental_analyzer=0
--Result--
[('Expression ((Projection + Before ORDER BY))',), ('  Filter (WHERE)',), ('    Join (JOIN FillRightFirst)',), ('      Expression',), ('        ReadFromMergeTree (test.t1)',), ('        Indexes:',), ('          PrimaryKey',), ('            Keys: ',), ('              id',), ('            Condition: (id in [101, 101])',), ('            Parts: 1/1',), ('            Granules: 1/1',), ('      Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))',), ('        ReadFromMergeTree (test.t2)',), ('        Indexes:',), ('          PrimaryKey',), ('            Condition: true',), ('            Parts: 1/1',), ('            Granules: 1/1',)]
+--------------------+
--Query--
EXPLAIN indexes=1 SELECT id, delete_time FROM t1  CROSS JOIN (     SELECT delete_time     FROM t2 ) AS d WHERE create_time < delete_time AND id = 101 SETTINGS allow_experimental_analyzer=1
--Result--
[('Expression ((Project names + Projection))',), ('  Filter ((WHERE + DROP unused columns after JOIN))',), ('    Join (JOIN FillRightFirst)',), ('      Expression',), ('        ReadFromMergeTree (test.t1)',), ('        Indexes:',), ('          PrimaryKey',), ('            Keys: ',), ('              id',), ('            Condition: (id in [101, 101])',), ('            Parts: 1/1',), ('            Granules: 1/1',), ('      Expression ((Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))',), ('        ReadFromMergeTree (test.t2)',), ('        Indexes:',), ('          PrimaryKey',), ('            Condition: true',), ('            Parts: 1/1',), ('            Granules: 1/1',)]
+--------------------+
--Query--
SELECT * FROM (     SELECT *     FROM Values('id UInt64, t UInt64', (1, 3)) ) AS t1 ASOF INNER JOIN (     SELECT *     FROM Values('id UInt64, t UInt64', (1, 1), (1, 2), (1, 3), (1, 4), (1, 5)) ) AS t2 ON (t1.id = t2.id) AND (t1.t < t2.t) WHERE t2.t != 4
--Result--
[]
+--------------------+
