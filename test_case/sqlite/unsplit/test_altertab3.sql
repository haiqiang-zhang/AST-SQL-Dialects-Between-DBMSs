CREATE TABLE t1(a, b);
ALTER TABLE t1 RENAME a TO aaa;
SELECT sql FROM sqlite_master WHERE name='tr1';
INSERT INTO t1 VALUES(1, 2);
CREATE TABLE t2(a,b,c);
ALTER TABLE t1 RENAME TO t1x;
SELECT sql FROM sqlite_master WHERE name = 'r1';
CREATE TABLE t1(a, b, c, d);
CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (b IN ());
ALTER TABLE t1 RENAME b TO bbb;
SELECT sql FROM sqlite_master WHERE name = 'v1';
CREATE TABLE t3(e, f);
BEGIN;
ALTER TABLE t3 RENAME TO t4;
SELECT type, name, tbl_name, sql 
  FROM sqlite_master WHERE type='table' AND name!='t1';
BEGIN;
SELECT type, name, tbl_name, sql 
  FROM sqlite_master WHERE type='table' AND name!='t1';
CREATE TEMPORARY TABLE Table0 (
    Col0 INTEGER, 
    PRIMARY KEY(Col0 COLLATE RTRIM), 
    FOREIGN KEY (Col0) REFERENCES Table0
  );
ALTER TABLE Table0 RENAME Col0 TO Col0;
SELECT sql FROM sqlite_master;
CREATE TABLE t0(c0);
CREATE INDEX i0 ON t0('1' IN ());
SELECT sql FROM sqlite_master;
CREATE INDEX i2 ON t2((LIKELIHOOD(c0, 100) IN ()));
SELECT sql FROM sqlite_master WHERE tbl_name = 't2';
ALTER TABLE t2 RENAME TO t3;
SELECT sql FROM sqlite_master WHERE name='v1';
SELECT sql FROM sqlite_master WHERE name = 'b';
SELECT a, sum(d) w2,max(d)OVER FROM t1
WINDOW
w1 AS
(PARTITION BY d
ROWS BETWEEN '' PRECEDING AND false FOLLOWING),
d AS
(PARTITION BY b ORDER BY d
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW);
CREATE TABLE t2(b);
WITH t4 AS (SELECT * FROM t1) SELECT 33;
SELECT sql FROM sqlite_master WHERE type='trigger';
CREATE TABLE a(a,h CONSTRAINT a UNIQUE ON CONFLICT FAIL,CONSTRAINT a);
DROP VIEW IF EXISTS q;
CREATE VIEW q AS SELECT 123
    
      WINDOW x AS (
        RANGE BETWEEN UNBOUNDED PRECEDING AND INDEXED() OVER(
          PARTITION BY ( WITH x AS(VALUES(col1)) VALUES(453) )
        )
      FOLLOWING
    );
DROP VIEW IF EXISTS q;
CREATE VIEW q AS SELECT
    CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(RIGHT
    AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)WINDOW x AS(RANGE BETWEEN UNBOUNDED
    PRECEDING AND INDEXED(*)OVER(PARTITION BY
    CROSS,CROSS,NATURAL,sqlite_master(*)OVER a,(WITH a AS(VALUES(LEFT)UNION
    VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION
    VALUES(LEFT)UNION VALUES(LEFT))VALUES(LEFT))IN
    STORED,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT)*LEFT FOLLOWING)ORDER BY
    LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT LIMIT
    LEFT,INDEXED(*)OVER(PARTITION BY
    CROSS,CROSS,CROSS,LEFT,INDEXED(*)OVER(PARTITION BY
    CROSS,CROSS,CROSS),INDEXED(*)OVER(PARTITION BY
    LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT),
    LEFT,LEFT,INNER,CROSS,CROSS,CROSS,INNER,NATURAL ORDER BY
    OUTER,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,INNER,
    INNER,INNER NULLS LAST GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED
    FOLLOWING);
DROP VIEW IF EXISTS q;
CREATE VIEW q AS SELECT 99 WINDOW x AS (RANGE BETWEEN UNBOUNDED PRECEDING
    AND count(*)OVER(PARTITION BY (WITH a AS(VALUES(2),(x3))VALUES(0)))
    FOLLOWING)ORDER BY x2,sum(1)OVER(PARTITION BY avg(5)OVER(PARTITION BY x1));
CREATE TABLE s(a, b, c);
CREATE INDEX k ON s( (WITH s AS( SELECT * ) VALUES(2) ) IN () );
CREATE VIEW v AS SELECT ( 
    WITH x(a) AS(SELECT * FROM s) VALUES(RIGHT) 
  ) IN();
CREATE VIEW v2(b) AS SELECT * FROM v2;
DROP VIEW v2;
CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;
DROP VIEW v2;
CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);
CREATE TABLE v0 (a);
SELECT * FROM v2;
SELECT sql FROM sqlite_master WHERE type='trigger';
SELECT sql FROM sqlite_schema WHERE name='tr2';
SELECT sql FROM sqlite_schema WHERE name = 't1';
SELECT sql FROM sqlite_schema WHERE type='trigger';
DELETE FROM t2;
SELECT sql FROM sqlite_schema WHERE type='trigger';
SELECT * FROM v1;
SELECT sql FROM sqlite_schema WHERE type='view';
