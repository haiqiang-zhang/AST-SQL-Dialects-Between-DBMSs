--Query--
WITH x(a) AS ( SELECT * FROM t1) SELECT 10
--Result--
[(10,)]
+--------------------+
--Query--
SELECT * FROM ( WITH x AS ( SELECT * FROM t1) SELECT 10 )
--Result--
[(10,)]
+--------------------+
--Query--
WITH x(a) AS ( SELECT * FROM t1) INSERT INTO t1 VALUES(1,2)
--Result--
[]
+--------------------+
--Query--
WITH x(a) AS ( SELECT * FROM t1) DELETE FROM t1
--Result--
[]
+--------------------+
--Query--
WITH x(a) AS ( SELECT * FROM t1) UPDATE t1 SET x = y
--Result--
[]
+--------------------+
--Query--
WITH tmp AS ( SELECT * FROM t1 ) SELECT x FROM tmp
--Result--
[(1,), (2,)]
+--------------------+
--Query--
WITH tmp(a) AS ( SELECT * FROM t1 ) SELECT a FROM tmp
--Result--
[(1,), (2,)]
+--------------------+
--Query--
SELECT * FROM (     WITH tmp(a) AS ( SELECT * FROM t1 ) SELECT a FROM tmp   )
--Result--
[(1,), (2,)]
+--------------------+
--Query--
WITH tmp1(a) AS ( SELECT * FROM t1 ),        tmp2(x) AS ( SELECT * FROM tmp1)   SELECT * FROM tmp2
--Result--
[(1,), (2,)]
+--------------------+
--Query--
WITH tmp2(x) AS ( SELECT * FROM tmp1),        tmp1(a) AS ( SELECT * FROM t1 )   SELECT * FROM tmp2
--Result--
[(1,), (2,)]
+--------------------+
--Query--
WITH t3(a) AS (SELECT * FROM t4)   SELECT * FROM t3
--Result--
[('T4',)]
+--------------------+
--Query--
WITH tmp  AS ( SELECT * FROM t3 ),        tmp2 AS ( WITH tmp AS ( SELECT * FROM t4 ) SELECT * FROM tmp )   SELECT * FROM tmp2
--Result--
[('T4',)]
+--------------------+
--Query--
WITH tmp  AS ( SELECT * FROM t3 ),        tmp2 AS ( WITH xxxx AS ( SELECT * FROM t4 ) SELECT * FROM tmp )   SELECT * FROM tmp2
--Result--
[('T3',)]
+--------------------+
--Query--
WITH dset AS ( SELECT 2 UNION ALL SELECT 4 )   DELETE FROM t1 WHERE x IN dset
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1
--Result--
[(1,), (3,)]
+--------------------+
--Query--
WITH iset AS ( SELECT 2 UNION ALL SELECT 4 )   INSERT INTO t1 SELECT * FROM iset
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1
--Result--
[(1,), (3,), (2,), (4,)]
+--------------------+
--Query--
WITH uset(a, b) AS ( SELECT 2, 8 UNION ALL SELECT 4, 9 )   UPDATE t1 SET x = COALESCE( (SELECT b FROM uset WHERE a=x), x )
--Result--
[]
+--------------------+
--Query--
SELECT * FROM t1
--Result--
[(1,), (3,), (8,), (9,)]
+--------------------+
--Query--
WITH i(x) AS ( VALUES(1) UNION ALL SELECT x+1 FROM i)   SELECT x FROM i LIMIT 10
--Result--
[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,)]
+--------------------+
--Query--
WITH i(x) AS ( VALUES(1) UNION ALL SELECT x+1 FROM i ORDER BY 1)   SELECT x FROM i LIMIT 10
--Result--
[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,)]
+--------------------+
--Query--
WITH RECURSIVE     ancest(id, mtime) AS       (VALUES(0, 0)        UNION        SELECT edge.xto, edge.seq FROM edge, ancest         WHERE edge.xfrom=ancest.id         ORDER BY 2       )   SELECT * FROM ancest
--Result--
[(0, 0), (1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60), (7, 70), (8, 80), (9, 90)]
+--------------------+
--Query--
WITH RECURSIVE     ancest(id, mtime) AS       (VALUES(0, 0)        UNION ALL        SELECT edge.xto, edge.seq FROM edge, ancest         WHERE edge.xfrom=ancest.id         ORDER BY 2       )   SELECT * FROM ancest
--Result--
[(0, 0), (1, 10), (2, 20), (3, 30), (4, 40), (4, 40), (5, 50), (6, 60), (7, 70), (7, 70), (8, 80), (8, 80), (8, 80), (8, 80), (9, 90), (9, 90), (9, 90), (9, 90)]
+--------------------+
--Query--
WITH RECURSIVE     ancest(id, mtime) AS       (VALUES(0, 0)        UNION ALL        SELECT edge.xto, edge.seq FROM edge, ancest         WHERE edge.xfrom=ancest.id         ORDER BY 2 LIMIT 4 OFFSET 2       )   SELECT * FROM ancest
--Result--
[(2, 20), (3, 30), (4, 40), (4, 40)]
+--------------------+
--Query--
WITH i(x) AS ( VALUES(1) UNION ALL SELECT x+1 FROM i LIMIT 5)   SELECT x FROM i
--Result--
[(1,), (2,), (3,), (4,), (5,)]
+--------------------+
--Query--
WITH i(x) AS ( VALUES(1) UNION ALL SELECT (x+1)%10 FROM i)   SELECT x FROM i LIMIT 20
--Result--
[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (0,), (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (0,)]
+--------------------+
--Query--
WITH i(x) AS ( VALUES(1) UNION SELECT (x+1)%10 FROM i)   SELECT x FROM i LIMIT 20
--Result--
[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (0,)]
+--------------------+
--Query--
WITH flat(fid, fpath) AS (     SELECT id, '' FROM f WHERE parentid IS NULL     UNION ALL     SELECT id, fpath || '/' || name FROM f, flat WHERE parentid=fid   )   SELECT fpath FROM flat WHERE fpath!='' ORDER BY 1
--Result--
[('/bin',), ('/bin/false',), ('/bin/grep',), ('/bin/ls',), ('/bin/true',), ('/etc',), ('/etc/rc.d',), ('/etc/rc.d/rc.apache',), ('/etc/rc.d/rc.samba',), ('/home',), ('/home/dan',), ('/home/dan/public_html',), ('/home/dan/public_html/index.html',), ('/home/dan/public_html/index.html/logo.gif',)]
+--------------------+
--Query--
WITH flat(fid, fpath) AS (     SELECT id, '' FROM f WHERE parentid IS NULL     UNION ALL     SELECT id, fpath || '/' || name FROM f, flat WHERE parentid=fid   )   SELECT count(*) FROM flat
--Result--
[(15,)]
+--------------------+
--Query--
WITH t(id, path) AS (     SELECT i, '' FROM tree WHERE p IS NULL     UNION ALL     SELECT i, path || '/' || i FROM tree, t WHERE p = id   )    SELECT path FROM t
--Result--
[('',), ('/2',), ('/3',), ('/2/4',), ('/2/4/5',)]
+--------------------+
--Query--
WITH t(id) AS (     VALUES(2)     UNION ALL     SELECT i FROM tree, t WHERE p = id   )    SELECT id FROM t
--Result--
[(2,), (4,), (5,)]
+--------------------+
--Query--
WITH RECURSIVE     xaxis(x) AS (VALUES(-2.0) UNION ALL SELECT x+0.05 FROM xaxis WHERE x<1.2),     yaxis(y) AS (VALUES(-1.0) UNION ALL SELECT y+0.1 FROM yaxis WHERE y<1.0),     m(iter, cx, cy, x, y) AS (       SELECT 0, x, y, 0.0, 0.0 FROM xaxis, yaxis       UNION ALL       SELECT iter+1, cx, cy, x*x-y*y + cx, 2.0*x*y + cy FROM m         WHERE (x*x + y*y) < 4.0 AND iter<28     ),     m2(iter, cx, cy) AS (       SELECT max(iter), cx, cy FROM m GROUP BY cx, cy     ),     a(t) AS (       SELECT group_concat( substr(' .+*#', 1+min(iter/7,4), 1), '')        FROM m2 GROUP BY cy     )   SELECT group_concat(rtrim(t),x'0a') FROM a
--Result--
[('                                    ....#\n                                   ..#*..\n                                 ..+####+.\n                            .......+####....   +\n                           ..##+*##########+.++++\n                          .+.##################+.\n              .............+###################+.+\n              ..++..#.....*#####################+.\n             ...+#######++#######################.\n          ....+*################################.\n #############################################...\n          ....+*################################.\n             ...+#######++#######################.\n              ..++..#.....*#####################+.\n              .............+###################+.+\n                          .+.##################+.\n                           ..##+*##########+.++++\n                            .......+####....   +\n                                 ..+####+.\n                                   ..#*..\n                                    ....#\n                                    +.',)]
+--------------------+
--Query--
WITH RECURSIVE     input(sud) AS (       VALUES('53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79')     ),        /* A table filled with digits 1..9, inclusive. */     digits(z, lp) AS (       VALUES('1', 1)       UNION ALL SELECT       CAST(lp+1 AS TEXT), lp+1 FROM digits WHERE lp<9     ),        /* The tricky bit. */     x(s, ind) AS (       SELECT sud, instr(sud, '.') FROM input       UNION ALL       SELECT         substr(s, 1, ind-1) || z || substr(s, ind+1),         instr( substr(s, 1, ind-1) || z || substr(s, ind+1), '.' )        FROM x, digits AS z       WHERE ind>0         AND NOT EXISTS (               SELECT 1                 FROM digits AS lp                WHERE z.z = substr(s, ((ind-1)/9)*9 + lp, 1)                   OR z.z = substr(s, ((ind-1)%9) + (lp-1)*9 + 1, 1)                   OR z.z = substr(s, (((ind-1)/3) % 3) * 3                           + ((ind-1)/27) * 27 + lp                           + ((lp-1) / 3) * 6, 1)            )     )   SELECT s FROM x WHERE ind=0
--Result--
[('534678912672195348198342567859761423426853791713924856961537284287419635345286179',)]
+--------------------+
--Query--
WITH ii(a) AS (       VALUES(1)       UNION ALL        SELECT a+1 FROM ii WHERE a<20        LIMIT 20 OFFSET 0     )     SELECT * FROM ii
--Result--
[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,)]
+--------------------+
--Query--
WITH ii(a) AS (       VALUES(1)       UNION ALL        SELECT a+1 FROM ii WHERE a<20        LIMIT 0 OFFSET 0     )     SELECT * FROM ii
--Result--
[]
+--------------------+
--Query--
WITH ii(a) AS (       VALUES(1)       UNION ALL        SELECT a+1 FROM ii WHERE a<20        LIMIT 19 OFFSET 1     )     SELECT * FROM ii
--Result--
[(2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,)]
+--------------------+
--Query--
WITH ii(a) AS (       VALUES(1)       UNION ALL        SELECT a+1 FROM ii WHERE a<20        LIMIT 20 OFFSET 0     )     SELECT * FROM ii
--Result--
[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,)]
+--------------------+
--Query--
WITH ii(a) AS (       VALUES(1)       UNION ALL        SELECT a+1 FROM ii WHERE a<20        LIMIT 5 OFFSET 5     )     SELECT * FROM ii
--Result--
[(6,), (7,), (8,), (9,), (10,)]
+--------------------+
--Query--
WITH ii(a) AS (       VALUES(1)       UNION ALL        SELECT a+1 FROM ii WHERE a<20        LIMIT 0 OFFSET 0     )     SELECT * FROM ii
--Result--
[]
+--------------------+
--Query--
WITH ii(a) AS (       VALUES(1)       UNION ALL        SELECT a+1 FROM ii WHERE a<20        LIMIT 40 OFFSET 0     )     SELECT * FROM ii
--Result--
[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,)]
+--------------------+
--Query--
WITH ii(a) AS (       VALUES(1)       UNION ALL        SELECT a+1 FROM ii WHERE a<20        LIMIT -1 OFFSET 0     )     SELECT * FROM ii
--Result--
[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,)]
+--------------------+
--Query--
WITH ii(a) AS (       VALUES(1)       UNION ALL        SELECT a+1 FROM ii WHERE a<20        LIMIT -1 OFFSET 0     )     SELECT * FROM ii
--Result--
[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,)]
+--------------------+
--Query--
WITH flat(fid, p) AS (     SELECT id, '/' || payload FROM tree WHERE parentid IS NULL     UNION ALL     SELECT id, p || '/' || payload FROM flat, tree WHERE parentid=fid   )   SELECT p FROM flat ORDER BY p
--Result--
[]
+--------------------+
--Query--
WITH t(a) AS (     SELECT 1 AS b UNION ALL SELECT a+1 AS c FROM t WHERE a<5 ORDER BY b   )    SELECT * FROM t
--Result--
[(1,), (2,), (3,), (4,), (5,)]
+--------------------+
--Query--
WITH t(a) AS (     SELECT 1 AS b UNION ALL SELECT a+1 AS c FROM t WHERE a<5 ORDER BY c   )    SELECT * FROM t
--Result--
[(1,), (2,), (3,), (4,), (5,)]
+--------------------+
--Query--
WITH flat(fid, depth, p) AS (     SELECT id, 1, '/' || payload FROM tree WHERE parentid IS NULL     UNION ALL     SELECT id, depth+1, p||'/'||payload FROM flat, tree WHERE parentid=fid     ORDER BY 2, 3 COLLATE nocase   )   SELECT p FROM flat
--Result--
[]
+--------------------+
--Query--
WITH flat(fid, depth, p) AS (       SELECT id, 1, ('/' || payload) COLLATE nocase        FROM tree WHERE parentid IS NULL     UNION ALL       SELECT id, depth+1, (p||'/'||payload)       FROM flat, tree WHERE parentid=fid     ORDER BY 2, 3   )   SELECT p FROM flat
--Result--
[]
+--------------------+
--Query--
WITH flat(fid, depth, p) AS (       SELECT id, 1, ('/' || payload)       FROM tree WHERE parentid IS NULL     UNION ALL       SELECT id, depth+1, (p||'/'||payload) COLLATE nocase        FROM flat, tree WHERE parentid=fid     ORDER BY 2, 3   )   SELECT p FROM flat
--Result--
[]
+--------------------+
--Query--
SELECT a COLLATE nocase FROM tst UNION ALL SELECT b FROM tst ORDER BY 1
--Result--
[('a',), ('A',), ('b',), ('B',), ('c',), ('C',)]
+--------------------+
--Query--
SELECT a FROM tst UNION ALL SELECT b COLLATE nocase FROM tst ORDER BY 1
--Result--
[('A',), ('B',), ('C',), ('a',), ('b',), ('c',)]
+--------------------+
--Query--
SELECT a||'' FROM tst UNION ALL SELECT b COLLATE nocase FROM tst ORDER BY 1
--Result--
[('a',), ('A',), ('b',), ('B',), ('c',), ('C',)]
+--------------------+
--Query--
WITH RECURSIVE   t1(x) AS (VALUES(2) UNION ALL SELECT x+2 FROM t1 WHERE x<20),   t2(y) AS (VALUES(3) UNION ALL SELECT y+3 FROM t2 WHERE y<20) SELECT x FROM t1 EXCEPT SELECT y FROM t2 ORDER BY 1
--Result--
[(2,), (4,), (8,), (10,), (14,), (16,), (20,)]
+--------------------+
--Query--
WITH x AS (SELECT * FROM t) SELECT 0 EXCEPT SELECT 0 ORDER BY 1 COLLATE binary
--Result--
[]
+--------------------+
--Query--
WITH x(a) AS (     WITH y(b) AS (SELECT 10)     SELECT 9 UNION ALL SELECT * FROM y   )   SELECT * FROM x
--Result--
[(9,), (10,)]
+--------------------+
--Query--
WITH x AS (     WITH y(b) AS (SELECT 10)     SELECT * FROM y UNION ALL SELECT * FROM y   )   SELECT * FROM x
--Result--
[(10,), (10,)]
+--------------------+
--Query--
WITH    x1 AS (SELECT 10),   x2 AS (SELECT * FROM x1),   x3 AS (     WITH x1 AS (SELECT 11)     SELECT * FROM x2 UNION ALL SELECT * FROM x2   )   SELECT * FROM x3
--Result--
[(10,), (10,)]
+--------------------+
--Query--
WITH    x1 AS (SELECT 10),   x2 AS (SELECT * FROM x1),   x3 AS (     WITH x1 AS (SELECT 11)     SELECT * FROM x2 UNION ALL SELECT * FROM x1   )   SELECT * FROM x3
--Result--
[(10,), (11,)]
+--------------------+
--Query--
WITH    x1 AS (SELECT 10),   x2 AS (SELECT * FROM x1),   x3 AS (     WITH        x1 AS ( SELECT 11 ),       x4 AS ( SELECT * FROM x2 )     SELECT * FROM x4 UNION ALL SELECT * FROM x1   )   SELECT * FROM x3
--Result--
[(10,), (11,)]
+--------------------+
--Query--
WITH    x1 AS (SELECT 10),   x2 AS (SELECT * FROM x1),   x3 AS (     WITH        x1 AS ( SELECT 11 ),       x4 AS ( SELECT * FROM x2 )     SELECT * FROM x4 UNION ALL SELECT * FROM x1   )   SELECT * FROM x3
--Result--
[(10,), (11,)]
+--------------------+
--Query--
WITH    x1 AS (SELECT 10),   x2 AS (SELECT 11),   x3 AS (     SELECT * FROM x1 UNION ALL SELECT * FROM x2   ),   x4 AS (     WITH      x1 AS (SELECT 12),     x2 AS (SELECT 13)     SELECT * FROM x3   )   SELECT * FROM x4
--Result--
[(10,), (11,)]
+--------------------+
--Query--
WITH xyz(x) AS (VALUES(NULL) UNION SELECT round(1<x) FROM xyz ORDER BY 1)   SELECT quote(x) FROM xyz
--Result--
[('NULL',)]
+--------------------+
--Query--
WITH xyz(x) AS (     SELECT printf('%d', 5) * NULL     UNION SELECT round(1<1+x)      FROM xyz ORDER BY 1   )   SELECT 1 FROM xyz
--Result--
[(1,)]
+--------------------+
--Query--
WITH c(i)AS(VALUES(9)UNION SELECT~i FROM c)SELECT max(5)>i fROM c
--Result--
[(0,)]
+--------------------+
--Query--
WITH c(i)AS(VALUES(5)UNIoN SELECT 0)SELECT min(1)-i fROM c
--Result--
[(1,)]
+--------------------+
--Query--
WITH RECURSIVE t21(a,b) AS (     WITH t21(x) AS (VALUES(1))     SELECT x, x FROM t21 ORDER BY 1   )   SELECT * FROM t21 AS tA, t21 AS tB
--Result--
[(1, 1, 1, 1)]
+--------------------+
--Query--
WITH RECURSIVE t21(a,b) AS (     WITH t21(x) AS (VALUES(1))     SELECT x, x FROM t21 ORDER BY 1 LIMIT 5   )   SELECT * FROM t21 AS tA, t21 AS tB
--Result--
[(1, 1, 1, 1)]
+--------------------+
--Query--
SELECT printf('',      EXISTS (WITH RECURSIVE Table0 AS (WITH Table0 AS (SELECT DISTINCT 1)                                        SELECT *, * FROM Table0 ORDER BY 1 DESC)              SELECT * FROM Table0  NATURAL JOIN  Table0))
--Result--
[(None,)]
+--------------------+
--Query--
ATTACH "" AS aux
--Result--
[]
+--------------------+
--Query--
SELECT * FROM main.v2 AS a, aux.v2 AS b, aux.v2 AS c, main.v2 AS d
--Result--
[('A', 1, 1, 'A'), ('A', 1, 1, 'B'), ('B', 1, 1, 'A'), ('B', 1, 1, 'B')]
+--------------------+
--Query--
WITH RECURSIVE cte(label, step) AS (       SELECT DISTINCT * FROM t      UNION ALL        SELECT label, step + 1 FROM cte WHERE step < 3   )   SELECT * FROM cte ORDER BY +label, +step
--Result--
[('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3)]
+--------------------+
--Query--
WITH RECURSIVE cte(label, step) AS (       SELECT * FROM t      UNION       SELECT label, step + 1 FROM cte WHERE step < 3   )   SELECT * FROM cte ORDER BY +label, +step
--Result--
[('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3)]
+--------------------+
--Query--
WITH RECURSIVE cte(label, step) AS (       SELECT * FROM t     UNION ALL       SELECT DISTINCT label, step + 1 FROM cte, tworow WHERE step < 3   )   SELECT * FROM cte ORDER BY +label, +step
--Result--
[('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3)]
+--------------------+
--Query--
SELECT k, cte_map, main_map, '|' FROM log ORDER BY k
--Result--
[]
+--------------------+
