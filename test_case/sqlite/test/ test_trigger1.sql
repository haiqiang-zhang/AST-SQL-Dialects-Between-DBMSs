CREATE TABLE t1(a);
BEGIN;
DROP TRIGGER IF EXISTS tr1;
BEGIN;
DROP TRIGGER IF EXISTS biggles;
DROP TABLE t1;
CREATE TEMP TABLE temp_table(a);
SELECT count(*) FROM sqlite_master WHERE name = 'temp_trig';
create table t1(a,b);
insert into t1 values(1,'a');
insert into t1 values(2,'b');
insert into t1 values(3,'c');
insert into t1 values(4,'d');
delete from t1 where a=1 OR a=3;
select * from t1;
drop table t1;
create table t1(a,b);
insert into t1 values(1,'a');
insert into t1 values(2,'b');
insert into t1 values(3,'c');
insert into t1 values(4,'d');
update t1 set b='x-' || b where a=1 OR a=3;
select * from t1;
drop table t1;
create table t1(a,b);
create view v1 as select * from t1;
drop view v1;
create view v1 as select * from t1;
CREATE TEMP TABLE t2(x,y);
INSERT INTO t1 VALUES(1,2);
SELECT * FROM t2;
INSERT INTO t1 VALUES(1,2);
SELECT * FROM t2;
INSERT INTO t1 VALUES(1,2);
SELECT * FROM t2;
INSERT INTO t1 VALUES(1,2);
SELECT * FROM t2;
DELETE FROM t1;
DELETE FROM t2;
INSERT INTO t1 VALUES(1,2);
SELECT * FROM t2;
DROP TABLE t2;
CREATE TABLE t2(x,y);
SELECT * FROM t2;
INSERT INTO t1 VALUES(3,4);
SELECT * FROM t1 UNION ALL SELECT * FROM t2;
INSERT INTO t1 VALUES(5,6);
SELECT * FROM t1 UNION ALL SELECT * FROM t2;
INSERT INTO t1 VALUES(7,8);
SELECT * FROM t2;
INSERT INTO t1 VALUES(9,10);
SELECT * FROM t2;
DROP TABLE t1;
SELECT * FROM t2;
SELECT * FROM t2;
PRAGMA integrity_check;
SELECT type, name FROM sqlite_master;
SELECT type, name FROM sqlite_master;
DELETE FROM t2;
SELECT * FROM t2;
SELECT type, name FROM sqlite_master;
SELECT type, name FROM sqlite_master;
SELECT * FROM t2;
SELECT * FROM t2;
PRAGMA integrity_check;
SELECT name FROM sqlite_master WHERE type='trigger';
SELECT name FROM sqlite_master WHERE type='trigger';
SELECT name FROM sqlite_master WHERE type='trigger';
SELECT name FROM sqlite_master WHERE type='trigger';
SELECT name FROM sqlite_master WHERE type='trigger';
SELECT name FROM sqlite_master WHERE type='trigger';
CREATE TABLE t3(a,b);
CREATE TABLE t4(x UNIQUE, b);
INSERT INTO t3 VALUES(1,2);
SELECT * FROM t3 UNION ALL SELECT 99, 99 UNION ALL SELECT * FROM t4;
INSERT INTO t3 VALUES(1,3);
SELECT * FROM t3 UNION ALL SELECT 99, 99 UNION ALL SELECT * FROM t4;
DROP TABLE t3;
DROP TABLE t4;
ATTACH 'test2.db' AS aux;
CREATE TABLE main.t4(a, b, c);
CREATE TABLE temp.t4(a, b, c);
CREATE TABLE aux.t4(a, b, c);
CREATE TABLE insert_log(db, a, b, c);
INSERT INTO main.t4 VALUES(1, 2, 3);
INSERT INTO temp.t4 VALUES(4, 5, 6);
INSERT INTO aux.t4  VALUES(7, 8, 9);
SELECT * FROM insert_log;
BEGIN;
INSERT INTO main.t4 VALUES(1, 2, 3);
INSERT INTO temp.t4 VALUES(4, 5, 6);
INSERT INTO aux.t4  VALUES(7, 8, 9);
SELECT * FROM insert_log;
DELETE FROM insert_log;
INSERT INTO main.t4 VALUES(11, 12, 13);
INSERT INTO temp.t4 VALUES(14, 15, 16);
INSERT INTO aux.t4  VALUES(17, 18, 19);
SELECT * FROM insert_log;
DROP TABLE insert_log;
INSERT INTO main.t4 VALUES(21, 22, 23);
INSERT INTO temp.t4 VALUES(24, 25, 26);
INSERT INTO aux.t4  VALUES(27, 28, 29);
CREATE TABLE tA(a INTEGER PRIMARY KEY, b, c);
INSERT INTO tA VALUES(1, 2, 3);
CREATE TABLE t17a(ii INT);
CREATE TABLE t17b(tt TEXT PRIMARY KEY, ss);
INSERT INTO t17a(ii) VALUES('1');
PRAGMA integrity_check;
CREATE TABLE t18(a PRIMARY KEY,b,c);
INSERT INTO t18(a,b,c) VALUES(1,2,3);
UPDATE t18 SET c=b WHERE a=1;
SELECT * FROM t18;
DELETE FROM t18;
INSERT INTO t18(a,b,c) VALUES(1,2,3);
UPDATE t18 SET c=b, b=b+1 WHERE a=1;
SELECT * FROM t18;
CREATE TABLE t19(a INT PRIMARY KEY, b, c)WITHOUT ROWID;
INSERT INTO t19(a,b,c) VALUES(1,2,3);
UPDATE t19 SET c=b WHERE a=1;
SELECT * FROM t19;
DELETE FROM t19;
INSERT INTO t19(a,b,c) VALUES(1,2,3);
UPDATE t19 SET c=CASE WHEN b=2 THEN b ELSE b+99 END WHERE a=1;
SELECT * FROM t19;
CREATE TABLE t20_1(x);
DETACH aux;
PRAGMA recursive_triggers = true;
CREATE TABLE t0(a, b, c UNIQUE);
CREATE UNIQUE INDEX i0 ON t0(b) WHERE a;
INSERT INTO t0(a,b,c) VALUES(0,0,9),(1,1,1);
REPLACE INTO t0(a,b,c) VALUES(2,0,9);
SELECT * FROM t0;
CREATE TABLE t1(
    a INTEGER PRIMARY KEY,
    b DOUBLE
  );
INSERT INTO t1(b) VALUES('Y'),('X'),('Z');
SELECT a, CASE WHEN typeof(b)='text' THEN quote(b) ELSE '<blob>' END, '|' FROM t1;
