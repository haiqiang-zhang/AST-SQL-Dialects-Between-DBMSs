SELECT * FROM t1;
VACUUM;
PRAGMA integrity_check;
VACUUM;
PRAGMA integrity_check;
VACUUM;
PRAGMA integrity_check;
VACUUM;
PRAGMA integrity_check;
VACUUM;
PRAGMA integrity_check;
VACUUM;
PRAGMA integrity_check;
VACUUM;
PRAGMA integrity_check;
PRAGMA foreign_keys = true;
SELECT *, '|' FROM t0 ORDER BY +c0;
PRAGMA foreign_keys = true;
PRAGMA foreign_keys=ON;
CREATE TABLE t1a(
    gcx AS (x+0) REFERENCES t1(a) ON DELETE CASCADE,
    id,
    x,
    gcid AS (1*id)
  );
SELECT id,x,'|' FROM t1a ORDER BY id;
DROP TABLE IF EXISTS t0;
CREATE TABLE t0(c0 NOT NULL AS(c1), c1);
INSERT INTO t0(c1) VALUES (1);
DROP TABLE t0;
CREATE TABLE t0(c0 NOT NULL DEFAULT 'xyz', c1 AS(c0) NOT NULL);
REPLACE INTO t0(c0) VALUES(NULL);
SELECT * FROM t0;
DROP TABLE t0;
CREATE TABLE t0(c0 NOT NULL DEFAULT 'xyz', c1 AS(c0) STORED NOT NULL);
SELECT * FROM t0;
SELECT * FROM t1;
DROP TABLE t1;
CREATE TABLE t1(
   a NOT NULL DEFAULT 'aaa',
   b AS(c) STORED NOT NULL,
   c NOT NULL DEFAULT 'ccc');
REPLACE INTO t1(a,c) VALUES(NULL,NULL);
SELECT * FROM t1;
CREATE TABLE t2(
   a NOT NULL DEFAULT 'aaa',
   b AS(a) NOT NULL,
   c NOT NULL DEFAULT 'ccc');
REPLACE INTO t2(a,c) VALUES(NULL,NULL);
SELECT * FROM t2;
DROP TABLE t2;
CREATE TABLE t2(
   a NOT NULL DEFAULT 'aaa',
   b AS(a) STORED NOT NULL,
   c NOT NULL DEFAULT 'ccc');
SELECT * FROM t2;
CREATE TABLE t3(a NOT NULL DEFAULT 123, b AS(a) UNIQUE);
REPLACE INTO t3 VALUES(NULL);
SELECT * FROM t3;
SELECT * FROM t3 WHERE b=123;
CREATE TABLE t4(a NOT NULL DEFAULT 123, b AS(a*10+4) STORED UNIQUE);
REPLACE INTO t4 VALUES(NULL);
SELECT * FROM t4;
SELECT * FROM t4 WHERE b=1234;
DROP TABLE IF EXISTS t0;
CREATE TABLE t0(
    c0 AS (('a', 9) < ('b', c1)),
    c1 AS (1),
    c2 CHECK (1 = c1)
  );
INSERT INTO t0 VALUES (0),(99);
SELECT * FROM t0;
DROP TABLE IF EXISTS t0;
PRAGMA foreign_keys=OFF;
INSERT INTO t3 VALUES(1);
SELECT 100, * FROM t3;
SELECT 200, * FROM t3;
CREATE TABLE IF NOT EXISTS t1(aa, bb AS (aa+1));
PRAGMA integrity_check;
PRAGMA foreign_keys = true;
CREATE TABLE t0(
    c0,
    c1 INTEGER PRIMARY KEY,
    c2 BLOB UNIQUE DEFAULT x'00',
    c3 BLOB GENERATED ALWAYS AS (1), 
    FOREIGN KEY(c1) REFERENCES t0(c2)
  );
DROP TABLE t0;
CREATE TABLE t0(
    c0,
    c1 INTEGER PRIMARY KEY,
    c3 BLOB GENERATED ALWAYS AS (1), 
    c2 BLOB UNIQUE DEFAULT x'00',
    FOREIGN KEY(c1) REFERENCES t0(c2)
  );
DROP TABLE t0;
CREATE TABLE t0(
    c0,
    c3 BLOB GENERATED ALWAYS AS (1), 
    c1 INTEGER PRIMARY KEY,
    c2 BLOB UNIQUE DEFAULT x'00',
    FOREIGN KEY(c1) REFERENCES t0(c2)
  );
DROP TABLE t0;
CREATE TABLE t0(
    c3 BLOB GENERATED ALWAYS AS (1), 
    c0,
    c1 INTEGER PRIMARY KEY,
    c2 BLOB UNIQUE DEFAULT x'00',
    FOREIGN KEY(c1) REFERENCES t0(c2)
  );
PRAGMA integrity_check;
REINDEX;
SELECT * FROM t0;
PRAGMA writable_schema=ON;
SELECT a, quote(b) FROM t1;
SELECT c0, c1, c2 FROM t0 LEFT JOIN t1;
DROP TABLE t1;
CREATE TABLE t1(c1, c2 AS (c1 ISNULL));
SELECT * FROM t1;
SELECT *, (1 BETWEEN CAST(t0.c0 AS TEXT) AND t0.c0) FROM t0;
SELECT * FROM t0 WHERE (1 BETWEEN CAST(t0.c0 AS TEXT) AND t0.c0);
SELECT * FROM t0;
UPDATE t0 SET c1=0, c2=0 WHERE c0>=0;
SELECT * FROM t0;
CREATE TEMPORARY TABLE tab (
    prim DATE PRIMARY KEY,
    a INTEGER,
    comp INTEGER AS (a),
    b INTEGER,
    x INTEGER
  );
INSERT INTO tab (prim, a, b) VALUES ('2001-01-01', 0, 0);
SELECT * FROM tab;
INSERT INTO tab (prim, b)
  VALUES ('2001-01-01',5)
      ON CONFLICT(prim) DO UPDATE SET  b=excluded.b;
SELECT * FROM tab;
SELECT name, type FROM pragma_table_xinfo('t1');
DROP TABLE t1;
CREATE TABLE t1(
    x,
    a INT AS (x) VIRTUAL,
    b BLOB AS (x) VIRTUAL
  );
CREATE INDEX x2 ON t1(a);
EXPLAIN SELECT a FROM t1 INDEXED BY x2;
EXPLAIN SELECT b FROM t1 INDEXED BY x2;
