--Query--
analyze onerow
--Result--
[]
+--------------------+
--Query--
SELECT *   FROM J1_TBL AS tx
--Result--
[(1, 4, 'one'), (2, 3, 'two'), (3, 2, 'three'), (4, 1, 'four'), (5, 0, 'five'), (6, 6, 'six'), (7, 7, 'seven'), (8, 8, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, 0, 'zero')]
+--------------------+
--Query--
SELECT *   FROM J1_TBL tx
--Result--
[(1, 4, 'one'), (2, 3, 'two'), (3, 2, 'three'), (4, 1, 'four'), (5, 0, 'five'), (6, 6, 'six'), (7, 7, 'seven'), (8, 8, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, 0, 'zero')]
+--------------------+
--Query--
SELECT *   FROM J1_TBL AS t1 (a, b, c)
--Result--
[(1, 4, 'one'), (2, 3, 'two'), (3, 2, 'three'), (4, 1, 'four'), (5, 0, 'five'), (6, 6, 'six'), (7, 7, 'seven'), (8, 8, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, 0, 'zero')]
+--------------------+
--Query--
SELECT *   FROM J1_TBL t1 (a, b, c)
--Result--
[(1, 4, 'one'), (2, 3, 'two'), (3, 2, 'three'), (4, 1, 'four'), (5, 0, 'five'), (6, 6, 'six'), (7, 7, 'seven'), (8, 8, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, 0, 'zero')]
+--------------------+
--Query--
SELECT *   FROM J1_TBL t1 (a, b, c), J2_TBL t2 (d, e)
--Result--
[(1, 4, 'one', 1, -1), (2, 3, 'two', 1, -1), (3, 2, 'three', 1, -1), (4, 1, 'four', 1, -1), (5, 0, 'five', 1, -1), (6, 6, 'six', 1, -1), (7, 7, 'seven', 1, -1), (8, 8, 'eight', 1, -1), (0, None, 'zero', 1, -1), (None, None, 'null', 1, -1), (None, 0, 'zero', 1, -1), (1, 4, 'one', 2, 2), (2, 3, 'two', 2, 2), (3, 2, 'three', 2, 2), (4, 1, 'four', 2, 2), (5, 0, 'five', 2, 2), (6, 6, 'six', 2, 2), (7, 7, 'seven', 2, 2), (8, 8, 'eight', 2, 2), (0, None, 'zero', 2, 2), (None, None, 'null', 2, 2), (None, 0, 'zero', 2, 2), (1, 4, 'one', 3, -3), (2, 3, 'two', 3, -3), (3, 2, 'three', 3, -3), (4, 1, 'four', 3, -3), (5, 0, 'five', 3, -3), (6, 6, 'six', 3, -3), (7, 7, 'seven', 3, -3), (8, 8, 'eight', 3, -3), (0, None, 'zero', 3, -3), (None, None, 'null', 3, -3), (None, 0, 'zero', 3, -3), (1, 4, 'one', 2, 4), (2, 3, 'two', 2, 4), (3, 2, 'three', 2, 4), (4, 1, 'four', 2, 4), (5, 0, 'five', 2, 4), (6, 6, 'six', 2, 4), (7, 7, 'seven', 2, 4), (8, 8, 'eight', 2, 4), (0, None, 'zero', 2, 4), (None, None, 'null', 2, 4), (None, 0, 'zero', 2, 4), (1, 4, 'one', 5, -5), (2, 3, 'two', 5, -5), (3, 2, 'three', 5, -5), (4, 1, 'four', 5, -5), (5, 0, 'five', 5, -5), (6, 6, 'six', 5, -5), (7, 7, 'seven', 5, -5), (8, 8, 'eight', 5, -5), (0, None, 'zero', 5, -5), (None, None, 'null', 5, -5), (None, 0, 'zero', 5, -5), (1, 4, 'one', 5, -5), (2, 3, 'two', 5, -5), (3, 2, 'three', 5, -5), (4, 1, 'four', 5, -5), (5, 0, 'five', 5, -5), (6, 6, 'six', 5, -5), (7, 7, 'seven', 5, -5), (8, 8, 'eight', 5, -5), (0, None, 'zero', 5, -5), (None, None, 'null', 5, -5), (None, 0, 'zero', 5, -5), (1, 4, 'one', 0, None), (2, 3, 'two', 0, None), (3, 2, 'three', 0, None), (4, 1, 'four', 0, None), (5, 0, 'five', 0, None), (6, 6, 'six', 0, None), (7, 7, 'seven', 0, None), (8, 8, 'eight', 0, None), (0, None, 'zero', 0, None), (None, None, 'null', 0, None), (None, 0, 'zero', 0, None), (1, 4, 'one', None, None), (2, 3, 'two', None, None), (3, 2, 'three', None, None), (4, 1, 'four', None, None), (5, 0, 'five', None, None), (6, 6, 'six', None, None), (7, 7, 'seven', None, None), (8, 8, 'eight', None, None), (0, None, 'zero', None, None), (None, None, 'null', None, None), (None, 0, 'zero', None, None), (1, 4, 'one', None, 0), (2, 3, 'two', None, 0), (3, 2, 'three', None, 0), (4, 1, 'four', None, 0), (5, 0, 'five', None, 0), (6, 6, 'six', None, 0), (7, 7, 'seven', None, 0), (8, 8, 'eight', None, 0), (0, None, 'zero', None, 0), (None, None, 'null', None, 0), (None, 0, 'zero', None, 0)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL CROSS JOIN J2_TBL
--Result--
[(1, 4, 'one', 1, -1), (2, 3, 'two', 1, -1), (3, 2, 'three', 1, -1), (4, 1, 'four', 1, -1), (5, 0, 'five', 1, -1), (6, 6, 'six', 1, -1), (7, 7, 'seven', 1, -1), (8, 8, 'eight', 1, -1), (0, None, 'zero', 1, -1), (None, None, 'null', 1, -1), (None, 0, 'zero', 1, -1), (1, 4, 'one', 2, 2), (2, 3, 'two', 2, 2), (3, 2, 'three', 2, 2), (4, 1, 'four', 2, 2), (5, 0, 'five', 2, 2), (6, 6, 'six', 2, 2), (7, 7, 'seven', 2, 2), (8, 8, 'eight', 2, 2), (0, None, 'zero', 2, 2), (None, None, 'null', 2, 2), (None, 0, 'zero', 2, 2), (1, 4, 'one', 3, -3), (2, 3, 'two', 3, -3), (3, 2, 'three', 3, -3), (4, 1, 'four', 3, -3), (5, 0, 'five', 3, -3), (6, 6, 'six', 3, -3), (7, 7, 'seven', 3, -3), (8, 8, 'eight', 3, -3), (0, None, 'zero', 3, -3), (None, None, 'null', 3, -3), (None, 0, 'zero', 3, -3), (1, 4, 'one', 2, 4), (2, 3, 'two', 2, 4), (3, 2, 'three', 2, 4), (4, 1, 'four', 2, 4), (5, 0, 'five', 2, 4), (6, 6, 'six', 2, 4), (7, 7, 'seven', 2, 4), (8, 8, 'eight', 2, 4), (0, None, 'zero', 2, 4), (None, None, 'null', 2, 4), (None, 0, 'zero', 2, 4), (1, 4, 'one', 5, -5), (2, 3, 'two', 5, -5), (3, 2, 'three', 5, -5), (4, 1, 'four', 5, -5), (5, 0, 'five', 5, -5), (6, 6, 'six', 5, -5), (7, 7, 'seven', 5, -5), (8, 8, 'eight', 5, -5), (0, None, 'zero', 5, -5), (None, None, 'null', 5, -5), (None, 0, 'zero', 5, -5), (1, 4, 'one', 5, -5), (2, 3, 'two', 5, -5), (3, 2, 'three', 5, -5), (4, 1, 'four', 5, -5), (5, 0, 'five', 5, -5), (6, 6, 'six', 5, -5), (7, 7, 'seven', 5, -5), (8, 8, 'eight', 5, -5), (0, None, 'zero', 5, -5), (None, None, 'null', 5, -5), (None, 0, 'zero', 5, -5), (1, 4, 'one', 0, None), (2, 3, 'two', 0, None), (3, 2, 'three', 0, None), (4, 1, 'four', 0, None), (5, 0, 'five', 0, None), (6, 6, 'six', 0, None), (7, 7, 'seven', 0, None), (8, 8, 'eight', 0, None), (0, None, 'zero', 0, None), (None, None, 'null', 0, None), (None, 0, 'zero', 0, None), (1, 4, 'one', None, None), (2, 3, 'two', None, None), (3, 2, 'three', None, None), (4, 1, 'four', None, None), (5, 0, 'five', None, None), (6, 6, 'six', None, None), (7, 7, 'seven', None, None), (8, 8, 'eight', None, None), (0, None, 'zero', None, None), (None, None, 'null', None, None), (None, 0, 'zero', None, None), (1, 4, 'one', None, 0), (2, 3, 'two', None, 0), (3, 2, 'three', None, 0), (4, 1, 'four', None, 0), (5, 0, 'five', None, 0), (6, 6, 'six', None, 0), (7, 7, 'seven', None, 0), (8, 8, 'eight', None, 0), (0, None, 'zero', None, 0), (None, None, 'null', None, 0), (None, 0, 'zero', None, 0)]
+--------------------+
--Query--
SELECT t1.i, k, t   FROM J1_TBL t1 CROSS JOIN J2_TBL t2
--Result--
[(1, -1, 'one'), (2, -1, 'two'), (3, -1, 'three'), (4, -1, 'four'), (5, -1, 'five'), (6, -1, 'six'), (7, -1, 'seven'), (8, -1, 'eight'), (0, -1, 'zero'), (None, -1, 'null'), (None, -1, 'zero'), (1, 2, 'one'), (2, 2, 'two'), (3, 2, 'three'), (4, 2, 'four'), (5, 2, 'five'), (6, 2, 'six'), (7, 2, 'seven'), (8, 2, 'eight'), (0, 2, 'zero'), (None, 2, 'null'), (None, 2, 'zero'), (1, -3, 'one'), (2, -3, 'two'), (3, -3, 'three'), (4, -3, 'four'), (5, -3, 'five'), (6, -3, 'six'), (7, -3, 'seven'), (8, -3, 'eight'), (0, -3, 'zero'), (None, -3, 'null'), (None, -3, 'zero'), (1, 4, 'one'), (2, 4, 'two'), (3, 4, 'three'), (4, 4, 'four'), (5, 4, 'five'), (6, 4, 'six'), (7, 4, 'seven'), (8, 4, 'eight'), (0, 4, 'zero'), (None, 4, 'null'), (None, 4, 'zero'), (1, -5, 'one'), (2, -5, 'two'), (3, -5, 'three'), (4, -5, 'four'), (5, -5, 'five'), (6, -5, 'six'), (7, -5, 'seven'), (8, -5, 'eight'), (0, -5, 'zero'), (None, -5, 'null'), (None, -5, 'zero'), (1, -5, 'one'), (2, -5, 'two'), (3, -5, 'three'), (4, -5, 'four'), (5, -5, 'five'), (6, -5, 'six'), (7, -5, 'seven'), (8, -5, 'eight'), (0, -5, 'zero'), (None, -5, 'null'), (None, -5, 'zero'), (1, None, 'one'), (2, None, 'two'), (3, None, 'three'), (4, None, 'four'), (5, None, 'five'), (6, None, 'six'), (7, None, 'seven'), (8, None, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, None, 'zero'), (1, None, 'one'), (2, None, 'two'), (3, None, 'three'), (4, None, 'four'), (5, None, 'five'), (6, None, 'six'), (7, None, 'seven'), (8, None, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, None, 'zero'), (1, 0, 'one'), (2, 0, 'two'), (3, 0, 'three'), (4, 0, 'four'), (5, 0, 'five'), (6, 0, 'six'), (7, 0, 'seven'), (8, 0, 'eight'), (0, 0, 'zero'), (None, 0, 'null'), (None, 0, 'zero')]
+--------------------+
--Query--
SELECT ii, tt, kk   FROM (J1_TBL CROSS JOIN J2_TBL)     AS tx (ii, jj, tt, ii2, kk)
--Result--
[(1, 'one', -1), (2, 'two', -1), (3, 'three', -1), (4, 'four', -1), (5, 'five', -1), (6, 'six', -1), (7, 'seven', -1), (8, 'eight', -1), (0, 'zero', -1), (None, 'null', -1), (None, 'zero', -1), (1, 'one', 2), (2, 'two', 2), (3, 'three', 2), (4, 'four', 2), (5, 'five', 2), (6, 'six', 2), (7, 'seven', 2), (8, 'eight', 2), (0, 'zero', 2), (None, 'null', 2), (None, 'zero', 2), (1, 'one', -3), (2, 'two', -3), (3, 'three', -3), (4, 'four', -3), (5, 'five', -3), (6, 'six', -3), (7, 'seven', -3), (8, 'eight', -3), (0, 'zero', -3), (None, 'null', -3), (None, 'zero', -3), (1, 'one', 4), (2, 'two', 4), (3, 'three', 4), (4, 'four', 4), (5, 'five', 4), (6, 'six', 4), (7, 'seven', 4), (8, 'eight', 4), (0, 'zero', 4), (None, 'null', 4), (None, 'zero', 4), (1, 'one', -5), (2, 'two', -5), (3, 'three', -5), (4, 'four', -5), (5, 'five', -5), (6, 'six', -5), (7, 'seven', -5), (8, 'eight', -5), (0, 'zero', -5), (None, 'null', -5), (None, 'zero', -5), (1, 'one', -5), (2, 'two', -5), (3, 'three', -5), (4, 'four', -5), (5, 'five', -5), (6, 'six', -5), (7, 'seven', -5), (8, 'eight', -5), (0, 'zero', -5), (None, 'null', -5), (None, 'zero', -5), (1, 'one', None), (2, 'two', None), (3, 'three', None), (4, 'four', None), (5, 'five', None), (6, 'six', None), (7, 'seven', None), (8, 'eight', None), (0, 'zero', None), (None, 'null', None), (None, 'zero', None), (1, 'one', None), (2, 'two', None), (3, 'three', None), (4, 'four', None), (5, 'five', None), (6, 'six', None), (7, 'seven', None), (8, 'eight', None), (0, 'zero', None), (None, 'null', None), (None, 'zero', None), (1, 'one', 0), (2, 'two', 0), (3, 'three', 0), (4, 'four', 0), (5, 'five', 0), (6, 'six', 0), (7, 'seven', 0), (8, 'eight', 0), (0, 'zero', 0), (None, 'null', 0), (None, 'zero', 0)]
+--------------------+
--Query--
SELECT tx.ii, tx.jj, tx.kk   FROM (J1_TBL t1 (a, b, c) CROSS JOIN J2_TBL t2 (d, e))     AS tx (ii, jj, tt, ii2, kk)
--Result--
[(1, 4, -1), (2, 3, -1), (3, 2, -1), (4, 1, -1), (5, 0, -1), (6, 6, -1), (7, 7, -1), (8, 8, -1), (0, None, -1), (None, None, -1), (None, 0, -1), (1, 4, 2), (2, 3, 2), (3, 2, 2), (4, 1, 2), (5, 0, 2), (6, 6, 2), (7, 7, 2), (8, 8, 2), (0, None, 2), (None, None, 2), (None, 0, 2), (1, 4, -3), (2, 3, -3), (3, 2, -3), (4, 1, -3), (5, 0, -3), (6, 6, -3), (7, 7, -3), (8, 8, -3), (0, None, -3), (None, None, -3), (None, 0, -3), (1, 4, 4), (2, 3, 4), (3, 2, 4), (4, 1, 4), (5, 0, 4), (6, 6, 4), (7, 7, 4), (8, 8, 4), (0, None, 4), (None, None, 4), (None, 0, 4), (1, 4, -5), (2, 3, -5), (3, 2, -5), (4, 1, -5), (5, 0, -5), (6, 6, -5), (7, 7, -5), (8, 8, -5), (0, None, -5), (None, None, -5), (None, 0, -5), (1, 4, -5), (2, 3, -5), (3, 2, -5), (4, 1, -5), (5, 0, -5), (6, 6, -5), (7, 7, -5), (8, 8, -5), (0, None, -5), (None, None, -5), (None, 0, -5), (1, 4, None), (2, 3, None), (3, 2, None), (4, 1, None), (5, 0, None), (6, 6, None), (7, 7, None), (8, 8, None), (0, None, None), (None, None, None), (None, 0, None), (1, 4, None), (2, 3, None), (3, 2, None), (4, 1, None), (5, 0, None), (6, 6, None), (7, 7, None), (8, 8, None), (0, None, None), (None, None, None), (None, 0, None), (1, 4, 0), (2, 3, 0), (3, 2, 0), (4, 1, 0), (5, 0, 0), (6, 6, 0), (7, 7, 0), (8, 8, 0), (0, None, 0), (None, None, 0), (None, 0, 0)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL CROSS JOIN J2_TBL a CROSS JOIN J2_TBL b
--Result--
[(1, 4, 'one', 1, -1, 1, -1), (1, 4, 'one', 1, -1, 2, 2), (1, 4, 'one', 1, -1, 3, -3), (1, 4, 'one', 1, -1, 2, 4), (1, 4, 'one', 1, -1, 5, -5), (1, 4, 'one', 1, -1, 5, -5), (1, 4, 'one', 1, -1, 0, None), (1, 4, 'one', 1, -1, None, None), (1, 4, 'one', 1, -1, None, 0), (2, 3, 'two', 1, -1, 1, -1), (2, 3, 'two', 1, -1, 2, 2), (2, 3, 'two', 1, -1, 3, -3), (2, 3, 'two', 1, -1, 2, 4), (2, 3, 'two', 1, -1, 5, -5), (2, 3, 'two', 1, -1, 5, -5), (2, 3, 'two', 1, -1, 0, None), (2, 3, 'two', 1, -1, None, None), (2, 3, 'two', 1, -1, None, 0), (3, 2, 'three', 1, -1, 1, -1), (3, 2, 'three', 1, -1, 2, 2), (3, 2, 'three', 1, -1, 3, -3), (3, 2, 'three', 1, -1, 2, 4), (3, 2, 'three', 1, -1, 5, -5), (3, 2, 'three', 1, -1, 5, -5), (3, 2, 'three', 1, -1, 0, None), (3, 2, 'three', 1, -1, None, None), (3, 2, 'three', 1, -1, None, 0), (4, 1, 'four', 1, -1, 1, -1), (4, 1, 'four', 1, -1, 2, 2), (4, 1, 'four', 1, -1, 3, -3), (4, 1, 'four', 1, -1, 2, 4), (4, 1, 'four', 1, -1, 5, -5), (4, 1, 'four', 1, -1, 5, -5), (4, 1, 'four', 1, -1, 0, None), (4, 1, 'four', 1, -1, None, None), (4, 1, 'four', 1, -1, None, 0), (5, 0, 'five', 1, -1, 1, -1), (5, 0, 'five', 1, -1, 2, 2), (5, 0, 'five', 1, -1, 3, -3), (5, 0, 'five', 1, -1, 2, 4), (5, 0, 'five', 1, -1, 5, -5), (5, 0, 'five', 1, -1, 5, -5), (5, 0, 'five', 1, -1, 0, None), (5, 0, 'five', 1, -1, None, None), (5, 0, 'five', 1, -1, None, 0), (6, 6, 'six', 1, -1, 1, -1), (6, 6, 'six', 1, -1, 2, 2), (6, 6, 'six', 1, -1, 3, -3), (6, 6, 'six', 1, -1, 2, 4), (6, 6, 'six', 1, -1, 5, -5), (6, 6, 'six', 1, -1, 5, -5), (6, 6, 'six', 1, -1, 0, None), (6, 6, 'six', 1, -1, None, None), (6, 6, 'six', 1, -1, None, 0), (7, 7, 'seven', 1, -1, 1, -1), (7, 7, 'seven', 1, -1, 2, 2), (7, 7, 'seven', 1, -1, 3, -3), (7, 7, 'seven', 1, -1, 2, 4), (7, 7, 'seven', 1, -1, 5, -5), (7, 7, 'seven', 1, -1, 5, -5), (7, 7, 'seven', 1, -1, 0, None), (7, 7, 'seven', 1, -1, None, None), (7, 7, 'seven', 1, -1, None, 0), (8, 8, 'eight', 1, -1, 1, -1), (8, 8, 'eight', 1, -1, 2, 2), (8, 8, 'eight', 1, -1, 3, -3), (8, 8, 'eight', 1, -1, 2, 4), (8, 8, 'eight', 1, -1, 5, -5), (8, 8, 'eight', 1, -1, 5, -5), (8, 8, 'eight', 1, -1, 0, None), (8, 8, 'eight', 1, -1, None, None), (8, 8, 'eight', 1, -1, None, 0), (0, None, 'zero', 1, -1, 1, -1), (0, None, 'zero', 1, -1, 2, 2), (0, None, 'zero', 1, -1, 3, -3), (0, None, 'zero', 1, -1, 2, 4), (0, None, 'zero', 1, -1, 5, -5), (0, None, 'zero', 1, -1, 5, -5), (0, None, 'zero', 1, -1, 0, None), (0, None, 'zero', 1, -1, None, None), (0, None, 'zero', 1, -1, None, 0), (None, None, 'null', 1, -1, 1, -1), (None, None, 'null', 1, -1, 2, 2), (None, None, 'null', 1, -1, 3, -3), (None, None, 'null', 1, -1, 2, 4), (None, None, 'null', 1, -1, 5, -5), (None, None, 'null', 1, -1, 5, -5), (None, None, 'null', 1, -1, 0, None), (None, None, 'null', 1, -1, None, None), (None, None, 'null', 1, -1, None, 0), (None, 0, 'zero', 1, -1, 1, -1), (None, 0, 'zero', 1, -1, 2, 2), (None, 0, 'zero', 1, -1, 3, -3), (None, 0, 'zero', 1, -1, 2, 4), (None, 0, 'zero', 1, -1, 5, -5), (None, 0, 'zero', 1, -1, 5, -5), (None, 0, 'zero', 1, -1, 0, None), (None, 0, 'zero', 1, -1, None, None), (None, 0, 'zero', 1, -1, None, 0), (1, 4, 'one', 2, 2, 1, -1), (1, 4, 'one', 2, 2, 2, 2), (1, 4, 'one', 2, 2, 3, -3), (1, 4, 'one', 2, 2, 2, 4), (1, 4, 'one', 2, 2, 5, -5), (1, 4, 'one', 2, 2, 5, -5), (1, 4, 'one', 2, 2, 0, None), (1, 4, 'one', 2, 2, None, None), (1, 4, 'one', 2, 2, None, 0), (2, 3, 'two', 2, 2, 1, -1), (2, 3, 'two', 2, 2, 2, 2), (2, 3, 'two', 2, 2, 3, -3), (2, 3, 'two', 2, 2, 2, 4), (2, 3, 'two', 2, 2, 5, -5), (2, 3, 'two', 2, 2, 5, -5), (2, 3, 'two', 2, 2, 0, None), (2, 3, 'two', 2, 2, None, None), (2, 3, 'two', 2, 2, None, 0), (3, 2, 'three', 2, 2, 1, -1), (3, 2, 'three', 2, 2, 2, 2), (3, 2, 'three', 2, 2, 3, -3), (3, 2, 'three', 2, 2, 2, 4), (3, 2, 'three', 2, 2, 5, -5), (3, 2, 'three', 2, 2, 5, -5), (3, 2, 'three', 2, 2, 0, None), (3, 2, 'three', 2, 2, None, None), (3, 2, 'three', 2, 2, None, 0), (4, 1, 'four', 2, 2, 1, -1), (4, 1, 'four', 2, 2, 2, 2), (4, 1, 'four', 2, 2, 3, -3), (4, 1, 'four', 2, 2, 2, 4), (4, 1, 'four', 2, 2, 5, -5), (4, 1, 'four', 2, 2, 5, -5), (4, 1, 'four', 2, 2, 0, None), (4, 1, 'four', 2, 2, None, None), (4, 1, 'four', 2, 2, None, 0), (5, 0, 'five', 2, 2, 1, -1), (5, 0, 'five', 2, 2, 2, 2), (5, 0, 'five', 2, 2, 3, -3), (5, 0, 'five', 2, 2, 2, 4), (5, 0, 'five', 2, 2, 5, -5), (5, 0, 'five', 2, 2, 5, -5), (5, 0, 'five', 2, 2, 0, None), (5, 0, 'five', 2, 2, None, None), (5, 0, 'five', 2, 2, None, 0), (6, 6, 'six', 2, 2, 1, -1), (6, 6, 'six', 2, 2, 2, 2), (6, 6, 'six', 2, 2, 3, -3), (6, 6, 'six', 2, 2, 2, 4), (6, 6, 'six', 2, 2, 5, -5), (6, 6, 'six', 2, 2, 5, -5), (6, 6, 'six', 2, 2, 0, None), (6, 6, 'six', 2, 2, None, None), (6, 6, 'six', 2, 2, None, 0), (7, 7, 'seven', 2, 2, 1, -1), (7, 7, 'seven', 2, 2, 2, 2), (7, 7, 'seven', 2, 2, 3, -3), (7, 7, 'seven', 2, 2, 2, 4), (7, 7, 'seven', 2, 2, 5, -5), (7, 7, 'seven', 2, 2, 5, -5), (7, 7, 'seven', 2, 2, 0, None), (7, 7, 'seven', 2, 2, None, None), (7, 7, 'seven', 2, 2, None, 0), (8, 8, 'eight', 2, 2, 1, -1), (8, 8, 'eight', 2, 2, 2, 2), (8, 8, 'eight', 2, 2, 3, -3), (8, 8, 'eight', 2, 2, 2, 4), (8, 8, 'eight', 2, 2, 5, -5), (8, 8, 'eight', 2, 2, 5, -5), (8, 8, 'eight', 2, 2, 0, None), (8, 8, 'eight', 2, 2, None, None), (8, 8, 'eight', 2, 2, None, 0), (0, None, 'zero', 2, 2, 1, -1), (0, None, 'zero', 2, 2, 2, 2), (0, None, 'zero', 2, 2, 3, -3), (0, None, 'zero', 2, 2, 2, 4), (0, None, 'zero', 2, 2, 5, -5), (0, None, 'zero', 2, 2, 5, -5), (0, None, 'zero', 2, 2, 0, None), (0, None, 'zero', 2, 2, None, None), (0, None, 'zero', 2, 2, None, 0), (None, None, 'null', 2, 2, 1, -1), (None, None, 'null', 2, 2, 2, 2), (None, None, 'null', 2, 2, 3, -3), (None, None, 'null', 2, 2, 2, 4), (None, None, 'null', 2, 2, 5, -5), (None, None, 'null', 2, 2, 5, -5), (None, None, 'null', 2, 2, 0, None), (None, None, 'null', 2, 2, None, None), (None, None, 'null', 2, 2, None, 0), (None, 0, 'zero', 2, 2, 1, -1), (None, 0, 'zero', 2, 2, 2, 2), (None, 0, 'zero', 2, 2, 3, -3), (None, 0, 'zero', 2, 2, 2, 4), (None, 0, 'zero', 2, 2, 5, -5), (None, 0, 'zero', 2, 2, 5, -5), (None, 0, 'zero', 2, 2, 0, None), (None, 0, 'zero', 2, 2, None, None), (None, 0, 'zero', 2, 2, None, 0), (1, 4, 'one', 3, -3, 1, -1), (1, 4, 'one', 3, -3, 2, 2), (1, 4, 'one', 3, -3, 3, -3), (1, 4, 'one', 3, -3, 2, 4), (1, 4, 'one', 3, -3, 5, -5), (1, 4, 'one', 3, -3, 5, -5), (1, 4, 'one', 3, -3, 0, None), (1, 4, 'one', 3, -3, None, None), (1, 4, 'one', 3, -3, None, 0), (2, 3, 'two', 3, -3, 1, -1), (2, 3, 'two', 3, -3, 2, 2), (2, 3, 'two', 3, -3, 3, -3), (2, 3, 'two', 3, -3, 2, 4), (2, 3, 'two', 3, -3, 5, -5), (2, 3, 'two', 3, -3, 5, -5), (2, 3, 'two', 3, -3, 0, None), (2, 3, 'two', 3, -3, None, None), (2, 3, 'two', 3, -3, None, 0), (3, 2, 'three', 3, -3, 1, -1), (3, 2, 'three', 3, -3, 2, 2), (3, 2, 'three', 3, -3, 3, -3), (3, 2, 'three', 3, -3, 2, 4), (3, 2, 'three', 3, -3, 5, -5), (3, 2, 'three', 3, -3, 5, -5), (3, 2, 'three', 3, -3, 0, None), (3, 2, 'three', 3, -3, None, None), (3, 2, 'three', 3, -3, None, 0), (4, 1, 'four', 3, -3, 1, -1), (4, 1, 'four', 3, -3, 2, 2), (4, 1, 'four', 3, -3, 3, -3), (4, 1, 'four', 3, -3, 2, 4), (4, 1, 'four', 3, -3, 5, -5), (4, 1, 'four', 3, -3, 5, -5), (4, 1, 'four', 3, -3, 0, None), (4, 1, 'four', 3, -3, None, None), (4, 1, 'four', 3, -3, None, 0), (5, 0, 'five', 3, -3, 1, -1), (5, 0, 'five', 3, -3, 2, 2), (5, 0, 'five', 3, -3, 3, -3), (5, 0, 'five', 3, -3, 2, 4), (5, 0, 'five', 3, -3, 5, -5), (5, 0, 'five', 3, -3, 5, -5), (5, 0, 'five', 3, -3, 0, None), (5, 0, 'five', 3, -3, None, None), (5, 0, 'five', 3, -3, None, 0), (6, 6, 'six', 3, -3, 1, -1), (6, 6, 'six', 3, -3, 2, 2), (6, 6, 'six', 3, -3, 3, -3), (6, 6, 'six', 3, -3, 2, 4), (6, 6, 'six', 3, -3, 5, -5), (6, 6, 'six', 3, -3, 5, -5), (6, 6, 'six', 3, -3, 0, None), (6, 6, 'six', 3, -3, None, None), (6, 6, 'six', 3, -3, None, 0), (7, 7, 'seven', 3, -3, 1, -1), (7, 7, 'seven', 3, -3, 2, 2), (7, 7, 'seven', 3, -3, 3, -3), (7, 7, 'seven', 3, -3, 2, 4), (7, 7, 'seven', 3, -3, 5, -5), (7, 7, 'seven', 3, -3, 5, -5), (7, 7, 'seven', 3, -3, 0, None), (7, 7, 'seven', 3, -3, None, None), (7, 7, 'seven', 3, -3, None, 0), (8, 8, 'eight', 3, -3, 1, -1), (8, 8, 'eight', 3, -3, 2, 2), (8, 8, 'eight', 3, -3, 3, -3), (8, 8, 'eight', 3, -3, 2, 4), (8, 8, 'eight', 3, -3, 5, -5), (8, 8, 'eight', 3, -3, 5, -5), (8, 8, 'eight', 3, -3, 0, None), (8, 8, 'eight', 3, -3, None, None), (8, 8, 'eight', 3, -3, None, 0), (0, None, 'zero', 3, -3, 1, -1), (0, None, 'zero', 3, -3, 2, 2), (0, None, 'zero', 3, -3, 3, -3), (0, None, 'zero', 3, -3, 2, 4), (0, None, 'zero', 3, -3, 5, -5), (0, None, 'zero', 3, -3, 5, -5), (0, None, 'zero', 3, -3, 0, None), (0, None, 'zero', 3, -3, None, None), (0, None, 'zero', 3, -3, None, 0), (None, None, 'null', 3, -3, 1, -1), (None, None, 'null', 3, -3, 2, 2), (None, None, 'null', 3, -3, 3, -3), (None, None, 'null', 3, -3, 2, 4), (None, None, 'null', 3, -3, 5, -5), (None, None, 'null', 3, -3, 5, -5), (None, None, 'null', 3, -3, 0, None), (None, None, 'null', 3, -3, None, None), (None, None, 'null', 3, -3, None, 0), (None, 0, 'zero', 3, -3, 1, -1), (None, 0, 'zero', 3, -3, 2, 2), (None, 0, 'zero', 3, -3, 3, -3), (None, 0, 'zero', 3, -3, 2, 4), (None, 0, 'zero', 3, -3, 5, -5), (None, 0, 'zero', 3, -3, 5, -5), (None, 0, 'zero', 3, -3, 0, None), (None, 0, 'zero', 3, -3, None, None), (None, 0, 'zero', 3, -3, None, 0), (1, 4, 'one', 2, 4, 1, -1), (1, 4, 'one', 2, 4, 2, 2), (1, 4, 'one', 2, 4, 3, -3), (1, 4, 'one', 2, 4, 2, 4), (1, 4, 'one', 2, 4, 5, -5), (1, 4, 'one', 2, 4, 5, -5), (1, 4, 'one', 2, 4, 0, None), (1, 4, 'one', 2, 4, None, None), (1, 4, 'one', 2, 4, None, 0), (2, 3, 'two', 2, 4, 1, -1), (2, 3, 'two', 2, 4, 2, 2), (2, 3, 'two', 2, 4, 3, -3), (2, 3, 'two', 2, 4, 2, 4), (2, 3, 'two', 2, 4, 5, -5), (2, 3, 'two', 2, 4, 5, -5), (2, 3, 'two', 2, 4, 0, None), (2, 3, 'two', 2, 4, None, None), (2, 3, 'two', 2, 4, None, 0), (3, 2, 'three', 2, 4, 1, -1), (3, 2, 'three', 2, 4, 2, 2), (3, 2, 'three', 2, 4, 3, -3), (3, 2, 'three', 2, 4, 2, 4), (3, 2, 'three', 2, 4, 5, -5), (3, 2, 'three', 2, 4, 5, -5), (3, 2, 'three', 2, 4, 0, None), (3, 2, 'three', 2, 4, None, None), (3, 2, 'three', 2, 4, None, 0), (4, 1, 'four', 2, 4, 1, -1), (4, 1, 'four', 2, 4, 2, 2), (4, 1, 'four', 2, 4, 3, -3), (4, 1, 'four', 2, 4, 2, 4), (4, 1, 'four', 2, 4, 5, -5), (4, 1, 'four', 2, 4, 5, -5), (4, 1, 'four', 2, 4, 0, None), (4, 1, 'four', 2, 4, None, None), (4, 1, 'four', 2, 4, None, 0), (5, 0, 'five', 2, 4, 1, -1), (5, 0, 'five', 2, 4, 2, 2), (5, 0, 'five', 2, 4, 3, -3), (5, 0, 'five', 2, 4, 2, 4), (5, 0, 'five', 2, 4, 5, -5), (5, 0, 'five', 2, 4, 5, -5), (5, 0, 'five', 2, 4, 0, None), (5, 0, 'five', 2, 4, None, None), (5, 0, 'five', 2, 4, None, 0), (6, 6, 'six', 2, 4, 1, -1), (6, 6, 'six', 2, 4, 2, 2), (6, 6, 'six', 2, 4, 3, -3), (6, 6, 'six', 2, 4, 2, 4), (6, 6, 'six', 2, 4, 5, -5), (6, 6, 'six', 2, 4, 5, -5), (6, 6, 'six', 2, 4, 0, None), (6, 6, 'six', 2, 4, None, None), (6, 6, 'six', 2, 4, None, 0), (7, 7, 'seven', 2, 4, 1, -1), (7, 7, 'seven', 2, 4, 2, 2), (7, 7, 'seven', 2, 4, 3, -3), (7, 7, 'seven', 2, 4, 2, 4), (7, 7, 'seven', 2, 4, 5, -5), (7, 7, 'seven', 2, 4, 5, -5), (7, 7, 'seven', 2, 4, 0, None), (7, 7, 'seven', 2, 4, None, None), (7, 7, 'seven', 2, 4, None, 0), (8, 8, 'eight', 2, 4, 1, -1), (8, 8, 'eight', 2, 4, 2, 2), (8, 8, 'eight', 2, 4, 3, -3), (8, 8, 'eight', 2, 4, 2, 4), (8, 8, 'eight', 2, 4, 5, -5), (8, 8, 'eight', 2, 4, 5, -5), (8, 8, 'eight', 2, 4, 0, None), (8, 8, 'eight', 2, 4, None, None), (8, 8, 'eight', 2, 4, None, 0), (0, None, 'zero', 2, 4, 1, -1), (0, None, 'zero', 2, 4, 2, 2), (0, None, 'zero', 2, 4, 3, -3), (0, None, 'zero', 2, 4, 2, 4), (0, None, 'zero', 2, 4, 5, -5), (0, None, 'zero', 2, 4, 5, -5), (0, None, 'zero', 2, 4, 0, None), (0, None, 'zero', 2, 4, None, None), (0, None, 'zero', 2, 4, None, 0), (None, None, 'null', 2, 4, 1, -1), (None, None, 'null', 2, 4, 2, 2), (None, None, 'null', 2, 4, 3, -3), (None, None, 'null', 2, 4, 2, 4), (None, None, 'null', 2, 4, 5, -5), (None, None, 'null', 2, 4, 5, -5), (None, None, 'null', 2, 4, 0, None), (None, None, 'null', 2, 4, None, None), (None, None, 'null', 2, 4, None, 0), (None, 0, 'zero', 2, 4, 1, -1), (None, 0, 'zero', 2, 4, 2, 2), (None, 0, 'zero', 2, 4, 3, -3), (None, 0, 'zero', 2, 4, 2, 4), (None, 0, 'zero', 2, 4, 5, -5), (None, 0, 'zero', 2, 4, 5, -5), (None, 0, 'zero', 2, 4, 0, None), (None, 0, 'zero', 2, 4, None, None), (None, 0, 'zero', 2, 4, None, 0), (1, 4, 'one', 5, -5, 1, -1), (1, 4, 'one', 5, -5, 2, 2), (1, 4, 'one', 5, -5, 3, -3), (1, 4, 'one', 5, -5, 2, 4), (1, 4, 'one', 5, -5, 5, -5), (1, 4, 'one', 5, -5, 5, -5), (1, 4, 'one', 5, -5, 0, None), (1, 4, 'one', 5, -5, None, None), (1, 4, 'one', 5, -5, None, 0), (2, 3, 'two', 5, -5, 1, -1), (2, 3, 'two', 5, -5, 2, 2), (2, 3, 'two', 5, -5, 3, -3), (2, 3, 'two', 5, -5, 2, 4), (2, 3, 'two', 5, -5, 5, -5), (2, 3, 'two', 5, -5, 5, -5), (2, 3, 'two', 5, -5, 0, None), (2, 3, 'two', 5, -5, None, None), (2, 3, 'two', 5, -5, None, 0), (3, 2, 'three', 5, -5, 1, -1), (3, 2, 'three', 5, -5, 2, 2), (3, 2, 'three', 5, -5, 3, -3), (3, 2, 'three', 5, -5, 2, 4), (3, 2, 'three', 5, -5, 5, -5), (3, 2, 'three', 5, -5, 5, -5), (3, 2, 'three', 5, -5, 0, None), (3, 2, 'three', 5, -5, None, None), (3, 2, 'three', 5, -5, None, 0), (4, 1, 'four', 5, -5, 1, -1), (4, 1, 'four', 5, -5, 2, 2), (4, 1, 'four', 5, -5, 3, -3), (4, 1, 'four', 5, -5, 2, 4), (4, 1, 'four', 5, -5, 5, -5), (4, 1, 'four', 5, -5, 5, -5), (4, 1, 'four', 5, -5, 0, None), (4, 1, 'four', 5, -5, None, None), (4, 1, 'four', 5, -5, None, 0), (5, 0, 'five', 5, -5, 1, -1), (5, 0, 'five', 5, -5, 2, 2), (5, 0, 'five', 5, -5, 3, -3), (5, 0, 'five', 5, -5, 2, 4), (5, 0, 'five', 5, -5, 5, -5), (5, 0, 'five', 5, -5, 5, -5), (5, 0, 'five', 5, -5, 0, None), (5, 0, 'five', 5, -5, None, None), (5, 0, 'five', 5, -5, None, 0), (6, 6, 'six', 5, -5, 1, -1), (6, 6, 'six', 5, -5, 2, 2), (6, 6, 'six', 5, -5, 3, -3), (6, 6, 'six', 5, -5, 2, 4), (6, 6, 'six', 5, -5, 5, -5), (6, 6, 'six', 5, -5, 5, -5), (6, 6, 'six', 5, -5, 0, None), (6, 6, 'six', 5, -5, None, None), (6, 6, 'six', 5, -5, None, 0), (7, 7, 'seven', 5, -5, 1, -1), (7, 7, 'seven', 5, -5, 2, 2), (7, 7, 'seven', 5, -5, 3, -3), (7, 7, 'seven', 5, -5, 2, 4), (7, 7, 'seven', 5, -5, 5, -5), (7, 7, 'seven', 5, -5, 5, -5), (7, 7, 'seven', 5, -5, 0, None), (7, 7, 'seven', 5, -5, None, None), (7, 7, 'seven', 5, -5, None, 0), (8, 8, 'eight', 5, -5, 1, -1), (8, 8, 'eight', 5, -5, 2, 2), (8, 8, 'eight', 5, -5, 3, -3), (8, 8, 'eight', 5, -5, 2, 4), (8, 8, 'eight', 5, -5, 5, -5), (8, 8, 'eight', 5, -5, 5, -5), (8, 8, 'eight', 5, -5, 0, None), (8, 8, 'eight', 5, -5, None, None), (8, 8, 'eight', 5, -5, None, 0), (0, None, 'zero', 5, -5, 1, -1), (0, None, 'zero', 5, -5, 2, 2), (0, None, 'zero', 5, -5, 3, -3), (0, None, 'zero', 5, -5, 2, 4), (0, None, 'zero', 5, -5, 5, -5), (0, None, 'zero', 5, -5, 5, -5), (0, None, 'zero', 5, -5, 0, None), (0, None, 'zero', 5, -5, None, None), (0, None, 'zero', 5, -5, None, 0), (None, None, 'null', 5, -5, 1, -1), (None, None, 'null', 5, -5, 2, 2), (None, None, 'null', 5, -5, 3, -3), (None, None, 'null', 5, -5, 2, 4), (None, None, 'null', 5, -5, 5, -5), (None, None, 'null', 5, -5, 5, -5), (None, None, 'null', 5, -5, 0, None), (None, None, 'null', 5, -5, None, None), (None, None, 'null', 5, -5, None, 0), (None, 0, 'zero', 5, -5, 1, -1), (None, 0, 'zero', 5, -5, 2, 2), (None, 0, 'zero', 5, -5, 3, -3), (None, 0, 'zero', 5, -5, 2, 4), (None, 0, 'zero', 5, -5, 5, -5), (None, 0, 'zero', 5, -5, 5, -5), (None, 0, 'zero', 5, -5, 0, None), (None, 0, 'zero', 5, -5, None, None), (None, 0, 'zero', 5, -5, None, 0), (1, 4, 'one', 5, -5, 1, -1), (1, 4, 'one', 5, -5, 2, 2), (1, 4, 'one', 5, -5, 3, -3), (1, 4, 'one', 5, -5, 2, 4), (1, 4, 'one', 5, -5, 5, -5), (1, 4, 'one', 5, -5, 5, -5), (1, 4, 'one', 5, -5, 0, None), (1, 4, 'one', 5, -5, None, None), (1, 4, 'one', 5, -5, None, 0), (2, 3, 'two', 5, -5, 1, -1), (2, 3, 'two', 5, -5, 2, 2), (2, 3, 'two', 5, -5, 3, -3), (2, 3, 'two', 5, -5, 2, 4), (2, 3, 'two', 5, -5, 5, -5), (2, 3, 'two', 5, -5, 5, -5), (2, 3, 'two', 5, -5, 0, None), (2, 3, 'two', 5, -5, None, None), (2, 3, 'two', 5, -5, None, 0), (3, 2, 'three', 5, -5, 1, -1), (3, 2, 'three', 5, -5, 2, 2), (3, 2, 'three', 5, -5, 3, -3), (3, 2, 'three', 5, -5, 2, 4), (3, 2, 'three', 5, -5, 5, -5), (3, 2, 'three', 5, -5, 5, -5), (3, 2, 'three', 5, -5, 0, None), (3, 2, 'three', 5, -5, None, None), (3, 2, 'three', 5, -5, None, 0), (4, 1, 'four', 5, -5, 1, -1), (4, 1, 'four', 5, -5, 2, 2), (4, 1, 'four', 5, -5, 3, -3), (4, 1, 'four', 5, -5, 2, 4), (4, 1, 'four', 5, -5, 5, -5), (4, 1, 'four', 5, -5, 5, -5), (4, 1, 'four', 5, -5, 0, None), (4, 1, 'four', 5, -5, None, None), (4, 1, 'four', 5, -5, None, 0), (5, 0, 'five', 5, -5, 1, -1), (5, 0, 'five', 5, -5, 2, 2), (5, 0, 'five', 5, -5, 3, -3), (5, 0, 'five', 5, -5, 2, 4), (5, 0, 'five', 5, -5, 5, -5), (5, 0, 'five', 5, -5, 5, -5), (5, 0, 'five', 5, -5, 0, None), (5, 0, 'five', 5, -5, None, None), (5, 0, 'five', 5, -5, None, 0), (6, 6, 'six', 5, -5, 1, -1), (6, 6, 'six', 5, -5, 2, 2), (6, 6, 'six', 5, -5, 3, -3), (6, 6, 'six', 5, -5, 2, 4), (6, 6, 'six', 5, -5, 5, -5), (6, 6, 'six', 5, -5, 5, -5), (6, 6, 'six', 5, -5, 0, None), (6, 6, 'six', 5, -5, None, None), (6, 6, 'six', 5, -5, None, 0), (7, 7, 'seven', 5, -5, 1, -1), (7, 7, 'seven', 5, -5, 2, 2), (7, 7, 'seven', 5, -5, 3, -3), (7, 7, 'seven', 5, -5, 2, 4), (7, 7, 'seven', 5, -5, 5, -5), (7, 7, 'seven', 5, -5, 5, -5), (7, 7, 'seven', 5, -5, 0, None), (7, 7, 'seven', 5, -5, None, None), (7, 7, 'seven', 5, -5, None, 0), (8, 8, 'eight', 5, -5, 1, -1), (8, 8, 'eight', 5, -5, 2, 2), (8, 8, 'eight', 5, -5, 3, -3), (8, 8, 'eight', 5, -5, 2, 4), (8, 8, 'eight', 5, -5, 5, -5), (8, 8, 'eight', 5, -5, 5, -5), (8, 8, 'eight', 5, -5, 0, None), (8, 8, 'eight', 5, -5, None, None), (8, 8, 'eight', 5, -5, None, 0), (0, None, 'zero', 5, -5, 1, -1), (0, None, 'zero', 5, -5, 2, 2), (0, None, 'zero', 5, -5, 3, -3), (0, None, 'zero', 5, -5, 2, 4), (0, None, 'zero', 5, -5, 5, -5), (0, None, 'zero', 5, -5, 5, -5), (0, None, 'zero', 5, -5, 0, None), (0, None, 'zero', 5, -5, None, None), (0, None, 'zero', 5, -5, None, 0), (None, None, 'null', 5, -5, 1, -1), (None, None, 'null', 5, -5, 2, 2), (None, None, 'null', 5, -5, 3, -3), (None, None, 'null', 5, -5, 2, 4), (None, None, 'null', 5, -5, 5, -5), (None, None, 'null', 5, -5, 5, -5), (None, None, 'null', 5, -5, 0, None), (None, None, 'null', 5, -5, None, None), (None, None, 'null', 5, -5, None, 0), (None, 0, 'zero', 5, -5, 1, -1), (None, 0, 'zero', 5, -5, 2, 2), (None, 0, 'zero', 5, -5, 3, -3), (None, 0, 'zero', 5, -5, 2, 4), (None, 0, 'zero', 5, -5, 5, -5), (None, 0, 'zero', 5, -5, 5, -5), (None, 0, 'zero', 5, -5, 0, None), (None, 0, 'zero', 5, -5, None, None), (None, 0, 'zero', 5, -5, None, 0), (1, 4, 'one', 0, None, 1, -1), (1, 4, 'one', 0, None, 2, 2), (1, 4, 'one', 0, None, 3, -3), (1, 4, 'one', 0, None, 2, 4), (1, 4, 'one', 0, None, 5, -5), (1, 4, 'one', 0, None, 5, -5), (1, 4, 'one', 0, None, 0, None), (1, 4, 'one', 0, None, None, None), (1, 4, 'one', 0, None, None, 0), (2, 3, 'two', 0, None, 1, -1), (2, 3, 'two', 0, None, 2, 2), (2, 3, 'two', 0, None, 3, -3), (2, 3, 'two', 0, None, 2, 4), (2, 3, 'two', 0, None, 5, -5), (2, 3, 'two', 0, None, 5, -5), (2, 3, 'two', 0, None, 0, None), (2, 3, 'two', 0, None, None, None), (2, 3, 'two', 0, None, None, 0), (3, 2, 'three', 0, None, 1, -1), (3, 2, 'three', 0, None, 2, 2), (3, 2, 'three', 0, None, 3, -3), (3, 2, 'three', 0, None, 2, 4), (3, 2, 'three', 0, None, 5, -5), (3, 2, 'three', 0, None, 5, -5), (3, 2, 'three', 0, None, 0, None), (3, 2, 'three', 0, None, None, None), (3, 2, 'three', 0, None, None, 0), (4, 1, 'four', 0, None, 1, -1), (4, 1, 'four', 0, None, 2, 2), (4, 1, 'four', 0, None, 3, -3), (4, 1, 'four', 0, None, 2, 4), (4, 1, 'four', 0, None, 5, -5), (4, 1, 'four', 0, None, 5, -5), (4, 1, 'four', 0, None, 0, None), (4, 1, 'four', 0, None, None, None), (4, 1, 'four', 0, None, None, 0), (5, 0, 'five', 0, None, 1, -1), (5, 0, 'five', 0, None, 2, 2), (5, 0, 'five', 0, None, 3, -3), (5, 0, 'five', 0, None, 2, 4), (5, 0, 'five', 0, None, 5, -5), (5, 0, 'five', 0, None, 5, -5), (5, 0, 'five', 0, None, 0, None), (5, 0, 'five', 0, None, None, None), (5, 0, 'five', 0, None, None, 0), (6, 6, 'six', 0, None, 1, -1), (6, 6, 'six', 0, None, 2, 2), (6, 6, 'six', 0, None, 3, -3), (6, 6, 'six', 0, None, 2, 4), (6, 6, 'six', 0, None, 5, -5), (6, 6, 'six', 0, None, 5, -5), (6, 6, 'six', 0, None, 0, None), (6, 6, 'six', 0, None, None, None), (6, 6, 'six', 0, None, None, 0), (7, 7, 'seven', 0, None, 1, -1), (7, 7, 'seven', 0, None, 2, 2), (7, 7, 'seven', 0, None, 3, -3), (7, 7, 'seven', 0, None, 2, 4), (7, 7, 'seven', 0, None, 5, -5), (7, 7, 'seven', 0, None, 5, -5), (7, 7, 'seven', 0, None, 0, None), (7, 7, 'seven', 0, None, None, None), (7, 7, 'seven', 0, None, None, 0), (8, 8, 'eight', 0, None, 1, -1), (8, 8, 'eight', 0, None, 2, 2), (8, 8, 'eight', 0, None, 3, -3), (8, 8, 'eight', 0, None, 2, 4), (8, 8, 'eight', 0, None, 5, -5), (8, 8, 'eight', 0, None, 5, -5), (8, 8, 'eight', 0, None, 0, None), (8, 8, 'eight', 0, None, None, None), (8, 8, 'eight', 0, None, None, 0), (0, None, 'zero', 0, None, 1, -1), (0, None, 'zero', 0, None, 2, 2), (0, None, 'zero', 0, None, 3, -3), (0, None, 'zero', 0, None, 2, 4), (0, None, 'zero', 0, None, 5, -5), (0, None, 'zero', 0, None, 5, -5), (0, None, 'zero', 0, None, 0, None), (0, None, 'zero', 0, None, None, None), (0, None, 'zero', 0, None, None, 0), (None, None, 'null', 0, None, 1, -1), (None, None, 'null', 0, None, 2, 2), (None, None, 'null', 0, None, 3, -3), (None, None, 'null', 0, None, 2, 4), (None, None, 'null', 0, None, 5, -5), (None, None, 'null', 0, None, 5, -5), (None, None, 'null', 0, None, 0, None), (None, None, 'null', 0, None, None, None), (None, None, 'null', 0, None, None, 0), (None, 0, 'zero', 0, None, 1, -1), (None, 0, 'zero', 0, None, 2, 2), (None, 0, 'zero', 0, None, 3, -3), (None, 0, 'zero', 0, None, 2, 4), (None, 0, 'zero', 0, None, 5, -5), (None, 0, 'zero', 0, None, 5, -5), (None, 0, 'zero', 0, None, 0, None), (None, 0, 'zero', 0, None, None, None), (None, 0, 'zero', 0, None, None, 0), (1, 4, 'one', None, None, 1, -1), (1, 4, 'one', None, None, 2, 2), (1, 4, 'one', None, None, 3, -3), (1, 4, 'one', None, None, 2, 4), (1, 4, 'one', None, None, 5, -5), (1, 4, 'one', None, None, 5, -5), (1, 4, 'one', None, None, 0, None), (1, 4, 'one', None, None, None, None), (1, 4, 'one', None, None, None, 0), (2, 3, 'two', None, None, 1, -1), (2, 3, 'two', None, None, 2, 2), (2, 3, 'two', None, None, 3, -3), (2, 3, 'two', None, None, 2, 4), (2, 3, 'two', None, None, 5, -5), (2, 3, 'two', None, None, 5, -5), (2, 3, 'two', None, None, 0, None), (2, 3, 'two', None, None, None, None), (2, 3, 'two', None, None, None, 0), (3, 2, 'three', None, None, 1, -1), (3, 2, 'three', None, None, 2, 2), (3, 2, 'three', None, None, 3, -3), (3, 2, 'three', None, None, 2, 4), (3, 2, 'three', None, None, 5, -5), (3, 2, 'three', None, None, 5, -5), (3, 2, 'three', None, None, 0, None), (3, 2, 'three', None, None, None, None), (3, 2, 'three', None, None, None, 0), (4, 1, 'four', None, None, 1, -1), (4, 1, 'four', None, None, 2, 2), (4, 1, 'four', None, None, 3, -3), (4, 1, 'four', None, None, 2, 4), (4, 1, 'four', None, None, 5, -5), (4, 1, 'four', None, None, 5, -5), (4, 1, 'four', None, None, 0, None), (4, 1, 'four', None, None, None, None), (4, 1, 'four', None, None, None, 0), (5, 0, 'five', None, None, 1, -1), (5, 0, 'five', None, None, 2, 2), (5, 0, 'five', None, None, 3, -3), (5, 0, 'five', None, None, 2, 4), (5, 0, 'five', None, None, 5, -5), (5, 0, 'five', None, None, 5, -5), (5, 0, 'five', None, None, 0, None), (5, 0, 'five', None, None, None, None), (5, 0, 'five', None, None, None, 0), (6, 6, 'six', None, None, 1, -1), (6, 6, 'six', None, None, 2, 2), (6, 6, 'six', None, None, 3, -3), (6, 6, 'six', None, None, 2, 4), (6, 6, 'six', None, None, 5, -5), (6, 6, 'six', None, None, 5, -5), (6, 6, 'six', None, None, 0, None), (6, 6, 'six', None, None, None, None), (6, 6, 'six', None, None, None, 0), (7, 7, 'seven', None, None, 1, -1), (7, 7, 'seven', None, None, 2, 2), (7, 7, 'seven', None, None, 3, -3), (7, 7, 'seven', None, None, 2, 4), (7, 7, 'seven', None, None, 5, -5), (7, 7, 'seven', None, None, 5, -5), (7, 7, 'seven', None, None, 0, None), (7, 7, 'seven', None, None, None, None), (7, 7, 'seven', None, None, None, 0), (8, 8, 'eight', None, None, 1, -1), (8, 8, 'eight', None, None, 2, 2), (8, 8, 'eight', None, None, 3, -3), (8, 8, 'eight', None, None, 2, 4), (8, 8, 'eight', None, None, 5, -5), (8, 8, 'eight', None, None, 5, -5), (8, 8, 'eight', None, None, 0, None), (8, 8, 'eight', None, None, None, None), (8, 8, 'eight', None, None, None, 0), (0, None, 'zero', None, None, 1, -1), (0, None, 'zero', None, None, 2, 2), (0, None, 'zero', None, None, 3, -3), (0, None, 'zero', None, None, 2, 4), (0, None, 'zero', None, None, 5, -5), (0, None, 'zero', None, None, 5, -5), (0, None, 'zero', None, None, 0, None), (0, None, 'zero', None, None, None, None), (0, None, 'zero', None, None, None, 0), (None, None, 'null', None, None, 1, -1), (None, None, 'null', None, None, 2, 2), (None, None, 'null', None, None, 3, -3), (None, None, 'null', None, None, 2, 4), (None, None, 'null', None, None, 5, -5), (None, None, 'null', None, None, 5, -5), (None, None, 'null', None, None, 0, None), (None, None, 'null', None, None, None, None), (None, None, 'null', None, None, None, 0), (None, 0, 'zero', None, None, 1, -1), (None, 0, 'zero', None, None, 2, 2), (None, 0, 'zero', None, None, 3, -3), (None, 0, 'zero', None, None, 2, 4), (None, 0, 'zero', None, None, 5, -5), (None, 0, 'zero', None, None, 5, -5), (None, 0, 'zero', None, None, 0, None), (None, 0, 'zero', None, None, None, None), (None, 0, 'zero', None, None, None, 0), (1, 4, 'one', None, 0, 1, -1), (1, 4, 'one', None, 0, 2, 2), (1, 4, 'one', None, 0, 3, -3), (1, 4, 'one', None, 0, 2, 4), (1, 4, 'one', None, 0, 5, -5), (1, 4, 'one', None, 0, 5, -5), (1, 4, 'one', None, 0, 0, None), (1, 4, 'one', None, 0, None, None), (1, 4, 'one', None, 0, None, 0), (2, 3, 'two', None, 0, 1, -1), (2, 3, 'two', None, 0, 2, 2), (2, 3, 'two', None, 0, 3, -3), (2, 3, 'two', None, 0, 2, 4), (2, 3, 'two', None, 0, 5, -5), (2, 3, 'two', None, 0, 5, -5), (2, 3, 'two', None, 0, 0, None), (2, 3, 'two', None, 0, None, None), (2, 3, 'two', None, 0, None, 0), (3, 2, 'three', None, 0, 1, -1), (3, 2, 'three', None, 0, 2, 2), (3, 2, 'three', None, 0, 3, -3), (3, 2, 'three', None, 0, 2, 4), (3, 2, 'three', None, 0, 5, -5), (3, 2, 'three', None, 0, 5, -5), (3, 2, 'three', None, 0, 0, None), (3, 2, 'three', None, 0, None, None), (3, 2, 'three', None, 0, None, 0), (4, 1, 'four', None, 0, 1, -1), (4, 1, 'four', None, 0, 2, 2), (4, 1, 'four', None, 0, 3, -3), (4, 1, 'four', None, 0, 2, 4), (4, 1, 'four', None, 0, 5, -5), (4, 1, 'four', None, 0, 5, -5), (4, 1, 'four', None, 0, 0, None), (4, 1, 'four', None, 0, None, None), (4, 1, 'four', None, 0, None, 0), (5, 0, 'five', None, 0, 1, -1), (5, 0, 'five', None, 0, 2, 2), (5, 0, 'five', None, 0, 3, -3), (5, 0, 'five', None, 0, 2, 4), (5, 0, 'five', None, 0, 5, -5), (5, 0, 'five', None, 0, 5, -5), (5, 0, 'five', None, 0, 0, None), (5, 0, 'five', None, 0, None, None), (5, 0, 'five', None, 0, None, 0), (6, 6, 'six', None, 0, 1, -1), (6, 6, 'six', None, 0, 2, 2), (6, 6, 'six', None, 0, 3, -3), (6, 6, 'six', None, 0, 2, 4), (6, 6, 'six', None, 0, 5, -5), (6, 6, 'six', None, 0, 5, -5), (6, 6, 'six', None, 0, 0, None), (6, 6, 'six', None, 0, None, None), (6, 6, 'six', None, 0, None, 0), (7, 7, 'seven', None, 0, 1, -1), (7, 7, 'seven', None, 0, 2, 2), (7, 7, 'seven', None, 0, 3, -3), (7, 7, 'seven', None, 0, 2, 4), (7, 7, 'seven', None, 0, 5, -5), (7, 7, 'seven', None, 0, 5, -5), (7, 7, 'seven', None, 0, 0, None), (7, 7, 'seven', None, 0, None, None), (7, 7, 'seven', None, 0, None, 0), (8, 8, 'eight', None, 0, 1, -1), (8, 8, 'eight', None, 0, 2, 2), (8, 8, 'eight', None, 0, 3, -3), (8, 8, 'eight', None, 0, 2, 4), (8, 8, 'eight', None, 0, 5, -5), (8, 8, 'eight', None, 0, 5, -5), (8, 8, 'eight', None, 0, 0, None), (8, 8, 'eight', None, 0, None, None), (8, 8, 'eight', None, 0, None, 0), (0, None, 'zero', None, 0, 1, -1), (0, None, 'zero', None, 0, 2, 2), (0, None, 'zero', None, 0, 3, -3), (0, None, 'zero', None, 0, 2, 4), (0, None, 'zero', None, 0, 5, -5), (0, None, 'zero', None, 0, 5, -5), (0, None, 'zero', None, 0, 0, None), (0, None, 'zero', None, 0, None, None), (0, None, 'zero', None, 0, None, 0), (None, None, 'null', None, 0, 1, -1), (None, None, 'null', None, 0, 2, 2), (None, None, 'null', None, 0, 3, -3), (None, None, 'null', None, 0, 2, 4), (None, None, 'null', None, 0, 5, -5), (None, None, 'null', None, 0, 5, -5), (None, None, 'null', None, 0, 0, None), (None, None, 'null', None, 0, None, None), (None, None, 'null', None, 0, None, 0), (None, 0, 'zero', None, 0, 1, -1), (None, 0, 'zero', None, 0, 2, 2), (None, 0, 'zero', None, 0, 3, -3), (None, 0, 'zero', None, 0, 2, 4), (None, 0, 'zero', None, 0, 5, -5), (None, 0, 'zero', None, 0, 5, -5), (None, 0, 'zero', None, 0, 0, None), (None, 0, 'zero', None, 0, None, None), (None, 0, 'zero', None, 0, None, 0)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL INNER JOIN J2_TBL USING (i)
--Result--
[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL JOIN J2_TBL USING (i)
--Result--
[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5)]
+--------------------+
--Query--
SELECT * FROM J1_TBL JOIN J2_TBL USING (i) WHERE J1_TBL.t = 'one'
--Result--
[(1, 4, 'one', -1)]
+--------------------+
--Query--
SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one'
--Result--
[(1, 4, 'one', -1)]
+--------------------+
--Query--
SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE x.i = 1
--Result--
[(1, 4, 'one', -1)]
+--------------------+
--Query--
SELECT x.* FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one'
--Result--
[(1,)]
+--------------------+
--Query--
SELECT ROW(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one'
--Result--
[('(1)',)]
+--------------------+
--Query--
SELECT row_to_json(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one'
--Result--
[({'i': 1},)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL NATURAL JOIN J2_TBL
--Result--
[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.i)
--Result--
[(0, None, 'zero', 0, None), (1, 4, 'one', 1, -1), (2, 3, 'two', 2, 2), (2, 3, 'two', 2, 4), (3, 2, 'three', 3, -3), (5, 0, 'five', 5, -5), (5, 0, 'five', 5, -5)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.k)
--Result--
[(0, None, 'zero', None, 0), (2, 3, 'two', 2, 2), (4, 1, 'four', 2, 4)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i <= J2_TBL.k)
--Result--
[(1, 4, 'one', 2, 2), (2, 3, 'two', 2, 2), (0, None, 'zero', 2, 2), (1, 4, 'one', 2, 4), (2, 3, 'two', 2, 4), (3, 2, 'three', 2, 4), (4, 1, 'four', 2, 4), (0, None, 'zero', 2, 4), (0, None, 'zero', None, 0)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL LEFT OUTER JOIN J2_TBL USING (i)   ORDER BY i, k, t
--Result--
[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (4, 1, 'four', None), (5, 0, 'five', -5), (5, 0, 'five', -5), (6, 6, 'six', None), (7, 7, 'seven', None), (8, 8, 'eight', None), (None, None, 'null', None), (None, 0, 'zero', None)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL LEFT JOIN J2_TBL USING (i)   ORDER BY i, k, t
--Result--
[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (4, 1, 'four', None), (5, 0, 'five', -5), (5, 0, 'five', -5), (6, 6, 'six', None), (7, 7, 'seven', None), (8, 8, 'eight', None), (None, None, 'null', None), (None, 0, 'zero', None)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL RIGHT OUTER JOIN J2_TBL USING (i)
--Result--
[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5), (None, None, None, None), (None, None, None, 0)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL RIGHT JOIN J2_TBL USING (i)
--Result--
[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5), (None, None, None, None), (None, None, None, 0)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL FULL OUTER JOIN J2_TBL USING (i)   ORDER BY i, k, t
--Result--
[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (4, 1, 'four', None), (5, 0, 'five', -5), (5, 0, 'five', -5), (6, 6, 'six', None), (7, 7, 'seven', None), (8, 8, 'eight', None), (None, None, None, 0), (None, None, 'null', None), (None, 0, 'zero', None), (None, None, None, None)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL FULL JOIN J2_TBL USING (i)   ORDER BY i, k, t
--Result--
[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (4, 1, 'four', None), (5, 0, 'five', -5), (5, 0, 'five', -5), (6, 6, 'six', None), (7, 7, 'seven', None), (8, 8, 'eight', None), (None, None, None, 0), (None, None, 'null', None), (None, 0, 'zero', None), (None, None, None, None)]
+--------------------+
--Query--
SELECT *   FROM J1_TBL LEFT JOIN J2_TBL USING (i) WHERE (k = 1)
--Result--
[]
+--------------------+
--Query--
SELECT *   FROM J1_TBL LEFT JOIN J2_TBL USING (i) WHERE (i = 1)
--Result--
[(1, 4, 'one', -1)]
+--------------------+
--Query--
SELECT * FROM t1 FULL JOIN t2 USING (name) FULL JOIN t3 USING (name)
--Result--
[('bb', 11, 12, 13), ('cc', None, 22, 23), ('dd', None, None, 33), ('ee', None, 42, None)]
+--------------------+
--Query--
SELECT * FROM (SELECT * FROM t2) as s2 INNER JOIN (SELECT * FROM t3) s3 USING (name)
--Result--
[('bb', 12, 13), ('cc', 22, 23)]
+--------------------+
--Query--
SELECT * FROM (SELECT * FROM t2) as s2 LEFT JOIN (SELECT * FROM t3) s3 USING (name)
--Result--
[('bb', 12, 13), ('cc', 22, 23), ('ee', 42, None)]
+--------------------+
--Query--
SELECT * FROM (SELECT * FROM t2) as s2 FULL JOIN (SELECT * FROM t3) s3 USING (name)
--Result--
[('bb', 12, 13), ('cc', 22, 23), ('dd', None, 33), ('ee', 42, None)]
+--------------------+
--Query--
SELECT * FROM (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL INNER JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3
--Result--
[('bb', 12, 2, 13, 3), ('cc', 22, 2, 23, 3)]
+--------------------+
--Query--
SELECT * FROM (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL LEFT JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3
--Result--
[('bb', 12, 2, 13, 3), ('cc', 22, 2, 23, 3), ('ee', 42, 2, None, None)]
+--------------------+
--Query--
SELECT * FROM (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL FULL JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3
--Result--
[('bb', 12, 2, 13, 3), ('cc', 22, 2, 23, 3), ('dd', None, None, 33, 3), ('ee', 42, 2, None, None)]
+--------------------+
--Query--
SELECT * FROM (SELECT name, n as s1_n, 1 as s1_1 FROM t1) as s1 NATURAL INNER JOIN (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL INNER JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3
--Result--
[('bb', 11, 1, 12, 2, 13, 3)]
+--------------------+
--Query--
SELECT * FROM (SELECT name, n as s1_n, 1 as s1_1 FROM t1) as s1 NATURAL FULL JOIN (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL FULL JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3
--Result--
[('bb', 11, 1, 12, 2, 13, 3), ('cc', None, None, 22, 2, 23, 3), ('dd', None, None, None, None, 33, 3), ('ee', None, None, 42, 2, None, None)]
+--------------------+
--Query--
SELECT * FROM (SELECT name, n as s1_n FROM t1) as s1 NATURAL FULL JOIN   (SELECT * FROM     (SELECT name, n as s2_n FROM t2) as s2     NATURAL FULL JOIN     (SELECT name, n as s3_n FROM t3) as s3   ) ss2
--Result--
[('bb', 11, 12, 13), ('cc', None, 22, 23), ('dd', None, None, 33), ('ee', None, 42, None)]
+--------------------+
--Query--
SELECT * FROM (SELECT name, n as s1_n FROM t1) as s1 NATURAL FULL JOIN   (SELECT * FROM     (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2     NATURAL FULL JOIN     (SELECT name, n as s3_n FROM t3) as s3   ) ss2
--Result--
[('bb', 11, 12, 2, 13), ('cc', None, 22, 2, 23), ('dd', None, None, None, 33), ('ee', None, 42, 2, None)]
+--------------------+
--Query--
SELECT * FROM   (SELECT name, n as s1_n FROM t1) as s1 FULL JOIN   (SELECT name, 2 as s2_n FROM t2) as s2 ON (s1_n = s2_n)
--Result--
[(None, None, 'bb', 2), (None, None, 'cc', 2), (None, None, 'ee', 2), ('bb', 11, None, None)]
+--------------------+
--Query--
select * from x
--Result--
[(1, 11), (2, 22), (3, None), (4, 44), (5, None)]
+--------------------+
--Query--
select * from y
--Result--
[(1, 111), (2, 222), (3, 333), (4, None)]
+--------------------+
--Query--
select * from x left join y on (x1 = y1 and x2 is not null)
--Result--
[(1, 11, 1, 111), (2, 22, 2, 222), (3, None, None, None), (4, 44, 4, None), (5, None, None, None)]
+--------------------+
--Query--
select * from x left join y on (x1 = y1 and y2 is not null)
--Result--
[(1, 11, 1, 111), (2, 22, 2, 222), (3, None, 3, 333), (4, 44, None, None), (5, None, None, None)]
+--------------------+
--Query--
select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2) on (x1 = xx1)
--Result--
[(1, 11, 1, 111, 1, 11), (2, 22, 2, 222, 2, 22), (3, None, 3, 333, 3, None), (4, 44, 4, None, 4, 44), (5, None, None, None, 5, None)]
+--------------------+
--Query--
explain (costs off) select * from   j1_tbl full join   (select * from j2_tbl order by j2_tbl.i desc, j2_tbl.k asc) j2_tbl   on j1_tbl.i = j2_tbl.i and j1_tbl.i = j2_tbl.k
--Result--
[('Merge Full Join',), ('  Merge Cond: ((j2_tbl.i = j1_tbl.i) AND (j2_tbl.k = j1_tbl.i))',), ('  ->  Sort',), ('        Sort Key: j2_tbl.i DESC, j2_tbl.k',), ('        ->  Seq Scan on j2_tbl',), ('  ->  Sort',), ('        Sort Key: j1_tbl.i DESC',), ('        ->  Seq Scan on j1_tbl',)]
+--------------------+
--Query--
select * from   j1_tbl full join   (select * from j2_tbl order by j2_tbl.i desc, j2_tbl.k asc) j2_tbl   on j1_tbl.i = j2_tbl.i and j1_tbl.i = j2_tbl.k
--Result--
[(None, None, None, None, 0), (None, None, None, None, None), (None, 0, 'zero', None, None), (None, None, 'null', None, None), (8, 8, 'eight', None, None), (7, 7, 'seven', None, None), (6, 6, 'six', None, None), (None, None, None, 5, -5), (None, None, None, 5, -5), (5, 0, 'five', None, None), (4, 1, 'four', None, None), (None, None, None, 3, -3), (3, 2, 'three', None, None), (2, 3, 'two', 2, 2), (None, None, None, 2, 4), (None, None, None, 1, -1), (None, None, None, 0, None), (1, 4, 'one', None, None), (0, None, 'zero', None, None)]
+--------------------+
--Query--
SELECT * FROM t3
--Result--
[(6, 7), (7, 8), (500, 100)]
+--------------------+
--Query--
SELECT * FROM t3
--Result--
[(6, 7), (7, 8)]
+--------------------+
--Query--
SELECT * FROM t3
--Result--
[]
+--------------------+
--Query--
select * from t1 left join t2 on (t1.a = t2.a)
--Result--
[(5, 10, None, None), (15, 20, None, None), (100, 100, None, None), (200, 1000, 200, 2000), (200, 1000, 200, 2001)]
+--------------------+
--Query--
select t1.*, t2.*, unnamed_join.* from   t1 join t2 on (t1.a = t2.a), t3 as unnamed_join   for update of unnamed_join
--Result--
[]
+--------------------+
--Query--
select foo.*, unnamed_join.* from   t1 join t2 using (a) as foo, t3 as unnamed_join   for update of unnamed_join
--Result--
[]
+--------------------+
--Query--
select tt1.*, tt2.* from tt1 left join tt2 on tt1.joincol = tt2.joincol
--Result--
[(1, 11, 21, 11), (1, 11, 22, 11), (2, None, None, None)]
+--------------------+
--Query--
select tt1.*, tt2.* from tt2 right join tt1 on tt1.joincol = tt2.joincol
--Result--
[(1, 11, 21, 11), (1, 11, 22, 11), (2, None, None, None)]
+--------------------+
--Query--
analyze tt3
--Result--
[]
+--------------------+
--Query--
analyze tt4
--Result--
[]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT a.f1 FROM tt4 a LEFT JOIN (         SELECT b.f1         FROM tt3 b LEFT JOIN tt3 c ON (b.f1 = c.f1)         WHERE COALESCE(c.f1, 0) = 0 ) AS d ON (a.f1 = d.f1) WHERE COALESCE(d.f1, 0) = 0 ORDER BY 1
--Result--
[('Sort',), ('  Sort Key: a.f1',), ('  ->  Hash Right Join',), ('        Hash Cond: (b.f1 = a.f1)',), ('        Filter: (COALESCE(b.f1, 0) = 0)',), ('        ->  Hash Left Join',), ('              Hash Cond: (b.f1 = c.f1)',), ('              Filter: (COALESCE(c.f1, 0) = 0)',), ('              ->  Seq Scan on tt3 b',), ('              ->  Hash',), ('                    ->  Seq Scan on tt3 c',), ('        ->  Hash',), ('              ->  Seq Scan on tt4 a',)]
+--------------------+
--Query--
SELECT a.f1 FROM tt4 a LEFT JOIN (         SELECT b.f1         FROM tt3 b LEFT JOIN tt3 c ON (b.f1 = c.f1)         WHERE COALESCE(c.f1, 0) = 0 ) AS d ON (a.f1 = d.f1) WHERE COALESCE(d.f1, 0) = 0 ORDER BY 1
--Result--
[(0,), (1,), (9999,)]
+--------------------+
--Query--
explain (costs off) select * from tt4x t1 where not exists (   select 1 from tt4x t2     left join tt4x t3 on t2.c3 = t3.c1     left join ( select t5.c1 as c1                 from tt4x t4 left join tt4x t5 on t4.c2 = t5.c1               ) a1 on t3.c2 = a1.c1   where t1.c1 = t2.c2 )
--Result--
[('Hash Anti Join',), ('  Hash Cond: (t1.c1 = t2.c2)',), ('  ->  Seq Scan on tt4x t1',), ('  ->  Hash',), ('        ->  Merge Right Join',), ('              Merge Cond: (t5.c1 = t3.c2)',), ('              ->  Merge Join',), ('                    Merge Cond: (t4.c2 = t5.c1)',), ('                    ->  Sort',), ('                          Sort Key: t4.c2',), ('                          ->  Seq Scan on tt4x t4',), ('                    ->  Sort',), ('                          Sort Key: t5.c1',), ('                          ->  Seq Scan on tt4x t5',), ('              ->  Sort',), ('                    Sort Key: t3.c2',), ('                    ->  Merge Left Join',), ('                          Merge Cond: (t2.c3 = t3.c1)',), ('                          ->  Sort',), ('                                Sort Key: t2.c3',), ('                                ->  Seq Scan on tt4x t2',), ('                          ->  Sort',), ('                                Sort Key: t3.c1',), ('                                ->  Seq Scan on tt4x t3',)]
+--------------------+
--Query--
select * from tt5,tt6 where tt5.f1 = tt6.f1 and tt5.f1 = tt5.f2 - tt6.f2
--Result--
[(1, 10, 1, 9)]
+--------------------+
--Query--
select yy.pkyy as yy_pkyy, yy.pkxx as yy_pkxx, yya.pkyy as yya_pkyy,        xxa.pkxx as xxa_pkxx, xxb.pkxx as xxb_pkxx from yy      left join (SELECT * FROM yy where pkyy = 101) as yya ON yy.pkyy = yya.pkyy      left join xx xxa on yya.pkxx = xxa.pkxx      left join xx xxb on coalesce (xxa.pkxx, 1) = xxb.pkxx
--Result--
[(101, 1, 101, 1, 1), (201, 2, None, None, 1), (301, None, None, None, 1)]
+--------------------+
--Query--
select * from   zt2 left join zt3 on (f2 = f3)       left join zt1 on (f3 = f1) where f2 = 53
--Result--
[(53, None, None)]
+--------------------+
--Query--
select * from   zt2 left join zt3 on (f2 = f3)       left join zv1 on (f3 = f1) where f2 = 53
--Result--
[(53, None, None, None)]
+--------------------+
--Query--
select * from a left join b on i = x and i = y and x = i
--Result--
[]
+--------------------+
--Query--
explain (costs off) select a.idv, b.idv from tidv a, tidv b where a.idv = b.idv
--Result--
[('Merge Join',), ('  Merge Cond: (a.idv = b.idv)',), ('  ->  Index Only Scan using tidv_idv_idx on tidv a',), ('  ->  Materialize',), ('        ->  Index Only Scan using tidv_idv_idx on tidv b',)]
+--------------------+
--Query--
explain (costs off) select a.idv, b.idv from tidv a, tidv b where a.idv = b.idv
--Result--
[('Nested Loop',), ('  ->  Seq Scan on tidv a',), ('  ->  Index Only Scan using tidv_idv_idx on tidv b',), ('        Index Cond: (idv = a.idv)',)]
+--------------------+
--Query--
select c.name, ss.code, ss.b_cnt, ss.const from c left join   (select a.code, coalesce(b_grp.cnt, 0) as b_cnt, -1 as const    from a left join      (select count(1) as cnt, b.a from b group by b.a) as b_grp      on a.code = b_grp.a   ) as ss   on (c.a = ss.code) order by c.name
--Result--
[('A', 'p', 2, -1), ('B', 'q', 0, -1), ('C', None, None, None)]
+--------------------+
--Query--
SELECT * FROM ( SELECT 1 as key1 ) sub1 LEFT JOIN ( SELECT sub3.key3, sub4.value2, COALESCE(sub4.value2, 66) as value3 FROM     ( SELECT 1 as key3 ) sub3     LEFT JOIN     ( SELECT sub5.key5, COALESCE(sub6.value1, 1) as value2 FROM         ( SELECT 1 as key5 ) sub5         LEFT JOIN         ( SELECT 2 as key6, 42 as value1 ) sub6         ON sub5.key5 = sub6.key6     ) sub4     ON sub4.key5 = sub3.key3 ) sub2 ON sub1.key1 = sub2.key3
--Result--
[(1, 1, 1, 1)]
+--------------------+
--Query--
SELECT * FROM ( SELECT 1 as key1 ) sub1 LEFT JOIN ( SELECT sub3.key3, value2, COALESCE(value2, 66) as value3 FROM     ( SELECT 1 as key3 ) sub3     LEFT JOIN     ( SELECT sub5.key5, COALESCE(sub6.value1, 1) as value2 FROM         ( SELECT 1 as key5 ) sub5         LEFT JOIN         ( SELECT 2 as key6, 42 as value1 ) sub6         ON sub5.key5 = sub6.key6     ) sub4     ON sub4.key5 = sub3.key3 ) sub2 ON sub1.key1 = sub2.key3
--Result--
[(1, 1, 1, 1)]
+--------------------+
--Query--
explain (costs off) select nt3.id from nt3 as nt3   left join     (select nt2.*, (nt2.b1 and ss1.a3) AS b3      from nt2 as nt2        left join          (select nt1.*, (nt1.id is not null) as a3 from nt1) as ss1          on ss1.id = nt2.nt1_id     ) as ss2     on ss2.id = nt3.nt2_id where nt3.id = 1 and ss2.b3
--Result--
[('Nested Loop',), ('  ->  Nested Loop',), ('        ->  Index Scan using nt3_pkey on nt3',), ('              Index Cond: (id = 1)',), ('        ->  Index Scan using nt2_pkey on nt2',), ('              Index Cond: (id = nt3.nt2_id)',), ('  ->  Index Only Scan using nt1_pkey on nt1',), ('        Index Cond: (id = nt2.nt1_id)',), ('        Filter: (nt2.b1 AND (id IS NOT NULL))',)]
+--------------------+
--Query--
select nt3.id from nt3 as nt3   left join     (select nt2.*, (nt2.b1 and ss1.a3) AS b3      from nt2 as nt2        left join          (select nt1.*, (nt1.id is not null) as a3 from nt1) as ss1          on ss1.id = nt2.nt1_id     ) as ss2     on ss2.id = nt3.nt2_id where nt3.id = 1 and ss2.b3
--Result--
[(1,)]
+--------------------+
--Query--
analyze q1
--Result--
[]
+--------------------+
--Query--
analyze q2
--Result--
[]
+--------------------+
--Query--
explain (verbose, costs off) select * from   (select 1 as x) ss1 left join (select 2 as y) ss2 on (true),   lateral (select ss2.y as z limit 1) ss3
--Result--
[('Nested Loop',), ('  Output: 1, (2), ((2))',), ('  ->  Result',), ('        Output: 2',), ('  ->  Limit',), ('        Output: ((2))',), ('        ->  Result',), ('              Output: (2)',)]
+--------------------+
--Query--
select * from   (select 1 as x) ss1 left join (select 2 as y) ss2 on (true),   lateral (select ss2.y as z limit 1) ss3
--Result--
[(1, 2, 2)]
+--------------------+
--Query--
explain (costs off) select * from   (select 0 as z) as t1   left join   (select true as a) as t2   on true,   lateral (select true as b            union all            select a as b) as t3 where b
--Result--
[('Nested Loop',), ('  ->  Result',), ('  ->  Append',), ('        ->  Result',), ('        ->  Result',), ('              One-Time Filter: (true)',)]
+--------------------+
--Query--
select * from   (select 0 as z) as t1   left join   (select true as a) as t2   on true,   lateral (select true as b            union all            select a as b) as t3 where b
--Result--
[(0, True, True), (0, True, True)]
+--------------------+
--Query--
explain (verbose, costs off) with ctetable as not materialized ( select 1 as f1 ) select * from ctetable c1 where f1 in ( select c3.f1 from ctetable c2 full join ctetable c3 on true )
--Result--
[('Result',), ('  Output: 1',), ('  One-Time Filter: (1 = 1)',)]
+--------------------+
--Query--
with ctetable as not materialized ( select 1 as f1 ) select * from ctetable c1 where f1 in ( select c3.f1 from ctetable c2 full join ctetable c3 on true )
--Result--
[(1,)]
+--------------------+
--Query--
explain (costs off) select nt3.id from nt3 as nt3   left join     (select nt2.*, (nt2.b1 or i4 = 42) AS b3      from nt2 as nt2        left join          f_immutable_int4(0) i4          on i4 = nt2.nt1_id     ) as ss2     on ss2.id = nt3.nt2_id where nt3.id = 1 and ss2.b3
--Result--
[('Nested Loop Left Join',), ('  Filter: ((nt2.b1 OR ((0) = 42)))',), ('  ->  Index Scan using nt3_pkey on nt3',), ('        Index Cond: (id = 1)',), ('  ->  Nested Loop Left Join',), ('        Join Filter: (0 = nt2.nt1_id)',), ('        ->  Index Scan using nt2_pkey on nt2',), ('              Index Cond: (id = nt3.nt2_id)',), ('        ->  Result',)]
+--------------------+
--Query--
explain (costs off) select * from (values (1, array[10,20]), (2, array[20,30])) as v1(v1x,v1ys) left join (values (1, 10), (2, 20)) as v2(v2x,v2y) on v2x = v1x left join unnest(v1ys) as u1(u1y) on u1y = v2y
--Result--
[('Nested Loop Left Join',), ('  ->  Values Scan on "*VALUES*"',), ('  ->  Hash Right Join',), ('        Hash Cond: (u1.u1y = "*VALUES*_1".column2)',), ('        Filter: ("*VALUES*_1".column1 = "*VALUES*".column1)',), ('        ->  Function Scan on unnest u1',), ('        ->  Hash',), ('              ->  Values Scan on "*VALUES*_1"',)]
+--------------------+
--Query--
select * from (values (1, array[10,20]), (2, array[20,30])) as v1(v1x,v1ys) left join (values (1, 10), (2, 20)) as v2(v2x,v2y) on v2x = v1x left join unnest(v1ys) as u1(u1y) on u1y = v2y
--Result--
[(1, [10, 20], 1, 10, 10), (2, [20, 30], 2, 20, 20)]
+--------------------+
--Query--
explain (costs off) select nspname from (select 1 as x) ss1 left join ( select n.nspname, c.relname   from pg_class c left join pg_namespace n on n.oid = c.relnamespace   where c.relkind = 'r' ) ss2 on false
--Result--
[('Nested Loop Left Join',), ('  Join Filter: false',), ('  ->  Result',), ('  ->  Result',), ('        One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select 1 from t t1   join lateral (select t1.a from (select 1) foo offset 0) as s1 on true   join     (select 1 from t t2        inner join (t t3                    left join (t t4 left join t t5 on t4.a = 1)                    on t3.a = t4.a)        on false      where t3.a = coalesce(t5.a,1)) as s2   on true
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) SELECT a.* FROM a LEFT JOIN b ON a.b_id = b.id
--Result--
[('Seq Scan on a',)]
+--------------------+
--Query--
explain (costs off) SELECT b.* FROM b LEFT JOIN c ON b.c_id = c.id
--Result--
[('Seq Scan on b',)]
+--------------------+
--Query--
explain (costs off)   SELECT a.* FROM a LEFT JOIN (b left join c on b.c_id = c.id)   ON (a.b_id = b.id)
--Result--
[('Seq Scan on a',)]
+--------------------+
--Query--
explain (costs off) select id from a where id in ( 	select b.id from b left join c on b.id = c.id )
--Result--
[('Hash Join',), ('  Hash Cond: (a.id = b.id)',), ('  ->  Seq Scan on a',), ('  ->  Hash',), ('        ->  Seq Scan on b',)]
+--------------------+
--Query--
explain (costs off) select a1.id from   (a a1 left join a a2 on true)   left join   (a a3 left join a a4 on a3.id = a4.id)   on a2.id = a3.id
--Result--
[('Nested Loop Left Join',), ('  ->  Seq Scan on a a1',), ('  ->  Materialize',), ('        ->  Seq Scan on a a2',)]
+--------------------+
--Query--
explain (costs off) select a1.id from   (a a1 left join a a2 on a1.id = a2.id)   left join   (a a3 left join a a4 on a3.id = a4.id)   on a2.id = a3.id
--Result--
[('Seq Scan on a a1',)]
+--------------------+
--Query--
explain (costs off) select 1 from a t1     left join a t2 on true    inner join a t3 on true     left join a t4 on t2.id = t4.id and t2.id = t3.id
--Result--
[('Nested Loop',), ('  ->  Nested Loop Left Join',), ('        ->  Seq Scan on a t1',), ('        ->  Materialize',), ('              ->  Seq Scan on a t2',), ('  ->  Materialize',), ('        ->  Seq Scan on a t3',)]
+--------------------+
--Query--
select p.* from parent p left join child c on (p.k = c.k)
--Result--
[(1, 10), (2, 20), (3, 30)]
+--------------------+
--Query--
explain (costs off)   select p.* from parent p left join child c on (p.k = c.k)
--Result--
[('Seq Scan on parent p',)]
+--------------------+
--Query--
select p.*, linked from parent p   left join (select c.*, true as linked from child c) as ss   on (p.k = ss.k)
--Result--
[(1, 10, True), (2, 20, None), (3, 30, None)]
+--------------------+
--Query--
explain (costs off)   select p.*, linked from parent p     left join (select c.*, true as linked from child c) as ss     on (p.k = ss.k)
--Result--
[('Hash Left Join',), ('  Hash Cond: (p.k = c.k)',), ('  ->  Seq Scan on parent p',), ('  ->  Hash',), ('        ->  Seq Scan on child c',)]
+--------------------+
--Query--
select p.* from   parent p left join child c on (p.k = c.k)   where p.k = 1 and p.k = 2
--Result--
[]
+--------------------+
--Query--
explain (costs off) select p.* from   parent p left join child c on (p.k = c.k)   where p.k = 1 and p.k = 2
--Result--
[('Result',), ('  One-Time Filter: false',), ('  ->  Index Scan using parent_pkey on parent p',), ('        Index Cond: (k = 1)',)]
+--------------------+
--Query--
select p.* from   (parent p left join child c on (p.k = c.k)) join parent x on p.k = x.k   where p.k = 1 and p.k = 2
--Result--
[]
+--------------------+
--Query--
explain (costs off) select p.* from   (parent p left join child c on (p.k = c.k)) join parent x on p.k = x.k   where p.k = 1 and p.k = 2
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
SELECT * FROM b LEFT JOIN a ON (b.a_id = a.id) WHERE (a.id IS NULL OR a.id > 0)
--Result--
[(1, None, None)]
+--------------------+
--Query--
SELECT b.* FROM b LEFT JOIN a ON (b.a_id = a.id) WHERE (a.id IS NULL OR a.id > 0)
--Result--
[(1, None)]
+--------------------+
--Query--
explain (costs off) select t1.* from   uniquetbl as t1   left join (select *, '***'::text as d1 from uniquetbl) t2   on t1.f1 = t2.f1   left join uniquetbl t3   on t2.d1 = t3.f1
--Result--
[('Seq Scan on uniquetbl t1',)]
+--------------------+
--Query--
explain (costs off) select 1 from t t1   left join (select 2 as c              from t t2 left join t t3 on t2.a = t3.a) s     on true where t1.a = s.c
--Result--
[('Nested Loop Left Join',), ('  Filter: (t1.a = (2))',), ('  ->  Seq Scan on t t1',), ('  ->  Materialize',), ('        ->  Seq Scan on t t2',)]
+--------------------+
--Query--
select 1 from t t1   left join (select 2 as c              from t t2 left join t t3 on t2.a = t3.a) s     on true where t1.a = s.c
--Result--
[]
+--------------------+
--Query--
explain (costs off) select 1 from t t1   left join (select t2.a, 1 as c              from t t2 left join t t3 on t2.a = t3.a) s   on true   left join t t4 on true where s.a < s.c
--Result--
[('Nested Loop Left Join',), ('  ->  Nested Loop',), ('        ->  Seq Scan on t t1',), ('        ->  Materialize',), ('              ->  Seq Scan on t t2',), ('                    Filter: (a < 1)',), ('  ->  Materialize',), ('        ->  Seq Scan on t t4',)]
+--------------------+
--Query--
explain (costs off) select t1.a, s.* from t t1   left join lateral (select t2.a, coalesce(t1.a, 1) as c                      from t t2 left join t t3 on t2.a = t3.a) s   on true   left join t t4 on true where s.a < s.c
--Result--
[('Nested Loop Left Join',), ('  ->  Nested Loop',), ('        ->  Seq Scan on t t1',), ('        ->  Seq Scan on t t2',), ('              Filter: (a < COALESCE(t1.a, 1))',), ('  ->  Materialize',), ('        ->  Seq Scan on t t4',)]
+--------------------+
--Query--
select t1.a, s.* from t t1   left join lateral (select t2.a, coalesce(t1.a, 1) as c                      from t t2 left join t t3 on t2.a = t3.a) s   on true   left join t t4 on true where s.a < s.c
--Result--
[(2, 1, 2), (2, 1, 2)]
+--------------------+
--Query--
analyze sj
--Result--
[]
+--------------------+
--Query--
explain (costs off) select p.* from sj p, sj q where q.a = p.a and q.b = q.a - 1
--Result--
[('Nested Loop',), ('  Join Filter: (p.a = q.a)',), ('  ->  Seq Scan on sj q',), ('        Filter: (b = (a - 1))',), ('  ->  Seq Scan on sj p',)]
+--------------------+
--Query--
select p.* from sj p, sj q where q.a = p.a and q.b = q.a - 1
--Result--
[(2, 1, 1)]
+--------------------+
--Query--
explain (costs off) select * from sj p where exists (select * from sj q               where q.a = p.a and q.b < 10)
--Result--
[('Nested Loop',), ('  Join Filter: (p.a = q.a)',), ('  ->  Seq Scan on sj p',), ('  ->  Materialize',), ('        ->  Seq Scan on sj q',), ('              Filter: (b < 10)',)]
+--------------------+
--Query--
select * from sj p where exists (select * from sj q               where q.a = p.a and q.b < 10)
--Result--
[(2, 1, 1)]
+--------------------+
--Query--
explain (costs off) select * from sj t1, sj t2 where t1.a = t2.c and t1.b is not null
--Result--
[('Nested Loop',), ('  Join Filter: (t1.a = t2.c)',), ('  ->  Seq Scan on sj t2',), ('  ->  Materialize',), ('        ->  Seq Scan on sj t1',), ('              Filter: (b IS NOT NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from   (select a as x from sj where false) as q1,   (select a as y from sj where false) as q2 where q1.x = q2.y
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from sj t1, sj t2 where t1.a = t1.b and t1.b = t2.b and t2.b = t2.a
--Result--
[('Nested Loop',), ('  Join Filter: (t1.a = t2.b)',), ('  ->  Seq Scan on sj t1',), ('        Filter: (a = b)',), ('  ->  Seq Scan on sj t2',), ('        Filter: (b = a)',)]
+--------------------+
--Query--
explain (costs off) select * from sj t1, sj t2, sj t3 where t1.a = t1.b and t1.b = t2.b and t2.b = t2.a and       t1.b = t3.b and t3.b = t3.a
--Result--
[('Nested Loop',), ('  Join Filter: (t1.a = t3.b)',), ('  ->  Nested Loop',), ('        Join Filter: (t1.a = t2.b)',), ('        ->  Seq Scan on sj t1',), ('              Filter: (a = b)',), ('        ->  Seq Scan on sj t2',), ('              Filter: (b = a)',), ('  ->  Seq Scan on sj t3',), ('        Filter: (b = a)',)]
+--------------------+
--Query--
explain (costs off) select * from  sj t1       join sj t2 on t1.a = t2.a and t1.b = t2.b 	  join sj t3 on t2.a = t3.a and t2.b + 1 = t3.b + 1
--Result--
[('Nested Loop',), ('  Join Filter: ((t1.a = t3.a) AND ((t3.b + 1) = (t2.b + 1)))',), ('  ->  Nested Loop',), ('        Join Filter: ((t1.a = t2.a) AND (t2.b = t1.b))',), ('        ->  Seq Scan on sj t1',), ('        ->  Materialize',), ('              ->  Seq Scan on sj t2',), ('  ->  Seq Scan on sj t3',)]
+--------------------+
--Query--
explain (costs off) select t1.a, (select a from sj where a = t2.a and a = t1.a) from sj t1, sj t2 where t1.a = t2.a
--Result--
[('Nested Loop',), ('  Join Filter: (t1.a = t2.a)',), ('  ->  Seq Scan on sj t1',), ('  ->  Materialize',), ('        ->  Seq Scan on sj t2',), ('  SubPlan 1',), ('    ->  Result',), ('          One-Time Filter: (t2.a = t1.a)',), ('          ->  Seq Scan on sj',), ('                Filter: (a = t1.a)',)]
+--------------------+
--Query--
explain (costs off) select * from (   select t1.*, t2.a as ax from sj t1 join sj t2   on (t1.a = t2.a and t1.c * t1.c = t2.c + 2 and t2.b is null) ) as q1 left join   (select t3.* from sj t3, sj t4 where t3.c = t4.c) as q2 on q1.ax = q2.a
--Result--
[('Nested Loop',), ('  Join Filter: ((t1.a = t2.a) AND ((t2.c + 2) = (t1.c * t1.c)))',), ('  ->  Nested Loop Left Join',), ('        Join Filter: (t2.a = t3.a)',), ('        ->  Seq Scan on sj t2',), ('              Filter: (b IS NULL)',), ('        ->  Nested Loop',), ('              Join Filter: (t3.c = t4.c)',), ('              ->  Seq Scan on sj t3',), ('              ->  Materialize',), ('                    ->  Seq Scan on sj t4',), ('  ->  Seq Scan on sj t1',)]
+--------------------+
--Query--
explain (verbose, costs off) select t3.a from sj t1 	join sj t2 on t1.a = t2.a 	join lateral (select t1.a offset 0) t3 on true
--Result--
[('Nested Loop',), ('  Output: (t1.a)',), ('  ->  Nested Loop',), ('        Output: t1.a',), ('        Inner Unique: true',), ('        Join Filter: (t1.a = t2.a)',), ('        ->  Seq Scan on public.sj t1',), ('              Output: t1.a, t1.b, t1.c',), ('        ->  Materialize',), ('              Output: t2.a',), ('              ->  Seq Scan on public.sj t2',), ('                    Output: t2.a',), ('  ->  Result',), ('        Output: t1.a',)]
+--------------------+
--Query--
explain (verbose, costs off) select t3.a from sj t1 	join sj t2 on t1.a = t2.a 	join lateral (select * from (select t1.a offset 0) offset 0) t3 on true
--Result--
[('Nested Loop',), ('  Output: (t1.a)',), ('  ->  Nested Loop',), ('        Output: t1.a',), ('        Inner Unique: true',), ('        Join Filter: (t1.a = t2.a)',), ('        ->  Seq Scan on public.sj t1',), ('              Output: t1.a, t1.b, t1.c',), ('        ->  Materialize',), ('              Output: t2.a',), ('              ->  Seq Scan on public.sj t2',), ('                    Output: t2.a',), ('  ->  Result',), ('        Output: t1.a',)]
+--------------------+
--Query--
explain (verbose, costs off) select t4.a from sj t1 	join sj t2 on t1.a = t2.a 	join lateral (select t3.a from sj t3, (select t1.a) offset 0) t4 on true
--Result--
[('Nested Loop',), ('  Output: t3.a',), ('  ->  Nested Loop',), ('        Output: t1.a',), ('        Inner Unique: true',), ('        Join Filter: (t1.a = t2.a)',), ('        ->  Seq Scan on public.sj t1',), ('              Output: t1.a, t1.b, t1.c',), ('        ->  Materialize',), ('              Output: t2.a',), ('              ->  Seq Scan on public.sj t2',), ('                    Output: t2.a',), ('  ->  Seq Scan on public.sj t3',), ('        Output: t3.a',)]
+--------------------+
--Query--
explain (COSTS OFF) SELECT * FROM pg_am am WHERE am.amname IN (   SELECT c1.relname AS relname   FROM pg_class c1     JOIN pg_class c2     ON c1.oid=c2.oid AND c1.oid < 10 )
--Result--
[('Nested Loop Semi Join',), ('  Join Filter: (am.amname = c1.relname)',), ('  ->  Seq Scan on pg_am am',), ('  ->  Materialize',), ('        ->  Nested Loop',), ('              ->  Index Scan using pg_class_oid_index on pg_class c1',), ("                    Index Cond: (oid < '10'::oid)",), ('              ->  Index Only Scan using pg_class_oid_index on pg_class c2',), ('                    Index Cond: (oid = c1.oid)',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2 AND j2.a = 3
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 2)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (a = 3)',)]
+--------------------+
--Query--
SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2 AND j2.a = 3
--Result--
[(2, 1, 1, 3, 1, 3)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2 AND j2.a = 2
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 2)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (a = 2)',)]
+--------------------+
--Query--
SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2 AND j2.a = 2
--Result--
[(2, 1, 1, 2, 1, 1)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND j1.a = (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int   AND (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int = j2.a
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ("        Filter: (a = (((EXTRACT(dow FROM CURRENT_TIMESTAMP(0)) / '15'::numeric) + '3'::numeric))::integer)",), ('  ->  Seq Scan on sj j2',), ("        Filter: (a = (((EXTRACT(dow FROM CURRENT_TIMESTAMP(0)) / '15'::numeric) + '3'::numeric))::integer)",)]
+--------------------+
--Query--
SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND j1.a = (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int   AND (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int = j2.a
--Result--
[(3, 1, 3, 3, 1, 3)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 1 AND j2.a = 1
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (a = 1)',)]
+--------------------+
--Query--
SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 1 AND j2.a = 1
--Result--
[]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND 1 = j1.a AND j2.a = 1
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (a = 1)',)]
+--------------------+
--Query--
SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND 1 = j1.a AND j2.a = 1
--Result--
[]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT t4.* FROM (SELECT t1.*, t2.a AS a1 FROM sj t1, sj t2 WHERE t1.b = t2.b) AS t3 JOIN sj t4 ON (t4.a = t3.a) WHERE t3.a1 = 42
--Result--
[('Nested Loop',), ('  Join Filter: (t4.a = t1.a)',), ('  ->  Nested Loop',), ('        Join Filter: (t1.b = t2.b)',), ('        ->  Seq Scan on sj t2',), ('              Filter: (a = 42)',), ('        ->  Seq Scan on sj t1',), ('  ->  Seq Scan on sj t4',)]
+--------------------+
--Query--
SELECT t4.* FROM (SELECT t1.*, t2.a AS a1 FROM sj t1, sj t2 WHERE t1.b = t2.b) AS t3 JOIN sj t4 ON (t4.a = t3.a) WHERE t3.a1 = 42
--Result--
[]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 	WHERE j1.b = j2.b AND j1.a*j1.a = 1 AND j2.a*j2.a = 1
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: ((a * a) = 1)',), ('  ->  Seq Scan on sj j2',), ('        Filter: ((a * a) = 1)',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 	WHERE j1.b = j2.b AND j1.a*j1.a = 1 AND j2.a*j2.a = 2
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: ((a * a) = 1)',), ('  ->  Seq Scan on sj j2',), ('        Filter: ((a * a) = 2)',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND (j1.a*j1.a) = (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int   AND (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int = (j2.a*j2.a)
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ("        Filter: ((a * a) = (((EXTRACT(dow FROM CURRENT_TIMESTAMP(0)) / '15'::numeric) + '3'::numeric))::integer)",), ('  ->  Seq Scan on sj j2',), ("        Filter: ((a * a) = (((EXTRACT(dow FROM CURRENT_TIMESTAMP(0)) / '15'::numeric) + '3'::numeric))::integer)",)]
+--------------------+
--Query--
SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND (j1.a*j1.a) = (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int   AND (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int = (j2.a*j2.a)
--Result--
[]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND (j1.a*j1.c/3) = (random()/3 + 3)::int   AND (random()/3 + 3)::int = (j2.a*j2.c/3)
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ("        Filter: (((a * c) / 3) = (((random() / '3'::double precision) + '3'::double precision))::integer)",), ('  ->  Seq Scan on sj j2',), ("        Filter: ((((random() / '3'::double precision) + '3'::double precision))::integer = ((a * c) / 3))",)]
+--------------------+
--Query--
SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND (j1.a*j1.c/3) = (random()/3 + 3)::int   AND (random()/3 + 3)::int = (j2.a*j2.c/3)
--Result--
[(3, 1, 3, 3, 1, 3)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 	WHERE j1.b = j2.b AND j1.a = 2 AND j1.c = 3 AND j2.a = 2 AND 3 = j2.c
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: ((a = 2) AND (c = 3))',), ('  ->  Seq Scan on sj j2',), ('        Filter: ((a = 2) AND (c = 3))',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) 	SELECT * FROM sj j1, sj j2 	WHERE j1.b = j2.b AND 2 = j1.a AND j1.c = 3 AND j2.a = 1 AND 3 = j2.c
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: ((2 = a) AND (c = 3))',), ('  ->  Seq Scan on sj j2',), ('        Filter: ((c = 3) AND (a = 1))',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 2)',), ('  ->  Seq Scan on sj j2',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND 2 = j2.a
--Result--
[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (2 = a)',), ('  ->  Seq Scan on sj j1',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND (j1.a = 1 OR j2.a = 1)
--Result--
[('Nested Loop',), ('  Join Filter: ((j1.b = j2.b) AND ((j1.a = 1) OR (j2.a = 1)))',), ('  ->  Seq Scan on sj j1',), ('  ->  Materialize',), ('        ->  Seq Scan on sj j2',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT COUNT(*) FROM tab_with_flag WHERE 	(is_flag IS NULL OR is_flag = 0) 	AND id IN (SELECT id FROM tab_with_flag WHERE id IN (2, 3))
--Result--
[('Aggregate',), ('  ->  Nested Loop',), ('        ->  Bitmap Heap Scan on tab_with_flag tab_with_flag_1',), ("              Recheck Cond: (id = ANY ('{2,3}'::integer[]))",), ('              ->  Bitmap Index Scan on tab_with_flag_pkey',), ("                    Index Cond: (id = ANY ('{2,3}'::integer[]))",), ('        ->  Memoize',), ('              Cache Key: tab_with_flag_1.id',), ('              Cache Mode: logical',), ('              ->  Index Scan using tab_with_flag_pkey on tab_with_flag',), ('                    Index Cond: (id = tab_with_flag_1.id)',), ('                    Filter: ((is_flag IS NULL) OR (is_flag = 0))',)]
+--------------------+
--Query--
explain (costs off) select p.b from sj p join sj q on p.a = q.a group by p.b having sum(p.a) = 1
--Result--
[('GroupAggregate',), ('  Group Key: p.b',), ('  Filter: (sum(p.a) = 1)',), ('  ->  Sort',), ('        Sort Key: p.b',), ('        ->  Nested Loop',), ('              Join Filter: (p.a = q.a)',), ('              ->  Seq Scan on sj p',), ('              ->  Materialize',), ('                    ->  Seq Scan on sj q',)]
+--------------------+
--Query--
explain (verbose, costs off) select 1 from (select x.* from sj x, sj y where x.a = y.a) q,   lateral generate_series(1, q.a) gs(i)
--Result--
[('Nested Loop',), ('  Output: 1',), ('  ->  Nested Loop',), ('        Output: x.a',), ('        Inner Unique: true',), ('        Join Filter: (x.a = y.a)',), ('        ->  Seq Scan on public.sj x',), ('              Output: x.a, x.b, x.c',), ('        ->  Materialize',), ('              Output: y.a',), ('              ->  Seq Scan on public.sj y',), ('                    Output: y.a',), ('  ->  Function Scan on pg_catalog.generate_series gs',), ('        Output: gs.i',), ('        Function Call: generate_series(1, x.a)',)]
+--------------------+
--Query--
explain (costs off) select * from sj p join sj q on p.a = q.a   left join sj r on p.a + q.a = r.a
--Result--
[('Nested Loop Left Join',), ('  Join Filter: ((p.a + q.a) = r.a)',), ('  ->  Nested Loop',), ('        Join Filter: (p.a = q.a)',), ('        ->  Seq Scan on sj p',), ('        ->  Materialize',), ('              ->  Seq Scan on sj q',), ('  ->  Materialize',), ('        ->  Seq Scan on sj r',)]
+--------------------+
--Query--
explain (costs off) select * from sj p, sj q where p.a = q.a and p.b = 1 and q.b = 2
--Result--
[('Nested Loop',), ('  Join Filter: (p.a = q.a)',), ('  ->  Seq Scan on sj p',), ('        Filter: (b = 1)',), ('  ->  Seq Scan on sj q',), ('        Filter: (b = 2)',)]
+--------------------+
--Query--
explain (costs off) select 1 from 	(sk k1 join sk k2 on k1.a = k2.a) 	join (sj j1 join sj j2 on j1.a = j2.a) on j1.b = k1.b
--Result--
[('Nested Loop',), ('  Join Filter: (k1.b = j1.b)',), ('  ->  Nested Loop',), ('        ->  Index Scan using sk_a_idx on sk k1',), ('        ->  Index Only Scan using sk_a_idx on sk k2',), ('              Index Cond: (a = k1.a)',), ('  ->  Materialize',), ('        ->  Nested Loop',), ('              ->  Index Scan using sj_a_key on sj j1',), ('              ->  Memoize',), ('                    Cache Key: j1.a',), ('                    Cache Mode: logical',), ('                    ->  Index Only Scan using sj_a_key on sj j2',), ('                          Index Cond: (a = j1.a)',)]
+--------------------+
--Query--
explain (costs off) select 1 from 	(sk k1 join sk k2 on k1.a = k2.a) 	join (sj j1 join sj j2 on j1.a = j2.a) on j2.b = k1.b
--Result--
[('Nested Loop',), ('  Join Filter: (k1.b = j2.b)',), ('  ->  Nested Loop',), ('        ->  Index Scan using sk_a_idx on sk k1',), ('        ->  Index Only Scan using sk_a_idx on sk k2',), ('              Index Cond: (a = k1.a)',), ('  ->  Materialize',), ('        ->  Nested Loop',), ('              ->  Index Only Scan using sj_a_key on sj j1',), ('              ->  Memoize',), ('                    Cache Key: j1.a',), ('                    Cache Mode: logical',), ('                    ->  Index Scan using sj_a_key on sj j2',), ('                          Index Cond: (a = j1.a)',)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM emp1 e1, emp1 e2 WHERE e1.id = e2.id AND e2.code <> e1.code
--Result--
[('Nested Loop',), ('  Output: e1.id, e1.code, e2.id, e2.code',), ('  Inner Unique: true',), ('  ->  Seq Scan on public.emp1 e1',), ('        Output: e1.id, e1.code',), ('  ->  Index Scan using emp1_pkey on public.emp1 e2',), ('        Output: e2.id, e2.code',), ('        Index Cond: (e2.id = e1.id)',), ('        Filter: (e2.code <> e1.code)',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT count(*) FROM emp1 c1, emp1 c2, emp1 c3 WHERE c1.id=c2.id AND c1.id*c2.id=c3.id*c3.id
--Result--
[('Aggregate',), ('  ->  Nested Loop',), ('        ->  Nested Loop',), ('              ->  Seq Scan on emp1 c1',), ('              ->  Index Only Scan using emp1_pkey on emp1 c2',), ('                    Index Cond: (id = c1.id)',), ('        ->  Index Scan using emp1_expr_idx on emp1 c3',), ('              Index Cond: ((id * id) = (c1.id * c2.id))',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT c1.code FROM emp1 c1 LEFT JOIN emp1 c2 ON c1.id = c2.id WHERE c2.id IS NOT NULL EXCEPT ALL SELECT c3.code FROM emp1 c3
--Result--
[('HashSetOp Except All',), ('  ->  Append',), ('        ->  Subquery Scan on "*SELECT* 1"',), ('              ->  Nested Loop',), ('                    ->  Seq Scan on emp1 c2',), ('                          Filter: (id IS NOT NULL)',), ('                    ->  Index Scan using emp1_pkey on emp1 c1',), ('                          Index Cond: (id = c2.id)',), ('        ->  Subquery Scan on "*SELECT* 2"',), ('              ->  Seq Scan on emp1 c3',)]
+--------------------+
--Query--
explain (costs off) select * from emp1 t1 left join     (select coalesce(t3.code, 1) from emp1 t2         left join (emp1 t3 join emp1 t4 on t3.id = t4.id)         on true) on true
--Result--
[('Nested Loop Left Join',), ('  ->  Seq Scan on emp1 t1',), ('  ->  Materialize',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on emp1 t2',), ('              ->  Materialize',), ('                    ->  Nested Loop',), ('                          ->  Seq Scan on emp1 t3',), ('                          ->  Index Only Scan using emp1_pkey on emp1 t4',), ('                                Index Cond: (id = t3.id)',)]
+--------------------+
--Query--
explain (verbose, costs off) select 1 from emp1 t1 left join     ((select 1 as x, * from emp1 t2) s1 inner join         (select * from emp1 t3) s2 on s1.id = s2.id)     on true where s1.x = 1
--Result--
[('Nested Loop',), ('  Output: 1',), ('  ->  Seq Scan on public.emp1 t1',), ('        Output: t1.id, t1.code',), ('  ->  Materialize',), ('        ->  Nested Loop',), ('              Inner Unique: true',), ('              ->  Seq Scan on public.emp1 t2',), ('                    Output: t2.id, t2.code',), ('                    Filter: (1 = 1)',), ('              ->  Index Only Scan using emp1_pkey on public.emp1 t3',), ('                    Output: t3.id',), ('                    Index Cond: (t3.id = t2.id)',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from emp1 t1 join emp1 t2 on t1.id = t2.id left join     lateral (select t1.id as t1id, * from generate_series(1,1) t3) s on true
--Result--
[('Nested Loop Left Join',), ('  Output: t1.id, t1.code, t2.id, t2.code, (t1.id), t3.t3',), ('  ->  Nested Loop',), ('        Output: t1.id, t1.code, t2.id, t2.code',), ('        Inner Unique: true',), ('        ->  Seq Scan on public.emp1 t1',), ('              Output: t1.id, t1.code',), ('        ->  Index Scan using emp1_pkey on public.emp1 t2',), ('              Output: t2.id, t2.code',), ('              Index Cond: (t2.id = t1.id)',), ('  ->  Function Scan on pg_catalog.generate_series t3',), ('        Output: t3.t3, t1.id',), ('        Function Call: generate_series(1, 1)',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from generate_series(1,10) t1(id) left join     lateral (select t1.id as t1id, t2.id from emp1 t2 join emp1 t3 on t2.id = t3.id) on true
--Result--
[('Nested Loop Left Join',), ('  Output: t1.id, (t1.id), t2.id',), ('  ->  Function Scan on pg_catalog.generate_series t1',), ('        Output: t1.id',), ('        Function Call: generate_series(1, 10)',), ('  ->  Nested Loop',), ('        Output: t2.id, t1.id',), ('        Inner Unique: true',), ('        ->  Seq Scan on public.emp1 t2',), ('              Output: t2.id, t2.code',), ('        ->  Index Only Scan using emp1_pkey on public.emp1 t3',), ('              Output: t3.id',), ('              Index Cond: (t3.id = t2.id)',)]
+--------------------+
--Query--
explain (costs off) select * from emp1 t1    inner join emp1 t2 on t1.id = t2.id     left join emp1 t3 on t1.id > 1 and t1.id < 2
--Result--
[('Nested Loop Left Join',), ('  Join Filter: ((t1.id > 1) AND (t1.id < 2))',), ('  ->  Nested Loop',), ('        ->  Seq Scan on emp1 t1',), ('        ->  Index Scan using emp1_pkey on emp1 t2',), ('              Index Cond: (id = t1.id)',), ('  ->  Materialize',), ('        ->  Seq Scan on emp1 t3',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) WITH t1 AS (SELECT * FROM emp1) UPDATE emp1 SET code = t1.code + 1 FROM t1 WHERE t1.id = emp1.id RETURNING emp1.id, emp1.code, t1.code
--Result--
[('Update on emp1',), ('  ->  Nested Loop',), ('        ->  Seq Scan on emp1',), ('        ->  Index Scan using emp1_pkey on emp1 emp1_1',), ('              Index Cond: (id = emp1.id)',)]
+--------------------+
--Query--
WITH t1 AS (SELECT * FROM emp1) UPDATE emp1 SET code = t1.code + 1 FROM t1 WHERE t1.id = emp1.id RETURNING emp1.id, emp1.code, t1.code
--Result--
[(1, 2, 1), (2, 2, 1)]
+--------------------+
--Query--
TRUNCATE emp1
--Result--
[]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) UPDATE sj sq SET b = 1 FROM sj as sz WHERE sq.a = sz.a
--Result--
[('Update on sj sq',), ('  ->  Nested Loop',), ('        Join Filter: (sq.a = sz.a)',), ('        ->  Seq Scan on sj sq',), ('        ->  Materialize',), ('              ->  Seq Scan on sj sz',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) DELETE FROM sj
--Result--
[('Update on sj sj_1',), ('  ->  Nested Loop',), ('        Join Filter: (sj.a = sj_1.a)',), ('        ->  Seq Scan on sj sj_1',), ('        ->  Materialize',), ('              ->  Seq Scan on sj',)]
+--------------------+
--Query--
explain (costs off) select 1 from emp1 full join     (select * from emp1 t1 join         emp1 t2 join emp1 t3 on t2.id = t3.id         on true     where false) s on true where false
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
select 1 from emp1 full join     (select * from emp1 t1 join         emp1 t2 join emp1 t3 on t2.id = t3.id         on true     where false) s on true where false
--Result--
[]
+--------------------+
--Query--
explain (costs off) select * from emp1 t1 where exists (select * from emp1 t2                                     where t2.id = t1.code and t2.code > 0)
--Result--
[('Nested Loop',), ('  ->  Seq Scan on emp1 t1',), ('  ->  Index Scan using emp1_pkey on emp1 t2',), ('        Index Cond: (id = t1.code)',), ('        Filter: (code > 0)',)]
+--------------------+
--Query--
select * from emp1 t1 where exists (select * from emp1 t2                                     where t2.id = t1.code and t2.code > 0)
--Result--
[(1, 1), (2, 1)]
+--------------------+
--Query--
vacuum analyze sl
--Result--
[]
+--------------------+
--Query--
explain (costs off) select * from sl t1, sl t2 where t1.a = t2.a and t1.b = 1 and t2.b = 2
--Result--
[('Nested Loop',), ('  Join Filter: (t1.a = t2.a)',), ('  ->  Seq Scan on sl t1',), ('        Filter: (b = 1)',), ('  ->  Seq Scan on sl t2',), ('        Filter: (b = 2)',)]
+--------------------+
--Query--
explain (costs off) select * from sl t1, sl t2 where t1.a = t2.a and t1.b = 1 and t2.b = 2   and t1.c IS NOT NULL and t2.c IS NOT NULL   and t2.b IS NOT NULL and t1.b IS NOT NULL   and t1.a IS NOT NULL and t2.a IS NOT NULL
--Result--
[('Nested Loop',), ('  Join Filter: (t1.a = t2.a)',), ('  ->  Seq Scan on sl t1',), ('        Filter: ((c IS NOT NULL) AND (b IS NOT NULL) AND (a IS NOT NULL) AND (b = 1))',), ('  ->  Seq Scan on sl t2',), ('        Filter: ((c IS NOT NULL) AND (b IS NOT NULL) AND (a IS NOT NULL) AND (b = 2))',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from sl t1, sl t2 where t1.b = t2.b and t2.a = 3 and t1.a = 3   and t1.c IS NOT NULL and t2.c IS NOT NULL   and t2.b IS NOT NULL and t1.b IS NOT NULL   and t1.a IS NOT NULL and t2.a IS NOT NULL
--Result--
[('Nested Loop',), ('  Output: t1.a, t1.b, t1.c, t2.a, t2.b, t2.c',), ('  Inner Unique: true',), ('  Join Filter: (t1.b = t2.b)',), ('  ->  Seq Scan on public.sl t1',), ('        Output: t1.a, t1.b, t1.c',), ('        Filter: ((t1.c IS NOT NULL) AND (t1.b IS NOT NULL) AND (t1.a IS NOT NULL) AND (t1.a = 3))',), ('  ->  Seq Scan on public.sl t2',), ('        Output: t2.a, t2.b, t2.c',), ('        Filter: ((t2.c IS NOT NULL) AND (t2.b IS NOT NULL) AND (t2.a IS NOT NULL) AND (t2.a = 3))',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT n2.a FROM sj n1, sj n2 WHERE n1.a <> n2.a AND n2.a = 1
--Result--
[('Nested Loop',), ('  Join Filter: (n1.a <> n2.a)',), ('  ->  Seq Scan on sj n2',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on sj n1',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM (SELECT n2.a FROM sj n1, sj n2 WHERE n1.a <> n2.a) q0, sl WHERE q0.a = 1
--Result--
[('Nested Loop',), ('  Join Filter: (n1.a <> n2.a)',), ('  ->  Nested Loop',), ('        ->  Seq Scan on sl',), ('        ->  Seq Scan on sj n2',), ('              Filter: (a = 1)',), ('  ->  Seq Scan on sj n1',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM sj_t1 JOIN ( 	SELECT sj_t2.id AS id FROM sj_t2 	WHERE EXISTS 		( 		SELECT TRUE FROM sj_t3,sj_t4 WHERE sj_t3.a = 1 AND sj_t3.id = sj_t2.id 		) 	) t2t3t4 ON sj_t1.id = t2t3t4.id JOIN ( 	SELECT sj_t2.id AS id FROM sj_t2 	WHERE EXISTS 		( 		SELECT TRUE FROM sj_t3,sj_t4 WHERE sj_t3.a = 1 AND sj_t3.id = sj_t2.id 		) 	) _t2t3t4 ON sj_t1.id = _t2t3t4.id
--Result--
[('Nested Loop',), ('  Join Filter: (sj_t3.id = sj_t1.id)',), ('  ->  Nested Loop',), ('        Join Filter: (sj_t2.id = sj_t3.id)',), ('        ->  Nested Loop Semi Join',), ('              ->  Nested Loop',), ('                    ->  HashAggregate',), ('                          Group Key: sj_t3.id',), ('                          ->  Nested Loop',), ('                                ->  Seq Scan on sj_t4',), ('                                ->  Materialize',), ('                                      ->  Bitmap Heap Scan on sj_t3',), ('                                            Recheck Cond: (a = 1)',), ('                                            ->  Bitmap Index Scan on sj_t3_a_id_idx',), ('                                                  Index Cond: (a = 1)',), ('                    ->  Index Only Scan using sj_t2_id_idx on sj_t2 sj_t2_1',), ('                          Index Cond: (id = sj_t3.id)',), ('              ->  Nested Loop',), ('                    ->  Index Only Scan using sj_t3_a_id_idx on sj_t3 sj_t3_1',), ('                          Index Cond: ((a = 1) AND (id = sj_t3.id))',), ('                    ->  Seq Scan on sj_t4 sj_t4_1',), ('        ->  Index Only Scan using sj_t2_id_idx on sj_t2',), ('              Index Cond: (id = sj_t2_1.id)',), ('  ->  Seq Scan on sj_t1',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT a1.a FROM sj a1,sj a2 WHERE (a1.a=a2.a) FOR UPDATE
--Result--
[('LockRows',), ('  ->  Nested Loop',), ('        Join Filter: (a1.a = a2.a)',), ('        ->  Seq Scan on sj a1',), ('        ->  Materialize',), ('              ->  Seq Scan on sj a2',)]
+--------------------+
--Query--
select * from (values(1)) x(lb),   lateral generate_series(lb,4) x4
--Result--
[(1, 1), (1, 2), (1, 3), (1, 4)]
+--------------------+
--Query--
select * from (values(1)) x(lb),   lateral (values(lb)) y(lbcopy)
--Result--
[(1, 1)]
+--------------------+
--Query--
explain (verbose, costs off) select * from   (select 0 as val0) as ss0   left join (select 1 as val) as ss1 on true   left join lateral (select ss1.val as val_filtered where false) as ss2 on true
--Result--
[('Nested Loop Left Join',), ('  Output: 0, (1), ((1))',), ('  Join Filter: false',), ('  ->  Result',), ('        Output: 1',), ('  ->  Result',), ('        Output: (1)',), ('        One-Time Filter: false',)]
+--------------------+
--Query--
select * from   (select 0 as val0) as ss0   left join (select 1 as val) as ss1 on true   left join lateral (select ss1.val as val_filtered where false) as ss2 on true
--Result--
[(0, 1, None)]
+--------------------+
--Query--
explain (verbose, costs off) select * from   (select 1 as x offset 0) x cross join (select 2 as y offset 0) y   left join lateral (     select * from (select 3 as z offset 0) z where z.z = x.x   ) zz on zz.z = y.y
--Result--
[('Nested Loop Left Join',), ('  Output: (1), (2), (3)',), ('  Join Filter: (((3) = (1)) AND ((3) = (2)))',), ('  ->  Nested Loop',), ('        Output: (1), (2)',), ('        ->  Result',), ('              Output: 1',), ('        ->  Result',), ('              Output: 2',), ('  ->  Result',), ('        Output: 3',)]
+--------------------+
--Query--
select * from   ((select 2 as v) union all (select 3 as v)) as q1   cross join lateral   ((select * from       ((select 4 as v) union all (select 5 as v)) as q3)    union all    (select q1.v)   ) as q2
--Result--
[(2, 4), (2, 5), (2, 2), (3, 4), (3, 5), (3, 3)]
+--------------------+
--Query--
explain (verbose, costs off) select t1.b, ss.phv from join_ut1 t1 left join lateral               (select t2.a as t2a, t3.a t3a, least(t1.a, t2.a, t3.a) phv 					  from join_pt1 t2 join join_ut1 t3 on t2.a = t3.b) ss               on t1.a = ss.t2a order by t1.a
--Result--
[('Sort',), ('  Output: t1.b, (LEAST(t1.a, t2.a, t3.a)), t1.a',), ('  Sort Key: t1.a',), ('  ->  Nested Loop Left Join',), ('        Output: t1.b, (LEAST(t1.a, t2.a, t3.a)), t1.a',), ('        ->  Seq Scan on public.join_ut1 t1',), ('              Output: t1.a, t1.b, t1.c',), ('        ->  Hash Join',), ('              Output: t2.a, LEAST(t1.a, t2.a, t3.a)',), ('              Hash Cond: (t3.b = t2.a)',), ('              ->  Seq Scan on public.join_ut1 t3',), ('                    Output: t3.a, t3.b, t3.c',), ('              ->  Hash',), ('                    Output: t2.a',), ('                    ->  Append',), ('                          ->  Seq Scan on public.join_pt1p1p1 t2_1',), ('                                Output: t2_1.a',), ('                                Filter: (t1.a = t2_1.a)',), ('                          ->  Seq Scan on public.join_pt1p2 t2_2',), ('                                Output: t2_2.a',), ('                                Filter: (t1.a = t2_2.a)',)]
+--------------------+
--Query--
select t1.b, ss.phv from join_ut1 t1 left join lateral               (select t2.a as t2a, t3.a t3a, least(t1.a, t2.a, t3.a) phv 					  from join_pt1 t2 join join_ut1 t3 on t2.a = t3.b) ss               on t1.a = ss.t2a order by t1.a
--Result--
[(2, None), (101, 101)]
+--------------------+
--Query--
analyze fkest
--Result--
[]
+--------------------+
--Query--
explain (costs off) select * from fkest f1   join fkest f2 on (f1.x = f2.x and f1.x10 = f2.x10b and f1.x100 = f2.x100)   join fkest f3 on f1.x = f3.x   where f1.x100 = 2
--Result--
[('Nested Loop',), ('  ->  Hash Join',), ('        Hash Cond: ((f2.x = f1.x) AND (f2.x10b = f1.x10))',), ('        ->  Seq Scan on fkest f2',), ('              Filter: (x100 = 2)',), ('        ->  Hash',), ('              ->  Seq Scan on fkest f1',), ('                    Filter: (x100 = 2)',), ('  ->  Index Scan using fkest_x_x10_x100_idx on fkest f3',), ('        Index Cond: (x = f1.x)',)]
+--------------------+
--Query--
explain (costs off) select * from fkest f1   join fkest f2 on (f1.x = f2.x and f1.x10 = f2.x10b and f1.x100 = f2.x100)   join fkest f3 on f1.x = f3.x   where f1.x100 = 2
--Result--
[('Hash Join',), ('  Hash Cond: ((f2.x = f1.x) AND (f2.x10b = f1.x10))',), ('  ->  Hash Join',), ('        Hash Cond: (f3.x = f2.x)',), ('        ->  Seq Scan on fkest f3',), ('        ->  Hash',), ('              ->  Seq Scan on fkest f2',), ('                    Filter: (x100 = 2)',), ('  ->  Hash',), ('        ->  Seq Scan on fkest f1',), ('              Filter: (x100 = 2)',)]
+--------------------+
--Query--
analyze fkest
--Result--
[]
+--------------------+
--Query--
analyze fkest1
--Result--
[]
+--------------------+
--Query--
explain (costs off) select * from fkest f   left join fkest1 f1 on f.a = f1.a and f.b = f1.b   left join fkest1 f2 on f.a = f2.a and f.b = f2.b   left join fkest1 f3 on f.a = f3.a and f.b = f3.b where f.c = 1
--Result--
[('Nested Loop Left Join',), ('  ->  Nested Loop Left Join',), ('        ->  Nested Loop Left Join',), ('              ->  Index Scan using fkest_c_key on fkest f',), ('                    Index Cond: (c = 1)',), ('              ->  Index Only Scan using fkest1_pkey on fkest1 f1',), ('                    Index Cond: ((a = f.a) AND (b = f.b))',), ('        ->  Index Only Scan using fkest1_pkey on fkest1 f2',), ('              Index Cond: ((a = f.a) AND (b = f.b))',), ('  ->  Index Only Scan using fkest1_pkey on fkest1 f3',), ('        Index Cond: ((a = f.a) AND (b = f.b))',)]
+--------------------+
--Query--
analyze j1
--Result--
[]
+--------------------+
--Query--
analyze j2
--Result--
[]
+--------------------+
--Query--
analyze j3
--Result--
[]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 inner join j2 on j1.id = j2.id
--Result--
[('Hash Join',), ('  Output: j1.id, j2.id',), ('  Inner Unique: true',), ('  Hash Cond: (j1.id = j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Hash',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 inner join j2 on j1.id > j2.id
--Result--
[('Nested Loop',), ('  Output: j1.id, j2.id',), ('  Join Filter: (j1.id > j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Materialize',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 inner join j3 on j1.id = j3.id
--Result--
[('Hash Join',), ('  Output: j1.id, j3.id',), ('  Inner Unique: true',), ('  Hash Cond: (j3.id = j1.id)',), ('  ->  Seq Scan on public.j3',), ('        Output: j3.id',), ('  ->  Hash',), ('        Output: j1.id',), ('        ->  Seq Scan on public.j1',), ('              Output: j1.id',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 left join j2 on j1.id = j2.id
--Result--
[('Hash Left Join',), ('  Output: j1.id, j2.id',), ('  Inner Unique: true',), ('  Hash Cond: (j1.id = j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Hash',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 right join j2 on j1.id = j2.id
--Result--
[('Hash Left Join',), ('  Output: j1.id, j2.id',), ('  Inner Unique: true',), ('  Hash Cond: (j2.id = j1.id)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id',), ('  ->  Hash',), ('        Output: j1.id',), ('        ->  Seq Scan on public.j1',), ('              Output: j1.id',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 full join j2 on j1.id = j2.id
--Result--
[('Hash Full Join',), ('  Output: j1.id, j2.id',), ('  Inner Unique: true',), ('  Hash Cond: (j1.id = j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Hash',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 cross join j2
--Result--
[('Nested Loop',), ('  Output: j1.id, j2.id',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Materialize',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 natural join j2
--Result--
[('Hash Join',), ('  Output: j1.id',), ('  Inner Unique: true',), ('  Hash Cond: (j1.id = j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Hash',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 inner join (select distinct id from j3) j3 on j1.id = j3.id
--Result--
[('Nested Loop',), ('  Output: j1.id, j3.id',), ('  Inner Unique: true',), ('  Join Filter: (j1.id = j3.id)',), ('  ->  Unique',), ('        Output: j3.id',), ('        ->  Sort',), ('              Output: j3.id',), ('              Sort Key: j3.id',), ('              ->  Seq Scan on public.j3',), ('                    Output: j3.id',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 inner join (select id from j3 group by id) j3 on j1.id = j3.id
--Result--
[('Nested Loop',), ('  Output: j1.id, j3.id',), ('  Inner Unique: true',), ('  Join Filter: (j1.id = j3.id)',), ('  ->  Group',), ('        Output: j3.id',), ('        Group Key: j3.id',), ('        ->  Sort',), ('              Output: j3.id',), ('              Sort Key: j3.id',), ('              ->  Seq Scan on public.j3',), ('                    Output: j3.id',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',)]
+--------------------+
--Query--
analyze j1
--Result--
[]
+--------------------+
--Query--
analyze j2
--Result--
[]
+--------------------+
--Query--
analyze j3
--Result--
[]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 inner join j2 on j1.id1 = j2.id1
--Result--
[('Nested Loop',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Join Filter: (j1.id1 = j2.id1)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
--Result--
[('Nested Loop',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Inner Unique: true',), ('  Join Filter: ((j1.id1 = j2.id1) AND (j1.id2 = j2.id2))',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 where j1.id2 = 1
--Result--
[('Nested Loop',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Join Filter: (j1.id1 = j2.id1)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',), ('        Filter: (j1.id2 = 1)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 left join j2 on j1.id1 = j2.id1 where j1.id2 = 1
--Result--
[('Nested Loop Left Join',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Join Filter: (j1.id1 = j2.id1)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',), ('        Filter: (j1.id2 = 1)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from j1 inner join j2 on j1.id2 = j2.id2
--Result--
[('Nested Loop',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Join Filter: (j2.id2 = j1.id2)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',)]
+--------------------+
--Query--
analyze j2
--Result--
[]
+--------------------+
--Query--
explain (costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1
--Result--
[('Merge Join',), ('  Merge Cond: (j1.id1 = j2.id1)',), ('  Join Filter: (j2.id2 = j1.id2)',), ('  ->  Index Scan using j1_id1_idx on j1',), ('  ->  Index Scan using j2_id1_idx on j2',)]
+--------------------+
--Query--
select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1
--Result--
[(1, 1, 1, 1), (1, 2, 1, 2)]
+--------------------+
--Query--
explain (costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 = any (array[1])
--Result--
[('Merge Join',), ('  Merge Cond: (j1.id1 = j2.id1)',), ('  Join Filter: (j2.id2 = j1.id2)',), ('  ->  Index Scan using j1_id1_idx on j1',), ('  ->  Index Scan using j2_id1_idx on j2',), ("        Index Cond: (id1 = ANY ('{1}'::integer[]))",)]
+--------------------+
--Query--
select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 = any (array[1])
--Result--
[(1, 1, 1, 1), (1, 2, 1, 2)]
+--------------------+
--Query--
explain (costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 >= any (array[1,5])
--Result--
[('Merge Join',), ('  Merge Cond: (j1.id1 = j2.id1)',), ('  Join Filter: (j2.id2 = j1.id2)',), ('  ->  Index Scan using j1_id1_idx on j1',), ('  ->  Index Only Scan using j2_pkey on j2',), ("        Index Cond: (id1 >= ANY ('{1,5}'::integer[]))",), ('        Filter: ((id1 % 1000) = 1)',)]
+--------------------+
--Query--
select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 >= any (array[1,5])
--Result--
[(1, 1, 1, 1), (1, 2, 1, 2)]
+--------------------+
