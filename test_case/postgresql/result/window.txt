--Query--
SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname) FROM empsalary ORDER BY depname, salary
--Result--
[('develop', 7, 4200, 25100), ('develop', 9, 4500, 25100), ('develop', 11, 5200, 25100), ('develop', 10, 5200, 25100), ('develop', 8, 6000, 25100), ('personnel', 5, 3500, 7400), ('personnel', 2, 3900, 7400), ('sales', 3, 4800, 14600), ('sales', 4, 4800, 14600), ('sales', 1, 5000, 14600)]
+--------------------+
--Query--
SELECT depname, empno, salary, rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary
--Result--
[('develop', 7, 4200, 1), ('develop', 9, 4500, 2), ('develop', 11, 5200, 3), ('develop', 10, 5200, 3), ('develop', 8, 6000, 5), ('personnel', 5, 3500, 1), ('personnel', 2, 3900, 2), ('sales', 3, 4800, 1), ('sales', 4, 4800, 1), ('sales', 1, 5000, 3)]
+--------------------+
--Query--
SELECT sum(salary), 	row_number() OVER (ORDER BY depname), 	sum(sum(salary)) OVER (ORDER BY depname DESC) FROM empsalary GROUP BY depname
--Result--
[(25100, 1, 47100.0), (7400, 2, 22000.0), (14600, 3, 14600.0)]
+--------------------+
--Query--
SELECT sum(salary) OVER w1, count(*) OVER w2 FROM empsalary WINDOW w1 AS (ORDER BY salary), w2 AS (ORDER BY salary)
--Result--
[(3500, 1), (7400, 2), (11600, 3), (16100, 4), (25700, 6), (25700, 6), (30700, 7), (41100, 9), (41100, 9), (47100, 10)]
+--------------------+
--Query--
SELECT sum(salary) OVER w, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary DESC)
--Result--
[(6000, 1), (16400, 2), (16400, 2), (20900, 4), (25100, 5), (3900, 1), (7400, 2), (5000, 1), (14600, 2), (14600, 2)]
+--------------------+
--Query--
SELECT empno, depname, salary, bonus, depadj, MIN(bonus) OVER (ORDER BY empno), MAX(depadj) OVER () FROM( 	SELECT *, 		CASE WHEN enroll_date < '2008-01-01' THEN 2008 - extract(YEAR FROM enroll_date) END * 500 AS bonus, 		CASE WHEN 			AVG(salary) OVER (PARTITION BY depname) < salary 		THEN 200 END AS depadj FROM empsalary )s
--Result--
[(1, 'sales', 5000, 1000.0, 200, 1000.0, 200), (2, 'personnel', 3900, 1000.0, 200, 1000.0, 200), (3, 'sales', 4800, 500.0, None, 500.0, 200), (4, 'sales', 4800, 500.0, None, 500.0, 200), (5, 'personnel', 3500, 500.0, None, 500.0, 200), (7, 'develop', 4200, None, None, 500.0, 200), (8, 'develop', 6000, 1000.0, 200, 500.0, 200), (9, 'develop', 4500, None, None, 500.0, 200), (10, 'develop', 5200, 500.0, 200, 500.0, 200), (11, 'develop', 5200, 500.0, 200, 500.0, 200)]
+--------------------+
--Query--
select x, lag(x, 1) over (order by x), lead(x, 3) over (order by x) from (select x::numeric as x from generate_series(1,10) x)
--Result--
[(1.0, None, 4.0), (2.0, 1.0, 5.0), (3.0, 2.0, 6.0), (4.0, 3.0, 7.0), (5.0, 4.0, 8.0), (6.0, 5.0, 9.0), (7.0, 6.0, 10.0), (8.0, 7.0, None), (9.0, 8.0, None), (10.0, 9.0, None)]
+--------------------+
--Query--
SELECT * FROM v_window
--Result--
[(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 19)]
+--------------------+
--Query--
SELECT pg_get_viewdef('v_window')
--Result--
[(' SELECT i,\n    sum(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS sum_rows\n   FROM generate_series(1, 10) i(i);',)]
+--------------------+
--Query--
SELECT * FROM v_window
--Result--
[(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18), (10, 9)]
+--------------------+
--Query--
SELECT * FROM v_window
--Result--
[(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18), (10, 9)]
+--------------------+
--Query--
SELECT * FROM v_window
--Result--
[(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 19)]
+--------------------+
--Query--
SELECT * FROM v_window
--Result--
[(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 19)]
+--------------------+
--Query--
SELECT * FROM v_window
--Result--
[(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 19)]
+--------------------+
--Query--
select first_value(salary) over(order by salary range between 1000 preceding and 1000 following), 	lead(salary) over(order by salary range between 1000 preceding and 1000 following), 	nth_value(salary, 1) over(order by salary range between 1000 preceding and 1000 following), 	salary from empsalary
--Result--
[(3500, 3900, 3500, 3500), (3500, 4200, 3500, 3900), (3500, 4500, 3500, 4200), (3500, 4800, 3500, 4500), (3900, 4800, 3900, 4800), (3900, 5000, 3900, 4800), (4200, 5200, 4200, 5000), (4200, 5200, 4200, 5200), (4200, 6000, 4200, 5200), (5000, None, 5000, 6000)]
+--------------------+
--Query--
select last_value(salary) over(order by salary range between 1000 preceding and 1000 following), 	lag(salary) over(order by salary range between 1000 preceding and 1000 following), 	salary from empsalary
--Result--
[(4500, None, 3500), (4800, 3500, 3900), (5200, 3900, 4200), (5200, 4200, 4500), (5200, 4500, 4800), (5200, 4800, 4800), (6000, 4800, 5000), (6000, 5000, 5200), (6000, 5200, 5200), (6000, 5200, 6000)]
+--------------------+
--Query--
select first_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following 	exclude ties), 	last_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following), 	salary, enroll_date from empsalary
--Result--
[(5000, 5200, 5000, datetime.date(2006, 10, 1)), (6000, 5200, 6000, datetime.date(2006, 10, 1)), (5000, 3500, 3900, datetime.date(2006, 12, 23)), (5000, 4200, 4800, datetime.date(2007, 8, 1)), (5000, 4200, 5200, datetime.date(2007, 8, 1)), (5000, 4200, 4800, datetime.date(2007, 8, 8)), (5000, 4200, 5200, datetime.date(2007, 8, 15)), (5000, 4200, 3500, datetime.date(2007, 12, 10)), (5000, 4200, 4500, datetime.date(2008, 1, 1)), (5000, 4200, 4200, datetime.date(2008, 1, 1))]
+--------------------+
--Query--
select x, y,        first_value(y) over w,        last_value(y) over w from   (select x, x as y from generate_series(1,5) as x    union all select null, 42    union all select null, 43) ss window w as   (order by x asc nulls first range between 2 preceding and 2 following)
--Result--
[(None, 42, 42, 43), (None, 43, 42, 43), (1, 1, 1, 3), (2, 2, 1, 4), (3, 3, 1, 5), (4, 4, 2, 5), (5, 5, 3, 5)]
+--------------------+
--Query--
select x, last_value(x) over (order by x::smallint range between current row and 2147450884 following) from generate_series(32764, 32766) x
--Result--
[(32764, 32766), (32765, 32766), (32766, 32766)]
+--------------------+
--Query--
WITH cte (x) AS (         SELECT * FROM generate_series(1, 35, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following)
--Result--
[(1, 4), (3, 9), (5, 15), (7, 21), (9, 27), (11, 33), (13, 39), (15, 45), (17, 51), (19, 57), (21, 63), (23, 69), (25, 75), (27, 81), (29, 87), (31, 93), (33, 99), (35, 68)]
+--------------------+
--Query--
WITH cte (x) AS (         SELECT * FROM generate_series(1, 35, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)
--Result--
[(1, 1), (3, 3), (5, 5), (7, 7), (9, 9), (11, 11), (13, 13), (15, 15), (17, 17), (19, 19), (21, 21), (23, 23), (25, 25), (27, 27), (29, 29), (31, 31), (33, 33), (35, 35)]
+--------------------+
--Query--
WITH cte (x) AS (         SELECT * FROM generate_series(1, 35, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x groups between 1 preceding and 1 following)
--Result--
[(1, 4), (3, 9), (5, 15), (7, 21), (9, 27), (11, 33), (13, 39), (15, 45), (17, 51), (19, 57), (21, 63), (23, 69), (25, 75), (27, 81), (29, 87), (31, 93), (33, 99), (35, 68)]
+--------------------+
--Query--
WITH cte (x) AS (         select 1 union all select 1 union all select 1 union all         SELECT * FROM generate_series(5, 49, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following)
--Result--
[(1, 2), (1, 3), (1, 7), (5, 13), (7, 21), (9, 27), (11, 33), (13, 39), (15, 45), (17, 51), (19, 57), (21, 63), (23, 69), (25, 75), (27, 81), (29, 87), (31, 93), (33, 99), (35, 105), (37, 111), (39, 117), (41, 123), (43, 129), (45, 135), (47, 141), (49, 96)]
+--------------------+
--Query--
WITH cte (x) AS (         select 1 union all select 1 union all select 1 union all         SELECT * FROM generate_series(5, 49, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)
--Result--
[(1, 3), (1, 3), (1, 3), (5, 5), (7, 7), (9, 9), (11, 11), (13, 13), (15, 15), (17, 17), (19, 19), (21, 21), (23, 23), (25, 25), (27, 27), (29, 29), (31, 31), (33, 33), (35, 35), (37, 37), (39, 39), (41, 41), (43, 43), (45, 45), (47, 47), (49, 49)]
+--------------------+
--Query--
WITH cte (x) AS (         select 1 union all select 1 union all select 1 union all         SELECT * FROM generate_series(5, 49, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x groups between 1 preceding and 1 following)
--Result--
[(1, 8), (1, 8), (1, 8), (5, 15), (7, 21), (9, 27), (11, 33), (13, 39), (15, 45), (17, 51), (19, 57), (21, 63), (23, 69), (25, 75), (27, 81), (29, 87), (31, 93), (33, 99), (35, 105), (37, 111), (39, 117), (41, 123), (43, 129), (45, 135), (47, 141), (49, 96)]
+--------------------+
--Query--
explain (costs off) select f1, sum(f1) over (partition by f1 order by f2                          range between 1 preceding and 1 following) from t1 where f1 = f2
--Result--
[('WindowAgg',), ('  ->  Sort',), ('        Sort Key: f1',), ('        ->  Seq Scan on t1',), ('              Filter: (f1 = f2)',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT     empno,     depname,     row_number() OVER (PARTITION BY depname ORDER BY enroll_date) rn,     rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN                  UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) rnk,     dense_rank() OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                        CURRENT ROW AND CURRENT ROW) drnk,     ntile(10) OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                     CURRENT ROW AND UNBOUNDED FOLLOWING) nt,     percent_rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN                          CURRENT ROW AND UNBOUNDED FOLLOWING) pr,     cume_dist() OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                       CURRENT ROW AND UNBOUNDED FOLLOWING) cd FROM empsalary
--Result--
[('WindowAgg',), ('  ->  Sort',), ('        Sort Key: depname, enroll_date',), ('        ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF, VERBOSE) SELECT     empno,     depname,     row_number() OVER (PARTITION BY depname ORDER BY enroll_date) rn,     rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN                  UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) rnk,     count(*) OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                    CURRENT ROW AND CURRENT ROW) cnt FROM empsalary
--Result--
[('WindowAgg',), ('  Output: empno, depname, (row_number() OVER (?)), (rank() OVER (?)), count(*) OVER (?), enroll_date',), ('  ->  WindowAgg',), ('        Output: depname, enroll_date, empno, row_number() OVER (?), rank() OVER (?)',), ('        ->  Sort',), ('              Output: depname, enroll_date, empno',), ('              Sort Key: empsalary.depname, empsalary.enroll_date',), ('              ->  Seq Scan on pg_temp.empsalary',), ('                    Output: depname, enroll_date, empno',)]
+--------------------+
--Query--
SELECT     empno,     depname,     row_number() OVER (PARTITION BY depname ORDER BY enroll_date) rn,     rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN                  UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) rnk,     count(*) OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                    CURRENT ROW AND CURRENT ROW) cnt FROM empsalary
--Result--
[(8, 'develop', 1, 1, 1), (10, 'develop', 2, 2, 1), (11, 'develop', 3, 3, 1), (9, 'develop', 4, 4, 2), (7, 'develop', 5, 4, 2), (2, 'personnel', 1, 1, 1), (5, 'personnel', 2, 2, 1), (1, 'sales', 1, 1, 1), (3, 'sales', 2, 2, 1), (4, 'sales', 3, 3, 1)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT depname,           sum(salary) OVER (PARTITION BY depname) depsalary,           min(salary) OVER (PARTITION BY depname || 'A', depname) depminsalary    FROM empsalary) emp WHERE depname = 'sales'
--Result--
[('Subquery Scan on emp',), ('  ->  WindowAgg',), ('        ->  WindowAgg',), ('              ->  Sort',), ("                    Sort Key: (((empsalary.depname)::text || 'A'::text))",), ('                    ->  Seq Scan on empsalary',), ("                          Filter: ((depname)::text = 'sales'::text)",)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT depname,           sum(salary) OVER (PARTITION BY enroll_date) enroll_salary,           min(salary) OVER (PARTITION BY depname) depminsalary    FROM empsalary) emp WHERE depname = 'sales'
--Result--
[('Subquery Scan on emp',), ("  Filter: ((emp.depname)::text = 'sales'::text)",), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.enroll_date',), ('              ->  WindowAgg',), ('                    ->  Sort',), ('                          Sort Key: empsalary.depname',), ('                          ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           row_number() OVER (ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3
--Result--
[('WindowAgg',), ('  Run Condition: (row_number() OVER (?) < 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.empno',), ('        ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
SELECT * FROM   (SELECT empno,           row_number() OVER (ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3
--Result--
[(1, 1), (2, 2)]
+--------------------+
--Query--
SELECT * FROM   (SELECT empno,           row_number() OVER (ORDER BY empno) rn    FROM empsalary) emp WHERE 3 > rn
--Result--
[(1, 1), (2, 2)]
+--------------------+
--Query--
SELECT * FROM   (SELECT empno,           row_number() OVER (ORDER BY empno) rn    FROM empsalary) emp WHERE 2 >= rn
--Result--
[(1, 1), (2, 2)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           rank() OVER (ORDER BY salary DESC) r    FROM empsalary) emp WHERE r <= 3
--Result--
[('WindowAgg',), ('  Run Condition: (rank() OVER (?) <= 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.salary DESC',), ('        ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
SELECT * FROM   (SELECT empno,           salary,           rank() OVER (ORDER BY salary DESC) r    FROM empsalary) emp WHERE r <= 3
--Result--
[(8, 6000, 1), (10, 5200, 2), (11, 5200, 2)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           dense_rank() OVER (ORDER BY salary DESC) dr    FROM empsalary) emp WHERE dr = 1
--Result--
[('Subquery Scan on emp',), ('  Filter: (emp.dr = 1)',), ('  ->  WindowAgg',), ('        Run Condition: (dense_rank() OVER (?) <= 1)',), ('        ->  Sort',), ('              Sort Key: empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
SELECT * FROM   (SELECT empno,           salary,           dense_rank() OVER (ORDER BY salary DESC) dr    FROM empsalary) emp WHERE dr = 1
--Result--
[(8, 6000, 1)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3
--Result--
[('WindowAgg',), ('  Run Condition: (count(*) OVER (?) <= 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.salary DESC',), ('        ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3
--Result--
[(8, 6000, 1), (10, 5200, 3), (11, 5200, 3)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(empno) OVER (ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3
--Result--
[('Subquery Scan on emp',), ('  Filter: (emp.c <= 3)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
SELECT * FROM   (SELECT empno,           salary,           count(empno) OVER (ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3
--Result--
[(8, 6000, 1), (10, 5200, 3), (11, 5200, 3)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) c    FROM empsalary) emp WHERE c >= 3
--Result--
[('WindowAgg',), ('  Run Condition: (count(*) OVER (?) >= 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.salary DESC',), ('        ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER () c    FROM empsalary) emp WHERE 11 <= c
--Result--
[('WindowAgg',), ('  Run Condition: (11 <= count(*) OVER (?))',), ('  ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC) c,           dense_rank() OVER (ORDER BY salary DESC) dr    FROM empsalary) emp WHERE dr = 1
--Result--
[('Subquery Scan on emp',), ('  Filter: (emp.dr = 1)',), ('  ->  WindowAgg',), ('        Run Condition: (dense_rank() OVER (?) <= 1)',), ('        ->  Sort',), ('              Sort Key: empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           depname,           row_number() OVER (PARTITION BY depname ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3
--Result--
[('WindowAgg',), ('  Run Condition: (row_number() OVER (?) < 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.depname, empsalary.empno',), ('        ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
SELECT * FROM   (SELECT empno,           depname,           row_number() OVER (PARTITION BY depname ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3
--Result--
[(7, 'develop', 1), (8, 'develop', 2), (2, 'personnel', 1), (5, 'personnel', 2), (1, 'sales', 1), (3, 'sales', 2)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT empno, depname FROM   (SELECT empno,           depname,           row_number() OVER (PARTITION BY depname ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3
--Result--
[('Subquery Scan on emp',), ('  ->  WindowAgg',), ('        Run Condition: (row_number() OVER (?) < 3)',), ('        ->  Sort',), ('              Sort Key: empsalary.depname, empsalary.empno',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           depname,           salary,           count(empno) OVER (PARTITION BY depname ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3
--Result--
[('Subquery Scan on emp',), ('  Filter: (emp.c <= 3)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.depname, empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
SELECT * FROM   (SELECT empno,           depname,           salary,           count(empno) OVER (PARTITION BY depname ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3
--Result--
[(8, 'develop', 6000, 1), (10, 'develop', 5200, 3), (11, 'develop', 5200, 3), (2, 'personnel', 3900, 1), (5, 'personnel', 3500, 2), (1, 'sales', 5000, 1), (4, 'sales', 4800, 3), (3, 'sales', 4800, 3)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           depname,           salary,           count(empno) OVER () c    FROM empsalary) emp WHERE c = 1
--Result--
[('Subquery Scan on emp',), ('  Filter: (emp.c = 1)',), ('  ->  WindowAgg',), ('        ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT *,           count(salary) OVER (PARTITION BY depname || '') c1,            row_number() OVER (PARTITION BY depname) rn,            count(*) OVER (PARTITION BY depname) c2,            count(*) OVER (PARTITION BY '' || depname) c3,            ntile(2) OVER (PARTITION BY depname) nt     FROM empsalary ) e WHERE rn <= 1 AND c1 <= 3 AND nt < 2
--Result--
[('Subquery Scan on e',), ('  Filter: (e.c1 <= 3)',), ('  ->  WindowAgg',), ('        Filter: (((row_number() OVER (?)) <= 1) AND ((ntile(2) OVER (?)) < 2))',), ('        ->  Sort',), ("              Sort Key: (((empsalary.depname)::text || ''::text))",), ('              ->  WindowAgg',), ('                    Run Condition: ((row_number() OVER (?) <= 1) AND (ntile(2) OVER (?) < 2))',), ('                    ->  Sort',), ('                          Sort Key: empsalary.depname',), ('                          ->  WindowAgg',), ('                                ->  Sort',), ("                                      Sort Key: ((''::text || (empsalary.depname)::text))",), ('                                      ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
SELECT * FROM   (SELECT *,           count(salary) OVER (PARTITION BY depname || '') c1,            row_number() OVER (PARTITION BY depname) rn,            count(*) OVER (PARTITION BY depname) c2,            count(*) OVER (PARTITION BY '' || depname) c3,            ntile(2) OVER (PARTITION BY depname) nt     FROM empsalary ) e WHERE rn <= 1 AND c1 <= 3 AND nt < 2
--Result--
[('personnel', 5, 3500, datetime.date(2007, 12, 10), 2, 1, 2, 2, 1), ('sales', 3, 4800, datetime.date(2007, 8, 1), 3, 1, 3, 3, 1)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT 1 FROM   (SELECT ntile(e2.salary) OVER (PARTITION BY e1.depname) AS c    FROM empsalary e1 LEFT JOIN empsalary e2 ON TRUE    WHERE e1.empno = e2.empno) s WHERE s.c = 1
--Result--
[('Subquery Scan on s',), ('  Filter: (s.c = 1)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: e1.depname',), ('              ->  Merge Join',), ('                    Merge Cond: (e1.empno = e2.empno)',), ('                    ->  Sort',), ('                          Sort Key: e1.empno',), ('                          ->  Seq Scan on empsalary e1',), ('                    ->  Sort',), ('                          Sort Key: e2.empno',), ('                          ->  Seq Scan on empsalary e2',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) c    FROM empsalary) emp WHERE c <= 3
--Result--
[('Subquery Scan on emp',), ('  Filter: (emp.c <= 3)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary) c    FROM empsalary) emp WHERE 3 <= c
--Result--
[('Subquery Scan on emp',), ('  Filter: (3 <= emp.c)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.salary',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(random()) OVER (ORDER BY empno DESC) c    FROM empsalary) emp WHERE c = 1
--Result--
[('Subquery Scan on emp',), ('  Filter: (emp.c = 1)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.empno DESC',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count((SELECT 1)) OVER (ORDER BY empno DESC) c    FROM empsalary) emp WHERE c = 1
--Result--
[('Subquery Scan on emp',), ('  Filter: (emp.c = 1)',), ('  ->  WindowAgg',), ('        InitPlan 1 (returns $0)',), ('          ->  Result',), ('        ->  Sort',), ('              Sort Key: empsalary.empno DESC',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT depname,           sum(salary) OVER (PARTITION BY depname order by empno) depsalary,           min(salary) OVER (PARTITION BY depname, empno order by enroll_date) depminsalary    FROM empsalary) emp WHERE depname = 'sales'
--Result--
[('Subquery Scan on emp',), ('  ->  WindowAgg',), ('        ->  WindowAgg',), ('              ->  Sort',), ('                    Sort Key: empsalary.empno, empsalary.enroll_date',), ('                    ->  Seq Scan on empsalary',), ("                          Filter: ((depname)::text = 'sales'::text)",)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT empno,        enroll_date,        depname,        sum(salary) OVER (PARTITION BY depname order by empno) depsalary,        min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, empno
--Result--
[('WindowAgg',), ('  ->  Incremental Sort',), ('        Sort Key: depname, empno',), ('        Presorted Key: depname',), ('        ->  WindowAgg',), ('              ->  Sort',), ('                    Sort Key: depname, enroll_date',), ('                    ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT empno,        enroll_date,        depname,        sum(salary) OVER (PARTITION BY depname order by empno) depsalary,        min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, enroll_date
--Result--
[('WindowAgg',), ('  ->  Incremental Sort',), ('        Sort Key: depname, enroll_date',), ('        Presorted Key: depname',), ('        ->  WindowAgg',), ('              ->  Sort',), ('                    Sort Key: depname, empno',), ('                    ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT DISTINCT        empno,        enroll_date,        depname,        sum(salary) OVER (PARTITION BY depname order by empno) depsalary,        min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, enroll_date
--Result--
[('Unique',), ('  ->  Incremental Sort',), ('        Sort Key: depname, enroll_date, empno, (sum(salary) OVER (?)), (min(salary) OVER (?))',), ('        Presorted Key: depname, enroll_date',), ('        ->  WindowAgg',), ('              ->  Incremental Sort',), ('                    Sort Key: depname, enroll_date',), ('                    Presorted Key: depname',), ('                    ->  WindowAgg',), ('                          ->  Sort',), ('                                Sort Key: depname, empno',), ('                                ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT DISTINCT        empno,        enroll_date,        depname,        sum(salary) OVER (PARTITION BY depname order by empno) depsalary,        min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, empno
--Result--
[('Unique',), ('  ->  Incremental Sort',), ('        Sort Key: depname, empno, enroll_date, (sum(salary) OVER (?)), (min(salary) OVER (?))',), ('        Presorted Key: depname, empno',), ('        ->  WindowAgg',), ('              ->  Incremental Sort',), ('                    Sort Key: depname, empno',), ('                    Presorted Key: depname',), ('                    ->  WindowAgg',), ('                          ->  Sort',), ('                                Sort Key: depname, enroll_date',), ('                                ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT   lead(1) OVER (PARTITION BY depname ORDER BY salary, enroll_date),   lag(1) OVER (PARTITION BY depname ORDER BY salary,enroll_date,empno) FROM empsalary
--Result--
[('WindowAgg',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: depname, salary, enroll_date, empno',), ('              ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT depname,           empno,           salary,           enroll_date,           row_number() OVER (PARTITION BY depname ORDER BY enroll_date) AS first_emp,           row_number() OVER (PARTITION BY depname ORDER BY enroll_date DESC) AS last_emp    FROM empsalary) emp WHERE first_emp = 1 OR last_emp = 1
--Result--
[('Subquery Scan on emp',), ('  Filter: ((emp.first_emp = 1) OR (emp.last_emp = 1))',), ('  ->  WindowAgg',), ('        ->  Incremental Sort',), ('              Sort Key: empsalary.depname, empsalary.enroll_date',), ('              Presorted Key: empsalary.depname',), ('              ->  WindowAgg',), ('                    ->  Sort',), ('                          Sort Key: empsalary.depname, empsalary.enroll_date DESC',), ('                          ->  Seq Scan on empsalary',)]
+--------------------+
--Query--
SELECT * FROM   (SELECT depname,           empno,           salary,           enroll_date,           row_number() OVER (PARTITION BY depname ORDER BY enroll_date) AS first_emp,           row_number() OVER (PARTITION BY depname ORDER BY enroll_date DESC) AS last_emp    FROM empsalary) emp WHERE first_emp = 1 OR last_emp = 1
--Result--
[('develop', 8, 6000, datetime.date(2006, 10, 1), 1, 5), ('develop', 7, 4200, datetime.date(2008, 1, 1), 5, 1), ('personnel', 2, 3900, datetime.date(2006, 12, 23), 1, 2), ('personnel', 5, 3500, datetime.date(2007, 12, 10), 2, 1), ('sales', 1, 5000, datetime.date(2006, 10, 1), 1, 3), ('sales', 4, 4800, datetime.date(2007, 8, 8), 3, 1)]
+--------------------+
--Query--
SELECT 	p::text || ',' || i::text || ':' || COALESCE(v::text, 'NULL') AS row, 	logging_agg_nonstrict(v) over wnd as nstrict, 	logging_agg_nonstrict_initcond(v) over wnd as nstrict_init, 	logging_agg_strict(v::text) over wnd as strict, 	logging_agg_strict_initcond(v) over wnd as strict_init FROM (VALUES 	(1, 1, NULL), 	(1, 2, 'a'), 	(1, 3, 'b'), 	(1, 4, NULL), 	(1, 5, NULL), 	(1, 6, 'c'), 	(2, 1, NULL), 	(2, 2, 'x'), 	(3, 1, 'z') ) AS t(p, i, v) WINDOW wnd AS (PARTITION BY P ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY p, i
--Result--
[('1,1:NULL', '+NULL', 'MI+NULL', None, 'MI'), ('1,2:a', "+NULL+'a'", "MI+NULL+'a'", 'a', "MI+'a'"), ('1,3:b', "+NULL+'a'-NULL+'b'", "MI+NULL+'a'-NULL+'b'", "a+'b'", "MI+'a'+'b'"), ('1,4:NULL', "+NULL+'a'-NULL+'b'-'a'+NULL", "MI+NULL+'a'-NULL+'b'-'a'+NULL", "a+'b'-'a'", "MI+'a'+'b'-'a'"), ('1,5:NULL', "+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL", "MI+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL", None, 'MI'), ('1,6:c', "+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL-NULL+'c'", "MI+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL-NULL+'c'", 'c', "MI+'c'"), ('2,1:NULL', '+NULL', 'MI+NULL', None, 'MI'), ('2,2:x', "+NULL+'x'", "MI+NULL+'x'", 'x', "MI+'x'"), ('3,1:z', "+'z'", "MI+'z'", 'z', "MI+'z'")]
+--------------------+
--Query--
SELECT 	p::text || ',' || i::text || ':' || 		CASE WHEN f THEN COALESCE(v::text, 'NULL') ELSE '-' END as row, 	logging_agg_nonstrict(v) filter(where f) over wnd as nstrict_filt, 	logging_agg_nonstrict_initcond(v) filter(where f) over wnd as nstrict_init_filt, 	logging_agg_strict(v::text) filter(where f) over wnd as strict_filt, 	logging_agg_strict_initcond(v) filter(where f) over wnd as strict_init_filt FROM (VALUES 	(1, 1, true,  NULL), 	(1, 2, false, 'a'), 	(1, 3, true,  'b'), 	(1, 4, false, NULL), 	(1, 5, false, NULL), 	(1, 6, false, 'c'), 	(2, 1, false, NULL), 	(2, 2, true,  'x'), 	(3, 1, true,  'z') ) AS t(p, i, f, v) WINDOW wnd AS (PARTITION BY p ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY p, i
--Result--
[('1,1:NULL', '+NULL', 'MI+NULL', None, 'MI'), ('1,2:-', '+NULL', 'MI+NULL', None, 'MI'), ('1,3:b', "+'b'", "MI+'b'", 'b', "MI+'b'"), ('1,4:-', "+'b'", "MI+'b'", 'b', "MI+'b'"), ('1,5:-', None, 'MI', None, 'MI'), ('1,6:-', None, 'MI', None, 'MI'), ('2,1:-', None, 'MI', None, 'MI'), ('2,2:x', "+'x'", "MI+'x'", 'x', "MI+'x'"), ('3,1:z', "+'z'", "MI+'z'", 'z', "MI+'z'")]
+--------------------+
--Query--
SELECT 	i::text || ':' || COALESCE(v::text, 'NULL') as row, 	logging_agg_strict(v::text) 		over wnd as inverse, 	logging_agg_strict(v::text || CASE WHEN random() < 0 then '?' ELSE '' END) 		over wnd as noinverse FROM (VALUES 	(1, 'a'), 	(2, 'b'), 	(3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY i
--Result--
[('1:a', 'a', 'a'), ('2:b', "a+'b'", "a*'b'"), ('3:c', "a+'b'-'a'+'c'", "b*'c'")]
+--------------------+
--Query--
SELECT 	i::text || ':' || COALESCE(v::text, 'NULL') as row, 	logging_agg_strict(v::text) filter(where true) 		over wnd as inverse, 	logging_agg_strict(v::text) filter(where random() >= 0) 		over wnd as noinverse FROM (VALUES 	(1, 'a'), 	(2, 'b'), 	(3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY i
--Result--
[('1:a', 'a', 'a'), ('2:b', "a+'b'", "a*'b'"), ('3:c', "a+'b'-'a'+'c'", "b*'c'")]
+--------------------+
--Query--
SELECT 	logging_agg_strict(v::text) OVER wnd FROM (VALUES 	(1, 'a'), 	(2, 'b'), 	(3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN CURRENT ROW AND CURRENT ROW) ORDER BY i
--Result--
[('a',), ('b',), ('c',)]
+--------------------+
--Query--
WITH vs AS ( 	SELECT i, (random() * 100)::int4 AS v 	FROM generate_series(1, 100) AS i ), sum_following AS ( 	SELECT i, SUM(v) OVER 		(ORDER BY i DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS s 	FROM vs ) SELECT DISTINCT 	sum_following.s = sum_int_randomrestart(v) OVER fwd AS eq1, 	-sum_following.s = sum_int_randomrestart(-v) OVER fwd AS eq2, 	100*3+(vs.i-1)*3 = length(logging_agg_nonstrict(''::text) OVER fwd) AS eq3 FROM vs JOIN sum_following ON sum_following.i = vs.i WINDOW fwd AS ( 	ORDER BY vs.i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )
--Result--
[(True, True, True)]
+--------------------+
--Query--
SELECT i,AVG(v::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
--Result--
[(1, 1.5), (2, 2.0), (3, None), (4, None)]
+--------------------+
--Query--
SELECT i,SUM(v::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
--Result--
[(1, 3), (2, 2), (3, None), (4, None)]
+--------------------+
--Query--
SELECT SUM(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1.01),(2,2),(3,3)) v(i,n)
--Result--
[(6.01,), (5.0,), (3.0,)]
+--------------------+
--Query--
SELECT i,COUNT(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
--Result--
[(1, 2), (2, 1), (3, 0), (4, 0)]
+--------------------+
--Query--
SELECT VAR_POP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
--Result--
[(21704.0,), (13868.75,), (11266.666666666668,), (4225.0,), (0.0,)]
+--------------------+
--Query--
SELECT VAR_SAMP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
--Result--
[(27130.0,), (18491.666666666668,), (16900.0,), (8450.0,), (None,)]
+--------------------+
--Query--
SELECT VARIANCE(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
--Result--
[(27130.0,), (18491.666666666668,), (16900.0,), (8450.0,), (None,)]
+--------------------+
--Query--
SELECT STDDEV_POP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
--Result--
[(147.322774885623,), (147.322774885623,), (117.765657133139,), (106.144555520604,), (65.0,), (0.0,)]
+--------------------+
--Query--
SELECT STDDEV_SAMP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
--Result--
[(164.711869639076,), (164.711869639076,), (135.984067694222,), (130.0,), (91.92388155425118,), (None,)]
+--------------------+
--Query--
SELECT STDDEV(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
--Result--
[(164.711869639076,), (164.711869639076,), (135.984067694222,), (130.0,), (91.92388155425118,), (None,)]
+--------------------+
--Query--
SELECT a, b,        SUM(b) OVER(ORDER BY A ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) FROM (VALUES(1,1::numeric),(2,2),(3,'NaN'),(4,3),(5,4)) t(a,b)
--Result--
[(1, 1.0, 1.0), (2, 2.0, 3.0), (3, nan, nan), (4, 3.0, nan), (5, 4.0, 7.0)]
+--------------------+
--Query--
SELECT to_char(SUM(n::float8) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING),'999999999999999999999D9')   FROM (VALUES(1,1e20),(2,1)) n(i,n)
--Result--
[(' 100000000000000000000',), ('                     1.0',)]
+--------------------+
--Query--
SELECT i, b, bool_and(b) OVER w, bool_or(b) OVER w   FROM (VALUES (1,true), (2,true), (3,false), (4,false), (5,true)) v(i,b)   WINDOW w AS (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)
--Result--
[(1, True, True, True), (2, True, False, True), (3, False, False, False), (4, False, False, True), (5, True, True, True)]
+--------------------+
--Query--
SELECT array_agg(i) OVER w   FROM generate_series(1,5) i WINDOW w AS (ORDER BY i ROWS BETWEEN (('foo' < 'foobar')::integer) PRECEDING AND CURRENT ROW)
--Result--
[([1],), ([1, 2],), ([2, 3],), ([3, 4],), ([4, 5],)]
+--------------------+
--Query--
EXPLAIN (costs off) SELECT * FROM pg_temp.f(2)
--Result--
[('Subquery Scan on f',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: s.s',), ('              ->  Function Scan on generate_series s',)]
+--------------------+
--Query--
SELECT * FROM pg_temp.f(2)
--Result--
[([1, 2, 3],), ([2, 3, 4],), ([3, 4, 5],), ([4, 5],), ([5],)]
+--------------------+
