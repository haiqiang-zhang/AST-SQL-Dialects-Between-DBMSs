--Query--
SELECT generate_series(1, 3)
--Result--
[(1,), (2,), (3,)]
+--------------------+
--Query--
explain (verbose, costs off) SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4)
--Result--
[('ProjectSet',), ('  Output: generate_series(1, (generate_series(1, 3))), (generate_series(2, 4))',), ('  ->  ProjectSet',), ('        Output: generate_series(1, 3), generate_series(2, 4)',), ('        ->  Result',)]
+--------------------+
--Query--
explain (verbose, costs off) SELECT unnest(ARRAY[1, 2]) FROM few WHERE false
--Result--
[('ProjectSet',), ("  Output: unnest('{1,2}'::integer[])",), ('  ->  Result',), ('        One-Time Filter: false',)]
+--------------------+
--Query--
SELECT unnest(ARRAY[1, 2]) FROM few WHERE false
--Result--
[]
+--------------------+
--Query--
explain (verbose, costs off) SELECT * FROM few f1,   (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss
--Result--
[('Result',), ('  Output: f1.id, f1.dataa, f1.datab, ss.unnest',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
SELECT * FROM few f1,   (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss
--Result--
[]
+--------------------+
--Query--
SELECT few.id, generate_series(1,3) g FROM few ORDER BY id DESC
--Result--
[(3, 1), (3, 2), (3, 3), (2, 1), (2, 2), (2, 3), (1, 1), (1, 2), (1, 3)]
+--------------------+
--Query--
SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, g DESC
--Result--
[(1, 3), (1, 2), (1, 1), (2, 3), (2, 2), (2, 1), (3, 3), (3, 2), (3, 1)]
+--------------------+
--Query--
SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa
--Result--
[('a', 1, 1, 1, 1), ('a', 1, 1, 1, 1), ('a', 1, 1, 1, 3)]
+--------------------+
--Query--
SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1 HAVING count(*) > 1
--Result--
[('a', 1, 2)]
+--------------------+
--Query--
SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa ORDER BY 2
--Result--
[('a', 2)]
+--------------------+
--Query--
SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa, unnest('{1,1,3}'::int[]) ORDER BY 2
--Result--
[('a', 2), ('a', 4)]
+--------------------+
--Query--
SELECT sum((3 = ANY(SELECT generate_series(1,4)))::int)
--Result--
[(1,)]
+--------------------+
--Query--
SELECT id,lag(id) OVER(), count(*) OVER(), generate_series(1,3) FROM few
--Result--
[(1, None, 3, 1), (1, None, 3, 2), (1, None, 3, 3), (2, 1, 3, 1), (2, 1, 3, 2), (2, 1, 3, 3), (3, 2, 3, 1), (3, 2, 3, 2), (3, 2, 3, 3)]
+--------------------+
--Query--
SELECT SUM(count(*)) OVER(PARTITION BY generate_series(1,3) ORDER BY generate_series(1,3)), generate_series(1,3) g FROM few GROUP BY g
--Result--
[(3.0, 1), (3.0, 2), (3.0, 3)]
+--------------------+
--Query--
SELECT few.dataa, count(*), min(id), max(id), generate_series(1,3) FROM few GROUP BY few.dataa ORDER BY 5, 1
--Result--
[('a', 2, 1, 2, 1), ('b', 1, 3, 3, 1), ('a', 2, 1, 2, 2), ('b', 1, 3, 3, 2), ('a', 2, 1, 2, 3), ('b', 1, 3, 3, 3)]
+--------------------+
--Query--
SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab)
--Result--
[('a', 'bar', 1, 1), ('a', 'bar', 2, 1), ('a', 'foo', 1, 1), ('a', 'foo', 2, 1), ('a', None, 1, 2), ('a', None, 2, 2), ('b', 'bar', 1, 1), ('b', 'bar', 2, 1), ('b', None, 1, 1), ('b', None, 2, 1), (None, None, 1, 3), (None, None, 2, 3), (None, 'bar', 1, 2), (None, 'bar', 2, 2), (None, 'foo', 1, 1), (None, 'foo', 2, 1)]
+--------------------+
--Query--
explain (verbose, costs off) select 'foo' as f, generate_series(1,2) as g from few order by 1
--Result--
[('ProjectSet',), ("  Output: 'foo'::text, generate_series(1, 2)",), ('  ->  Seq Scan on public.few',), ('        Output: id, dataa, datab',)]
+--------------------+
--Query--
select 'foo' as f, generate_series(1,2) as g from few order by 1
--Result--
[('foo', 1), ('foo', 2), ('foo', 1), ('foo', 2), ('foo', 1), ('foo', 2)]
+--------------------+
--Query--
SELECT * FROM fewmore
--Result--
[(1,), (2,), (3,), (4,), (5,)]
+--------------------+
--Query--
SELECT int4mul(generate_series(1,2), 10)
--Result--
[(10,), (20,)]
+--------------------+
--Query--
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
--Result--
[(1, 1, 1), (3, 2, 1), (5, 3, 1)]
+--------------------+
--Query--
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b) ORDER BY a, b DESC
--Result--
[(1, 4, 1), (1, 4, 2), (1, 4, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (5, 3, 1), (5, 3, 2), (5, 3, 3)]
+--------------------+
--Query--
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b) ORDER BY a, b DESC, g DESC
--Result--
[(1, 4, 3), (3, 2, 3), (5, 3, 3)]
+--------------------+
--Query--
SELECT DISTINCT ON (a, b, g) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b) ORDER BY a, b DESC, g DESC
--Result--
[(1, 4, 3), (1, 4, 2), (1, 4, 1), (1, 1, 3), (1, 1, 2), (1, 1, 1), (3, 2, 3), (3, 2, 2), (3, 2, 1), (3, 1, 3), (3, 1, 2), (3, 1, 1), (5, 3, 3), (5, 3, 2), (5, 3, 1), (5, 1, 3), (5, 1, 2), (5, 1, 1)]
+--------------------+
--Query--
SELECT DISTINCT ON (g) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
--Result--
[(3, 2, 1), (5, 1, 2), (3, 1, 3)]
+--------------------+
--Query--
SELECT a, generate_series(1,2) FROM (VALUES(1),(2),(3)) r(a) LIMIT 2 OFFSET 2
--Result--
[(2, 1), (2, 2)]
+--------------------+
--Query--
SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET few.id) FROM few
--Result--
[(2,), (3,), (None,)]
+--------------------+
--Query--
SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET g.i) FROM generate_series(0,3) g(i)
--Result--
[(1,), (2,), (3,), (None,)]
+--------------------+
--Query--
SELECT |@|ARRAY[1,2,3]
--Result--
[(1,), (2,), (3,)]
+--------------------+
--Query--
explain (verbose, costs off) select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1
--Result--
[('Result',), ('  Output: (generate_series(1, 3)), ((generate_series(1, 3)) + 1)',), ('  ->  ProjectSet',), ('        Output: generate_series(1, 3)',), ('        ->  Result',)]
+--------------------+
--Query--
select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1
--Result--
[(1, 2), (2, 3), (3, 4)]
+--------------------+
--Query--
explain (verbose, costs off) select generate_series(1,3) as x, generate_series(3,6) + 1 as y
--Result--
[('Result',), ('  Output: (generate_series(1, 3)), ((generate_series(3, 6)) + 1)',), ('  ->  ProjectSet',), ('        Output: generate_series(1, 3), generate_series(3, 6)',), ('        ->  Result',)]
+--------------------+
--Query--
select generate_series(1,3) as x, generate_series(3,6) + 1 as y
--Result--
[(1, 4), (2, 5), (3, 6), (None, 7)]
+--------------------+
