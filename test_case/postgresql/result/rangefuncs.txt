--Query--
select a,ord from unnest(array['a','b']) with ordinality as z(a,ord)
--Result--
[('a', 1), ('b', 2)]
+--------------------+
--Query--
select * from unnest(array['a','b']) with ordinality as z(a,ord)
--Result--
[('a', 1), ('b', 2)]
+--------------------+
--Query--
select a,ord from unnest(array[1.0::float8]) with ordinality as z(a,ord)
--Result--
[(1.0, 1)]
+--------------------+
--Query--
select * from unnest(array[1.0::float8]) with ordinality as z(a,ord)
--Result--
[(1.0, 1)]
+--------------------+
--Query--
select row_to_json(s.*) from generate_series(11,14) with ordinality s
--Result--
[({'s': 11, 'ordinality': 1},), ({'s': 12, 'ordinality': 2},), ({'s': 13, 'ordinality': 3},), ({'s': 14, 'ordinality': 4},)]
+--------------------+
--Query--
select definition from pg_views where viewname='vw_ord'
--Result--
[]
+--------------------+
--Query--
select definition from pg_views where viewname='vw_ord'
--Result--
[]
+--------------------+
--Query--
select * from unnest(array[10,20],array['foo','bar'],array[1.0])
--Result--
[(10, 'foo', 1.0), (20, 'bar', None)]
+--------------------+
--Query--
select * from unnest(array[10,20],array['foo','bar'],array[1.0]) with ordinality as z(a,b,c,ord)
--Result--
[(10, 'foo', 1.0, 1), (20, 'bar', None, 2)]
+--------------------+
--Query--
select * from rows from(unnest(array[10,20],array['foo','bar'],array[1.0])) with ordinality as z(a,b,c,ord)
--Result--
[(10, 'foo', 1.0, 1), (20, 'bar', None, 2)]
+--------------------+
--Query--
select * from rows from(unnest(array[10,20],array['foo','bar']), generate_series(101,102)) with ordinality as z(a,b,c,ord)
--Result--
[(10, 'foo', 101, 1), (20, 'bar', 102, 2)]
+--------------------+
--Query--
select * from vw_ord
--Result--
[(10, 'foo', 1.0), (20, 'bar', None)]
+--------------------+
--Query--
select definition from pg_views where viewname='vw_ord'
--Result--
[(" SELECT a,\n    b,\n    c\n   FROM UNNEST(ARRAY[10, 20], ARRAY['foo'::text, 'bar'::text], ARRAY[1.0]) z(a, b, c);",)]
+--------------------+
--Query--
select * from vw_ord
--Result--
[(10, 'foo', 1.0), (20, 'bar', None)]
+--------------------+
--Query--
select definition from pg_views where viewname='vw_ord'
--Result--
[(" SELECT a,\n    b,\n    c\n   FROM UNNEST(ARRAY[10, 20], ARRAY['foo'::text, 'bar'::text], ARRAY[1.0]) z(a, b, c);",)]
+--------------------+
--Query--
select * from vw_ord
--Result--
[(10, 'foo', 1), (20, 'bar', 2)]
+--------------------+
--Query--
select definition from pg_views where viewname='vw_ord'
--Result--
[(" SELECT a,\n    b,\n    c\n   FROM ROWS FROM(unnest(ARRAY[10, 20]), unnest(ARRAY['foo'::text, 'bar'::text]), generate_series(1, 2)) z(a, b, c);",)]
+--------------------+
--Query--
declare rf_cur scroll cursor for select * from rows from(generate_series(1,5),generate_series(1,2)) with ordinality as g(i,j,o)
--Result--
[]
+--------------------+
--Query--
fetch all from rf_cur
--Result--
[(1, 1, 1), (2, 2, 2), (3, None, 3), (4, None, 4), (5, None, 5)]
+--------------------+
--Query--
fetch backward all from rf_cur
--Result--
[(5, None, 5), (4, None, 4), (3, None, 3), (2, 2, 2), (1, 1, 1)]
+--------------------+
--Query--
fetch all from rf_cur
--Result--
[(1, 1, 1), (2, 2, 2), (3, None, 3), (4, None, 4), (5, None, 5)]
+--------------------+
--Query--
fetch next from rf_cur
--Result--
[]
+--------------------+
--Query--
fetch next from rf_cur
--Result--
[]
+--------------------+
--Query--
fetch prior from rf_cur
--Result--
[(5, None, 5)]
+--------------------+
--Query--
fetch absolute 1 from rf_cur
--Result--
[(1, 1, 1)]
+--------------------+
--Query--
fetch next from rf_cur
--Result--
[(2, 2, 2)]
+--------------------+
--Query--
fetch next from rf_cur
--Result--
[(3, None, 3)]
+--------------------+
--Query--
fetch next from rf_cur
--Result--
[(4, None, 4)]
+--------------------+
--Query--
fetch prior from rf_cur
--Result--
[(3, None, 3)]
+--------------------+
--Query--
fetch prior from rf_cur
--Result--
[(2, 2, 2)]
+--------------------+
--Query--
fetch prior from rf_cur
--Result--
[(1, 1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN generate_series(11,13) f(i) ON (r+i)<100
--Result--
[(1, 11), (1, 12), (1, 13), (2, 11), (2, 12), (2, 13), (3, 11), (3, 12), (3, 13)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN generate_series(11,13) WITH ORDINALITY AS f(i,o) ON (r+i)<100
--Result--
[(1, 11, 1), (1, 12, 2), (1, 13, 3), (2, 11, 1), (2, 12, 2), (2, 13, 3), (3, 11, 1), (3, 12, 2), (3, 13, 3)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN unnest(array[10,20,30]) f(i) ON (r+i)<100
--Result--
[(1, 10), (1, 20), (1, 30), (2, 10), (2, 20), (2, 30), (3, 10), (3, 20), (3, 30)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN unnest(array[10,20,30]) WITH ORDINALITY AS f(i,o) ON (r+i)<100
--Result--
[(1, 10, 1), (1, 20, 2), (1, 30, 3), (2, 10, 1), (2, 20, 2), (2, 30, 3), (3, 10, 1), (3, 20, 2), (3, 30, 3)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)
--Result--
[(1, 1)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v(r), generate_series(10+r,20-r) f(i)
--Result--
[(1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (3, 13), (3, 14), (3, 15), (3, 16), (3, 17)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v(r), generate_series(10+r,20-r) WITH ORDINALITY AS f(i,o)
--Result--
[(1, 11, 1), (1, 12, 2), (1, 13, 3), (1, 14, 4), (1, 15, 5), (1, 16, 6), (1, 17, 7), (1, 18, 8), (1, 19, 9), (2, 12, 1), (2, 13, 2), (2, 14, 3), (2, 15, 4), (2, 16, 5), (2, 17, 6), (2, 18, 7), (3, 13, 1), (3, 14, 2), (3, 15, 3), (3, 16, 4), (3, 17, 5)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v(r), unnest(array[r*10,r*20,r*30]) f(i)
--Result--
[(1, 10), (1, 20), (1, 30), (2, 20), (2, 40), (2, 60), (3, 30), (3, 60), (3, 90)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v(r), unnest(array[r*10,r*20,r*30]) WITH ORDINALITY AS f(i,o)
--Result--
[(1, 10, 1), (1, 20, 2), (1, 30, 3), (2, 20, 1), (2, 40, 2), (2, 60, 3), (3, 30, 1), (3, 60, 2), (3, 90, 3)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v1(r1),               LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)                                          LEFT JOIN generate_series(21,23) f(i) ON ((r2+i)<100) OFFSET 0) s1
--Result--
[(1, 1, 10, 21), (1, 1, 10, 22), (1, 1, 10, 23), (1, 1, 20, 21), (1, 1, 20, 22), (1, 1, 20, 23), (1, 1, 30, 21), (1, 1, 30, 22), (1, 1, 30, 23), (2, 2, 10, 21), (2, 2, 10, 22), (2, 2, 10, 23), (2, 2, 20, 21), (2, 2, 20, 22), (2, 2, 20, 23), (2, 2, 30, 21), (2, 2, 30, 22), (2, 2, 30, 23), (3, 3, 10, 21), (3, 3, 10, 22), (3, 3, 10, 23), (3, 3, 20, 21), (3, 3, 20, 22), (3, 3, 20, 23), (3, 3, 30, 21), (3, 3, 30, 22), (3, 3, 30, 23)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v1(r1),               LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)                                          LEFT JOIN generate_series(20+r1,23) f(i) ON ((r2+i)<100) OFFSET 0) s1
--Result--
[(1, 1, 10, 21), (1, 1, 10, 22), (1, 1, 10, 23), (1, 1, 20, 21), (1, 1, 20, 22), (1, 1, 20, 23), (1, 1, 30, 21), (1, 1, 30, 22), (1, 1, 30, 23), (2, 2, 10, 22), (2, 2, 10, 23), (2, 2, 20, 22), (2, 2, 20, 23), (2, 2, 30, 22), (2, 2, 30, 23), (3, 3, 10, 23), (3, 3, 20, 23), (3, 3, 30, 23)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v1(r1),               LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)                                          LEFT JOIN generate_series(r2,r2+3) f(i) ON ((r2+i)<100) OFFSET 0) s1
--Result--
[(1, 1, 10, 10), (1, 1, 10, 11), (1, 1, 10, 12), (1, 1, 10, 13), (1, 1, 20, 20), (1, 1, 20, 21), (1, 1, 20, 22), (1, 1, 20, 23), (1, 1, 30, 30), (1, 1, 30, 31), (1, 1, 30, 32), (1, 1, 30, 33), (2, 2, 10, 10), (2, 2, 10, 11), (2, 2, 10, 12), (2, 2, 10, 13), (2, 2, 20, 20), (2, 2, 20, 21), (2, 2, 20, 22), (2, 2, 20, 23), (2, 2, 30, 30), (2, 2, 30, 31), (2, 2, 30, 32), (2, 2, 30, 33), (3, 3, 10, 10), (3, 3, 10, 11), (3, 3, 10, 12), (3, 3, 10, 13), (3, 3, 20, 20), (3, 3, 20, 21), (3, 3, 20, 22), (3, 3, 20, 23), (3, 3, 30, 30), (3, 3, 30, 31), (3, 3, 30, 32), (3, 3, 30, 33)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2),(3)) v1(r1),               LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)                                          LEFT JOIN generate_series(r1,2+r2/5) f(i) ON ((r2+i)<100) OFFSET 0) s1
--Result--
[(1, 1, 10, 1), (1, 1, 10, 2), (1, 1, 10, 3), (1, 1, 10, 4), (1, 1, 20, 1), (1, 1, 20, 2), (1, 1, 20, 3), (1, 1, 20, 4), (1, 1, 20, 5), (1, 1, 20, 6), (1, 1, 30, 1), (1, 1, 30, 2), (1, 1, 30, 3), (1, 1, 30, 4), (1, 1, 30, 5), (1, 1, 30, 6), (1, 1, 30, 7), (1, 1, 30, 8), (2, 2, 10, 2), (2, 2, 10, 3), (2, 2, 10, 4), (2, 2, 20, 2), (2, 2, 20, 3), (2, 2, 20, 4), (2, 2, 20, 5), (2, 2, 20, 6), (2, 2, 30, 2), (2, 2, 30, 3), (2, 2, 30, 4), (2, 2, 30, 5), (2, 2, 30, 6), (2, 2, 30, 7), (2, 2, 30, 8), (3, 3, 10, 3), (3, 3, 10, 4), (3, 3, 20, 3), (3, 3, 20, 4), (3, 3, 20, 5), (3, 3, 20, 6), (3, 3, 30, 3), (3, 3, 30, 4), (3, 3, 30, 5), (3, 3, 30, 6), (3, 3, 30, 7), (3, 3, 30, 8)]
+--------------------+
--Query--
SELECT * FROM (VALUES (1),(2)) v1(r1)     LEFT JOIN LATERAL (         SELECT *         FROM generate_series(1, v1.r1) AS gs1         LEFT JOIN LATERAL (             SELECT *             FROM generate_series(1, gs1) AS gs2             LEFT JOIN generate_series(1, gs2) AS gs3 ON TRUE         ) AS ss1 ON TRUE         FULL JOIN generate_series(1, v1.r1) AS gs4 ON FALSE     ) AS ss0 ON TRUE
--Result--
[(1, None, None, None, 1), (1, 1, 1, 1, None), (2, None, None, None, 1), (2, None, None, None, 2), (2, 1, 1, 1, None), (2, 2, 1, 1, None), (2, 2, 2, 1, None), (2, 2, 2, 2, None)]
+--------------------+
--Query--
SELECT rngfunc(42)
--Result--
[(43,)]
+--------------------+
--Query--
SELECT * FROM rngfunc(42)
--Result--
[(43,)]
+--------------------+
--Query--
SELECT * FROM rngfunc(42) AS p(x)
--Result--
[(43,)]
+--------------------+
--Query--
SELECT * FROM rngfuncr(42)
--Result--
[(41, '42z')]
+--------------------+
--Query--
SELECT * FROM rngfuncr(42) AS p(a,b)
--Result--
[(41, '42z')]
+--------------------+
--Query--
SELECT * FROM rngfuncb(42, 99)
--Result--
[(98, '42z')]
+--------------------+
--Query--
SELECT * FROM rngfuncb(42, 99) AS p(a,b)
--Result--
[(98, '42z')]
+--------------------+
--Query--
SELECT dup(22)
--Result--
[('(22,"{22,22}")',)]
+--------------------+
--Query--
SELECT dup('xyz'::text)
--Result--
[('(xyz,"{xyz,xyz}")',)]
+--------------------+
--Query--
SELECT * FROM dup('xyz'::text)
--Result--
[('xyz', ['xyz', 'xyz'])]
+--------------------+
--Query--
SELECT dup(22)
--Result--
[('(22,"{22,22}")',)]
+--------------------+
--Query--
SELECT dup(22, array[44])
--Result--
[('(22,{44})',)]
+--------------------+
--Query--
SELECT dup(4.5, array[44])
--Result--
[('(4.5,{44})',)]
+--------------------+
--Query--
SELECT dup(22, array[44::bigint])
--Result--
[('(22,{44})',)]
+--------------------+
--Query--
SELECT *, pg_typeof(f3), pg_typeof(f4) FROM dup(22, array[44::bigint])
--Result--
[(22, [44], 'bigint', 'bigint[]')]
+--------------------+
--Query--
SELECT dup(int4range(4,7))
--Result--
[('(4,"{4,7}","[4,7)")',)]
+--------------------+
--Query--
SELECT dup(numrange(4,7))
--Result--
[('(4,"{4,7}","[4,7)")',)]
+--------------------+
--Query--
SELECT * FROM rngfunc()
--Result--
[(1,), (2,), (3,), (4,), (5,)]
+--------------------+
--Query--
SELECT * FROM rngfunc(3)
--Result--
[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]
+--------------------+
--Query--
SELECT * FROM rngfunc() GROUP BY 1
--Result--
[('hello',)]
+--------------------+
--Query--
select insert_tt('foo')
--Result--
[(1,)]
+--------------------+
--Query--
select insert_tt('bar')
--Result--
[(2,)]
+--------------------+
--Query--
select * from tt
--Result--
[(1, 'foo'), (2, 'bar')]
+--------------------+
--Query--
select insert_tt('fool')
--Result--
[(3,)]
+--------------------+
--Query--
select * from tt
--Result--
[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool')]
+--------------------+
--Query--
select insert_tt2('foolish','barrish')
--Result--
[(5,), (6,)]
+--------------------+
--Query--
select * from insert_tt2('baz','quux')
--Result--
[(7,), (8,)]
+--------------------+
--Query--
select * from tt
--Result--
[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux')]
+--------------------+
--Query--
select insert_tt2('foolish','barrish') limit 1
--Result--
[(9,)]
+--------------------+
--Query--
select * from tt
--Result--
[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux'), (9, 'foolish'), (10, 'barrish')]
+--------------------+
--Query--
select insert_tt2('foolme','barme') limit 1
--Result--
[(11,)]
+--------------------+
--Query--
select * from tt
--Result--
[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux'), (9, 'foolish'), (10, 'barrish'), (11, 'foolme'), (12, 'barme')]
+--------------------+
--Query--
select insert_tt2('foollog','barlog') limit 1
--Result--
[(13,)]
+--------------------+
--Query--
select * from tt
--Result--
[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux'), (9, 'foolish'), (10, 'barrish'), (11, 'foolme'), (12, 'barme'), (13, 'foollog'), (14, 'barlog')]
+--------------------+
--Query--
select * from tt_log
--Result--
[(15, 'foollog'), (16, 'barlog')]
+--------------------+
--Query--
select t.a, t, t.a from rngfunc1(10000) t limit 1
--Result--
[('foo 1', '("foo 1","bar 1")', 'foo 1')]
+--------------------+
--Query--
select t.a, t, t.a from rngfunc1(10000) t limit 1
--Result--
[('foo 1', '("foo 1","bar 1")', 'foo 1')]
+--------------------+
--Query--
select array_to_set(array['one', 'two'])
--Result--
[('(1,one)',), ('(2,two)',)]
+--------------------+
--Query--
select * from array_to_set(array['one', 'two']) as t(f1 int,f2 text)
--Result--
[(1, 'one'), (2, 'two')]
+--------------------+
--Query--
select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text)
--Result--
[(1.0, 'one'), (2.0, 'two')]
+--------------------+
--Query--
explain (verbose, costs off)   select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text)
--Result--
[('Function Scan on public.array_to_set t',), ('  Output: f1, f2',), ("  Function Call: array_to_set('{one,two}'::text[])",)]
+--------------------+
--Query--
select array_to_set(array['one', 'two'])
--Result--
[('(1,one)',), ('(2,two)',)]
+--------------------+
--Query--
select * from array_to_set(array['one', 'two']) as t(f1 int,f2 text)
--Result--
[(1, 'one'), (2, 'two')]
+--------------------+
--Query--
select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text)
--Result--
[(1.0, 'one'), (2.0, 'two')]
+--------------------+
--Query--
explain (verbose, costs off)   select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text)
--Result--
[('Function Scan on pg_catalog.generate_subscripts i',), ("  Output: i.i, ('{one,two}'::text[])[i.i]",), ("  Function Call: generate_subscripts('{one,two}'::text[], 1)",)]
+--------------------+
--Query--
select rngfuncbar()
--Result--
[('foo',), ('bar',)]
+--------------------+
--Query--
select * from rngfuncbar()
--Result--
[('foo',), ('bar',)]
+--------------------+
--Query--
explain (verbose, costs off) select * from rngfuncbar()
--Result--
[('Result',), ("  Output: ('foo'::character varying)",), ('  ->  Append',), ('        ->  Result',), ("              Output: 'foo'::character varying",), ('        ->  Result',), ("              Output: 'bar'::character varying",)]
+--------------------+
--Query--
select * from rngfuncbar()
--Result--
[(1, 2.1)]
+--------------------+
--Query--
select *, row_to_json(u) from unnest(array[(1,'foo')::rngfunc2, null::rngfunc2]) u
--Result--
[(1, 'foo', {'a': 1, 'b': 'foo'}), (None, None, {'a': None, 'b': None})]
+--------------------+
--Query--
select *, row_to_json(u) from unnest(array[null::rngfunc2, null::rngfunc2]) u
--Result--
[(None, None, {'a': None, 'b': None}), (None, None, {'a': None, 'b': None})]
+--------------------+
--Query--
select *, row_to_json(u) from unnest(array[null::rngfunc2, (1,'foo')::rngfunc2, null::rngfunc2]) u
--Result--
[(None, None, {'a': None, 'b': None}), (1, 'foo', {'a': 1, 'b': 'foo'}), (None, None, {'a': None, 'b': None})]
+--------------------+
--Query--
select *, row_to_json(u) from unnest(array[]::rngfunc2[]) u
--Result--
[]
+--------------------+
--Query--
explain (verbose, costs off) select * from   (select jsonb_path_query_array(module->'lectures', '$[*]') as lecture    from unnest(array['{"lectures": [{"id": "1"}]}'::jsonb])         as unnested_modules(module)) as ss,   jsonb_to_recordset(ss.lecture) as j (id text)
--Result--
[('Nested Loop',), ("  Output: jsonb_path_query_array((unnested_modules.module -> 'lectures'::text), '$[*]'::jsonpath, '{}'::jsonb, false), j.id",), ('  ->  Function Scan on pg_catalog.unnest unnested_modules',), ('        Output: unnested_modules.module',), ('        Function Call: unnest(\'{"{\\"lectures\\": [{\\"id\\": \\"1\\"}]}"}\'::jsonb[])',), ('  ->  Function Scan on pg_catalog.jsonb_to_recordset j',), ('        Output: j.id',), ("        Function Call: jsonb_to_recordset(jsonb_path_query_array((unnested_modules.module -> 'lectures'::text), '$[*]'::jsonpath, '{}'::jsonb, false))",)]
+--------------------+
--Query--
select * from   (select jsonb_path_query_array(module->'lectures', '$[*]') as lecture    from unnest(array['{"lectures": [{"id": "1"}]}'::jsonb])         as unnested_modules(module)) as ss,   jsonb_to_recordset(ss.lecture) as j (id text)
--Result--
[([{'id': '1'}], '1')]
+--------------------+
