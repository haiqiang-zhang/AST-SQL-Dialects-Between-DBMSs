--Query--
ANALYZE aggtest
--Result--
[]
+--------------------+
--Query--
SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100
--Result--
[(None,)]
+--------------------+
--Query--
SELECT any_value(v) FROM (VALUES (1), (2), (3)) AS v (v)
--Result--
[(1,)]
+--------------------+
--Query--
SELECT any_value(v) FROM (VALUES (NULL)) AS v (v)
--Result--
[(None,)]
+--------------------+
--Query--
SELECT any_value(v) FROM (VALUES (NULL), (1), (2)) AS v (v)
--Result--
[(1,)]
+--------------------+
--Query--
SELECT any_value(v) FROM (VALUES (array['hello', 'world'])) AS v (v)
--Result--
[(['hello', 'world'],)]
+--------------------+
--Query--
SELECT avg(b)::numeric(10,3) AS avg_107_943 FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT sum(a) AS sum_198 FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT sum(b) AS avg_431_773 FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT max(a) AS max_100 FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT max(aggtest.b) AS max_324_78 FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT stddev_pop(b) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT stddev_samp(b) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT var_pop(b) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT var_samp(b) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT stddev_pop(b::numeric) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT stddev_samp(b::numeric) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT var_pop(b::numeric) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT var_samp(b::numeric) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT var_pop(1.0::float8), var_samp(2.0::float8)
--Result--
[(0.0, None)]
+--------------------+
--Query--
SELECT stddev_pop(3.0::float8), stddev_samp(4.0::float8)
--Result--
[(0.0, None)]
+--------------------+
--Query--
SELECT var_pop('inf'::float8), var_samp('inf'::float8)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT stddev_pop('inf'::float8), stddev_samp('inf'::float8)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT var_pop('nan'::float8), var_samp('nan'::float8)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT stddev_pop('nan'::float8), stddev_samp('nan'::float8)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT var_pop(1.0::float4), var_samp(2.0::float4)
--Result--
[(0.0, None)]
+--------------------+
--Query--
SELECT stddev_pop(3.0::float4), stddev_samp(4.0::float4)
--Result--
[(0.0, None)]
+--------------------+
--Query--
SELECT var_pop('inf'::float4), var_samp('inf'::float4)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT stddev_pop('inf'::float4), stddev_samp('inf'::float4)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT var_pop('nan'::float4), var_samp('nan'::float4)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT stddev_pop('nan'::float4), stddev_samp('nan'::float4)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT var_pop(1.0::numeric), var_samp(2.0::numeric)
--Result--
[(0.0, None)]
+--------------------+
--Query--
SELECT stddev_pop(3.0::numeric), stddev_samp(4.0::numeric)
--Result--
[(0.0, None)]
+--------------------+
--Query--
SELECT var_pop('inf'::numeric), var_samp('inf'::numeric)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT stddev_pop('inf'::numeric), stddev_samp('inf'::numeric)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT var_pop('nan'::numeric), var_samp('nan'::numeric)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT stddev_pop('nan'::numeric), stddev_samp('nan'::numeric)
--Result--
[(nan, None)]
+--------------------+
--Query--
select sum(null::int4) from generate_series(1,3)
--Result--
[(None,)]
+--------------------+
--Query--
select sum(null::int8) from generate_series(1,3)
--Result--
[(None,)]
+--------------------+
--Query--
select sum(null::numeric) from generate_series(1,3)
--Result--
[(None,)]
+--------------------+
--Query--
select sum(null::float8) from generate_series(1,3)
--Result--
[(None,)]
+--------------------+
--Query--
select avg(null::int4) from generate_series(1,3)
--Result--
[(None,)]
+--------------------+
--Query--
select avg(null::int8) from generate_series(1,3)
--Result--
[(None,)]
+--------------------+
--Query--
select avg(null::numeric) from generate_series(1,3)
--Result--
[(None,)]
+--------------------+
--Query--
select avg(null::float8) from generate_series(1,3)
--Result--
[(None,)]
+--------------------+
--Query--
select sum('NaN'::numeric) from generate_series(1,3)
--Result--
[(nan,)]
+--------------------+
--Query--
select avg('NaN'::numeric) from generate_series(1,3)
--Result--
[(nan,)]
+--------------------+
--Query--
SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('1'), ('infinity')) v(x)
--Result--
[(inf, inf, nan)]
+--------------------+
--Query--
SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('infinity'), ('1')) v(x)
--Result--
[(inf, inf, nan)]
+--------------------+
--Query--
SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('infinity'), ('infinity')) v(x)
--Result--
[(inf, inf, nan)]
+--------------------+
--Query--
SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('-infinity'), ('infinity')) v(x)
--Result--
[(nan, nan, nan)]
+--------------------+
--Query--
SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('-infinity'), ('-infinity')) v(x)
--Result--
[(-inf, -inf, nan)]
+--------------------+
--Query--
SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('1'), ('infinity')) v(x)
--Result--
[(inf, inf, nan)]
+--------------------+
--Query--
SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('infinity'), ('1')) v(x)
--Result--
[(inf, inf, nan)]
+--------------------+
--Query--
SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('infinity'), ('infinity')) v(x)
--Result--
[(inf, inf, nan)]
+--------------------+
--Query--
SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('-infinity'), ('infinity')) v(x)
--Result--
[(nan, nan, nan)]
+--------------------+
--Query--
SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('-infinity'), ('-infinity')) v(x)
--Result--
[(-inf, -inf, nan)]
+--------------------+
--Query--
SELECT avg(x::float8), var_pop(x::float8) FROM (VALUES (100000003), (100000004), (100000006), (100000007)) v(x)
--Result--
[(100000005.0, 2.5)]
+--------------------+
--Query--
SELECT avg(x::float8), var_pop(x::float8) FROM (VALUES (7000000000005), (7000000000007)) v(x)
--Result--
[(7000000000006.0, 1.0)]
+--------------------+
--Query--
SELECT regr_count(b, a) FROM aggtest
--Result--
[(0,)]
+--------------------+
--Query--
SELECT regr_sxx(b, a) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT regr_syy(b, a) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT regr_sxy(b, a) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT regr_avgx(b, a), regr_avgy(b, a) FROM aggtest
--Result--
[(None, None)]
+--------------------+
--Query--
SELECT regr_r2(b, a) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT regr_slope(b, a), regr_intercept(b, a) FROM aggtest
--Result--
[(None, None)]
+--------------------+
--Query--
SELECT covar_pop(b, a), covar_samp(b, a) FROM aggtest
--Result--
[(None, None)]
+--------------------+
--Query--
SELECT corr(b, a) FROM aggtest
--Result--
[(None,)]
+--------------------+
--Query--
SELECT covar_pop(1::float8,2::float8), covar_samp(3::float8,4::float8)
--Result--
[(0.0, None)]
+--------------------+
--Query--
SELECT covar_pop(1::float8,'inf'::float8), covar_samp(3::float8,'inf'::float8)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT covar_pop(1::float8,'nan'::float8), covar_samp(3::float8,'nan'::float8)
--Result--
[(nan, None)]
+--------------------+
--Query--
SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x) FROM regr_test WHERE x IN (10,20,30,80)
--Result--
[(4, 140.0, 2900.0, 1290.0, 83075.0, 15050.0)]
+--------------------+
--Query--
SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x) FROM regr_test
--Result--
[(5, 240.0, 6280.0, 1490.0, 95080.0, 8680.0)]
+--------------------+
--Query--
SELECT float8_accum('{4,140,2900}'::float8[], 100)
--Result--
[([5.0, 240.0, 6280.0],)]
+--------------------+
--Query--
SELECT float8_regr_accum('{4,140,2900,1290,83075,15050}'::float8[], 200, 100)
--Result--
[([5.0, 240.0, 6280.0, 1490.0, 95080.0, 8680.0],)]
+--------------------+
--Query--
SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x) FROM regr_test WHERE x IN (10,20,30)
--Result--
[(3, 60.0, 200.0, 750.0, 20000.0, 2000.0)]
+--------------------+
--Query--
SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x) FROM regr_test WHERE x IN (80,100)
--Result--
[(2, 180.0, 200.0, 740.0, 57800.0, -3400.0)]
+--------------------+
--Query--
SELECT float8_combine('{3,60,200}'::float8[], '{0,0,0}'::float8[])
--Result--
[([3.0, 60.0, 200.0],)]
+--------------------+
--Query--
SELECT float8_combine('{0,0,0}'::float8[], '{2,180,200}'::float8[])
--Result--
[([2.0, 180.0, 200.0],)]
+--------------------+
--Query--
SELECT float8_combine('{3,60,200}'::float8[], '{2,180,200}'::float8[])
--Result--
[([5.0, 240.0, 6280.0],)]
+--------------------+
--Query--
SELECT float8_regr_combine('{3,60,200,750,20000,2000}'::float8[],                            '{0,0,0,0,0,0}'::float8[])
--Result--
[([3.0, 60.0, 200.0, 750.0, 20000.0, 2000.0],)]
+--------------------+
--Query--
SELECT float8_regr_combine('{0,0,0,0,0,0}'::float8[],                            '{2,180,200,740,57800,-3400}'::float8[])
--Result--
[([2.0, 180.0, 200.0, 740.0, 57800.0, -3400.0],)]
+--------------------+
--Query--
SELECT float8_regr_combine('{3,60,200,750,20000,2000}'::float8[],                            '{2,180,200,740,57800,-3400}'::float8[])
--Result--
[([5.0, 240.0, 6280.0, 1490.0, 95080.0, 8680.0],)]
+--------------------+
--Query--
explain (verbose, costs off) select s1, s2, sm from generate_series(1, 3) s1,      lateral (select s2, sum(s1 + s2) sm               from generate_series(1, 3) s2 group by s2) ss order by 1, 2
--Result--
[('Sort',), ('  Output: s1.s1, s2.s2, (sum((s1.s1 + s2.s2)))',), ('  Sort Key: s1.s1, s2.s2',), ('  ->  Nested Loop',), ('        Output: s1.s1, s2.s2, (sum((s1.s1 + s2.s2)))',), ('        ->  Function Scan on pg_catalog.generate_series s1',), ('              Output: s1.s1',), ('              Function Call: generate_series(1, 3)',), ('        ->  HashAggregate',), ('              Output: s2.s2, sum((s1.s1 + s2.s2))',), ('              Group Key: s2.s2',), ('              ->  Function Scan on pg_catalog.generate_series s2',), ('                    Output: s2.s2',), ('                    Function Call: generate_series(1, 3)',)]
+--------------------+
--Query--
select s1, s2, sm from generate_series(1, 3) s1,      lateral (select s2, sum(s1 + s2) sm               from generate_series(1, 3) s2 group by s2) ss order by 1, 2
--Result--
[(1, 1, 2), (1, 2, 3), (1, 3, 4), (2, 1, 3), (2, 2, 4), (2, 3, 5), (3, 1, 4), (3, 2, 5), (3, 3, 6)]
+--------------------+
--Query--
explain (verbose, costs off) select array(select sum(x+y) s             from generate_series(1,3) y group by y order by s)   from generate_series(1,3) x
--Result--
[('Function Scan on pg_catalog.generate_series x',), ('  Output: (SubPlan 1)',), ('  Function Call: generate_series(1, 3)',), ('  SubPlan 1',), ('    ->  Sort',), ('          Output: (sum((x.x + y.y))), y.y',), ('          Sort Key: (sum((x.x + y.y)))',), ('          ->  HashAggregate',), ('                Output: sum((x.x + y.y)), y.y',), ('                Group Key: y.y',), ('                ->  Function Scan on pg_catalog.generate_series y',), ('                      Output: y.y',), ('                      Function Call: generate_series(1, 3)',)]
+--------------------+
--Query--
select array(select sum(x+y) s             from generate_series(1,3) y group by y order by s)   from generate_series(1,3) x
--Result--
[([2, 3, 4],), ([3, 4, 5],), ([4, 5, 6],)]
+--------------------+
--Query--
SELECT   BIT_AND(i2) AS "?",   BIT_OR(i4)  AS "?",   BIT_XOR(i8) AS "?" FROM bitwise_test
--Result--
[(None, None, None)]
+--------------------+
--Query--
SELECT   booland_statefunc(NULL, NULL)  IS NULL AS "t",   booland_statefunc(TRUE, NULL)  IS NULL AS "t",   booland_statefunc(FALSE, NULL) IS NULL AS "t",   booland_statefunc(NULL, TRUE)  IS NULL AS "t",   booland_statefunc(NULL, FALSE) IS NULL AS "t",   booland_statefunc(TRUE, TRUE) AS "t",   NOT booland_statefunc(TRUE, FALSE) AS "t",   NOT booland_statefunc(FALSE, TRUE) AS "t",   NOT booland_statefunc(FALSE, FALSE) AS "t"
--Result--
[(True, True, True, True, True, True, True, True, True)]
+--------------------+
--Query--
SELECT   boolor_statefunc(NULL, NULL)  IS NULL AS "t",   boolor_statefunc(TRUE, NULL)  IS NULL AS "t",   boolor_statefunc(FALSE, NULL) IS NULL AS "t",   boolor_statefunc(NULL, TRUE)  IS NULL AS "t",   boolor_statefunc(NULL, FALSE) IS NULL AS "t",   boolor_statefunc(TRUE, TRUE) AS "t",   boolor_statefunc(TRUE, FALSE) AS "t",   boolor_statefunc(FALSE, TRUE) AS "t",   NOT boolor_statefunc(FALSE, FALSE) AS "t"
--Result--
[(True, True, True, True, True, True, True, True, True)]
+--------------------+
--Query--
SELECT   BOOL_AND(b1)   AS "n",   BOOL_OR(b3)    AS "n" FROM bool_test
--Result--
[(None, None)]
+--------------------+
--Query--
SELECT   EVERY(b1)     AS "f",   EVERY(b2)     AS "t",   EVERY(b3)     AS "f",   EVERY(b4)     AS "n",   EVERY(NOT b2) AS "f",   EVERY(NOT b3) AS "t" FROM bool_test
--Result--
[(None, None, None, None, None, None)]
+--------------------+
--Query--
SELECT   BOOL_OR(b1)      AS "t",   BOOL_OR(b2)      AS "t",   BOOL_OR(b3)      AS "f",   BOOL_OR(b4)      AS "n",   BOOL_OR(NOT b2)  AS "f",   BOOL_OR(NOT b3)  AS "t" FROM bool_test
--Result--
[(None, None, None, None, None, None)]
+--------------------+
--Query--
explain (costs off)   select min(f1), max(f1) from minmaxtest
--Result--
[('Result',), ('  InitPlan 1 (returns $0)',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: minmaxtest.f1',), ('                ->  Index Only Scan using minmaxtesti on minmaxtest minmaxtest_1',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest1i on minmaxtest1 minmaxtest_2',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest2i on minmaxtest2 minmaxtest_3',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest3i on minmaxtest3 minmaxtest_4',), ('  InitPlan 2 (returns $1)',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: minmaxtest_5.f1 DESC',), ('                ->  Index Only Scan Backward using minmaxtesti on minmaxtest minmaxtest_6',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest1i on minmaxtest1 minmaxtest_7',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest2i on minmaxtest2 minmaxtest_8',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest3i on minmaxtest3 minmaxtest_9',)]
+--------------------+
--Query--
select min(f1), max(f1) from minmaxtest
--Result--
[(11, 18)]
+--------------------+
--Query--
explain (costs off)   select distinct min(f1), max(f1) from minmaxtest
--Result--
[('Unique',), ('  InitPlan 1 (returns $0)',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: minmaxtest.f1',), ('                ->  Index Only Scan using minmaxtesti on minmaxtest minmaxtest_1',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest1i on minmaxtest1 minmaxtest_2',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest2i on minmaxtest2 minmaxtest_3',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest3i on minmaxtest3 minmaxtest_4',), ('  InitPlan 2 (returns $1)',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: minmaxtest_5.f1 DESC',), ('                ->  Index Only Scan Backward using minmaxtesti on minmaxtest minmaxtest_6',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest1i on minmaxtest1 minmaxtest_7',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest2i on minmaxtest2 minmaxtest_8',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest3i on minmaxtest3 minmaxtest_9',), ('  ->  Sort',), ('        Sort Key: ($0), ($1)',), ('        ->  Result',)]
+--------------------+
--Query--
select distinct min(f1), max(f1) from minmaxtest
--Result--
[(11, 18)]
+--------------------+
--Query--
explain (costs off) select * from t1 group by a,b,c,d
--Result--
[('HashAggregate',), ('  Group Key: a, b',), ('  ->  Seq Scan on t1',)]
+--------------------+
--Query--
explain (costs off) select a,c from t1 group by a,c,d
--Result--
[('HashAggregate',), ('  Group Key: a, c, d',), ('  ->  Seq Scan on t1',)]
+--------------------+
--Query--
explain (costs off) select * from t1 inner join t2 on t1.a = t2.x and t1.b = t2.y group by t1.a,t1.b,t1.c,t1.d,t2.x,t2.y,t2.z
--Result--
[('HashAggregate',), ('  Group Key: t1.a, t1.b',), ('  ->  Hash Join',), ('        Hash Cond: ((t2.x = t1.a) AND (t2.y = t1.b))',), ('        ->  Seq Scan on t2',), ('        ->  Hash',), ('              ->  Seq Scan on t1',)]
+--------------------+
--Query--
explain (costs off) select t1.*,t2.x,t2.z from t1 inner join t2 on t1.a = t2.x and t1.b = t2.y group by t1.a,t1.b,t1.c,t1.d,t2.x,t2.z
--Result--
[('HashAggregate',), ('  Group Key: t1.a, t1.b, t2.z',), ('  ->  Hash Join',), ('        Hash Cond: ((t2.x = t1.a) AND (t2.y = t1.b))',), ('        ->  Seq Scan on t2',), ('        ->  Hash',), ('              ->  Seq Scan on t1',)]
+--------------------+
--Query--
explain (costs off) select * from t3 group by a,b,c
--Result--
[('HashAggregate',), ('  Group Key: a, b, c',), ('  ->  Seq Scan on t3',)]
+--------------------+
--Query--
explain (costs off) select * from t1 group by a,b,c,d
--Result--
[('HashAggregate',), ('  Group Key: t1.a, t1.b, t1.c, t1.d',), ('  ->  Append',), ('        ->  Seq Scan on t1 t1_1',), ('        ->  Seq Scan on t1c t1_2',)]
+--------------------+
--Query--
explain (costs off) select * from only t1 group by a,b,c,d
--Result--
[('HashAggregate',), ('  Group Key: a, b',), ('  ->  Seq Scan on t1',)]
+--------------------+
--Query--
explain (costs off) select * from p_t1 group by a,b,c,d
--Result--
[('HashAggregate',), ('  Group Key: p_t1.a, p_t1.b',), ('  ->  Append',), ('        ->  Seq Scan on p_t1_1',), ('        ->  Seq Scan on p_t1_2',)]
+--------------------+
--Query--
select f1 from t1 left join t2 using (f1) group by f1
--Result--
[]
+--------------------+
--Query--
select f1 from t1 left join t2 using (f1) group by t1.f1
--Result--
[]
+--------------------+
--Query--
select t1.f1 from t1 left join t2 using (f1) group by t1.f1
--Result--
[]
+--------------------+
--Query--
select f1, count(*) from t1 x(x0,x1) left join (t1 left join t2 using(f1)) on (x0 = 0) group by f1
--Result--
[]
+--------------------+
--Query--
select f2, count(*) from t1 x(x0,x1) left join (t1 left join t2 using(f2)) on (x0 = 0) group by f2
--Result--
[]
+--------------------+
--Query--
select array_agg(distinct val) from (select null as val from generate_series(1, 2))
--Result--
[([None],)]
+--------------------+
--Query--
select array_agg(a order by b)   from (values (1,4),(2,3),(3,1),(4,2)) v(a,b)
--Result--
[([3, 4, 2, 1],)]
+--------------------+
--Query--
select array_agg(a order by a)   from (values (1,4),(2,3),(3,1),(4,2)) v(a,b)
--Result--
[([1, 2, 3, 4],)]
+--------------------+
--Query--
select array_agg(a order by a desc)   from (values (1,4),(2,3),(3,1),(4,2)) v(a,b)
--Result--
[([4, 3, 2, 1],)]
+--------------------+
--Query--
select array_agg(b order by a desc)   from (values (1,4),(2,3),(3,1),(4,2)) v(a,b)
--Result--
[([2, 1, 3, 4],)]
+--------------------+
--Query--
select array_agg(distinct a)   from (values (1),(2),(1),(3),(null),(2)) v(a)
--Result--
[([1, 2, 3, None],)]
+--------------------+
--Query--
select array_agg(distinct a order by a)   from (values (1),(2),(1),(3),(null),(2)) v(a)
--Result--
[([1, 2, 3, None],)]
+--------------------+
--Query--
select array_agg(distinct a order by a desc)   from (values (1),(2),(1),(3),(null),(2)) v(a)
--Result--
[([None, 3, 2, 1],)]
+--------------------+
--Query--
select array_agg(distinct a order by a desc nulls last)   from (values (1),(2),(1),(3),(null),(2)) v(a)
--Result--
[([3, 2, 1, None],)]
+--------------------+
--Query--
select     string_agg(distinct 'a', ','),     sum((         select sum(1)         from (values(1)) b(id)         where a.id = b.id )) from unnest(array[1]) a(id)
--Result--
[('a', 1.0)]
+--------------------+
--Query--
select string_agg(a,',') from (values('aaaa'),('bbbb'),('cccc')) g(a)
--Result--
[('aaaa,bbbb,cccc',)]
+--------------------+
--Query--
select string_agg(a,',') from (values('aaaa'),(null),('bbbb'),('cccc')) g(a)
--Result--
[('aaaa,bbbb,cccc',)]
+--------------------+
--Query--
select string_agg(a,'AB') from (values(null),(null),('bbbb'),('cccc')) g(a)
--Result--
[('bbbbABcccc',)]
+--------------------+
--Query--
select string_agg(a,',') from (values(null),(null)) g(a)
--Result--
[(None,)]
+--------------------+
--Query--
select string_agg(v, '') from bytea_test_table
--Result--
[(None,)]
+--------------------+
--Query--
select string_agg(v, '') from bytea_test_table
--Result--
[(<memory at 0x13b5777c0>,)]
+--------------------+
--Query--
select string_agg(v, '') from bytea_test_table
--Result--
[(<memory at 0x13b577940>,)]
+--------------------+
--Query--
select string_agg(v, NULL) from bytea_test_table
--Result--
[(<memory at 0x13b577b80>,)]
+--------------------+
--Query--
select string_agg(v, decode('ee', 'hex')) from bytea_test_table
--Result--
[(<memory at 0x13b577c40>,)]
+--------------------+
--Query--
select * from v_pagg_test order by y
--Result--
[(0, 10, 5000, 500, '10', '990', 500, 10, 5000, 500, 10, 5000, 500), (1, 11, 4991, 250, '1011', '991', 250, 11, 4991, 250, 11, 4991, 250), (2, 2, 4992, 500, '1002', '992', 500, 2, 4992, 500, 2, 4992, 500), (3, 3, 4983, 250, '1003', '983', 250, 3, 4983, 250, 3, 4983, 250), (4, 4, 4994, 500, '1004', '994', 500, 4, 4994, 500, 4, 4994, 500), (5, 15, 4995, 250, '1015', '995', 250, 15, 4995, 250, 15, 4995, 250), (6, 6, 4996, 500, '1006', '996', 500, 6, 4996, 500, 6, 4996, 500), (7, 7, 4987, 250, '1007', '987', 250, 7, 4987, 250, 7, 4987, 250), (8, 8, 4998, 500, '1008', '998', 500, 8, 4998, 500, 8, 4998, 500), (9, 19, 4999, 250, '1019', '999', 250, 19, 4999, 250, 19, 4999, 250)]
+--------------------+
--Query--
explain (costs off) select * from v_pagg_test order by y
--Result--
[('GroupAggregate',), ('  Group Key: pagg_test.y',), ('  ->  Sort',), ("        Sort Key: pagg_test.y, (((unnest(regexp_split_to_array((string_agg((pagg_test.x)::text, ','::text)), ','::text))))::integer)",), ('        ->  Result',), ('              ->  ProjectSet',), ('                    ->  Finalize HashAggregate',), ('                          Group Key: pagg_test.y',), ('                          ->  Gather',), ('                                Workers Planned: 2',), ('                                ->  Partial HashAggregate',), ('                                      Group Key: pagg_test.y',), ('                                      ->  Parallel Seq Scan on pagg_test',)]
+--------------------+
--Query--
select * from v_pagg_test order by y
--Result--
[(0, 10, 5000, 500, '10', '990', 500, 10, 5000, 500, 10, 5000, 500), (1, 11, 4991, 250, '1011', '991', 250, 11, 4991, 250, 11, 4991, 250), (2, 2, 4992, 500, '1002', '992', 500, 2, 4992, 500, 2, 4992, 500), (3, 3, 4983, 250, '1003', '983', 250, 3, 4983, 250, 3, 4983, 250), (4, 4, 4994, 500, '1004', '994', 500, 4, 4994, 500, 4, 4994, 500), (5, 15, 4995, 250, '1015', '995', 250, 15, 4995, 250, 15, 4995, 250), (6, 6, 4996, 500, '1006', '996', 500, 6, 4996, 500, 6, 4996, 500), (7, 7, 4987, 250, '1007', '987', 250, 7, 4987, 250, 7, 4987, 250), (8, 8, 4998, 500, '1008', '998', 500, 8, 4998, 500, 8, 4998, 500), (9, 19, 4999, 250, '1019', '999', 250, 19, 4999, 250, 19, 4999, 250)]
+--------------------+
--Query--
select max(foo COLLATE "C") filter (where (bar collate "POSIX") > '0') from (values ('a', 'b')) AS v(foo,bar)
--Result--
[('a',)]
+--------------------+
--Query--
select any_value(v) filter (where v > 2) from (values (1), (2), (3)) as v (v)
--Result--
[(3,)]
+--------------------+
--Query--
select (select count(*)         from (values (1)) t0(inner_c)) from (values (2),(3)) t1(outer_c)
--Result--
[(1,), (1,)]
+--------------------+
--Query--
select (select count(*) filter (where outer_c <> 0)         from (values (1)) t0(inner_c)) from (values (2),(3)) t1(outer_c)
--Result--
[(2,)]
+--------------------+
--Query--
select (select count(inner_c) filter (where outer_c <> 0)         from (values (1)) t0(inner_c)) from (values (2),(3)) t1(outer_c)
--Result--
[(1,), (1,)]
+--------------------+
--Query--
select max(0) filter (where b1) from bool_test
--Result--
[(None,)]
+--------------------+
--Query--
select (select max(0) filter (where b1)) from bool_test
--Result--
[(None,)]
+--------------------+
--Query--
select p, percentile_cont(p) within group (order by x::float8) from generate_series(1,5) x,      (values (0::float8),(0.1),(0.25),(0.4),(0.5),(0.6),(0.75),(0.9),(1)) v(p) group by p order by p
--Result--
[(0.0, 1.0), (0.1, 1.4), (0.25, 2.0), (0.4, 2.6), (0.5, 3.0), (0.6, 3.4), (0.75, 4.0), (0.9, 4.6), (1.0, 5.0)]
+--------------------+
--Query--
select percentile_cont(0.5) within group (order by b) from aggtest
--Result--
[(None,)]
+--------------------+
--Query--
select percentile_cont(0.5) within group (order by b), sum(b) from aggtest
--Result--
[(None, None)]
+--------------------+
--Query--
select rank(3) within group (order by x) from (values (1),(1),(2),(2),(3),(3),(4)) v(x)
--Result--
[(5,)]
+--------------------+
--Query--
select cume_dist(3) within group (order by x) from (values (1),(1),(2),(2),(3),(3),(4)) v(x)
--Result--
[(0.875,)]
+--------------------+
--Query--
select percent_rank(3) within group (order by x) from (values (1),(1),(2),(2),(3),(3),(4),(5)) v(x)
--Result--
[(0.5,)]
+--------------------+
--Query--
select dense_rank(3) within group (order by x) from (values (1),(1),(2),(2),(3),(3),(4)) v(x)
--Result--
[(3,)]
+--------------------+
--Query--
select percentile_cont(array[0,1,0.25,0.75,0.5,1,0.3,0.32,0.35,0.38,0.4]) within group (order by x) from generate_series(1,6) x
--Result--
[([1.0, 6.0, 2.25, 4.75, 3.5, 6.0, 2.5, 2.6, 2.75, 2.9, 3.0],)]
+--------------------+
--Query--
select percentile_disc(array[0.25,0.5,0.75]) within group (order by x) from unnest('{fred,jim,fred,jack,jill,fred,jill,jim,jim,sheila,jim,sheila}'::text[]) u(x)
--Result--
[(['fred', 'jill', 'jim'],)]
+--------------------+
--Query--
select pg_collation_for(percentile_disc(1) within group (order by x collate "POSIX"))   from (values ('fred'),('jim')) v(x)
--Result--
[('"POSIX"',)]
+--------------------+
--Query--
select rank('adam'::varchar) within group (order by x) from (values ('fred'),('jim')) v(x)
--Result--
[(1,)]
+--------------------+
--Query--
select rank('3') within group (order by x) from generate_series(1,5) x
--Result--
[(3,)]
+--------------------+
--Query--
select percent_rank(0) within group (order by x) from generate_series(1,0) x
--Result--
[(0.0,)]
+--------------------+
--Query--
ANALYZE btg
--Result--
[]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT count(*) FROM btg GROUP BY y, x
--Result--
[('GroupAggregate',), ('  Group Key: y, x',), ('  ->  Sort',), ('        Sort Key: y, x',), ('        ->  Index Only Scan using btg_x_y_idx on btg',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT count(*) FROM btg GROUP BY z, y, w, x
--Result--
[('GroupAggregate',), ('  Group Key: z, y, w, x',), ('  ->  Sort',), ('        Sort Key: z, y, w, x',), ('        ->  Seq Scan on btg',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT count(*) FROM (SELECT * FROM btg ORDER BY x, y, w, z) AS q1 GROUP BY w, x, z, y
--Result--
[('GroupAggregate',), ('  Group Key: q1.w, q1.x, q1.z, q1.y',), ('  ->  Sort',), ('        Sort Key: q1.w, q1.x, q1.z, q1.y',), ('        ->  Subquery Scan on q1',), ('              ->  Incremental Sort',), ('                    Sort Key: btg.x, btg.y, btg.w, btg.z',), ('                    Presorted Key: btg.x, btg.y',), ('                    ->  Index Scan using btg_x_y_idx on btg',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT count(*)   FROM btg t1 JOIN btg t2 ON t1.z = t2.z AND t1.w = t2.w AND t1.x = t2.x   GROUP BY t1.x, t1.y, t1.z, t1.w
--Result--
[('GroupAggregate',), ('  Group Key: t1.x, t1.y, t1.z, t1.w',), ('  ->  Incremental Sort',), ('        Sort Key: t1.x, t1.y, t1.z, t1.w',), ('        Presorted Key: t1.x',), ('        ->  Merge Join',), ('              Merge Cond: ((t1.x = t2.x) AND (t1.z = t2.z) AND (t1.w = t2.w))',), ('              ->  Sort',), ('                    Sort Key: t1.x, t1.z, t1.w',), ('                    ->  Index Scan using btg_x_y_idx on btg t1',), ('              ->  Sort',), ('                    Sort Key: t2.x, t2.z, t2.w',), ('                    ->  Index Scan using btg_x_y_idx on btg t2',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT count(*) FROM btg GROUP BY w, x, z, y ORDER BY y, x, z, w
--Result--
[('GroupAggregate',), ('  Group Key: y, x, z, w',), ('  ->  Sort',), ('        Sort Key: y, x, z, w',), ('        ->  Seq Scan on btg',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT count(*) FROM btg GROUP BY w, x, y, z ORDER BY x*x, z
--Result--
[('Sort',), ('  Sort Key: ((x * x)), z',), ('  ->  GroupAggregate',), ('        Group Key: w, x, y, z',), ('        ->  Sort',), ('              Sort Key: w, x, y, z',), ('              ->  Seq Scan on btg',)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT y, x, array_agg(distinct w)   FROM btg WHERE y < 0 GROUP BY x, y
--Result--
[('GroupAggregate',), ('  Output: y, x, array_agg(DISTINCT w)',), ('  Group Key: btg.x, btg.y',), ('  ->  Sort',), ('        Output: y, x, w',), ('        Sort Key: btg.x, btg.y, btg.w',), ('        ->  Index Only Scan using btg_y_x_w_idx on public.btg',), ('              Output: y, x, w',), ('              Index Cond: (btg.y < 0)',)]
+--------------------+
--Query--
ANALYZE group_agg_pk
--Result--
[]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT avg(c1.f ORDER BY c1.x, c1.y) FROM group_agg_pk c1 JOIN group_agg_pk c2 ON c1.x = c2.x GROUP BY c1.w, c1.z
--Result--
[('GroupAggregate',), ('  Group Key: c1.w, c1.z',), ('  ->  Sort',), ('        Sort Key: c1.w, c1.z, c1.x, c1.y',), ('        ->  Merge Join',), ('              Merge Cond: (c1.x = c2.x)',), ('              ->  Sort',), ('                    Sort Key: c1.x',), ('                    ->  Seq Scan on group_agg_pk c1',), ('              ->  Sort',), ('                    Sort Key: c2.x',), ('                    ->  Seq Scan on group_agg_pk c2',)]
+--------------------+
--Query--
SELECT avg(c1.f ORDER BY c1.x, c1.y) FROM group_agg_pk c1 JOIN group_agg_pk c2 ON c1.x = c2.x GROUP BY c1.w, c1.z
--Result--
[(4.0,), (5.0,)]
+--------------------+
--Query--
ANALYZE agg_sort_order
--Result--
[]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT array_agg(c1 ORDER BY c2),c2 FROM agg_sort_order WHERE c2 < 100 GROUP BY c1 ORDER BY 2
--Result--
[('Sort',), ('  Sort Key: c2',), ('  ->  GroupAggregate',), ('        Group Key: c1',), ('        ->  Incremental Sort',), ('              Sort Key: c1, c2',), ('              Presorted Key: c1',), ('              ->  Index Scan using agg_sort_order_pkey on agg_sort_order',), ('                    Filter: (c2 < 100)',)]
+--------------------+
--Query--
SELECT eatarray(rwagg(ARRAY[1.0::real])), eatarray(rwagg(ARRAY[1.0::real]))
--Result--
[([2.0, 1.0, 1.0, 1.0], [2.0, 1.0, 1.0, 1.0])]
+--------------------+
--Query--
SELECT dense_rank(x) WITHIN GROUP (ORDER BY x) FROM (VALUES (1),(1),(2),(2),(3),(3)) v(x) GROUP BY (x) ORDER BY 1
--Result--
[(1,), (1,), (1,)]
+--------------------+
--Query--
SELECT min(x ORDER BY y) FROM (VALUES(1, NULL)) AS d(x,y)
--Result--
[(1,)]
+--------------------+
--Query--
SELECT min(x ORDER BY y) FROM (VALUES(1, 2)) AS d(x,y)
--Result--
[(1,)]
+--------------------+
--Query--
select v||'a', case v||'a' when 'aa' then 1 else 0 end, count(*)   from unnest(array['a','b']) u(v)  group by v||'a' order by 1
--Result--
[('aa', 1, 1), ('ba', 0, 1)]
+--------------------+
--Query--
select v||'a', case when v||'a' = 'aa' then 1 else 0 end, count(*)   from unnest(array['a','b']) u(v)  group by v||'a' order by 1
--Result--
[('aa', 1, 1), ('ba', 0, 1)]
+--------------------+
--Query--
analyze agg_data_2k
--Result--
[]
+--------------------+
--Query--
analyze agg_data_20k
--Result--
[]
+--------------------+
--Query--
explain (costs off) select g%10000 as c1, sum(g::numeric) as c2, count(*) as c3   from agg_data_20k group by g%10000
--Result--
[('GroupAggregate',), ('  Group Key: ((g % 10000))',), ('  ->  Sort',), ('        Sort Key: ((g % 10000))',), ('        ->  Seq Scan on agg_data_20k',)]
+--------------------+
--Query--
explain (costs off) select g%10000 as c1, sum(g::numeric) as c2, count(*) as c3   from agg_data_20k group by g%10000
--Result--
[('HashAggregate',), ('  Group Key: (g % 10000)',), ('  ->  Seq Scan on agg_data_20k',)]
+--------------------+
--Query--
(select * from agg_hash_1 except select * from agg_group_1)   union all (select * from agg_group_1 except select * from agg_hash_1)
--Result--
[]
+--------------------+
--Query--
(select * from agg_hash_2 except select * from agg_group_2)   union all (select * from agg_group_2 except select * from agg_hash_2)
--Result--
[]
+--------------------+
--Query--
(select * from agg_hash_3 except select * from agg_group_3)   union all (select * from agg_group_3 except select * from agg_hash_3)
--Result--
[]
+--------------------+
--Query--
(select * from agg_hash_4 except select * from agg_group_4)   union all (select * from agg_group_4 except select * from agg_hash_4)
--Result--
[]
+--------------------+
