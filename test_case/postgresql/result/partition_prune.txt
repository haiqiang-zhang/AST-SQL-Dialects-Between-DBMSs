--Query--
explain (costs off) select * from lp
--Result--
[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), ('  ->  Seq Scan on lp_bc lp_2',), ('  ->  Seq Scan on lp_ef lp_3',), ('  ->  Seq Scan on lp_g lp_4',), ('  ->  Seq Scan on lp_null lp_5',), ('  ->  Seq Scan on lp_default lp_6',)]
+--------------------+
--Query--
explain (costs off) select * from lp where a > 'a' and a < 'd'
--Result--
[('Append',), ('  ->  Seq Scan on lp_bc lp_1',), ("        Filter: ((a > 'a'::bpchar) AND (a < 'd'::bpchar))",), ('  ->  Seq Scan on lp_default lp_2',), ("        Filter: ((a > 'a'::bpchar) AND (a < 'd'::bpchar))",)]
+--------------------+
--Query--
explain (costs off) select * from lp where a > 'a' and a <= 'd'
--Result--
[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), ("        Filter: ((a > 'a'::bpchar) AND (a <= 'd'::bpchar))",), ('  ->  Seq Scan on lp_bc lp_2',), ("        Filter: ((a > 'a'::bpchar) AND (a <= 'd'::bpchar))",), ('  ->  Seq Scan on lp_default lp_3',), ("        Filter: ((a > 'a'::bpchar) AND (a <= 'd'::bpchar))",)]
+--------------------+
--Query--
explain (costs off) select * from lp where a = 'a'
--Result--
[('Seq Scan on lp_ad lp',), ("  Filter: (a = 'a'::bpchar)",)]
+--------------------+
--Query--
explain (costs off) select * from lp where 'a' = a
--Result--
[('Seq Scan on lp_ad lp',), ("  Filter: ('a'::bpchar = a)",)]
+--------------------+
--Query--
explain (costs off) select * from lp where a is not null
--Result--
[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on lp_bc lp_2',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on lp_ef lp_3',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on lp_g lp_4',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on lp_default lp_5',), ('        Filter: (a IS NOT NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from lp where a is null
--Result--
[('Seq Scan on lp_null lp',), ('  Filter: (a IS NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from lp where a = 'a' or a = 'c'
--Result--
[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), ("        Filter: ((a = 'a'::bpchar) OR (a = 'c'::bpchar))",), ('  ->  Seq Scan on lp_bc lp_2',), ("        Filter: ((a = 'a'::bpchar) OR (a = 'c'::bpchar))",)]
+--------------------+
--Query--
explain (costs off) select * from lp where a is not null and (a = 'a' or a = 'c')
--Result--
[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), ("        Filter: ((a IS NOT NULL) AND ((a = 'a'::bpchar) OR (a = 'c'::bpchar)))",), ('  ->  Seq Scan on lp_bc lp_2',), ("        Filter: ((a IS NOT NULL) AND ((a = 'a'::bpchar) OR (a = 'c'::bpchar)))",)]
+--------------------+
--Query--
explain (costs off) select * from lp where a <> 'g'
--Result--
[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), ("        Filter: (a <> 'g'::bpchar)",), ('  ->  Seq Scan on lp_bc lp_2',), ("        Filter: (a <> 'g'::bpchar)",), ('  ->  Seq Scan on lp_ef lp_3',), ("        Filter: (a <> 'g'::bpchar)",), ('  ->  Seq Scan on lp_default lp_4',), ("        Filter: (a <> 'g'::bpchar)",)]
+--------------------+
--Query--
explain (costs off) select * from lp where a <> 'a' and a <> 'd'
--Result--
[('Append',), ('  ->  Seq Scan on lp_bc lp_1',), ("        Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))",), ('  ->  Seq Scan on lp_ef lp_2',), ("        Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))",), ('  ->  Seq Scan on lp_g lp_3',), ("        Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))",), ('  ->  Seq Scan on lp_default lp_4',), ("        Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))",)]
+--------------------+
--Query--
explain (costs off) select * from lp where a not in ('a', 'd')
--Result--
[('Append',), ('  ->  Seq Scan on lp_bc lp_1',), ("        Filter: (a <> ALL ('{a,d}'::bpchar[]))",), ('  ->  Seq Scan on lp_ef lp_2',), ("        Filter: (a <> ALL ('{a,d}'::bpchar[]))",), ('  ->  Seq Scan on lp_g lp_3',), ("        Filter: (a <> ALL ('{a,d}'::bpchar[]))",), ('  ->  Seq Scan on lp_default lp_4',), ("        Filter: (a <> ALL ('{a,d}'::bpchar[]))",)]
+--------------------+
--Query--
explain (costs off) select * from coll_pruning where a collate "C" = 'a' collate "C"
--Result--
[('Seq Scan on coll_pruning_a coll_pruning',), ('  Filter: (a = \'a\'::text COLLATE "C")',)]
+--------------------+
--Query--
explain (costs off) select * from coll_pruning where a collate "POSIX" = 'a' collate "POSIX"
--Result--
[('Append',), ('  ->  Seq Scan on coll_pruning_a coll_pruning_1',), ('        Filter: ((a)::text = \'a\'::text COLLATE "POSIX")',), ('  ->  Seq Scan on coll_pruning_b coll_pruning_2',), ('        Filter: ((a)::text = \'a\'::text COLLATE "POSIX")',), ('  ->  Seq Scan on coll_pruning_def coll_pruning_3',), ('        Filter: ((a)::text = \'a\'::text COLLATE "POSIX")',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a < 1
--Result--
[('Seq Scan on rlp1 rlp',), ('  Filter: (a < 1)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where 1 > a
--Result--
[('Seq Scan on rlp1 rlp',), ('  Filter: (1 > a)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a <= 1
--Result--
[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a <= 1)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a <= 1)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 1
--Result--
[('Seq Scan on rlp2 rlp',), ('  Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 1::bigint
--Result--
[('Seq Scan on rlp2 rlp',), ("  Filter: (a = '1'::bigint)",)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 1::numeric
--Result--
[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp2 rlp_2',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp3abcd rlp_3',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp3efgh rlp_4',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp3nullxy rlp_5',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp3_default rlp_6',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp4_1 rlp_7',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp4_2 rlp_8',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp4_default rlp_9',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp5_1 rlp_10',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp5_default rlp_11',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp_default_10 rlp_12',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp_default_30 rlp_13',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp_default_null rlp_14',), ("        Filter: ((a)::numeric = '1'::numeric)",), ('  ->  Seq Scan on rlp_default_default rlp_15',), ("        Filter: ((a)::numeric = '1'::numeric)",)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a <= 10
--Result--
[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a <= 10)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a <= 10)',), ('  ->  Seq Scan on rlp_default_10 rlp_3',), ('        Filter: (a <= 10)',), ('  ->  Seq Scan on rlp_default_default rlp_4',), ('        Filter: (a <= 10)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a > 10
--Result--
[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp3efgh rlp_2',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp3nullxy rlp_3',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp3_default rlp_4',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp4_1 rlp_5',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp4_2 rlp_6',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp4_default rlp_7',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp5_1 rlp_8',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp5_default rlp_9',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp_default_30 rlp_10',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp_default_default rlp_11',), ('        Filter: (a > 10)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a < 15
--Result--
[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a < 15)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a < 15)',), ('  ->  Seq Scan on rlp_default_10 rlp_3',), ('        Filter: (a < 15)',), ('  ->  Seq Scan on rlp_default_default rlp_4',), ('        Filter: (a < 15)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a <= 15
--Result--
[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp3abcd rlp_3',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp3efgh rlp_4',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp3nullxy rlp_5',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp3_default rlp_6',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp_default_10 rlp_7',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp_default_default rlp_8',), ('        Filter: (a <= 15)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a > 15 and b = 'ab'
--Result--
[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ("        Filter: ((a > 15) AND ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp4_1 rlp_2',), ("        Filter: ((a > 15) AND ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp4_2 rlp_3',), ("        Filter: ((a > 15) AND ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp4_default rlp_4',), ("        Filter: ((a > 15) AND ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp5_1 rlp_5',), ("        Filter: ((a > 15) AND ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp5_default rlp_6',), ("        Filter: ((a > 15) AND ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp_default_30 rlp_7',), ("        Filter: ((a > 15) AND ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp_default_default rlp_8',), ("        Filter: ((a > 15) AND ((b)::text = 'ab'::text))",)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 16
--Result--
[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ('        Filter: (a = 16)',), ('  ->  Seq Scan on rlp3efgh rlp_2',), ('        Filter: (a = 16)',), ('  ->  Seq Scan on rlp3nullxy rlp_3',), ('        Filter: (a = 16)',), ('  ->  Seq Scan on rlp3_default rlp_4',), ('        Filter: (a = 16)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 16 and b in ('not', 'in', 'here')
--Result--
[('Seq Scan on rlp3_default rlp',), ("  Filter: ((a = 16) AND ((b)::text = ANY ('{not,in,here}'::text[])))",)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 16 and b < 'ab'
--Result--
[('Seq Scan on rlp3_default rlp',), ("  Filter: (((b)::text < 'ab'::text) AND (a = 16))",)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 16 and b <= 'ab'
--Result--
[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ("        Filter: (((b)::text <= 'ab'::text) AND (a = 16))",), ('  ->  Seq Scan on rlp3_default rlp_2',), ("        Filter: (((b)::text <= 'ab'::text) AND (a = 16))",)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 16 and b is null
--Result--
[('Seq Scan on rlp3nullxy rlp',), ('  Filter: ((b IS NULL) AND (a = 16))',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 16 and b is not null
--Result--
[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ('        Filter: ((b IS NOT NULL) AND (a = 16))',), ('  ->  Seq Scan on rlp3efgh rlp_2',), ('        Filter: ((b IS NOT NULL) AND (a = 16))',), ('  ->  Seq Scan on rlp3nullxy rlp_3',), ('        Filter: ((b IS NOT NULL) AND (a = 16))',), ('  ->  Seq Scan on rlp3_default rlp_4',), ('        Filter: ((b IS NOT NULL) AND (a = 16))',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a is null
--Result--
[('Seq Scan on rlp_default_null rlp',), ('  Filter: (a IS NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a is not null
--Result--
[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp3abcd rlp_3',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp3efgh rlp_4',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp3nullxy rlp_5',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp3_default rlp_6',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp4_1 rlp_7',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp4_2 rlp_8',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp4_default rlp_9',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp5_1 rlp_10',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp5_default rlp_11',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp_default_10 rlp_12',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp_default_30 rlp_13',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp_default_default rlp_14',), ('        Filter: (a IS NOT NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a > 30
--Result--
[('Append',), ('  ->  Seq Scan on rlp5_1 rlp_1',), ('        Filter: (a > 30)',), ('  ->  Seq Scan on rlp5_default rlp_2',), ('        Filter: (a > 30)',), ('  ->  Seq Scan on rlp_default_default rlp_3',), ('        Filter: (a > 30)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 30
--Result--
[('Seq Scan on rlp_default_30 rlp',), ('  Filter: (a = 30)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a <= 31
--Result--
[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp3abcd rlp_3',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp3efgh rlp_4',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp3nullxy rlp_5',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp3_default rlp_6',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp4_1 rlp_7',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp4_2 rlp_8',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp4_default rlp_9',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp5_1 rlp_10',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp_default_10 rlp_11',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp_default_30 rlp_12',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp_default_default rlp_13',), ('        Filter: (a <= 31)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 1 or a = 7
--Result--
[('Seq Scan on rlp2 rlp',), ('  Filter: ((a = 1) OR (a = 7))',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 1 or b = 'ab'
--Result--
[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp2 rlp_2',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp3abcd rlp_3',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp4_1 rlp_4',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp4_2 rlp_5',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp4_default rlp_6',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp5_1 rlp_7',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp5_default rlp_8',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp_default_10 rlp_9',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp_default_30 rlp_10',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp_default_null rlp_11',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",), ('  ->  Seq Scan on rlp_default_default rlp_12',), ("        Filter: ((a = 1) OR ((b)::text = 'ab'::text))",)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a > 20 and a < 27
--Result--
[('Append',), ('  ->  Seq Scan on rlp4_1 rlp_1',), ('        Filter: ((a > 20) AND (a < 27))',), ('  ->  Seq Scan on rlp4_2 rlp_2',), ('        Filter: ((a > 20) AND (a < 27))',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 29
--Result--
[('Seq Scan on rlp4_default rlp',), ('  Filter: (a = 29)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a >= 29
--Result--
[('Append',), ('  ->  Seq Scan on rlp4_default rlp_1',), ('        Filter: (a >= 29)',), ('  ->  Seq Scan on rlp5_1 rlp_2',), ('        Filter: (a >= 29)',), ('  ->  Seq Scan on rlp5_default rlp_3',), ('        Filter: (a >= 29)',), ('  ->  Seq Scan on rlp_default_30 rlp_4',), ('        Filter: (a >= 29)',), ('  ->  Seq Scan on rlp_default_default rlp_5',), ('        Filter: (a >= 29)',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a < 1 or (a > 20 and a < 25)
--Result--
[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: ((a < 1) OR ((a > 20) AND (a < 25)))',), ('  ->  Seq Scan on rlp4_1 rlp_2',), ('        Filter: ((a < 1) OR ((a > 20) AND (a < 25)))',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 20 or a = 40
--Result--
[('Append',), ('  ->  Seq Scan on rlp4_1 rlp_1',), ('        Filter: ((a = 20) OR (a = 40))',), ('  ->  Seq Scan on rlp5_default rlp_2',), ('        Filter: ((a = 20) OR (a = 40))',)]
+--------------------+
--Query--
explain (costs off) select * from rlp3 where a = 20
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a > 1 and a = 10
--Result--
[('Seq Scan on rlp_default_10 rlp',), ('  Filter: ((a > 1) AND (a = 10))',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a > 1 and a >=15
--Result--
[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp3efgh rlp_2',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp3nullxy rlp_3',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp3_default rlp_4',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp4_1 rlp_5',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp4_2 rlp_6',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp4_default rlp_7',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp5_1 rlp_8',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp5_default rlp_9',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp_default_30 rlp_10',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp_default_default rlp_11',), ('        Filter: ((a > 1) AND (a >= 15))',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 1 and a = 3
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from rlp where (a = 1 and a = 3) or (a > 1 and a = 15)
--Result--
[('Append',), ('  ->  Seq Scan on rlp2 rlp_1',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',), ('  ->  Seq Scan on rlp3abcd rlp_2',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',), ('  ->  Seq Scan on rlp3efgh rlp_3',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',), ('  ->  Seq Scan on rlp3nullxy rlp_4',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',), ('  ->  Seq Scan on rlp3_default rlp_5',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a = 1
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on mc3p_default mc3p_3',), ('        Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a = 1 and abs(b) < 1
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((a = 1) AND (abs(b) < 1))',), ('  ->  Seq Scan on mc3p_default mc3p_2',), ('        Filter: ((a = 1) AND (abs(b) < 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a = 1 and abs(b) = 1
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((a = 1) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: ((a = 1) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p_default mc3p_3',), ('        Filter: ((a = 1) AND (abs(b) = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a = 1 and abs(b) = 1 and c < 8
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((c < 8) AND (a = 1) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: ((c < 8) AND (a = 1) AND (abs(b) = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a = 10 and abs(b) between 5 and 35
--Result--
[('Append',), ('  ->  Seq Scan on mc3p1 mc3p_1',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',), ('  ->  Seq Scan on mc3p2 mc3p_2',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',), ('  ->  Seq Scan on mc3p3 mc3p_3',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',), ('  ->  Seq Scan on mc3p4 mc3p_4',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',), ('  ->  Seq Scan on mc3p_default mc3p_5',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a > 10
--Result--
[('Append',), ('  ->  Seq Scan on mc3p5 mc3p_1',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on mc3p6 mc3p_2',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on mc3p7 mc3p_3',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: (a > 10)',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a >= 10
--Result--
[('Append',), ('  ->  Seq Scan on mc3p1 mc3p_1',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p2 mc3p_2',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p3 mc3p_3',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p4 mc3p_4',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p5 mc3p_5',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p6 mc3p_6',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p7 mc3p_7',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p_default mc3p_8',), ('        Filter: (a >= 10)',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a < 10
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (a < 10)',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (a < 10)',), ('  ->  Seq Scan on mc3p_default mc3p_3',), ('        Filter: (a < 10)',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a <= 10 and abs(b) < 10
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((a <= 10) AND (abs(b) < 10))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: ((a <= 10) AND (abs(b) < 10))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: ((a <= 10) AND (abs(b) < 10))',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: ((a <= 10) AND (abs(b) < 10))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a = 11 and abs(b) = 0
--Result--
[('Seq Scan on mc3p_default mc3p',), ('  Filter: ((a = 11) AND (abs(b) = 0))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a = 20 and abs(b) = 10 and c = 100
--Result--
[('Seq Scan on mc3p6 mc3p',), ('  Filter: ((a = 20) AND (c = 100) AND (abs(b) = 10))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a > 20
--Result--
[('Append',), ('  ->  Seq Scan on mc3p7 mc3p_1',), ('        Filter: (a > 20)',), ('  ->  Seq Scan on mc3p_default mc3p_2',), ('        Filter: (a > 20)',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a >= 20
--Result--
[('Append',), ('  ->  Seq Scan on mc3p5 mc3p_1',), ('        Filter: (a >= 20)',), ('  ->  Seq Scan on mc3p6 mc3p_2',), ('        Filter: (a >= 20)',), ('  ->  Seq Scan on mc3p7 mc3p_3',), ('        Filter: (a >= 20)',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: (a >= 20)',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20)
--Result--
[('Append',), ('  ->  Seq Scan on mc3p1 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))',), ('  ->  Seq Scan on mc3p2 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))',), ('  ->  Seq Scan on mc3p5 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20) or a < 1
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',), ('  ->  Seq Scan on mc3p5 mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',), ('  ->  Seq Scan on mc3p_default mc3p_5',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20) or a < 1 or a = 1
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',), ('  ->  Seq Scan on mc3p5 mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',), ('  ->  Seq Scan on mc3p_default mc3p_5',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where a = 1 or abs(b) = 1 or c = 1
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p3 mc3p_4',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p4 mc3p_5',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p5 mc3p_6',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p6 mc3p_7',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p7 mc3p_8',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p_default mc3p_9',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1) or (a = 10 and abs(b) = 10)
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p3 mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p4 mc3p_5',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p_default mc3p_6',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',)]
+--------------------+
--Query--
explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1) or (a = 10 and abs(b) = 9)
--Result--
[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p where a < 2
--Result--
[('Append',), ('  ->  Seq Scan on mc2p0 mc2p_1',), ('        Filter: (a < 2)',), ('  ->  Seq Scan on mc2p1 mc2p_2',), ('        Filter: (a < 2)',), ('  ->  Seq Scan on mc2p2 mc2p_3',), ('        Filter: (a < 2)',), ('  ->  Seq Scan on mc2p_default mc2p_4',), ('        Filter: (a < 2)',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p where a = 2 and b < 1
--Result--
[('Seq Scan on mc2p3 mc2p',), ('  Filter: ((b < 1) AND (a = 2))',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p where a > 1
--Result--
[('Append',), ('  ->  Seq Scan on mc2p2 mc2p_1',), ('        Filter: (a > 1)',), ('  ->  Seq Scan on mc2p3 mc2p_2',), ('        Filter: (a > 1)',), ('  ->  Seq Scan on mc2p4 mc2p_3',), ('        Filter: (a > 1)',), ('  ->  Seq Scan on mc2p5 mc2p_4',), ('        Filter: (a > 1)',), ('  ->  Seq Scan on mc2p_default mc2p_5',), ('        Filter: (a > 1)',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p where a = 1 and b > 1
--Result--
[('Seq Scan on mc2p2 mc2p',), ('  Filter: ((b > 1) AND (a = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p where a = 1 and b is null
--Result--
[('Seq Scan on mc2p_default mc2p',), ('  Filter: ((b IS NULL) AND (a = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p where a is null and b is null
--Result--
[('Seq Scan on mc2p_default mc2p',), ('  Filter: ((a IS NULL) AND (b IS NULL))',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p where a is null and b = 1
--Result--
[('Seq Scan on mc2p_default mc2p',), ('  Filter: ((a IS NULL) AND (b = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p where a is null
--Result--
[('Seq Scan on mc2p_default mc2p',), ('  Filter: (a IS NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p where b is null
--Result--
[('Seq Scan on mc2p_default mc2p',), ('  Filter: (b IS NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a in (true, false)
--Result--
[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ("        Filter: (a = ANY ('{t,f}'::boolean[]))",), ('  ->  Seq Scan on boolpart_t boolpart_2',), ("        Filter: (a = ANY ('{t,f}'::boolean[]))",)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a = false
--Result--
[('Seq Scan on boolpart_f boolpart',), ('  Filter: (NOT a)',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where not a = false
--Result--
[('Seq Scan on boolpart_t boolpart',), ('  Filter: a',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is true or a is not true
--Result--
[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',), ('  ->  Seq Scan on boolpart_default boolpart_3',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is not true
--Result--
[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS NOT TRUE)',), ('  ->  Seq Scan on boolpart_default boolpart_2',), ('        Filter: (a IS NOT TRUE)',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is not true and a is not false
--Result--
[('Seq Scan on boolpart_default boolpart',), ('  Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is unknown
--Result--
[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS UNKNOWN)',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: (a IS UNKNOWN)',), ('  ->  Seq Scan on boolpart_default boolpart_3',), ('        Filter: (a IS UNKNOWN)',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is not unknown
--Result--
[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_default boolpart_3',), ('        Filter: (a IS NOT UNKNOWN)',)]
+--------------------+
--Query--
select * from boolpart where a in (true, false)
--Result--
[(False,), (True,)]
+--------------------+
--Query--
select * from boolpart where a = false
--Result--
[(False,)]
+--------------------+
--Query--
select * from boolpart where not a = false
--Result--
[(True,)]
+--------------------+
--Query--
select * from boolpart where a is true or a is not true
--Result--
[(False,), (True,), (None,)]
+--------------------+
--Query--
select * from boolpart where a is not true
--Result--
[(False,), (None,)]
+--------------------+
--Query--
select * from boolpart where a is not true and a is not false
--Result--
[(None,)]
+--------------------+
--Query--
select * from boolpart where a is unknown
--Result--
[(None,)]
+--------------------+
--Query--
select * from boolpart where a is not unknown
--Result--
[(False,), (True,)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is not true
--Result--
[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS NOT TRUE)',), ('  ->  Seq Scan on boolpart_null boolpart_2',), ('        Filter: (a IS NOT TRUE)',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is not true and a is not false
--Result--
[('Seq Scan on boolpart_null boolpart',), ('  Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is not false
--Result--
[('Append',), ('  ->  Seq Scan on boolpart_t boolpart_1',), ('        Filter: (a IS NOT FALSE)',), ('  ->  Seq Scan on boolpart_null boolpart_2',), ('        Filter: (a IS NOT FALSE)',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is not unknown
--Result--
[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_null boolpart_3',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_default boolpart_4',), ('        Filter: (a IS NOT UNKNOWN)',)]
+--------------------+
--Query--
select * from boolpart where a is not true
--Result--
[(False,), (None,)]
+--------------------+
--Query--
select * from boolpart where a is not true and a is not false
--Result--
[(None,)]
+--------------------+
--Query--
select * from boolpart where a is not false
--Result--
[(True,), (None,)]
+--------------------+
--Query--
select * from boolpart where a is not unknown
--Result--
[(False,), (True,)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is not unknown and a is unknown
--Result--
[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: ((a IS NOT UNKNOWN) AND (a IS UNKNOWN))',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: ((a IS NOT UNKNOWN) AND (a IS UNKNOWN))',), ('  ->  Seq Scan on boolpart_null boolpart_3',), ('        Filter: ((a IS NOT UNKNOWN) AND (a IS UNKNOWN))',), ('  ->  Seq Scan on boolpart_default boolpart_4',), ('        Filter: ((a IS NOT UNKNOWN) AND (a IS UNKNOWN))',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is false and a is unknown
--Result--
[('Seq Scan on boolpart_f boolpart',), ('  Filter: ((a IS FALSE) AND (a IS UNKNOWN))',)]
+--------------------+
--Query--
explain (costs off) select * from boolpart where a is true and a is unknown
--Result--
[('Seq Scan on boolpart_t boolpart',), ('  Filter: ((a IS TRUE) AND (a IS UNKNOWN))',)]
+--------------------+
--Query--
explain (costs off) select * from iboolpart where a in (true, false)
--Result--
[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ("        Filter: (a = ANY ('{t,f}'::boolean[]))",), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ("        Filter: (a = ANY ('{t,f}'::boolean[]))",), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ("        Filter: (a = ANY ('{t,f}'::boolean[]))",)]
+--------------------+
--Query--
explain (costs off) select * from iboolpart where a = false
--Result--
[('Seq Scan on iboolpart_f iboolpart',), ('  Filter: (NOT a)',)]
+--------------------+
--Query--
explain (costs off) select * from iboolpart where not a = false
--Result--
[('Seq Scan on iboolpart_t iboolpart',), ('  Filter: a',)]
+--------------------+
--Query--
explain (costs off) select * from iboolpart where a is true or a is not true
--Result--
[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',)]
+--------------------+
--Query--
explain (costs off) select * from iboolpart where a is not true
--Result--
[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: (a IS NOT TRUE)',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: (a IS NOT TRUE)',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: (a IS NOT TRUE)',)]
+--------------------+
--Query--
explain (costs off) select * from iboolpart where a is not true and a is not false
--Result--
[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',)]
+--------------------+
--Query--
explain (costs off) select * from iboolpart where a is unknown
--Result--
[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: (a IS UNKNOWN)',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: (a IS UNKNOWN)',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: (a IS UNKNOWN)',)]
+--------------------+
--Query--
explain (costs off) select * from iboolpart where a is not unknown
--Result--
[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: (a IS NOT UNKNOWN)',)]
+--------------------+
--Query--
select * from iboolpart where a in (true, false)
--Result--
[(True,), (False,)]
+--------------------+
--Query--
select * from iboolpart where a = false
--Result--
[(False,)]
+--------------------+
--Query--
select * from iboolpart where not a = false
--Result--
[(True,)]
+--------------------+
--Query--
select * from iboolpart where a is true or a is not true
--Result--
[(True,), (False,), (None,)]
+--------------------+
--Query--
select * from iboolpart where a is not true
--Result--
[(False,), (None,)]
+--------------------+
--Query--
select * from iboolpart where a is not true and a is not false
--Result--
[(None,)]
+--------------------+
--Query--
select * from iboolpart where a is unknown
--Result--
[(None,)]
+--------------------+
--Query--
select * from iboolpart where a is not unknown
--Result--
[(True,), (False,)]
+--------------------+
--Query--
select * from iboolpart where a is not true
--Result--
[(False,), (None,)]
+--------------------+
--Query--
select * from iboolpart where a is not true and a is not false
--Result--
[(None,)]
+--------------------+
--Query--
select * from iboolpart where a is not false
--Result--
[(True,), (None,)]
+--------------------+
--Query--
explain (costs off)  select * from boolrangep where not a and not b and c = 25
--Result--
[('Seq Scan on boolrangep_ff1 boolrangep',), ('  Filter: ((NOT a) AND (NOT b) AND (c = 25))',)]
+--------------------+
--Query--
explain (costs off)  select * from boolrangep where a is not true and not b and c = 25
--Result--
[('Append',), ('  ->  Seq Scan on boolrangep_ff1 boolrangep_1',), ('        Filter: ((a IS NOT TRUE) AND (NOT b) AND (c = 25))',), ('  ->  Seq Scan on boolrangep_ff2 boolrangep_2',), ('        Filter: ((a IS NOT TRUE) AND (NOT b) AND (c = 25))',), ('  ->  Seq Scan on boolrangep_ft boolrangep_3',), ('        Filter: ((a IS NOT TRUE) AND (NOT b) AND (c = 25))',), ('  ->  Seq Scan on boolrangep_null boolrangep_4',), ('        Filter: ((a IS NOT TRUE) AND (NOT b) AND (c = 25))',)]
+--------------------+
--Query--
explain (costs off)  select * from boolrangep where a is not false and not b and c = 25
--Result--
[('Append',), ('  ->  Seq Scan on boolrangep_tf boolrangep_1',), ('        Filter: ((a IS NOT FALSE) AND (NOT b) AND (c = 25))',), ('  ->  Seq Scan on boolrangep_null boolrangep_2',), ('        Filter: ((a IS NOT FALSE) AND (NOT b) AND (c = 25))',)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a in ('ab', to_char(125, '999'))
--Result--
[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), ("        Filter: ((a)::text = ANY ((ARRAY['ab'::character varying, (to_char(125, '999'::text))::character varying])::text[]))",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), ("        Filter: ((a)::text = ANY ((ARRAY['ab'::character varying, (to_char(125, '999'::text))::character varying])::text[]))",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), ("        Filter: ((a)::text = ANY ((ARRAY['ab'::character varying, (to_char(125, '999'::text))::character varying])::text[]))",)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a ~ any ('{ab}')
--Result--
[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), ("        Filter: ((a)::text ~ ANY ('{ab}'::text[]))",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), ("        Filter: ((a)::text ~ ANY ('{ab}'::text[]))",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), ("        Filter: ((a)::text ~ ANY ('{ab}'::text[]))",)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a !~ all ('{ab}')
--Result--
[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), ("        Filter: ((a)::text !~ ALL ('{ab}'::text[]))",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), ("        Filter: ((a)::text !~ ALL ('{ab}'::text[]))",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), ("        Filter: ((a)::text !~ ALL ('{ab}'::text[]))",)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a ~ any ('{ab,bc}')
--Result--
[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), ("        Filter: ((a)::text ~ ANY ('{ab,bc}'::text[]))",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), ("        Filter: ((a)::text ~ ANY ('{ab,bc}'::text[]))",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), ("        Filter: ((a)::text ~ ANY ('{ab,bc}'::text[]))",)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a !~ all ('{ab,bc}')
--Result--
[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), ("        Filter: ((a)::text !~ ALL ('{ab,bc}'::text[]))",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), ("        Filter: ((a)::text !~ ALL ('{ab,bc}'::text[]))",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), ("        Filter: ((a)::text !~ ALL ('{ab,bc}'::text[]))",)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a = any ('{ab,bc}')
--Result--
[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), ("        Filter: ((a)::text = ANY ('{ab,bc}'::text[]))",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), ("        Filter: ((a)::text = ANY ('{ab,bc}'::text[]))",)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a = any ('{ab,null}')
--Result--
[('Seq Scan on coercepart_ab coercepart',), ("  Filter: ((a)::text = ANY ('{ab,NULL}'::text[]))",)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a = any (null::text[])
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a = all ('{ab}')
--Result--
[('Seq Scan on coercepart_ab coercepart',), ("  Filter: ((a)::text = ALL ('{ab}'::text[]))",)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a = all ('{ab,bc}')
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a = all ('{ab,null}')
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from coercepart where a = all (null::text[])
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF) SELECT tableoid::regclass as part, a, b FROM part WHERE a IS NULL ORDER BY 1, 2, 3
--Result--
[('Sort',), ('  Sort Key: ((part.tableoid)::regclass), part.a, part.b',), ('  ->  Seq Scan on part_p2_p1 part',), ('        Filter: (a IS NULL)',)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM part p(x) ORDER BY x
--Result--
[('Sort',), ('  Output: p.x, p.b',), ('  Sort Key: p.x',), ('  ->  Append',), ('        ->  Seq Scan on public.part_p1 p_1',), ('              Output: p_1.x, p_1.b',), ('        ->  Seq Scan on public.part_rev p_2',), ('              Output: p_2.x, p_2.b',), ('        ->  Seq Scan on public.part_p2_p1 p_3',), ('              Output: p_3.x, p_3.b',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.a = t1.b and abs(t2.b) = 1 and t2.c = 1) s where t1.a = 1
--Result--
[('Nested Loop',), ('  ->  Append',), ('        ->  Seq Scan on mc2p1 t1_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p2 t1_2',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p_default t1_3',), ('              Filter: (a = 1)',), ('  ->  Aggregate',), ('        ->  Append',), ('              ->  Seq Scan on mc3p0 t2_1',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p1 t2_2',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p2 t2_3',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p3 t2_4',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p4 t2_5',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p5 t2_6',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p6 t2_7',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p7 t2_8',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p_default t2_9',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.c = t1.b and abs(t2.b) = 1 and t2.a = 1) s where t1.a = 1
--Result--
[('Nested Loop',), ('  ->  Append',), ('        ->  Seq Scan on mc2p1 t1_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p2 t1_2',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p_default t1_3',), ('              Filter: (a = 1)',), ('  ->  Aggregate',), ('        ->  Append',), ('              ->  Seq Scan on mc3p0 t2_1',), ('                    Filter: ((c = t1.b) AND (a = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p1 t2_2',), ('                    Filter: ((c = t1.b) AND (a = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p_default t2_3',), ('                    Filter: ((c = t1.b) AND (a = 1) AND (abs(b) = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.a = 1 and abs(t2.b) = 1 and t2.c = 1) s where t1.a = 1
--Result--
[('Nested Loop',), ('  ->  Aggregate',), ('        ->  Seq Scan on mc3p1 t2',), ('              Filter: ((a = 1) AND (c = 1) AND (abs(b) = 1))',), ('  ->  Append',), ('        ->  Seq Scan on mc2p1 t1_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p2 t1_2',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p_default t1_3',), ('              Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) select * from rp where a <> 1
--Result--
[('Append',), ('  ->  Seq Scan on rp0 rp_1',), ('        Filter: (a <> 1)',), ('  ->  Seq Scan on rp1 rp_2',), ('        Filter: (a <> 1)',), ('  ->  Seq Scan on rp2 rp_3',), ('        Filter: (a <> 1)',)]
+--------------------+
--Query--
explain (costs off) select * from rp where a <> 1 and a <> 2
--Result--
[('Append',), ('  ->  Seq Scan on rp0 rp_1',), ('        Filter: ((a <> 1) AND (a <> 2))',), ('  ->  Seq Scan on rp1 rp_2',), ('        Filter: ((a <> 1) AND (a <> 2))',), ('  ->  Seq Scan on rp2 rp_3',), ('        Filter: ((a <> 1) AND (a <> 2))',)]
+--------------------+
--Query--
explain (costs off) select * from lp where a <> 'a'
--Result--
[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), ("        Filter: (a <> 'a'::bpchar)",), ('  ->  Seq Scan on lp_bc lp_2',), ("        Filter: (a <> 'a'::bpchar)",), ('  ->  Seq Scan on lp_ef lp_3',), ("        Filter: (a <> 'a'::bpchar)",), ('  ->  Seq Scan on lp_g lp_4',), ("        Filter: (a <> 'a'::bpchar)",), ('  ->  Seq Scan on lp_default lp_5',), ("        Filter: (a <> 'a'::bpchar)",)]
+--------------------+
--Query--
explain (costs off) select * from lp where a <> 'a' and a is null
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from lp where (a <> 'a' and a <> 'd') or a is null
--Result--
[('Append',), ('  ->  Seq Scan on lp_bc lp_1',), ("        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))",), ('  ->  Seq Scan on lp_ef lp_2',), ("        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))",), ('  ->  Seq Scan on lp_g lp_3',), ("        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))",), ('  ->  Seq Scan on lp_null lp_4',), ("        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))",), ('  ->  Seq Scan on lp_default lp_5',), ("        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))",)]
+--------------------+
--Query--
explain (costs off) select * from rlp where a = 15 and b <> 'ab' and b <> 'cd' and b <> 'xy' and b is not null
--Result--
[('Append',), ('  ->  Seq Scan on rlp3efgh rlp_1',), ("        Filter: ((b IS NOT NULL) AND ((b)::text <> 'ab'::text) AND ((b)::text <> 'cd'::text) AND ((b)::text <> 'xy'::text) AND (a = 15))",), ('  ->  Seq Scan on rlp3_default rlp_2',), ("        Filter: ((b IS NOT NULL) AND ((b)::text <> 'ab'::text) AND ((b)::text <> 'cd'::text) AND ((b)::text <> 'xy'::text) AND (a = 15))",)]
+--------------------+
--Query--
explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'e' collate "C"
--Result--
[('Append',), ('  ->  Seq Scan on coll_pruning_multi1 coll_pruning_multi_1',), ('        Filter: (substr(a, 1) = \'e\'::text COLLATE "C")',), ('  ->  Seq Scan on coll_pruning_multi2 coll_pruning_multi_2',), ('        Filter: (substr(a, 1) = \'e\'::text COLLATE "C")',), ('  ->  Seq Scan on coll_pruning_multi3 coll_pruning_multi_3',), ('        Filter: (substr(a, 1) = \'e\'::text COLLATE "C")',)]
+--------------------+
--Query--
explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'a' collate "POSIX"
--Result--
[('Append',), ('  ->  Seq Scan on coll_pruning_multi1 coll_pruning_multi_1',), ('        Filter: (substr(a, 1) = \'a\'::text COLLATE "POSIX")',), ('  ->  Seq Scan on coll_pruning_multi2 coll_pruning_multi_2',), ('        Filter: (substr(a, 1) = \'a\'::text COLLATE "POSIX")',)]
+--------------------+
--Query--
explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'e' collate "C" and substr(a, 1) = 'a' collate "POSIX"
--Result--
[('Seq Scan on coll_pruning_multi2 coll_pruning_multi',), ('  Filter: ((substr(a, 1) = \'e\'::text COLLATE "C") AND (substr(a, 1) = \'a\'::text COLLATE "POSIX"))',)]
+--------------------+
--Query--
explain (costs off) select * from like_op_noprune where a like '%BC'
--Result--
[('Append',), ('  ->  Seq Scan on like_op_noprune1 like_op_noprune_1',), ("        Filter: (a ~~ '%BC'::text)",), ('  ->  Seq Scan on like_op_noprune2 like_op_noprune_2',), ("        Filter: (a ~~ '%BC'::text)",)]
+--------------------+
--Query--
explain (costs off) select * from lparted_by_int2 where a = 100_000_000_000_000
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from rparted_by_int2 where a > 100_000_000_000_000
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from rparted_by_int2 where a > 100_000_000_000_000
--Result--
[('Seq Scan on rparted_by_int2_maxvalue rparted_by_int2',), ("  Filter: (a > '100000000000000'::bigint)",)]
+--------------------+
--Query--
prepare ab_q1 (int, int, int) as select * from ab where a between $1 and $2 and b <= $3
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute ab_q1 (2, 2, 3)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 6',), ('  ->  Seq Scan on ab_a2_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b3 ab_3 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute ab_q1 (1, 2, 3)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 3',), ('  ->  Seq Scan on ab_a1_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a1_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a1_b3 ab_3 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b1 ab_4 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b2 ab_5 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b3 ab_6 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',)]
+--------------------+
--Query--
deallocate ab_q1
--Result--
[]
+--------------------+
--Query--
prepare ab_q1 (int, int) as select a from ab where a between $1 and $2 and b < 3
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute ab_q1 (2, 2)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 4',), ('  ->  Seq Scan on ab_a2_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute ab_q1 (2, 4)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',), ('  ->  Seq Scan on ab_a2_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',), ('  ->  Seq Scan on ab_a3_b1 ab_3 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',), ('  ->  Seq Scan on ab_a3_b2 ab_4 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',)]
+--------------------+
--Query--
prepare ab_q2 (int, int) as select a from ab where a between $1 and $2 and b < (select 3)
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute ab_q2 (2, 2)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 6',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on ab_a2_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < $0))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < $0))',), ('  ->  Seq Scan on ab_a2_b3 ab_3 (never executed)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < $0))',)]
+--------------------+
--Query--
prepare ab_q3 (int, int) as select a from ab where b between $1 and $2 and a < (select 3)
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute ab_q3 (2, 2)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 6',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on ab_a1_b2 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((b >= $1) AND (b <= $2) AND (a < $0))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((b >= $1) AND (b <= $2) AND (a < $0))',), ('  ->  Seq Scan on ab_a3_b2 ab_3 (never executed)',), ('        Filter: ((b >= $1) AND (b <= $2) AND (a < $0))',)]
+--------------------+
--Query--
declare cur SCROLL CURSOR for select 1 from list_part where a > (select 1) and a < (select 4)
--Result--
[]
+--------------------+
--Query--
move 3 from cur
--Result--
[]
+--------------------+
--Query--
fetch backward all from cur
--Result--
[(1,), (1,)]
+--------------------+
--Query--
prepare ab_q4 (int, int) as select avg(a) from ab where a between $1 and $2 and b < 4
--Result--
[]
+--------------------+
--Query--
prepare ab_q5 (int, int, int) as select avg(a) from ab where a in($1,$2,$3) and b < 4
--Result--
[]
+--------------------+
--Query--
analyze lprt_a
--Result--
[]
+--------------------+
--Query--
select c.relname,c.relpages,c.reltuples,i.indisvalid,s.autovacuum_count,s.autoanalyze_count from pg_class c left join pg_stat_all_tables s on c.oid = s.relid left join pg_index i on c.oid = i.indexrelid where c.relname like 'ab\_%' order by c.relname
--Result--
[('ab_a1', 0, -1.0, None, 0, 0), ('ab_a1_b1', 0, -1.0, None, 0, 0), ('ab_a1_b1_a_idx', 1, 0.0, True, None, None), ('ab_a1_b2', 0, -1.0, None, 0, 0), ('ab_a1_b2_a_idx', 1, 0.0, True, None, None), ('ab_a1_b3', 0, -1.0, None, 0, 0), ('ab_a1_b3_a_idx', 1, 0.0, True, None, None), ('ab_a2', 0, -1.0, None, 0, 0), ('ab_a2_b1', 0, -1.0, None, 0, 0), ('ab_a2_b1_a_idx', 1, 0.0, True, None, None), ('ab_a2_b2', 0, -1.0, None, 0, 0), ('ab_a2_b2_a_idx', 1, 0.0, True, None, None), ('ab_a2_b3', 0, -1.0, None, 0, 0), ('ab_a2_b3_a_idx', 1, 0.0, True, None, None), ('ab_a3', 0, -1.0, None, 0, 0), ('ab_a3_b1', 0, -1.0, None, 0, 0), ('ab_a3_b1_a_idx', 1, 0.0, True, None, None), ('ab_a3_b2', 0, -1.0, None, 0, 0), ('ab_a3_b2_a_idx', 1, 0.0, True, None, None), ('ab_a3_b3', 0, -1.0, None, 0, 0), ('ab_a3_b3_a_idx', 1, 0.0, True, None, None)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from ab where a = (select max(a) from lprt_a) and b = (select max(a)-1 from lprt_a)
--Result--
[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Aggregate (actual rows=1 loops=1)',), ('          ->  Seq Scan on lprt_a (actual rows=102 loops=1)',), ('  InitPlan 2 (returns $1)',), ('    ->  Aggregate (actual rows=1 loops=1)',), ('          ->  Seq Scan on lprt_a lprt_a_1 (actual rows=102 loops=1)',), ('  ->  Bitmap Heap Scan on ab_a1_b1 ab_1 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a1_b1_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a1_b2 ab_2 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a1_b2_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a1_b3 ab_3 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a1_b3_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a2_b1 ab_4 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a2_b1_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a2_b2 ab_5 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a2_b2_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a2_b3 ab_6 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a2_b3_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a3_b1 ab_7 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a3_b1_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a3_b2 ab_8 (actual rows=0 loops=1)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a3_b2_a_idx (actual rows=0 loops=1)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a3_b3 ab_9 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a3_b3_a_idx (never executed)',), ('              Index Cond: (a = $0)',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from (select * from ab where a = 1 union all select * from ab) ab where b = (select 1)
--Result--
[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Append (actual rows=0 loops=1)',), ('        ->  Bitmap Heap Scan on ab_a1_b1 ab_11 (actual rows=0 loops=1)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b1_a_idx (actual rows=0 loops=1)',), ('                    Index Cond: (a = 1)',), ('        ->  Bitmap Heap Scan on ab_a1_b2 ab_12 (never executed)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b2_a_idx (never executed)',), ('                    Index Cond: (a = 1)',), ('        ->  Bitmap Heap Scan on ab_a1_b3 ab_13 (never executed)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b3_a_idx (never executed)',), ('                    Index Cond: (a = 1)',), ('  ->  Seq Scan on ab_a1_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a1_b2 ab_2 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a1_b3 ab_3 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b1 ab_4 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b2 ab_5 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b3 ab_6 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b1 ab_7 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b2 ab_8 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b3 ab_9 (never executed)',), ('        Filter: (b = $0)',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from (select * from ab where a = 1 union all (values(10,5)) union all select * from ab) ab where b = (select 1)
--Result--
[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Append (actual rows=0 loops=1)',), ('        ->  Bitmap Heap Scan on ab_a1_b1 ab_11 (actual rows=0 loops=1)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b1_a_idx (actual rows=0 loops=1)',), ('                    Index Cond: (a = 1)',), ('        ->  Bitmap Heap Scan on ab_a1_b2 ab_12 (never executed)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b2_a_idx (never executed)',), ('                    Index Cond: (a = 1)',), ('        ->  Bitmap Heap Scan on ab_a1_b3 ab_13 (never executed)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b3_a_idx (never executed)',), ('                    Index Cond: (a = 1)',), ('  ->  Result (actual rows=0 loops=1)',), ('        One-Time Filter: (5 = $0)',), ('  ->  Seq Scan on ab_a1_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a1_b2 ab_2 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a1_b3 ab_3 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b1 ab_4 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b2 ab_5 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b3 ab_6 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b1 ab_7 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b2 ab_8 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b3 ab_9 (never executed)',), ('        Filter: (b = $0)',)]
+--------------------+
--Query--
prepare ab_q6 as select * from ( 	select tableoid::regclass,a,b from ab union all 	select tableoid::regclass,x,y from xy_1 union all 	select tableoid::regclass,a,b from ab ) ab where a = $1 and b = (select -10)
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute ab_q6(1)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 12',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on ab_a1_b1 ab_1 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on ab_a1_b2 ab_2 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on ab_a1_b3 ab_3 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on xy_1 (actual rows=0 loops=1)',), ('        Filter: ((x = $1) AND (y = $0))',), ('        Rows Removed by Filter: 1',), ('  ->  Seq Scan on ab_a1_b1 ab_4 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on ab_a1_b2 ab_5 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on ab_a1_b3 ab_6 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',)]
+--------------------+
--Query--
execute ab_q6(100)
--Result--
[('xy_1', 100, -10)]
+--------------------+
--Query--
deallocate ab_q1
--Result--
[]
+--------------------+
--Query--
deallocate ab_q2
--Result--
[]
+--------------------+
--Query--
deallocate ab_q3
--Result--
[]
+--------------------+
--Query--
deallocate ab_q4
--Result--
[]
+--------------------+
--Query--
deallocate ab_q5
--Result--
[]
+--------------------+
--Query--
deallocate ab_q6
--Result--
[]
+--------------------+
--Query--
select c.relname,c.relpages,c.reltuples,i.indisvalid,s.autovacuum_count,s.autoanalyze_count from pg_class c left join pg_stat_all_tables s on c.oid = s.relid left join pg_index i on c.oid = i.indexrelid where c.relname like 'ab\_%' order by c.relname
--Result--
[('ab_a1', 0, -1.0, None, 0, 0), ('ab_a1_b1', 0, -1.0, None, 0, 0), ('ab_a1_b1_a_idx', 1, 0.0, True, None, None), ('ab_a1_b2', 0, -1.0, None, 0, 0), ('ab_a1_b2_a_idx', 1, 0.0, True, None, None), ('ab_a1_b3', 0, -1.0, None, 0, 0), ('ab_a1_b3_a_idx', 1, 0.0, True, None, None), ('ab_a2', 0, -1.0, None, 0, 0), ('ab_a2_b1', 0, -1.0, None, 0, 0), ('ab_a2_b1_a_idx', 1, 0.0, True, None, None), ('ab_a2_b2', 0, -1.0, None, 0, 0), ('ab_a2_b2_a_idx', 1, 0.0, True, None, None), ('ab_a2_b3', 0, -1.0, None, 0, 0), ('ab_a2_b3_a_idx', 1, 0.0, True, None, None), ('ab_a3', 0, -1.0, None, 0, 0), ('ab_a3_b1', 0, -1.0, None, 0, 0), ('ab_a3_b1_a_idx', 1, 0.0, True, None, None), ('ab_a3_b2', 0, -1.0, None, 0, 0), ('ab_a3_b2_a_idx', 1, 0.0, True, None, None), ('ab_a3_b3', 0, -1.0, None, 0, 0), ('ab_a3_b3_a_idx', 1, 0.0, True, None, None)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) update ab_a1 set b = 3 from ab where ab.a = 1 and ab.a = ab_a1.a
--Result--
[('Update on ab_a1 (actual rows=0 loops=1)',), ('  Update on ab_a1_b1 ab_a1_1',), ('  Update on ab_a1_b2 ab_a1_2',), ('  Update on ab_a1_b3 ab_a1_3',), ('  ->  Nested Loop (actual rows=1 loops=1)',), ('        ->  Append (actual rows=1 loops=1)',), ('              ->  Bitmap Heap Scan on ab_a1_b1 ab_a1_1 (actual rows=0 loops=1)',), ('                    Recheck Cond: (a = 1)',), ('                    ->  Bitmap Index Scan on ab_a1_b1_a_idx (actual rows=0 loops=1)',), ('                          Index Cond: (a = 1)',), ('              ->  Bitmap Heap Scan on ab_a1_b2 ab_a1_2 (actual rows=1 loops=1)',), ('                    Recheck Cond: (a = 1)',), ('                    Heap Blocks: exact=1',), ('                    ->  Bitmap Index Scan on ab_a1_b2_a_idx (actual rows=1 loops=1)',), ('                          Index Cond: (a = 1)',), ('              ->  Bitmap Heap Scan on ab_a1_b3 ab_a1_3 (actual rows=0 loops=1)',), ('                    Recheck Cond: (a = 1)',), ('                    Heap Blocks: exact=1',), ('                    ->  Bitmap Index Scan on ab_a1_b3_a_idx (actual rows=1 loops=1)',), ('                          Index Cond: (a = 1)',), ('        ->  Materialize (actual rows=1 loops=1)',), ('              ->  Append (actual rows=1 loops=1)',), ('                    ->  Bitmap Heap Scan on ab_a1_b1 ab_1 (actual rows=0 loops=1)',), ('                          Recheck Cond: (a = 1)',), ('                          ->  Bitmap Index Scan on ab_a1_b1_a_idx (actual rows=0 loops=1)',), ('                                Index Cond: (a = 1)',), ('                    ->  Bitmap Heap Scan on ab_a1_b2 ab_2 (actual rows=1 loops=1)',), ('                          Recheck Cond: (a = 1)',), ('                          Heap Blocks: exact=1',), ('                          ->  Bitmap Index Scan on ab_a1_b2_a_idx (actual rows=1 loops=1)',), ('                                Index Cond: (a = 1)',), ('                    ->  Bitmap Heap Scan on ab_a1_b3 ab_3 (actual rows=0 loops=1)',), ('                          Recheck Cond: (a = 1)',), ('                          Heap Blocks: exact=1',), ('                          ->  Bitmap Index Scan on ab_a1_b3_a_idx (actual rows=1 loops=1)',), ('                                Index Cond: (a = 1)',)]
+--------------------+
--Query--
table ab
--Result--
[(1, 3)]
+--------------------+
--Query--
truncate ab
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) update ab_a1 set b = 3 from ab_a2 where ab_a2.b = (select 1)
--Result--
[('Update on ab_a1 (actual rows=0 loops=1)',), ('  Update on ab_a1_b1 ab_a1_1',), ('  Update on ab_a1_b2 ab_a1_2',), ('  Update on ab_a1_b3 ab_a1_3',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Nested Loop (actual rows=3 loops=1)',), ('        ->  Append (actual rows=3 loops=1)',), ('              ->  Seq Scan on ab_a1_b1 ab_a1_1 (actual rows=1 loops=1)',), ('              ->  Seq Scan on ab_a1_b2 ab_a1_2 (actual rows=1 loops=1)',), ('              ->  Seq Scan on ab_a1_b3 ab_a1_3 (actual rows=1 loops=1)',), ('        ->  Materialize (actual rows=1 loops=3)',), ('              ->  Append (actual rows=1 loops=1)',), ('                    ->  Seq Scan on ab_a2_b1 ab_a2_1 (actual rows=1 loops=1)',), ('                          Filter: (b = $0)',), ('                    ->  Seq Scan on ab_a2_b2 ab_a2_2 (never executed)',), ('                          Filter: (b = $0)',), ('                    ->  Seq Scan on ab_a2_b3 ab_a2_3 (never executed)',), ('                          Filter: (b = $0)',)]
+--------------------+
--Query--
select tableoid::regclass, * from ab
--Result--
[('ab_a1_b3', 1, 3), ('ab_a1_b3', 1, 3), ('ab_a1_b3', 1, 3), ('ab_a2_b1', 2, 1)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 > tprt.col1
--Result--
[('Nested Loop (actual rows=6 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=2 loops=1)',), ('  ->  Append (actual rows=3 loops=2)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (actual rows=2 loops=2)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (actual rows=2 loops=1)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 = tprt.col1
--Result--
[('Nested Loop (actual rows=2 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=2 loops=1)',), ('  ->  Append (actual rows=1 loops=2)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (actual rows=1 loops=2)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',)]
+--------------------+
--Query--
select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 > tprt.col1 order by tbl1.col1, tprt.col1
--Result--
[(501, 10), (501, 20), (505, 10), (505, 20), (505, 501), (505, 502)]
+--------------------+
--Query--
select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 = tprt.col1 order by tbl1.col1, tprt.col1
--Result--
[(501, 501), (505, 505)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from tbl1 inner join tprt on tbl1.col1 > tprt.col1
--Result--
[('Nested Loop (actual rows=23 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=5 loops=1)',), ('  ->  Append (actual rows=5 loops=5)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (actual rows=2 loops=5)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (actual rows=3 loops=4)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (actual rows=1 loops=2)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from tbl1 inner join tprt on tbl1.col1 = tprt.col1
--Result--
[('Nested Loop (actual rows=3 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=5 loops=1)',), ('  ->  Append (actual rows=1 loops=5)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (actual rows=1 loops=2)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (actual rows=0 loops=3)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',)]
+--------------------+
--Query--
select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 > tprt.col1 order by tbl1.col1, tprt.col1
--Result--
[(501, 10), (501, 20), (505, 10), (505, 20), (505, 501), (505, 502), (1001, 10), (1001, 20), (1001, 501), (1001, 502), (1001, 505), (1010, 10), (1010, 20), (1010, 501), (1010, 502), (1010, 505), (1010, 1001), (1011, 10), (1011, 20), (1011, 501), (1011, 502), (1011, 505), (1011, 1001)]
+--------------------+
--Query--
select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 = tprt.col1 order by tbl1.col1, tprt.col1
--Result--
[(501, 501), (505, 505), (1001, 1001)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 < tprt.col1
--Result--
[('Nested Loop (actual rows=1 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=1 loops=1)',), ('  ->  Append (actual rows=1 loops=1)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (actual rows=1 loops=1)',), ('              Index Cond: (col1 > tbl1.col1)',)]
+--------------------+
--Query--
select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 < tprt.col1 order by tbl1.col1, tprt.col1
--Result--
[(4400, 4500)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 = tprt.col1
--Result--
[('Nested Loop (actual rows=0 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=1 loops=1)',), ('  ->  Append (actual rows=0 loops=1)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',)]
+--------------------+
--Query--
select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 = tprt.col1 order by tbl1.col1, tprt.col1
--Result--
[]
+--------------------+
--Query--
prepare part_abc_q1 (int, int, int) as select * from part_abc where a = $1 and b = $2 and c = $3
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute part_abc_q1 (1, 2, 3)
--Result--
[('Seq Scan on part_abc_p1 part_abc (actual rows=0 loops=1)',), ('  Filter: ((a = $1) AND (b = $2) AND (c = $3))',)]
+--------------------+
--Query--
deallocate part_abc_q1
--Result--
[]
+--------------------+
--Query--
select * from listp where b = 1
--Result--
[]
+--------------------+
--Query--
prepare q1 (int,int) as select * from listp where b in ($1,$2)
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off)  execute q1 (1,1)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 1',), ('  ->  Seq Scan on listp_1_1 listp_1 (actual rows=0 loops=1)',), ('        Filter: (b = ANY (ARRAY[$1, $2]))',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off)  execute q1 (2,2)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 1',), ('  ->  Seq Scan on listp_2_1 listp_1 (actual rows=0 loops=1)',), ('        Filter: (b = ANY (ARRAY[$1, $2]))',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off)  execute q1 (0,0)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',)]
+--------------------+
--Query--
deallocate q1
--Result--
[]
+--------------------+
--Query--
prepare q1 (int,int,int,int) as select * from listp where b in($1,$2) and $3 <> b and $4 <> b
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off)  execute q1 (1,2,2,0)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 1',), ('  ->  Seq Scan on listp_1_1 listp_1 (actual rows=0 loops=1)',), ('        Filter: ((b = ANY (ARRAY[$1, $2])) AND ($3 <> b) AND ($4 <> b))',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off)  execute q1 (1,2,2,1)
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from listp where a = (select null::int)
--Result--
[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on listp_1_1 listp_1 (never executed)',), ('        Filter: (a = $0)',), ('  ->  Seq Scan on listp_2_1 listp_2 (never executed)',), ('        Filter: (a = $0)',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a < localtimestamp
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 1',), ('  ->  Seq Scan on stable_qual_pruning1 stable_qual_pruning_1 (actual rows=0 loops=1)',), ('        Filter: (a < LOCALTIMESTAMP)',), ('  ->  Seq Scan on stable_qual_pruning2 stable_qual_pruning_2 (actual rows=0 loops=1)',), ('        Filter: (a < LOCALTIMESTAMP)',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a < '2000-02-01'::timestamptz
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',), ('  ->  Seq Scan on stable_qual_pruning1 stable_qual_pruning_1 (actual rows=0 loops=1)',), ("        Filter: (a < '2000-02-01 00:00:00+01'::timestamp with time zone)",)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2010-02-01', '2020-01-01']::timestamp[])
--Result--
[('Result (actual rows=0 loops=1)',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2000-02-01', '2010-01-01']::timestamp[])
--Result--
[('Seq Scan on stable_qual_pruning2 stable_qual_pruning (actual rows=0 loops=1)',), ('  Filter: (a = ANY (\'{"2000-02-01 00:00:00","2010-01-01 00:00:00"}\'::timestamp without time zone[]))',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2000-02-01', localtimestamp]::timestamp[])
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',), ('  ->  Seq Scan on stable_qual_pruning2 stable_qual_pruning_1 (actual rows=0 loops=1)',), ("        Filter: (a = ANY (ARRAY['2000-02-01 00:00:00'::timestamp without time zone, LOCALTIMESTAMP]))",)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2010-02-01', '2020-01-01']::timestamptz[])
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 3',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2000-02-01', '2010-01-01']::timestamptz[])
--Result--
[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',), ('  ->  Seq Scan on stable_qual_pruning2 stable_qual_pruning_1 (actual rows=0 loops=1)',), ('        Filter: (a = ANY (\'{"2000-02-01 00:00:00+01","2010-01-01 00:00:00+01"}\'::timestamp with time zone[]))',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(null::timestamptz[])
--Result--
[('Append (actual rows=0 loops=1)',), ('  ->  Seq Scan on stable_qual_pruning1 stable_qual_pruning_1 (actual rows=0 loops=1)',), ('        Filter: (a = ANY (NULL::timestamp with time zone[]))',), ('  ->  Seq Scan on stable_qual_pruning2 stable_qual_pruning_2 (actual rows=0 loops=1)',), ('        Filter: (a = ANY (NULL::timestamp with time zone[]))',), ('  ->  Seq Scan on stable_qual_pruning3 stable_qual_pruning_3 (actual rows=0 loops=1)',), ('        Filter: (a = ANY (NULL::timestamp with time zone[]))',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from mc3p where a < 3 and abs(b) = 1
--Result--
[('Append (actual rows=3 loops=1)',), ('  ->  Seq Scan on mc3p0 mc3p_1 (actual rows=1 loops=1)',), ('        Filter: ((a < 3) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2 (actual rows=1 loops=1)',), ('        Filter: ((a < 3) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p2 mc3p_3 (actual rows=1 loops=1)',), ('        Filter: ((a < 3) AND (abs(b) = 1))',)]
+--------------------+
--Query--
prepare ps1 as   select * from mc3p where a = $1 and abs(b) < (select 3)
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute ps1(1)
--Result--
[('Append (actual rows=1 loops=1)',), ('  Subplans Removed: 2',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on mc3p1 mc3p_1 (actual rows=1 loops=1)',), ('        Filter: ((a = $1) AND (abs(b) < $0))',)]
+--------------------+
--Query--
deallocate ps1
--Result--
[]
+--------------------+
--Query--
prepare ps2 as   select * from mc3p where a <= $1 and abs(b) < (select 3)
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute ps2(1)
--Result--
[('Append (actual rows=2 loops=1)',), ('  Subplans Removed: 1',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on mc3p0 mc3p_1 (actual rows=1 loops=1)',), ('        Filter: ((a <= $1) AND (abs(b) < $0))',), ('  ->  Seq Scan on mc3p1 mc3p_2 (actual rows=1 loops=1)',), ('        Filter: ((a <= $1) AND (abs(b) < $0))',)]
+--------------------+
--Query--
deallocate ps2
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from boolp where a = (select value from boolvalues where value)
--Result--
[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Seq Scan on boolvalues (actual rows=1 loops=1)',), ('          Filter: value',), ('          Rows Removed by Filter: 1',), ('  ->  Seq Scan on boolp_f boolp_1 (never executed)',), ('        Filter: (a = $0)',), ('  ->  Seq Scan on boolp_t boolp_2 (actual rows=0 loops=1)',), ('        Filter: (a = $0)',)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from boolp where a = (select value from boolvalues where not value)
--Result--
[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Seq Scan on boolvalues (actual rows=1 loops=1)',), ('          Filter: (NOT value)',), ('          Rows Removed by Filter: 1',), ('  ->  Seq Scan on boolp_f boolp_1 (actual rows=0 loops=1)',), ('        Filter: (a = $0)',), ('  ->  Seq Scan on boolp_t boolp_2 (never executed)',), ('        Filter: (a = $0)',)]
+--------------------+
--Query--
analyze ma_test
--Result--
[]
+--------------------+
--Query--
prepare mt_q1 (int) as select a from ma_test where a >= $1 and a % 10 = 5 order by b
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute mt_q1(15)
--Result--
[('Merge Append (actual rows=2 loops=1)',), ('  Sort Key: ma_test.b',), ('  Subplans Removed: 1',), ('  ->  Index Scan using ma_test_p2_b_idx on ma_test_p2 ma_test_1 (actual rows=1 loops=1)',), ('        Filter: ((a >= $1) AND ((a % 10) = 5))',), ('        Rows Removed by Filter: 9',), ('  ->  Index Scan using ma_test_p3_b_idx on ma_test_p3 ma_test_2 (actual rows=1 loops=1)',), ('        Filter: ((a >= $1) AND ((a % 10) = 5))',), ('        Rows Removed by Filter: 9',)]
+--------------------+
--Query--
execute mt_q1(15)
--Result--
[(15,), (25,)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute mt_q1(25)
--Result--
[('Merge Append (actual rows=1 loops=1)',), ('  Sort Key: ma_test.b',), ('  Subplans Removed: 2',), ('  ->  Index Scan using ma_test_p3_b_idx on ma_test_p3 ma_test_1 (actual rows=1 loops=1)',), ('        Filter: ((a >= $1) AND ((a % 10) = 5))',), ('        Rows Removed by Filter: 9',)]
+--------------------+
--Query--
execute mt_q1(25)
--Result--
[(25,)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) execute mt_q1(35)
--Result--
[('Merge Append (actual rows=0 loops=1)',), ('  Sort Key: ma_test.b',), ('  Subplans Removed: 3',)]
+--------------------+
--Query--
execute mt_q1(35)
--Result--
[]
+--------------------+
--Query--
deallocate mt_q1
--Result--
[]
+--------------------+
--Query--
prepare mt_q2 (int) as select * from ma_test where a >= $1 order by b limit 1
--Result--
[]
+--------------------+
--Query--
explain (analyze, verbose, costs off, summary off, timing off) execute mt_q2 (35)
--Result--
[('Limit (actual rows=0 loops=1)',), ('  Output: ma_test.a, ma_test.b',), ('  ->  Merge Append (actual rows=0 loops=1)',), ('        Sort Key: ma_test.b',), ('        Subplans Removed: 3',)]
+--------------------+
--Query--
deallocate mt_q2
--Result--
[]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from ma_test where a >= (select min(b) from ma_test_p2) order by b
--Result--
[('Merge Append (actual rows=20 loops=1)',), ('  Sort Key: ma_test.b',), ('  InitPlan 2 (returns $1)',), ('    ->  Result (actual rows=1 loops=1)',), ('          InitPlan 1 (returns $0)',), ('            ->  Limit (actual rows=1 loops=1)',), ('                  ->  Index Scan using ma_test_p2_b_idx on ma_test_p2 (actual rows=1 loops=1)',), ('                        Index Cond: (b IS NOT NULL)',), ('  ->  Index Scan using ma_test_p1_b_idx on ma_test_p1 ma_test_1 (never executed)',), ('        Filter: (a >= $1)',), ('  ->  Index Scan using ma_test_p2_b_idx on ma_test_p2 ma_test_2 (actual rows=10 loops=1)',), ('        Filter: (a >= $1)',), ('  ->  Index Scan using ma_test_p3_b_idx on ma_test_p3 ma_test_3 (actual rows=10 loops=1)',), ('        Filter: (a >= $1)',)]
+--------------------+
--Query--
explain (costs off) select * from pp_arrpart where a = '{1}'
--Result--
[('Seq Scan on pp_arrpart1 pp_arrpart',), ("  Filter: (a = '{1}'::integer[])",)]
+--------------------+
--Query--
explain (costs off) select * from pp_arrpart where a = '{1, 2}'
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from pp_arrpart where a in ('{4, 5}', '{1}')
--Result--
[('Append',), ('  ->  Seq Scan on pp_arrpart1 pp_arrpart_1',), ("        Filter: ((a = '{4,5}'::integer[]) OR (a = '{1}'::integer[]))",), ('  ->  Seq Scan on pp_arrpart2 pp_arrpart_2',), ("        Filter: ((a = '{4,5}'::integer[]) OR (a = '{1}'::integer[]))",)]
+--------------------+
--Query--
explain (costs off) update pp_arrpart set a = a where a = '{1}'
--Result--
[('Update on pp_arrpart',), ('  Update on pp_arrpart1 pp_arrpart_1',), ('  ->  Seq Scan on pp_arrpart1 pp_arrpart_1',), ("        Filter: (a = '{1}'::integer[])",)]
+--------------------+
--Query--
explain (costs off) delete from pp_arrpart where a = '{1}'
--Result--
[('Delete on pp_arrpart',), ('  Delete on pp_arrpart1 pp_arrpart_1',), ('  ->  Seq Scan on pp_arrpart1 pp_arrpart_1',), ("        Filter: (a = '{1}'::integer[])",)]
+--------------------+
--Query--
select tableoid::regclass, * from pph_arrpart order by 1
--Result--
[('pph_arrpart1', [1, 2]), ('pph_arrpart1', [4, 5]), ('pph_arrpart2', [1])]
+--------------------+
--Query--
explain (costs off) select * from pph_arrpart where a = '{1}'
--Result--
[('Seq Scan on pph_arrpart2 pph_arrpart',), ("  Filter: (a = '{1}'::integer[])",)]
+--------------------+
--Query--
explain (costs off) select * from pph_arrpart where a = '{1, 2}'
--Result--
[('Seq Scan on pph_arrpart1 pph_arrpart',), ("  Filter: (a = '{1,2}'::integer[])",)]
+--------------------+
--Query--
explain (costs off) select * from pph_arrpart where a in ('{4, 5}', '{1}')
--Result--
[('Append',), ('  ->  Seq Scan on pph_arrpart1 pph_arrpart_1',), ("        Filter: ((a = '{4,5}'::integer[]) OR (a = '{1}'::integer[]))",), ('  ->  Seq Scan on pph_arrpart2 pph_arrpart_2',), ("        Filter: ((a = '{4,5}'::integer[]) OR (a = '{1}'::integer[]))",)]
+--------------------+
--Query--
explain (costs off) select * from pp_enumpart where a = 'blue'
--Result--
[('Seq Scan on pp_enumpart_blue pp_enumpart',), ("  Filter: (a = 'blue'::pp_colors)",)]
+--------------------+
--Query--
explain (costs off) select * from pp_enumpart where a = 'black'
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from pp_recpart where a = '(1,1)'::pp_rectype
--Result--
[('Seq Scan on pp_recpart_11 pp_recpart',), ("  Filter: (a = '(1,1)'::pp_rectype)",)]
+--------------------+
--Query--
explain (costs off) select * from pp_recpart where a = '(1,2)'::pp_rectype
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from pp_intrangepart where a = '[1,2]'::int4range
--Result--
[('Seq Scan on pp_intrangepart12 pp_intrangepart',), ("  Filter: (a = '[1,3)'::int4range)",)]
+--------------------+
--Query--
explain (costs off) select * from pp_intrangepart where a = '(1,2)'::int4range
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from pp_lp where a = 1
--Result--
[('Seq Scan on pp_lp1 pp_lp',), ('  Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) update pp_lp set value = 10 where a = 1
--Result--
[('Update on pp_lp',), ('  Update on pp_lp1 pp_lp_1',), ('  ->  Seq Scan on pp_lp1 pp_lp_1',), ('        Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) delete from pp_lp where a = 1
--Result--
[('Delete on pp_lp',), ('  Delete on pp_lp1 pp_lp_1',), ('  ->  Seq Scan on pp_lp1 pp_lp_1',), ('        Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) select * from pp_lp where a = 1
--Result--
[('Append',), ('  ->  Seq Scan on pp_lp1 pp_lp_1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on pp_lp2 pp_lp_2',), ('        Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) update pp_lp set value = 10 where a = 1
--Result--
[('Update on pp_lp',), ('  Update on pp_lp1 pp_lp_1',), ('  Update on pp_lp2 pp_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on pp_lp1 pp_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on pp_lp2 pp_lp_2',), ('              Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) delete from pp_lp where a = 1
--Result--
[('Delete on pp_lp',), ('  Delete on pp_lp1 pp_lp_1',), ('  Delete on pp_lp2 pp_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on pp_lp1 pp_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on pp_lp2 pp_lp_2',), ('              Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) select * from pp_lp where a = 1
--Result--
[('Append',), ('  ->  Seq Scan on pp_lp1 pp_lp_1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on pp_lp2 pp_lp_2',), ('        Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) update pp_lp set value = 10 where a = 1
--Result--
[('Update on pp_lp',), ('  Update on pp_lp1 pp_lp_1',), ('  Update on pp_lp2 pp_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on pp_lp1 pp_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on pp_lp2 pp_lp_2',), ('              Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) delete from pp_lp where a = 1
--Result--
[('Delete on pp_lp',), ('  Delete on pp_lp1 pp_lp_1',), ('  Delete on pp_lp2 pp_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on pp_lp1 pp_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on pp_lp2 pp_lp_2',), ('              Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) select * from inh_lp where a = 1
--Result--
[('Append',), ('  ->  Seq Scan on inh_lp inh_lp_1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on inh_lp1 inh_lp_2',), ('        Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) update inh_lp set value = 10 where a = 1
--Result--
[('Update on inh_lp',), ('  Update on inh_lp inh_lp_1',), ('  Update on inh_lp1 inh_lp_2',), ('  ->  Result',), ('        ->  Append',), ('              ->  Seq Scan on inh_lp inh_lp_1',), ('                    Filter: (a = 1)',), ('              ->  Seq Scan on inh_lp1 inh_lp_2',), ('                    Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) delete from inh_lp where a = 1
--Result--
[('Delete on inh_lp',), ('  Delete on inh_lp inh_lp_1',), ('  Delete on inh_lp1 inh_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on inh_lp inh_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on inh_lp1 inh_lp_2',), ('              Filter: (a = 1)',)]
+--------------------+
--Query--
explain (costs off) update inh_lp1 set value = 10 where a = 2
--Result--
[('Update on inh_lp1',), ('  ->  Seq Scan on inh_lp1',), ('        Filter: (a = 2)',)]
+--------------------+
--Query--
explain (costs off) select * from pp_temp_parent where true
--Result--
[('Append',), ('  ->  Seq Scan on pp_temp_part_1 pp_temp_parent_1',), ('  ->  Seq Scan on pp_temp_part_def pp_temp_parent_2',)]
+--------------------+
--Query--
explain (costs off) select * from pp_temp_parent where a = 2
--Result--
[('Seq Scan on pp_temp_part_def pp_temp_parent',), ('  Filter: (a = 2)',)]
+--------------------+
--Query--
explain (costs off) select * from (       select * from p       union all       select * from q1       union all       select 1, 1, 1      ) s(a, b, c) where s.a = 1 and s.b = 1 and s.c = (select 1)
--Result--
[('Append',), ('  InitPlan 1 (returns $0)',), ('    ->  Result',), ('  ->  Seq Scan on p1 p',), ('        Filter: ((a = 1) AND (b = 1) AND (c = $0))',), ('  ->  Seq Scan on q111 q1',), ('        Filter: ((a = 1) AND (b = 1) AND (c = $0))',), ('  ->  Result',), ('        One-Time Filter: (1 = $0)',)]
+--------------------+
--Query--
select * from (       select * from p       union all       select * from q1       union all       select 1, 1, 1      ) s(a, b, c) where s.a = 1 and s.b = 1 and s.c = (select 1)
--Result--
[(1, 1, 1)]
+--------------------+
--Query--
prepare q (int, int) as select * from (       select * from p       union all       select * from q1       union all       select 1, 1, 1      ) s(a, b, c) where s.a = $1 and s.b = $2 and s.c = (select 1)
--Result--
[]
+--------------------+
--Query--
explain (costs off) execute q (1, 1)
--Result--
[('Append',), ('  Subplans Removed: 1',), ('  InitPlan 1 (returns $0)',), ('    ->  Result',), ('  ->  Seq Scan on p1 p',), ('        Filter: ((a = $1) AND (b = $2) AND (c = $0))',), ('  ->  Seq Scan on q111 q1',), ('        Filter: ((a = $1) AND (b = $2) AND (c = $0))',), ('  ->  Result',), ('        One-Time Filter: ((1 = $1) AND (1 = $2) AND (1 = $0))',)]
+--------------------+
--Query--
execute q (1, 1)
--Result--
[(1, 1, 1)]
+--------------------+
--Query--
explain (analyze, costs off, summary off, timing off) select * from listp where a = (select 2) and b <> 10
--Result--
[('Seq Scan on listp1 listp (actual rows=0 loops=1)',), ('  Filter: ((b <> 10) AND (a = $0))',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (never executed)',)]
+--------------------+
--Query--
explain (costs off) select * from listp1 where a = 2
--Result--
[('Seq Scan on listp1',), ('  Filter: (a = 2)',)]
+--------------------+
--Query--
explain (costs off) update listp1 set a = 1 where a = 2
--Result--
[('Update on listp1',), ('  ->  Seq Scan on listp1',), ('        Filter: (a = 2)',)]
+--------------------+
--Query--
explain (costs off) select * from listp1 where a = 2
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) update listp1 set a = 1 where a = 2
--Result--
[('Update on listp1',), ('  ->  Result',), ('        One-Time Filter: false',)]
+--------------------+
--Query--
explain (analyze on, costs off, timing off, summary off) select * from rangep where b IN((select 1),(select 2)) order by a
--Result--
[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  InitPlan 2 (returns $1)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Merge Append (actual rows=0 loops=1)',), ('        Sort Key: rangep_2.a',), ('        ->  Index Scan using rangep_0_to_100_1_a_idx on rangep_0_to_100_1 rangep_2 (actual rows=0 loops=1)',), ('              Filter: (b = ANY (ARRAY[$0, $1]))',), ('        ->  Index Scan using rangep_0_to_100_2_a_idx on rangep_0_to_100_2 rangep_3 (actual rows=0 loops=1)',), ('              Filter: (b = ANY (ARRAY[$0, $1]))',), ('        ->  Index Scan using rangep_0_to_100_3_a_idx on rangep_0_to_100_3 rangep_4 (never executed)',), ('              Filter: (b = ANY (ARRAY[$0, $1]))',), ('  ->  Index Scan using rangep_100_to_200_a_idx on rangep_100_to_200 rangep_5 (actual rows=0 loops=1)',), ('        Filter: (b = ANY (ARRAY[$0, $1]))',)]
+--------------------+
--Query--
explain (costs off) select * from rp_prefix_test1 where a <= 1 and b = 'a'
--Result--
[('Seq Scan on rp_prefix_test1_p1 rp_prefix_test1',), ("  Filter: ((a <= 1) AND ((b)::text = 'a'::text))",)]
+--------------------+
--Query--
explain (costs off) select * from rp_prefix_test2 where a <= 1 and b = 1 and c >= 0
--Result--
[('Seq Scan on rp_prefix_test2_p1 rp_prefix_test2',), ('  Filter: ((a <= 1) AND (c >= 0) AND (b = 1))',)]
+--------------------+
--Query--
explain (costs off) select * from rp_prefix_test3 where a >= 1 and b >= 1 and b >= 2 and c >= 2 and d >= 0
--Result--
[('Seq Scan on rp_prefix_test3_p2 rp_prefix_test3',), ('  Filter: ((a >= 1) AND (b >= 1) AND (b >= 2) AND (c >= 2) AND (d >= 0))',)]
+--------------------+
--Query--
explain (costs off) select * from rp_prefix_test3 where a >= 1 and b >= 1 and b = 2 and c = 2 and d >= 0
--Result--
[('Seq Scan on rp_prefix_test3_p2 rp_prefix_test3',), ('  Filter: ((a >= 1) AND (b >= 1) AND (d >= 0) AND (b = 2) AND (c = 2))',)]
+--------------------+
--Query--
select   'explain (costs off) select tableoid::regclass,* from hp_prefix_test where ' ||   string_agg(c.colname || case when g.s & (1 << c.colpos) = 0 then ' is null' else ' = ' || (colpos+1)::text end, ' and ' order by c.colpos) from (values('a',0),('b',1),('c',2),('d',3)) c(colname, colpos), generate_Series(0,15) g(s) group by g.s order by g.s
--Result--
[('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c is null and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c is null and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c is null and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c is null and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c = 3 and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c = 3 and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c = 3 and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c = 3 and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c is null and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c is null and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c is null and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c is null and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c = 3 and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c = 3 and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c = 3 and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c = 3 and d = 4',)]
+--------------------+
--Query--
select   'select tableoid::regclass,* from hp_prefix_test where ' ||   string_agg(c.colname || case when g.s & (1 << c.colpos) = 0 then ' is null' else ' = ' || (colpos+1)::text end, ' and ' order by c.colpos) from (values('a',0),('b',1),('c',2),('d',3)) c(colname, colpos), generate_Series(0,15) g(s) group by g.s order by g.s
--Result--
[('select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c is null and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c is null and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c is null and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c is null and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c = 3 and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c = 3 and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c = 3 and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c = 3 and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c is null and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c is null and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c is null and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c is null and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c = 3 and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c = 3 and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c = 3 and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c = 3 and d = 4',)]
+--------------------+
