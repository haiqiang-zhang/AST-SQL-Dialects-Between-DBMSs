--Query--
ANALYZE real_city
--Result--
[]
+--------------------+
--Query--
SELECT * FROM viewtest
--Result--
[]
+--------------------+
--Query--
SELECT * FROM viewtest
--Result--
[]
+--------------------+
--Query--
SELECT relname FROM pg_class     WHERE relname LIKE 'v_'     AND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'temp_view_test')     ORDER BY relname
--Result--
[('v1',), ('v2',), ('v3',), ('v4',), ('v5',), ('v6',), ('v7',), ('v8',), ('v9',)]
+--------------------+
--Query--
SELECT relname FROM pg_class     WHERE relname LIKE 'v%'     AND relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname LIKE 'pg_temp%')     ORDER BY relname
--Result--
[('v10_temp',), ('v11_temp',), ('v12_temp',), ('v13_temp',), ('v1_temp',), ('v2_temp',), ('v4_temp',), ('v5_temp',), ('v6_temp',), ('v7_temp',), ('v8_temp',), ('v9_temp',)]
+--------------------+
--Query--
SELECT relname FROM pg_class     WHERE relname LIKE 'nontemp%'     AND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'testviewschm2')     ORDER BY relname
--Result--
[('nontemp1',), ('nontemp2',), ('nontemp3',), ('nontemp4',)]
+--------------------+
--Query--
SELECT relname FROM pg_class     WHERE relname LIKE 'temporal%'     AND relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname LIKE 'pg_temp%')     ORDER BY relname
--Result--
[('temporal1',), ('temporal2',), ('temporal3',), ('temporal4',)]
+--------------------+
--Query--
SELECT count(*) FROM pg_class where relname = 'pubview' AND relnamespace IN (SELECT OID FROM pg_namespace WHERE nspname = 'testviewschm2')
--Result--
[(1,)]
+--------------------+
--Query--
SELECT relname, relkind, reloptions FROM pg_class        WHERE oid in ('mysecview1'::regclass, 'mysecview2'::regclass,                      'mysecview3'::regclass, 'mysecview4'::regclass,                      'mysecview7'::regclass, 'mysecview8'::regclass,                      'mysecview9'::regclass)        ORDER BY relname
--Result--
[('mysecview1', 'v', None), ('mysecview2', 'v', ['security_barrier=true']), ('mysecview3', 'v', ['security_barrier=false']), ('mysecview4', 'v', ['security_barrier=true']), ('mysecview7', 'v', ['security_invoker=true']), ('mysecview8', 'v', ['security_invoker=false', 'security_barrier=true']), ('mysecview9', 'v', ['security_invoker=true'])]
+--------------------+
--Query--
SELECT relname, relkind, reloptions FROM pg_class        WHERE oid in ('mysecview1'::regclass, 'mysecview2'::regclass,                      'mysecview3'::regclass, 'mysecview4'::regclass,                      'mysecview7'::regclass, 'mysecview8'::regclass,                      'mysecview9'::regclass)        ORDER BY relname
--Result--
[('mysecview1', 'v', None), ('mysecview2', 'v', None), ('mysecview3', 'v', ['security_barrier=true']), ('mysecview4', 'v', ['security_barrier=false']), ('mysecview7', 'v', None), ('mysecview8', 'v', ['security_invoker=true']), ('mysecview9', 'v', ['security_invoker=false', 'security_barrier=true'])]
+--------------------+
--Query--
SELECT * FROM unspecified_types
--Result--
[(42, 42.5, 'foo', 'foo', None)]
+--------------------+
--Query--
SELECT * FROM tt1
--Result--
[('abc', '0123456789', 42.0, 'abcd'), ('0123456789', 'abc', 42.12, 'abc')]
+--------------------+
--Query--
SELECT a::varchar(3) FROM tt1
--Result--
[('abc',), ('012',)]
+--------------------+
--Query--
select pg_get_viewdef('view_of_joins_2a', true)
--Result--
[(' SELECT tbl1.a,\n    tbl1.b,\n    tbl1a.c\n   FROM tbl1\n     JOIN tbl1a USING (a);',)]
+--------------------+
--Query--
select * from tt14v
--Result--
[('foo', 'baz', '42')]
+--------------------+
--Query--
select * from tt14v
--Result--
[('foo', '42')]
+--------------------+
--Query--
explain (verbose, costs off) select * from tt14v
--Result--
[('Function Scan on testviewschm2.tt14f t',), ('  Output: t.f1, t.f4',), ('  Function Call: tt14f()',)]
+--------------------+
--Query--
select * from tt14v
--Result--
[('foo', '42')]
+--------------------+
--Query--
select 'foo'::text = any(array['abc','def','foo']::text[])
--Result--
[(True,)]
+--------------------+
--Query--
select 'foo'::text = any((select array['abc','def','foo']::text[])::text[])
--Result--
[(True,)]
+--------------------+
--Query--
explain (verbose, costs off) select * from tt24v
--Result--
[('Hash Join',), ('  Output: (cte.r).column2, ((ROW("*VALUES*".column1, "*VALUES*".column2))).column2',), ('  Hash Cond: ((cte.r).column1 = ((ROW("*VALUES*".column1, "*VALUES*".column2))).column1)',), ('  CTE cte',), ('    ->  Values Scan on "*VALUES*_1"',), ('          Output: ROW("*VALUES*_1".column1, "*VALUES*_1".column2)',), ('  ->  CTE Scan on cte',), ('        Output: cte.r',), ('  ->  Hash',), ('        Output: (ROW("*VALUES*".column1, "*VALUES*".column2))',), ('        ->  Limit',), ('              Output: (ROW("*VALUES*".column1, "*VALUES*".column2))',), ('              ->  Values Scan on "*VALUES*"',), ('                    Output: ROW("*VALUES*".column1, "*VALUES*".column2)',)]
+--------------------+
--Query--
explain (verbose, costs off) select (r).column2 from (select r from (values(1,2),(3,4)) r limit 1) ss
--Result--
[('Subquery Scan on ss',), ('  Output: (ss.r).column2',), ('  ->  Limit',), ('        Output: (ROW("*VALUES*".column1, "*VALUES*".column2))',), ('        ->  Values Scan on "*VALUES*"',), ('              Output: ROW("*VALUES*".column1, "*VALUES*".column2)',)]
+--------------------+
