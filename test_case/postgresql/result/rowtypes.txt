--Query--
select (1.1,2.2)::complex, row((3.3,4.4),(5.5,null))::quad
--Result--
[('(1.1,2.2)', '("(3.3,4.4)","(5.5,)")')]
+--------------------+
--Query--
select row('Joe', 'Blow')::fullname, '(Joe,Blow)'::fullname
--Result--
[('(Joe,Blow)', '(Joe,Blow)')]
+--------------------+
--Query--
select '(Joe,von Blow)'::fullname, '(Joe,d''Blow)'::fullname
--Result--
[('(Joe,"von Blow")', "(Joe,d'Blow)")]
+--------------------+
--Query--
select '(Joe,"von""Blow")'::fullname, E'(Joe,d\\\\Blow)'::fullname
--Result--
[('(Joe,"von""Blow")', '(Joe,"d\\\\Blow")')]
+--------------------+
--Query--
select '(Joe,"Blow,Jr")'::fullname
--Result--
[('(Joe,"Blow,Jr")',)]
+--------------------+
--Query--
select '(Joe,)'::fullname
--Result--
[('(Joe,)',)]
+--------------------+
--Query--
select ' (Joe,Blow)  '::fullname
--Result--
[('(Joe,Blow)',)]
+--------------------+
--Query--
SELECT pg_input_is_valid('(1,2)', 'complex')
--Result--
[(True,)]
+--------------------+
--Query--
SELECT * FROM pg_input_error_info('(1,zed)', 'complex')
--Result--
[('invalid input syntax for type double precision: "zed"', None, None, '22P02')]
+--------------------+
--Query--
select * from quadtable
--Result--
[(1, '("(3.3,4.4)","(5.5,6.6)")'), (2, '("(,4.4)","(5.5,6.6)")')]
+--------------------+
--Query--
select f1, (q).c1, (qq.q).c1.i from quadtable qq
--Result--
[(1, '(3.3,4.4)', 4.4), (2, '(,4.4)', 4.4)]
+--------------------+
--Query--
select * from people
--Result--
[('(Joe,Blow)', datetime.date(1984, 1, 10))]
+--------------------+
--Query--
select * from people
--Result--
[('(Joe,Blow,)', datetime.date(1984, 1, 10))]
+--------------------+
--Query--
select * from people
--Result--
[('(Joe,Blow,Jr)', datetime.date(1984, 1, 10))]
+--------------------+
--Query--
select * from quadtable
--Result--
[(1, '("(3.3,4.4)","(5.5,6.6)")'), (44, '("(55,)","(,66)")'), (2, '("(12,4.4)","(5.5,6.6)")')]
+--------------------+
--Query--
select (fn).first, substr((fn).last, 1, 20), length((fn).last) from people
--Result--
[('Joe', 'Blow', 4), ('Jim', 'abcdefghijklabcdefgh', 1200000)]
+--------------------+
--Query--
select ROW(1,2) < ROW(1,3) as true
--Result--
[(True,)]
+--------------------+
--Query--
select ROW(1,2) < ROW(1,1) as false
--Result--
[(False,)]
+--------------------+
--Query--
select ROW(1,2) < ROW(1,NULL) as null
--Result--
[(None,)]
+--------------------+
--Query--
select ROW(1,2,3) < ROW(1,3,NULL) as true
--Result--
[(True,)]
+--------------------+
--Query--
select ROW(11,'ABC') < ROW(11,'DEF') as true
--Result--
[(True,)]
+--------------------+
--Query--
select ROW(11,'ABC') > ROW(11,'DEF') as false
--Result--
[(False,)]
+--------------------+
--Query--
select ROW(12,'ABC') > ROW(11,'DEF') as true
--Result--
[(True,)]
+--------------------+
--Query--
select ROW(1,2,3) < ROW(1,NULL,4) as null
--Result--
[(None,)]
+--------------------+
--Query--
select ROW(1,2,3) = ROW(1,NULL,4) as false
--Result--
[(False,)]
+--------------------+
--Query--
select ROW(1,2,3) <> ROW(1,NULL,4) as true
--Result--
[(True,)]
+--------------------+
--Query--
select ROW('ABC','DEF') ~<=~ ROW('DEF','ABC') as true
--Result--
[(True,)]
+--------------------+
--Query--
select ROW('ABC','DEF') ~>=~ ROW('DEF','ABC') as false
--Result--
[(False,)]
+--------------------+
--Query--
select ROW(1,2) = ROW(1,2::int8)
--Result--
[(True,)]
+--------------------+
--Query--
select ROW(1,2) in (ROW(3,4), ROW(1,2))
--Result--
[(True,)]
+--------------------+
--Query--
explain (costs off) select a,b from test_table where (a,b) > ('a','a') order by a,b
--Result--
[('Index Only Scan using test_table_a_b_idx on test_table',), ("  Index Cond: (ROW(a, b) > ROW('a'::text, 'a'::text))",)]
+--------------------+
--Query--
select a,b from test_table where (a,b) > ('a','a') order by a,b
--Result--
[('a', 'b'), ('b', 'a')]
+--------------------+
--Query--
select (row(1, 2.0)).f1
--Result--
[(1,)]
+--------------------+
--Query--
select (row(1, 2.0)).f2
--Result--
[(2.0,)]
+--------------------+
--Query--
select (row(1, 2.0)).*
--Result--
[(1, 2.0)]
+--------------------+
--Query--
select (r).f1 from (select row(1, 2.0) as r) ss
--Result--
[(1,)]
+--------------------+
--Query--
select (r).* from (select row(1, 2.0) as r) ss
--Result--
[(1, 2.0)]
+--------------------+
--Query--
select array[ row(1,2), row(3,4), row(5,6) ]
--Result--
[('{"(1,2)","(3,4)","(5,6)"}',)]
+--------------------+
--Query--
select row(1,1.1) = any (array[ row(7,7.7), row(1,1.1), row(0,0.0) ])
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 2)::testtype1 < row(1, 3)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 2)::testtype1 <= row(1, 3)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 2)::testtype1 = row(1, 2)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 2)::testtype1 <> row(1, 3)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 3)::testtype1 >= row(1, 2)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 3)::testtype1 > row(1, 2)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 < row(1, -3)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 <= row(1, -3)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 = row(1, -3)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 <> row(1, -2)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -3)::testtype1 >= row(1, -2)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -3)::testtype1 > row(1, -2)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 < row(1, 3)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 2)::testtype1 *< row(1, 3)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 2)::testtype1 *<= row(1, 3)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 2)::testtype1 *= row(1, 2)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 2)::testtype1 *<> row(1, 3)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 3)::testtype1 *>= row(1, 2)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 3)::testtype1 *> row(1, 2)::testtype1
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 *< row(1, -3)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 *<= row(1, -3)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 *= row(1, -3)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 *<> row(1, -2)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -3)::testtype1 *>= row(1, -2)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -3)::testtype1 *> row(1, -2)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, -2)::testtype1 *< row(1, 3)::testtype1
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, true)::testtype2 *< row(2, true)::testtype2
--Result--
[(True,)]
+--------------------+
--Query--
select row(-2, true)::testtype2 *< row(-1, true)::testtype2
--Result--
[(True,)]
+--------------------+
--Query--
select row(0, false)::testtype2 *< row(0, true)::testtype2
--Result--
[(True,)]
+--------------------+
--Query--
select row(0, false)::testtype2 *<> row(0, true)::testtype2
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 'abc')::testtype3 *< row(1, 'abd')::testtype3
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 'abc')::testtype3 *< row(1, 'abcd')::testtype3
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, 'abc')::testtype3 *> row(1, 'abd')::testtype3
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, 'abc')::testtype3 *<> row(1, 'abd')::testtype3
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, '(1,2)')::testtype4 *< row(1, '(1,3)')::testtype4
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, '(1,2)')::testtype4 *<> row(1, '(1,3)')::testtype4
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, '(1,2)')::testtype6 *< row(1, '(1,3)')::testtype6
--Result--
[(True,)]
+--------------------+
--Query--
select row(1, '(1,2)')::testtype6 *>= row(1, '(1,3)')::testtype6
--Result--
[(False,)]
+--------------------+
--Query--
select row(1, '(1,2)')::testtype6 *<> row(1, '(1,3)')::testtype6
--Result--
[(True,)]
+--------------------+
--Query--
select q.a, q.b = row(2), q.c = array[row(3)], q.d = row(row(4)) from     unnest(array[row(1, row(2), array[row(3)], row(row(4))),                  row(2, row(3), array[row(4)], row(row(5)))])       as q(a int, b record, c record[], d record)
--Result--
[(1, True, True, True), (2, False, False, False)]
+--------------------+
--Query--
select * from price
--Result--
[(1, False, 42.0), (10, True, 123.0), (11, True, 99.99)]
+--------------------+
--Query--
select * from compos
--Result--
[]
+--------------------+
--Query--
select cast (fullname as text) from fullname
--Result--
[]
+--------------------+
--Query--
select fullname::text from fullname
--Result--
[]
+--------------------+
--Query--
select cast (row('Jim', 'Beam') as text)
--Result--
[('(Jim,Beam)',)]
+--------------------+
--Query--
select (row('Jim', 'Beam'))::text
--Result--
[('(Jim,Beam)',)]
+--------------------+
--Query--
select f.last from fullname f
--Result--
[('Blow',)]
+--------------------+
--Query--
select last(f) from fullname f
--Result--
[('Blow',)]
+--------------------+
--Query--
select f.longname from fullname f
--Result--
[('Joe Blow',)]
+--------------------+
--Query--
select longname(f) from fullname f
--Result--
[('Joe Blow',)]
+--------------------+
--Query--
select f.longname from fullname f
--Result--
[(None,)]
+--------------------+
--Query--
explain (verbose, costs off) select r, r is null as isnull, r is not null as isnotnull from (values (1,row(1,2)), (1,row(null,null)), (1,null),              (null,row(1,2)), (null,row(null,null)), (null,null) ) r(a,b)
--Result--
[('Values Scan on "*VALUES*"',), ('  Output: ROW("*VALUES*".column1, "*VALUES*".column2), (("*VALUES*".column1 IS NULL) AND ("*VALUES*".column2 IS NOT DISTINCT FROM NULL)), (("*VALUES*".column1 IS NOT NULL) AND ("*VALUES*".column2 IS DISTINCT FROM NULL))',)]
+--------------------+
--Query--
select r, r is null as isnull, r is not null as isnotnull from (values (1,row(1,2)), (1,row(null,null)), (1,null),              (null,row(1,2)), (null,row(null,null)), (null,null) ) r(a,b)
--Result--
[('(1,"(1,2)")', False, True), ('(1,"(,)")', False, True), ('(1,)', False, False), ('(,"(1,2)")', False, False), ('(,"(,)")', False, False), ('(,)', True, False)]
+--------------------+
--Query--
explain (verbose, costs off) with r(a,b) as materialized   (values (1,row(1,2)), (1,row(null,null)), (1,null),           (null,row(1,2)), (null,row(null,null)), (null,null) ) select r, r is null as isnull, r is not null as isnotnull from r
--Result--
[('CTE Scan on r',), ('  Output: r.*, (r.* IS NULL), (r.* IS NOT NULL)',), ('  CTE r',), ('    ->  Values Scan on "*VALUES*"',), ('          Output: "*VALUES*".column1, "*VALUES*".column2',)]
+--------------------+
--Query--
with r(a,b) as materialized   (values (1,row(1,2)), (1,row(null,null)), (1,null),           (null,row(1,2)), (null,row(null,null)), (null,null) ) select r, r is null as isnull, r is not null as isnotnull from r
--Result--
[('(1,"(1,2)")', False, True), ('(1,"(,)")', False, True), ('(1,)', False, False), ('(,"(1,2)")', False, False), ('(,"(,)")', False, False), ('(,)', True, False)]
+--------------------+
--Query--
explain (verbose, costs off) with cte(c) as materialized (select row(1, 2)),      cte2(c) as (select * from cte) select * from cte2 as t where (select * from (select c as c1) s        where (select (c1).f1 > 0)) is not null
--Result--
[('CTE Scan on cte',), ('  Output: cte.c',), ('  Filter: ((SubPlan 3) IS NOT NULL)',), ('  CTE cte',), ('    ->  Result',), ("          Output: '(1,2)'::record",), ('  SubPlan 3',), ('    ->  Result',), ('          Output: cte.c',), ('          One-Time Filter: $2',), ('          InitPlan 2 (returns $2)',), ('            ->  Result',), ('                  Output: ((cte.c).f1 > 0)',)]
+--------------------+
--Query--
with cte(c) as materialized (select row(1, 2)),      cte2(c) as (select * from cte) select * from cte2 as t where (select * from (select c as c1) s        where (select (c1).f1 > 0)) is not null
--Result--
[('(1,2)',)]
+--------------------+
--Query--
select pg_get_viewdef('composite_v', true)
--Result--
[(' WITH cte(c) AS MATERIALIZED (\n         SELECT ROW(1, 2) AS "row"\n        ), cte2(c) AS (\n         SELECT cte.c\n           FROM cte\n        )\n SELECT 1 AS one\n   FROM cte2 t\n  WHERE (( SELECT s.c1\n           FROM ( SELECT t.c AS c1) s\n          WHERE ( SELECT (s.c1).f1 > 0))) IS NOT NULL;',)]
+--------------------+
--Query--
SELECT (d).a, (d).b FROM (SELECT compositetable AS d FROM compositetable) s
--Result--
[('fa', 'fb')]
+--------------------+
--Query--
SELECT (NULL::compositetable).a
--Result--
[(None,)]
+--------------------+
