--Query--
SELECT JSON(NULL)
--Result--
[(None,)]
+--------------------+
--Query--
SELECT JSON('{ "a" : 1 } ')
--Result--
[({'a': 1},)]
+--------------------+
--Query--
SELECT pg_typeof(JSON('{ "a" : 1 } '))
--Result--
[('json',)]
+--------------------+
--Query--
SELECT JSON('   1   '::json)
--Result--
[(1,)]
+--------------------+
--Query--
SELECT JSON('   1   '::jsonb)
--Result--
[(1,)]
+--------------------+
--Query--
SELECT JSON('{"a": 1, "a": 2}')
--Result--
[({'a': 2},)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123')
--Result--
[('Result',), ("  Output: '123'::json",)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123')
--Result--
[('Result',), ("  Output: '123'::json",)]
+--------------------+
--Query--
SELECT pg_typeof(JSON('123'))
--Result--
[('json',)]
+--------------------+
--Query--
SELECT JSON_OBJECT()
--Result--
[({},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(RETURNING json)
--Result--
[({},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(RETURNING json FORMAT JSON)
--Result--
[({},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(RETURNING jsonb)
--Result--
[({},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(RETURNING jsonb FORMAT JSON)
--Result--
[({},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(RETURNING text)
--Result--
[('{}',)]
+--------------------+
--Query--
SELECT JSON_OBJECT(RETURNING text FORMAT JSON)
--Result--
[('{}',)]
+--------------------+
--Query--
SELECT JSON_OBJECT(RETURNING bytea)
--Result--
[(<memory at 0x13b577ac0>,)]
+--------------------+
--Query--
SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON)
--Result--
[(<memory at 0x13b5777c0>,)]
+--------------------+
--Query--
SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF8)
--Result--
[(<memory at 0x13b577b80>,)]
+--------------------+
--Query--
SELECT JSON_OBJECT('foo': NULL::json FORMAT JSON)
--Result--
[({'foo': None},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('foo': NULL::jsonb FORMAT JSON)
--Result--
[({'foo': None},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': 2 + 3)
--Result--
[({'a': 5},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a' VALUE 2 + 3)
--Result--
[({'a': 5},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a' || 2: 1)
--Result--
[({'a2': 1},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(('a' || 2) VALUE 1)
--Result--
[({'a2': 1},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': 2::text)
--Result--
[({'a': '2'},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a' VALUE 2::text)
--Result--
[({'a': '2'},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(1::text: 2)
--Result--
[({'1': 2},)]
+--------------------+
--Query--
SELECT JSON_OBJECT((1::text) VALUE 2)
--Result--
[({'1': 2},)]
+--------------------+
--Query--
SELECT JSON_OBJECT( 	'a': '123', 	1.23: 123, 	'c': json '[ 1,true,{ } ]', 	'd': jsonb '{ "x" : 123.45 }' )
--Result--
[({'a': '123', 'c': [1, True, {}], 'd': {'x': 123.45}, '1.23': 123},)]
+--------------------+
--Query--
SELECT JSON_OBJECT( 	'a': '123', 	1.23: 123, 	'c': json '[ 1,true,{ } ]', 	'd': jsonb '{ "x" : 123.45 }' 	RETURNING jsonb )
--Result--
[({'a': '123', 'c': [1, True, {}], 'd': {'x': 123.45}, '1.23': 123},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa' RETURNING jsonb))
--Result--
[({'a': '123', 'b': {'a': 111, 'b': 'aaa'}},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text))
--Result--
[({'a': '{"b" : 1}'},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text) FORMAT JSON)
--Result--
[({'a': {'b': 1}},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea))
--Result--
[({'a': '\\x7b226222203a20317d'},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea) FORMAT JSON)
--Result--
[({'a': {'b': 1}},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2)
--Result--
[({'a': '1', 'b': None, 'c': 2},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 NULL ON NULL)
--Result--
[({'a': '1', 'b': None, 'c': 2},)]
+--------------------+
--Query--
SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 ABSENT ON NULL)
--Result--
[({'a': '1', 'c': 2},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE)
--Result--
[({'1': 1},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE RETURNING jsonb)
--Result--
[({'1': 1},)]
+--------------------+
--Query--
SELECT JSON_OBJECT(1: 1, '2': NULL, '3': 1, 4: NULL, '5': 'a' ABSENT ON NULL WITH UNIQUE RETURNING jsonb)
--Result--
[({'1': 1, '3': 1, '5': 'a'},)]
+--------------------+
--Query--
SELECT JSON_ARRAY()
--Result--
[([],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(RETURNING json)
--Result--
[([],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(RETURNING json FORMAT JSON)
--Result--
[([],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(RETURNING jsonb)
--Result--
[([],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(RETURNING jsonb FORMAT JSON)
--Result--
[([],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(RETURNING text)
--Result--
[('[]',)]
+--------------------+
--Query--
SELECT JSON_ARRAY(RETURNING text FORMAT JSON)
--Result--
[('[]',)]
+--------------------+
--Query--
SELECT JSON_ARRAY(RETURNING bytea)
--Result--
[(<memory at 0x104cedb40>,)]
+--------------------+
--Query--
SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON)
--Result--
[(<memory at 0x13b577940>,)]
+--------------------+
--Query--
SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF8)
--Result--
[(<memory at 0x13b577580>,)]
+--------------------+
--Query--
SELECT JSON_ARRAY('aaa', 111, true, array[1,2,3], NULL, json '{"a": [1]}', jsonb '["a",3]')
--Result--
[(['aaa', 111, True, [1, 2, 3], {'a': [1]}, ['a', 3]],)]
+--------------------+
--Query--
SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL)
--Result--
[(['a', None, 'b'],)]
+--------------------+
--Query--
SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL)
--Result--
[(['a', 'b'],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL)
--Result--
[(['b'],)]
+--------------------+
--Query--
SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL RETURNING jsonb)
--Result--
[(['a', None, 'b'],)]
+--------------------+
--Query--
SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL RETURNING jsonb)
--Result--
[(['a', 'b'],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL RETURNING jsonb)
--Result--
[(['b'],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' RETURNING text))
--Result--
[(['["{ \\"a\\" : 123 }"]'],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text))
--Result--
[(['[{ "a" : 123 }]'],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text) FORMAT JSON)
--Result--
[([[{'a': 123}]],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i))
--Result--
[([1, 2, 4],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i))
--Result--
[([[1, 2], [3, 4]],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i) RETURNING jsonb)
--Result--
[([[1, 2], [3, 4]],)]
+--------------------+
--Query--
SELECT JSON_ARRAY(SELECT i FROM (VALUES (3), (1), (NULL), (2)) foo(i) ORDER BY i)
--Result--
[([1, 2, 3],)]
+--------------------+
--Query--
SELECT	JSON_ARRAYAGG(i) IS NULL, 		JSON_ARRAYAGG(i RETURNING jsonb) IS NULL FROM generate_series(1, 0) i
--Result--
[(True, True)]
+--------------------+
--Query--
SELECT	JSON_ARRAYAGG(i), 		JSON_ARRAYAGG(i RETURNING jsonb) FROM generate_series(1, 5) i
--Result--
[([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])]
+--------------------+
--Query--
SELECT JSON_ARRAYAGG(i ORDER BY i DESC) FROM generate_series(1, 5) i
--Result--
[([5, 4, 3, 2, 1],)]
+--------------------+
--Query--
SELECT JSON_ARRAYAGG(i::text::json) FROM generate_series(1, 5) i
--Result--
[([1, 2, 3, 4, 5],)]
+--------------------+
--Query--
SELECT JSON_ARRAYAGG(JSON_ARRAY(i, i + 1 RETURNING text) FORMAT JSON) FROM generate_series(1, 5) i
--Result--
[([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]],)]
+--------------------+
--Query--
SELECT	JSON_ARRAYAGG(NULL), 		JSON_ARRAYAGG(NULL RETURNING jsonb) FROM generate_series(1, 5)
--Result--
[([], [])]
+--------------------+
--Query--
SELECT	JSON_ARRAYAGG(NULL NULL ON NULL), 		JSON_ARRAYAGG(NULL NULL ON NULL RETURNING jsonb) FROM generate_series(1, 5)
--Result--
[([None, None, None, None, None], [None, None, None, None, None])]
+--------------------+
--Query--
SELECT 	JSON_ARRAYAGG(bar) as no_options, 	JSON_ARRAYAGG(bar RETURNING jsonb) as returning_jsonb, 	JSON_ARRAYAGG(bar ABSENT ON NULL) as absent_on_null, 	JSON_ARRAYAGG(bar ABSENT ON NULL RETURNING jsonb) as absentonnull_returning_jsonb, 	JSON_ARRAYAGG(bar NULL ON NULL) as null_on_null, 	JSON_ARRAYAGG(bar NULL ON NULL RETURNING jsonb) as nullonnull_returning_jsonb, 	JSON_ARRAYAGG(foo) as row_no_options, 	JSON_ARRAYAGG(foo RETURNING jsonb) as row_returning_jsonb, 	JSON_ARRAYAGG(foo ORDER BY bar) FILTER (WHERE bar > 2) as row_filtered_agg, 	JSON_ARRAYAGG(foo ORDER BY bar RETURNING jsonb) FILTER (WHERE bar > 2) as row_filtered_agg_returning_jsonb FROM 	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL)) foo(bar)
--Result--
[([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, None, None, None, None], [1, 2, 3, 4, 5, None, None, None, None], [{'bar': 1}, {'bar': 2}, {'bar': 3}, {'bar': 4}, {'bar': 5}, {'bar': None}, {'bar': None}, {'bar': None}, {'bar': None}], [{'bar': 1}, {'bar': 2}, {'bar': 3}, {'bar': 4}, {'bar': 5}, {'bar': None}, {'bar': None}, {'bar': None}, {'bar': None}], [{'bar': 3}, {'bar': 4}, {'bar': 5}], [{'bar': 3}, {'bar': 4}, {'bar': 5}])]
+--------------------+
--Query--
SELECT 	bar, JSON_ARRAYAGG(bar) FILTER (WHERE bar > 2) OVER (PARTITION BY foo.bar % 2) FROM 	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL), (5), (4)) foo(bar)
--Result--
[(4, [4, 4]), (4, [4, 4]), (2, [4, 4]), (5, [5, 3, 5]), (3, [5, 3, 5]), (1, [5, 3, 5]), (5, [5, 3, 5]), (None, None), (None, None), (None, None), (None, None)]
+--------------------+
--Query--
SELECT	JSON_OBJECTAGG('key': 1) IS NULL, 		JSON_OBJECTAGG('key': 1 RETURNING jsonb) IS NULL WHERE FALSE
--Result--
[(True, True)]
+--------------------+
--Query--
SELECT 	JSON_OBJECTAGG(i: i), 	JSON_OBJECTAGG(i: i RETURNING jsonb) FROM 	generate_series(1, 5) i
--Result--
[({'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}, {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5})]
+--------------------+
--Query--
SELECT 	JSON_OBJECTAGG(k: v), 	JSON_OBJECTAGG(k: v NULL ON NULL), 	JSON_OBJECTAGG(k: v ABSENT ON NULL), 	JSON_OBJECTAGG(k: v RETURNING jsonb), 	JSON_OBJECTAGG(k: v NULL ON NULL RETURNING jsonb), 	JSON_OBJECTAGG(k: v ABSENT ON NULL RETURNING jsonb) FROM 	(VALUES (1, 1), (1, NULL), (2, NULL), (3, 3)) foo(k, v)
--Result--
[({'1': None, '2': None, '3': 3}, {'1': None, '2': None, '3': 3}, {'1': 1, '3': 3}, {'1': None, '2': None, '3': 3}, {'1': None, '2': None, '3': 3}, {'1': 1, '3': 3})]
+--------------------+
--Query--
SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS) FROM (VALUES (1, 1), (0, NULL), (3, NULL), (2, 2), (4, NULL)) foo(k, v)
--Result--
[({'1': 1, '2': 2},)]
+--------------------+
--Query--
SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS RETURNING jsonb) FROM (VALUES (1, 1), (0, NULL),(4, null), (5, null),(6, null),(2, 2)) foo(k, v)
--Result--
[({'1': 1, '2': 2},)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_OBJECT('foo' : '1' FORMAT JSON, 'bar' : 'baz' RETURNING json)
--Result--
[('Result',), ("  Output: JSON_OBJECT('foo' : '1'::json, 'bar' : 'baz'::text RETURNING json)",)]
+--------------------+
--Query--
SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v WITH UNIQUE KEYS) OVER (ORDER BY k) FROM (VALUES (1,1), (2,2)) a(k,v)
--Result--
[({'k': 1, 'v': 1}, {'1': 1}), ({'k': 2, 'v': 2}, {'1': 1, '2': 2})]
+--------------------+
--Query--
SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v ABSENT ON NULL) OVER (ORDER BY k) FROM (VALUES (1,1), (1,null), (2,2)) a(k,v)
--Result--
[({'k': 1, 'v': 1}, {'1': 1}), ({'k': 1, 'v': None}, {'1': 1}), ({'k': 2, 'v': 2}, {'1': 1, '2': 2})]
+--------------------+
--Query--
SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v ABSENT ON NULL) OVER (ORDER BY k RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) FROM (VALUES (1,1), (1,null), (2,2)) a(k,v)
--Result--
[({'k': 1, 'v': 1}, {'1': 1, '2': 2}), ({'k': 1, 'v': None}, {'1': 1, '2': 2}), ({'k': 2, 'v': 2}, {'1': 1, '2': 2})]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_ARRAY('1' FORMAT JSON, 2 RETURNING json)
--Result--
[('Result',), ("  Output: JSON_ARRAY('1'::json, 2 RETURNING json)",)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_OBJECTAGG(i: ('111' || i)::bytea FORMAT JSON WITH UNIQUE RETURNING text) FILTER (WHERE i > 3) FROM generate_series(1,5) i
--Result--
[('Aggregate',), ("  Output: JSON_OBJECTAGG(i : (('111'::text || (i)::text))::bytea FORMAT JSON WITH UNIQUE KEYS RETURNING text) FILTER (WHERE (i > 3))",), ('  ->  Function Scan on pg_catalog.generate_series i',), ('        Output: i',), ('        Function Call: generate_series(1, 5)',)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_OBJECTAGG(i: ('111' || i)::bytea FORMAT JSON WITH UNIQUE RETURNING text) OVER (PARTITION BY i % 2) FROM generate_series(1,5) i
--Result--
[('WindowAgg',), ("  Output: JSON_OBJECTAGG(i : (('111'::text || (i)::text))::bytea FORMAT JSON WITH UNIQUE KEYS RETURNING text) OVER (?), ((i % 2))",), ('  ->  Sort',), ('        Output: ((i % 2)), i',), ('        Sort Key: ((i.i % 2))',), ('        ->  Function Scan on pg_catalog.generate_series i',), ('              Output: (i % 2), i',), ('              Function Call: generate_series(1, 5)',)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_ARRAYAGG(('111' || i)::bytea FORMAT JSON NULL ON NULL RETURNING text) FILTER (WHERE i > 3) FROM generate_series(1,5) i
--Result--
[('Aggregate',), ("  Output: JSON_ARRAYAGG((('111'::text || (i)::text))::bytea FORMAT JSON NULL ON NULL RETURNING text) FILTER (WHERE (i > 3))",), ('  ->  Function Scan on pg_catalog.generate_series i',), ('        Output: i',), ('        Function Call: generate_series(1, 5)',)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_ARRAYAGG(('111' || i)::bytea FORMAT JSON NULL ON NULL RETURNING text) OVER (PARTITION BY i % 2) FROM generate_series(1,5) i
--Result--
[('WindowAgg',), ("  Output: JSON_ARRAYAGG((('111'::text || (i)::text))::bytea FORMAT JSON NULL ON NULL RETURNING text) OVER (?), ((i % 2))",), ('  ->  Sort',), ('        Output: ((i % 2)), i',), ('        Sort Key: ((i.i % 2))',), ('        ->  Function Scan on pg_catalog.generate_series i',), ('              Output: (i % 2), i',), ('              Function Call: generate_series(1, 5)',)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i) RETURNING jsonb)
--Result--
[('Result',), ('  Output: $0',), ('  InitPlan 1 (returns $0)',), ('    ->  Aggregate',), ('          Output: JSON_ARRAYAGG("*VALUES*".column1 RETURNING jsonb)',), ('          ->  Values Scan on "*VALUES*"',), ('                Output: "*VALUES*".column1',)]
+--------------------+
--Query--
SELECT NULL IS JSON
--Result--
[(None,)]
+--------------------+
--Query--
SELECT NULL IS NOT JSON
--Result--
[(None,)]
+--------------------+
--Query--
SELECT NULL::json IS JSON
--Result--
[(None,)]
+--------------------+
--Query--
SELECT NULL::jsonb IS JSON
--Result--
[(None,)]
+--------------------+
--Query--
SELECT NULL::text IS JSON
--Result--
[(None,)]
+--------------------+
--Query--
SELECT NULL::bytea IS JSON
--Result--
[(None,)]
+--------------------+
--Query--
SELECT '' IS JSON
--Result--
[(False,)]
+--------------------+
--Query--
SELECT 	js, 	js IS JSON "IS JSON", 	js IS NOT JSON "IS NOT JSON", 	js IS JSON VALUE "IS VALUE", 	js IS JSON OBJECT "IS OBJECT", 	js IS JSON ARRAY "IS ARRAY", 	js IS JSON SCALAR "IS SCALAR", 	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE", 	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE" FROM 	test_is_json
--Result--
[(None, None, None, None, None, None, None, None, None), ('', False, True, False, False, False, False, False, False), ('123', True, False, True, False, False, True, True, True), ('"aaa "', True, False, True, False, False, True, True, True), ('true', True, False, True, False, False, True, True, True), ('null', True, False, True, False, False, True, True, True), ('[]', True, False, True, False, True, False, True, True), ('[1, "2", {}]', True, False, True, False, True, False, True, True), ('{}', True, False, True, True, False, False, True, True), ('{ "a": 1, "b": null }', True, False, True, True, False, False, True, True), ('{ "a": 1, "a": null }', True, False, True, True, False, False, True, False), ('{ "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }', True, False, True, True, False, False, True, True), ('{ "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] }', True, False, True, True, False, False, True, False), ('aaa', False, True, False, False, False, False, False, False), ('{a:1}', False, True, False, False, False, False, False, False), ('["a",]', False, True, False, False, False, False, False, False)]
+--------------------+
--Query--
SELECT 	js, 	js IS JSON "IS JSON", 	js IS NOT JSON "IS NOT JSON", 	js IS JSON VALUE "IS VALUE", 	js IS JSON OBJECT "IS OBJECT", 	js IS JSON ARRAY "IS ARRAY", 	js IS JSON SCALAR "IS SCALAR", 	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE", 	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE" FROM 	(SELECT js::json FROM test_is_json WHERE js IS JSON) foo(js)
--Result--
[(123, True, False, True, False, False, True, True, True), ('aaa ', True, False, True, False, False, True, True, True), (True, True, False, True, False, False, True, True, True), (None, True, False, True, False, False, True, True, True), ([], True, False, True, False, True, False, True, True), ([1, '2', {}], True, False, True, False, True, False, True, True), ({}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': None}, True, False, True, True, False, False, True, True), ({'a': None}, True, False, True, True, False, False, True, False), ({'a': 1, 'b': [{'a': 1}, {'a': 2}]}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': [{'a': 2, 'b': 0}]}, True, False, True, True, False, False, True, False)]
+--------------------+
--Query--
SELECT 	js0, 	js IS JSON "IS JSON", 	js IS NOT JSON "IS NOT JSON", 	js IS JSON VALUE "IS VALUE", 	js IS JSON OBJECT "IS OBJECT", 	js IS JSON ARRAY "IS ARRAY", 	js IS JSON SCALAR "IS SCALAR", 	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE", 	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE" FROM 	(SELECT js, js::bytea FROM test_is_json WHERE js IS JSON) foo(js0, js)
--Result--
[('123', True, False, True, False, False, True, True, True), ('"aaa "', True, False, True, False, False, True, True, True), ('true', True, False, True, False, False, True, True, True), ('null', True, False, True, False, False, True, True, True), ('[]', True, False, True, False, True, False, True, True), ('[1, "2", {}]', True, False, True, False, True, False, True, True), ('{}', True, False, True, True, False, False, True, True), ('{ "a": 1, "b": null }', True, False, True, True, False, False, True, True), ('{ "a": 1, "a": null }', True, False, True, True, False, False, True, False), ('{ "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }', True, False, True, True, False, False, True, True), ('{ "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] }', True, False, True, True, False, False, True, False)]
+--------------------+
--Query--
SELECT 	js, 	js IS JSON "IS JSON", 	js IS NOT JSON "IS NOT JSON", 	js IS JSON VALUE "IS VALUE", 	js IS JSON OBJECT "IS OBJECT", 	js IS JSON ARRAY "IS ARRAY", 	js IS JSON SCALAR "IS SCALAR", 	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE", 	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE" FROM 	(SELECT js::jsonb FROM test_is_json WHERE js IS JSON) foo(js)
--Result--
[(123, True, False, True, False, False, True, True, True), ('aaa ', True, False, True, False, False, True, True, True), (True, True, False, True, False, False, True, True, True), (None, True, False, True, False, False, True, True, True), ([], True, False, True, False, True, False, True, True), ([1, '2', {}], True, False, True, False, True, False, True, True), ({}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': None}, True, False, True, True, False, False, True, True), ({'a': None}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': [{'a': 1}, {'a': 2}]}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': [{'a': 2, 'b': 0}]}, True, False, True, True, False, False, True, True)]
+--------------------+
--Query--
EXPLAIN (VERBOSE, COSTS OFF) SELECT '1' IS JSON AS "any", ('1' || i) IS JSON SCALAR AS "scalar", '[]' IS NOT JSON ARRAY AS "array", '{}' IS JSON OBJECT WITH UNIQUE AS "object" FROM generate_series(1, 3) i
--Result--
[('Function Scan on pg_catalog.generate_series i',), ("  Output: ('1'::text IS JSON), (('1'::text || (i)::text) IS JSON SCALAR), (NOT ('[]'::text IS JSON ARRAY)), ('{}'::text IS JSON OBJECT WITH UNIQUE KEYS)",), ('  Function Call: generate_series(1, 3)',)]
+--------------------+
