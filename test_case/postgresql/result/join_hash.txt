--Query--
analyze simple
--Result--
[]
+--------------------+
--Query--
analyze bigger_than_it_looks
--Result--
[]
+--------------------+
--Query--
analyze extremely_skewed
--Result--
[]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join simple s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]
+--------------------+
--Query--
select count(*) from simple r join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join simple s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]
+--------------------+
--Query--
select count(*) from simple r join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join simple s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]
+--------------------+
--Query--
select count(*) from simple r join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join simple s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]
+--------------------+
--Query--
select count(*) from simple r join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join simple s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]
+--------------------+
--Query--
select count(*) from simple r join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join simple s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]
+--------------------+
--Query--
select count(*) from simple r join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
select count(*) from simple r full outer join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) FROM simple r JOIN bigger_than_it_looks s USING (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on bigger_than_it_looks s',)]
+--------------------+
--Query--
select count(*) FROM simple r JOIN bigger_than_it_looks s USING (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join bigger_than_it_looks s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on bigger_than_it_looks s',)]
+--------------------+
--Query--
select count(*) from simple r join bigger_than_it_looks s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join bigger_than_it_looks s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on bigger_than_it_looks s',)]
+--------------------+
--Query--
select count(*) from simple r join bigger_than_it_looks s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join extremely_skewed s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (s.id = r.id)',), ('        ->  Seq Scan on extremely_skewed s',), ('        ->  Hash',), ('              ->  Seq Scan on simple r',)]
+--------------------+
--Query--
select count(*) from simple r join extremely_skewed s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join extremely_skewed s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (s.id = r.id)',), ('        ->  Seq Scan on extremely_skewed s',), ('        ->  Hash',), ('              ->  Seq Scan on simple r',)]
+--------------------+
--Query--
select count(*) from simple r join extremely_skewed s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from simple r join extremely_skewed s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (s.id = r.id)',), ('        ->  Seq Scan on extremely_skewed s',), ('        ->  Hash',), ('              ->  Seq Scan on simple r',)]
+--------------------+
--Query--
select count(*) from simple r join extremely_skewed s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from join_foo     left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss     on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1
--Result--
[('Aggregate',), ('  ->  Nested Loop Left Join',), ('        Join Filter: ((join_foo.id < (b1.id + 1)) AND (join_foo.id > (b1.id - 1)))',), ('        ->  Seq Scan on join_foo',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Hash Join',), ('                    Hash Cond: (b1.id = b2.id)',), ('                    ->  Parallel Seq Scan on join_bar b1',), ('                    ->  Hash',), ('                          ->  Seq Scan on join_bar b2',)]
+--------------------+
--Query--
select count(*) from join_foo   left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss   on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1
--Result--
[(3,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from join_foo     left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss     on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1
--Result--
[('Aggregate',), ('  ->  Nested Loop Left Join',), ('        Join Filter: ((join_foo.id < (b1.id + 1)) AND (join_foo.id > (b1.id - 1)))',), ('        ->  Seq Scan on join_foo',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Hash Join',), ('                    Hash Cond: (b1.id = b2.id)',), ('                    ->  Parallel Seq Scan on join_bar b1',), ('                    ->  Hash',), ('                          ->  Seq Scan on join_bar b2',)]
+--------------------+
--Query--
select count(*) from join_foo   left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss   on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1
--Result--
[(3,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from join_foo     left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss     on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1
--Result--
[('Aggregate',), ('  ->  Nested Loop Left Join',), ('        Join Filter: ((join_foo.id < (b1.id + 1)) AND (join_foo.id > (b1.id - 1)))',), ('        ->  Seq Scan on join_foo',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Hash Join',), ('                    Hash Cond: (b1.id = b2.id)',), ('                    ->  Parallel Seq Scan on join_bar b1',), ('                    ->  Parallel Hash',), ('                          ->  Parallel Seq Scan on join_bar b2',)]
+--------------------+
--Query--
select count(*) from join_foo   left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss   on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1
--Result--
[(3,)]
+--------------------+
--Query--
explain (costs off)   select count(*) from join_foo     left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss     on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1
--Result--
[('Aggregate',), ('  ->  Nested Loop Left Join',), ('        Join Filter: ((join_foo.id < (b1.id + 1)) AND (join_foo.id > (b1.id - 1)))',), ('        ->  Seq Scan on join_foo',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Hash Join',), ('                    Hash Cond: (b1.id = b2.id)',), ('                    ->  Parallel Seq Scan on join_bar b1',), ('                    ->  Parallel Hash',), ('                          ->  Parallel Seq Scan on join_bar b2',)]
+--------------------+
--Query--
select count(*) from join_foo   left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss   on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1
--Result--
[(3,)]
+--------------------+
--Query--
explain (costs off)      select  count(*) from simple r full outer join simple s using (id)
--Result--
[('Finalize Aggregate',), ('  ->  Gather',), ('        Workers Planned: 2',), ('        ->  Partial Aggregate',), ('              ->  Parallel Hash Full Join',), ('                    Hash Cond: (r.id = s.id)',), ('                    ->  Parallel Seq Scan on simple r',), ('                    ->  Parallel Hash',), ('                          ->  Parallel Seq Scan on simple s',)]
+--------------------+
--Query--
select  count(*) from simple r full outer join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)      select  count(*) from simple r full outer join simple s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple s',)]
+--------------------+
--Query--
select  count(*) from simple r full outer join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)      select  count(*) from simple r full outer join simple s using (id)
--Result--
[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple s',)]
+--------------------+
--Query--
select  count(*) from simple r full outer join simple s using (id)
--Result--
[(20000,)]
+--------------------+
--Query--
explain (costs off)      select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id)
--Result--
[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: ((0 - s.id) = r.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple s',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple r',)]
+--------------------+
--Query--
select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id)
--Result--
[(40000,)]
+--------------------+
--Query--
explain (costs off)      select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id)
--Result--
[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: ((0 - s.id) = r.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple s',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple r',)]
+--------------------+
--Query--
select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id)
--Result--
[(40000,)]
+--------------------+
--Query--
explain (costs off)      select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id)
--Result--
[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: ((0 - s.id) = r.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple s',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple r',)]
+--------------------+
--Query--
select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id)
--Result--
[(40000,)]
+--------------------+
--Query--
explain (costs off)   select length(max(s.t))   from wide left join (select id, coalesce(t, '') || '' as t from wide) s using (id)
--Result--
[('Finalize Aggregate',), ('  ->  Gather',), ('        Workers Planned: 2',), ('        ->  Partial Aggregate',), ('              ->  Parallel Hash Left Join',), ('                    Hash Cond: (wide.id = wide_1.id)',), ('                    ->  Parallel Seq Scan on wide',), ('                    ->  Parallel Hash',), ('                          ->  Parallel Seq Scan on wide wide_1',)]
+--------------------+
--Query--
select length(max(s.t)) from wide left join (select id, coalesce(t, '') || '' as t from wide) s using (id)
--Result--
[(320000,)]
+--------------------+
--Query--
SELECT * FROM hjtest_matchbits_t1 t1 FULL JOIN hjtest_matchbits_t2 t2 ON t1.id = t2.id   ORDER BY t1.id
--Result--
[(1, None), (None, 2)]
+--------------------+
--Query--
SELECT * FROM hjtest_matchbits_t1 t1 FULL JOIN hjtest_matchbits_t2 t2 ON t1.id = t2.id
--Result--
[(1, None), (None, 2)]
+--------------------+
--Query--
EXPLAIN (COSTS OFF, VERBOSE) SELECT hjtest_1.a a1, hjtest_2.a a2,hjtest_1.tableoid::regclass t1, hjtest_2.tableoid::regclass t2 FROM hjtest_1, hjtest_2 WHERE     hjtest_1.id = (SELECT 1 WHERE hjtest_2.id = 1)     AND (SELECT hjtest_1.b * 5) = (SELECT hjtest_2.c*5)     AND (SELECT hjtest_1.b * 5) < 50     AND (SELECT hjtest_2.c * 5) < 55     AND hjtest_1.a <> hjtest_2.b
--Result--
[('Hash Join',), ('  Output: hjtest_1.a, hjtest_2.a, (hjtest_1.tableoid)::regclass, (hjtest_2.tableoid)::regclass',), ('  Hash Cond: ((hjtest_1.id = (SubPlan 1)) AND ((SubPlan 2) = (SubPlan 3)))',), ('  Join Filter: (hjtest_1.a <> hjtest_2.b)',), ('  ->  Seq Scan on public.hjtest_1',), ('        Output: hjtest_1.a, hjtest_1.tableoid, hjtest_1.id, hjtest_1.b',), ('        Filter: ((SubPlan 4) < 50)',), ('        SubPlan 4',), ('          ->  Result',), ('                Output: (hjtest_1.b * 5)',), ('  ->  Hash',), ('        Output: hjtest_2.a, hjtest_2.tableoid, hjtest_2.id, hjtest_2.c, hjtest_2.b',), ('        ->  Seq Scan on public.hjtest_2',), ('              Output: hjtest_2.a, hjtest_2.tableoid, hjtest_2.id, hjtest_2.c, hjtest_2.b',), ('              Filter: ((SubPlan 5) < 55)',), ('              SubPlan 5',), ('                ->  Result',), ('                      Output: (hjtest_2.c * 5)',), ('        SubPlan 1',), ('          ->  Result',), ('                Output: 1',), ('                One-Time Filter: (hjtest_2.id = 1)',), ('        SubPlan 3',), ('          ->  Result',), ('                Output: (hjtest_2.c * 5)',), ('  SubPlan 2',), ('    ->  Result',), ('          Output: (hjtest_1.b * 5)',)]
+--------------------+
--Query--
SELECT hjtest_1.a a1, hjtest_2.a a2,hjtest_1.tableoid::regclass t1, hjtest_2.tableoid::regclass t2 FROM hjtest_1, hjtest_2 WHERE     hjtest_1.id = (SELECT 1 WHERE hjtest_2.id = 1)     AND (SELECT hjtest_1.b * 5) = (SELECT hjtest_2.c*5)     AND (SELECT hjtest_1.b * 5) < 50     AND (SELECT hjtest_2.c * 5) < 55     AND hjtest_1.a <> hjtest_2.b
--Result--
[('text', True, 'hjtest_1', 'hjtest_2')]
+--------------------+
--Query--
EXPLAIN (COSTS OFF, VERBOSE) SELECT hjtest_1.a a1, hjtest_2.a a2,hjtest_1.tableoid::regclass t1, hjtest_2.tableoid::regclass t2 FROM hjtest_2, hjtest_1 WHERE     hjtest_1.id = (SELECT 1 WHERE hjtest_2.id = 1)     AND (SELECT hjtest_1.b * 5) = (SELECT hjtest_2.c*5)     AND (SELECT hjtest_1.b * 5) < 50     AND (SELECT hjtest_2.c * 5) < 55     AND hjtest_1.a <> hjtest_2.b
--Result--
[('Hash Join',), ('  Output: hjtest_1.a, hjtest_2.a, (hjtest_1.tableoid)::regclass, (hjtest_2.tableoid)::regclass',), ('  Hash Cond: (((SubPlan 1) = hjtest_1.id) AND ((SubPlan 3) = (SubPlan 2)))',), ('  Join Filter: (hjtest_1.a <> hjtest_2.b)',), ('  ->  Seq Scan on public.hjtest_2',), ('        Output: hjtest_2.a, hjtest_2.tableoid, hjtest_2.id, hjtest_2.c, hjtest_2.b',), ('        Filter: ((SubPlan 5) < 55)',), ('        SubPlan 5',), ('          ->  Result',), ('                Output: (hjtest_2.c * 5)',), ('  ->  Hash',), ('        Output: hjtest_1.a, hjtest_1.tableoid, hjtest_1.id, hjtest_1.b',), ('        ->  Seq Scan on public.hjtest_1',), ('              Output: hjtest_1.a, hjtest_1.tableoid, hjtest_1.id, hjtest_1.b',), ('              Filter: ((SubPlan 4) < 50)',), ('              SubPlan 4',), ('                ->  Result',), ('                      Output: (hjtest_1.b * 5)',), ('        SubPlan 2',), ('          ->  Result',), ('                Output: (hjtest_1.b * 5)',), ('  SubPlan 1',), ('    ->  Result',), ('          Output: 1',), ('          One-Time Filter: (hjtest_2.id = 1)',), ('  SubPlan 3',), ('    ->  Result',), ('          Output: (hjtest_2.c * 5)',)]
+--------------------+
--Query--
SELECT hjtest_1.a a1, hjtest_2.a a2,hjtest_1.tableoid::regclass t1, hjtest_2.tableoid::regclass t2 FROM hjtest_2, hjtest_1 WHERE     hjtest_1.id = (SELECT 1 WHERE hjtest_2.id = 1)     AND (SELECT hjtest_1.b * 5) = (SELECT hjtest_2.c*5)     AND (SELECT hjtest_1.b * 5) < 50     AND (SELECT hjtest_2.c * 5) < 55     AND hjtest_1.a <> hjtest_2.b
--Result--
[('text', True, 'hjtest_1', 'hjtest_2')]
+--------------------+
