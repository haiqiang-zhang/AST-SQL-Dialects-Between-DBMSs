--Query--
SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid
--Result--
[('a', 'aaa'), ('a', 'aaaa'), ('a', 'aaaaa'), ('a', 'aaaaaa'), ('a', 'aaaaaaa'), ('a', 'aaaaaaaa'), ('b', 'bbb'), ('b', 'bbbb'), ('b', 'bbbbb'), ('b', 'bbbbbb'), ('b', 'bbbbbbb'), ('b', 'bbbbbbbb'), ('c', 'ccc'), ('c', 'cccc'), ('c', 'ccccc'), ('c', 'cccccc'), ('c', 'ccccccc'), ('c', 'cccccccc'), ('d', 'ddd'), ('d', 'dddd'), ('d', 'ddddd'), ('d', 'dddddd'), ('d', 'ddddddd'), ('d', 'dddddddd')]
+--------------------+
--Query--
SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid
--Result--
[('b', 'bbb', None), ('b', 'bbbb', None), ('b', 'bbbbb', None), ('b', 'bbbbbb', None), ('b', 'bbbbbbb', None), ('b', 'bbbbbbbb', None), ('d', 'ddd', None), ('d', 'dddd', None), ('d', 'ddddd', None), ('d', 'dddddd', None), ('d', 'ddddddd', None), ('d', 'dddddddd', None)]
+--------------------+
--Query--
SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid
--Result--
[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None), ('d', 'ddd', None), ('d', 'dddd', None), ('d', 'ddddd', None), ('d', 'dddddd', None), ('d', 'ddddddd', None), ('d', 'dddddddd', None)]
+--------------------+
--Query--
SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid
--Result--
[('d', 'ddd', None, None, None), ('d', 'dddd', None, None, None), ('d', 'ddddd', None, None, None), ('d', 'dddddd', None, None, None), ('d', 'ddddddd', None, None, None), ('d', 'dddddddd', None, None, None)]
+--------------------+
--Query--
SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid
--Result--
[('a', 'aaa'), ('a', 'aaaa'), ('a', 'aaaaa'), ('a', 'aaaaaa'), ('a', 'aaaaaaa'), ('a', 'aaaaaaaa')]
+--------------------+
--Query--
SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid
--Result--
[('b', 'bbb', None), ('b', 'bbbb', None), ('b', 'bbbbb', None), ('b', 'bbbbbb', None), ('b', 'bbbbbbb', None), ('b', 'bbbbbbbb', None)]
+--------------------+
--Query--
SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid
--Result--
[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None)]
+--------------------+
--Query--
SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid
--Result--
[('d', 'ddd', None, None, None), ('d', 'dddd', None, None, None), ('d', 'ddddd', None, None, None), ('d', 'dddddd', None, None, None), ('d', 'ddddddd', None, None, None), ('d', 'dddddddd', None, None, None)]
+--------------------+
--Query--
SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid
--Result--
[('a', 'zzzz'), ('a', 'zzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('b', 'bbb'), ('b', 'bbbb'), ('b', 'bbbbb'), ('b', 'bbbbbb'), ('b', 'bbbbbbb'), ('b', 'bbbbbbbb'), ('c', 'ccc'), ('c', 'cccc'), ('c', 'ccccc'), ('c', 'cccccc'), ('c', 'ccccccc'), ('c', 'cccccccc'), ('d', 'ddd'), ('d', 'dddd'), ('d', 'ddddd'), ('d', 'dddddd'), ('d', 'ddddddd'), ('d', 'dddddddd')]
+--------------------+
--Query--
SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid
--Result--
[('b', 'bbb', None), ('b', 'bbbb', None), ('b', 'bbbbb', None), ('b', 'bbbbbb', None), ('b', 'bbbbbbb', None), ('b', 'bbbbbbbb', None), ('d', 'ddd', None), ('d', 'dddd', None), ('d', 'ddddd', None), ('d', 'dddddd', None), ('d', 'ddddddd', None), ('d', 'dddddddd', None)]
+--------------------+
--Query--
SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid
--Result--
[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None), ('d', 'ddd', None), ('d', 'dddd', None), ('d', 'ddddd', None), ('d', 'dddddd', None), ('d', 'ddddddd', None), ('d', 'dddddddd', None)]
+--------------------+
--Query--
SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid
--Result--
[('d', 'ddd', None, None, None), ('d', 'dddd', None, None, None), ('d', 'ddddd', None, None, None), ('d', 'dddddd', None, None, None), ('d', 'ddddddd', None, None, None), ('d', 'dddddddd', None, None, None)]
+--------------------+
--Query--
SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid
--Result--
[('a', 'zzzz'), ('a', 'zzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz')]
+--------------------+
--Query--
SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid
--Result--
[('b', 'bbb', None), ('b', 'bbbb', None), ('b', 'bbbbb', None), ('b', 'bbbbbb', None), ('b', 'bbbbbbb', None), ('b', 'bbbbbbbb', None)]
+--------------------+
--Query--
SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid
--Result--
[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None)]
+--------------------+
--Query--
SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid
--Result--
[('d', 'ddd', None, None, None), ('d', 'dddd', None, None, None), ('d', 'ddddd', None, None, None), ('d', 'dddddd', None, None, None), ('d', 'ddddddd', None, None, None), ('d', 'dddddddd', None, None, None)]
+--------------------+
--Query--
SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid
--Result--
[('a', 'zzzz'), ('a', 'zzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('c', 'ccc'), ('c', 'cccc'), ('c', 'ccccc'), ('c', 'cccccc'), ('c', 'ccccccc'), ('c', 'cccccccc'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new')]
+--------------------+
--Query--
SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid
--Result--
[('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None)]
+--------------------+
--Query--
SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid
--Result--
[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None)]
+--------------------+
--Query--
SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid
--Result--
[('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None)]
+--------------------+
--Query--
SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid
--Result--
[('a', 'zzzz'), ('a', 'zzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz')]
+--------------------+
--Query--
SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid
--Result--
[('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None)]
+--------------------+
--Query--
SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid
--Result--
[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None)]
+--------------------+
--Query--
SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid
--Result--
[('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None)]
+--------------------+
--Query--
SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid
--Result--
[('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new')]
+--------------------+
--Query--
SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid
--Result--
[('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None)]
+--------------------+
--Query--
SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid
--Result--
[('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None)]
+--------------------+
--Query--
SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid
--Result--
[('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None)]
+--------------------+
--Query--
SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid
--Result--
[('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new')]
+--------------------+
--Query--
SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid
--Result--
[('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None)]
+--------------------+
--Query--
SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid
--Result--
[]
+--------------------+
--Query--
SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid
--Result--
[('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None)]
+--------------------+
--Query--
SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid
--Result--
[]
+--------------------+
--Query--
SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid
--Result--
[]
+--------------------+
--Query--
SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid
--Result--
[]
+--------------------+
--Query--
SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid
--Result--
[]
+--------------------+
--Query--
SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid
--Result--
[]
+--------------------+
--Query--
SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid
--Result--
[]
+--------------------+
--Query--
SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid
--Result--
[]
+--------------------+
--Query--
SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid
--Result--
[]
+--------------------+
--Query--
explain (costs off) update some_tab set f3 = 11 where f1 = 12 and f2 = 13
--Result--
[('Update on some_tab',), ('  Update on some_tab_child some_tab_1',), ('  ->  Result',), ('        ->  Index Scan using some_tab_child_f1_f2_idx on some_tab_child some_tab_1',), ('              Index Cond: ((f1 = 12) AND (f2 = 13))',)]
+--------------------+
--Query--
explain (verbose, costs off) update some_tab set a = a + 1 where false
--Result--
[('Update on public.some_tab',), ('  ->  Result',), ('        Output: (some_tab.a + 1), NULL::oid, NULL::tid',), ('        One-Time Filter: false',)]
+--------------------+
--Query--
explain (verbose, costs off) update some_tab set a = a + 1 where false returning b, a
--Result--
[('Update on public.some_tab',), ('  Output: some_tab.b, some_tab.a',), ('  ->  Result',), ('        Output: (some_tab.a + 1), NULL::oid, NULL::tid',), ('        One-Time Filter: false',)]
+--------------------+
--Query--
table some_tab
--Result--
[(1, 2)]
+--------------------+
--Query--
select tableoid::regclass::text as relname, bar.* from bar order by 1,2
--Result--
[('bar', 1, 101), ('bar', 2, 102), ('bar', 3, 103), ('bar', 4, 4), ('bar2', 1, 101), ('bar2', 2, 102), ('bar2', 3, 103), ('bar2', 4, 4)]
+--------------------+
--Query--
select tableoid::regclass::text as relname, bar.* from bar order by 1,2
--Result--
[('bar', 1, 201), ('bar', 2, 202), ('bar', 3, 203), ('bar', 4, 104), ('bar2', 1, 201), ('bar2', 2, 202), ('bar2', 3, 203), ('bar2', 4, 104)]
+--------------------+
--Query--
select tableoid::regclass::text as relname, parted_tab.* from parted_tab order by 1,2
--Result--
[('parted_tab_part1', 1, 'b'), ('parted_tab_part2', 2, 'b'), ('parted_tab_part3', 3, 'a')]
+--------------------+
--Query--
truncate parted_tab
--Result--
[]
+--------------------+
--Query--
select tableoid::regclass::text as relname, parted_tab.* from parted_tab order by 1,2
--Result--
[('parted_tab_part1', 1, 'b'), ('parted_tab_part2', 2, 'a'), ('parted_tab_part3', 3, 'a')]
+--------------------+
--Query--
explain update parted_tab set a = 2 where false
--Result--
[('Update on parted_tab  (cost=0.00..0.00 rows=0 width=0)',), ('  ->  Result  (cost=0.00..0.00 rows=0 width=10)',), ('        One-Time Filter: false',)]
+--------------------+
--Query--
select tableoid::regclass::text as relname, mlparted_tab.* from mlparted_tab order by 1,2
--Result--
[('mlparted_tab_part1', 1, 'a', None), ('mlparted_tab_part2a', 2, 'a', None), ('mlparted_tab_part2b', 2, 'b', 'xxx'), ('mlparted_tab_part3', 3, 'a', 'xxx')]
+--------------------+
--Query--
select * from d
--Result--
[(32, 'one', 'two', 'three')]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pgc.connoinherit from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname = 'p1' order by 1,2
--Result--
[('p1', 'p1chk', 'c', True, 0, True), ('p1', 'p2chk', 'c', True, 0, False)]
+--------------------+
--Query--
select derived::base from derived
--Result--
[('(0)',)]
+--------------------+
--Query--
select NULL::derived::base
--Result--
[(None,)]
+--------------------+
--Query--
explain (verbose on, costs off) select row(i, b)::more_derived::derived::base from more_derived
--Result--
[('Seq Scan on public.more_derived',), ('  Output: (ROW(i, b)::more_derived)::base',)]
+--------------------+
--Query--
explain (verbose on, costs off) select (1, 2)::more_derived::derived::base
--Result--
[('Result',), ("  Output: '(1)'::base",)]
+--------------------+
--Query--
select p2text(c1.*) from c1
--Result--
[('hi',)]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2
--Result--
[('ac', 'ac_check', 'c', True, 0, '(aa IS NOT NULL)'), ('bc', 'ac_check', 'c', False, 1, '(aa IS NOT NULL)')]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2
--Result--
[]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2
--Result--
[('ac', 'ac_aa_check', 'c', True, 0, '(aa IS NOT NULL)'), ('bc', 'ac_aa_check', 'c', False, 1, '(aa IS NOT NULL)')]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2
--Result--
[]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2
--Result--
[('ac', 'ac_check', 'c', True, 0, '(aa IS NOT NULL)'), ('bc', 'ac_check', 'c', True, 0, '(aa IS NOT NULL)')]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2
--Result--
[('ac', 'ac_check', 'c', True, 0, '(aa IS NOT NULL)')]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2
--Result--
[]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2
--Result--
[('ac', 'check_a', 'c', True, 0, '(a <> 0)'), ('bc', 'check_a', 'c', True, 1, '(a <> 0)'), ('bc', 'check_b', 'c', True, 0, '(b <> 0)')]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc', 'cc') order by 1,2
--Result--
[('ac', 'check_a', 'c', True, 0, '(a <> 0)'), ('bc', 'check_b', 'c', True, 0, '(b <> 0)'), ('cc', 'check_a', 'c', False, 1, '(a <> 0)'), ('cc', 'check_b', 'c', False, 1, '(b <> 0)'), ('cc', 'check_c', 'c', True, 0, '(c <> 0)')]
+--------------------+
--Query--
select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc', 'cc') order by 1,2
--Result--
[('ac', 'check_a', 'c', True, 0, '(a <> 0)'), ('bc', 'check_b', 'c', True, 0, '(b <> 0)'), ('cc', 'check_a', 'c', False, 1, '(a <> 0)'), ('cc', 'check_b', 'c', True, 0, '(b <> 0)'), ('cc', 'check_c', 'c', True, 0, '(c <> 0)')]
+--------------------+
--Query--
WITH RECURSIVE r AS (   SELECT 'inht1'::regclass AS inhrelid UNION ALL   SELECT c.inhrelid FROM pg_inherits c, r WHERE r.inhrelid = c.inhparent ) SELECT a.attrelid::regclass, a.attname, a.attinhcount, e.expected   FROM (SELECT inhrelid, count(*) AS expected FROM pg_inherits         WHERE inhparent IN (SELECT inhrelid FROM r) GROUP BY inhrelid) e   JOIN pg_attribute a ON e.inhrelid = a.attrelid WHERE NOT attislocal   ORDER BY a.attrelid::regclass::name, a.attnum
--Result--
[('inht2', 'aaaa', 1, 1), ('inht2', 'b', 1, 1), ('inht3', 'aaaa', 1, 1), ('inht3', 'b', 1, 1), ('inht4', 'aaaa', 2, 2), ('inht4', 'b', 2, 2), ('inht4', 'x', 1, 2), ('inht4', 'y', 1, 2), ('inhts', 'aaaa', 1, 1), ('inhts', 'b', 2, 1), ('inhts', 'x', 1, 1), ('inhts', 'c', 1, 1)]
+--------------------+
--Query--
select * from inh_fk_1 order by 1
--Result--
[(2,), (3,)]
+--------------------+
--Query--
select * from inh_fk_2 order by 1, 2
--Result--
[(22, 2), (33, 3), (111, 1), (222, 2)]
+--------------------+
--Query--
select conrelid::regclass::text as relname, conname, conislocal, coninhcount from pg_constraint where conname like 'inh\_check\_constraint%' order by 1, 2
--Result--
[('p1', 'inh_check_constraint1', True, 0), ('p1', 'inh_check_constraint2', True, 0), ('p1_c1', 'inh_check_constraint1', True, 1), ('p1_c1', 'inh_check_constraint2', True, 1)]
+--------------------+
--Query--
select conrelid::regclass::text as relname, conname,        convalidated, conislocal, coninhcount, connoinherit from pg_constraint where conname like 'inh\_check\_constraint%' order by 1, 2
--Result--
[('invalid_check_con', 'inh_check_constraint', False, True, 0, False), ('invalid_check_con_child', 'inh_check_constraint', True, True, 1, False)]
+--------------------+
--Query--
analyze patest0
--Result--
[]
+--------------------+
--Query--
analyze patest1
--Result--
[]
+--------------------+
--Query--
analyze patest2
--Result--
[]
+--------------------+
--Query--
explain (verbose, costs off) select * from matest0 order by 1-id
--Result--
[('Sort',), ('  Output: matest0.id, matest0.name, ((1 - matest0.id))',), ('  Sort Key: ((1 - matest0.id))',), ('  ->  Result',), ('        Output: matest0.id, matest0.name, (1 - matest0.id)',), ('        ->  Append',), ('              ->  Seq Scan on public.matest0 matest0_1',), ('                    Output: matest0_1.id, matest0_1.name',), ('              ->  Seq Scan on public.matest1 matest0_2',), ('                    Output: matest0_2.id, matest0_2.name',), ('              ->  Seq Scan on public.matest2 matest0_3',), ('                    Output: matest0_3.id, matest0_3.name',), ('              ->  Seq Scan on public.matest3 matest0_4',), ('                    Output: matest0_4.id, matest0_4.name',)]
+--------------------+
--Query--
select * from matest0 order by 1-id
--Result--
[(6, 'Test 6'), (5, 'Test 5'), (4, 'Test 4'), (3, 'Test 3'), (2, 'Test 2'), (1, 'Test 1')]
+--------------------+
--Query--
explain (verbose, costs off) select min(1-id) from matest0
--Result--
[('Aggregate',), ('  Output: min((1 - matest0.id))',), ('  ->  Append',), ('        ->  Seq Scan on public.matest0 matest0_1',), ('              Output: matest0_1.id',), ('        ->  Seq Scan on public.matest1 matest0_2',), ('              Output: matest0_2.id',), ('        ->  Seq Scan on public.matest2 matest0_3',), ('              Output: matest0_3.id',), ('        ->  Seq Scan on public.matest3 matest0_4',), ('              Output: matest0_4.id',)]
+--------------------+
--Query--
select min(1-id) from matest0
--Result--
[(-5,)]
+--------------------+
--Query--
explain (verbose, costs off) select * from matest0 order by 1-id
--Result--
[('Merge Append',), ('  Sort Key: ((1 - matest0.id))',), ('  ->  Index Scan using matest0i on public.matest0 matest0_1',), ('        Output: matest0_1.id, matest0_1.name, (1 - matest0_1.id)',), ('  ->  Index Scan using matest1i on public.matest1 matest0_2',), ('        Output: matest0_2.id, matest0_2.name, (1 - matest0_2.id)',), ('  ->  Sort',), ('        Output: matest0_3.id, matest0_3.name, ((1 - matest0_3.id))',), ('        Sort Key: ((1 - matest0_3.id))',), ('        ->  Seq Scan on public.matest2 matest0_3',), ('              Output: matest0_3.id, matest0_3.name, (1 - matest0_3.id)',), ('  ->  Index Scan using matest3i on public.matest3 matest0_4',), ('        Output: matest0_4.id, matest0_4.name, (1 - matest0_4.id)',)]
+--------------------+
--Query--
select * from matest0 order by 1-id
--Result--
[(6, 'Test 6'), (5, 'Test 5'), (4, 'Test 4'), (3, 'Test 3'), (2, 'Test 2'), (1, 'Test 1')]
+--------------------+
--Query--
explain (verbose, costs off) select min(1-id) from matest0
--Result--
[('Result',), ('  Output: $0',), ('  InitPlan 1 (returns $0)',), ('    ->  Limit',), ('          Output: ((1 - matest0.id))',), ('          ->  Result',), ('                Output: ((1 - matest0.id))',), ('                ->  Merge Append',), ('                      Sort Key: ((1 - matest0.id))',), ('                      ->  Index Scan using matest0i on public.matest0 matest0_1',), ('                            Output: matest0_1.id, (1 - matest0_1.id)',), ('                            Index Cond: ((1 - matest0_1.id) IS NOT NULL)',), ('                      ->  Index Scan using matest1i on public.matest1 matest0_2',), ('                            Output: matest0_2.id, (1 - matest0_2.id)',), ('                            Index Cond: ((1 - matest0_2.id) IS NOT NULL)',), ('                      ->  Sort',), ('                            Output: matest0_3.id, ((1 - matest0_3.id))',), ('                            Sort Key: ((1 - matest0_3.id))',), ('                            ->  Bitmap Heap Scan on public.matest2 matest0_3',), ('                                  Output: matest0_3.id, (1 - matest0_3.id)',), ('                                  Filter: ((1 - matest0_3.id) IS NOT NULL)',), ('                                  ->  Bitmap Index Scan on matest2_pkey',), ('                      ->  Index Scan using matest3i on public.matest3 matest0_4',), ('                            Output: matest0_4.id, (1 - matest0_4.id)',), ('                            Index Cond: ((1 - matest0_4.id) IS NOT NULL)',)]
+--------------------+
--Query--
select min(1-id) from matest0
--Result--
[(-5,)]
+--------------------+
--Query--
explain (costs off) select t1.* from matest0 t1, matest0 t2 where t1.b = t2.b and t2.c = t2.d order by t1.b limit 10
--Result--
[('Limit',), ('  ->  Merge Join',), ('        Merge Cond: (t1.b = t2.b)',), ('        ->  Merge Append',), ('              Sort Key: t1.b',), ('              ->  Index Scan using matest0i on matest0 t1_1',), ('              ->  Index Scan using matest1i on matest1 t1_2',), ('        ->  Materialize',), ('              ->  Merge Append',), ('                    Sort Key: t2.b',), ('                    ->  Index Scan using matest0i on matest0 t2_1',), ('                          Filter: (c = d)',), ('                    ->  Index Scan using matest1i on matest1 t2_2',), ('                          Filter: (c = d)',)]
+--------------------+
--Query--
analyze matest0
--Result--
[]
+--------------------+
--Query--
analyze matest1
--Result--
[]
+--------------------+
--Query--
explain (costs off) select * from matest0 where a < 100 order by a
--Result--
[('Sort',), ('  Sort Key: matest0.a',), ('  ->  Append',), ('        ->  Seq Scan on matest0 matest0_1',), ('              Filter: (a < 100)',), ('        ->  Seq Scan on matest1 matest0_2',), ('              Filter: (a < 100)',)]
+--------------------+
--Query--
explain (costs off) SELECT     ARRAY(SELECT f.i FROM (         (SELECT d + g.i FROM generate_series(4, 30, 3) d ORDER BY 1)         UNION ALL         (SELECT d + g.i FROM generate_series(0, 30, 5) d ORDER BY 1)     ) f(i)     ORDER BY f.i LIMIT 10) FROM generate_series(1, 3) g(i)
--Result--
[('Function Scan on generate_series g',), ('  SubPlan 1',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: ((d.d + g.i))',), ('                ->  Sort',), ('                      Sort Key: ((d.d + g.i))',), ('                      ->  Function Scan on generate_series d',), ('                ->  Sort',), ('                      Sort Key: ((d_1.d + g.i))',), ('                      ->  Function Scan on generate_series d_1',)]
+--------------------+
--Query--
SELECT     ARRAY(SELECT f.i FROM (         (SELECT d + g.i FROM generate_series(4, 30, 3) d ORDER BY 1)         UNION ALL         (SELECT d + g.i FROM generate_series(0, 30, 5) d ORDER BY 1)     ) f(i)     ORDER BY f.i LIMIT 10) FROM generate_series(1, 3) g(i)
--Result--
[([1, 5, 6, 8, 11, 11, 14, 16, 17, 20],), ([2, 6, 7, 9, 12, 12, 15, 17, 18, 21],), ([3, 7, 8, 10, 13, 13, 16, 18, 19, 22],)]
+--------------------+
--Query--
select * from inhpar
--Result--
[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')]
+--------------------+
--Query--
select * from inhpar
--Result--
[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')]
+--------------------+
--Query--
select * from inhpar order by f1
--Result--
[(1, '1'), (2, '2'), (3, '3+'), (4, '4'), (5, '5'), (6, '6'), (7, '7+'), (8, '8'), (9, '9'), (10, '10')]
+--------------------+
--Query--
select * from cnullparent
--Result--
[(1,), (2,), (None,)]
+--------------------+
--Query--
select * from cnullparent where f1 = 2
--Result--
[(2,)]
+--------------------+
--Query--
select conrelid::regclass, conname, contype, conkey,  coninhcount, conislocal, connoinherit  from pg_constraint where contype in ('n','p') and  conrelid::regclass::text in ('inh_child', 'inh_parent1', 'inh_parent2')  order by 1, 2
--Result--
[('inh_parent1', 'inh_parent1_pkey', 'p', [1, 2], 0, True, True), ('inh_parent2', 'inh_parent2_pkey', 'p', [1, 3], 0, True, True)]
+--------------------+
--Query--
select conrelid::regclass, conname, contype, conkey,  (select attname from pg_attribute where attrelid = conrelid and attnum = conkey[1]),  coninhcount, conislocal, connoinherit  from pg_constraint where contype = 'n' and  conrelid::regclass::text like 'inh\_nn\_%'  order by 2, 1
--Result--
[]
+--------------------+
--Query--
select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid in ('inh_parent'::regclass, 'inh_child1'::regclass, 'inh_child2'::regclass)  order by 2, 1
--Result--
[]
+--------------------+
--Query--
select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid::regclass::text in ('inh_parent', 'inh_child1', 'inh_child2', 'inh_child3')  order by 2, 1
--Result--
[]
+--------------------+
--Query--
select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint  where conrelid::regclass::text in ('inh_parent', 'inh_child', 'inh_child2', 'inh_child3')  order by 2, 1
--Result--
[('inh_child', 'inh_child_pkey', 'p', 0, True), ('inh_parent', 'inh_parent_excl', 'x', 0, True), ('inh_parent', 'inh_parent_fk', 'f', 0, True), ('inh_parent', 'inh_parent_pkey', 'p', 0, True), ('inh_parent', 'inh_parent_uq', 'u', 0, True)]
+--------------------+
--Query--
select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid in ('inh_parent'::regclass, 'inh_child1'::regclass, 'inh_child2'::regclass, 'inh_child3'::regclass)  order by 2, conrelid::regclass::text
--Result--
[]
+--------------------+
--Query--
select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid in ('inh_parent_1'::regclass, 'inh_parent_2'::regclass, 'inh_child'::regclass)  order by 2, conrelid::regclass::text
--Result--
[]
+--------------------+
--Query--
select conrelid::regclass, contype, conname,   (select attname from pg_attribute where attrelid = conrelid and attnum = conkey[1]),   coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid::regclass in ('inh_p1', 'inh_p2', 'inh_p3', 'inh_p4', 	'inh_multiparent')  order by conrelid::regclass::text, conname
--Result--
[]
+--------------------+
--Query--
select conrelid::regclass, contype, conname,   (select attname from pg_attribute where attrelid = conrelid and attnum = conkey[1]),   coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid::regclass in ('inh_p3', 'inh_multiparent', 'inh_multiparent2')  order by conrelid::regclass::text, conname
--Result--
[]
+--------------------+
--Query--
select tableoid::regclass, a1 from inh_perm_parent
--Result--
[('inh_perm_parent', 1), ('inh_temp_child', 3)]
+--------------------+
--Query--
select tableoid::regclass, a1 from inh_temp_parent
--Result--
[('inh_temp_parent', 2), ('inh_temp_child_2', 4)]
+--------------------+
--Query--
explain (costs off) select * from list_parted
--Result--
[('Append',), ('  ->  Seq Scan on part_ab_cd list_parted_1',), ('  ->  Seq Scan on part_ef_gh list_parted_2',), ('  ->  Seq Scan on part_null_xy list_parted_3',)]
+--------------------+
--Query--
explain (costs off) select * from list_parted where a is null
--Result--
[('Seq Scan on part_null_xy list_parted',), ('  Filter: (a IS NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from list_parted where a is not null
--Result--
[('Append',), ('  ->  Seq Scan on part_ab_cd list_parted_1',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on part_ef_gh list_parted_2',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on part_null_xy list_parted_3',), ('        Filter: (a IS NOT NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from list_parted where a in ('ab', 'cd', 'ef')
--Result--
[('Append',), ('  ->  Seq Scan on part_ab_cd list_parted_1',), ("        Filter: ((a)::text = ANY ('{ab,cd,ef}'::text[]))",), ('  ->  Seq Scan on part_ef_gh list_parted_2',), ("        Filter: ((a)::text = ANY ('{ab,cd,ef}'::text[]))",)]
+--------------------+
--Query--
explain (costs off) select * from list_parted where a = 'ab' or a in (null, 'cd')
--Result--
[('Seq Scan on part_ab_cd list_parted',), ("  Filter: (((a)::text = 'ab'::text) OR ((a)::text = ANY ('{NULL,cd}'::text[])))",)]
+--------------------+
--Query--
explain (costs off) select * from list_parted where a = 'ab'
--Result--
[('Seq Scan on part_ab_cd list_parted',), ("  Filter: ((a)::text = 'ab'::text)",)]
+--------------------+
--Query--
explain (costs off) select * from range_list_parted
--Result--
[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), ('  ->  Seq Scan on part_1_10_cd range_list_parted_2',), ('  ->  Seq Scan on part_10_20_ab range_list_parted_3',), ('  ->  Seq Scan on part_10_20_cd range_list_parted_4',), ('  ->  Seq Scan on part_21_30_ab range_list_parted_5',), ('  ->  Seq Scan on part_21_30_cd range_list_parted_6',), ('  ->  Seq Scan on part_40_inf_ab range_list_parted_7',), ('  ->  Seq Scan on part_40_inf_cd range_list_parted_8',), ('  ->  Seq Scan on part_40_inf_null range_list_parted_9',)]
+--------------------+
--Query--
explain (costs off) select * from range_list_parted where a = 5
--Result--
[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), ('        Filter: (a = 5)',), ('  ->  Seq Scan on part_1_10_cd range_list_parted_2',), ('        Filter: (a = 5)',)]
+--------------------+
--Query--
explain (costs off) select * from range_list_parted where b = 'ab'
--Result--
[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), ("        Filter: (b = 'ab'::bpchar)",), ('  ->  Seq Scan on part_10_20_ab range_list_parted_2',), ("        Filter: (b = 'ab'::bpchar)",), ('  ->  Seq Scan on part_21_30_ab range_list_parted_3',), ("        Filter: (b = 'ab'::bpchar)",), ('  ->  Seq Scan on part_40_inf_ab range_list_parted_4',), ("        Filter: (b = 'ab'::bpchar)",)]
+--------------------+
--Query--
explain (costs off) select * from range_list_parted where a between 3 and 23 and b in ('ab')
--Result--
[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), ("        Filter: ((a >= 3) AND (a <= 23) AND (b = 'ab'::bpchar))",), ('  ->  Seq Scan on part_10_20_ab range_list_parted_2',), ("        Filter: ((a >= 3) AND (a <= 23) AND (b = 'ab'::bpchar))",), ('  ->  Seq Scan on part_21_30_ab range_list_parted_3',), ("        Filter: ((a >= 3) AND (a <= 23) AND (b = 'ab'::bpchar))",)]
+--------------------+
--Query--
explain (costs off) select * from range_list_parted where a is null
--Result--
[('Result',), ('  One-Time Filter: false',)]
+--------------------+
--Query--
explain (costs off) select * from range_list_parted where b is null
--Result--
[('Seq Scan on part_40_inf_null range_list_parted',), ('  Filter: (b IS NULL)',)]
+--------------------+
--Query--
explain (costs off) select * from range_list_parted where a is not null and a < 67
--Result--
[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_1_10_cd range_list_parted_2',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_10_20_ab range_list_parted_3',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_10_20_cd range_list_parted_4',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_21_30_ab range_list_parted_5',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_21_30_cd range_list_parted_6',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_40_inf_ab range_list_parted_7',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_40_inf_cd range_list_parted_8',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_40_inf_null range_list_parted_9',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',)]
+--------------------+
--Query--
explain (costs off) select * from range_list_parted where a >= 30
--Result--
[('Append',), ('  ->  Seq Scan on part_40_inf_ab range_list_parted_1',), ('        Filter: (a >= 30)',), ('  ->  Seq Scan on part_40_inf_cd range_list_parted_2',), ('        Filter: (a >= 30)',), ('  ->  Seq Scan on part_40_inf_null range_list_parted_3',), ('        Filter: (a >= 30)',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where a = 0
--Result--
[('Append',), ('  ->  Seq Scan on mcrparted0 mcrparted_1',), ('        Filter: (a = 0)',), ('  ->  Seq Scan on mcrparted_def mcrparted_2',), ('        Filter: (a = 0)',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where a = 10 and abs(b) < 5
--Result--
[('Append',), ('  ->  Seq Scan on mcrparted1 mcrparted_1',), ('        Filter: ((a = 10) AND (abs(b) < 5))',), ('  ->  Seq Scan on mcrparted_def mcrparted_2',), ('        Filter: ((a = 10) AND (abs(b) < 5))',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where a = 10 and abs(b) = 5
--Result--
[('Append',), ('  ->  Seq Scan on mcrparted1 mcrparted_1',), ('        Filter: ((a = 10) AND (abs(b) = 5))',), ('  ->  Seq Scan on mcrparted2 mcrparted_2',), ('        Filter: ((a = 10) AND (abs(b) = 5))',), ('  ->  Seq Scan on mcrparted_def mcrparted_3',), ('        Filter: ((a = 10) AND (abs(b) = 5))',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where abs(b) = 5
--Result--
[('Append',), ('  ->  Seq Scan on mcrparted0 mcrparted_1',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted1 mcrparted_2',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted2 mcrparted_3',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted3 mcrparted_4',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted4 mcrparted_5',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted5 mcrparted_6',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted_def mcrparted_7',), ('        Filter: (abs(b) = 5)',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where a > -1
--Result--
[('Append',), ('  ->  Seq Scan on mcrparted0 mcrparted_1',), ("        Filter: (a > '-1'::integer)",), ('  ->  Seq Scan on mcrparted1 mcrparted_2',), ("        Filter: (a > '-1'::integer)",), ('  ->  Seq Scan on mcrparted2 mcrparted_3',), ("        Filter: (a > '-1'::integer)",), ('  ->  Seq Scan on mcrparted3 mcrparted_4',), ("        Filter: (a > '-1'::integer)",), ('  ->  Seq Scan on mcrparted4 mcrparted_5',), ("        Filter: (a > '-1'::integer)",), ('  ->  Seq Scan on mcrparted5 mcrparted_6',), ("        Filter: (a > '-1'::integer)",), ('  ->  Seq Scan on mcrparted_def mcrparted_7',), ("        Filter: (a > '-1'::integer)",)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where a = 20 and abs(b) = 10 and c > 10
--Result--
[('Seq Scan on mcrparted4 mcrparted',), ('  Filter: ((c > 10) AND (a = 20) AND (abs(b) = 10))',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where a = 20 and c > 20
--Result--
[('Append',), ('  ->  Seq Scan on mcrparted3 mcrparted_1',), ('        Filter: ((c > 20) AND (a = 20))',), ('  ->  Seq Scan on mcrparted4 mcrparted_2',), ('        Filter: ((c > 20) AND (a = 20))',), ('  ->  Seq Scan on mcrparted5 mcrparted_3',), ('        Filter: ((c > 20) AND (a = 20))',), ('  ->  Seq Scan on mcrparted_def mcrparted_4',), ('        Filter: ((c > 20) AND (a = 20))',)]
+--------------------+
--Query--
explain (costs off) select min(a), max(a) from parted_minmax where b = '12345'
--Result--
[('Result',), ('  InitPlan 1 (returns $0)',), ('    ->  Limit',), ('          ->  Index Only Scan using parted_minmax1i on parted_minmax1 parted_minmax',), ("                Index Cond: ((a IS NOT NULL) AND (b = '12345'::text))",), ('  InitPlan 2 (returns $1)',), ('    ->  Limit',), ('          ->  Index Only Scan Backward using parted_minmax1i on parted_minmax1 parted_minmax_1',), ("                Index Cond: ((a IS NOT NULL) AND (b = '12345'::text))",)]
+--------------------+
--Query--
select min(a), max(a) from parted_minmax where b = '12345'
--Result--
[(1, 1)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted order by a, abs(b), c
--Result--
[('Merge Append',), ('  Sort Key: mcrparted.a, (abs(mcrparted.b)), mcrparted.c',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Index Scan using mcrparted5_a_abs_c_idx on mcrparted5 mcrparted_6',), ('  ->  Index Scan using mcrparted_def_a_abs_c_idx on mcrparted_def mcrparted_7',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted order by a, abs(b), c
--Result--
[('Append',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Index Scan using mcrparted5_a_abs_c_idx on mcrparted5 mcrparted_6',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted order by a desc, abs(b) desc, c desc
--Result--
[('Append',), ('  ->  Index Scan Backward using mcrparted5_a_abs_c_idx on mcrparted5 mcrparted_6',), ('  ->  Index Scan Backward using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Index Scan Backward using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan Backward using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan Backward using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan Backward using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted order by a, abs(b), c
--Result--
[('Append',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Merge Append',), ('        Sort Key: mcrparted_7.a, (abs(mcrparted_7.b)), mcrparted_7.c',), ('        ->  Index Scan using mcrparted5a_a_abs_c_idx on mcrparted5a mcrparted_7',), ('        ->  Index Scan using mcrparted5_def_a_abs_c_idx on mcrparted5_def mcrparted_8',)]
+--------------------+
--Query--
explain (costs off) select a, abs(b) from mcrparted order by a, abs(b), c
--Result--
[('Append',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Index Scan using mcrparted5a_a_abs_c_idx on mcrparted5a mcrparted_6',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where a < 20 order by a, abs(b), c
--Result--
[('Append',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('        Index Cond: (a < 20)',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('        Index Cond: (a < 20)',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('        Index Cond: (a < 20)',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('        Index Cond: (a < 20)',)]
+--------------------+
--Query--
explain (costs off) select * from mclparted order by a
--Result--
[('Append',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',)]
+--------------------+
--Query--
explain (costs off) select * from mclparted order by a
--Result--
[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), ('  ->  Index Only Scan using mclparted3_5_a_idx on mclparted3_5 mclparted_3',), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_4',)]
+--------------------+
--Query--
explain (costs off) select * from mclparted where a in(3,4,5) order by a
--Result--
[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted3_5_a_idx on mclparted3_5 mclparted_1',), ("        Index Cond: (a = ANY ('{3,4,5}'::integer[]))",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_2',), ("        Index Cond: (a = ANY ('{3,4,5}'::integer[]))",)]
+--------------------+
--Query--
explain (costs off) select * from mclparted where a in(1,2,4) order by a
--Result--
[('Append',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), ("        Index Cond: (a = ANY ('{1,2,4}'::integer[]))",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), ("        Index Cond: (a = ANY ('{1,2,4}'::integer[]))",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_3',), ("        Index Cond: (a = ANY ('{1,2,4}'::integer[]))",)]
+--------------------+
--Query--
explain (costs off) select * from mclparted where a in(1,2,4) or a is null order by a
--Result--
[('Append',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), ("        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), ("        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_3',), ("        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))",), ('  ->  Index Only Scan using mclparted_null_a_idx on mclparted_null mclparted_4',), ("        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))",)]
+--------------------+
--Query--
explain (costs off) select * from mclparted where a in(1,2,4) or a is null order by a
--Result--
[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted_0_null_a_idx on mclparted_0_null mclparted_1',), ("        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))",), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_2',), ("        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_3',), ("        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_4',), ("        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))",)]
+--------------------+
--Query--
explain (costs off) select * from mclparted where a in(0,1,2,4) order by a
--Result--
[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted_0_null_a_idx on mclparted_0_null mclparted_1',), ("        Index Cond: (a = ANY ('{0,1,2,4}'::integer[]))",), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_2',), ("        Index Cond: (a = ANY ('{0,1,2,4}'::integer[]))",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_3',), ("        Index Cond: (a = ANY ('{0,1,2,4}'::integer[]))",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_4',), ("        Index Cond: (a = ANY ('{0,1,2,4}'::integer[]))",)]
+--------------------+
--Query--
explain (costs off) select * from mclparted where a in(1,2,4) order by a
--Result--
[('Append',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), ("        Index Cond: (a = ANY ('{1,2,4}'::integer[]))",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), ("        Index Cond: (a = ANY ('{1,2,4}'::integer[]))",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_3',), ("        Index Cond: (a = ANY ('{1,2,4}'::integer[]))",)]
+--------------------+
--Query--
explain (costs off) select * from mclparted where a in(1,2,4,100) order by a
--Result--
[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), ("        Index Cond: (a = ANY ('{1,2,4,100}'::integer[]))",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), ("        Index Cond: (a = ANY ('{1,2,4,100}'::integer[]))",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_3',), ("        Index Cond: (a = ANY ('{1,2,4,100}'::integer[]))",), ('  ->  Index Only Scan using mclparted_def_a_idx on mclparted_def mclparted_4',), ("        Index Cond: (a = ANY ('{1,2,4,100}'::integer[]))",)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where a < 20 order by a, abs(b), c limit 1
--Result--
[('Limit',), ('  ->  Append',), ('        ->  Sort',), ('              Sort Key: mcrparted_1.a, (abs(mcrparted_1.b)), mcrparted_1.c',), ('              ->  Seq Scan on mcrparted0 mcrparted_1',), ('                    Filter: (a < 20)',), ('        ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('              Index Cond: (a < 20)',), ('        ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('              Index Cond: (a < 20)',), ('        ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('              Index Cond: (a < 20)',)]
+--------------------+
--Query--
explain (costs off) select * from mcrparted where a = 10 order by a, abs(b), c
--Result--
[('Append',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_1',), ('        Index Cond: (a = 10)',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_2',), ('        Index Cond: (a = 10)',)]
+--------------------+
--Query--
explain (costs off) select * from bool_lp order by b
--Result--
[('Append',), ('  ->  Index Only Scan using bool_lp_false_b_idx on bool_lp_false bool_lp_1',), ('  ->  Index Only Scan using bool_lp_true_b_idx on bool_lp_true bool_lp_2',)]
+--------------------+
--Query--
explain (costs off) select * from bool_rp where b = true order by b,a
--Result--
[('Append',), ('  ->  Index Only Scan using bool_rp_true_1k_b_a_idx on bool_rp_true_1k bool_rp_1',), ('        Index Cond: (b = true)',), ('  ->  Index Only Scan using bool_rp_true_2k_b_a_idx on bool_rp_true_2k bool_rp_2',), ('        Index Cond: (b = true)',)]
+--------------------+
--Query--
explain (costs off) select * from bool_rp where b = false order by b,a
--Result--
[('Append',), ('  ->  Index Only Scan using bool_rp_false_1k_b_a_idx on bool_rp_false_1k bool_rp_1',), ('        Index Cond: (b = false)',), ('  ->  Index Only Scan using bool_rp_false_2k_b_a_idx on bool_rp_false_2k bool_rp_2',), ('        Index Cond: (b = false)',)]
+--------------------+
--Query--
explain (costs off) select * from bool_rp where b = true order by a
--Result--
[('Append',), ('  ->  Index Only Scan using bool_rp_true_1k_b_a_idx on bool_rp_true_1k bool_rp_1',), ('        Index Cond: (b = true)',), ('  ->  Index Only Scan using bool_rp_true_2k_b_a_idx on bool_rp_true_2k bool_rp_2',), ('        Index Cond: (b = true)',)]
+--------------------+
--Query--
explain (costs off) select * from bool_rp where b = false order by a
--Result--
[('Append',), ('  ->  Index Only Scan using bool_rp_false_1k_b_a_idx on bool_rp_false_1k bool_rp_1',), ('        Index Cond: (b = false)',), ('  ->  Index Only Scan using bool_rp_false_2k_b_a_idx on bool_rp_false_2k bool_rp_2',), ('        Index Cond: (b = false)',)]
+--------------------+
--Query--
explain (costs off) select * from range_parted order by a,b,c
--Result--
[('Append',), ('  ->  Index Only Scan using range_parted1_a_b_c_idx on range_parted1 range_parted_1',), ('  ->  Index Only Scan using range_parted2_a_b_c_idx on range_parted2 range_parted_2',)]
+--------------------+
--Query--
explain (costs off) select * from range_parted order by a desc,b desc,c desc
--Result--
[('Append',), ('  ->  Index Only Scan Backward using range_parted2_a_b_c_idx on range_parted2 range_parted_2',), ('  ->  Index Only Scan Backward using range_parted1_a_b_c_idx on range_parted1 range_parted_1',)]
+--------------------+
--Query--
analyze permtest_parent
--Result--
[]
+--------------------+
--Query--
explain (costs off)   select * from permtest_parent p1 inner join permtest_parent p2   on p1.a = p2.a and p1.c ~ 'a1$'
--Result--
[('Nested Loop',), ('  Join Filter: (p1.a = p2.a)',), ('  ->  Seq Scan on permtest_grandchild p1',), ("        Filter: (c ~ 'a1$'::text)",), ('  ->  Seq Scan on permtest_grandchild p2',)]
+--------------------+
--Query--
explain (costs off)   select * from permtest_parent p1 inner join permtest_parent p2   on p1.a = p2.a and left(p1.c, 3) ~ 'a1$'
--Result--
[('Nested Loop',), ('  Join Filter: (p1.a = p2.a)',), ('  ->  Seq Scan on permtest_grandchild p1',), ('        Filter: ("left"(c, 3) ~ \'a1$\'::text)',), ('  ->  Seq Scan on permtest_grandchild p2',)]
+--------------------+
--Query--
explain (costs off)   select p2.a, p1.c from permtest_parent p1 inner join permtest_parent p2   on p1.a = p2.a and p1.c ~ 'a1$'
--Result--
[('Nested Loop',), ('  Join Filter: (p1.a = p2.a)',), ('  ->  Seq Scan on permtest_grandchild p1',), ("        Filter: (c ~ 'a1$'::text)",), ('  ->  Seq Scan on permtest_grandchild p2',)]
+--------------------+
--Query--
explain (costs off)   select p2.a, p1.c from permtest_parent p1 inner join permtest_parent p2   on p1.a = p2.a and left(p1.c, 3) ~ 'a1$'
--Result--
[('Nested Loop',), ('  Join Filter: (p1.a = p2.a)',), ('  ->  Seq Scan on permtest_grandchild p1',), ('        Filter: ("left"(c, 3) ~ \'a1$\'::text)',), ('  ->  Seq Scan on permtest_grandchild p2',)]
+--------------------+
