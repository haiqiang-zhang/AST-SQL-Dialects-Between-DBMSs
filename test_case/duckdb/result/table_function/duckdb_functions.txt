--Query--
SELECT * FROM duckdb_functions()
--Result--
[('system', '0', 'main', 'arrow_scan', 'table', None, None, None, ['col0', 'col1', 'col2'], ['POINTER', 'POINTER', 'POINTER'], None, None, None, True, 94, None, None), ('system', '0', 'main', 'arrow_scan_dumb', 'table', None, None, None, ['col0', 'col1', 'col2'], ['POINTER', 'POINTER', 'POINTER'], None, None, None, True, 96, None, None), ('system', '0', 'main', 'checkpoint', 'table', None, None, None, [], [], None, None, None, True, 70, None, None), ('system', '0', 'main', 'checkpoint', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 70, None, None), ('system', '0', 'main', 'dbgen', 'table', None, None, None, ['step', 'children', 'schema', 'suffix', 'catalog', 'overwrite', 'sf'], ['UINTEGER', 'UINTEGER', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'DOUBLE'], None, None, None, True, 1085, None, None), ('system', '0', 'main', 'dsdgen', 'table', None, None, None, ['schema', 'suffix', 'catalog', 'keys', 'overwrite', 'sf'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'DOUBLE'], None, None, None, True, 1471, None, None), ('system', '0', 'main', 'duckdb_columns', 'table', None, None, None, [], [], None, None, None, True, 24, None, None), ('system', '0', 'main', 'duckdb_constraints', 'table', None, None, None, [], [], None, None, None, True, 26, None, None), ('system', '0', 'main', 'duckdb_databases', 'table', None, None, None, [], [], None, None, None, True, 28, None, None), ('system', '0', 'main', 'duckdb_dependencies', 'table', None, None, None, [], [], None, None, None, True, 38, None, None), ('system', '0', 'main', 'duckdb_extensions', 'table', None, None, None, [], [], None, None, None, True, 40, None, None), ('system', '0', 'main', 'duckdb_functions', 'table', None, None, None, [], [], None, None, None, True, 30, None, None), ('system', '0', 'main', 'duckdb_indexes', 'table', None, None, None, [], [], None, None, None, True, 34, None, None), ('system', '0', 'main', 'duckdb_keywords', 'table', None, None, None, [], [], None, None, None, True, 32, None, None), ('system', '0', 'main', 'duckdb_memory', 'table', None, None, None, [], [], None, None, None, True, 42, None, None), ('system', '0', 'main', 'duckdb_optimizers', 'table', None, None, None, [], [], None, None, None, True, 44, None, None), ('system', '0', 'main', 'duckdb_schemas', 'table', None, None, None, [], [], None, None, None, True, 36, None, None), ('system', '0', 'main', 'duckdb_secrets', 'table', None, None, None, ['redact'], ['BOOLEAN'], None, None, None, True, 46, None, None), ('system', '0', 'main', 'duckdb_sequences', 'table', None, None, None, [], [], None, None, None, True, 48, None, None), ('system', '0', 'main', 'duckdb_settings', 'table', None, None, None, [], [], None, None, None, True, 50, None, None), ('system', '0', 'main', 'duckdb_tables', 'table', None, None, None, [], [], None, None, None, True, 52, None, None), ('system', '0', 'main', 'duckdb_temporary_files', 'table', None, None, None, [], [], None, None, None, True, 54, None, None), ('system', '0', 'main', 'duckdb_types', 'table', None, None, None, [], [], None, None, None, True, 56, None, None), ('system', '0', 'main', 'duckdb_views', 'table', None, None, None, [], [], None, None, None, True, 58, None, None), ('system', '0', 'main', 'force_checkpoint', 'table', None, None, None, [], [], None, None, None, True, 72, None, None), ('system', '0', 'main', 'force_checkpoint', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 72, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1', 'col2'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'glob', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 74, None, None), ('system', '0', 'main', 'glob', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 74, None, None), ('system', '0', 'main', 'icu_calendar_names', 'table', None, None, None, [], [], None, None, None, True, 1453, None, None), ('system', '0', 'main', 'index_scan', 'table', None, None, None, [], [], None, None, None, True, 4, None, None), ('system', '0', 'main', 'json_execute_serialized_sql', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1159, None, None), ('system', '0', 'main', 'pandas_scan', 'table', None, None, None, ['col0'], ['POINTER'], None, None, None, True, 1482, None, None), ('system', '0', 'main', 'parquet_file_metadata', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1465, None, None), ('system', '0', 'main', 'parquet_file_metadata', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1465, None, None), ('system', '0', 'main', 'parquet_kv_metadata', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1463, None, None), ('system', '0', 'main', 'parquet_kv_metadata', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1463, None, None), ('system', '0', 'main', 'parquet_metadata', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1459, None, None), ('system', '0', 'main', 'parquet_metadata', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1459, None, None), ('system', '0', 'main', 'parquet_scan', 'table', None, None, None, ['col0', 'hive_types_autocast', 'union_by_name', 'filename', 'hive_types', 'hive_partitioning', 'encryption_config', 'compression', 'file_row_number', 'schema', 'binary_as_string'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN'], None, None, None, True, 1457, None, None), ('system', '0', 'main', 'parquet_scan', 'table', None, None, None, ['col0', 'binary_as_string', 'schema', 'file_row_number', 'compression', 'encryption_config', 'hive_partitioning', 'hive_types', 'filename', 'union_by_name', 'hive_types_autocast'], ['VARCHAR[]', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1457, None, None), ('system', '0', 'main', 'parquet_schema', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1461, None, None), ('system', '0', 'main', 'parquet_schema', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1461, None, None), ('system', '0', 'main', 'pg_timezone_names', 'table', None, None, None, [], [], None, None, None, True, 1447, None, None), ('system', '0', 'main', 'pragma_collations', 'table', None, None, None, [], [], None, None, None, True, 10, None, None), ('system', '0', 'main', 'pragma_database_size', 'table', None, None, None, [], [], None, None, None, True, 20, None, None), ('system', '0', 'main', 'pragma_metadata_info', 'table', None, None, None, [], [], None, None, None, True, 18, None, None), ('system', '0', 'main', 'pragma_metadata_info', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 18, None, None), ('system', '0', 'main', 'pragma_platform', 'table', None, None, None, [], [], None, None, None, True, 8, None, None), ('system', '0', 'main', 'pragma_show', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 14, None, None), ('system', '0', 'main', 'pragma_storage_info', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 16, None, None), ('system', '0', 'main', 'pragma_table_info', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 12, None, None), ('system', '0', 'main', 'pragma_user_agent', 'table', None, None, None, [], [], None, None, None, True, 22, None, None), ('system', '0', 'main', 'pragma_version', 'table', None, None, None, [], [], None, None, None, True, 6, None, None), ('system', '0', 'main', 'python_map_function', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TABLE', 'POINTER', 'POINTER'], None, None, None, True, 1484, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1', 'col2'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'unnest', 'table', None, None, None, ['col0'], ['TABLE'], None, None, None, True, 84, None, None), ('system', '0', 'main', 'tpch_queries', 'table', None, None, None, [], [], None, None, None, True, 1089, None, None), ('system', '0', 'main', 'tpch_answers', 'table', None, None, None, [], [], None, None, None, True, 1091, None, None), ('system', '0', 'main', 'tpcds_queries', 'table', None, None, None, [], [], None, None, None, True, 1475, None, None), ('system', '0', 'main', 'tpcds_answers', 'table', None, None, None, [], [], None, None, None, True, 1477, None, None), ('system', '0', 'main', 'test_vector_types', 'table', None, None, None, ['col0', 'all_flat'], ['ANY', 'BOOLEAN'], 'ANY', None, None, True, 62, None, None), ('system', '0', 'main', 'test_all_types', 'table', None, None, None, ['use_large_enum'], ['BOOLEAN'], None, None, None, True, 60, None, None), ('system', '0', 'main', 'summary', 'table', None, None, None, ['col0'], ['TABLE'], None, None, None, True, 82, None, None), ('system', '0', 'main', 'sniff_csv', 'table', None, None, None, ['col0', 'delim', 'dateformat', 'column_names', 'sep', 'hive_partitioning', 'header', 'escape', 'allow_quoted_nulls', 'maximum_line_size', 'new_line', 'columns', 'rejects_limit', 'force_not_null', 'timestampformat', 'auto_detect', 'sample_size', 'auto_type_candidates', 'nullstr', 'normalize_names', 'rejects_table', 'column_types', 'skip', 'types', 'max_line_size', 'quote', 'rejects_scan', 'ignore_errors', 'compression', 'names', 'store_rejects', 'all_varchar', 'buffer_size', 'decimal_separator', 'parallel', 'null_padding', 'dtypes', 'filename', 'union_by_name', 'hive_types', 'hive_types_autocast'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BIGINT', 'ANY', 'ANY', 'BOOLEAN', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'UBIGINT', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN'], None, None, None, True, 88, None, None), ('system', '0', 'main', 'seq_scan', 'table', None, None, None, [], [], None, None, None, True, 2, None, None), ('system', '0', 'main', 'repeat_row', 'table', None, None, None, ['num_rows'], ['BIGINT'], 'ANY', None, None, True, 86, None, None), ('system', '0', 'main', 'repeat', 'table', None, None, None, ['col0', 'col1'], ['ANY', 'BIGINT'], None, None, None, True, 80, None, None), ('system', '0', 'main', 'read_text', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 92, None, None), ('system', '0', 'main', 'read_text', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 92, None, None), ('system', '0', 'main', 'read_parquet', 'table', None, None, None, ['col0', 'hive_types_autocast', 'union_by_name', 'filename', 'hive_types', 'hive_partitioning', 'encryption_config', 'compression', 'file_row_number', 'schema', 'binary_as_string'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN'], None, None, None, True, 1455, None, None), ('system', '0', 'main', 'read_parquet', 'table', None, None, None, ['col0', 'binary_as_string', 'schema', 'file_row_number', 'compression', 'encryption_config', 'hive_partitioning', 'hive_types', 'filename', 'union_by_name', 'hive_types_autocast'], ['VARCHAR[]', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1455, None, None), ('system', '0', 'main', 'read_ndjson_objects', 'table', None, None, None, ['col0', 'format', 'ignore_errors', 'maximum_object_size', 'union_by_name', 'compression', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1147, None, None), ('system', '0', 'main', 'read_ndjson_objects', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'compression', 'union_by_name', 'maximum_object_size', 'ignore_errors', 'format'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR'], None, None, None, True, 1147, None, None), ('system', '0', 'main', 'read_ndjson_auto', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1157, None, None), ('system', '0', 'main', 'read_ndjson_auto', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1157, None, None), ('system', '0', 'main', 'read_ndjson', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1153, None, None), ('system', '0', 'main', 'read_ndjson', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1153, None, None), ('system', '0', 'main', 'read_json_objects_auto', 'table', None, None, None, ['col0', 'format', 'ignore_errors', 'maximum_object_size', 'union_by_name', 'compression', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1149, None, None), ('system', '0', 'main', 'read_json_objects_auto', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'compression', 'union_by_name', 'maximum_object_size', 'ignore_errors', 'format'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR'], None, None, None, True, 1149, None, None), ('system', '0', 'main', 'read_json_objects', 'table', None, None, None, ['col0', 'format', 'ignore_errors', 'maximum_object_size', 'union_by_name', 'compression', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1145, None, None), ('system', '0', 'main', 'read_json_objects', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'compression', 'union_by_name', 'maximum_object_size', 'ignore_errors', 'format'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR'], None, None, None, True, 1145, None, None), ('system', '0', 'main', 'read_json_auto', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1155, None, None), ('system', '0', 'main', 'read_json_auto', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1155, None, None), ('system', '0', 'main', 'read_json', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1151, None, None), ('system', '0', 'main', 'read_json', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1151, None, None), ('system', '0', 'main', 'read_csv_auto', 'table', None, None, None, ['col0', 'hive_types_autocast', 'hive_types', 'union_by_name', 'filename', 'dtypes', 'null_padding', 'parallel', 'decimal_separator', 'buffer_size', 'all_varchar', 'store_rejects', 'names', 'compression', 'ignore_errors', 'rejects_scan', 'quote', 'max_line_size', 'types', 'skip', 'column_types', 'rejects_table', 'normalize_names', 'nullstr', 'auto_type_candidates', 'sample_size', 'auto_detect', 'timestampformat', 'force_not_null', 'rejects_limit', 'columns', 'new_line', 'maximum_line_size', 'allow_quoted_nulls', 'escape', 'header', 'hive_partitioning', 'sep', 'column_names', 'dateformat', 'delim'], ['VARCHAR', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'UBIGINT', 'BOOLEAN', 'BOOLEAN', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'BOOLEAN', 'ANY', 'ANY', 'BIGINT', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'VARCHAR'], None, None, None, True, 68, None, None), ('system', '0', 'main', 'read_csv_auto', 'table', None, None, None, ['col0', 'delim', 'dateformat', 'column_names', 'sep', 'hive_partitioning', 'header', 'escape', 'allow_quoted_nulls', 'maximum_line_size', 'new_line', 'columns', 'rejects_limit', 'force_not_null', 'timestampformat', 'auto_detect', 'sample_size', 'auto_type_candidates', 'nullstr', 'normalize_names', 'rejects_table', 'column_types', 'skip', 'types', 'max_line_size', 'quote', 'rejects_scan', 'ignore_errors', 'compression', 'names', 'store_rejects', 'all_varchar', 'buffer_size', 'decimal_separator', 'parallel', 'null_padding', 'dtypes', 'filename', 'union_by_name', 'hive_types', 'hive_types_autocast'], ['VARCHAR[]', 'VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BIGINT', 'ANY', 'ANY', 'BOOLEAN', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'UBIGINT', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN'], None, None, None, True, 68, None, None), ('system', '0', 'main', 'read_csv', 'table', None, None, None, ['col0', 'hive_types_autocast', 'hive_types', 'union_by_name', 'filename', 'dtypes', 'null_padding', 'parallel', 'decimal_separator', 'buffer_size', 'all_varchar', 'store_rejects', 'names', 'compression', 'ignore_errors', 'rejects_scan', 'quote', 'max_line_size', 'types', 'skip', 'column_types', 'rejects_table', 'normalize_names', 'nullstr', 'auto_type_candidates', 'sample_size', 'auto_detect', 'timestampformat', 'force_not_null', 'rejects_limit', 'columns', 'new_line', 'maximum_line_size', 'allow_quoted_nulls', 'escape', 'header', 'hive_partitioning', 'sep', 'column_names', 'dateformat', 'delim'], ['VARCHAR', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'UBIGINT', 'BOOLEAN', 'BOOLEAN', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'BOOLEAN', 'ANY', 'ANY', 'BIGINT', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'VARCHAR'], None, None, None, True, 66, None, None), ('system', '0', 'main', 'read_csv', 'table', None, None, None, ['col0', 'delim', 'dateformat', 'column_names', 'sep', 'hive_partitioning', 'header', 'escape', 'allow_quoted_nulls', 'maximum_line_size', 'new_line', 'columns', 'rejects_limit', 'force_not_null', 'timestampformat', 'auto_detect', 'sample_size', 'auto_type_candidates', 'nullstr', 'normalize_names', 'rejects_table', 'column_types', 'skip', 'types', 'max_line_size', 'quote', 'rejects_scan', 'ignore_errors', 'compression', 'names', 'store_rejects', 'all_varchar', 'buffer_size', 'decimal_separator', 'parallel', 'null_padding', 'dtypes', 'filename', 'union_by_name', 'hive_types', 'hive_types_autocast'], ['VARCHAR[]', 'VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BIGINT', 'ANY', 'ANY', 'BOOLEAN', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'UBIGINT', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN'], None, None, None, True, 66, None, None), ('system', '0', 'main', 'read_blob', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 90, None, None), ('system', '0', 'main', 'read_blob', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 90, None, None), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['BLOB'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['BIGINT'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['UBIGINT'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['HUGEINT'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['UHUGEINT'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'jaro_winkler_similarity', 'scalar', 'The Jaro-Winkler similarity between two strings. Different case is considered different. Returns a number between 0 and 1', None, 'DOUBLE', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 692, "jaro_winkler_similarity('duck','duckdb')", 'CONSISTENT'), ('system', '0', 'main', 'to_decades', 'scalar', 'Construct a decade interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 992, 'to_decades(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_days', 'scalar', 'Construct a day interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 990, 'to_days(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_centuries', 'scalar', 'Construct a century interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 988, 'to_centuries(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['UBIGINT'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['BIGINT'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['HUGEINT'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['UHUGEINT'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_base64', 'scalar', 'Convert a blob to a base64 encoded string', None, 'VARCHAR', ['blob'], ['BLOB'], None, None, False, True, 984, "base64('A'::blob)", 'CONSISTENT'), ('system', '0', 'main', 'to_base', 'scalar', 'Converts a value to a string in the given base radix, optionally padding with leading zeros to the minimum length', None, 'VARCHAR', ['number', 'radix'], ['BIGINT', 'INTEGER'], None, None, False, True, 982, 'to_base(42, 16)', 'CONSISTENT'), ('system', '0', 'main', 'to_base', 'scalar', 'Converts a value to a string in the given base radix, optionally padding with leading zeros to the minimum length', None, 'VARCHAR', ['number', 'radix', 'min_length'], ['BIGINT', 'INTEGER', 'INTEGER'], None, None, False, True, 982, 'to_base(42, 16)', 'CONSISTENT'), ('system', '0', 'main', 'today', 'scalar', 'Returns the current date', None, 'DATE', [], [], None, None, False, True, 1016, 'current_date()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'DATE', ['bucket_width', 'timestamp'], ['INTERVAL', 'DATE'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP', ['bucket_width', 'timestamp'], ['INTERVAL', 'TIMESTAMP'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'DATE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'DATE', 'INTERVAL'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP', 'INTERVAL'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'DATE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'DATE', 'DATE'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP WITH TIME ZONE', ['bucket_width', 'timestamp'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP WITH TIME ZONE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP WITH TIME ZONE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP WITH TIME ZONE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_minute', 'scalar', 'Extract the timezone_minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 980, "timezone_minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_minute', 'scalar', 'Extract the timezone_minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 980, "timezone_minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_minute', 'scalar', 'Extract the timezone_minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 980, "timezone_minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_minute', 'scalar', 'Extract the timezone_minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 980, "timezone_minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_hour', 'scalar', 'Extract the timezone_hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 978, "timezone_hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_hour', 'scalar', 'Extract the timezone_hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 978, "timezone_hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_hour', 'scalar', 'Extract the timezone_hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 978, "timezone_hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_hour', 'scalar', 'Extract the timezone_hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 978, "timezone_hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'TIME WITH TIME ZONE', ['ts', 'col1'], ['INTERVAL', 'TIME WITH TIME ZONE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'TIMESTAMP WITH TIME ZONE', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'TIMESTAMP', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'TIME WITH TIME ZONE', ['ts', 'col1'], ['VARCHAR', 'TIME WITH TIME ZONE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'tan', 'scalar', 'Computes the tan of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 972, 'tan(90)', 'CONSISTENT'), ('system', '0', 'main', 'suffix', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 246, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TINYINT', ['col0'], ['TINYINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'SMALLINT', ['col0'], ['SMALLINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTEGER', ['col0'], ['INTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'BIGINT', ['col0'], ['BIGINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'HUGEINT', ['col0'], ['HUGEINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'FLOAT', ['col0'], ['FLOAT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DOUBLE', ['col0'], ['DOUBLE'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UTINYINT', ['col0'], ['UTINYINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'USMALLINT', ['col0'], ['USMALLINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UINTEGER', ['col0'], ['UINTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UBIGINT', ['col0'], ['UBIGINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UHUGEINT', ['col0'], ['UHUGEINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['DATE', 'DATE'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['DATE', 'INTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['TIME', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIMESTAMP', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTERVAL', ['col0'], ['INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'substring_grapheme', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'BIGINT', 'BIGINT'], None, None, False, True, 242, None, 'CONSISTENT'), ('system', '0', 'main', 'substring_grapheme', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 242, None, 'CONSISTENT'), ('system', '0', 'main', 'substring', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'BIGINT', 'BIGINT'], None, None, False, True, 238, None, 'CONSISTENT'), ('system', '0', 'main', 'substring', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 238, None, 'CONSISTENT'), ('system', '0', 'main', 'substr', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'BIGINT', 'BIGINT'], None, None, False, True, 240, None, 'CONSISTENT'), ('system', '0', 'main', 'substr', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 240, None, 'CONSISTENT'), ('system', '0', 'main', 'str_split_regex', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 946, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'str_split_regex', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 946, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'str_split', 'scalar', 'Splits the string along the separator', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 944, "string_split('hello-world', '-')", 'CONSISTENT'), ('system', '0', 'main', 'struct_pack', 'scalar', 'Creates a STRUCT containing the argument values. The entry name will be the bound variable name', None, 'STRUCT', [], [], 'ANY', None, False, True, 964, "struct_pack(i := 4, s := 'string')", 'CONSISTENT'), ('system', '0', 'main', 'struct_insert', 'scalar', 'Adds field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s)', None, 'STRUCT', [], [], 'ANY', None, False, True, 962, "struct_insert({'a': 1}, b := 2)", 'CONSISTENT'), ('system', '0', 'main', 'struct_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['STRUCT', 'VARCHAR'], None, None, False, True, 252, None, 'CONSISTENT'), ('system', '0', 'main', 'struct_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['STRUCT', 'BIGINT'], None, None, False, True, 252, None, 'CONSISTENT'), ('system', '0', 'main', 'strptime', 'scalar', 'Converts string to timestamp with time zone according to the format string if %Z is specified', None, 'TIMESTAMP', ['text', 'format'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 960, "strptime('Wed, 1 January 1992 - 08:38:40 PST', '%a, %-d %B %Y - %H:%M:%S %Z')", 'CONSISTENT'), ('system', '0', 'main', 'strptime', 'scalar', 'Converts string to timestamp with time zone according to the format string if %Z is specified', None, 'TIMESTAMP', ['text', 'format'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 960, "strptime('Wed, 1 January 1992 - 08:38:40 PST', '%a, %-d %B %Y - %H:%M:%S %Z')", 'CONSISTENT'), ('system', '0', 'main', 'strpos', 'scalar', 'Returns location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found', None, 'BIGINT', ['haystack', 'needle'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 958, "instr('test test','es')", 'CONSISTENT'), ('system', '0', 'main', 'strlen', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 204, None, 'CONSISTENT'), ('system', '0', 'main', 'strip_accents', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 186, None, 'CONSISTENT'), ('system', '0', 'main', 'string_to_array', 'scalar', 'Splits the string along the separator', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 956, "string_split('hello-world', '-')", 'CONSISTENT'), ('system', '0', 'main', 'string_split_regex', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 954, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'string_split_regex', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 954, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'string_split', 'scalar', 'Splits the string along the separator', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 952, "string_split('hello-world', '-')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['DATE', 'VARCHAR'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['VARCHAR', 'DATE'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'stats', 'scalar', 'Returns a string with statistics about the expression. Expression can be a column, constant, or SQL expression', None, 'VARCHAR', ['expression'], ['ANY'], None, None, True, True, 936, 'stats(5)', 'VOLATILE'), ('system', '0', 'main', 'starts_with', 'scalar', 'Returns true if string begins with search_string', None, 'BOOLEAN', ['string', 'search_string'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 934, "starts_with('abc','a')", 'CONSISTENT'), ('system', '0', 'main', 'sqrt', 'scalar', 'Returns the square root of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 932, 'sqrt(4)', 'CONSISTENT'), ('system', '0', 'main', 'to_hours', 'scalar', 'Construct a hour interval', None, 'INTERVAL', ['integer'], ['BIGINT'], None, None, False, True, 996, 'to_hours(5)', 'CONSISTENT'), ('system', '0', 'main', 'split', 'scalar', 'Splits the string along the separator', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 930, "string_split('hello-world', '-')", 'CONSISTENT'), ('system', '0', 'main', 'sin', 'scalar', 'Computes the sin of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 926, 'sin(90)', 'CONSISTENT'), ('system', '0', 'main', 'signbit', 'scalar', 'Returns whether the signbit is set or not', None, 'BOOLEAN', ['x'], ['FLOAT'], None, None, False, True, 924, 'signbit(-0.0)', 'CONSISTENT'), ('system', '0', 'main', 'signbit', 'scalar', 'Returns whether the signbit is set or not', None, 'BOOLEAN', ['x'], ['DOUBLE'], None, None, False, True, 924, 'signbit(-0.0)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['SMALLINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['INTEGER'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['BIGINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['HUGEINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['FLOAT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['DOUBLE'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['UTINYINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['USMALLINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['UINTEGER'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['UBIGINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['UHUGEINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sha256', 'scalar', 'Returns the SHA256 hash of the value', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 920, "sha256('hello')", 'CONSISTENT'), ('system', '0', 'main', 'set_bit', 'scalar', 'Sets the nth bit in bitstring to newvalue; the first (leftmost) bit is indexed 0. Returns a new bitstring', None, 'BIT', ['bitstring', 'index', 'new_value'], ['BIT', 'INTEGER', 'INTEGER'], None, None, False, True, 916, "set_bit('0110010'::BIT, 2, 0)", 'CONSISTENT'), ('system', '0', 'main', '!__postfix', 'scalar', 'Factorial of x. Computes the product of the current integer and all integers below it', None, 'HUGEINT', ['x'], ['INTEGER'], None, None, False, True, 390, '4!', 'CONSISTENT'), ('system', '0', 'main', '!~~', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 212, None, 'CONSISTENT'), ('system', '0', 'main', '!~~*', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 218, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'TINYINT', ['left', 'right'], ['TINYINT', 'TINYINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'SMALLINT', ['left', 'right'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'INTEGER', ['left', 'right'], ['INTEGER', 'INTEGER'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'BIGINT', ['left', 'right'], ['BIGINT', 'BIGINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'HUGEINT', ['left', 'right'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'UTINYINT', ['left', 'right'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'USMALLINT', ['left', 'right'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'UINTEGER', ['left', 'right'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'UBIGINT', ['left', 'right'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'UHUGEINT', ['left', 'right'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'BIT', ['left', 'right'], ['BIT', 'BIT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', 'setseed', 'scalar', 'Sets the seed to be used for the random function', None, 'NULL', [''], ['DOUBLE'], None, None, True, True, 918, 'setseed(0.42)', 'VOLATILE'), ('system', '0', 'main', '*', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'BIGINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['BIGINT', 'INTERVAL'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '**', 'scalar', 'Computes x to the power of y', None, 'DOUBLE', ['x', 'y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 394, 'pow(2, 3)', 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TINYINT', ['col0'], ['TINYINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'SMALLINT', ['col0'], ['SMALLINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'INTEGER', ['col0'], ['INTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'BIGINT', ['col0'], ['BIGINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'HUGEINT', ['col0'], ['HUGEINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'FLOAT', ['col0'], ['FLOAT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DOUBLE', ['col0'], ['DOUBLE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UTINYINT', ['col0'], ['UTINYINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'USMALLINT', ['col0'], ['USMALLINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UINTEGER', ['col0'], ['UINTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UBIGINT', ['col0'], ['UBIGINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UHUGEINT', ['col0'], ['UHUGEINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['DATE', 'INTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['INTEGER', 'DATE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['INTERVAL', 'DATE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['TIME', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['INTERVAL', 'TIME'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIMESTAMP', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['INTERVAL', 'TIMESTAMP'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['INTERVAL', 'TIME WITH TIME ZONE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIME', 'DATE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'TIME'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'DATE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['DATE', 'TIME WITH TIME ZONE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TINYINT', ['col0'], ['TINYINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'SMALLINT', ['col0'], ['SMALLINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTEGER', ['col0'], ['INTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'BIGINT', ['col0'], ['BIGINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'HUGEINT', ['col0'], ['HUGEINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'FLOAT', ['col0'], ['FLOAT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DOUBLE', ['col0'], ['DOUBLE'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UTINYINT', ['col0'], ['UTINYINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'USMALLINT', ['col0'], ['USMALLINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UINTEGER', ['col0'], ['UINTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UBIGINT', ['col0'], ['UBIGINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UHUGEINT', ['col0'], ['UHUGEINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['DATE', 'DATE'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['DATE', 'INTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['TIME', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIMESTAMP', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTERVAL', ['col0'], ['INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '/', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 164, None, 'CONSISTENT'), ('system', '0', 'main', '/', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 164, None, 'CONSISTENT'), ('system', '0', 'main', '/', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'BIGINT'], None, None, False, True, 164, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '<#>', 'scalar', 'Compute the inner product between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 396, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<#>', 'scalar', 'Compute the inner product between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 396, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<->', 'scalar', 'Compute the distance between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 398, 'list_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<->', 'scalar', 'Compute the distance between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 398, 'list_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'TINYINT', ['input', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'SMALLINT', ['input', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'INTEGER', ['input', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'BIGINT', ['input', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'HUGEINT', ['input', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'UTINYINT', ['input', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'USMALLINT', ['input', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'UINTEGER', ['input', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'UBIGINT', ['input', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'UHUGEINT', ['input', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'BIT', ['input', 'col1'], ['BIT', 'INTEGER'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<=>', 'scalar', 'Compute the cosine similarity between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 402, 'list_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<=>', 'scalar', 'Compute the cosine similarity between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 402, 'list_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'to_json', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1109, None, 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'TINYINT', ['input', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'SMALLINT', ['input', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'INTEGER', ['input', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'BIGINT', ['input', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'HUGEINT', ['input', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'UTINYINT', ['input', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'USMALLINT', ['input', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'UINTEGER', ['input', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'UBIGINT', ['input', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'UHUGEINT', ['input', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'BIT', ['input', 'col1'], ['BIT', 'INTEGER'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'SMALLINT', ['x'], ['SMALLINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'INTEGER', ['x'], ['INTEGER'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'HUGEINT', ['x'], ['HUGEINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'UTINYINT', ['x'], ['UTINYINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'USMALLINT', ['x'], ['USMALLINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'UINTEGER', ['x'], ['UINTEGER'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'UBIGINT', ['x'], ['UBIGINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'UHUGEINT', ['x'], ['UHUGEINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'SMALLINT', ['x'], ['SMALLINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'INTEGER', ['x'], ['INTEGER'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'HUGEINT', ['x'], ['HUGEINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'UTINYINT', ['x'], ['UTINYINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'USMALLINT', ['x'], ['USMALLINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'UINTEGER', ['x'], ['UINTEGER'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'UBIGINT', ['x'], ['UBIGINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'UHUGEINT', ['x'], ['UHUGEINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'acos', 'scalar', 'Computes the arccosine of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 414, 'acos(0.5)', 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TINYINT', ['col0'], ['TINYINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'SMALLINT', ['col0'], ['SMALLINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'INTEGER', ['col0'], ['INTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'BIGINT', ['col0'], ['BIGINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'HUGEINT', ['col0'], ['HUGEINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'FLOAT', ['col0'], ['FLOAT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DOUBLE', ['col0'], ['DOUBLE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UTINYINT', ['col0'], ['UTINYINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'USMALLINT', ['col0'], ['USMALLINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UINTEGER', ['col0'], ['UINTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UBIGINT', ['col0'], ['UBIGINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UHUGEINT', ['col0'], ['UHUGEINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['DATE', 'INTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['INTEGER', 'DATE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['INTERVAL', 'DATE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['TIME', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['INTERVAL', 'TIME'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIMESTAMP', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['INTERVAL', 'TIMESTAMP'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['INTERVAL', 'TIME WITH TIME ZONE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIME', 'DATE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'TIME'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'DATE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['DATE', 'TIME WITH TIME ZONE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'age', 'scalar', 'Subtract arguments, resulting in the time difference between the two timestamps', None, 'INTERVAL', ['timestamp'], ['TIMESTAMP'], None, None, False, True, 416, "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'age', 'scalar', 'Subtract arguments, resulting in the time difference between the two timestamps', None, 'INTERVAL', ['timestamp', 'timestamp'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 416, "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'age', 'scalar', 'Subtract arguments, resulting in the time difference between the two timestamps', None, 'INTERVAL', ['timestamp', 'timestamp'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 416, "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'age', 'scalar', 'Subtract arguments, resulting in the time difference between the two timestamps', None, 'INTERVAL', ['timestamp'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 416, "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'aggregate', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 418, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', 'alias', 'scalar', 'Returns the name of a given expression', None, 'VARCHAR', ['expr'], ['ANY'], None, None, False, True, 420, 'alias(42 + 1)', 'CONSISTENT'), ('system', '0', 'main', 'rtrim', 'scalar', 'Removes any occurrences of any of the characters from the right side of the string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 910, "rtrim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'rtrim', 'scalar', 'Removes any occurrences of any of the characters from the right side of the string', None, 'VARCHAR', ['string', 'characters'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 910, "rtrim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'apply', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 422, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'rpad', 'scalar', 'Pads the string with the character from the right until it has count characters', None, 'VARCHAR', ['string', 'count', 'character'], ['VARCHAR', 'INTEGER', 'VARCHAR'], None, None, False, True, 908, "rpad('hello', 10, '<')", 'CONSISTENT'), ('system', '0', 'main', 'row_to_json', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1115, None, 'CONSISTENT'), ('system', '0', 'main', 'row', 'scalar', 'Creates an unnamed STRUCT containing the argument values.', None, 'STRUCT', [], [], 'ANY', None, False, True, 906, "row(4, 'hello')", 'CONSISTENT'), ('system', '0', 'main', 'to_microseconds', 'scalar', 'Construct a microsecond interval', None, 'INTERVAL', ['integer'], ['BIGINT'], None, None, False, True, 998, 'to_microseconds(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_millennia', 'scalar', 'Construct a millenium interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 1000, 'to_millennia(1)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'FLOAT', ['x', 'precision'], ['FLOAT', 'INTEGER'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'DOUBLE', ['x', 'precision'], ['DOUBLE', 'INTEGER'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'DECIMAL', ['x', 'precision'], ['DECIMAL', 'INTEGER'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'right_grapheme', 'scalar', 'Extract the right-most count grapheme clusters', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 902, "right_grapheme('🤦🏼\u200d♂️🤦🏽\u200d♀️', 1)", 'CONSISTENT'), ('system', '0', 'main', 'right', 'scalar', 'Extract the right-most count characters', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 900, "right('Hello🦆', 3)", 'CONSISTENT'), ('system', '0', 'main', 'reverse', 'scalar', 'Reverses the string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 898, "reverse('hello')", 'CONSISTENT'), ('system', '0', 'main', 'replace', 'scalar', 'Replaces any occurrences of the source with target in string', None, 'VARCHAR', ['string', 'source', 'target'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 894, "replace('hello', 'l', '-')", 'CONSISTENT'), ('system', '0', 'main', 'array_aggr', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 442, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', 'array_aggregate', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 444, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', 'repeat', 'scalar', 'Repeats the string count number of times', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 892, "repeat('A', 5)", 'CONSISTENT'), ('system', '0', 'main', 'repeat', 'scalar', 'Repeats the string count number of times', None, 'BLOB', ['string', 'count'], ['BLOB', 'BIGINT'], None, None, False, True, 892, "repeat('A', 5)", 'CONSISTENT'), ('system', '0', 'main', 'array_apply', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 446, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'array_cat', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 260, None, 'CONSISTENT'), ('system', '0', 'main', 'array_concat', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 258, None, 'CONSISTENT'), ('system', '0', 'main', 'array_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 264, None, 'CONSISTENT'), ('system', '0', 'main', 'array_cosine_similarity', 'scalar', 'Compute the cosine similarity between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'FLOAT', ['array1', 'array2'], ['FLOAT[ANY]', 'FLOAT[ANY]'], None, None, False, True, 448, 'array_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_cosine_similarity', 'scalar', 'Compute the cosine similarity between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'DOUBLE', ['array1', 'array2'], ['DOUBLE[ANY]', 'DOUBLE[ANY]'], None, None, False, True, 448, 'array_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_cross_product', 'scalar', 'Compute the cross product of two arrays of size 3. The array elements can not be NULL.', None, 'DOUBLE[3]', ['array', ' array'], ['DOUBLE[3]', 'DOUBLE[3]'], None, None, False, True, 450, 'array_cross_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_cross_product', 'scalar', 'Compute the cross product of two arrays of size 3. The array elements can not be NULL.', None, 'FLOAT[3]', ['array', ' array'], ['FLOAT[3]', 'FLOAT[3]'], None, None, False, True, 450, 'array_cross_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_distance', 'scalar', 'Compute the distance between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'FLOAT', ['array1', 'array2'], ['FLOAT[ANY]', 'FLOAT[ANY]'], None, None, False, True, 452, 'array_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_distance', 'scalar', 'Compute the distance between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'DOUBLE', ['array1', 'array2'], ['DOUBLE[ANY]', 'DOUBLE[ANY]'], None, None, False, True, 452, 'array_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_distinct', 'scalar', 'Removes all duplicates and NULLs from a list. Does not preserve the original order', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 454, 'list_distinct([1, 1, NULL, -3, 1, 5])', 'CONSISTENT'), ('system', '0', 'main', 'array_dot_product', 'scalar', 'Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'FLOAT', ['array1', 'array2'], ['FLOAT[ANY]', 'FLOAT[ANY]'], None, None, False, True, 456, 'array_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_dot_product', 'scalar', 'Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'DOUBLE', ['array1', 'array2'], ['DOUBLE[ANY]', 'DOUBLE[ANY]'], None, None, False, True, 456, 'array_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['ANY[]', 'BIGINT'], None, None, False, True, 282, None, 'CONSISTENT'), ('system', '0', 'main', 'array_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 282, None, 'CONSISTENT'), ('system', '0', 'main', 'array_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['STRUCT', 'VARCHAR'], None, None, False, True, 282, None, 'CONSISTENT'), ('system', '0', 'main', 'array_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['STRUCT', 'BIGINT'], None, None, False, True, 282, None, 'CONSISTENT'), ('system', '0', 'main', 'array_filter', 'scalar', 'Constructs a list from those elements of the input list for which the lambda function returns true', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 458, 'list_filter([3, 4, 5], x -> x > 4)', 'CONSISTENT'), ('system', '0', 'main', 'array_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 460, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 460, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 460, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_has', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 268, None, 'CONSISTENT'), ('system', '0', 'main', 'from_binary', 'scalar', 'Converts a value from binary representation to a blob', None, 'BLOB', ['value'], ['VARCHAR'], None, None, False, True, 636, "unbin('0110')", 'CONSISTENT'), ('system', '0', 'main', '~~~', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 214, None, 'CONSISTENT'), ('system', '0', 'main', 'array_indexof', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 276, None, 'CONSISTENT'), ('system', '0', 'main', 'array_inner_product', 'scalar', 'Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'FLOAT', ['array1', 'array2'], ['FLOAT[ANY]', 'FLOAT[ANY]'], None, None, False, True, 462, 'array_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_inner_product', 'scalar', 'Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'DOUBLE', ['array1', 'array2'], ['DOUBLE[ANY]', 'DOUBLE[ANY]'], None, None, False, True, 462, 'array_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '~~*', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 216, None, 'CONSISTENT'), ('system', '0', 'main', 'array_length', 'scalar', None, None, 'BIGINT', ['col0'], ['ANY[]'], None, None, False, True, 202, None, 'CONSISTENT'), ('system', '0', 'main', 'array_length', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['ANY[]', 'BIGINT'], None, None, False, True, 202, None, 'CONSISTENT'), ('system', '0', 'main', '~~', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 210, None, 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'TINYINT', ['input'], ['TINYINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'SMALLINT', ['input'], ['SMALLINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'INTEGER', ['input'], ['INTEGER'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'BIGINT', ['input'], ['BIGINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'HUGEINT', ['input'], ['HUGEINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'UTINYINT', ['input'], ['UTINYINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'USMALLINT', ['input'], ['USMALLINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'UINTEGER', ['input'], ['UINTEGER'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'UBIGINT', ['input'], ['UBIGINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'UHUGEINT', ['input'], ['UHUGEINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'BIT', ['input'], ['BIT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', 'array_position', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 274, None, 'CONSISTENT'), ('system', '0', 'main', '||', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['ANY', 'ANY'], None, None, False, True, 190, None, 'CONSISTENT'), ('system', '0', 'main', '||', 'scalar', None, None, 'BLOB', ['col0', 'col1'], ['BLOB', 'BLOB'], None, None, False, True, 190, None, 'CONSISTENT'), ('system', '0', 'main', '||', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 190, None, 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'TINYINT', ['left', 'right'], ['TINYINT', 'TINYINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'SMALLINT', ['left', 'right'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'INTEGER', ['left', 'right'], ['INTEGER', 'INTEGER'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'BIGINT', ['left', 'right'], ['BIGINT', 'BIGINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'HUGEINT', ['left', 'right'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'UTINYINT', ['left', 'right'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'USMALLINT', ['left', 'right'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'UINTEGER', ['left', 'right'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'UBIGINT', ['left', 'right'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'UHUGEINT', ['left', 'right'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'BIT', ['left', 'right'], ['BIT', 'BIT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['UTINYINT'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['USMALLINT'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['UINTEGER'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['UBIGINT'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['HUGEINT'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', 'array_reduce', 'scalar', 'Returns a single value that is the result of applying the lambda function to each element of the input list, starting with the first element and then repeatedly applying the lambda function to the result of the previous application and the next element of the list.', None, 'ANY', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 464, 'list_reduce([1, 2, 3], (x, y) -> x + y)', 'CONSISTENT'), ('system', '0', 'main', 'array_resize', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 286, None, 'CONSISTENT'), ('system', '0', 'main', 'array_resize', 'scalar', None, None, 'ANY[]', ['col0', 'col1', 'col2'], ['ANY[]', 'ANY', 'ANY'], None, None, False, True, 286, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['UTINYINT', 'USMALLINT'], None, None, False, True, 126, None, 'CONSISTENT'), ('system', '0', 'main', 'array_reverse_sort', 'scalar', 'Sorts the elements of the list in reverse order', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 466, 'list_reverse_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_reverse_sort', 'scalar', 'Sorts the elements of the list in reverse order', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 466, 'list_reverse_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_select', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'BIGINT[]'], None, None, False, True, 294, None, 'CONSISTENT'), ('system', '0', 'main', 'array_slice', 'scalar', 'Extract a sublist using slice conventions. Negative values are accepted', None, 'ANY', ['list', 'begin', 'end['], ['ANY', 'ANY', 'ANY'], None, None, False, True, 468, 'list_slice(l, 2, 4)', 'CONSISTENT'), ('system', '0', 'main', 'array_slice', 'scalar', 'Extract a sublist using slice conventions. Negative values are accepted', None, 'ANY', ['list', 'begin', 'end[', 'step]'], ['ANY', 'ANY', 'ANY', 'BIGINT'], None, None, False, True, 468, 'list_slice(l, 2, 4)', 'CONSISTENT'), ('system', '0', 'main', 'array_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 470, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 470, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 470, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_to_json', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1113, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UTINYINT', 'UINTEGER'], None, None, False, True, 128, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['USMALLINT', 'UINTEGER'], None, None, False, True, 128, None, 'CONSISTENT'), ('system', '0', 'main', 'array_transform', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 472, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'array_unique', 'scalar', 'Counts the unique elements of a list', None, 'UBIGINT', ['list'], ['ANY[]'], None, None, False, True, 474, 'list_unique([1, 1, NULL, -3, 1, 5])', 'CONSISTENT'), ('system', '0', 'main', 'array_value', 'scalar', 'Create an ARRAY containing the argument values.', None, 'ARRAY', [], [], 'ANY', None, False, True, 476, 'array_value(4, 5, 6)', 'CONSISTENT'), ('system', '0', 'main', 'array_where', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'BOOLEAN[]'], None, None, False, True, 298, None, 'CONSISTENT'), ('system', '0', 'main', 'array_zip', 'scalar', None, None, 'STRUCT[]', [], [], 'ANY', None, False, True, 290, None, 'CONSISTENT'), ('system', '0', 'main', 'ascii', 'scalar', 'Returns an integer that represents the Unicode code point of the first character of the string', None, 'INTEGER', ['string'], ['VARCHAR'], None, None, False, True, 478, "ascii('Ω')", 'CONSISTENT'), ('system', '0', 'main', 'asin', 'scalar', 'Computes the arcsine of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 480, 'asin(0.5)', 'CONSISTENT'), ('system', '0', 'main', 'atan', 'scalar', 'Computes the arctangent of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 482, 'atan(0.5)', 'CONSISTENT'), ('system', '0', 'main', 'atan2', 'scalar', 'Computes the arctangent (y, x)', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 484, 'atan2(1.0, 0.0)', 'CONSISTENT'), ('system', '0', 'main', 'to_milliseconds', 'scalar', 'Construct a millisecond interval', None, 'INTERVAL', ['double'], ['DOUBLE'], None, None, False, True, 1002, 'to_milliseconds(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'bar', 'scalar', 'Draws a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80', None, 'VARCHAR', ['x', 'min', 'max', 'width'], ['DOUBLE', 'DOUBLE', 'DOUBLE', 'DOUBLE'], None, None, False, True, 488, 'bar(5, 0, 20, 10)', 'CONSISTENT'), ('system', '0', 'main', 'bar', 'scalar', 'Draws a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80', None, 'VARCHAR', ['x', 'min', 'max'], ['DOUBLE', 'DOUBLE', 'DOUBLE'], None, None, False, True, 488, 'bar(5, 0, 20, 10)', 'CONSISTENT'), ('system', '0', 'main', 'base64', 'scalar', 'Convert a blob to a base64 encoded string', None, 'VARCHAR', ['blob'], ['BLOB'], None, None, False, True, 490, "base64('A'::blob)", 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['UBIGINT'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['BIGINT'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['HUGEINT'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['UHUGEINT'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring', 'scalar', 'Pads the bitstring until the specified length', None, 'BIT', ['bitstring', 'length'], ['VARCHAR', 'INTEGER'], None, None, False, True, 504, "bitstring('1010'::BIT, 7)", 'CONSISTENT'), ('system', '0', 'main', 'regexp_split_to_array', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 872, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'regexp_split_to_array', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 872, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'regexp_replace', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 232, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_replace', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 232, None, 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['SMALLINT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['INTEGER'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['BIGINT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['HUGEINT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'BIGINT', ['x'], ['BIT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_length', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 206, None, 'CONSISTENT'), ('system', '0', 'main', 'bit_length', 'scalar', None, None, 'BIGINT', ['col0'], ['BIT'], None, None, False, True, 206, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_matches', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 230, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_matches', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 230, None, 'CONSISTENT'), ('system', '0', 'main', 'bit_position', 'scalar', 'Returns first starting index of the specified substring within bits, or zero if it is not present. The first (leftmost) bit is indexed 1', None, 'INTEGER', ['substring', 'bitstring'], ['BIT', 'BIT'], None, None, False, True, 500, "bit_position('010'::BIT, '1110101'::BIT)", 'CONSISTENT'), ('system', '0', 'main', 'regexp_full_match', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 228, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_full_match', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 228, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract_all', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 236, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract_all', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'INTEGER'], None, None, False, True, 236, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract_all', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'VARCHAR', 'INTEGER', 'VARCHAR'], None, None, False, True, 236, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'INTEGER'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'VARCHAR', 'INTEGER', 'VARCHAR'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR[]'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'cardinality', 'scalar', 'Returns the size of the map (or the number of entries in the map)', None, 'UBIGINT', ['map'], ['ANY'], 'ANY', None, False, True, 512, "cardinality( map([4, 2], ['a', 'b']) );", 'CONSISTENT'), ('system', '0', 'main', 'cbrt', 'scalar', 'Returns the cube root of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 514, 'cbrt(8)', 'CONSISTENT'), ('system', '0', 'main', 'ceil', 'scalar', 'Rounds the number up', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 516, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceil', 'scalar', 'Rounds the number up', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 516, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceil', 'scalar', 'Rounds the number up', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 516, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceiling', 'scalar', 'Rounds the number up', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 518, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceiling', 'scalar', 'Rounds the number up', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 518, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceiling', 'scalar', 'Rounds the number up', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 518, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'century', 'scalar', 'Extract the century component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 520, "century(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'century', 'scalar', 'Extract the century component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 520, "century(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'century', 'scalar', 'Extract the century component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 520, "century(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'century', 'scalar', 'Extract the century component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 520, "century(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'chr', 'scalar', 'Returns a character which is corresponding the ASCII code value or Unicode code point', None, 'VARCHAR', ['code_point'], ['INTEGER'], None, None, False, True, 522, 'chr(65)', 'CONSISTENT'), ('system', '0', 'main', 'combine', 'scalar', None, None, 'AGGREGATE_STATE<?>', ['col0', 'col1'], ['AGGREGATE_STATE<?>', 'ANY'], None, None, False, True, 148, None, 'CONSISTENT'), ('system', '0', 'main', 'concat', 'scalar', None, None, 'VARCHAR', ['col0'], ['ANY'], 'ANY', None, False, True, 188, None, 'CONSISTENT'), ('system', '0', 'main', 'concat_ws', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'ANY'], 'ANY', None, False, True, 192, None, 'CONSISTENT'), ('system', '0', 'main', 'constant_or_null', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['ANY', 'ANY'], 'ANY', None, False, True, 146, None, 'CONSISTENT'), ('system', '0', 'main', 'contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 194, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_escape', 'scalar', 'Escapes all potentially meaningful regexp characters in the input string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 870, "regexp_escape('https://duckdb.org')", 'CONSISTENT'), ('system', '0', 'main', 'cos', 'scalar', 'Computes the cos of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 526, 'cos(90)', 'CONSISTENT'), ('system', '0', 'main', 'cot', 'scalar', 'Computes the cotangent of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 528, 'cot(0.5)', 'CONSISTENT'), ('system', '0', 'main', 'reduce', 'scalar', 'Returns a single value that is the result of applying the lambda function to each element of the input list, starting with the first element and then repeatedly applying the lambda function to the result of the previous application and the next element of the list.', None, 'ANY', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 868, 'list_reduce([1, 2, 3], (x, y) -> x + y)', 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uhugeint', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UTINYINT', 'UHUGEINT'], None, None, False, True, 132, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uhugeint', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['USMALLINT', 'UHUGEINT'], None, None, False, True, 132, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uhugeint', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UINTEGER', 'UHUGEINT'], None, None, False, True, 132, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uhugeint', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UBIGINT', 'UHUGEINT'], None, None, False, True, 132, None, 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'BIGINT[]', ['start'], ['BIGINT'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'BIGINT[]', ['start', 'stop'], ['BIGINT', 'BIGINT'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'BIGINT[]', ['start', 'stop', 'step'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'TIMESTAMP[]', ['start', 'stop', 'step'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'TIMESTAMP WITH TIME ZONE[]', ['start', 'stop', 'step'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'random', 'scalar', 'Returns a random number between 0 and 1', None, 'DOUBLE', [], [], None, None, True, True, 864, 'random()', 'VOLATILE'), ('system', '0', 'main', 'radians', 'scalar', 'Converts degrees to radians', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 862, 'radians(90)', 'CONSISTENT'), ('system', '0', 'main', 'create_sort_key', 'scalar', 'Constructs a binary-comparable sort key based on a set of input parameters and sort qualifiers', None, 'BLOB', ['parameters...'], ['ANY'], 'ANY', None, False, True, 534, "create_sort_key('A', 'DESC')", 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UTINYINT', 'UBIGINT'], None, None, False, True, 130, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['USMALLINT', 'UBIGINT'], None, None, False, True, 130, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UINTEGER', 'UBIGINT'], None, None, False, True, 130, None, 'CONSISTENT'), ('system', '0', 'main', 'current_database', 'scalar', 'Returns the name of the currently active database', None, 'VARCHAR', [], [], None, None, False, True, 536, 'current_database()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'current_date', 'scalar', 'Returns the current date', None, 'DATE', [], [], None, None, False, True, 538, 'current_date()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'current_localtime', 'scalar', None, None, 'TIME', [], [], None, None, False, True, 1451, None, 'CONSISTENT'), ('system', '0', 'main', 'current_localtimestamp', 'scalar', None, None, 'TIMESTAMP', [], [], None, None, False, True, 1449, None, 'CONSISTENT'), ('system', '0', 'main', 'current_query', 'scalar', 'Returns the current query as a string', None, 'VARCHAR', [], [], None, None, True, True, 540, 'current_query()', 'VOLATILE'), ('system', '0', 'main', '__internal_decompress_integral_smallint', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['UTINYINT', 'SMALLINT'], None, None, False, True, 118, None, 'CONSISTENT'), ('system', '0', 'main', 'current_schema', 'scalar', 'Returns the name of the currently active schema. Default is main', None, 'VARCHAR', [], [], None, None, False, True, 542, 'current_schema()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'current_schemas', 'scalar', 'Returns list of schemas. Pass a parameter of True to include implicit schemas', None, 'VARCHAR[]', ['include_implicit'], ['BOOLEAN'], None, None, False, True, 544, 'current_schemas(true)', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'current_setting', 'scalar', 'Returns the current value of the configuration setting', None, 'ANY', ['setting_name'], ['VARCHAR'], None, None, False, True, 546, "current_setting('access_mode')", 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_integer', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['UTINYINT', 'INTEGER'], None, None, False, True, 120, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_integer', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['USMALLINT', 'INTEGER'], None, None, False, True, 120, None, 'CONSISTENT'), ('system', '0', 'main', 'currval', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, True, True, 176, None, 'VOLATILE'), ('system', '0', 'main', 'damerau_levenshtein', 'scalar', 'Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 548, "damerau_levenshtein('hello', 'world')", 'CONSISTENT'), ('system', '0', 'main', 'datediff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'DATE', 'DATE'], None, None, False, True, 558, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datediff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 558, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datediff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIME', 'TIME'], None, None, False, True, 558, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datediff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 558, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'DATE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIME'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'INTERVAL'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIME WITH TIME ZONE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'DATE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIMESTAMP'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIME'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'INTERVAL'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIME WITH TIME ZONE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datesub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'DATE', 'DATE'], None, None, False, True, 562, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datesub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 562, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datesub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIME', 'TIME'], None, None, False, True, 562, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datesub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 562, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datetrunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP', ['part', 'timestamp'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 564, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datetrunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP', ['part', 'timestamp'], ['VARCHAR', 'DATE'], None, None, False, True, 564, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datetrunc', 'scalar', 'Truncate to specified precision', None, 'INTERVAL', ['part', 'timestamp'], ['VARCHAR', 'INTERVAL'], None, None, False, True, 564, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datetrunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP WITH TIME ZONE', ['part', 'timestamp'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 564, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_hugeint', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['UTINYINT', 'HUGEINT'], None, None, False, True, 124, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_hugeint', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['USMALLINT', 'HUGEINT'], None, None, False, True, 124, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_hugeint', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['UINTEGER', 'HUGEINT'], None, None, False, True, 124, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_hugeint', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['UBIGINT', 'HUGEINT'], None, None, False, True, 124, None, 'CONSISTENT'), ('system', '0', 'main', 'date_diff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'DATE', 'DATE'], None, None, False, True, 550, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_diff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 550, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_diff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIME', 'TIME'], None, None, False, True, 550, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_diff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 550, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'DATE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIME'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'INTERVAL'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIME WITH TIME ZONE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'DATE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIMESTAMP'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIME'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'INTERVAL'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIME WITH TIME ZONE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_sub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'DATE', 'DATE'], None, None, False, True, 554, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_sub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 554, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_sub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIME', 'TIME'], None, None, False, True, 554, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_sub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 554, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_trunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP', ['part', 'timestamp'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 556, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_trunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP', ['part', 'timestamp'], ['VARCHAR', 'DATE'], None, None, False, True, 556, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_trunc', 'scalar', 'Truncate to specified precision', None, 'INTERVAL', ['part', 'timestamp'], ['VARCHAR', 'INTERVAL'], None, None, False, True, 556, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_trunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP WITH TIME ZONE', ['part', 'timestamp'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 556, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'day', 'scalar', 'Extract the day component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 566, "day(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'day', 'scalar', 'Extract the day component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 566, "day(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'day', 'scalar', 'Extract the day component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 566, "day(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'day', 'scalar', 'Extract the day component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 566, "day(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayname', 'scalar', 'The (English) name of the weekday', None, 'VARCHAR', ['ts'], ['DATE'], None, None, False, True, 568, "dayname(TIMESTAMP '1992-03-22')", 'CONSISTENT'), ('system', '0', 'main', 'dayname', 'scalar', 'The (English) name of the weekday', None, 'VARCHAR', ['ts'], ['TIMESTAMP'], None, None, False, True, 568, "dayname(TIMESTAMP '1992-03-22')", 'CONSISTENT'), ('system', '0', 'main', 'dayname', 'scalar', 'The (English) name of the weekday', None, 'VARCHAR', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 568, "dayname(TIMESTAMP '1992-03-22')", 'CONSISTENT'), ('system', '0', 'main', 'dayofmonth', 'scalar', 'Extract the dayofmonth component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 570, "dayofmonth(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofmonth', 'scalar', 'Extract the dayofmonth component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 570, "dayofmonth(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofmonth', 'scalar', 'Extract the dayofmonth component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 570, "dayofmonth(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofmonth', 'scalar', 'Extract the dayofmonth component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 570, "dayofmonth(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofweek', 'scalar', 'Extract the dayofweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 572, "dayofweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofweek', 'scalar', 'Extract the dayofweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 572, "dayofweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofweek', 'scalar', 'Extract the dayofweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 572, "dayofweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofweek', 'scalar', 'Extract the dayofweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 572, "dayofweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofyear', 'scalar', 'Extract the dayofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 574, "dayofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofyear', 'scalar', 'Extract the dayofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 574, "dayofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofyear', 'scalar', 'Extract the dayofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 574, "dayofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofyear', 'scalar', 'Extract the dayofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 574, "dayofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decade', 'scalar', 'Extract the decade component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 576, "decade(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decade', 'scalar', 'Extract the decade component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 576, "decade(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decade', 'scalar', 'Extract the decade component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 576, "decade(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decade', 'scalar', 'Extract the decade component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 576, "decade(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decode', 'scalar', 'Convert blob to varchar. Fails if blob is not valid utf-8', None, 'VARCHAR', ['blob'], ['BLOB'], None, None, False, True, 578, "decode('\\xC3\\xBC'::BLOB)", 'CONSISTENT'), ('system', '0', 'main', 'degrees', 'scalar', 'Converts radians to degrees', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 580, 'degrees(pi())', 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'editdist3', 'scalar', 'The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 582, "levenshtein('duck','db')", 'CONSISTENT'), ('system', '0', 'main', 'element_at', 'scalar', 'Returns a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned', None, 'ANY', ['map', 'key'], ['ANY', 'ANY'], 'ANY', None, False, True, 584, "map_extract(map(['key'], ['val']), 'key')", 'CONSISTENT'), ('system', '0', 'main', 'encode', 'scalar', 'Convert varchar to blob. Converts utf-8 characters into literal encoding', None, 'BLOB', ['string'], ['VARCHAR'], None, None, False, True, 586, "encode('my_string_with_ü')", 'CONSISTENT'), ('system', '0', 'main', 'ends_with', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 248, None, 'CONSISTENT'), ('system', '0', 'main', 'quarter', 'scalar', 'Extract the quarter component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 860, "quarter(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'quarter', 'scalar', 'Extract the quarter component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 860, "quarter(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'quarter', 'scalar', 'Extract the quarter component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 860, "quarter(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'quarter', 'scalar', 'Extract the quarter component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 860, "quarter(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'enum_code', 'scalar', 'Returns the numeric value backing the given enum value', None, 'ANY', ['enum'], ['ANY'], None, None, False, True, 590, "enum_code('happy'::mood)", 'CONSISTENT'), ('system', '0', 'main', 'enum_first', 'scalar', 'Returns the first value of the input enum type', None, 'VARCHAR', ['enum'], ['ANY'], None, None, False, True, 592, 'enum_first(NULL::mood)', 'CONSISTENT'), ('system', '0', 'main', 'enum_last', 'scalar', 'Returns the last value of the input enum type', None, 'VARCHAR', ['enum'], ['ANY'], None, None, False, True, 594, 'enum_last(NULL::mood)', 'CONSISTENT'), ('system', '0', 'main', 'enum_range', 'scalar', 'Returns all values of the input enum type as an array', None, 'VARCHAR[]', ['enum'], ['ANY'], None, None, False, True, 596, 'enum_range(NULL::mood)', 'CONSISTENT'), ('system', '0', 'main', 'enum_range_boundary', 'scalar', 'Returns the range between the two given enum values as an array. The values must be of the same enum type. When the first parameter is NULL, the result starts with the first value of the enum type. When the second parameter is NULL, the result ends with the last value of the enum type', None, 'VARCHAR[]', ['start', 'end'], ['ANY', 'ANY'], None, None, False, True, 598, "enum_range_boundary(NULL, 'happy'::mood)", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['DATE'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['TIMESTAMP'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['INTERVAL'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['TIME'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['TIME WITH TIME ZONE'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['DATE'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['INTERVAL'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME WITH TIME ZONE'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'TIMESTAMP', ['temporal'], ['BIGINT'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['DATE'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['INTERVAL'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME WITH TIME ZONE'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['DATE'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['INTERVAL'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME WITH TIME ZONE'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'era', 'scalar', 'Extract the era component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 608, "era(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'era', 'scalar', 'Extract the era component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 608, "era(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'era', 'scalar', 'Extract the era component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 608, "era(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'era', 'scalar', 'Extract the era component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 608, "era(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'error', 'scalar', 'Throws the given error message', None, 'NULL', ['message'], ['VARCHAR'], None, None, True, True, 610, "error('access_mode')", 'VOLATILE'), ('system', '0', 'main', 'even', 'scalar', 'Rounds x to next even number by rounding away from zero', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 612, 'even(2.9)', 'CONSISTENT'), ('system', '0', 'main', 'exp', 'scalar', 'Computes e to the power of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 614, 'exp(1)', 'CONSISTENT'), ('system', '0', 'main', 'factorial', 'scalar', 'Factorial of x. Computes the product of the current integer and all integers below it', None, 'HUGEINT', ['x'], ['INTEGER'], None, None, False, True, 616, '4!', 'CONSISTENT'), ('system', '0', 'main', 'printf', 'scalar', 'Formats a string using printf syntax', None, 'VARCHAR', ['format'], ['VARCHAR'], 'ANY', None, False, True, 850, 'printf(\'Benchmark "%s" took %d seconds\', \'CSV\', 42)', 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_bigint', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['UTINYINT', 'BIGINT'], None, None, False, True, 122, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_bigint', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['USMALLINT', 'BIGINT'], None, None, False, True, 122, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_bigint', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['UINTEGER', 'BIGINT'], None, None, False, True, 122, None, 'CONSISTENT'), ('system', '0', 'main', 'filter', 'scalar', 'Constructs a list from those elements of the input list for which the lambda function returns true', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 620, 'list_filter([3, 4, 5], x -> x > 4)', 'CONSISTENT'), ('system', '0', 'main', 'finalize', 'scalar', None, None, 'INVALID', ['col0'], ['AGGREGATE_STATE<?>'], None, None, False, True, 150, None, 'CONSISTENT'), ('system', '0', 'main', 'prefix', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 244, None, 'CONSISTENT'), ('system', '0', 'main', 'flatten', 'scalar', 'Flatten a nested list by one level', None, 'ANY[]', ['nested_list'], ['ANY[][]'], None, None, False, True, 622, 'flatten([[1, 2, 3], [4, 5]])', 'CONSISTENT'), ('system', '0', 'main', 'floor', 'scalar', 'Rounds the number down', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 624, 'floor(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'floor', 'scalar', 'Rounds the number down', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 624, 'floor(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'floor', 'scalar', 'Rounds the number down', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 624, 'floor(17.4)', 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_string_utinyint', 'scalar', None, None, 'UTINYINT', ['col0'], ['VARCHAR'], None, None, False, True, 134, None, 'CONSISTENT'), ('system', '0', 'main', 'format', 'scalar', 'Formats a string using fmt syntax', None, 'VARCHAR', ['format'], ['VARCHAR'], 'ANY', None, False, True, 626, 'format(\'Benchmark "{}" took {} seconds\', \'CSV\', 42)', 'CONSISTENT'), ('system', '0', 'main', 'formatReadableDecimalSize', 'scalar', 'Converts bytes to a human-readable presentation (e.g. 16000 -> 16.0 KB)', None, 'VARCHAR', ['bytes'], ['BIGINT'], None, None, False, True, 628, 'format_bytes(1000 * 16)', 'CONSISTENT'), ('system', '0', 'main', 'formatReadableSize', 'scalar', 'Converts bytes to a human-readable presentation (e.g. 16000 -> 15.6 KiB)', None, 'VARCHAR', ['bytes'], ['BIGINT'], None, None, False, True, 630, 'format_bytes(1000 * 16)', 'CONSISTENT'), ('system', '0', 'main', 'format_bytes', 'scalar', 'Converts bytes to a human-readable presentation (e.g. 16000 -> 15.6 KiB)', None, 'VARCHAR', ['bytes'], ['BIGINT'], None, None, False, True, 632, 'format_bytes(1000 * 16)', 'CONSISTENT'), ('system', '0', 'main', 'from_base64', 'scalar', 'Convert a base64 encoded string to a character string', None, 'BLOB', ['string'], ['VARCHAR'], None, None, False, True, 634, "from_base64('QQ==')", 'CONSISTENT'), ('system', '0', 'main', 'power', 'scalar', 'Computes x to the power of y', None, 'DOUBLE', ['x', 'y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 848, 'pow(2, 3)', 'CONSISTENT'), ('system', '0', 'main', 'from_hex', 'scalar', 'Converts a value from hexadecimal representation to a blob', None, 'BLOB', ['value'], ['VARCHAR'], None, None, False, True, 638, "unhex('2A')", 'CONSISTENT'), ('system', '0', 'main', 'from_json', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1123, None, 'CONSISTENT'), ('system', '0', 'main', 'from_json', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1123, None, 'CONSISTENT'), ('system', '0', 'main', 'from_json_strict', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1127, None, 'CONSISTENT'), ('system', '0', 'main', 'from_json_strict', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1127, None, 'CONSISTENT'), ('system', '0', 'main', 'pow', 'scalar', 'Computes x to the power of y', None, 'DOUBLE', ['x', 'y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 846, 'pow(2, 3)', 'CONSISTENT'), ('system', '0', 'main', 'gamma', 'scalar', 'Interpolation of (x-1) factorial (so decimal inputs are allowed)', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 642, 'gamma(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'gcd', 'scalar', 'Computes the greatest common divisor of x and y', None, 'BIGINT', ['x', 'y'], ['BIGINT', 'BIGINT'], None, None, False, True, 644, 'greatest_common_divisor(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'gcd', 'scalar', 'Computes the greatest common divisor of x and y', None, 'HUGEINT', ['x', 'y'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 644, 'greatest_common_divisor(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'BIGINT[]', ['start'], ['BIGINT'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'BIGINT[]', ['start', 'stop'], ['BIGINT', 'BIGINT'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'BIGINT[]', ['start', 'stop', 'step'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'TIMESTAMP[]', ['start', 'stop', 'step'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'TIMESTAMP WITH TIME ZONE[]', ['start', 'stop', 'step'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_string_usmallint', 'scalar', None, None, 'USMALLINT', ['col0'], ['VARCHAR'], None, None, False, True, 136, None, 'CONSISTENT'), ('system', '0', 'main', 'gen_random_uuid', 'scalar', 'Returns a random UUID similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687', None, 'UUID', [], [], None, None, True, True, 646, 'uuid()', 'VOLATILE'), ('system', '0', 'main', '__internal_compress_string_uinteger', 'scalar', None, None, 'UINTEGER', ['col0'], ['VARCHAR'], None, None, False, True, 138, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_string_ubigint', 'scalar', None, None, 'UBIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 140, None, 'CONSISTENT'), ('system', '0', 'main', 'get_bit', 'scalar', 'Extracts the nth bit from bitstring; the first (leftmost) bit is indexed 0', None, 'INTEGER', ['bitstring', 'index'], ['BIT', 'INTEGER'], None, None, False, True, 650, "get_bit('0110010'::BIT, 2)", 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_string_hugeint', 'scalar', None, None, 'HUGEINT', ['col0'], ['VARCHAR'], None, None, False, True, 142, None, 'CONSISTENT'), ('system', '0', 'main', 'get_current_time', 'scalar', 'Returns the current time', None, 'TIME', [], [], None, None, False, True, 652, 'get_current_time()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'get_current_timestamp', 'scalar', 'Returns the current timestamp', None, 'TIMESTAMP WITH TIME ZONE', [], [], None, None, False, True, 654, 'get_current_timestamp()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 656, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 656, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 656, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'BIGINT', ['arg1'], ['BIGINT'], 'BIGINT', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'HUGEINT', ['arg1'], ['HUGEINT'], 'HUGEINT', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'DOUBLE', ['arg1'], ['DOUBLE'], 'DOUBLE', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'VARCHAR', ['arg1'], ['VARCHAR'], 'VARCHAR', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'TIMESTAMP', ['arg1'], ['TIMESTAMP'], 'TIMESTAMP', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'TIME', ['arg1'], ['TIME'], 'TIME', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'DATE', ['arg1'], ['DATE'], 'DATE', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'TIMESTAMP WITH TIME ZONE', ['arg1'], ['TIMESTAMP WITH TIME ZONE'], 'TIMESTAMP WITH TIME ZONE', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'TIME WITH TIME ZONE', ['arg1'], ['TIME WITH TIME ZONE'], 'TIME WITH TIME ZONE', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest_common_divisor', 'scalar', 'Computes the greatest common divisor of x and y', None, 'BIGINT', ['x', 'y'], ['BIGINT', 'BIGINT'], None, None, False, True, 660, 'greatest_common_divisor(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'greatest_common_divisor', 'scalar', 'Computes the greatest common divisor of x and y', None, 'HUGEINT', ['x', 'y'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 660, 'greatest_common_divisor(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'position', 'scalar', 'Returns location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found', None, 'BIGINT', ['haystack', 'needle'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 844, "instr('test test','es')", 'CONSISTENT'), ('system', '0', 'main', 'hamming', 'scalar', 'The number of positions with different characters for 2 strings of equal length. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 664, "hamming('duck','luck')", 'CONSISTENT'), ('system', '0', 'main', 'hash', 'scalar', 'Returns an integer with the hash of the value. Note that this is not a cryptographic hash', None, 'UBIGINT', ['param'], ['ANY'], 'ANY', None, False, True, 666, "hash('🦆')", 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['BLOB'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['BIGINT'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['UBIGINT'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['HUGEINT'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['UHUGEINT'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'pi', 'scalar', 'Returns the value of pi', None, 'DOUBLE', [], [], None, None, False, True, 842, 'pi()', 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'icu_sort_key', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1443, None, 'CONSISTENT'), ('system', '0', 'main', 'ilike_escape', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 224, None, 'CONSISTENT'), ('system', '0', 'main', 'instr', 'scalar', 'Returns location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found', None, 'BIGINT', ['haystack', 'needle'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 676, "instr('test test','es')", 'CONSISTENT'), ('system', '0', 'main', 'in_search_path', 'scalar', 'Returns whether or not the database/schema are in the search path', None, 'BOOLEAN', ['database_name', 'schema_name'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 674, "in_search_path('memory', 'main')", 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['FLOAT'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['DOUBLE'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['DATE'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['TIMESTAMP'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['FLOAT'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['DOUBLE'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['DATE'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['TIMESTAMP'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isnan', 'scalar', 'Returns true if the floating point value is not a number, false otherwise', None, 'BOOLEAN', ['x'], ['FLOAT'], None, None, False, True, 682, "isnan('NaN'::FLOAT)", 'CONSISTENT'), ('system', '0', 'main', 'isnan', 'scalar', 'Returns true if the floating point value is not a number, false otherwise', None, 'BOOLEAN', ['x'], ['DOUBLE'], None, None, False, True, 682, "isnan('NaN'::FLOAT)", 'CONSISTENT'), ('system', '0', 'main', 'isodow', 'scalar', 'Extract the isodow component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 684, "isodow(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isodow', 'scalar', 'Extract the isodow component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 684, "isodow(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isodow', 'scalar', 'Extract the isodow component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 684, "isodow(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isodow', 'scalar', 'Extract the isodow component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 684, "isodow(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isoyear', 'scalar', 'Extract the isoyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 686, "isoyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isoyear', 'scalar', 'Extract the isoyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 686, "isoyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isoyear', 'scalar', 'Extract the isoyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 686, "isoyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isoyear', 'scalar', 'Extract the isoyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 686, "isoyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'jaccard', 'scalar', 'The Jaccard similarity between two strings. Different case is considered different. Returns a number between 0 and 1', None, 'DOUBLE', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 688, "jaccard('duck','luck')", 'CONSISTENT'), ('system', '0', 'main', 'jaro_similarity', 'scalar', 'The Jaro similarity between two strings. Different case is considered different. Returns a number between 0 and 1', None, 'DOUBLE', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 690, "jaro_similarity('duck','duckdb')", 'CONSISTENT'), ('system', '0', 'main', 'parse_path', 'scalar', "Returns a list of the components (directories and filename) in the path similarly to Python's pathlib.PurePath::parts. separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR[]', ['string'], ['VARCHAR'], None, None, False, True, 840, "parse_path('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'parse_path', 'scalar', "Returns a list of the components (directories and filename) in the path similarly to Python's pathlib.PurePath::parts. separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 840, "parse_path('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1105, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT', ['col0'], ['JSON'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1131, None, 'CONSISTENT'), ('system', '0', 'main', 'json_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'JSON'], None, None, False, True, 1131, None, 'CONSISTENT'), ('system', '0', 'main', 'json_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1131, None, 'CONSISTENT'), ('system', '0', 'main', 'json_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['JSON', 'JSON'], None, None, False, True, 1131, None, 'CONSISTENT'), ('system', '0', 'main', 'json_deserialize_sql', 'scalar', None, None, 'VARCHAR', ['col0'], ['JSON'], None, None, False, True, 1143, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 114, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 114, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 114, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 114, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 116, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 116, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[]', ['col0'], ['VARCHAR'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[][]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[]', ['col0'], ['JSON'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[][]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_merge_patch', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1117, None, 'CONSISTENT'), ('system', '0', 'main', 'json_object', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1107, None, 'CONSISTENT'), ('system', '0', 'main', 'json_quote', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1111, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0'], ['VARCHAR'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'BOOLEAN'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2', 'col3', 'col4'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_sql', 'scalar', None, None, 'JSON', ['col0'], ['VARCHAR'], None, None, False, True, 1141, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_sql', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'BOOLEAN'], None, None, False, True, 1141, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_sql', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1141, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_sql', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1141, None, 'CONSISTENT'), ('system', '0', 'main', 'json_structure', 'scalar', None, None, 'JSON', ['col0'], ['VARCHAR'], None, None, False, True, 1119, None, 'CONSISTENT'), ('system', '0', 'main', 'json_structure', 'scalar', None, None, 'JSON', ['col0'], ['JSON'], None, None, False, True, 1119, None, 'CONSISTENT'), ('system', '0', 'main', 'json_transform', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1121, None, 'CONSISTENT'), ('system', '0', 'main', 'json_transform', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1121, None, 'CONSISTENT'), ('system', '0', 'main', 'json_transform_strict', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1125, None, 'CONSISTENT'), ('system', '0', 'main', 'json_transform_strict', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1125, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR', ['col0'], ['JSON'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_valid', 'scalar', None, None, 'BOOLEAN', ['col0'], ['VARCHAR'], None, None, False, True, 1137, None, 'CONSISTENT'), ('system', '0', 'main', 'json_valid', 'scalar', None, None, 'BOOLEAN', ['col0'], ['JSON'], None, None, False, True, 1137, None, 'CONSISTENT'), ('system', '0', 'main', 'julian', 'scalar', 'Extract the Julian Day number from a date or timestamp', None, 'DOUBLE', ['ts'], ['DATE'], None, None, False, True, 694, "julian(timestamp '2006-01-01 12:00')", 'CONSISTENT'), ('system', '0', 'main', 'julian', 'scalar', 'Extract the Julian Day number from a date or timestamp', None, 'DOUBLE', ['ts'], ['TIMESTAMP'], None, None, False, True, 694, "julian(timestamp '2006-01-01 12:00')", 'CONSISTENT'), ('system', '0', 'main', 'julian', 'scalar', 'Extract the Julian Day number from a date or timestamp', None, 'DOUBLE', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 694, "julian(timestamp '2006-01-01 12:00')", 'CONSISTENT'), ('system', '0', 'main', 'parse_filename', 'scalar', "Returns the last component of the path similarly to Python's os.path.basename. If trim_extension is true, the file extension will be removed (it defaults to false). separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 838, "parse_filename('path/to/file.csv', true, 'forward_slash')", 'CONSISTENT'), ('system', '0', 'main', 'parse_filename', 'scalar', "Returns the last component of the path similarly to Python's os.path.basename. If trim_extension is true, the file extension will be removed (it defaults to false). separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string', 'trim_extension'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 838, "parse_filename('path/to/file.csv', true, 'forward_slash')", 'CONSISTENT'), ('system', '0', 'main', 'parse_filename', 'scalar', "Returns the last component of the path similarly to Python's os.path.basename. If trim_extension is true, the file extension will be removed (it defaults to false). separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string', 'trim_extension'], ['VARCHAR', 'BOOLEAN'], None, None, False, True, 838, "parse_filename('path/to/file.csv', true, 'forward_slash')", 'CONSISTENT'), ('system', '0', 'main', 'parse_filename', 'scalar', "Returns the last component of the path similarly to Python's os.path.basename. If trim_extension is true, the file extension will be removed (it defaults to false). separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string', 'trim_extension', 'separator'], ['VARCHAR', 'BOOLEAN', 'VARCHAR'], None, None, False, True, 838, "parse_filename('path/to/file.csv', true, 'forward_slash')", 'CONSISTENT'), ('system', '0', 'main', 'parse_dirpath', 'scalar', "Returns the head of the path similarly to Python's os.path.dirname. separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 836, "parse_dirpath('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'parse_dirpath', 'scalar', "Returns the head of the path similarly to Python's os.path.dirname. separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 836, "parse_dirpath('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'parse_dirname', 'scalar', 'Returns the top-level directory name. separator options: system, both_slash (default), forward_slash, backslash', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 834, "parse_dirname('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'parse_dirname', 'scalar', 'Returns the top-level directory name. separator options: system, both_slash (default), forward_slash, backslash', None, 'VARCHAR', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 834, "parse_dirname('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'ord', 'scalar', 'Returns the unicode codepoint of the first character of the string', None, 'INTEGER', ['str'], ['VARCHAR'], None, None, False, True, 832, "unicode('ü')", 'CONSISTENT'), ('system', '0', 'main', 'last_day', 'scalar', 'Returns the last day of the month', None, 'DATE', ['ts'], ['DATE'], None, None, False, True, 702, "last_day(TIMESTAMP '1992-03-22 01:02:03.1234')", 'CONSISTENT'), ('system', '0', 'main', 'last_day', 'scalar', 'Returns the last day of the month', None, 'DATE', ['ts'], ['TIMESTAMP'], None, None, False, True, 702, "last_day(TIMESTAMP '1992-03-22 01:02:03.1234')", 'CONSISTENT'), ('system', '0', 'main', 'last_day', 'scalar', 'Returns the last day of the month', None, 'DATE', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 702, "last_day(TIMESTAMP '1992-03-22 01:02:03.1234')", 'CONSISTENT'), ('system', '0', 'main', 'lcase', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 180, None, 'CONSISTENT'), ('system', '0', 'main', 'lcm', 'scalar', 'Computes the least common multiple of x and y', None, 'BIGINT', ['x', 'y'], ['BIGINT', 'BIGINT'], None, None, False, True, 704, 'least_common_multiple(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'lcm', 'scalar', 'Computes the least common multiple of x and y', None, 'HUGEINT', ['x', 'y'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 704, 'least_common_multiple(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'BIGINT', ['arg1'], ['BIGINT'], 'BIGINT', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'HUGEINT', ['arg1'], ['HUGEINT'], 'HUGEINT', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'DOUBLE', ['arg1'], ['DOUBLE'], 'DOUBLE', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'VARCHAR', ['arg1'], ['VARCHAR'], 'VARCHAR', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'TIMESTAMP', ['arg1'], ['TIMESTAMP'], 'TIMESTAMP', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'TIME', ['arg1'], ['TIME'], 'TIME', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'DATE', ['arg1'], ['DATE'], 'DATE', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'TIMESTAMP WITH TIME ZONE', ['arg1'], ['TIMESTAMP WITH TIME ZONE'], 'TIMESTAMP WITH TIME ZONE', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'TIME WITH TIME ZONE', ['arg1'], ['TIME WITH TIME ZONE'], 'TIME WITH TIME ZONE', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least_common_multiple', 'scalar', 'Computes the least common multiple of x and y', None, 'BIGINT', ['x', 'y'], ['BIGINT', 'BIGINT'], None, None, False, True, 708, 'least_common_multiple(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'least_common_multiple', 'scalar', 'Computes the least common multiple of x and y', None, 'HUGEINT', ['x', 'y'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 708, 'least_common_multiple(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'left', 'scalar', 'Extract the left-most count characters', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 710, "left('Hello🦆', 2)", 'CONSISTENT'), ('system', '0', 'main', 'left_grapheme', 'scalar', 'Extract the left-most count grapheme clusters', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 712, "left_grapheme('🤦🏼\u200d♂️🤦🏽\u200d♀️', 1)", 'CONSISTENT'), ('system', '0', 'main', 'len', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 198, None, 'CONSISTENT'), ('system', '0', 'main', 'len', 'scalar', None, None, 'BIGINT', ['col0'], ['BIT'], None, None, False, True, 198, None, 'CONSISTENT'), ('system', '0', 'main', 'len', 'scalar', None, None, 'BIGINT', ['col0'], ['ANY[]'], None, None, False, True, 198, None, 'CONSISTENT'), ('system', '0', 'main', 'length', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 196, None, 'CONSISTENT'), ('system', '0', 'main', 'length', 'scalar', None, None, 'BIGINT', ['col0'], ['BIT'], None, None, False, True, 196, None, 'CONSISTENT'), ('system', '0', 'main', 'length', 'scalar', None, None, 'BIGINT', ['col0'], ['ANY[]'], None, None, False, True, 196, None, 'CONSISTENT'), ('system', '0', 'main', 'length_grapheme', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 200, None, 'CONSISTENT'), ('system', '0', 'main', 'levenshtein', 'scalar', 'The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 714, "levenshtein('duck','db')", 'CONSISTENT'), ('system', '0', 'main', 'lgamma', 'scalar', 'Computes the log of the gamma function', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 716, 'lgamma(2)', 'CONSISTENT'), ('system', '0', 'main', 'like_escape', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 220, None, 'CONSISTENT'), ('system', '0', 'main', 'octet_length', 'scalar', None, None, 'BIGINT', ['col0'], ['BLOB'], None, None, False, True, 208, None, 'CONSISTENT'), ('system', '0', 'main', 'octet_length', 'scalar', None, None, 'BIGINT', ['col0'], ['BIT'], None, None, False, True, 208, None, 'CONSISTENT'), ('system', '0', 'main', 'to_minutes', 'scalar', 'Construct a minute interval', None, 'INTERVAL', ['integer'], ['BIGINT'], None, None, False, True, 1004, 'to_minutes(5)', 'CONSISTENT'), ('system', '0', 'main', 'list_aggr', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 720, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', 'list_aggregate', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 722, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', '^@', 'scalar', 'Returns true if string begins with search_string', None, 'BOOLEAN', ['string', 'search_string'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 410, "starts_with('abc','a')", 'CONSISTENT'), ('system', '0', 'main', '^', 'scalar', 'Computes x to the power of y', None, 'DOUBLE', ['x', 'y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 408, 'pow(2, 3)', 'CONSISTENT'), ('system', '0', 'main', 'list_apply', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 724, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'yearweek', 'scalar', 'Extract the yearweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1070, "yearweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'yearweek', 'scalar', 'Extract the yearweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1070, "yearweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'yearweek', 'scalar', 'Extract the yearweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1070, "yearweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'yearweek', 'scalar', 'Extract the yearweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1070, "yearweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'year', 'scalar', 'Extract the year component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1068, "year(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'year', 'scalar', 'Extract the year component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1068, "year(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'year', 'scalar', 'Extract the year component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1068, "year(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'year', 'scalar', 'Extract the year component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1068, "year(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'TINYINT', ['left', 'right'], ['TINYINT', 'TINYINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'SMALLINT', ['left', 'right'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'INTEGER', ['left', 'right'], ['INTEGER', 'INTEGER'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'BIGINT', ['left', 'right'], ['BIGINT', 'BIGINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'HUGEINT', ['left', 'right'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'UTINYINT', ['left', 'right'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'USMALLINT', ['left', 'right'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'UINTEGER', ['left', 'right'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'UBIGINT', ['left', 'right'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'UHUGEINT', ['left', 'right'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'BIT', ['left', 'right'], ['BIT', 'BIT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'which_secret', 'scalar', 'Print out the name of the secret that will be used for reading a path', None, 'VARCHAR', ['path', 'type'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1064, "which_secret('s3://some/authenticated/path.csv', 's3')", 'CONSISTENT'), ('system', '0', 'main', 'weekofyear', 'scalar', 'Extract the weekofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1062, "weekofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekofyear', 'scalar', 'Extract the weekofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1062, "weekofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekofyear', 'scalar', 'Extract the weekofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1062, "weekofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekofyear', 'scalar', 'Extract the weekofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1062, "weekofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekday', 'scalar', 'Extract the weekday component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1060, "weekday(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekday', 'scalar', 'Extract the weekday component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1060, "weekday(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekday', 'scalar', 'Extract the weekday component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1060, "weekday(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekday', 'scalar', 'Extract the weekday component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1060, "weekday(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'week', 'scalar', 'Extract the week component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1058, "week(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'week', 'scalar', 'Extract the week component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1058, "week(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'week', 'scalar', 'Extract the week component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1058, "week(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'week', 'scalar', 'Extract the week component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1058, "week(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'list_cat', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 256, None, 'CONSISTENT'), ('system', '0', 'main', 'list_concat', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 254, None, 'CONSISTENT'), ('system', '0', 'main', 'list_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 262, None, 'CONSISTENT'), ('system', '0', 'main', 'list_cosine_similarity', 'scalar', 'Compute the cosine similarity between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 726, 'list_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_cosine_similarity', 'scalar', 'Compute the cosine similarity between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 726, 'list_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'version', 'scalar', 'Returns the currently active version of DuckDB in this format: v0.3.2\t', None, 'VARCHAR', [], [], None, None, False, True, 1056, 'version()', 'CONSISTENT'), ('system', '0', 'main', 'list_distance', 'scalar', 'Compute the distance between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 728, 'list_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_distance', 'scalar', 'Compute the distance between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 728, 'list_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_distinct', 'scalar', 'Removes all duplicates and NULLs from a list. Does not preserve the original order', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 730, 'list_distinct([1, 1, NULL, -3, 1, 5])', 'CONSISTENT'), ('system', '0', 'main', 'list_dot_product', 'scalar', 'Compute the inner product between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 732, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_dot_product', 'scalar', 'Compute the inner product between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 732, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_element', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['ANY[]', 'BIGINT'], None, None, False, True, 280, None, 'CONSISTENT'), ('system', '0', 'main', 'list_element', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 280, None, 'CONSISTENT'), ('system', '0', 'main', 'vector_type', 'scalar', 'Returns the VectorType of a given column', None, 'VARCHAR', ['col'], ['ANY'], None, None, False, True, 1054, 'vector_type(col)', 'CONSISTENT'), ('system', '0', 'main', 'list_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['ANY[]', 'BIGINT'], None, None, False, True, 278, None, 'CONSISTENT'), ('system', '0', 'main', 'list_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 278, None, 'CONSISTENT'), ('system', '0', 'main', 'list_filter', 'scalar', 'Constructs a list from those elements of the input list for which the lambda function returns true', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 734, 'list_filter([3, 4, 5], x -> x > 4)', 'CONSISTENT'), ('system', '0', 'main', 'now', 'scalar', 'Returns the current timestamp', None, 'TIMESTAMP WITH TIME ZONE', [], [], None, None, False, True, 830, 'get_current_timestamp()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'list_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 736, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 736, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 736, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_has', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 266, None, 'CONSISTENT'), ('system', '0', 'main', 'not_like_escape', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 222, None, 'CONSISTENT'), ('system', '0', 'main', 'not_ilike_escape', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 226, None, 'CONSISTENT'), ('system', '0', 'main', 'uuid', 'scalar', 'Returns a random UUID similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687', None, 'UUID', [], [], None, None, True, True, 1046, 'uuid()', 'VOLATILE'), ('system', '0', 'main', 'list_indexof', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 272, None, 'CONSISTENT'), ('system', '0', 'main', 'list_inner_product', 'scalar', 'Compute the inner product between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 738, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_inner_product', 'scalar', 'Compute the inner product between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 738, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'upper', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 182, None, 'CONSISTENT'), ('system', '0', 'main', 'unpivot_list', 'scalar', 'Identical to list_value, but generated as part of unpivot for better error messages', None, 'LIST', [], [], 'ANY', None, False, True, 1044, 'unpivot_list(4, 5, 6)', 'CONSISTENT'), ('system', '0', 'main', 'union_value', 'scalar', 'Create a single member UNION containing the argument value. The tag of the value will be the bound variable name', None, 'UNION', [], [], 'ANY', None, False, True, 1042, "union_value(k := 'hello')", 'CONSISTENT'), ('system', '0', 'main', 'union_tag', 'scalar', 'Retrieve the currently selected tag of the union as an ENUM', None, 'ANY', ['union'], ['UNION'], None, None, False, True, 1040, "union_tag(union_value(k := 'foo'))", 'CONSISTENT'), ('system', '0', 'main', 'union_extract', 'scalar', 'Extract the value with the named tags from the union. NULL if the tag is not currently selected', None, 'ANY', ['union', 'tag'], ['UNION', 'VARCHAR'], None, None, False, True, 1038, "union_extract(s, 'k')", 'CONSISTENT'), ('system', '0', 'main', 'unicode', 'scalar', 'Returns the unicode codepoint of the first character of the string', None, 'INTEGER', ['str'], ['VARCHAR'], None, None, False, True, 1036, "unicode('ü')", 'CONSISTENT'), ('system', '0', 'main', 'unhex', 'scalar', 'Converts a value from hexadecimal representation to a blob', None, 'BLOB', ['value'], ['VARCHAR'], None, None, False, True, 1034, "unhex('2A')", 'CONSISTENT'), ('system', '0', 'main', 'unbin', 'scalar', 'Converts a value from binary representation to a blob', None, 'BLOB', ['value'], ['VARCHAR'], None, None, False, True, 1032, "unbin('0110')", 'CONSISTENT'), ('system', '0', 'main', 'ucase', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 184, None, 'CONSISTENT'), ('system', '0', 'main', 'list_pack', 'scalar', 'Create a LIST containing the argument values', None, 'LIST', [], [], 'ANY', None, False, True, 740, 'list_value(4, 5, 6)', 'CONSISTENT'), ('system', '0', 'main', 'list_position', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 270, None, 'CONSISTENT'), ('system', '0', 'main', 'typeof', 'scalar', 'Returns the name of the data type of the result of the expression', None, 'VARCHAR', ['expression'], ['ANY'], None, None, False, True, 1030, "typeof('abc')", 'CONSISTENT'), ('system', '0', 'main', 'txid_current', 'scalar', 'Returns the current transaction’s ID (a BIGINT). It will assign a new one if the current transaction does not have one already', None, 'BIGINT', [], [], None, None, False, True, 1028, 'txid_current()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'list_reduce', 'scalar', 'Returns a single value that is the result of applying the lambda function to each element of the input list, starting with the first element and then repeatedly applying the lambda function to the result of the previous application and the next element of the list.', None, 'ANY', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 742, 'list_reduce([1, 2, 3], (x, y) -> x + y)', 'CONSISTENT'), ('system', '0', 'main', 'list_resize', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 284, None, 'CONSISTENT'), ('system', '0', 'main', 'list_resize', 'scalar', None, None, 'ANY[]', ['col0', 'col1', 'col2'], ['ANY[]', 'ANY', 'ANY'], None, None, False, True, 284, None, 'CONSISTENT'), ('system', '0', 'main', 'try_strptime', 'scalar', 'Converts string to timestamp using the format string (timestamp with time zone if %Z is specified). Returns NULL on failure', None, 'TIMESTAMP', ['text', 'format'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1026, "try_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'try_strptime', 'scalar', 'Converts string to timestamp using the format string (timestamp with time zone if %Z is specified). Returns NULL on failure', None, 'TIMESTAMP', ['text', 'format'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1026, "try_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'list_reverse_sort', 'scalar', 'Sorts the elements of the list in reverse order', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 744, 'list_reverse_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_reverse_sort', 'scalar', 'Sorts the elements of the list in reverse order', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 744, 'list_reverse_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_select', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'BIGINT[]'], None, None, False, True, 292, None, 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'SMALLINT', ['x'], ['SMALLINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'INTEGER', ['x'], ['INTEGER'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'HUGEINT', ['x'], ['HUGEINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'UTINYINT', ['x'], ['UTINYINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'USMALLINT', ['x'], ['USMALLINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'UINTEGER', ['x'], ['UINTEGER'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'UBIGINT', ['x'], ['UBIGINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'UHUGEINT', ['x'], ['UHUGEINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trim', 'scalar', 'Removes any occurrences of any of the characters from either side of the string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 1022, "trim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'trim', 'scalar', 'Removes any occurrences of any of the characters from either side of the string', None, 'VARCHAR', ['string', 'characters'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1022, "trim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'list_slice', 'scalar', 'Extract a sublist using slice conventions. Negative values are accepted', None, 'ANY', ['list', 'begin', 'end['], ['ANY', 'ANY', 'ANY'], None, None, False, True, 746, 'list_slice(l, 2, 4)', 'CONSISTENT'), ('system', '0', 'main', 'list_slice', 'scalar', 'Extract a sublist using slice conventions. Negative values are accepted', None, 'ANY', ['list', 'begin', 'end[', 'step]'], ['ANY', 'ANY', 'ANY', 'BIGINT'], None, None, False, True, 746, 'list_slice(l, 2, 4)', 'CONSISTENT'), ('system', '0', 'main', 'list_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 748, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 748, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 748, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'translate', 'scalar', 'Replaces each character in string that matches a character in the from set with the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are deleted', None, 'VARCHAR', ['string', 'from', 'to'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 1020, "translate('12345', '143', 'ax')", 'CONSISTENT'), ('system', '0', 'main', 'transaction_timestamp', 'scalar', 'Returns the current timestamp', None, 'TIMESTAMP WITH TIME ZONE', [], [], None, None, False, True, 1018, 'get_current_timestamp()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'to_years', 'scalar', 'Construct a year interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 1014, 'to_years(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_weeks', 'scalar', 'Construct a week interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 1012, 'to_weeks(5)', 'CONSISTENT'), ('system', '0', 'main', 'list_transform', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 750, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'list_unique', 'scalar', 'Counts the unique elements of a list', None, 'UBIGINT', ['list'], ['ANY[]'], None, None, False, True, 752, 'list_unique([1, 1, NULL, -3, 1, 5])', 'CONSISTENT'), ('system', '0', 'main', 'list_value', 'scalar', 'Create a LIST containing the argument values', None, 'LIST', [], [], 'ANY', None, False, True, 754, 'list_value(4, 5, 6)', 'CONSISTENT'), ('system', '0', 'main', 'to_timestamp', 'scalar', 'Converts secs since epoch to a timestamp with time zone', None, 'TIMESTAMP WITH TIME ZONE', ['sec'], ['DOUBLE'], None, None, False, True, 1010, 'to_timestamp(1284352323.5)', 'CONSISTENT'), ('system', '0', 'main', 'to_seconds', 'scalar', 'Construct a second interval', None, 'INTERVAL', ['double'], ['DOUBLE'], None, None, False, True, 1008, 'to_seconds(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'list_where', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'BOOLEAN[]'], None, None, False, True, 296, None, 'CONSISTENT'), ('system', '0', 'main', 'list_zip', 'scalar', None, None, 'STRUCT[]', [], [], 'ANY', None, False, True, 288, None, 'CONSISTENT'), ('system', '0', 'main', 'ln', 'scalar', 'Computes the natural logarithm of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 758, 'ln(2)', 'CONSISTENT'), ('system', '0', 'main', 'log', 'scalar', 'Computes the logarithm of x to base b. b may be omitted, in which case the default 10', None, 'DOUBLE', ['b'], ['DOUBLE'], None, None, False, True, 760, 'log(2, 64)', 'CONSISTENT'), ('system', '0', 'main', 'log', 'scalar', 'Computes the logarithm of x to base b. b may be omitted, in which case the default 10', None, 'DOUBLE', ['b', ' x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 760, 'log(2, 64)', 'CONSISTENT'), ('system', '0', 'main', 'log10', 'scalar', 'Computes the 10-log of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 762, 'log10(1000)', 'CONSISTENT'), ('system', '0', 'main', 'log2', 'scalar', 'Computes the 2-log of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 764, 'log2(8)', 'CONSISTENT'), ('system', '0', 'main', 'lower', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 178, None, 'CONSISTENT'), ('system', '0', 'main', 'lpad', 'scalar', 'Pads the string with the character from the left until it has count characters', None, 'VARCHAR', ['string', 'count', 'character'], ['VARCHAR', 'INTEGER', 'VARCHAR'], None, None, False, True, 766, "lpad('hello', 10, '>')", 'CONSISTENT'), ('system', '0', 'main', 'ltrim', 'scalar', 'Removes any occurrences of any of the characters from the left side of the string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 768, "ltrim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'ltrim', 'scalar', 'Removes any occurrences of any of the characters from the left side of the string', None, 'VARCHAR', ['string', 'characters'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 768, "ltrim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'nfc_normalize', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 250, None, 'CONSISTENT'), ('system', '0', 'main', 'make_date', 'scalar', 'The date for the given parts', None, 'DATE', ['year', 'month', 'day'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, False, True, 772, 'make_date(1992, 9, 20)', 'CONSISTENT'), ('system', '0', 'main', 'make_date', 'scalar', 'The date for the given parts', None, 'DATE', ['year'], ['STRUCT("year" BIGINT, "month" BIGINT, "day" BIGINT)'], None, None, False, True, 772, 'make_date(1992, 9, 20)', 'CONSISTENT'), ('system', '0', 'main', 'make_time', 'scalar', 'The time for the given parts', None, 'TIME', ['hour', 'minute', 'seconds'], ['BIGINT', 'BIGINT', 'DOUBLE'], None, None, False, True, 774, 'make_time(13, 34, 27.123456)', 'CONSISTENT'), ('system', '0', 'main', 'make_timestamp', 'scalar', 'The timestamp for the given parts', None, 'TIMESTAMP', ['year', 'month', 'day', 'hour', 'minute', 'seconds'], ['BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'DOUBLE'], None, None, False, True, 776, 'make_timestamp(1992, 9, 20, 13, 34, 27.123456)', 'CONSISTENT'), ('system', '0', 'main', 'make_timestamp', 'scalar', 'The timestamp for the given parts', None, 'TIMESTAMP', ['year'], ['BIGINT'], None, None, False, True, 776, 'make_timestamp(1992, 9, 20, 13, 34, 27.123456)', 'CONSISTENT'), ('system', '0', 'main', 'make_timestamptz', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1', 'col2', 'col3', 'col4', 'col5'], ['BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'DOUBLE'], None, None, False, True, 1445, None, 'CONSISTENT'), ('system', '0', 'main', 'make_timestamptz', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1', 'col2', 'col3', 'col4', 'col5', 'col6'], ['BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'DOUBLE', 'VARCHAR'], None, None, False, True, 1445, None, 'CONSISTENT'), ('system', '0', 'main', 'make_timestamptz', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0'], ['BIGINT'], None, None, False, True, 1445, None, 'CONSISTENT'), ('system', '0', 'main', 'map', 'scalar', 'Creates a map from a set of keys and values', None, 'MAP', [], [], 'ANY', None, False, True, 778, "map(['key1', 'key2'], ['val1', 'val2'])", 'CONSISTENT'), ('system', '0', 'main', 'map_concat', 'scalar', 'Returns a map created from merging the input maps, on key collision the value is taken from the last map with that key', None, 'LIST', [], [], 'ANY', None, False, True, 780, "map_concat(map([1,2], ['a', 'b']), map([2,3], ['c', 'd']));", 'CONSISTENT'), ('system', '0', 'main', 'map_entries', 'scalar', 'Returns the map entries as a list of keys/values', None, 'LIST', [], [], 'ANY', None, False, True, 782, "map_entries(map(['key'], ['val']))", 'CONSISTENT'), ('system', '0', 'main', 'map_extract', 'scalar', 'Returns a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned', None, 'ANY', ['map', 'key'], ['ANY', 'ANY'], 'ANY', None, False, True, 784, "map_extract(map(['key'], ['val']), 'key')", 'CONSISTENT'), ('system', '0', 'main', 'map_from_entries', 'scalar', 'Returns a map created from the entries of the array', None, 'MAP', [], [], 'ANY', None, False, True, 786, "map_from_entries([{k: 5, v: 'val1'}, {k: 3, v: 'val2'}]);", 'CONSISTENT'), ('system', '0', 'main', 'map_keys', 'scalar', 'Returns the keys of a map as a list', None, 'LIST', [], [], 'ANY', None, False, True, 788, "map_keys(map(['key'], ['val']))", 'CONSISTENT'), ('system', '0', 'main', 'map_values', 'scalar', 'Returns the values of a map as a list', None, 'LIST', [], [], 'ANY', None, False, True, 790, "map_values(map(['key'], ['val']))", 'CONSISTENT'), ('system', '0', 'main', 'nextval', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, True, True, 174, None, 'VOLATILE'), ('system', '0', 'main', 'nextafter', 'scalar', 'Returns the next floating point value after x in the direction of y', None, 'DOUBLE', ['x', ' y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 828, 'nextafter(1::float, 2::float)', 'CONSISTENT'), ('system', '0', 'main', 'nextafter', 'scalar', 'Returns the next floating point value after x in the direction of y', None, 'FLOAT', ['x', ' y'], ['FLOAT', 'FLOAT'], None, None, False, True, 828, 'nextafter(1::float, 2::float)', 'CONSISTENT'), ('system', '0', 'main', 'md5', 'scalar', 'Returns the MD5 hash of the value as a string', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 796, "md5('123')", 'CONSISTENT'), ('system', '0', 'main', 'md5_number', 'scalar', 'Returns the MD5 hash of the value as an INT128', None, 'HUGEINT', ['value'], ['VARCHAR'], None, None, False, True, 798, "md5_number('123')", 'CONSISTENT'), ('system', '0', 'main', 'md5_number_lower', 'scalar', 'Returns the MD5 hash of the value as an INT128', None, 'UBIGINT', ['value'], ['VARCHAR'], None, None, False, True, 800, "md5_number_lower('123')", 'CONSISTENT'), ('system', '0', 'main', 'md5_number_upper', 'scalar', 'Returns the MD5 hash of the value as an INT128', None, 'UBIGINT', ['value'], ['VARCHAR'], None, None, False, True, 802, "md5_number_upper('123')", 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'BIGINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['BIGINT', 'INTERVAL'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'to_months', 'scalar', 'Construct a month interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 1006, 'to_months(5)', 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millennium', 'scalar', 'Extract the millennium component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 810, "millennium(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millennium', 'scalar', 'Extract the millennium component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 810, "millennium(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millennium', 'scalar', 'Extract the millennium component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 810, "millennium(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millennium', 'scalar', 'Extract the millennium component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 810, "millennium(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'monthname', 'scalar', 'The (English) name of the month', None, 'VARCHAR', ['ts'], ['DATE'], None, None, False, True, 826, "monthname(TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'monthname', 'scalar', 'The (English) name of the month', None, 'VARCHAR', ['ts'], ['TIMESTAMP'], None, None, False, True, 826, "monthname(TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'monthname', 'scalar', 'The (English) name of the month', None, 'VARCHAR', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 826, "monthname(TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'month', 'scalar', 'Extract the month component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 824, "month(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'month', 'scalar', 'Extract the month component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 824, "month(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'month', 'scalar', 'Extract the month component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 824, "month(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'month', 'scalar', 'Extract the month component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 824, "month(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'mismatches', 'scalar', 'The number of positions with different characters for 2 strings of equal length. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 820, "hamming('duck','luck')", 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'SMALLINT', ['x'], ['SMALLINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'INTEGER', ['x'], ['INTEGER'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'HUGEINT', ['x'], ['HUGEINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'UTINYINT', ['x'], ['UTINYINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'USMALLINT', ['x'], ['USMALLINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'UINTEGER', ['x'], ['UINTEGER'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'UBIGINT', ['x'], ['UBIGINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'UHUGEINT', ['x'], ['UHUGEINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'DATE', ['x'], ['DATE'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TIMESTAMP', ['x'], ['TIMESTAMP'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TIME', ['x'], ['TIME'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TIMESTAMP WITH TIME ZONE', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TIME WITH TIME ZONE', ['x'], ['TIME WITH TIME ZONE'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'INTERVAL', ['x'], ['INTERVAL'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'VARCHAR', ['x'], ['ANY'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min', 'aggregate', 'Returns the minimum value present in arg.', None, 'DECIMAL', ['arg'], ['DECIMAL'], None, None, False, True, 814, 'min(A)', 'CONSISTENT'), ('system', '0', 'main', 'min', 'aggregate', 'Returns the minimum value present in arg.', None, 'ANY', ['arg'], ['ANY'], None, None, False, True, 814, 'min(A)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['SMALLINT'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['INTEGER'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['BIGINT'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['HUGEINT'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max', 'aggregate', 'Returns the maximum value present in arg.', None, 'DECIMAL', ['arg'], ['DECIMAL'], None, None, False, True, 792, 'max(A)', 'CONSISTENT'), ('system', '0', 'main', 'max', 'aggregate', 'Returns the maximum value present in arg.', None, 'ANY', ['arg'], ['ANY'], None, None, False, True, 792, 'max(A)', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['DATE'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['TIMESTAMP'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['TIME'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['TIME WITH TIME ZONE'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'variance', 'aggregate', 'Returns the sample variance of all input values.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 1052, '(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)', 'CONSISTENT'), ('system', '0', 'main', 'var_pop', 'aggregate', 'Returns the population variance.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 1048, None, 'CONSISTENT'), ('system', '0', 'main', 'var_samp', 'aggregate', 'Returns the sample variance of all input values.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 1050, '(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)', 'CONSISTENT'), ('system', '0', 'main', 'listagg', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str'], ['ANY'], None, None, False, True, 756, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'listagg', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str', 'arg'], ['ANY', 'VARCHAR'], None, None, False, True, 756, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'list', 'aggregate', 'Returns a LIST containing all the values of a column.', None, 'LIST', ['arg'], ['ANY'], None, None, False, True, 718, 'list(A)', 'CONSISTENT'), ('system', '0', 'main', 'last', 'aggregate', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 106, None, 'CONSISTENT'), ('system', '0', 'main', 'last', 'aggregate', None, None, 'ANY', ['col0'], ['ANY'], None, None, False, True, 106, None, 'CONSISTENT'), ('system', '0', 'main', 'kurtosis_pop', 'aggregate', 'Returns the excess kurtosis (Fisher’s definition) of all input values, without bias correction', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 700, None, 'CONSISTENT'), ('system', '0', 'main', 'kurtosis', 'aggregate', 'Returns the excess kurtosis (Fisher’s definition) of all input values, with a bias correction according to the sample size', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 698, None, 'CONSISTENT'), ('system', '0', 'main', 'kahan_sum', 'aggregate', 'Calculates the sum using a more accurate floating point summation (Kahan Sum).', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 696, 'kahan_sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['TINYINT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['SMALLINT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['INTEGER'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['BIGINT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['HUGEINT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIMESTAMP', ['x'], ['DATE'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIMESTAMP', ['x'], ['TIMESTAMP'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIME', ['x'], ['TIME'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIMESTAMP WITH TIME ZONE', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIME WITH TIME ZONE', ['x'], ['TIME WITH TIME ZONE'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'INTERVAL', ['x'], ['INTERVAL'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'VARCHAR', ['x'], ['ANY'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['BOOLEAN'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['UTINYINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['USMALLINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['UINTEGER'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['UBIGINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TINYINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['SMALLINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['INTEGER'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['BIGINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['FLOAT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['DOUBLE'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP_S'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP_MS'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP_NS'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIME'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIME WITH TIME ZONE'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['DATE'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['ANY'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'group_concat', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str'], ['ANY'], None, None, False, True, 662, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'group_concat', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str', 'arg'], ['ANY', 'VARCHAR'], None, None, False, True, 662, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'fsum', 'aggregate', 'Calculates the sum using a more accurate floating point summation (Kahan Sum).', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 640, 'kahan_sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum_no_overflow', 'aggregate', 'Internal only. Calculates the sum value for all tuples in arg without overflow checks.', None, 'HUGEINT', ['arg'], ['INTEGER'], None, None, False, True, 968, 'sum_no_overflow(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum_no_overflow', 'aggregate', 'Internal only. Calculates the sum value for all tuples in arg without overflow checks.', None, 'HUGEINT', ['arg'], ['BIGINT'], None, None, False, True, 968, 'sum_no_overflow(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum_no_overflow', 'aggregate', 'Internal only. Calculates the sum value for all tuples in arg without overflow checks.', None, 'DECIMAL', ['arg'], ['DECIMAL'], None, None, False, True, 968, 'sum_no_overflow(A)', 'CONSISTENT'), ('system', '0', 'main', 'first', 'aggregate', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 102, None, 'CONSISTENT'), ('system', '0', 'main', 'first', 'aggregate', None, None, 'ANY', ['col0'], ['ANY'], None, None, False, True, 102, None, 'CONSISTENT'), ('system', '0', 'main', 'favg', 'aggregate', 'Calculates the average using a more accurate floating point summation (Kahan Sum)', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 618, 'favg(A)', 'CONSISTENT'), ('system', '0', 'main', 'product', 'aggregate', 'Calculates the product of all tuples in arg.', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 852, 'product(A)', 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DECIMAL', ['x', 'pos'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DECIMAL[]', ['x', 'pos'], ['DECIMAL', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TINYINT', ['x', 'pos'], ['TINYINT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TINYINT[]', ['x', 'pos'], ['TINYINT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'SMALLINT', ['x', 'pos'], ['SMALLINT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'SMALLINT[]', ['x', 'pos'], ['SMALLINT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTEGER', ['x', 'pos'], ['INTEGER', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTEGER[]', ['x', 'pos'], ['INTEGER', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'BIGINT', ['x', 'pos'], ['BIGINT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'BIGINT[]', ['x', 'pos'], ['BIGINT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'HUGEINT', ['x', 'pos'], ['HUGEINT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'HUGEINT[]', ['x', 'pos'], ['HUGEINT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'FLOAT', ['x', 'pos'], ['FLOAT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'FLOAT[]', ['x', 'pos'], ['FLOAT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DOUBLE', ['x', 'pos'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DOUBLE[]', ['x', 'pos'], ['DOUBLE', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DATE', ['x', 'pos'], ['DATE', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DATE[]', ['x', 'pos'], ['DATE', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP[]', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME', ['x', 'pos'], ['TIME', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME[]', ['x', 'pos'], ['TIME', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP WITH TIME ZONE', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP WITH TIME ZONE[]', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME WITH TIME ZONE', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME WITH TIME ZONE[]', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTERVAL', ['x', 'pos'], ['INTERVAL', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTERVAL[]', ['x', 'pos'], ['INTERVAL', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'VARCHAR', ['x', 'pos'], ['ANY', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'VARCHAR[]', ['x', 'pos'], ['ANY', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DECIMAL', ['x', 'pos'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DECIMAL[]', ['x', 'pos'], ['DECIMAL', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['TINYINT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['TINYINT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['SMALLINT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['SMALLINT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['INTEGER', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['INTEGER', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['BIGINT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['BIGINT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['HUGEINT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['HUGEINT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'FLOAT', ['x', 'pos'], ['FLOAT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'FLOAT[]', ['x', 'pos'], ['FLOAT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['DOUBLE', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP', ['x', 'pos'], ['DATE', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP[]', ['x', 'pos'], ['DATE', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP[]', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIME', ['x', 'pos'], ['TIME', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIME[]', ['x', 'pos'], ['TIME', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP WITH TIME ZONE', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP WITH TIME ZONE[]', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIME WITH TIME ZONE', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIME WITH TIME ZONE[]', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DECIMAL', ['x', 'pos'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DECIMAL[]', ['x', 'pos'], ['DECIMAL', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TINYINT', ['x', 'pos'], ['TINYINT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TINYINT[]', ['x', 'pos'], ['TINYINT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'SMALLINT', ['x', 'pos'], ['SMALLINT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'SMALLINT[]', ['x', 'pos'], ['SMALLINT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTEGER', ['x', 'pos'], ['INTEGER', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTEGER[]', ['x', 'pos'], ['INTEGER', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'BIGINT', ['x', 'pos'], ['BIGINT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'BIGINT[]', ['x', 'pos'], ['BIGINT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'HUGEINT', ['x', 'pos'], ['HUGEINT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'HUGEINT[]', ['x', 'pos'], ['HUGEINT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'FLOAT', ['x', 'pos'], ['FLOAT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'FLOAT[]', ['x', 'pos'], ['FLOAT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DOUBLE', ['x', 'pos'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DOUBLE[]', ['x', 'pos'], ['DOUBLE', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DATE', ['x', 'pos'], ['DATE', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DATE[]', ['x', 'pos'], ['DATE', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP[]', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME', ['x', 'pos'], ['TIME', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME[]', ['x', 'pos'], ['TIME', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP WITH TIME ZONE', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP WITH TIME ZONE[]', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME WITH TIME ZONE', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME WITH TIME ZONE[]', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTERVAL', ['x', 'pos'], ['INTERVAL', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTERVAL[]', ['x', 'pos'], ['INTERVAL', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'VARCHAR', ['x', 'pos'], ['ANY', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'VARCHAR[]', ['x', 'pos'], ['ANY', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['USMALLINT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['UINTEGER'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['UBIGINT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['FLOAT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['SMALLINT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['INTEGER'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['BIGINT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['ANY'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['TIMESTAMP'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'covar_samp', 'aggregate', 'Returns the sample covariance for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 532, '(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / (COUNT(*) - 1)', 'CONSISTENT'), ('system', '0', 'main', 'covar_pop', 'aggregate', 'Returns the population covariance of input values.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 530, '(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'count_star', 'aggregate', None, None, 'BIGINT', [], [], None, None, False, True, 98, None, 'CONSISTENT'), ('system', '0', 'main', 'count', 'aggregate', None, None, 'BIGINT', ['col0'], ['ANY'], None, None, False, True, 100, None, 'CONSISTENT'), ('system', '0', 'main', 'count', 'aggregate', None, None, 'BIGINT', [], [], None, None, False, True, 100, None, 'CONSISTENT'), ('system', '0', 'main', 'corr', 'aggregate', 'Returns the correlation coefficient for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 524, 'COVAR_POP(y, x) / (STDDEV_POP(x) * STDDEV_POP(y))', 'CONSISTENT'), ('system', '0', 'main', 'bool_or', 'aggregate', 'Returns TRUE if any input value is TRUE, otherwise FALSE.', None, 'BOOLEAN', ['arg'], ['BOOLEAN'], None, None, False, True, 510, 'bool_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bool_and', 'aggregate', 'Returns TRUE if every input value is TRUE, otherwise FALSE.', None, 'BOOLEAN', ['arg'], ['BOOLEAN'], None, None, False, True, 508, 'bool_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'TINYINT', ['arg'], ['TINYINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'SMALLINT', ['arg'], ['SMALLINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'INTEGER', ['arg'], ['INTEGER'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'BIGINT', ['arg'], ['BIGINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'HUGEINT', ['arg'], ['HUGEINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'UTINYINT', ['arg'], ['UTINYINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'USMALLINT', ['arg'], ['USMALLINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'UINTEGER', ['arg'], ['UINTEGER'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'UBIGINT', ['arg'], ['UBIGINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'UHUGEINT', ['arg'], ['UHUGEINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'BIT', ['arg'], ['BIT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'TINYINT', ['arg'], ['TINYINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'SMALLINT', ['arg'], ['SMALLINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'INTEGER', ['arg'], ['INTEGER'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'BIGINT', ['arg'], ['BIGINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'HUGEINT', ['arg'], ['HUGEINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'UTINYINT', ['arg'], ['UTINYINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'USMALLINT', ['arg'], ['USMALLINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'UINTEGER', ['arg'], ['UINTEGER'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'UBIGINT', ['arg'], ['UBIGINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'UHUGEINT', ['arg'], ['UHUGEINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'BIT', ['arg'], ['BIT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'TINYINT', ['arg'], ['TINYINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'SMALLINT', ['arg'], ['SMALLINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'INTEGER', ['arg'], ['INTEGER'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'BIGINT', ['arg'], ['BIGINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'HUGEINT', ['arg'], ['HUGEINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'UTINYINT', ['arg'], ['UTINYINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'USMALLINT', ['arg'], ['USMALLINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'UINTEGER', ['arg'], ['UINTEGER'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'UBIGINT', ['arg'], ['UBIGINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'UHUGEINT', ['arg'], ['UHUGEINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'BIT', ['arg'], ['BIT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['TINYINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['TINYINT', 'TINYINT', 'TINYINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['SMALLINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['SMALLINT', 'SMALLINT', 'SMALLINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['INTEGER'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['INTEGER', 'INTEGER', 'INTEGER'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['BIGINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['HUGEINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['HUGEINT', 'HUGEINT', 'HUGEINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['UTINYINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['UTINYINT', 'UTINYINT', 'UTINYINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['USMALLINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['USMALLINT', 'USMALLINT', 'USMALLINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['UINTEGER'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['UINTEGER', 'UINTEGER', 'UINTEGER'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['UBIGINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['UBIGINT', 'UBIGINT', 'UBIGINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['UHUGEINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['UHUGEINT', 'UHUGEINT', 'UHUGEINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['SMALLINT'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['INTEGER'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['BIGINT'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['HUGEINT'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'regr_avgx', 'aggregate', 'Returns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 874, None, 'CONSISTENT'), ('system', '0', 'main', 'regr_avgy', 'aggregate', 'Returns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 876, None, 'CONSISTENT'), ('system', '0', 'main', 'regr_count', 'aggregate', 'Returns the number of non-null number pairs in a group.', None, 'UINTEGER', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 878, '(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'regr_intercept', 'aggregate', 'Returns the intercept of the univariate linear regression line for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 880, 'AVG(y)-REGR_SLOPE(y,x)*AVG(x)', 'CONSISTENT'), ('system', '0', 'main', 'regr_r2', 'aggregate', 'Returns the coefficient of determination for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 882, None, 'CONSISTENT'), ('system', '0', 'main', 'regr_slope', 'aggregate', 'Returns the slope of the linear regression line for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 884, 'COVAR_POP(x,y) / VAR_POP(x)', 'CONSISTENT'), ('system', '0', 'main', 'regr_sxx', 'aggregate', None, None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 886, 'REGR_COUNT(y, x) * VAR_POP(x)', 'CONSISTENT'), ('system', '0', 'main', 'regr_sxy', 'aggregate', 'Returns the population covariance of input values', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 888, 'REGR_COUNT(y, x) * COVAR_POP(y, x)', 'CONSISTENT'), ('system', '0', 'main', 'regr_syy', 'aggregate', None, None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 890, 'REGR_COUNT(y, x) * VAR_POP(y)', 'CONSISTENT'), ('system', '0', 'main', 'sumkahan', 'aggregate', 'Calculates the sum using a more accurate floating point summation (Kahan Sum).', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 970, 'kahan_sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'array_agg', 'aggregate', 'Returns a LIST containing all the values of a column.', None, 'LIST', ['arg'], ['ANY'], None, None, False, True, 440, 'list(A)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DECIMAL', ['x', 'quantile'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DECIMAL', ['x', 'quantile', 'sample_size'], ['DECIMAL', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DECIMAL[]', ['x', 'quantile'], ['DECIMAL', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DECIMAL[]', ['x', 'quantile', 'sample_size'], ['DECIMAL', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'TINYINT', ['x', 'quantile'], ['TINYINT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'TINYINT', ['x', 'quantile', 'sample_size'], ['TINYINT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'TINYINT[]', ['x', 'quantile'], ['TINYINT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'TINYINT[]', ['x', 'quantile', 'sample_size'], ['TINYINT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'SMALLINT', ['x', 'quantile'], ['SMALLINT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'SMALLINT', ['x', 'quantile', 'sample_size'], ['SMALLINT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'SMALLINT[]', ['x', 'quantile'], ['SMALLINT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'SMALLINT[]', ['x', 'quantile', 'sample_size'], ['SMALLINT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'INTEGER', ['x', 'quantile'], ['INTEGER', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'INTEGER', ['x', 'quantile', 'sample_size'], ['INTEGER', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'INTEGER[]', ['x', 'quantile'], ['INTEGER', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'INTEGER[]', ['x', 'quantile', 'sample_size'], ['INTEGER', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'BIGINT', ['x', 'quantile'], ['BIGINT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'BIGINT', ['x', 'quantile', 'sample_size'], ['BIGINT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'BIGINT[]', ['x', 'quantile'], ['BIGINT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'BIGINT[]', ['x', 'quantile', 'sample_size'], ['BIGINT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'HUGEINT', ['x', 'quantile'], ['HUGEINT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'HUGEINT', ['x', 'quantile', 'sample_size'], ['HUGEINT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'HUGEINT[]', ['x', 'quantile'], ['HUGEINT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'HUGEINT[]', ['x', 'quantile', 'sample_size'], ['HUGEINT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'FLOAT', ['x', 'quantile'], ['FLOAT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'FLOAT', ['x', 'quantile', 'sample_size'], ['FLOAT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'FLOAT[]', ['x', 'quantile'], ['FLOAT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'FLOAT[]', ['x', 'quantile', 'sample_size'], ['FLOAT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DOUBLE', ['x', 'quantile'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DOUBLE', ['x', 'quantile', 'sample_size'], ['DOUBLE', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DOUBLE[]', ['x', 'quantile'], ['DOUBLE', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DOUBLE[]', ['x', 'quantile', 'sample_size'], ['DOUBLE', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arbitrary', 'aggregate', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 104, None, 'CONSISTENT'), ('system', '0', 'main', 'arbitrary', 'aggregate', None, None, 'ANY', ['col0'], ['ANY'], None, None, False, True, 104, None, 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'DECIMAL', ['x', 'pos'], ['DECIMAL', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'SMALLINT', ['x', 'pos'], ['SMALLINT', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'INTEGER', ['x', 'pos'], ['INTEGER', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'BIGINT', ['x', 'pos'], ['BIGINT', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'HUGEINT', ['x', 'pos'], ['HUGEINT', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'DOUBLE', ['x', 'pos'], ['DOUBLE', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'DECIMAL[]', ['x', 'pos'], ['DECIMAL', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'TINYINT[]', ['x', 'pos'], ['TINYINT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'SMALLINT[]', ['x', 'pos'], ['SMALLINT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'INTEGER[]', ['x', 'pos'], ['INTEGER', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'BIGINT[]', ['x', 'pos'], ['BIGINT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'HUGEINT[]', ['x', 'pos'], ['HUGEINT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'FLOAT[]', ['x', 'pos'], ['FLOAT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'DOUBLE[]', ['x', 'pos'], ['DOUBLE', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['UTINYINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['USMALLINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['UINTEGER'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['UBIGINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['UHUGEINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['TINYINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['SMALLINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['HUGEINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['FLOAT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['DOUBLE'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['TIMESTAMP'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['BLOB'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['ANY'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'any_value', 'aggregate', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 108, None, 'CONSISTENT'), ('system', '0', 'main', 'any_value', 'aggregate', None, None, 'ANY', ['col0'], ['ANY'], None, None, False, True, 108, None, 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'DECIMAL', ['arg'], ['DECIMAL'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'HUGEINT', ['arg'], ['SMALLINT'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'HUGEINT', ['arg'], ['INTEGER'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'HUGEINT', ['arg'], ['BIGINT'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'HUGEINT', ['arg'], ['HUGEINT'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sem', 'aggregate', 'Returns the standard error of the mean', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 914, None, 'CONSISTENT'), ('system', '0', 'main', 'string_agg', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str'], ['ANY'], None, None, False, True, 950, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'string_agg', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str', 'arg'], ['ANY', 'VARCHAR'], None, None, False, True, 950, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'stddev_samp', 'aggregate', 'Returns the sample standard deviation', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 942, 'sqrt(var_samp(x))', 'CONSISTENT'), ('system', '0', 'main', 'stddev_pop', 'aggregate', 'Returns the population standard deviation.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 940, 'sqrt(var_pop(x))', 'CONSISTENT'), ('system', '0', 'main', 'stddev', 'aggregate', 'Returns the sample standard deviation', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 938, 'sqrt(var_samp(x))', 'CONSISTENT'), ('system', '0', 'main', 'skewness', 'aggregate', 'Returns the skewness of all input values.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 928, 'skewness(A)', 'CONSISTENT'), ('system', '0', 'main', 'tpcds', 'pragma', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 1473, None, None), ('system', '0', 'main', 'table_info', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 300, None, None), ('system', '0', 'main', 'tpch', 'pragma', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 1087, None, None), ('system', '0', 'main', 'storage_info', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 302, None, None), ('system', '0', 'main', 'show_tables_expanded', 'pragma', None, None, None, [], [], None, None, None, True, 308, None, None), ('system', '0', 'main', 'show_tables', 'pragma', None, None, None, [], [], None, None, None, True, 306, None, None), ('system', '0', 'main', 'show_databases', 'pragma', None, None, None, [], [], None, None, None, True, 310, None, None), ('system', '0', 'main', 'show', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 316, None, None), ('system', '0', 'main', 'user_agent', 'pragma', None, None, None, [], [], None, None, None, True, 332, None, None), ('system', '0', 'main', 'verify_external', 'pragma', None, None, None, [], [], None, None, None, True, 346, None, None), ('system', '0', 'main', 'verify_fetch_row', 'pragma', None, None, None, [], [], None, None, None, True, 350, None, None), ('system', '0', 'main', 'platform', 'pragma', None, None, None, [], [], None, None, None, True, 320, None, None), ('system', '0', 'main', 'verify_parallelism', 'pragma', None, None, None, [], [], None, None, None, True, 358, None, None), ('system', '0', 'main', 'metadata_info', 'pragma', None, None, None, [], [], None, None, None, True, 304, None, None), ('system', '0', 'main', 'json_execute_serialized_sql', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1161, None, None), ('system', '0', 'main', 'import_database', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 326, None, None), ('system', '0', 'main', 'functions', 'pragma', None, None, None, [], [], None, None, None, True, 324, None, None), ('system', '0', 'main', 'force_checkpoint', 'pragma', None, None, None, [], [], None, None, None, True, 370, None, None), ('system', '0', 'main', 'enable_verification', 'pragma', None, None, None, [], [], None, None, None, True, 342, None, None), ('system', '0', 'main', 'enable_progress_bar', 'pragma', None, None, None, [], [], None, None, None, True, 372, None, None), ('system', '0', 'main', 'enable_profiling', 'pragma', None, None, None, [], [], None, None, None, True, 336, None, None), ('system', '0', 'main', 'enable_profile', 'pragma', None, None, None, [], [], None, None, None, True, 334, None, None), ('system', '0', 'main', 'enable_print_progress_bar', 'pragma', None, None, None, [], [], None, None, None, True, 376, None, None), ('system', '0', 'main', 'enable_optimizer', 'pragma', None, None, None, [], [], None, None, None, True, 366, None, None), ('system', '0', 'main', 'enable_object_cache', 'pragma', None, None, None, [], [], None, None, None, True, 362, None, None), ('system', '0', 'main', 'enable_checkpoint_on_shutdown', 'pragma', None, None, None, [], [], None, None, None, True, 380, None, None), ('system', '0', 'main', 'disable_verify_serializer', 'pragma', None, None, None, [], [], None, None, None, True, 356, None, None), ('system', '0', 'main', 'disable_verify_parallelism', 'pragma', None, None, None, [], [], None, None, None, True, 360, None, None), ('system', '0', 'main', 'disable_verify_fetch_row', 'pragma', None, None, None, [], [], None, None, None, True, 352, None, None), ('system', '0', 'main', 'disable_verify_external', 'pragma', None, None, None, [], [], None, None, None, True, 348, None, None), ('system', '0', 'main', 'verify_serializer', 'pragma', None, None, None, [], [], None, None, None, True, 354, None, None), ('system', '0', 'main', 'version', 'pragma', None, None, None, [], [], None, None, None, True, 318, None, None), ('system', '0', 'main', 'add_parquet_key', 'pragma', None, None, None, ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, None, True, 1469, None, None), ('system', '0', 'main', 'disable_verification', 'pragma', None, None, None, [], [], None, None, None, True, 344, None, None), ('system', '0', 'main', 'disable_progress_bar', 'pragma', None, None, None, [], [], None, None, None, True, 374, None, None), ('system', '0', 'main', 'disable_profiling', 'pragma', None, None, None, [], [], None, None, None, True, 340, None, None), ('system', '0', 'main', 'disable_profile', 'pragma', None, None, None, [], [], None, None, None, True, 338, None, None), ('system', '0', 'main', 'disable_print_progress_bar', 'pragma', None, None, None, [], [], None, None, None, True, 378, None, None), ('system', '0', 'main', 'disable_optimizer', 'pragma', None, None, None, [], [], None, None, None, True, 368, None, None), ('system', '0', 'main', 'disable_object_cache', 'pragma', None, None, None, [], [], None, None, None, True, 364, None, None), ('system', '0', 'main', 'disable_checkpoint_on_shutdown', 'pragma', None, None, None, [], [], None, None, None, True, 382, None, None), ('system', '0', 'main', 'database_size', 'pragma', None, None, None, [], [], None, None, None, True, 322, None, None), ('system', '0', 'main', 'database_list', 'pragma', None, None, None, [], [], None, None, None, True, 312, None, None), ('system', '0', 'main', 'copy_database', 'pragma', None, None, None, ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, None, True, 328, None, None), ('system', '0', 'main', 'collations', 'pragma', None, None, None, [], [], None, None, None, True, 314, None, None), ('system', '0', 'main', 'all_profiling_output', 'pragma', None, None, None, [], [], None, None, None, True, 330, None, None), ('system', '0', 'main', 'split_part', 'macro', None, None, None, ['string', 'delimiter', 'position'], [None, None, None], None, 'COALESCE(string_split(string, "delimiter")["position"], \'\')', None, True, 1631, None, None), ('system', '0', 'main', 'session_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1614, None, None), ('system', '0', 'main', 'round_even', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'CASE  WHEN ((((abs(x) * power(10, (n + 1))) % 10) = 5)) THEN ((round((x / 2), n) * 2)) ELSE round(x, n) END', None, True, 1615, None, None), ('system', '0', 'main', 'roundbankers', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'round_even(x, n)', None, True, 1616, None, None), ('system', '0', 'main', 'regexp_split_to_table', 'macro', None, None, None, ['text', 'pattern'], [None, None], None, 'unnest(string_split_regex("text", pattern))', None, True, 1675, None, None), ('system', '0', 'main', 'nullif', 'macro', None, None, None, ['a', 'b'], [None, None], None, 'CASE  WHEN ((a = b)) THEN (NULL) ELSE a END', None, True, 1617, None, None), ('duckdb', '1080', 'main', '&&', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1527, None, None), ('system', '0', 'main', 'list_var_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_samp')", None, True, 1646, None, None), ('system', '0', 'main', 'list_var_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_pop')", None, True, 1647, None, None), ('system', '0', 'main', 'list_sum', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sum')", None, True, 1668, None, None), ('system', '0', 'main', 'list_string_agg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'string_agg')", None, True, 1669, None, None), ('system', '0', 'main', 'list_stddev_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_samp')", None, True, 1649, None, None), ('system', '0', 'main', 'list_stddev_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_pop')", None, True, 1648, None, None), ('system', '0', 'main', 'list_skewness', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'skewness')", None, True, 1667, None, None), ('system', '0', 'main', 'list_sem', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sem')", None, True, 1650, None, None), ('system', '0', 'main', 'list_reverse', 'macro', None, None, None, ['l'], [None], None, 'l[:-:-1]', None, True, 1634, None, None), ('system', '0', 'main', 'list_product', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'product')", None, True, 1666, None, None), ('system', '0', 'main', 'list_prepend', 'macro', None, None, None, ['e', 'l'], [None, None], None, 'list_concat(list_value(e), l)', None, True, 1620, None, None), ('system', '0', 'main', 'list_mode', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mode')", None, True, 1670, None, None), ('system', '0', 'main', 'list_min', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'min')", None, True, 1664, None, None), ('system', '0', 'main', 'list_median', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'median')", None, True, 1671, None, None), ('system', '0', 'main', 'list_max', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'max')", None, True, 1665, None, None), ('system', '0', 'main', 'list_mad', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mad')", None, True, 1672, None, None), ('system', '0', 'main', 'list_last', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'last')", None, True, 1659, None, None), ('system', '0', 'main', 'list_kurtosis_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis_pop')", None, True, 1663, None, None), ('system', '0', 'main', 'list_kurtosis', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis')", None, True, 1662, None, None), ('system', '0', 'main', 'list_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_filter(list_distinct(l1), (variable_intersect -> list_contains(l2, variable_intersect)))', None, True, 1636, None, None), ('system', '0', 'main', 'user', 'macro', None, None, None, [], [], None, 'current_user', None, True, 1613, None, None), ('system', '0', 'main', 'list_histogram', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'histogram')", None, True, 1673, None, None), ('system', '0', 'main', 'list_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l1, (variable_has_any -> list_contains(l2, variable_has_any)))) > 0)) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1638, None, None), ('system', '0', 'main', 'list_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l2, (variable_has_all -> list_contains(l1, variable_has_all)))) = len(list_filter(l2, (variable_has_all -> (variable_has_all IS NOT NULL)))))) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1641, None, None), ('system', '0', 'main', 'list_first', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'first')", None, True, 1660, None, None), ('system', '0', 'main', 'list_entropy', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'entropy')", None, True, 1658, None, None), ('system', '0', 'main', 'list_count', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'count')", None, True, 1657, None, None), ('system', '0', 'main', 'list_bool_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_or')", None, True, 1656, None, None), ('system', '0', 'main', 'list_bool_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_and')", None, True, 1655, None, None), ('system', '0', 'main', 'list_bit_xor', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_xor')", None, True, 1652, None, None), ('system', '0', 'main', 'list_bit_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_or')", None, True, 1653, None, None), ('system', '0', 'main', 'list_bit_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_and')", None, True, 1654, None, None), ('system', '0', 'main', 'list_avg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'avg')", None, True, 1645, None, None), ('system', '0', 'main', 'list_approx_count_distinct', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'approx_count_distinct')", None, True, 1651, None, None), ('system', '0', 'main', 'list_append', 'macro', None, None, None, ['l', 'e'], [None, None], None, 'list_concat(l, list_value(e))', None, True, 1618, None, None), ('system', '0', 'main', 'list_any_value', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'any_value')", None, True, 1661, None, None), ('system', '0', 'main', 'json_group_structure', 'macro', None, None, None, ['x'], [None], None, "(json_structure(json_group_array(x)) -> '0')", None, True, 1169, None, None), ('system', '0', 'main', 'json_group_object', 'macro', None, None, None, ['name', 'value'], [None, None], None, 'to_json(map(list("name"), list("value")))', None, True, 1167, None, None), ('system', '0', 'main', 'json_group_array', 'macro', None, None, None, ['x'], [None], None, 'to_json(list(x))', None, True, 1165, None, None), ('system', '0', 'main', 'json', 'macro', None, None, None, ['x'], [None], None, "json_extract(x, '$')", None, True, 1171, None, None), ('system', '0', 'main', 'get_block_size', 'macro', None, None, None, ['db_name'], [None], None, '(SELECT block_size FROM pragma_database_size() WHERE (database_name = db_name))', None, True, 1676, None, None), ('system', '0', 'main', 'geometric_mean', 'macro', None, None, None, ['x'], [None], None, 'geomean(x)', None, True, 1633, None, None), ('system', '0', 'main', 'geomean', 'macro', None, None, None, ['x'], [None], None, 'exp(avg(ln(x)))', None, True, 1632, None, None), ('system', '0', 'main', 'generate_subscripts', 'macro', None, None, None, ['arr', 'dim'], [None, None], None, 'unnest(generate_series(1, array_length(arr, dim)))', None, True, 1627, None, None), ('system', '0', 'main', 'fmod', 'macro', None, None, None, ['x', 'y'], [None, None], None, '(x - (y * floor((x / y))))', None, True, 1629, None, None), ('system', '0', 'main', 'fdiv', 'macro', None, None, None, ['x', 'y'], [None, None], None, 'floor((x / y))', None, True, 1628, None, None), ('system', '0', 'main', 'date_add', 'macro', None, None, None, ['date', 'interval'], [None, None], None, '(date + "interval")', None, True, 1674, None, None), ('system', '0', 'main', 'current_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1611, None, None), ('system', '0', 'main', 'current_role', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1610, None, None), ('system', '0', 'main', 'current_catalog', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1612, None, None), ('system', '0', 'main', 'count_if', 'macro', None, None, None, ['l'], [None], None, 'sum(CASE  WHEN (l) THEN (1) ELSE 0 END)', None, True, 1630, None, None), ('system', '0', 'main', 'array_to_string', 'macro', None, None, None, ['arr', 'sep'], [None, None], None, "list_aggr(CAST(arr AS VARCHAR[]), 'string_agg', sep)", None, True, 1626, None, None), ('system', '0', 'main', 'array_reverse', 'macro', None, None, None, ['l'], [None], None, 'list_reverse(l)', None, True, 1635, None, None), ('system', '0', 'main', 'array_push_front', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(list_value(e), arr)', None, True, 1625, None, None), ('system', '0', 'main', 'array_push_back', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(arr, list_value(e))', None, True, 1624, None, None), ('system', '0', 'main', 'array_prepend', 'macro', None, None, None, ['el', 'arr'], [None, None], None, 'list_prepend(el, arr)', None, True, 1621, None, None), ('system', '0', 'main', 'array_pop_front', 'macro', None, None, None, ['arr'], [None], None, 'arr[2:]', None, True, 1623, None, None), ('system', '0', 'main', 'array_pop_back', 'macro', None, None, None, ['arr'], [None], None, 'arr[:(len(arr) - 1)]', None, True, 1622, None, None), ('system', '0', 'main', 'array_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_intersect(l1, l2)', None, True, 1637, None, None), ('system', '0', 'main', 'array_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1639, None, None), ('system', '0', 'main', 'array_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1642, None, None), ('system', '0', 'main', 'array_append', 'macro', None, None, None, ['arr', 'el'], [None, None], None, 'list_append(arr, el)', None, True, 1619, None, None), ('system', '0', 'main', '@>', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1643, None, None), ('system', '0', 'main', '<@', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l2, l1)', None, True, 1644, None, None), ('system', '0', 'main', '&&', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1640, None, None), ('duckdb', '1080', 'pg_catalog', 'shobj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1596, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_type_is_visible', 'macro', None, None, None, ['type_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1608, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_typeof', 'macro', None, None, None, ['expression'], [None], None, 'lower(typeof(expression))', None, True, 1572, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_ts_template_is_visible', 'macro', None, None, None, ['template_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1607, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_ts_parser_is_visible', 'macro', None, None, None, ['parser_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1606, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_ts_dict_is_visible', 'macro', None, None, None, ['dict_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1605, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_ts_config_is_visible', 'macro', None, None, None, ['config_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1604, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_table_is_visible', 'macro', None, None, None, ['table_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1603, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_size_pretty', 'macro', None, None, None, ['bytes'], [None], None, 'format_bytes(bytes)', None, True, 1609, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_postmaster_start_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1571, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_opfamily_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1602, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_operator_is_visible', 'macro', None, None, None, ['operator_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1601, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_opclass_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1600, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_my_temp_schema', 'macro', None, None, None, [], [], None, '0', None, True, 1568, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_is_other_temp_schema', 'macro', None, None, None, ['schema_id'], [None], None, "CAST('f' AS BOOLEAN)", None, True, 1569, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_has_role', 'macro', None, None, None, ['user', 'role', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1593, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_get_viewdef', 'macro', None, None, None, ['oid'], [None], None, '(SELECT "sql" FROM duckdb_views() AS v WHERE (v.view_oid = oid))', None, True, 1588, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_get_expr', 'macro', None, None, None, ['pg_node_tree', 'relation_oid'], [None, None], None, 'pg_node_tree', None, True, 1590, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_get_constraintdef', 'macro', None, None, None, ['constraint_oid', 'pretty_bool'], [None, None], None, '(SELECT constraint_text FROM duckdb_constraints() AS d_constraint WHERE ((d_constraint.table_oid = (constraint_oid // 1000000)) AND (d_constraint.constraint_index = (constraint_oid % 1000000))))', None, True, 1589, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_function_is_visible', 'macro', None, None, None, ['function_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1599, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_conversion_is_visible', 'macro', None, None, None, ['conversion_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1598, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_conf_load_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1570, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_collation_is_visible', 'macro', None, None, None, ['collation_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1597, None, None), ('duckdb', '1080', 'pg_catalog', 'obj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1595, None, None), ('duckdb', '1080', 'pg_catalog', 'inet_server_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1567, None, None), ('duckdb', '1080', 'pg_catalog', 'inet_server_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1566, None, None), ('duckdb', '1080', 'pg_catalog', 'inet_client_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1565, None, None), ('duckdb', '1080', 'pg_catalog', 'inet_client_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1564, None, None), ('duckdb', '1080', 'pg_catalog', 'has_table_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1586, None, None), ('duckdb', '1080', 'pg_catalog', 'has_tablespace_privilege', 'macro', None, None, None, ['tablespace', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1587, None, None), ('duckdb', '1080', 'pg_catalog', 'has_server_privilege', 'macro', None, None, None, ['server', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1585, None, None), ('duckdb', '1080', 'pg_catalog', 'has_sequence_privilege', 'macro', None, None, None, ['sequence', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1584, None, None), ('duckdb', '1080', 'pg_catalog', 'has_schema_privilege', 'macro', None, None, None, ['schema', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1583, None, None), ('duckdb', '1080', 'pg_catalog', 'has_language_privilege', 'macro', None, None, None, ['language', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1582, None, None), ('duckdb', '1080', 'pg_catalog', 'has_function_privilege', 'macro', None, None, None, ['function', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1581, None, None), ('duckdb', '1080', 'pg_catalog', 'has_foreign_data_wrapper_privilege', 'macro', None, None, None, ['fdw', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1580, None, None), ('duckdb', '1080', 'pg_catalog', 'has_database_privilege', 'macro', None, None, None, ['database', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1579, None, None), ('duckdb', '1080', 'pg_catalog', 'has_column_privilege', 'macro', None, None, None, ['table', 'column', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1578, None, None), ('duckdb', '1080', 'pg_catalog', 'has_any_column_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1577, None, None), ('duckdb', '1080', 'pg_catalog', 'format_type', 'macro', None, None, None, ['type_oid', 'typemod'], [None, None], None, "((SELECT format_pg_type(logical_type, type_name) FROM duckdb_types() AS t WHERE (t.type_oid = type_oid)) || CASE  WHEN ((typemod > 0)) THEN (concat('(', (typemod // 1000), ',', (typemod % 1000), ')')) ELSE '' END)", None, True, 1592, None, None), ('duckdb', '1080', 'pg_catalog', 'format_pg_type', 'macro', None, None, None, ['logical_type', 'type_name'], [None, None], None, "CASE  WHEN ((logical_type = 'FLOAT')) THEN ('real') WHEN ((logical_type = 'DOUBLE')) THEN ('double precision') WHEN ((logical_type = 'DECIMAL')) THEN ('numeric') WHEN ((logical_type = 'ENUM')) THEN (lower(type_name)) WHEN ((logical_type = 'VARCHAR')) THEN ('character varying') WHEN ((logical_type = 'BLOB')) THEN ('bytea') WHEN ((logical_type = 'TIMESTAMP')) THEN ('timestamp without time zone') WHEN ((logical_type = 'TIME')) THEN ('time without time zone') ELSE lower(logical_type) END", None, True, 1591, None, None), ('duckdb', '1080', 'pg_catalog', 'current_schemas', 'macro', None, None, None, ['include_implicit'], [None], None, 'current_schemas(include_implicit)', None, True, 1576, None, None), ('duckdb', '1080', 'pg_catalog', 'current_schema', 'macro', None, None, None, [], [], None, 'current_schema()', None, True, 1575, None, None), ('duckdb', '1080', 'pg_catalog', 'current_query', 'macro', None, None, None, [], [], None, 'current_query()', None, True, 1574, None, None), ('duckdb', '1080', 'pg_catalog', 'current_database', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1573, None, None), ('duckdb', '1080', 'pg_catalog', 'col_description', 'macro', None, None, None, ['table_oid', 'column_number'], [None, None], None, 'NULL', None, True, 1594, None, None), ('duckdb', '1080', 'main', 'user', 'macro', None, None, None, [], [], None, 'current_user', None, True, 1500, None, None), ('duckdb', '1080', 'main', 'split_part', 'macro', None, None, None, ['string', 'delimiter', 'position'], [None, None, None], None, 'COALESCE(string_split(string, "delimiter")["position"], \'\')', None, True, 1518, None, None), ('duckdb', '1080', 'main', 'session_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1501, None, None), ('duckdb', '1080', 'main', 'round_even', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'CASE  WHEN ((((abs(x) * power(10, (n + 1))) % 10) = 5)) THEN ((round((x / 2), n) * 2)) ELSE round(x, n) END', None, True, 1502, None, None), ('duckdb', '1080', 'main', 'roundbankers', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'round_even(x, n)', None, True, 1503, None, None), ('duckdb', '1080', 'main', 'regexp_split_to_table', 'macro', None, None, None, ['text', 'pattern'], [None, None], None, 'unnest(string_split_regex("text", pattern))', None, True, 1562, None, None), ('duckdb', '1080', 'main', 'nullif', 'macro', None, None, None, ['a', 'b'], [None, None], None, 'CASE  WHEN ((a = b)) THEN (NULL) ELSE a END', None, True, 1504, None, None), ('duckdb', '1080', 'main', 'list_var_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_samp')", None, True, 1533, None, None), ('duckdb', '1080', 'main', 'list_var_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_pop')", None, True, 1534, None, None), ('duckdb', '1080', 'main', 'list_sum', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sum')", None, True, 1555, None, None), ('duckdb', '1080', 'main', 'list_string_agg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'string_agg')", None, True, 1556, None, None), ('duckdb', '1080', 'main', 'list_stddev_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_samp')", None, True, 1536, None, None), ('duckdb', '1080', 'main', 'list_stddev_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_pop')", None, True, 1535, None, None), ('duckdb', '1080', 'main', 'list_skewness', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'skewness')", None, True, 1554, None, None), ('duckdb', '1080', 'main', 'list_sem', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sem')", None, True, 1537, None, None), ('duckdb', '1080', 'main', 'list_reverse', 'macro', None, None, None, ['l'], [None], None, 'l[:-:-1]', None, True, 1521, None, None), ('duckdb', '1080', 'main', 'list_product', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'product')", None, True, 1553, None, None), ('duckdb', '1080', 'main', 'list_prepend', 'macro', None, None, None, ['e', 'l'], [None, None], None, 'list_concat(list_value(e), l)', None, True, 1507, None, None), ('duckdb', '1080', 'main', 'list_mode', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mode')", None, True, 1557, None, None), ('duckdb', '1080', 'main', 'list_min', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'min')", None, True, 1551, None, None), ('duckdb', '1080', 'main', 'list_median', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'median')", None, True, 1558, None, None), ('duckdb', '1080', 'main', 'list_max', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'max')", None, True, 1552, None, None), ('duckdb', '1080', 'main', 'list_mad', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mad')", None, True, 1559, None, None), ('duckdb', '1080', 'main', 'list_last', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'last')", None, True, 1546, None, None), ('duckdb', '1080', 'main', 'list_kurtosis_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis_pop')", None, True, 1550, None, None), ('duckdb', '1080', 'main', 'list_kurtosis', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis')", None, True, 1549, None, None), ('duckdb', '1080', 'main', 'list_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_filter(list_distinct(l1), (variable_intersect -> list_contains(l2, variable_intersect)))', None, True, 1523, None, None), ('duckdb', '1080', 'main', 'list_histogram', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'histogram')", None, True, 1560, None, None), ('duckdb', '1080', 'main', 'list_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l1, (variable_has_any -> list_contains(l2, variable_has_any)))) > 0)) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1525, None, None), ('duckdb', '1080', 'main', 'list_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l2, (variable_has_all -> list_contains(l1, variable_has_all)))) = len(list_filter(l2, (variable_has_all -> (variable_has_all IS NOT NULL)))))) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1528, None, None), ('duckdb', '1080', 'main', 'list_first', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'first')", None, True, 1547, None, None), ('duckdb', '1080', 'main', 'list_entropy', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'entropy')", None, True, 1545, None, None), ('duckdb', '1080', 'main', 'list_count', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'count')", None, True, 1544, None, None), ('duckdb', '1080', 'main', 'list_bool_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_or')", None, True, 1543, None, None), ('duckdb', '1080', 'main', 'list_bool_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_and')", None, True, 1542, None, None), ('duckdb', '1080', 'main', 'list_bit_xor', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_xor')", None, True, 1539, None, None), ('duckdb', '1080', 'main', 'list_bit_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_or')", None, True, 1540, None, None), ('duckdb', '1080', 'main', 'list_bit_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_and')", None, True, 1541, None, None), ('duckdb', '1080', 'main', 'list_avg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'avg')", None, True, 1532, None, None), ('duckdb', '1080', 'main', 'list_approx_count_distinct', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'approx_count_distinct')", None, True, 1538, None, None), ('duckdb', '1080', 'main', 'list_append', 'macro', None, None, None, ['l', 'e'], [None, None], None, 'list_concat(l, list_value(e))', None, True, 1505, None, None), ('duckdb', '1080', 'main', 'list_any_value', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'any_value')", None, True, 1548, None, None), ('duckdb', '1080', 'main', 'get_block_size', 'macro', None, None, None, ['db_name'], [None], None, '(SELECT block_size FROM pragma_database_size() WHERE (database_name = db_name))', None, True, 1563, None, None), ('duckdb', '1080', 'main', 'geometric_mean', 'macro', None, None, None, ['x'], [None], None, 'geomean(x)', None, True, 1520, None, None), ('duckdb', '1080', 'main', 'geomean', 'macro', None, None, None, ['x'], [None], None, 'exp(avg(ln(x)))', None, True, 1519, None, None), ('duckdb', '1080', 'main', 'generate_subscripts', 'macro', None, None, None, ['arr', 'dim'], [None, None], None, 'unnest(generate_series(1, array_length(arr, dim)))', None, True, 1514, None, None), ('duckdb', '1080', 'main', 'fmod', 'macro', None, None, None, ['x', 'y'], [None, None], None, '(x - (y * floor((x / y))))', None, True, 1516, None, None), ('duckdb', '1080', 'main', 'fdiv', 'macro', None, None, None, ['x', 'y'], [None, None], None, 'floor((x / y))', None, True, 1515, None, None), ('duckdb', '1080', 'main', 'date_add', 'macro', None, None, None, ['date', 'interval'], [None, None], None, '(date + "interval")', None, True, 1561, None, None), ('duckdb', '1080', 'main', 'current_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1498, None, None), ('duckdb', '1080', 'main', 'current_role', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1497, None, None), ('duckdb', '1080', 'main', 'current_catalog', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1499, None, None), ('duckdb', '1080', 'main', 'count_if', 'macro', None, None, None, ['l'], [None], None, 'sum(CASE  WHEN (l) THEN (1) ELSE 0 END)', None, True, 1517, None, None), ('duckdb', '1080', 'main', 'array_to_string', 'macro', None, None, None, ['arr', 'sep'], [None, None], None, "list_aggr(CAST(arr AS VARCHAR[]), 'string_agg', sep)", None, True, 1513, None, None), ('duckdb', '1080', 'main', 'array_reverse', 'macro', None, None, None, ['l'], [None], None, 'list_reverse(l)', None, True, 1522, None, None), ('duckdb', '1080', 'main', 'array_push_front', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(list_value(e), arr)', None, True, 1512, None, None), ('duckdb', '1080', 'main', 'array_push_back', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(arr, list_value(e))', None, True, 1511, None, None), ('duckdb', '1080', 'main', 'array_prepend', 'macro', None, None, None, ['el', 'arr'], [None, None], None, 'list_prepend(el, arr)', None, True, 1508, None, None), ('duckdb', '1080', 'main', 'array_pop_front', 'macro', None, None, None, ['arr'], [None], None, 'arr[2:]', None, True, 1510, None, None), ('duckdb', '1080', 'main', 'array_pop_back', 'macro', None, None, None, ['arr'], [None], None, 'arr[:(len(arr) - 1)]', None, True, 1509, None, None), ('duckdb', '1080', 'main', 'array_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_intersect(l1, l2)', None, True, 1524, None, None), ('duckdb', '1080', 'main', 'array_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1526, None, None), ('duckdb', '1080', 'main', 'array_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1529, None, None), ('duckdb', '1080', 'main', 'array_append', 'macro', None, None, None, ['arr', 'el'], [None, None], None, 'list_append(arr, el)', None, True, 1506, None, None), ('duckdb', '1080', 'main', '@>', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1530, None, None), ('duckdb', '1080', 'main', '<@', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l2, l1)', None, True, 1531, None, None), ('system', '0', 'pg_catalog', 'col_description', 'macro', None, None, None, ['table_oid', 'column_number'], [None, None], None, 'NULL', None, True, 1707, None, None), ('system', '0', 'pg_catalog', 'current_database', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1686, None, None), ('system', '0', 'pg_catalog', 'current_query', 'macro', None, None, None, [], [], None, 'current_query()', None, True, 1687, None, None), ('system', '0', 'pg_catalog', 'current_schema', 'macro', None, None, None, [], [], None, 'current_schema()', None, True, 1688, None, None), ('system', '0', 'pg_catalog', 'current_schemas', 'macro', None, None, None, ['include_implicit'], [None], None, 'current_schemas(include_implicit)', None, True, 1689, None, None), ('system', '0', 'pg_catalog', 'format_pg_type', 'macro', None, None, None, ['logical_type', 'type_name'], [None, None], None, "CASE  WHEN ((logical_type = 'FLOAT')) THEN ('real') WHEN ((logical_type = 'DOUBLE')) THEN ('double precision') WHEN ((logical_type = 'DECIMAL')) THEN ('numeric') WHEN ((logical_type = 'ENUM')) THEN (lower(type_name)) WHEN ((logical_type = 'VARCHAR')) THEN ('character varying') WHEN ((logical_type = 'BLOB')) THEN ('bytea') WHEN ((logical_type = 'TIMESTAMP')) THEN ('timestamp without time zone') WHEN ((logical_type = 'TIME')) THEN ('time without time zone') ELSE lower(logical_type) END", None, True, 1704, None, None), ('system', '0', 'pg_catalog', 'format_type', 'macro', None, None, None, ['type_oid', 'typemod'], [None, None], None, "((SELECT format_pg_type(logical_type, type_name) FROM duckdb_types() AS t WHERE (t.type_oid = type_oid)) || CASE  WHEN ((typemod > 0)) THEN (concat('(', (typemod // 1000), ',', (typemod % 1000), ')')) ELSE '' END)", None, True, 1705, None, None), ('system', '0', 'pg_catalog', 'has_any_column_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1690, None, None), ('system', '0', 'pg_catalog', 'has_column_privilege', 'macro', None, None, None, ['table', 'column', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1691, None, None), ('system', '0', 'pg_catalog', 'has_database_privilege', 'macro', None, None, None, ['database', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1692, None, None), ('system', '0', 'pg_catalog', 'has_foreign_data_wrapper_privilege', 'macro', None, None, None, ['fdw', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1693, None, None), ('system', '0', 'pg_catalog', 'has_function_privilege', 'macro', None, None, None, ['function', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1694, None, None), ('system', '0', 'pg_catalog', 'has_language_privilege', 'macro', None, None, None, ['language', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1695, None, None), ('system', '0', 'pg_catalog', 'has_schema_privilege', 'macro', None, None, None, ['schema', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1696, None, None), ('system', '0', 'pg_catalog', 'has_sequence_privilege', 'macro', None, None, None, ['sequence', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1697, None, None), ('system', '0', 'pg_catalog', 'has_server_privilege', 'macro', None, None, None, ['server', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1698, None, None), ('system', '0', 'pg_catalog', 'has_tablespace_privilege', 'macro', None, None, None, ['tablespace', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1700, None, None), ('system', '0', 'pg_catalog', 'has_table_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1699, None, None), ('system', '0', 'pg_catalog', 'inet_client_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1677, None, None), ('system', '0', 'pg_catalog', 'inet_client_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1678, None, None), ('system', '0', 'pg_catalog', 'inet_server_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1679, None, None), ('system', '0', 'pg_catalog', 'inet_server_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1680, None, None), ('system', '0', 'pg_catalog', 'obj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1708, None, None), ('system', '0', 'pg_catalog', 'pg_collation_is_visible', 'macro', None, None, None, ['collation_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1710, None, None), ('system', '0', 'pg_catalog', 'pg_conf_load_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1683, None, None), ('system', '0', 'pg_catalog', 'pg_conversion_is_visible', 'macro', None, None, None, ['conversion_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1711, None, None), ('system', '0', 'pg_catalog', 'pg_function_is_visible', 'macro', None, None, None, ['function_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1712, None, None), ('system', '0', 'pg_catalog', 'pg_get_constraintdef', 'macro', None, None, None, ['constraint_oid', 'pretty_bool'], [None, None], None, '(SELECT constraint_text FROM duckdb_constraints() AS d_constraint WHERE ((d_constraint.table_oid = (constraint_oid // 1000000)) AND (d_constraint.constraint_index = (constraint_oid % 1000000))))', None, True, 1702, None, None), ('system', '0', 'pg_catalog', 'pg_get_expr', 'macro', None, None, None, ['pg_node_tree', 'relation_oid'], [None, None], None, 'pg_node_tree', None, True, 1703, None, None), ('system', '0', 'pg_catalog', 'pg_get_viewdef', 'macro', None, None, None, ['oid'], [None], None, '(SELECT "sql" FROM duckdb_views() AS v WHERE (v.view_oid = oid))', None, True, 1701, None, None), ('system', '0', 'pg_catalog', 'pg_has_role', 'macro', None, None, None, ['user', 'role', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1706, None, None), ('system', '0', 'pg_catalog', 'pg_is_other_temp_schema', 'macro', None, None, None, ['schema_id'], [None], None, "CAST('f' AS BOOLEAN)", None, True, 1682, None, None), ('system', '0', 'pg_catalog', 'pg_my_temp_schema', 'macro', None, None, None, [], [], None, '0', None, True, 1681, None, None), ('system', '0', 'pg_catalog', 'pg_opclass_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1713, None, None), ('system', '0', 'pg_catalog', 'pg_operator_is_visible', 'macro', None, None, None, ['operator_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1714, None, None), ('system', '0', 'pg_catalog', 'pg_opfamily_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1715, None, None), ('system', '0', 'pg_catalog', 'pg_postmaster_start_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1684, None, None), ('system', '0', 'pg_catalog', 'pg_size_pretty', 'macro', None, None, None, ['bytes'], [None], None, 'format_bytes(bytes)', None, True, 1722, None, None), ('system', '0', 'pg_catalog', 'pg_table_is_visible', 'macro', None, None, None, ['table_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1716, None, None), ('system', '0', 'pg_catalog', 'pg_ts_config_is_visible', 'macro', None, None, None, ['config_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1717, None, None), ('system', '0', 'pg_catalog', 'pg_ts_dict_is_visible', 'macro', None, None, None, ['dict_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1718, None, None), ('system', '0', 'pg_catalog', 'pg_ts_parser_is_visible', 'macro', None, None, None, ['parser_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1719, None, None), ('system', '0', 'pg_catalog', 'pg_ts_template_is_visible', 'macro', None, None, None, ['template_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1720, None, None), ('system', '0', 'pg_catalog', 'pg_typeof', 'macro', None, None, None, ['expression'], [None], None, 'lower(typeof(expression))', None, True, 1685, None, None), ('system', '0', 'pg_catalog', 'pg_type_is_visible', 'macro', None, None, None, ['type_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1721, None, None), ('system', '0', 'pg_catalog', 'shobj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1709, None, None), ('temp', '1488', 'main', '&&', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1753, None, None), ('temp', '1488', 'main', '<@', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l2, l1)', None, True, 1757, None, None), ('temp', '1488', 'main', '@>', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1756, None, None), ('temp', '1488', 'main', 'array_append', 'macro', None, None, None, ['arr', 'el'], [None, None], None, 'list_append(arr, el)', None, True, 1732, None, None), ('temp', '1488', 'main', 'array_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1755, None, None), ('temp', '1488', 'main', 'array_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1752, None, None), ('temp', '1488', 'main', 'array_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_intersect(l1, l2)', None, True, 1750, None, None), ('temp', '1488', 'main', 'array_pop_back', 'macro', None, None, None, ['arr'], [None], None, 'arr[:(len(arr) - 1)]', None, True, 1735, None, None), ('temp', '1488', 'main', 'array_pop_front', 'macro', None, None, None, ['arr'], [None], None, 'arr[2:]', None, True, 1736, None, None), ('temp', '1488', 'main', 'array_prepend', 'macro', None, None, None, ['el', 'arr'], [None, None], None, 'list_prepend(el, arr)', None, True, 1734, None, None), ('temp', '1488', 'main', 'array_push_back', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(arr, list_value(e))', None, True, 1737, None, None), ('temp', '1488', 'main', 'array_push_front', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(list_value(e), arr)', None, True, 1738, None, None), ('temp', '1488', 'main', 'array_reverse', 'macro', None, None, None, ['l'], [None], None, 'list_reverse(l)', None, True, 1748, None, None), ('temp', '1488', 'main', 'array_to_string', 'macro', None, None, None, ['arr', 'sep'], [None, None], None, "list_aggr(CAST(arr AS VARCHAR[]), 'string_agg', sep)", None, True, 1739, None, None), ('temp', '1488', 'main', 'count_if', 'macro', None, None, None, ['l'], [None], None, 'sum(CASE  WHEN (l) THEN (1) ELSE 0 END)', None, True, 1743, None, None), ('temp', '1488', 'main', 'current_catalog', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1725, None, None), ('temp', '1488', 'main', 'current_role', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1723, None, None), ('temp', '1488', 'main', 'current_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1724, None, None), ('temp', '1488', 'main', 'date_add', 'macro', None, None, None, ['date', 'interval'], [None, None], None, '(date + "interval")', None, True, 1787, None, None), ('temp', '1488', 'main', 'fdiv', 'macro', None, None, None, ['x', 'y'], [None, None], None, 'floor((x / y))', None, True, 1741, None, None), ('temp', '1488', 'main', 'fmod', 'macro', None, None, None, ['x', 'y'], [None, None], None, '(x - (y * floor((x / y))))', None, True, 1742, None, None), ('temp', '1488', 'main', 'generate_subscripts', 'macro', None, None, None, ['arr', 'dim'], [None, None], None, 'unnest(generate_series(1, array_length(arr, dim)))', None, True, 1740, None, None), ('temp', '1488', 'main', 'geomean', 'macro', None, None, None, ['x'], [None], None, 'exp(avg(ln(x)))', None, True, 1745, None, None), ('temp', '1488', 'main', 'geometric_mean', 'macro', None, None, None, ['x'], [None], None, 'geomean(x)', None, True, 1746, None, None), ('temp', '1488', 'main', 'get_block_size', 'macro', None, None, None, ['db_name'], [None], None, '(SELECT block_size FROM pragma_database_size() WHERE (database_name = db_name))', None, True, 1789, None, None), ('temp', '1488', 'main', 'list_any_value', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'any_value')", None, True, 1774, None, None), ('temp', '1488', 'main', 'list_append', 'macro', None, None, None, ['l', 'e'], [None, None], None, 'list_concat(l, list_value(e))', None, True, 1731, None, None), ('temp', '1488', 'main', 'list_approx_count_distinct', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'approx_count_distinct')", None, True, 1764, None, None), ('temp', '1488', 'main', 'list_avg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'avg')", None, True, 1758, None, None), ('temp', '1488', 'main', 'list_bit_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_and')", None, True, 1767, None, None), ('temp', '1488', 'main', 'list_bit_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_or')", None, True, 1766, None, None), ('temp', '1488', 'main', 'list_bit_xor', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_xor')", None, True, 1765, None, None), ('temp', '1488', 'main', 'list_bool_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_and')", None, True, 1768, None, None), ('temp', '1488', 'main', 'list_bool_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_or')", None, True, 1769, None, None), ('temp', '1488', 'main', 'list_count', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'count')", None, True, 1770, None, None), ('temp', '1488', 'main', 'list_entropy', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'entropy')", None, True, 1771, None, None), ('temp', '1488', 'main', 'list_first', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'first')", None, True, 1773, None, None), ('temp', '1488', 'main', 'list_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l2, (variable_has_all -> list_contains(l1, variable_has_all)))) = len(list_filter(l2, (variable_has_all -> (variable_has_all IS NOT NULL)))))) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1754, None, None), ('temp', '1488', 'main', 'list_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l1, (variable_has_any -> list_contains(l2, variable_has_any)))) > 0)) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1751, None, None), ('temp', '1488', 'main', 'list_histogram', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'histogram')", None, True, 1786, None, None), ('temp', '1488', 'main', 'list_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_filter(list_distinct(l1), (variable_intersect -> list_contains(l2, variable_intersect)))', None, True, 1749, None, None), ('temp', '1488', 'main', 'list_kurtosis', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis')", None, True, 1775, None, None), ('temp', '1488', 'main', 'list_kurtosis_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis_pop')", None, True, 1776, None, None), ('temp', '1488', 'main', 'list_last', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'last')", None, True, 1772, None, None), ('temp', '1488', 'main', 'list_mad', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mad')", None, True, 1785, None, None), ('temp', '1488', 'main', 'list_max', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'max')", None, True, 1778, None, None), ('temp', '1488', 'main', 'list_median', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'median')", None, True, 1784, None, None), ('temp', '1488', 'main', 'list_min', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'min')", None, True, 1777, None, None), ('temp', '1488', 'main', 'list_mode', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mode')", None, True, 1783, None, None), ('temp', '1488', 'main', 'list_prepend', 'macro', None, None, None, ['e', 'l'], [None, None], None, 'list_concat(list_value(e), l)', None, True, 1733, None, None), ('temp', '1488', 'main', 'list_product', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'product')", None, True, 1779, None, None), ('temp', '1488', 'main', 'list_reverse', 'macro', None, None, None, ['l'], [None], None, 'l[:-:-1]', None, True, 1747, None, None), ('temp', '1488', 'main', 'list_sem', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sem')", None, True, 1763, None, None), ('temp', '1488', 'main', 'list_skewness', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'skewness')", None, True, 1780, None, None), ('temp', '1488', 'main', 'list_stddev_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_pop')", None, True, 1761, None, None), ('temp', '1488', 'main', 'list_stddev_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_samp')", None, True, 1762, None, None), ('temp', '1488', 'main', 'list_string_agg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'string_agg')", None, True, 1782, None, None), ('temp', '1488', 'main', 'list_sum', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sum')", None, True, 1781, None, None), ('temp', '1488', 'main', 'list_var_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_pop')", None, True, 1760, None, None), ('temp', '1488', 'main', 'list_var_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_samp')", None, True, 1759, None, None), ('temp', '1488', 'main', 'nullif', 'macro', None, None, None, ['a', 'b'], [None, None], None, 'CASE  WHEN ((a = b)) THEN (NULL) ELSE a END', None, True, 1730, None, None), ('temp', '1488', 'main', 'regexp_split_to_table', 'macro', None, None, None, ['text', 'pattern'], [None, None], None, 'unnest(string_split_regex("text", pattern))', None, True, 1788, None, None), ('temp', '1488', 'main', 'roundbankers', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'round_even(x, n)', None, True, 1729, None, None), ('temp', '1488', 'main', 'round_even', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'CASE  WHEN ((((abs(x) * power(10, (n + 1))) % 10) = 5)) THEN ((round((x / 2), n) * 2)) ELSE round(x, n) END', None, True, 1728, None, None), ('temp', '1488', 'main', 'session_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1727, None, None), ('temp', '1488', 'main', 'split_part', 'macro', None, None, None, ['string', 'delimiter', 'position'], [None, None, None], None, 'COALESCE(string_split(string, "delimiter")["position"], \'\')', None, True, 1744, None, None), ('temp', '1488', 'main', 'user', 'macro', None, None, None, [], [], None, 'current_user', None, True, 1726, None, None), ('temp', '1488', 'pg_catalog', 'col_description', 'macro', None, None, None, ['table_oid', 'column_number'], [None, None], None, 'NULL', None, True, 1820, None, None), ('temp', '1488', 'pg_catalog', 'current_database', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1799, None, None), ('temp', '1488', 'pg_catalog', 'current_query', 'macro', None, None, None, [], [], None, 'current_query()', None, True, 1800, None, None), ('temp', '1488', 'pg_catalog', 'current_schema', 'macro', None, None, None, [], [], None, 'current_schema()', None, True, 1801, None, None), ('temp', '1488', 'pg_catalog', 'current_schemas', 'macro', None, None, None, ['include_implicit'], [None], None, 'current_schemas(include_implicit)', None, True, 1802, None, None), ('temp', '1488', 'pg_catalog', 'format_pg_type', 'macro', None, None, None, ['logical_type', 'type_name'], [None, None], None, "CASE  WHEN ((logical_type = 'FLOAT')) THEN ('real') WHEN ((logical_type = 'DOUBLE')) THEN ('double precision') WHEN ((logical_type = 'DECIMAL')) THEN ('numeric') WHEN ((logical_type = 'ENUM')) THEN (lower(type_name)) WHEN ((logical_type = 'VARCHAR')) THEN ('character varying') WHEN ((logical_type = 'BLOB')) THEN ('bytea') WHEN ((logical_type = 'TIMESTAMP')) THEN ('timestamp without time zone') WHEN ((logical_type = 'TIME')) THEN ('time without time zone') ELSE lower(logical_type) END", None, True, 1817, None, None), ('temp', '1488', 'pg_catalog', 'format_type', 'macro', None, None, None, ['type_oid', 'typemod'], [None, None], None, "((SELECT format_pg_type(logical_type, type_name) FROM duckdb_types() AS t WHERE (t.type_oid = type_oid)) || CASE  WHEN ((typemod > 0)) THEN (concat('(', (typemod // 1000), ',', (typemod % 1000), ')')) ELSE '' END)", None, True, 1818, None, None), ('temp', '1488', 'pg_catalog', 'has_any_column_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1803, None, None), ('temp', '1488', 'pg_catalog', 'has_column_privilege', 'macro', None, None, None, ['table', 'column', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1804, None, None), ('temp', '1488', 'pg_catalog', 'has_database_privilege', 'macro', None, None, None, ['database', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1805, None, None), ('temp', '1488', 'pg_catalog', 'has_foreign_data_wrapper_privilege', 'macro', None, None, None, ['fdw', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1806, None, None), ('temp', '1488', 'pg_catalog', 'has_function_privilege', 'macro', None, None, None, ['function', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1807, None, None), ('temp', '1488', 'pg_catalog', 'has_language_privilege', 'macro', None, None, None, ['language', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1808, None, None), ('temp', '1488', 'pg_catalog', 'has_schema_privilege', 'macro', None, None, None, ['schema', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1809, None, None), ('temp', '1488', 'pg_catalog', 'has_sequence_privilege', 'macro', None, None, None, ['sequence', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1810, None, None), ('temp', '1488', 'pg_catalog', 'has_server_privilege', 'macro', None, None, None, ['server', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1811, None, None), ('temp', '1488', 'pg_catalog', 'has_tablespace_privilege', 'macro', None, None, None, ['tablespace', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1813, None, None), ('temp', '1488', 'pg_catalog', 'has_table_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1812, None, None), ('temp', '1488', 'pg_catalog', 'inet_client_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1790, None, None), ('temp', '1488', 'pg_catalog', 'inet_client_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1791, None, None), ('temp', '1488', 'pg_catalog', 'inet_server_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1792, None, None), ('temp', '1488', 'pg_catalog', 'inet_server_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1793, None, None), ('temp', '1488', 'pg_catalog', 'obj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1821, None, None), ('temp', '1488', 'pg_catalog', 'pg_collation_is_visible', 'macro', None, None, None, ['collation_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1823, None, None), ('temp', '1488', 'pg_catalog', 'pg_conf_load_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1796, None, None), ('temp', '1488', 'pg_catalog', 'pg_conversion_is_visible', 'macro', None, None, None, ['conversion_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1824, None, None), ('temp', '1488', 'pg_catalog', 'pg_function_is_visible', 'macro', None, None, None, ['function_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1825, None, None), ('temp', '1488', 'pg_catalog', 'pg_get_constraintdef', 'macro', None, None, None, ['constraint_oid', 'pretty_bool'], [None, None], None, '(SELECT constraint_text FROM duckdb_constraints() AS d_constraint WHERE ((d_constraint.table_oid = (constraint_oid // 1000000)) AND (d_constraint.constraint_index = (constraint_oid % 1000000))))', None, True, 1815, None, None), ('temp', '1488', 'pg_catalog', 'pg_get_expr', 'macro', None, None, None, ['pg_node_tree', 'relation_oid'], [None, None], None, 'pg_node_tree', None, True, 1816, None, None), ('temp', '1488', 'pg_catalog', 'pg_get_viewdef', 'macro', None, None, None, ['oid'], [None], None, '(SELECT "sql" FROM duckdb_views() AS v WHERE (v.view_oid = oid))', None, True, 1814, None, None), ('temp', '1488', 'pg_catalog', 'pg_has_role', 'macro', None, None, None, ['user', 'role', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1819, None, None), ('temp', '1488', 'pg_catalog', 'pg_is_other_temp_schema', 'macro', None, None, None, ['schema_id'], [None], None, "CAST('f' AS BOOLEAN)", None, True, 1795, None, None), ('temp', '1488', 'pg_catalog', 'pg_my_temp_schema', 'macro', None, None, None, [], [], None, '0', None, True, 1794, None, None), ('temp', '1488', 'pg_catalog', 'pg_opclass_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1826, None, None), ('temp', '1488', 'pg_catalog', 'pg_operator_is_visible', 'macro', None, None, None, ['operator_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1827, None, None), ('temp', '1488', 'pg_catalog', 'pg_opfamily_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1828, None, None), ('temp', '1488', 'pg_catalog', 'pg_postmaster_start_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1797, None, None), ('temp', '1488', 'pg_catalog', 'pg_size_pretty', 'macro', None, None, None, ['bytes'], [None], None, 'format_bytes(bytes)', None, True, 1835, None, None), ('temp', '1488', 'pg_catalog', 'pg_table_is_visible', 'macro', None, None, None, ['table_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1829, None, None), ('temp', '1488', 'pg_catalog', 'pg_ts_config_is_visible', 'macro', None, None, None, ['config_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1830, None, None), ('temp', '1488', 'pg_catalog', 'pg_ts_dict_is_visible', 'macro', None, None, None, ['dict_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1831, None, None), ('temp', '1488', 'pg_catalog', 'pg_ts_parser_is_visible', 'macro', None, None, None, ['parser_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1832, None, None), ('temp', '1488', 'pg_catalog', 'pg_ts_template_is_visible', 'macro', None, None, None, ['template_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1833, None, None), ('temp', '1488', 'pg_catalog', 'pg_typeof', 'macro', None, None, None, ['expression'], [None], None, 'lower(typeof(expression))', None, True, 1798, None, None), ('temp', '1488', 'pg_catalog', 'pg_type_is_visible', 'macro', None, None, None, ['type_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1834, None, None), ('temp', '1488', 'pg_catalog', 'shobj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1822, None, None)]
+--------------------+
--Query--
SELECT * FROM duckdb_functions()
--Result--
[('system', '0', 'main', 'arrow_scan', 'table', None, None, None, ['col0', 'col1', 'col2'], ['POINTER', 'POINTER', 'POINTER'], None, None, None, True, 94, None, None), ('system', '0', 'main', 'arrow_scan_dumb', 'table', None, None, None, ['col0', 'col1', 'col2'], ['POINTER', 'POINTER', 'POINTER'], None, None, None, True, 96, None, None), ('system', '0', 'main', 'checkpoint', 'table', None, None, None, [], [], None, None, None, True, 70, None, None), ('system', '0', 'main', 'checkpoint', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 70, None, None), ('system', '0', 'main', 'dbgen', 'table', None, None, None, ['step', 'children', 'schema', 'suffix', 'catalog', 'overwrite', 'sf'], ['UINTEGER', 'UINTEGER', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'DOUBLE'], None, None, None, True, 1085, None, None), ('system', '0', 'main', 'dsdgen', 'table', None, None, None, ['schema', 'suffix', 'catalog', 'keys', 'overwrite', 'sf'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'DOUBLE'], None, None, None, True, 1471, None, None), ('system', '0', 'main', 'duckdb_columns', 'table', None, None, None, [], [], None, None, None, True, 24, None, None), ('system', '0', 'main', 'duckdb_constraints', 'table', None, None, None, [], [], None, None, None, True, 26, None, None), ('system', '0', 'main', 'duckdb_databases', 'table', None, None, None, [], [], None, None, None, True, 28, None, None), ('system', '0', 'main', 'duckdb_dependencies', 'table', None, None, None, [], [], None, None, None, True, 38, None, None), ('system', '0', 'main', 'duckdb_extensions', 'table', None, None, None, [], [], None, None, None, True, 40, None, None), ('system', '0', 'main', 'duckdb_functions', 'table', None, None, None, [], [], None, None, None, True, 30, None, None), ('system', '0', 'main', 'duckdb_indexes', 'table', None, None, None, [], [], None, None, None, True, 34, None, None), ('system', '0', 'main', 'duckdb_keywords', 'table', None, None, None, [], [], None, None, None, True, 32, None, None), ('system', '0', 'main', 'duckdb_memory', 'table', None, None, None, [], [], None, None, None, True, 42, None, None), ('system', '0', 'main', 'duckdb_optimizers', 'table', None, None, None, [], [], None, None, None, True, 44, None, None), ('system', '0', 'main', 'duckdb_schemas', 'table', None, None, None, [], [], None, None, None, True, 36, None, None), ('system', '0', 'main', 'duckdb_secrets', 'table', None, None, None, ['redact'], ['BOOLEAN'], None, None, None, True, 46, None, None), ('system', '0', 'main', 'duckdb_sequences', 'table', None, None, None, [], [], None, None, None, True, 48, None, None), ('system', '0', 'main', 'duckdb_settings', 'table', None, None, None, [], [], None, None, None, True, 50, None, None), ('system', '0', 'main', 'duckdb_tables', 'table', None, None, None, [], [], None, None, None, True, 52, None, None), ('system', '0', 'main', 'duckdb_temporary_files', 'table', None, None, None, [], [], None, None, None, True, 54, None, None), ('system', '0', 'main', 'duckdb_types', 'table', None, None, None, [], [], None, None, None, True, 56, None, None), ('system', '0', 'main', 'duckdb_views', 'table', None, None, None, [], [], None, None, None, True, 58, None, None), ('system', '0', 'main', 'force_checkpoint', 'table', None, None, None, [], [], None, None, None, True, 72, None, None), ('system', '0', 'main', 'force_checkpoint', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 72, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1', 'col2'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'glob', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 74, None, None), ('system', '0', 'main', 'glob', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 74, None, None), ('system', '0', 'main', 'icu_calendar_names', 'table', None, None, None, [], [], None, None, None, True, 1453, None, None), ('system', '0', 'main', 'index_scan', 'table', None, None, None, [], [], None, None, None, True, 4, None, None), ('system', '0', 'main', 'json_execute_serialized_sql', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1159, None, None), ('system', '0', 'main', 'pandas_scan', 'table', None, None, None, ['col0'], ['POINTER'], None, None, None, True, 1482, None, None), ('system', '0', 'main', 'parquet_file_metadata', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1465, None, None), ('system', '0', 'main', 'parquet_file_metadata', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1465, None, None), ('system', '0', 'main', 'parquet_kv_metadata', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1463, None, None), ('system', '0', 'main', 'parquet_kv_metadata', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1463, None, None), ('system', '0', 'main', 'parquet_metadata', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1459, None, None), ('system', '0', 'main', 'parquet_metadata', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1459, None, None), ('system', '0', 'main', 'parquet_scan', 'table', None, None, None, ['col0', 'hive_types_autocast', 'union_by_name', 'filename', 'hive_types', 'hive_partitioning', 'encryption_config', 'compression', 'file_row_number', 'schema', 'binary_as_string'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN'], None, None, None, True, 1457, None, None), ('system', '0', 'main', 'parquet_scan', 'table', None, None, None, ['col0', 'binary_as_string', 'schema', 'file_row_number', 'compression', 'encryption_config', 'hive_partitioning', 'hive_types', 'filename', 'union_by_name', 'hive_types_autocast'], ['VARCHAR[]', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1457, None, None), ('system', '0', 'main', 'parquet_schema', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1461, None, None), ('system', '0', 'main', 'parquet_schema', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1461, None, None), ('system', '0', 'main', 'pg_timezone_names', 'table', None, None, None, [], [], None, None, None, True, 1447, None, None), ('system', '0', 'main', 'pragma_collations', 'table', None, None, None, [], [], None, None, None, True, 10, None, None), ('system', '0', 'main', 'pragma_database_size', 'table', None, None, None, [], [], None, None, None, True, 20, None, None), ('system', '0', 'main', 'pragma_metadata_info', 'table', None, None, None, [], [], None, None, None, True, 18, None, None), ('system', '0', 'main', 'pragma_metadata_info', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 18, None, None), ('system', '0', 'main', 'pragma_platform', 'table', None, None, None, [], [], None, None, None, True, 8, None, None), ('system', '0', 'main', 'pragma_show', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 14, None, None), ('system', '0', 'main', 'pragma_storage_info', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 16, None, None), ('system', '0', 'main', 'pragma_table_info', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 12, None, None), ('system', '0', 'main', 'pragma_user_agent', 'table', None, None, None, [], [], None, None, None, True, 22, None, None), ('system', '0', 'main', 'pragma_version', 'table', None, None, None, [], [], None, None, None, True, 6, None, None), ('system', '0', 'main', 'python_map_function', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TABLE', 'POINTER', 'POINTER'], None, None, None, True, 1484, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1', 'col2'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'unnest', 'table', None, None, None, ['col0'], ['TABLE'], None, None, None, True, 84, None, None), ('system', '0', 'main', 'tpch_queries', 'table', None, None, None, [], [], None, None, None, True, 1089, None, None), ('system', '0', 'main', 'tpch_answers', 'table', None, None, None, [], [], None, None, None, True, 1091, None, None), ('system', '0', 'main', 'tpcds_queries', 'table', None, None, None, [], [], None, None, None, True, 1475, None, None), ('system', '0', 'main', 'tpcds_answers', 'table', None, None, None, [], [], None, None, None, True, 1477, None, None), ('system', '0', 'main', 'test_vector_types', 'table', None, None, None, ['col0', 'all_flat'], ['ANY', 'BOOLEAN'], 'ANY', None, None, True, 62, None, None), ('system', '0', 'main', 'test_all_types', 'table', None, None, None, ['use_large_enum'], ['BOOLEAN'], None, None, None, True, 60, None, None), ('system', '0', 'main', 'summary', 'table', None, None, None, ['col0'], ['TABLE'], None, None, None, True, 82, None, None), ('system', '0', 'main', 'sniff_csv', 'table', None, None, None, ['col0', 'delim', 'dateformat', 'column_names', 'sep', 'hive_partitioning', 'header', 'escape', 'allow_quoted_nulls', 'maximum_line_size', 'new_line', 'columns', 'rejects_limit', 'force_not_null', 'timestampformat', 'auto_detect', 'sample_size', 'auto_type_candidates', 'nullstr', 'normalize_names', 'rejects_table', 'column_types', 'skip', 'types', 'max_line_size', 'quote', 'rejects_scan', 'ignore_errors', 'compression', 'names', 'store_rejects', 'all_varchar', 'buffer_size', 'decimal_separator', 'parallel', 'null_padding', 'dtypes', 'filename', 'union_by_name', 'hive_types', 'hive_types_autocast'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BIGINT', 'ANY', 'ANY', 'BOOLEAN', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'UBIGINT', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN'], None, None, None, True, 88, None, None), ('system', '0', 'main', 'seq_scan', 'table', None, None, None, [], [], None, None, None, True, 2, None, None), ('system', '0', 'main', 'repeat_row', 'table', None, None, None, ['num_rows'], ['BIGINT'], 'ANY', None, None, True, 86, None, None), ('system', '0', 'main', 'repeat', 'table', None, None, None, ['col0', 'col1'], ['ANY', 'BIGINT'], None, None, None, True, 80, None, None), ('system', '0', 'main', 'read_text', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 92, None, None), ('system', '0', 'main', 'read_text', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 92, None, None), ('system', '0', 'main', 'read_parquet', 'table', None, None, None, ['col0', 'hive_types_autocast', 'union_by_name', 'filename', 'hive_types', 'hive_partitioning', 'encryption_config', 'compression', 'file_row_number', 'schema', 'binary_as_string'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN'], None, None, None, True, 1455, None, None), ('system', '0', 'main', 'read_parquet', 'table', None, None, None, ['col0', 'binary_as_string', 'schema', 'file_row_number', 'compression', 'encryption_config', 'hive_partitioning', 'hive_types', 'filename', 'union_by_name', 'hive_types_autocast'], ['VARCHAR[]', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1455, None, None), ('system', '0', 'main', 'read_ndjson_objects', 'table', None, None, None, ['col0', 'format', 'ignore_errors', 'maximum_object_size', 'union_by_name', 'compression', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1147, None, None), ('system', '0', 'main', 'read_ndjson_objects', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'compression', 'union_by_name', 'maximum_object_size', 'ignore_errors', 'format'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR'], None, None, None, True, 1147, None, None), ('system', '0', 'main', 'read_ndjson_auto', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1157, None, None), ('system', '0', 'main', 'read_ndjson_auto', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1157, None, None), ('system', '0', 'main', 'read_ndjson', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1153, None, None), ('system', '0', 'main', 'read_ndjson', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1153, None, None), ('system', '0', 'main', 'read_json_objects_auto', 'table', None, None, None, ['col0', 'format', 'ignore_errors', 'maximum_object_size', 'union_by_name', 'compression', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1149, None, None), ('system', '0', 'main', 'read_json_objects_auto', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'compression', 'union_by_name', 'maximum_object_size', 'ignore_errors', 'format'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR'], None, None, None, True, 1149, None, None), ('system', '0', 'main', 'read_json_objects', 'table', None, None, None, ['col0', 'format', 'ignore_errors', 'maximum_object_size', 'union_by_name', 'compression', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1145, None, None), ('system', '0', 'main', 'read_json_objects', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'compression', 'union_by_name', 'maximum_object_size', 'ignore_errors', 'format'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR'], None, None, None, True, 1145, None, None), ('system', '0', 'main', 'read_json_auto', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1155, None, None), ('system', '0', 'main', 'read_json_auto', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1155, None, None), ('system', '0', 'main', 'read_json', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1151, None, None), ('system', '0', 'main', 'read_json', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1151, None, None), ('system', '0', 'main', 'read_csv_auto', 'table', None, None, None, ['col0', 'hive_types_autocast', 'hive_types', 'union_by_name', 'filename', 'dtypes', 'null_padding', 'parallel', 'decimal_separator', 'buffer_size', 'all_varchar', 'store_rejects', 'names', 'compression', 'ignore_errors', 'rejects_scan', 'quote', 'max_line_size', 'types', 'skip', 'column_types', 'rejects_table', 'normalize_names', 'nullstr', 'auto_type_candidates', 'sample_size', 'auto_detect', 'timestampformat', 'force_not_null', 'rejects_limit', 'columns', 'new_line', 'maximum_line_size', 'allow_quoted_nulls', 'escape', 'header', 'hive_partitioning', 'sep', 'column_names', 'dateformat', 'delim'], ['VARCHAR', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'UBIGINT', 'BOOLEAN', 'BOOLEAN', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'BOOLEAN', 'ANY', 'ANY', 'BIGINT', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'VARCHAR'], None, None, None, True, 68, None, None), ('system', '0', 'main', 'read_csv_auto', 'table', None, None, None, ['col0', 'delim', 'dateformat', 'column_names', 'sep', 'hive_partitioning', 'header', 'escape', 'allow_quoted_nulls', 'maximum_line_size', 'new_line', 'columns', 'rejects_limit', 'force_not_null', 'timestampformat', 'auto_detect', 'sample_size', 'auto_type_candidates', 'nullstr', 'normalize_names', 'rejects_table', 'column_types', 'skip', 'types', 'max_line_size', 'quote', 'rejects_scan', 'ignore_errors', 'compression', 'names', 'store_rejects', 'all_varchar', 'buffer_size', 'decimal_separator', 'parallel', 'null_padding', 'dtypes', 'filename', 'union_by_name', 'hive_types', 'hive_types_autocast'], ['VARCHAR[]', 'VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BIGINT', 'ANY', 'ANY', 'BOOLEAN', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'UBIGINT', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN'], None, None, None, True, 68, None, None), ('system', '0', 'main', 'read_csv', 'table', None, None, None, ['col0', 'hive_types_autocast', 'hive_types', 'union_by_name', 'filename', 'dtypes', 'null_padding', 'parallel', 'decimal_separator', 'buffer_size', 'all_varchar', 'store_rejects', 'names', 'compression', 'ignore_errors', 'rejects_scan', 'quote', 'max_line_size', 'types', 'skip', 'column_types', 'rejects_table', 'normalize_names', 'nullstr', 'auto_type_candidates', 'sample_size', 'auto_detect', 'timestampformat', 'force_not_null', 'rejects_limit', 'columns', 'new_line', 'maximum_line_size', 'allow_quoted_nulls', 'escape', 'header', 'hive_partitioning', 'sep', 'column_names', 'dateformat', 'delim'], ['VARCHAR', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'UBIGINT', 'BOOLEAN', 'BOOLEAN', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'BOOLEAN', 'ANY', 'ANY', 'BIGINT', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'VARCHAR'], None, None, None, True, 66, None, None), ('system', '0', 'main', 'read_csv', 'table', None, None, None, ['col0', 'delim', 'dateformat', 'column_names', 'sep', 'hive_partitioning', 'header', 'escape', 'allow_quoted_nulls', 'maximum_line_size', 'new_line', 'columns', 'rejects_limit', 'force_not_null', 'timestampformat', 'auto_detect', 'sample_size', 'auto_type_candidates', 'nullstr', 'normalize_names', 'rejects_table', 'column_types', 'skip', 'types', 'max_line_size', 'quote', 'rejects_scan', 'ignore_errors', 'compression', 'names', 'store_rejects', 'all_varchar', 'buffer_size', 'decimal_separator', 'parallel', 'null_padding', 'dtypes', 'filename', 'union_by_name', 'hive_types', 'hive_types_autocast'], ['VARCHAR[]', 'VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BIGINT', 'ANY', 'ANY', 'BOOLEAN', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'UBIGINT', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN'], None, None, None, True, 66, None, None), ('system', '0', 'main', 'read_blob', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 90, None, None), ('system', '0', 'main', 'read_blob', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 90, None, None), ('system', '0', 'main', 'to_days', 'scalar', 'Construct a day interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 990, 'to_days(5)', 'CONSISTENT'), ('system', '0', 'main', 'jaccard', 'scalar', 'The Jaccard similarity between two strings. Different case is considered different. Returns a number between 0 and 1', None, 'DOUBLE', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 688, "jaccard('duck','luck')", 'CONSISTENT'), ('system', '0', 'main', 'to_centuries', 'scalar', 'Construct a century interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 988, 'to_centuries(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['UBIGINT'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['BIGINT'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['HUGEINT'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_binary', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['UHUGEINT'], None, None, False, True, 986, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_base64', 'scalar', 'Convert a blob to a base64 encoded string', None, 'VARCHAR', ['blob'], ['BLOB'], None, None, False, True, 984, "base64('A'::blob)", 'CONSISTENT'), ('system', '0', 'main', 'to_base', 'scalar', 'Converts a value to a string in the given base radix, optionally padding with leading zeros to the minimum length', None, 'VARCHAR', ['number', 'radix'], ['BIGINT', 'INTEGER'], None, None, False, True, 982, 'to_base(42, 16)', 'CONSISTENT'), ('system', '0', 'main', 'to_base', 'scalar', 'Converts a value to a string in the given base radix, optionally padding with leading zeros to the minimum length', None, 'VARCHAR', ['number', 'radix', 'min_length'], ['BIGINT', 'INTEGER', 'INTEGER'], None, None, False, True, 982, 'to_base(42, 16)', 'CONSISTENT'), ('system', '0', 'main', 'today', 'scalar', 'Returns the current date', None, 'DATE', [], [], None, None, False, True, 1016, 'current_date()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'DATE', ['bucket_width', 'timestamp'], ['INTERVAL', 'DATE'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP', ['bucket_width', 'timestamp'], ['INTERVAL', 'TIMESTAMP'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'DATE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'DATE', 'INTERVAL'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP', 'INTERVAL'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'DATE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'DATE', 'DATE'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP WITH TIME ZONE', ['bucket_width', 'timestamp'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP WITH TIME ZONE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP WITH TIME ZONE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'time_bucket', 'scalar', 'Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets', None, 'TIMESTAMP WITH TIME ZONE', ['bucket_width', 'timestamp', 'origin'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 974, "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_minute', 'scalar', 'Extract the timezone_minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 980, "timezone_minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_minute', 'scalar', 'Extract the timezone_minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 980, "timezone_minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_minute', 'scalar', 'Extract the timezone_minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 980, "timezone_minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_minute', 'scalar', 'Extract the timezone_minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 980, "timezone_minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_hour', 'scalar', 'Extract the timezone_hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 978, "timezone_hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_hour', 'scalar', 'Extract the timezone_hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 978, "timezone_hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_hour', 'scalar', 'Extract the timezone_hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 978, "timezone_hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone_hour', 'scalar', 'Extract the timezone_hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 978, "timezone_hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'TIME WITH TIME ZONE', ['ts', 'col1'], ['INTERVAL', 'TIME WITH TIME ZONE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'TIMESTAMP WITH TIME ZONE', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'TIMESTAMP', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'timezone', 'scalar', 'Extract the timezone component from a date or timestamp', None, 'TIME WITH TIME ZONE', ['ts', 'col1'], ['VARCHAR', 'TIME WITH TIME ZONE'], None, None, False, True, 976, "timezone(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'tan', 'scalar', 'Computes the tan of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 972, 'tan(90)', 'CONSISTENT'), ('system', '0', 'main', 'suffix', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 246, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TINYINT', ['col0'], ['TINYINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'SMALLINT', ['col0'], ['SMALLINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTEGER', ['col0'], ['INTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'BIGINT', ['col0'], ['BIGINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'HUGEINT', ['col0'], ['HUGEINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'FLOAT', ['col0'], ['FLOAT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DOUBLE', ['col0'], ['DOUBLE'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UTINYINT', ['col0'], ['UTINYINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'USMALLINT', ['col0'], ['USMALLINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UINTEGER', ['col0'], ['UINTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UBIGINT', ['col0'], ['UBIGINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UHUGEINT', ['col0'], ['UHUGEINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['DATE', 'DATE'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['DATE', 'INTEGER'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['TIME', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIMESTAMP', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'subtract', 'scalar', None, None, 'INTERVAL', ['col0'], ['INTERVAL'], None, None, False, True, 158, None, 'CONSISTENT'), ('system', '0', 'main', 'substring_grapheme', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'BIGINT', 'BIGINT'], None, None, False, True, 242, None, 'CONSISTENT'), ('system', '0', 'main', 'substring_grapheme', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 242, None, 'CONSISTENT'), ('system', '0', 'main', 'substring', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'BIGINT', 'BIGINT'], None, None, False, True, 238, None, 'CONSISTENT'), ('system', '0', 'main', 'substring', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 238, None, 'CONSISTENT'), ('system', '0', 'main', 'substr', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'BIGINT', 'BIGINT'], None, None, False, True, 240, None, 'CONSISTENT'), ('system', '0', 'main', 'substr', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 240, None, 'CONSISTENT'), ('system', '0', 'main', 'str_split_regex', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 946, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'str_split_regex', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 946, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'str_split', 'scalar', 'Splits the string along the separator', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 944, "string_split('hello-world', '-')", 'CONSISTENT'), ('system', '0', 'main', 'struct_pack', 'scalar', 'Creates a STRUCT containing the argument values. The entry name will be the bound variable name', None, 'STRUCT', [], [], 'ANY', None, False, True, 964, "struct_pack(i := 4, s := 'string')", 'CONSISTENT'), ('system', '0', 'main', 'struct_insert', 'scalar', 'Adds field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s)', None, 'STRUCT', [], [], 'ANY', None, False, True, 962, "struct_insert({'a': 1}, b := 2)", 'CONSISTENT'), ('system', '0', 'main', 'struct_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['STRUCT', 'VARCHAR'], None, None, False, True, 252, None, 'CONSISTENT'), ('system', '0', 'main', 'struct_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['STRUCT', 'BIGINT'], None, None, False, True, 252, None, 'CONSISTENT'), ('system', '0', 'main', 'strptime', 'scalar', 'Converts string to timestamp with time zone according to the format string if %Z is specified', None, 'TIMESTAMP', ['text', 'format'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 960, "strptime('Wed, 1 January 1992 - 08:38:40 PST', '%a, %-d %B %Y - %H:%M:%S %Z')", 'CONSISTENT'), ('system', '0', 'main', 'strptime', 'scalar', 'Converts string to timestamp with time zone according to the format string if %Z is specified', None, 'TIMESTAMP', ['text', 'format'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 960, "strptime('Wed, 1 January 1992 - 08:38:40 PST', '%a, %-d %B %Y - %H:%M:%S %Z')", 'CONSISTENT'), ('system', '0', 'main', 'strpos', 'scalar', 'Returns location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found', None, 'BIGINT', ['haystack', 'needle'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 958, "instr('test test','es')", 'CONSISTENT'), ('system', '0', 'main', 'strlen', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 204, None, 'CONSISTENT'), ('system', '0', 'main', 'strip_accents', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 186, None, 'CONSISTENT'), ('system', '0', 'main', 'string_to_array', 'scalar', 'Splits the string along the separator', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 956, "string_split('hello-world', '-')", 'CONSISTENT'), ('system', '0', 'main', 'string_split_regex', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 954, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'string_split_regex', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 954, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'string_split', 'scalar', 'Splits the string along the separator', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 952, "string_split('hello-world', '-')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['DATE', 'VARCHAR'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['VARCHAR', 'DATE'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'strftime', 'scalar', 'Converts timestamp to string according to the format string', None, 'VARCHAR', ['text', 'format'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 948, "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'stats', 'scalar', 'Returns a string with statistics about the expression. Expression can be a column, constant, or SQL expression', None, 'VARCHAR', ['expression'], ['ANY'], None, None, True, True, 936, 'stats(5)', 'VOLATILE'), ('system', '0', 'main', 'starts_with', 'scalar', 'Returns true if string begins with search_string', None, 'BOOLEAN', ['string', 'search_string'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 934, "starts_with('abc','a')", 'CONSISTENT'), ('system', '0', 'main', 'sqrt', 'scalar', 'Returns the square root of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 932, 'sqrt(4)', 'CONSISTENT'), ('system', '0', 'main', 'to_decades', 'scalar', 'Construct a decade interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 992, 'to_decades(5)', 'CONSISTENT'), ('system', '0', 'main', 'split', 'scalar', 'Splits the string along the separator', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 930, "string_split('hello-world', '-')", 'CONSISTENT'), ('system', '0', 'main', 'sin', 'scalar', 'Computes the sin of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 926, 'sin(90)', 'CONSISTENT'), ('system', '0', 'main', 'signbit', 'scalar', 'Returns whether the signbit is set or not', None, 'BOOLEAN', ['x'], ['FLOAT'], None, None, False, True, 924, 'signbit(-0.0)', 'CONSISTENT'), ('system', '0', 'main', 'signbit', 'scalar', 'Returns whether the signbit is set or not', None, 'BOOLEAN', ['x'], ['DOUBLE'], None, None, False, True, 924, 'signbit(-0.0)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['SMALLINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['INTEGER'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['BIGINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['HUGEINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['FLOAT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['DOUBLE'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['UTINYINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['USMALLINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['UINTEGER'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['UBIGINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sign', 'scalar', 'Returns the sign of x as -1, 0 or 1', None, 'TINYINT', ['x'], ['UHUGEINT'], None, None, False, True, 922, 'sign(-349)', 'CONSISTENT'), ('system', '0', 'main', 'sha256', 'scalar', 'Returns the SHA256 hash of the value', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 920, "sha256('hello')", 'CONSISTENT'), ('system', '0', 'main', 'set_bit', 'scalar', 'Sets the nth bit in bitstring to newvalue; the first (leftmost) bit is indexed 0. Returns a new bitstring', None, 'BIT', ['bitstring', 'index', 'new_value'], ['BIT', 'INTEGER', 'INTEGER'], None, None, False, True, 916, "set_bit('0110010'::BIT, 2, 0)", 'CONSISTENT'), ('system', '0', 'main', 'setseed', 'scalar', 'Sets the seed to be used for the random function', None, 'NULL', [''], ['DOUBLE'], None, None, True, True, 918, 'setseed(0.42)', 'VOLATILE'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['BLOB'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['BIGINT'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['UBIGINT'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['HUGEINT'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'to_hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['UHUGEINT'], None, None, False, True, 994, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'second', 'scalar', 'Extract the second component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 912, "second(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'rtrim', 'scalar', 'Removes any occurrences of any of the characters from the right side of the string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 910, "rtrim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'rtrim', 'scalar', 'Removes any occurrences of any of the characters from the right side of the string', None, 'VARCHAR', ['string', 'characters'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 910, "rtrim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', '!__postfix', 'scalar', 'Factorial of x. Computes the product of the current integer and all integers below it', None, 'HUGEINT', ['x'], ['INTEGER'], None, None, False, True, 390, '4!', 'CONSISTENT'), ('system', '0', 'main', '!~~', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 212, None, 'CONSISTENT'), ('system', '0', 'main', '!~~*', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 218, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '%', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 170, None, 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'TINYINT', ['left', 'right'], ['TINYINT', 'TINYINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'SMALLINT', ['left', 'right'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'INTEGER', ['left', 'right'], ['INTEGER', 'INTEGER'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'BIGINT', ['left', 'right'], ['BIGINT', 'BIGINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'HUGEINT', ['left', 'right'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'UTINYINT', ['left', 'right'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'USMALLINT', ['left', 'right'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'UINTEGER', ['left', 'right'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'UBIGINT', ['left', 'right'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'UHUGEINT', ['left', 'right'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', '&', 'scalar', 'Bitwise AND', None, 'BIT', ['left', 'right'], ['BIT', 'BIT'], None, None, False, True, 392, '91 & 15', 'CONSISTENT'), ('system', '0', 'main', 'rpad', 'scalar', 'Pads the string with the character from the right until it has count characters', None, 'VARCHAR', ['string', 'count', 'character'], ['VARCHAR', 'INTEGER', 'VARCHAR'], None, None, False, True, 908, "rpad('hello', 10, '<')", 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'BIGINT'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '*', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['BIGINT', 'INTERVAL'], None, None, False, True, 160, None, 'CONSISTENT'), ('system', '0', 'main', '**', 'scalar', 'Computes x to the power of y', None, 'DOUBLE', ['x', 'y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 394, 'pow(2, 3)', 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TINYINT', ['col0'], ['TINYINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'SMALLINT', ['col0'], ['SMALLINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'INTEGER', ['col0'], ['INTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'BIGINT', ['col0'], ['BIGINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'HUGEINT', ['col0'], ['HUGEINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'FLOAT', ['col0'], ['FLOAT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DOUBLE', ['col0'], ['DOUBLE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UTINYINT', ['col0'], ['UTINYINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'USMALLINT', ['col0'], ['USMALLINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UINTEGER', ['col0'], ['UINTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UBIGINT', ['col0'], ['UBIGINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UHUGEINT', ['col0'], ['UHUGEINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['DATE', 'INTEGER'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['INTEGER', 'DATE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['INTERVAL', 'DATE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['TIME', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['INTERVAL', 'TIME'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIMESTAMP', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['INTERVAL', 'TIMESTAMP'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['INTERVAL', 'TIME WITH TIME ZONE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIME', 'DATE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'TIME'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'DATE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['DATE', 'TIME WITH TIME ZONE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '+', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['INTERVAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 152, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TINYINT', ['col0'], ['TINYINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'SMALLINT', ['col0'], ['SMALLINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTEGER', ['col0'], ['INTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'BIGINT', ['col0'], ['BIGINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'HUGEINT', ['col0'], ['HUGEINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'FLOAT', ['col0'], ['FLOAT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DOUBLE', ['col0'], ['DOUBLE'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UTINYINT', ['col0'], ['UTINYINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'USMALLINT', ['col0'], ['USMALLINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UINTEGER', ['col0'], ['UINTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UBIGINT', ['col0'], ['UBIGINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UHUGEINT', ['col0'], ['UHUGEINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['DATE', 'DATE'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['DATE', 'INTEGER'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['TIME', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIMESTAMP', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTERVAL', ['col0'], ['INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '-', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 156, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '->>', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1103, None, 'CONSISTENT'), ('system', '0', 'main', '/', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 164, None, 'CONSISTENT'), ('system', '0', 'main', '/', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 164, None, 'CONSISTENT'), ('system', '0', 'main', '/', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'BIGINT'], None, None, False, True, 164, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '//', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 166, None, 'CONSISTENT'), ('system', '0', 'main', '<#>', 'scalar', 'Compute the inner product between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 396, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<#>', 'scalar', 'Compute the inner product between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 396, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<->', 'scalar', 'Compute the distance between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 398, 'list_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<->', 'scalar', 'Compute the distance between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 398, 'list_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'TINYINT', ['input', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'SMALLINT', ['input', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'INTEGER', ['input', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'BIGINT', ['input', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'HUGEINT', ['input', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'UTINYINT', ['input', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'USMALLINT', ['input', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'UINTEGER', ['input', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'UBIGINT', ['input', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'UHUGEINT', ['input', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<<', 'scalar', 'Bitwise shift left', None, 'BIT', ['input', 'col1'], ['BIT', 'INTEGER'], None, None, False, True, 400, '1 << 4', 'CONSISTENT'), ('system', '0', 'main', '<=>', 'scalar', 'Compute the cosine similarity between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 402, 'list_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '<=>', 'scalar', 'Compute the cosine similarity between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 402, 'list_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'row_to_json', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1115, None, 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'TINYINT', ['input', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'SMALLINT', ['input', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'INTEGER', ['input', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'BIGINT', ['input', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'HUGEINT', ['input', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'UTINYINT', ['input', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'USMALLINT', ['input', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'UINTEGER', ['input', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'UBIGINT', ['input', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'UHUGEINT', ['input', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '>>', 'scalar', 'Bitwise shift right', None, 'BIT', ['input', 'col1'], ['BIT', 'INTEGER'], None, None, False, True, 404, '8 >> 2', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'SMALLINT', ['x'], ['SMALLINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'INTEGER', ['x'], ['INTEGER'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'HUGEINT', ['x'], ['HUGEINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'UTINYINT', ['x'], ['UTINYINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'USMALLINT', ['x'], ['USMALLINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'UINTEGER', ['x'], ['UINTEGER'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'UBIGINT', ['x'], ['UBIGINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', '@', 'scalar', 'Absolute value', None, 'UHUGEINT', ['x'], ['UHUGEINT'], None, None, False, True, 406, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'format_bytes', 'scalar', 'Converts bytes to a human-readable presentation (e.g. 16000 -> 15.6 KiB)', None, 'VARCHAR', ['bytes'], ['BIGINT'], None, None, False, True, 632, 'format_bytes(1000 * 16)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'SMALLINT', ['x'], ['SMALLINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'INTEGER', ['x'], ['INTEGER'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'HUGEINT', ['x'], ['HUGEINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'UTINYINT', ['x'], ['UTINYINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'USMALLINT', ['x'], ['USMALLINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'UINTEGER', ['x'], ['UINTEGER'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'UBIGINT', ['x'], ['UBIGINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'abs', 'scalar', 'Absolute value', None, 'UHUGEINT', ['x'], ['UHUGEINT'], None, None, False, True, 412, 'abs(-17.4)', 'CONSISTENT'), ('system', '0', 'main', 'acos', 'scalar', 'Computes the arccosine of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 414, 'acos(0.5)', 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TINYINT', ['col0'], ['TINYINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'SMALLINT', ['col0'], ['SMALLINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'INTEGER', ['col0'], ['INTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'BIGINT', ['col0'], ['BIGINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'HUGEINT', ['col0'], ['HUGEINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'FLOAT', ['col0'], ['FLOAT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DOUBLE', ['col0'], ['DOUBLE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UTINYINT', ['col0'], ['UTINYINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'USMALLINT', ['col0'], ['USMALLINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UINTEGER', ['col0'], ['UINTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UBIGINT', ['col0'], ['UBIGINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UHUGEINT', ['col0'], ['UHUGEINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['DATE', 'INTEGER'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'DATE', ['col0', 'col1'], ['INTEGER', 'DATE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['INTERVAL', 'DATE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['TIME', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIME', ['col0', 'col1'], ['INTERVAL', 'TIME'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIMESTAMP', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['INTERVAL', 'TIMESTAMP'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIME WITH TIME ZONE', ['col0', 'col1'], ['INTERVAL', 'TIME WITH TIME ZONE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['TIME', 'DATE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP', ['col0', 'col1'], ['DATE', 'TIME'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['TIME WITH TIME ZONE', 'DATE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1'], ['DATE', 'TIME WITH TIME ZONE'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'add', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 154, None, 'CONSISTENT'), ('system', '0', 'main', 'age', 'scalar', 'Subtract arguments, resulting in the time difference between the two timestamps', None, 'INTERVAL', ['timestamp'], ['TIMESTAMP'], None, None, False, True, 416, "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'age', 'scalar', 'Subtract arguments, resulting in the time difference between the two timestamps', None, 'INTERVAL', ['timestamp', 'timestamp'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 416, "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'age', 'scalar', 'Subtract arguments, resulting in the time difference between the two timestamps', None, 'INTERVAL', ['timestamp', 'timestamp'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 416, "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'age', 'scalar', 'Subtract arguments, resulting in the time difference between the two timestamps', None, 'INTERVAL', ['timestamp'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 416, "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'aggregate', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 418, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', 'alias', 'scalar', 'Returns the name of a given expression', None, 'VARCHAR', ['expr'], ['ANY'], None, None, False, True, 420, 'alias(42 + 1)', 'CONSISTENT'), ('system', '0', 'main', 'row', 'scalar', 'Creates an unnamed STRUCT containing the argument values.', None, 'STRUCT', [], [], 'ANY', None, False, True, 906, "row(4, 'hello')", 'CONSISTENT'), ('system', '0', 'main', 'apply', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 422, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'to_hours', 'scalar', 'Construct a hour interval', None, 'INTERVAL', ['integer'], ['BIGINT'], None, None, False, True, 996, 'to_hours(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_json', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1109, None, 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'FLOAT', ['x', 'precision'], ['FLOAT', 'INTEGER'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'DOUBLE', ['x', 'precision'], ['DOUBLE', 'INTEGER'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'round', 'scalar', 'Rounds x to s decimal places', None, 'DECIMAL', ['x', 'precision'], ['DECIMAL', 'INTEGER'], None, None, False, True, 904, 'round(42.4332, 2)', 'CONSISTENT'), ('system', '0', 'main', 'right_grapheme', 'scalar', 'Extract the right-most count grapheme clusters', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 902, "right_grapheme('🤦🏼\u200d♂️🤦🏽\u200d♀️', 1)", 'CONSISTENT'), ('system', '0', 'main', 'right', 'scalar', 'Extract the right-most count characters', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 900, "right('Hello🦆', 3)", 'CONSISTENT'), ('system', '0', 'main', 'reverse', 'scalar', 'Reverses the string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 898, "reverse('hello')", 'CONSISTENT'), ('system', '0', 'main', 'replace', 'scalar', 'Replaces any occurrences of the source with target in string', None, 'VARCHAR', ['string', 'source', 'target'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 894, "replace('hello', 'l', '-')", 'CONSISTENT'), ('system', '0', 'main', 'repeat', 'scalar', 'Repeats the string count number of times', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 892, "repeat('A', 5)", 'CONSISTENT'), ('system', '0', 'main', 'repeat', 'scalar', 'Repeats the string count number of times', None, 'BLOB', ['string', 'count'], ['BLOB', 'BIGINT'], None, None, False, True, 892, "repeat('A', 5)", 'CONSISTENT'), ('system', '0', 'main', 'to_microseconds', 'scalar', 'Construct a microsecond interval', None, 'INTERVAL', ['integer'], ['BIGINT'], None, None, False, True, 998, 'to_microseconds(5)', 'CONSISTENT'), ('system', '0', 'main', 'regexp_split_to_array', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 872, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'regexp_split_to_array', 'scalar', 'Splits the string along the regex', None, 'VARCHAR[]', ['string', 'separator', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 872, "string_split_regex('hello␣world; 42', ';?␣')", 'CONSISTENT'), ('system', '0', 'main', 'array_aggr', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 442, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', 'array_aggregate', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 444, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', '~~~', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 214, None, 'CONSISTENT'), ('system', '0', 'main', 'array_apply', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 446, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'array_cat', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 260, None, 'CONSISTENT'), ('system', '0', 'main', 'array_concat', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 258, None, 'CONSISTENT'), ('system', '0', 'main', 'array_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 264, None, 'CONSISTENT'), ('system', '0', 'main', 'array_cosine_similarity', 'scalar', 'Compute the cosine similarity between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'FLOAT', ['array1', 'array2'], ['FLOAT[ANY]', 'FLOAT[ANY]'], None, None, False, True, 448, 'array_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_cosine_similarity', 'scalar', 'Compute the cosine similarity between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'DOUBLE', ['array1', 'array2'], ['DOUBLE[ANY]', 'DOUBLE[ANY]'], None, None, False, True, 448, 'array_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_cross_product', 'scalar', 'Compute the cross product of two arrays of size 3. The array elements can not be NULL.', None, 'DOUBLE[3]', ['array', ' array'], ['DOUBLE[3]', 'DOUBLE[3]'], None, None, False, True, 450, 'array_cross_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_cross_product', 'scalar', 'Compute the cross product of two arrays of size 3. The array elements can not be NULL.', None, 'FLOAT[3]', ['array', ' array'], ['FLOAT[3]', 'FLOAT[3]'], None, None, False, True, 450, 'array_cross_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_distance', 'scalar', 'Compute the distance between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'FLOAT', ['array1', 'array2'], ['FLOAT[ANY]', 'FLOAT[ANY]'], None, None, False, True, 452, 'array_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_distance', 'scalar', 'Compute the distance between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'DOUBLE', ['array1', 'array2'], ['DOUBLE[ANY]', 'DOUBLE[ANY]'], None, None, False, True, 452, 'array_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_distinct', 'scalar', 'Removes all duplicates and NULLs from a list. Does not preserve the original order', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 454, 'list_distinct([1, 1, NULL, -3, 1, 5])', 'CONSISTENT'), ('system', '0', 'main', 'array_dot_product', 'scalar', 'Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'FLOAT', ['array1', 'array2'], ['FLOAT[ANY]', 'FLOAT[ANY]'], None, None, False, True, 456, 'array_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_dot_product', 'scalar', 'Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'DOUBLE', ['array1', 'array2'], ['DOUBLE[ANY]', 'DOUBLE[ANY]'], None, None, False, True, 456, 'array_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['ANY[]', 'BIGINT'], None, None, False, True, 282, None, 'CONSISTENT'), ('system', '0', 'main', 'array_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 282, None, 'CONSISTENT'), ('system', '0', 'main', 'array_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['STRUCT', 'VARCHAR'], None, None, False, True, 282, None, 'CONSISTENT'), ('system', '0', 'main', 'array_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['STRUCT', 'BIGINT'], None, None, False, True, 282, None, 'CONSISTENT'), ('system', '0', 'main', 'array_filter', 'scalar', 'Constructs a list from those elements of the input list for which the lambda function returns true', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 458, 'list_filter([3, 4, 5], x -> x > 4)', 'CONSISTENT'), ('system', '0', 'main', 'array_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 460, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 460, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 460, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_has', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 268, None, 'CONSISTENT'), ('system', '0', 'main', '~~*', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 216, None, 'CONSISTENT'), ('system', '0', 'main', '~~', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 210, None, 'CONSISTENT'), ('system', '0', 'main', 'array_indexof', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 276, None, 'CONSISTENT'), ('system', '0', 'main', 'array_inner_product', 'scalar', 'Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'FLOAT', ['array1', 'array2'], ['FLOAT[ANY]', 'FLOAT[ANY]'], None, None, False, True, 462, 'array_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'array_inner_product', 'scalar', 'Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.', None, 'DOUBLE', ['array1', 'array2'], ['DOUBLE[ANY]', 'DOUBLE[ANY]'], None, None, False, True, 462, 'array_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'TINYINT', ['input'], ['TINYINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'SMALLINT', ['input'], ['SMALLINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'INTEGER', ['input'], ['INTEGER'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'BIGINT', ['input'], ['BIGINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'HUGEINT', ['input'], ['HUGEINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'UTINYINT', ['input'], ['UTINYINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'USMALLINT', ['input'], ['USMALLINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'UINTEGER', ['input'], ['UINTEGER'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'UBIGINT', ['input'], ['UBIGINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'UHUGEINT', ['input'], ['UHUGEINT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', '~', 'scalar', 'Bitwise NOT', None, 'BIT', ['input'], ['BIT'], None, None, False, True, 1074, '~15', 'CONSISTENT'), ('system', '0', 'main', 'array_length', 'scalar', None, None, 'BIGINT', ['col0'], ['ANY[]'], None, None, False, True, 202, None, 'CONSISTENT'), ('system', '0', 'main', 'array_length', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['ANY[]', 'BIGINT'], None, None, False, True, 202, None, 'CONSISTENT'), ('system', '0', 'main', '||', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['ANY', 'ANY'], None, None, False, True, 190, None, 'CONSISTENT'), ('system', '0', 'main', '||', 'scalar', None, None, 'BLOB', ['col0', 'col1'], ['BLOB', 'BLOB'], None, None, False, True, 190, None, 'CONSISTENT'), ('system', '0', 'main', '||', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 190, None, 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'TINYINT', ['left', 'right'], ['TINYINT', 'TINYINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'SMALLINT', ['left', 'right'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'INTEGER', ['left', 'right'], ['INTEGER', 'INTEGER'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'BIGINT', ['left', 'right'], ['BIGINT', 'BIGINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'HUGEINT', ['left', 'right'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'UTINYINT', ['left', 'right'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'USMALLINT', ['left', 'right'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'UINTEGER', ['left', 'right'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'UBIGINT', ['left', 'right'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'UHUGEINT', ['left', 'right'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', '|', 'scalar', 'Bitwise OR', None, 'BIT', ['left', 'right'], ['BIT', 'BIT'], None, None, False, True, 1072, '32 | 3', 'CONSISTENT'), ('system', '0', 'main', 'array_position', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 274, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['UTINYINT'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['USMALLINT'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['UINTEGER'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['UBIGINT'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_string', 'scalar', None, None, 'VARCHAR', ['col0'], ['HUGEINT'], None, None, False, True, 144, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['UTINYINT', 'USMALLINT'], None, None, False, True, 126, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UTINYINT', 'UINTEGER'], None, None, False, True, 128, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['USMALLINT', 'UINTEGER'], None, None, False, True, 128, None, 'CONSISTENT'), ('system', '0', 'main', 'array_reduce', 'scalar', 'Returns a single value that is the result of applying the lambda function to each element of the input list, starting with the first element and then repeatedly applying the lambda function to the result of the previous application and the next element of the list.', None, 'ANY', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 464, 'list_reduce([1, 2, 3], (x, y) -> x + y)', 'CONSISTENT'), ('system', '0', 'main', 'array_resize', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 286, None, 'CONSISTENT'), ('system', '0', 'main', 'array_resize', 'scalar', None, None, 'ANY[]', ['col0', 'col1', 'col2'], ['ANY[]', 'ANY', 'ANY'], None, None, False, True, 286, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uhugeint', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UTINYINT', 'UHUGEINT'], None, None, False, True, 132, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uhugeint', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['USMALLINT', 'UHUGEINT'], None, None, False, True, 132, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uhugeint', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UINTEGER', 'UHUGEINT'], None, None, False, True, 132, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_uhugeint', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UBIGINT', 'UHUGEINT'], None, None, False, True, 132, None, 'CONSISTENT'), ('system', '0', 'main', 'array_reverse_sort', 'scalar', 'Sorts the elements of the list in reverse order', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 466, 'list_reverse_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_reverse_sort', 'scalar', 'Sorts the elements of the list in reverse order', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 466, 'list_reverse_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_select', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'BIGINT[]'], None, None, False, True, 294, None, 'CONSISTENT'), ('system', '0', 'main', 'array_slice', 'scalar', 'Extract a sublist using slice conventions. Negative values are accepted', None, 'ANY', ['list', 'begin', 'end['], ['ANY', 'ANY', 'ANY'], None, None, False, True, 468, 'list_slice(l, 2, 4)', 'CONSISTENT'), ('system', '0', 'main', 'array_slice', 'scalar', 'Extract a sublist using slice conventions. Negative values are accepted', None, 'ANY', ['list', 'begin', 'end[', 'step]'], ['ANY', 'ANY', 'ANY', 'BIGINT'], None, None, False, True, 468, 'list_slice(l, 2, 4)', 'CONSISTENT'), ('system', '0', 'main', 'array_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 470, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 470, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 470, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'array_to_json', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1113, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UTINYINT', 'UBIGINT'], None, None, False, True, 130, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['USMALLINT', 'UBIGINT'], None, None, False, True, 130, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UINTEGER', 'UBIGINT'], None, None, False, True, 130, None, 'CONSISTENT'), ('system', '0', 'main', 'array_transform', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 472, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'array_unique', 'scalar', 'Counts the unique elements of a list', None, 'UBIGINT', ['list'], ['ANY[]'], None, None, False, True, 474, 'list_unique([1, 1, NULL, -3, 1, 5])', 'CONSISTENT'), ('system', '0', 'main', 'array_value', 'scalar', 'Create an ARRAY containing the argument values.', None, 'ARRAY', [], [], 'ANY', None, False, True, 476, 'array_value(4, 5, 6)', 'CONSISTENT'), ('system', '0', 'main', 'array_where', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'BOOLEAN[]'], None, None, False, True, 298, None, 'CONSISTENT'), ('system', '0', 'main', 'array_zip', 'scalar', None, None, 'STRUCT[]', [], [], 'ANY', None, False, True, 290, None, 'CONSISTENT'), ('system', '0', 'main', 'ascii', 'scalar', 'Returns an integer that represents the Unicode code point of the first character of the string', None, 'INTEGER', ['string'], ['VARCHAR'], None, None, False, True, 478, "ascii('Ω')", 'CONSISTENT'), ('system', '0', 'main', 'asin', 'scalar', 'Computes the arcsine of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 480, 'asin(0.5)', 'CONSISTENT'), ('system', '0', 'main', 'atan', 'scalar', 'Computes the arctangent of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 482, 'atan(0.5)', 'CONSISTENT'), ('system', '0', 'main', 'atan2', 'scalar', 'Computes the arctangent (y, x)', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 484, 'atan2(1.0, 0.0)', 'CONSISTENT'), ('system', '0', 'main', 'regexp_replace', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 232, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_replace', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 232, None, 'CONSISTENT'), ('system', '0', 'main', 'bar', 'scalar', 'Draws a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80', None, 'VARCHAR', ['x', 'min', 'max', 'width'], ['DOUBLE', 'DOUBLE', 'DOUBLE', 'DOUBLE'], None, None, False, True, 488, 'bar(5, 0, 20, 10)', 'CONSISTENT'), ('system', '0', 'main', 'bar', 'scalar', 'Draws a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80', None, 'VARCHAR', ['x', 'min', 'max'], ['DOUBLE', 'DOUBLE', 'DOUBLE'], None, None, False, True, 488, 'bar(5, 0, 20, 10)', 'CONSISTENT'), ('system', '0', 'main', 'base64', 'scalar', 'Convert a blob to a base64 encoded string', None, 'VARCHAR', ['blob'], ['BLOB'], None, None, False, True, 490, "base64('A'::blob)", 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['UBIGINT'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['BIGINT'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['HUGEINT'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bin', 'scalar', 'Converts the value to binary representation', None, 'VARCHAR', ['value'], ['UHUGEINT'], None, None, False, True, 492, 'bin(42)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring', 'scalar', 'Pads the bitstring until the specified length', None, 'BIT', ['bitstring', 'length'], ['VARCHAR', 'INTEGER'], None, None, False, True, 504, "bitstring('1010'::BIT, 7)", 'CONSISTENT'), ('system', '0', 'main', 'regexp_matches', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 230, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_matches', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 230, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_full_match', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 228, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_full_match', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 228, None, 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['SMALLINT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['INTEGER'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['BIGINT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'TINYINT', ['x'], ['HUGEINT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_count', 'scalar', 'Returns the number of bits that are set', None, 'BIGINT', ['x'], ['BIT'], None, None, False, True, 496, 'bit_count(31)', 'CONSISTENT'), ('system', '0', 'main', 'bit_length', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 206, None, 'CONSISTENT'), ('system', '0', 'main', 'bit_length', 'scalar', None, None, 'BIGINT', ['col0'], ['BIT'], None, None, False, True, 206, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract_all', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 236, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract_all', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'INTEGER'], None, None, False, True, 236, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract_all', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'VARCHAR', 'INTEGER', 'VARCHAR'], None, None, False, True, 236, None, 'CONSISTENT'), ('system', '0', 'main', 'bit_position', 'scalar', 'Returns first starting index of the specified substring within bits, or zero if it is not present. The first (leftmost) bit is indexed 1', None, 'INTEGER', ['substring', 'bitstring'], ['BIT', 'BIT'], None, None, False, True, 500, "bit_position('010'::BIT, '1110101'::BIT)", 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'INTEGER'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'VARCHAR', 'INTEGER', 'VARCHAR'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR[]'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR'], None, None, False, True, 234, None, 'CONSISTENT'), ('system', '0', 'main', 'regexp_escape', 'scalar', 'Escapes all potentially meaningful regexp characters in the input string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 870, "regexp_escape('https://duckdb.org')", 'CONSISTENT'), ('system', '0', 'main', 'reduce', 'scalar', 'Returns a single value that is the result of applying the lambda function to each element of the input list, starting with the first element and then repeatedly applying the lambda function to the result of the previous application and the next element of the list.', None, 'ANY', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 868, 'list_reduce([1, 2, 3], (x, y) -> x + y)', 'CONSISTENT'), ('system', '0', 'main', 'cardinality', 'scalar', 'Returns the size of the map (or the number of entries in the map)', None, 'UBIGINT', ['map'], ['ANY'], 'ANY', None, False, True, 512, "cardinality( map([4, 2], ['a', 'b']) );", 'CONSISTENT'), ('system', '0', 'main', 'cbrt', 'scalar', 'Returns the cube root of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 514, 'cbrt(8)', 'CONSISTENT'), ('system', '0', 'main', 'ceil', 'scalar', 'Rounds the number up', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 516, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceil', 'scalar', 'Rounds the number up', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 516, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceil', 'scalar', 'Rounds the number up', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 516, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceiling', 'scalar', 'Rounds the number up', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 518, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceiling', 'scalar', 'Rounds the number up', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 518, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'ceiling', 'scalar', 'Rounds the number up', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 518, 'ceil(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'century', 'scalar', 'Extract the century component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 520, "century(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'century', 'scalar', 'Extract the century component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 520, "century(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'century', 'scalar', 'Extract the century component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 520, "century(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'century', 'scalar', 'Extract the century component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 520, "century(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'chr', 'scalar', 'Returns a character which is corresponding the ASCII code value or Unicode code point', None, 'VARCHAR', ['code_point'], ['INTEGER'], None, None, False, True, 522, 'chr(65)', 'CONSISTENT'), ('system', '0', 'main', 'combine', 'scalar', None, None, 'AGGREGATE_STATE<?>', ['col0', 'col1'], ['AGGREGATE_STATE<?>', 'ANY'], None, None, False, True, 148, None, 'CONSISTENT'), ('system', '0', 'main', 'concat', 'scalar', None, None, 'VARCHAR', ['col0'], ['ANY'], 'ANY', None, False, True, 188, None, 'CONSISTENT'), ('system', '0', 'main', 'concat_ws', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'ANY'], 'ANY', None, False, True, 192, None, 'CONSISTENT'), ('system', '0', 'main', 'constant_or_null', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['ANY', 'ANY'], 'ANY', None, False, True, 146, None, 'CONSISTENT'), ('system', '0', 'main', 'contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 194, None, 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'BIGINT[]', ['start'], ['BIGINT'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'BIGINT[]', ['start', 'stop'], ['BIGINT', 'BIGINT'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'BIGINT[]', ['start', 'stop', 'step'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'TIMESTAMP[]', ['start', 'stop', 'step'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'range', 'scalar', 'Create a list of values between start and stop - the stop parameter is exclusive', None, 'TIMESTAMP WITH TIME ZONE[]', ['start', 'stop', 'step'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 866, 'range(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'cos', 'scalar', 'Computes the cos of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 526, 'cos(90)', 'CONSISTENT'), ('system', '0', 'main', 'cot', 'scalar', 'Computes the cotangent of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 528, 'cot(0.5)', 'CONSISTENT'), ('system', '0', 'main', 'random', 'scalar', 'Returns a random number between 0 and 1', None, 'DOUBLE', [], [], None, None, True, True, 864, 'random()', 'VOLATILE'), ('system', '0', 'main', '__internal_decompress_integral_smallint', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['UTINYINT', 'SMALLINT'], None, None, False, True, 118, None, 'CONSISTENT'), ('system', '0', 'main', 'radians', 'scalar', 'Converts degrees to radians', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 862, 'radians(90)', 'CONSISTENT'), ('system', '0', 'main', 'quarter', 'scalar', 'Extract the quarter component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 860, "quarter(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'quarter', 'scalar', 'Extract the quarter component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 860, "quarter(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'quarter', 'scalar', 'Extract the quarter component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 860, "quarter(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'quarter', 'scalar', 'Extract the quarter component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 860, "quarter(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'printf', 'scalar', 'Formats a string using printf syntax', None, 'VARCHAR', ['format'], ['VARCHAR'], 'ANY', None, False, True, 850, 'printf(\'Benchmark "%s" took %d seconds\', \'CSV\', 42)', 'CONSISTENT'), ('system', '0', 'main', 'create_sort_key', 'scalar', 'Constructs a binary-comparable sort key based on a set of input parameters and sort qualifiers', None, 'BLOB', ['parameters...'], ['ANY'], 'ANY', None, False, True, 534, "create_sort_key('A', 'DESC')", 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_integer', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['UTINYINT', 'INTEGER'], None, None, False, True, 120, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_integer', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['USMALLINT', 'INTEGER'], None, None, False, True, 120, None, 'CONSISTENT'), ('system', '0', 'main', 'current_database', 'scalar', 'Returns the name of the currently active database', None, 'VARCHAR', [], [], None, None, False, True, 536, 'current_database()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'current_date', 'scalar', 'Returns the current date', None, 'DATE', [], [], None, None, False, True, 538, 'current_date()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'current_localtime', 'scalar', None, None, 'TIME', [], [], None, None, False, True, 1451, None, 'CONSISTENT'), ('system', '0', 'main', 'current_localtimestamp', 'scalar', None, None, 'TIMESTAMP', [], [], None, None, False, True, 1449, None, 'CONSISTENT'), ('system', '0', 'main', 'current_query', 'scalar', 'Returns the current query as a string', None, 'VARCHAR', [], [], None, None, True, True, 540, 'current_query()', 'VOLATILE'), ('system', '0', 'main', '__internal_decompress_integral_hugeint', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['UTINYINT', 'HUGEINT'], None, None, False, True, 124, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_hugeint', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['USMALLINT', 'HUGEINT'], None, None, False, True, 124, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_hugeint', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['UINTEGER', 'HUGEINT'], None, None, False, True, 124, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_hugeint', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['UBIGINT', 'HUGEINT'], None, None, False, True, 124, None, 'CONSISTENT'), ('system', '0', 'main', 'current_schema', 'scalar', 'Returns the name of the currently active schema. Default is main', None, 'VARCHAR', [], [], None, None, False, True, 542, 'current_schema()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'current_schemas', 'scalar', 'Returns list of schemas. Pass a parameter of True to include implicit schemas', None, 'VARCHAR[]', ['include_implicit'], ['BOOLEAN'], None, None, False, True, 544, 'current_schemas(true)', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'current_setting', 'scalar', 'Returns the current value of the configuration setting', None, 'ANY', ['setting_name'], ['VARCHAR'], None, None, False, True, 546, "current_setting('access_mode')", 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_bigint', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['UTINYINT', 'BIGINT'], None, None, False, True, 122, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_bigint', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['USMALLINT', 'BIGINT'], None, None, False, True, 122, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_decompress_integral_bigint', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['UINTEGER', 'BIGINT'], None, None, False, True, 122, None, 'CONSISTENT'), ('system', '0', 'main', 'currval', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, True, True, 176, None, 'VOLATILE'), ('system', '0', 'main', 'damerau_levenshtein', 'scalar', 'Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 548, "damerau_levenshtein('hello', 'world')", 'CONSISTENT'), ('system', '0', 'main', 'datediff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'DATE', 'DATE'], None, None, False, True, 558, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datediff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 558, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datediff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIME', 'TIME'], None, None, False, True, 558, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datediff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 558, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'DATE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIME'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'INTERVAL'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIME WITH TIME ZONE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'DATE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIMESTAMP'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIME'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'INTERVAL'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIME WITH TIME ZONE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datepart', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 560, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datesub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'DATE', 'DATE'], None, None, False, True, 562, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datesub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 562, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datesub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIME', 'TIME'], None, None, False, True, 562, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datesub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 562, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'datetrunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP', ['part', 'timestamp'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 564, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datetrunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP', ['part', 'timestamp'], ['VARCHAR', 'DATE'], None, None, False, True, 564, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datetrunc', 'scalar', 'Truncate to specified precision', None, 'INTERVAL', ['part', 'timestamp'], ['VARCHAR', 'INTERVAL'], None, None, False, True, 564, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'datetrunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP WITH TIME ZONE', ['part', 'timestamp'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 564, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_string_utinyint', 'scalar', None, None, 'UTINYINT', ['col0'], ['VARCHAR'], None, None, False, True, 134, None, 'CONSISTENT'), ('system', '0', 'main', 'date_diff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'DATE', 'DATE'], None, None, False, True, 550, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_diff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 550, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_diff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIME', 'TIME'], None, None, False, True, 550, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_diff', 'scalar', 'The number of partition boundaries between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 550, "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'DATE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIME'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'INTERVAL'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIME WITH TIME ZONE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'DATE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIMESTAMP'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIME'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'INTERVAL'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIME WITH TIME ZONE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'BIGINT', ['ts', 'col1'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_part', 'scalar', 'Get subfield (equivalent to extract)', None, 'STRUCT()', ['ts', 'col1'], ['VARCHAR[]', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 552, "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_sub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'DATE', 'DATE'], None, None, False, True, 554, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_sub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 554, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_sub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIME', 'TIME'], None, None, False, True, 554, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_sub', 'scalar', 'The number of complete partitions between the timestamps', None, 'BIGINT', ['part', 'startdate', 'enddate'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 554, "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')", 'CONSISTENT'), ('system', '0', 'main', 'date_trunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP', ['part', 'timestamp'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 556, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_trunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP', ['part', 'timestamp'], ['VARCHAR', 'DATE'], None, None, False, True, 556, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_trunc', 'scalar', 'Truncate to specified precision', None, 'INTERVAL', ['part', 'timestamp'], ['VARCHAR', 'INTERVAL'], None, None, False, True, 556, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'date_trunc', 'scalar', 'Truncate to specified precision', None, 'TIMESTAMP WITH TIME ZONE', ['part', 'timestamp'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 556, "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')", 'CONSISTENT'), ('system', '0', 'main', 'day', 'scalar', 'Extract the day component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 566, "day(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'day', 'scalar', 'Extract the day component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 566, "day(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'day', 'scalar', 'Extract the day component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 566, "day(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'day', 'scalar', 'Extract the day component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 566, "day(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayname', 'scalar', 'The (English) name of the weekday', None, 'VARCHAR', ['ts'], ['DATE'], None, None, False, True, 568, "dayname(TIMESTAMP '1992-03-22')", 'CONSISTENT'), ('system', '0', 'main', 'dayname', 'scalar', 'The (English) name of the weekday', None, 'VARCHAR', ['ts'], ['TIMESTAMP'], None, None, False, True, 568, "dayname(TIMESTAMP '1992-03-22')", 'CONSISTENT'), ('system', '0', 'main', 'dayname', 'scalar', 'The (English) name of the weekday', None, 'VARCHAR', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 568, "dayname(TIMESTAMP '1992-03-22')", 'CONSISTENT'), ('system', '0', 'main', 'dayofmonth', 'scalar', 'Extract the dayofmonth component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 570, "dayofmonth(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofmonth', 'scalar', 'Extract the dayofmonth component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 570, "dayofmonth(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofmonth', 'scalar', 'Extract the dayofmonth component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 570, "dayofmonth(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofmonth', 'scalar', 'Extract the dayofmonth component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 570, "dayofmonth(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofweek', 'scalar', 'Extract the dayofweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 572, "dayofweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofweek', 'scalar', 'Extract the dayofweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 572, "dayofweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofweek', 'scalar', 'Extract the dayofweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 572, "dayofweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofweek', 'scalar', 'Extract the dayofweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 572, "dayofweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofyear', 'scalar', 'Extract the dayofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 574, "dayofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofyear', 'scalar', 'Extract the dayofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 574, "dayofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofyear', 'scalar', 'Extract the dayofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 574, "dayofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'dayofyear', 'scalar', 'Extract the dayofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 574, "dayofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decade', 'scalar', 'Extract the decade component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 576, "decade(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decade', 'scalar', 'Extract the decade component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 576, "decade(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decade', 'scalar', 'Extract the decade component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 576, "decade(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decade', 'scalar', 'Extract the decade component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 576, "decade(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'decode', 'scalar', 'Convert blob to varchar. Fails if blob is not valid utf-8', None, 'VARCHAR', ['blob'], ['BLOB'], None, None, False, True, 578, "decode('\\xC3\\xBC'::BLOB)", 'CONSISTENT'), ('system', '0', 'main', 'degrees', 'scalar', 'Converts radians to degrees', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 580, 'degrees(pi())', 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'divide', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 168, None, 'CONSISTENT'), ('system', '0', 'main', 'editdist3', 'scalar', 'The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 582, "levenshtein('duck','db')", 'CONSISTENT'), ('system', '0', 'main', 'element_at', 'scalar', 'Returns a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned', None, 'ANY', ['map', 'key'], ['ANY', 'ANY'], 'ANY', None, False, True, 584, "map_extract(map(['key'], ['val']), 'key')", 'CONSISTENT'), ('system', '0', 'main', 'encode', 'scalar', 'Convert varchar to blob. Converts utf-8 characters into literal encoding', None, 'BLOB', ['string'], ['VARCHAR'], None, None, False, True, 586, "encode('my_string_with_ü')", 'CONSISTENT'), ('system', '0', 'main', 'ends_with', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 248, None, 'CONSISTENT'), ('system', '0', 'main', 'prefix', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 244, None, 'CONSISTENT'), ('system', '0', 'main', 'enum_code', 'scalar', 'Returns the numeric value backing the given enum value', None, 'ANY', ['enum'], ['ANY'], None, None, False, True, 590, "enum_code('happy'::mood)", 'CONSISTENT'), ('system', '0', 'main', 'enum_first', 'scalar', 'Returns the first value of the input enum type', None, 'VARCHAR', ['enum'], ['ANY'], None, None, False, True, 592, 'enum_first(NULL::mood)', 'CONSISTENT'), ('system', '0', 'main', 'enum_last', 'scalar', 'Returns the last value of the input enum type', None, 'VARCHAR', ['enum'], ['ANY'], None, None, False, True, 594, 'enum_last(NULL::mood)', 'CONSISTENT'), ('system', '0', 'main', 'enum_range', 'scalar', 'Returns all values of the input enum type as an array', None, 'VARCHAR[]', ['enum'], ['ANY'], None, None, False, True, 596, 'enum_range(NULL::mood)', 'CONSISTENT'), ('system', '0', 'main', 'enum_range_boundary', 'scalar', 'Returns the range between the two given enum values as an array. The values must be of the same enum type. When the first parameter is NULL, the result starts with the first value of the enum type. When the second parameter is NULL, the result ends with the last value of the enum type', None, 'VARCHAR[]', ['start', 'end'], ['ANY', 'ANY'], None, None, False, True, 598, "enum_range_boundary(NULL, 'happy'::mood)", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['DATE'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['TIMESTAMP'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['INTERVAL'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['TIME'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['TIME WITH TIME ZONE'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch', 'scalar', 'Extract the epoch component from a temporal type', None, 'DOUBLE', ['temporal'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 600, "epoch(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['DATE'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['INTERVAL'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME WITH TIME ZONE'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ms', 'scalar', 'Extract the epoch component in milliseconds from a temporal type', None, 'TIMESTAMP', ['temporal'], ['BIGINT'], None, None, False, True, 602, "epoch_ms(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['DATE'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['INTERVAL'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME WITH TIME ZONE'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_ns', 'scalar', 'Extract the epoch component in nanoseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 604, "epoch_ns(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['DATE'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['INTERVAL'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIME WITH TIME ZONE'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'epoch_us', 'scalar', 'Extract the epoch component in microseconds from a temporal type', None, 'BIGINT', ['temporal'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 606, "epoch_us(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'era', 'scalar', 'Extract the era component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 608, "era(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'era', 'scalar', 'Extract the era component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 608, "era(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'era', 'scalar', 'Extract the era component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 608, "era(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'era', 'scalar', 'Extract the era component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 608, "era(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'error', 'scalar', 'Throws the given error message', None, 'NULL', ['message'], ['VARCHAR'], None, None, True, True, 610, "error('access_mode')", 'VOLATILE'), ('system', '0', 'main', 'even', 'scalar', 'Rounds x to next even number by rounding away from zero', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 612, 'even(2.9)', 'CONSISTENT'), ('system', '0', 'main', 'exp', 'scalar', 'Computes e to the power of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 614, 'exp(1)', 'CONSISTENT'), ('system', '0', 'main', 'factorial', 'scalar', 'Factorial of x. Computes the product of the current integer and all integers below it', None, 'HUGEINT', ['x'], ['INTEGER'], None, None, False, True, 616, '4!', 'CONSISTENT'), ('system', '0', 'main', 'power', 'scalar', 'Computes x to the power of y', None, 'DOUBLE', ['x', 'y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 848, 'pow(2, 3)', 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_string_usmallint', 'scalar', None, None, 'USMALLINT', ['col0'], ['VARCHAR'], None, None, False, True, 136, None, 'CONSISTENT'), ('system', '0', 'main', 'filter', 'scalar', 'Constructs a list from those elements of the input list for which the lambda function returns true', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 620, 'list_filter([3, 4, 5], x -> x > 4)', 'CONSISTENT'), ('system', '0', 'main', 'finalize', 'scalar', None, None, 'INVALID', ['col0'], ['AGGREGATE_STATE<?>'], None, None, False, True, 150, None, 'CONSISTENT'), ('system', '0', 'main', 'pow', 'scalar', 'Computes x to the power of y', None, 'DOUBLE', ['x', 'y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 846, 'pow(2, 3)', 'CONSISTENT'), ('system', '0', 'main', 'flatten', 'scalar', 'Flatten a nested list by one level', None, 'ANY[]', ['nested_list'], ['ANY[][]'], None, None, False, True, 622, 'flatten([[1, 2, 3], [4, 5]])', 'CONSISTENT'), ('system', '0', 'main', 'floor', 'scalar', 'Rounds the number down', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 624, 'floor(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'floor', 'scalar', 'Rounds the number down', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 624, 'floor(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'floor', 'scalar', 'Rounds the number down', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 624, 'floor(17.4)', 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_string_uinteger', 'scalar', None, None, 'UINTEGER', ['col0'], ['VARCHAR'], None, None, False, True, 138, None, 'CONSISTENT'), ('system', '0', 'main', 'format', 'scalar', 'Formats a string using fmt syntax', None, 'VARCHAR', ['format'], ['VARCHAR'], 'ANY', None, False, True, 626, 'format(\'Benchmark "{}" took {} seconds\', \'CSV\', 42)', 'CONSISTENT'), ('system', '0', 'main', 'formatReadableDecimalSize', 'scalar', 'Converts bytes to a human-readable presentation (e.g. 16000 -> 16.0 KB)', None, 'VARCHAR', ['bytes'], ['BIGINT'], None, None, False, True, 628, 'format_bytes(1000 * 16)', 'CONSISTENT'), ('system', '0', 'main', 'formatReadableSize', 'scalar', 'Converts bytes to a human-readable presentation (e.g. 16000 -> 15.6 KiB)', None, 'VARCHAR', ['bytes'], ['BIGINT'], None, None, False, True, 630, 'format_bytes(1000 * 16)', 'CONSISTENT'), ('system', '0', 'main', 'position', 'scalar', 'Returns location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found', None, 'BIGINT', ['haystack', 'needle'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 844, "instr('test test','es')", 'CONSISTENT'), ('system', '0', 'main', 'from_base64', 'scalar', 'Convert a base64 encoded string to a character string', None, 'BLOB', ['string'], ['VARCHAR'], None, None, False, True, 634, "from_base64('QQ==')", 'CONSISTENT'), ('system', '0', 'main', 'from_binary', 'scalar', 'Converts a value from binary representation to a blob', None, 'BLOB', ['value'], ['VARCHAR'], None, None, False, True, 636, "unbin('0110')", 'CONSISTENT'), ('system', '0', 'main', 'from_hex', 'scalar', 'Converts a value from hexadecimal representation to a blob', None, 'BLOB', ['value'], ['VARCHAR'], None, None, False, True, 638, "unhex('2A')", 'CONSISTENT'), ('system', '0', 'main', 'from_json', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1123, None, 'CONSISTENT'), ('system', '0', 'main', 'from_json', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1123, None, 'CONSISTENT'), ('system', '0', 'main', 'from_json_strict', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1127, None, 'CONSISTENT'), ('system', '0', 'main', 'from_json_strict', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1127, None, 'CONSISTENT'), ('system', '0', 'main', 'pi', 'scalar', 'Returns the value of pi', None, 'DOUBLE', [], [], None, None, False, True, 842, 'pi()', 'CONSISTENT'), ('system', '0', 'main', 'gamma', 'scalar', 'Interpolation of (x-1) factorial (so decimal inputs are allowed)', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 642, 'gamma(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'gcd', 'scalar', 'Computes the greatest common divisor of x and y', None, 'BIGINT', ['x', 'y'], ['BIGINT', 'BIGINT'], None, None, False, True, 644, 'greatest_common_divisor(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'gcd', 'scalar', 'Computes the greatest common divisor of x and y', None, 'HUGEINT', ['x', 'y'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 644, 'greatest_common_divisor(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'BIGINT[]', ['start'], ['BIGINT'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'BIGINT[]', ['start', 'stop'], ['BIGINT', 'BIGINT'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'BIGINT[]', ['start', 'stop', 'step'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'TIMESTAMP[]', ['start', 'stop', 'step'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', 'generate_series', 'scalar', 'Create a list of values between start and stop - the stop parameter is inclusive', None, 'TIMESTAMP WITH TIME ZONE[]', ['start', 'stop', 'step'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, False, True, 648, 'generate_series(2, 5, 3)', 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_string_ubigint', 'scalar', None, None, 'UBIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 140, None, 'CONSISTENT'), ('system', '0', 'main', 'gen_random_uuid', 'scalar', 'Returns a random UUID similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687', None, 'UUID', [], [], None, None, True, True, 646, 'uuid()', 'VOLATILE'), ('system', '0', 'main', '__internal_compress_string_hugeint', 'scalar', None, None, 'HUGEINT', ['col0'], ['VARCHAR'], None, None, False, True, 142, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_utinyint', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 110, None, 'CONSISTENT'), ('system', '0', 'main', 'get_bit', 'scalar', 'Extracts the nth bit from bitstring; the first (leftmost) bit is indexed 0', None, 'INTEGER', ['bitstring', 'index'], ['BIT', 'INTEGER'], None, None, False, True, 650, "get_bit('0110010'::BIT, 2)", 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_usmallint', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 112, None, 'CONSISTENT'), ('system', '0', 'main', 'get_current_time', 'scalar', 'Returns the current time', None, 'TIME', [], [], None, None, False, True, 652, 'get_current_time()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'get_current_timestamp', 'scalar', 'Returns the current timestamp', None, 'TIMESTAMP WITH TIME ZONE', [], [], None, None, False, True, 654, 'get_current_timestamp()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 656, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 656, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 656, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'BIGINT', ['arg1'], ['BIGINT'], 'BIGINT', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'HUGEINT', ['arg1'], ['HUGEINT'], 'HUGEINT', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'DOUBLE', ['arg1'], ['DOUBLE'], 'DOUBLE', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'VARCHAR', ['arg1'], ['VARCHAR'], 'VARCHAR', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'TIMESTAMP', ['arg1'], ['TIMESTAMP'], 'TIMESTAMP', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'TIME', ['arg1'], ['TIME'], 'TIME', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'DATE', ['arg1'], ['DATE'], 'DATE', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'TIMESTAMP WITH TIME ZONE', ['arg1'], ['TIMESTAMP WITH TIME ZONE'], 'TIMESTAMP WITH TIME ZONE', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest', 'scalar', 'Returns the highest value of the set of input parameters', None, 'TIME WITH TIME ZONE', ['arg1'], ['TIME WITH TIME ZONE'], 'TIME WITH TIME ZONE', None, False, True, 658, 'greatest(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'greatest_common_divisor', 'scalar', 'Computes the greatest common divisor of x and y', None, 'BIGINT', ['x', 'y'], ['BIGINT', 'BIGINT'], None, None, False, True, 660, 'greatest_common_divisor(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'greatest_common_divisor', 'scalar', 'Computes the greatest common divisor of x and y', None, 'HUGEINT', ['x', 'y'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 660, 'greatest_common_divisor(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'parse_path', 'scalar', "Returns a list of the components (directories and filename) in the path similarly to Python's pathlib.PurePath::parts. separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR[]', ['string'], ['VARCHAR'], None, None, False, True, 840, "parse_path('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'parse_path', 'scalar', "Returns a list of the components (directories and filename) in the path similarly to Python's pathlib.PurePath::parts. separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR[]', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 840, "parse_path('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'hamming', 'scalar', 'The number of positions with different characters for 2 strings of equal length. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 664, "hamming('duck','luck')", 'CONSISTENT'), ('system', '0', 'main', 'hash', 'scalar', 'Returns an integer with the hash of the value. Note that this is not a cryptographic hash', None, 'UBIGINT', ['param'], ['ANY'], 'ANY', None, False, True, 666, "hash('🦆')", 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['BLOB'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['BIGINT'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['UBIGINT'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['HUGEINT'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'hex', 'scalar', 'Converts the value to hexadecimal representation', None, 'VARCHAR', ['value'], ['UHUGEINT'], None, None, False, True, 668, 'hex(42)', 'CONSISTENT'), ('system', '0', 'main', 'parse_filename', 'scalar', "Returns the last component of the path similarly to Python's os.path.basename. If trim_extension is true, the file extension will be removed (it defaults to false). separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 838, "parse_filename('path/to/file.csv', true, 'forward_slash')", 'CONSISTENT'), ('system', '0', 'main', 'parse_filename', 'scalar', "Returns the last component of the path similarly to Python's os.path.basename. If trim_extension is true, the file extension will be removed (it defaults to false). separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string', 'trim_extension'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 838, "parse_filename('path/to/file.csv', true, 'forward_slash')", 'CONSISTENT'), ('system', '0', 'main', 'parse_filename', 'scalar', "Returns the last component of the path similarly to Python's os.path.basename. If trim_extension is true, the file extension will be removed (it defaults to false). separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string', 'trim_extension'], ['VARCHAR', 'BOOLEAN'], None, None, False, True, 838, "parse_filename('path/to/file.csv', true, 'forward_slash')", 'CONSISTENT'), ('system', '0', 'main', 'parse_filename', 'scalar', "Returns the last component of the path similarly to Python's os.path.basename. If trim_extension is true, the file extension will be removed (it defaults to false). separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string', 'trim_extension', 'separator'], ['VARCHAR', 'BOOLEAN', 'VARCHAR'], None, None, False, True, 838, "parse_filename('path/to/file.csv', true, 'forward_slash')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'hour', 'scalar', 'Extract the hour component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 672, "hour(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'icu_sort_key', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1443, None, 'CONSISTENT'), ('system', '0', 'main', 'ilike_escape', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 224, None, 'CONSISTENT'), ('system', '0', 'main', 'instr', 'scalar', 'Returns location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found', None, 'BIGINT', ['haystack', 'needle'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 676, "instr('test test','es')", 'CONSISTENT'), ('system', '0', 'main', 'in_search_path', 'scalar', 'Returns whether or not the database/schema are in the search path', None, 'BOOLEAN', ['database_name', 'schema_name'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 674, "in_search_path('memory', 'main')", 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['FLOAT'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['DOUBLE'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['DATE'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['TIMESTAMP'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isfinite', 'scalar', 'Returns true if the floating point value is finite, false otherwise', None, 'BOOLEAN', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 678, 'isfinite(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['FLOAT'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['DOUBLE'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['DATE'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['TIMESTAMP'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isinf', 'scalar', 'Returns true if the floating point value is infinite, false otherwise', None, 'BOOLEAN', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 680, "isinf('Infinity'::float)", 'CONSISTENT'), ('system', '0', 'main', 'isnan', 'scalar', 'Returns true if the floating point value is not a number, false otherwise', None, 'BOOLEAN', ['x'], ['FLOAT'], None, None, False, True, 682, "isnan('NaN'::FLOAT)", 'CONSISTENT'), ('system', '0', 'main', 'isnan', 'scalar', 'Returns true if the floating point value is not a number, false otherwise', None, 'BOOLEAN', ['x'], ['DOUBLE'], None, None, False, True, 682, "isnan('NaN'::FLOAT)", 'CONSISTENT'), ('system', '0', 'main', 'isodow', 'scalar', 'Extract the isodow component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 684, "isodow(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isodow', 'scalar', 'Extract the isodow component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 684, "isodow(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isodow', 'scalar', 'Extract the isodow component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 684, "isodow(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isodow', 'scalar', 'Extract the isodow component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 684, "isodow(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isoyear', 'scalar', 'Extract the isoyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 686, "isoyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isoyear', 'scalar', 'Extract the isoyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 686, "isoyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isoyear', 'scalar', 'Extract the isoyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 686, "isoyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'isoyear', 'scalar', 'Extract the isoyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 686, "isoyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'parse_dirpath', 'scalar', "Returns the head of the path similarly to Python's os.path.dirname. separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 836, "parse_dirpath('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'parse_dirpath', 'scalar', "Returns the head of the path similarly to Python's os.path.dirname. separator options: system, both_slash (default), forward_slash, backslash", None, 'VARCHAR', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 836, "parse_dirpath('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'jaro_similarity', 'scalar', 'The Jaro similarity between two strings. Different case is considered different. Returns a number between 0 and 1', None, 'DOUBLE', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 690, "jaro_similarity('duck','duckdb')", 'CONSISTENT'), ('system', '0', 'main', 'jaro_winkler_similarity', 'scalar', 'The Jaro-Winkler similarity between two strings. Different case is considered different. Returns a number between 0 and 1', None, 'DOUBLE', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 692, "jaro_winkler_similarity('duck','duckdb')", 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 114, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 114, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 114, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_uinteger', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 114, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1105, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT', ['col0'], ['JSON'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_array_length', 'scalar', None, None, 'UBIGINT[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1129, None, 'CONSISTENT'), ('system', '0', 'main', 'json_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1131, None, 'CONSISTENT'), ('system', '0', 'main', 'json_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['VARCHAR', 'JSON'], None, None, False, True, 1131, None, 'CONSISTENT'), ('system', '0', 'main', 'json_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1131, None, 'CONSISTENT'), ('system', '0', 'main', 'json_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['JSON', 'JSON'], None, None, False, True, 1131, None, 'CONSISTENT'), ('system', '0', 'main', 'json_deserialize_sql', 'scalar', None, None, 'VARCHAR', ['col0'], ['JSON'], None, None, False, True, 1143, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract', 'scalar', None, None, 'JSON[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1095, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path', 'scalar', None, None, 'JSON[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1097, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_path_text', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1101, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'BIGINT'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', 'json_extract_string', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1099, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 116, None, 'CONSISTENT'), ('system', '0', 'main', '__internal_compress_integral_ubigint', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 116, None, 'CONSISTENT'), ('system', '0', 'main', '^@', 'scalar', 'Returns true if string begins with search_string', None, 'BOOLEAN', ['string', 'search_string'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 410, "starts_with('abc','a')", 'CONSISTENT'), ('system', '0', 'main', '^', 'scalar', 'Computes x to the power of y', None, 'DOUBLE', ['x', 'y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 408, 'pow(2, 3)', 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[]', ['col0'], ['VARCHAR'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[][]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[]', ['col0'], ['JSON'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_keys', 'scalar', None, None, 'VARCHAR[][]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1133, None, 'CONSISTENT'), ('system', '0', 'main', 'json_merge_patch', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1117, None, 'CONSISTENT'), ('system', '0', 'main', 'json_object', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1107, None, 'CONSISTENT'), ('system', '0', 'main', 'json_quote', 'scalar', None, None, 'JSON', [], [], 'ANY', None, False, True, 1111, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0'], ['VARCHAR'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'BOOLEAN'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_plan', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2', 'col3', 'col4'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1139, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_sql', 'scalar', None, None, 'JSON', ['col0'], ['VARCHAR'], None, None, False, True, 1141, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_sql', 'scalar', None, None, 'JSON', ['col0', 'col1'], ['VARCHAR', 'BOOLEAN'], None, None, False, True, 1141, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_sql', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1141, None, 'CONSISTENT'), ('system', '0', 'main', 'json_serialize_sql', 'scalar', None, None, 'JSON', ['col0', 'col1', 'col2', 'col3'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, False, True, 1141, None, 'CONSISTENT'), ('system', '0', 'main', 'json_structure', 'scalar', None, None, 'JSON', ['col0'], ['VARCHAR'], None, None, False, True, 1119, None, 'CONSISTENT'), ('system', '0', 'main', 'json_structure', 'scalar', None, None, 'JSON', ['col0'], ['JSON'], None, None, False, True, 1119, None, 'CONSISTENT'), ('system', '0', 'main', 'json_transform', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1121, None, 'CONSISTENT'), ('system', '0', 'main', 'json_transform', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1121, None, 'CONSISTENT'), ('system', '0', 'main', 'json_transform_strict', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1125, None, 'CONSISTENT'), ('system', '0', 'main', 'json_transform_strict', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1125, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR', ['col0'], ['JSON'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['JSON', 'VARCHAR'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_type', 'scalar', None, None, 'VARCHAR[]', ['col0', 'col1'], ['JSON', 'VARCHAR[]'], None, None, False, True, 1135, None, 'CONSISTENT'), ('system', '0', 'main', 'json_valid', 'scalar', None, None, 'BOOLEAN', ['col0'], ['VARCHAR'], None, None, False, True, 1137, None, 'CONSISTENT'), ('system', '0', 'main', 'json_valid', 'scalar', None, None, 'BOOLEAN', ['col0'], ['JSON'], None, None, False, True, 1137, None, 'CONSISTENT'), ('system', '0', 'main', 'julian', 'scalar', 'Extract the Julian Day number from a date or timestamp', None, 'DOUBLE', ['ts'], ['DATE'], None, None, False, True, 694, "julian(timestamp '2006-01-01 12:00')", 'CONSISTENT'), ('system', '0', 'main', 'julian', 'scalar', 'Extract the Julian Day number from a date or timestamp', None, 'DOUBLE', ['ts'], ['TIMESTAMP'], None, None, False, True, 694, "julian(timestamp '2006-01-01 12:00')", 'CONSISTENT'), ('system', '0', 'main', 'julian', 'scalar', 'Extract the Julian Day number from a date or timestamp', None, 'DOUBLE', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 694, "julian(timestamp '2006-01-01 12:00')", 'CONSISTENT'), ('system', '0', 'main', 'parse_dirname', 'scalar', 'Returns the top-level directory name. separator options: system, both_slash (default), forward_slash, backslash', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 834, "parse_dirname('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'parse_dirname', 'scalar', 'Returns the top-level directory name. separator options: system, both_slash (default), forward_slash, backslash', None, 'VARCHAR', ['string', 'separator'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 834, "parse_dirname('path/to/file.csv', 'system')", 'CONSISTENT'), ('system', '0', 'main', 'ord', 'scalar', 'Returns the unicode codepoint of the first character of the string', None, 'INTEGER', ['str'], ['VARCHAR'], None, None, False, True, 832, "unicode('ü')", 'CONSISTENT'), ('system', '0', 'main', 'octet_length', 'scalar', None, None, 'BIGINT', ['col0'], ['BLOB'], None, None, False, True, 208, None, 'CONSISTENT'), ('system', '0', 'main', 'octet_length', 'scalar', None, None, 'BIGINT', ['col0'], ['BIT'], None, None, False, True, 208, None, 'CONSISTENT'), ('system', '0', 'main', 'to_millennia', 'scalar', 'Construct a millenium interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 1000, 'to_millennia(1)', 'CONSISTENT'), ('system', '0', 'main', 'last_day', 'scalar', 'Returns the last day of the month', None, 'DATE', ['ts'], ['DATE'], None, None, False, True, 702, "last_day(TIMESTAMP '1992-03-22 01:02:03.1234')", 'CONSISTENT'), ('system', '0', 'main', 'last_day', 'scalar', 'Returns the last day of the month', None, 'DATE', ['ts'], ['TIMESTAMP'], None, None, False, True, 702, "last_day(TIMESTAMP '1992-03-22 01:02:03.1234')", 'CONSISTENT'), ('system', '0', 'main', 'last_day', 'scalar', 'Returns the last day of the month', None, 'DATE', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 702, "last_day(TIMESTAMP '1992-03-22 01:02:03.1234')", 'CONSISTENT'), ('system', '0', 'main', 'lcase', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 180, None, 'CONSISTENT'), ('system', '0', 'main', 'lcm', 'scalar', 'Computes the least common multiple of x and y', None, 'BIGINT', ['x', 'y'], ['BIGINT', 'BIGINT'], None, None, False, True, 704, 'least_common_multiple(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'lcm', 'scalar', 'Computes the least common multiple of x and y', None, 'HUGEINT', ['x', 'y'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 704, 'least_common_multiple(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'BIGINT', ['arg1'], ['BIGINT'], 'BIGINT', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'HUGEINT', ['arg1'], ['HUGEINT'], 'HUGEINT', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'DOUBLE', ['arg1'], ['DOUBLE'], 'DOUBLE', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'VARCHAR', ['arg1'], ['VARCHAR'], 'VARCHAR', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'TIMESTAMP', ['arg1'], ['TIMESTAMP'], 'TIMESTAMP', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'TIME', ['arg1'], ['TIME'], 'TIME', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'DATE', ['arg1'], ['DATE'], 'DATE', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'TIMESTAMP WITH TIME ZONE', ['arg1'], ['TIMESTAMP WITH TIME ZONE'], 'TIMESTAMP WITH TIME ZONE', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least', 'scalar', 'Returns the lowest value of the set of input parameters', None, 'TIME WITH TIME ZONE', ['arg1'], ['TIME WITH TIME ZONE'], 'TIME WITH TIME ZONE', None, False, True, 706, 'least(42, 84)', 'CONSISTENT'), ('system', '0', 'main', 'least_common_multiple', 'scalar', 'Computes the least common multiple of x and y', None, 'BIGINT', ['x', 'y'], ['BIGINT', 'BIGINT'], None, None, False, True, 708, 'least_common_multiple(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'least_common_multiple', 'scalar', 'Computes the least common multiple of x and y', None, 'HUGEINT', ['x', 'y'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 708, 'least_common_multiple(42, 57)', 'CONSISTENT'), ('system', '0', 'main', 'left', 'scalar', 'Extract the left-most count characters', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 710, "left('Hello🦆', 2)", 'CONSISTENT'), ('system', '0', 'main', 'left_grapheme', 'scalar', 'Extract the left-most count grapheme clusters', None, 'VARCHAR', ['string', 'count'], ['VARCHAR', 'BIGINT'], None, None, False, True, 712, "left_grapheme('🤦🏼\u200d♂️🤦🏽\u200d♀️', 1)", 'CONSISTENT'), ('system', '0', 'main', 'len', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 198, None, 'CONSISTENT'), ('system', '0', 'main', 'len', 'scalar', None, None, 'BIGINT', ['col0'], ['BIT'], None, None, False, True, 198, None, 'CONSISTENT'), ('system', '0', 'main', 'len', 'scalar', None, None, 'BIGINT', ['col0'], ['ANY[]'], None, None, False, True, 198, None, 'CONSISTENT'), ('system', '0', 'main', 'length', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 196, None, 'CONSISTENT'), ('system', '0', 'main', 'length', 'scalar', None, None, 'BIGINT', ['col0'], ['BIT'], None, None, False, True, 196, None, 'CONSISTENT'), ('system', '0', 'main', 'length', 'scalar', None, None, 'BIGINT', ['col0'], ['ANY[]'], None, None, False, True, 196, None, 'CONSISTENT'), ('system', '0', 'main', 'length_grapheme', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, False, True, 200, None, 'CONSISTENT'), ('system', '0', 'main', 'levenshtein', 'scalar', 'The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 714, "levenshtein('duck','db')", 'CONSISTENT'), ('system', '0', 'main', 'lgamma', 'scalar', 'Computes the log of the gamma function', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 716, 'lgamma(2)', 'CONSISTENT'), ('system', '0', 'main', 'like_escape', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 220, None, 'CONSISTENT'), ('system', '0', 'main', 'now', 'scalar', 'Returns the current timestamp', None, 'TIMESTAMP WITH TIME ZONE', [], [], None, None, False, True, 830, 'get_current_timestamp()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'not_like_escape', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 222, None, 'CONSISTENT'), ('system', '0', 'main', 'list_aggr', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 720, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', 'list_aggregate', 'scalar', 'Executes the aggregate function name on the elements of list', None, 'ANY', ['list', 'name'], ['ANY[]', 'VARCHAR'], 'ANY', None, False, True, 722, "list_aggregate([1, 2, NULL], 'min')", 'CONSISTENT'), ('system', '0', 'main', 'yearweek', 'scalar', 'Extract the yearweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1070, "yearweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'yearweek', 'scalar', 'Extract the yearweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1070, "yearweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'yearweek', 'scalar', 'Extract the yearweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1070, "yearweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'yearweek', 'scalar', 'Extract the yearweek component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1070, "yearweek(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'year', 'scalar', 'Extract the year component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1068, "year(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'year', 'scalar', 'Extract the year component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1068, "year(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'year', 'scalar', 'Extract the year component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1068, "year(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'year', 'scalar', 'Extract the year component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1068, "year(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'list_apply', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 724, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'TINYINT', ['left', 'right'], ['TINYINT', 'TINYINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'SMALLINT', ['left', 'right'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'INTEGER', ['left', 'right'], ['INTEGER', 'INTEGER'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'BIGINT', ['left', 'right'], ['BIGINT', 'BIGINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'HUGEINT', ['left', 'right'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'UTINYINT', ['left', 'right'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'USMALLINT', ['left', 'right'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'UINTEGER', ['left', 'right'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'UBIGINT', ['left', 'right'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'UHUGEINT', ['left', 'right'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'xor', 'scalar', 'Bitwise XOR', None, 'BIT', ['left', 'right'], ['BIT', 'BIT'], None, None, False, True, 1066, 'xor(17, 5)', 'CONSISTENT'), ('system', '0', 'main', 'which_secret', 'scalar', 'Print out the name of the secret that will be used for reading a path', None, 'VARCHAR', ['path', 'type'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1064, "which_secret('s3://some/authenticated/path.csv', 's3')", 'CONSISTENT'), ('system', '0', 'main', 'weekofyear', 'scalar', 'Extract the weekofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1062, "weekofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekofyear', 'scalar', 'Extract the weekofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1062, "weekofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekofyear', 'scalar', 'Extract the weekofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1062, "weekofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekofyear', 'scalar', 'Extract the weekofyear component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1062, "weekofyear(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekday', 'scalar', 'Extract the weekday component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1060, "weekday(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekday', 'scalar', 'Extract the weekday component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1060, "weekday(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekday', 'scalar', 'Extract the weekday component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1060, "weekday(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'weekday', 'scalar', 'Extract the weekday component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1060, "weekday(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'week', 'scalar', 'Extract the week component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 1058, "week(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'week', 'scalar', 'Extract the week component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 1058, "week(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'week', 'scalar', 'Extract the week component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 1058, "week(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'week', 'scalar', 'Extract the week component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 1058, "week(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'version', 'scalar', 'Returns the currently active version of DuckDB in this format: v0.3.2\t', None, 'VARCHAR', [], [], None, None, False, True, 1056, 'version()', 'CONSISTENT'), ('system', '0', 'main', 'vector_type', 'scalar', 'Returns the VectorType of a given column', None, 'VARCHAR', ['col'], ['ANY'], None, None, False, True, 1054, 'vector_type(col)', 'CONSISTENT'), ('system', '0', 'main', 'list_cat', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 256, None, 'CONSISTENT'), ('system', '0', 'main', 'list_concat', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY[]'], None, None, False, True, 254, None, 'CONSISTENT'), ('system', '0', 'main', 'list_contains', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 262, None, 'CONSISTENT'), ('system', '0', 'main', 'list_cosine_similarity', 'scalar', 'Compute the cosine similarity between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 726, 'list_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_cosine_similarity', 'scalar', 'Compute the cosine similarity between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 726, 'list_cosine_similarity([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'not_ilike_escape', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1', 'col2'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 226, None, 'CONSISTENT'), ('system', '0', 'main', 'list_distance', 'scalar', 'Compute the distance between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 728, 'list_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_distance', 'scalar', 'Compute the distance between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 728, 'list_distance([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_distinct', 'scalar', 'Removes all duplicates and NULLs from a list. Does not preserve the original order', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 730, 'list_distinct([1, 1, NULL, -3, 1, 5])', 'CONSISTENT'), ('system', '0', 'main', 'list_dot_product', 'scalar', 'Compute the inner product between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 732, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_dot_product', 'scalar', 'Compute the inner product between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 732, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_element', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['ANY[]', 'BIGINT'], None, None, False, True, 280, None, 'CONSISTENT'), ('system', '0', 'main', 'list_element', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 280, None, 'CONSISTENT'), ('system', '0', 'main', 'nfc_normalize', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 250, None, 'CONSISTENT'), ('system', '0', 'main', 'list_extract', 'scalar', None, None, 'ANY', ['col0', 'col1'], ['ANY[]', 'BIGINT'], None, None, False, True, 278, None, 'CONSISTENT'), ('system', '0', 'main', 'list_extract', 'scalar', None, None, 'VARCHAR', ['col0', 'col1'], ['VARCHAR', 'BIGINT'], None, None, False, True, 278, None, 'CONSISTENT'), ('system', '0', 'main', 'list_filter', 'scalar', 'Constructs a list from those elements of the input list for which the lambda function returns true', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 734, 'list_filter([3, 4, 5], x -> x > 4)', 'CONSISTENT'), ('system', '0', 'main', 'nextval', 'scalar', None, None, 'BIGINT', ['col0'], ['VARCHAR'], None, None, True, True, 174, None, 'VOLATILE'), ('system', '0', 'main', 'list_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 736, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 736, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_grade_up', 'scalar', 'Returns the index of their sorted position.', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 736, 'list_grade_up([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_has', 'scalar', None, None, 'BOOLEAN', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 266, None, 'CONSISTENT'), ('system', '0', 'main', 'uuid', 'scalar', 'Returns a random UUID similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687', None, 'UUID', [], [], None, None, True, True, 1046, 'uuid()', 'VOLATILE'), ('system', '0', 'main', 'upper', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 182, None, 'CONSISTENT'), ('system', '0', 'main', 'unpivot_list', 'scalar', 'Identical to list_value, but generated as part of unpivot for better error messages', None, 'LIST', [], [], 'ANY', None, False, True, 1044, 'unpivot_list(4, 5, 6)', 'CONSISTENT'), ('system', '0', 'main', 'list_indexof', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 272, None, 'CONSISTENT'), ('system', '0', 'main', 'list_inner_product', 'scalar', 'Compute the inner product between two lists', None, 'FLOAT', ['list1', 'list2'], ['FLOAT[]', 'FLOAT[]'], None, None, False, True, 738, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'list_inner_product', 'scalar', 'Compute the inner product between two lists', None, 'DOUBLE', ['list1', 'list2'], ['DOUBLE[]', 'DOUBLE[]'], None, None, False, True, 738, 'list_inner_product([1, 2, 3], [1, 2, 3])', 'CONSISTENT'), ('system', '0', 'main', 'union_value', 'scalar', 'Create a single member UNION containing the argument value. The tag of the value will be the bound variable name', None, 'UNION', [], [], 'ANY', None, False, True, 1042, "union_value(k := 'hello')", 'CONSISTENT'), ('system', '0', 'main', 'union_tag', 'scalar', 'Retrieve the currently selected tag of the union as an ENUM', None, 'ANY', ['union'], ['UNION'], None, None, False, True, 1040, "union_tag(union_value(k := 'foo'))", 'CONSISTENT'), ('system', '0', 'main', 'union_extract', 'scalar', 'Extract the value with the named tags from the union. NULL if the tag is not currently selected', None, 'ANY', ['union', 'tag'], ['UNION', 'VARCHAR'], None, None, False, True, 1038, "union_extract(s, 'k')", 'CONSISTENT'), ('system', '0', 'main', 'unicode', 'scalar', 'Returns the unicode codepoint of the first character of the string', None, 'INTEGER', ['str'], ['VARCHAR'], None, None, False, True, 1036, "unicode('ü')", 'CONSISTENT'), ('system', '0', 'main', 'unhex', 'scalar', 'Converts a value from hexadecimal representation to a blob', None, 'BLOB', ['value'], ['VARCHAR'], None, None, False, True, 1034, "unhex('2A')", 'CONSISTENT'), ('system', '0', 'main', 'unbin', 'scalar', 'Converts a value from binary representation to a blob', None, 'BLOB', ['value'], ['VARCHAR'], None, None, False, True, 1032, "unbin('0110')", 'CONSISTENT'), ('system', '0', 'main', 'ucase', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 184, None, 'CONSISTENT'), ('system', '0', 'main', 'typeof', 'scalar', 'Returns the name of the data type of the result of the expression', None, 'VARCHAR', ['expression'], ['ANY'], None, None, False, True, 1030, "typeof('abc')", 'CONSISTENT'), ('system', '0', 'main', 'txid_current', 'scalar', 'Returns the current transaction’s ID (a BIGINT). It will assign a new one if the current transaction does not have one already', None, 'BIGINT', [], [], None, None, False, True, 1028, 'txid_current()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'list_pack', 'scalar', 'Create a LIST containing the argument values', None, 'LIST', [], [], 'ANY', None, False, True, 740, 'list_value(4, 5, 6)', 'CONSISTENT'), ('system', '0', 'main', 'list_position', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 270, None, 'CONSISTENT'), ('system', '0', 'main', 'try_strptime', 'scalar', 'Converts string to timestamp using the format string (timestamp with time zone if %Z is specified). Returns NULL on failure', None, 'TIMESTAMP', ['text', 'format'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1026, "try_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'try_strptime', 'scalar', 'Converts string to timestamp using the format string (timestamp with time zone if %Z is specified). Returns NULL on failure', None, 'TIMESTAMP', ['text', 'format'], ['VARCHAR', 'VARCHAR[]'], None, None, False, True, 1026, "try_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')", 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'SMALLINT', ['x'], ['SMALLINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'INTEGER', ['x'], ['INTEGER'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'HUGEINT', ['x'], ['HUGEINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'UTINYINT', ['x'], ['UTINYINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'USMALLINT', ['x'], ['USMALLINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'UINTEGER', ['x'], ['UINTEGER'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'UBIGINT', ['x'], ['UBIGINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'trunc', 'scalar', 'Truncates the number', None, 'UHUGEINT', ['x'], ['UHUGEINT'], None, None, False, True, 1024, 'trunc(17.4)', 'CONSISTENT'), ('system', '0', 'main', 'list_reduce', 'scalar', 'Returns a single value that is the result of applying the lambda function to each element of the input list, starting with the first element and then repeatedly applying the lambda function to the result of the previous application and the next element of the list.', None, 'ANY', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 742, 'list_reduce([1, 2, 3], (x, y) -> x + y)', 'CONSISTENT'), ('system', '0', 'main', 'list_resize', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'ANY'], None, None, False, True, 284, None, 'CONSISTENT'), ('system', '0', 'main', 'list_resize', 'scalar', None, None, 'ANY[]', ['col0', 'col1', 'col2'], ['ANY[]', 'ANY', 'ANY'], None, None, False, True, 284, None, 'CONSISTENT'), ('system', '0', 'main', 'trim', 'scalar', 'Removes any occurrences of any of the characters from either side of the string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 1022, "trim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'trim', 'scalar', 'Removes any occurrences of any of the characters from either side of the string', None, 'VARCHAR', ['string', 'characters'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 1022, "trim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'list_reverse_sort', 'scalar', 'Sorts the elements of the list in reverse order', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 744, 'list_reverse_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_reverse_sort', 'scalar', 'Sorts the elements of the list in reverse order', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 744, 'list_reverse_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_select', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'BIGINT[]'], None, None, False, True, 292, None, 'CONSISTENT'), ('system', '0', 'main', 'translate', 'scalar', 'Replaces each character in string that matches a character in the from set with the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are deleted', None, 'VARCHAR', ['string', 'from', 'to'], ['VARCHAR', 'VARCHAR', 'VARCHAR'], None, None, False, True, 1020, "translate('12345', '143', 'ax')", 'CONSISTENT'), ('system', '0', 'main', 'transaction_timestamp', 'scalar', 'Returns the current timestamp', None, 'TIMESTAMP WITH TIME ZONE', [], [], None, None, False, True, 1018, 'get_current_timestamp()', 'CONSISTENT_WITHIN_QUERY'), ('system', '0', 'main', 'list_slice', 'scalar', 'Extract a sublist using slice conventions. Negative values are accepted', None, 'ANY', ['list', 'begin', 'end['], ['ANY', 'ANY', 'ANY'], None, None, False, True, 746, 'list_slice(l, 2, 4)', 'CONSISTENT'), ('system', '0', 'main', 'list_slice', 'scalar', 'Extract a sublist using slice conventions. Negative values are accepted', None, 'ANY', ['list', 'begin', 'end[', 'step]'], ['ANY', 'ANY', 'ANY', 'BIGINT'], None, None, False, True, 746, 'list_slice(l, 2, 4)', 'CONSISTENT'), ('system', '0', 'main', 'list_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list'], ['ANY[]'], None, None, False, True, 748, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list', 'col1'], ['ANY[]', 'VARCHAR'], None, None, False, True, 748, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'list_sort', 'scalar', 'Sorts the elements of the list', None, 'ANY[]', ['list', 'col1', 'col2'], ['ANY[]', 'VARCHAR', 'VARCHAR'], None, None, False, True, 748, 'list_sort([3, 6, 1, 2])', 'CONSISTENT'), ('system', '0', 'main', 'to_years', 'scalar', 'Construct a year interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 1014, 'to_years(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_weeks', 'scalar', 'Construct a week interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 1012, 'to_weeks(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_timestamp', 'scalar', 'Converts secs since epoch to a timestamp with time zone', None, 'TIMESTAMP WITH TIME ZONE', ['sec'], ['DOUBLE'], None, None, False, True, 1010, 'to_timestamp(1284352323.5)', 'CONSISTENT'), ('system', '0', 'main', 'to_seconds', 'scalar', 'Construct a second interval', None, 'INTERVAL', ['double'], ['DOUBLE'], None, None, False, True, 1008, 'to_seconds(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'list_transform', 'scalar', 'Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details', None, 'ANY[]', ['list', 'lambda'], ['ANY[]', 'LAMBDA'], None, None, False, True, 750, 'list_transform([1, 2, 3], x -> x + 1)', 'CONSISTENT'), ('system', '0', 'main', 'list_unique', 'scalar', 'Counts the unique elements of a list', None, 'UBIGINT', ['list'], ['ANY[]'], None, None, False, True, 752, 'list_unique([1, 1, NULL, -3, 1, 5])', 'CONSISTENT'), ('system', '0', 'main', 'list_value', 'scalar', 'Create a LIST containing the argument values', None, 'LIST', [], [], 'ANY', None, False, True, 754, 'list_value(4, 5, 6)', 'CONSISTENT'), ('system', '0', 'main', 'to_months', 'scalar', 'Construct a month interval', None, 'INTERVAL', ['integer'], ['INTEGER'], None, None, False, True, 1006, 'to_months(5)', 'CONSISTENT'), ('system', '0', 'main', 'to_minutes', 'scalar', 'Construct a minute interval', None, 'INTERVAL', ['integer'], ['BIGINT'], None, None, False, True, 1004, 'to_minutes(5)', 'CONSISTENT'), ('system', '0', 'main', 'list_where', 'scalar', None, None, 'ANY[]', ['col0', 'col1'], ['ANY[]', 'BOOLEAN[]'], None, None, False, True, 296, None, 'CONSISTENT'), ('system', '0', 'main', 'list_zip', 'scalar', None, None, 'STRUCT[]', [], [], 'ANY', None, False, True, 288, None, 'CONSISTENT'), ('system', '0', 'main', 'ln', 'scalar', 'Computes the natural logarithm of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 758, 'ln(2)', 'CONSISTENT'), ('system', '0', 'main', 'log', 'scalar', 'Computes the logarithm of x to base b. b may be omitted, in which case the default 10', None, 'DOUBLE', ['b'], ['DOUBLE'], None, None, False, True, 760, 'log(2, 64)', 'CONSISTENT'), ('system', '0', 'main', 'log', 'scalar', 'Computes the logarithm of x to base b. b may be omitted, in which case the default 10', None, 'DOUBLE', ['b', ' x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 760, 'log(2, 64)', 'CONSISTENT'), ('system', '0', 'main', 'log10', 'scalar', 'Computes the 10-log of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 762, 'log10(1000)', 'CONSISTENT'), ('system', '0', 'main', 'log2', 'scalar', 'Computes the 2-log of x', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 764, 'log2(8)', 'CONSISTENT'), ('system', '0', 'main', 'lower', 'scalar', None, None, 'VARCHAR', ['col0'], ['VARCHAR'], None, None, False, True, 178, None, 'CONSISTENT'), ('system', '0', 'main', 'lpad', 'scalar', 'Pads the string with the character from the left until it has count characters', None, 'VARCHAR', ['string', 'count', 'character'], ['VARCHAR', 'INTEGER', 'VARCHAR'], None, None, False, True, 766, "lpad('hello', 10, '>')", 'CONSISTENT'), ('system', '0', 'main', 'ltrim', 'scalar', 'Removes any occurrences of any of the characters from the left side of the string', None, 'VARCHAR', ['string'], ['VARCHAR'], None, None, False, True, 768, "ltrim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'ltrim', 'scalar', 'Removes any occurrences of any of the characters from the left side of the string', None, 'VARCHAR', ['string', 'characters'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 768, "ltrim('>>>>test<<', '><')", 'CONSISTENT'), ('system', '0', 'main', 'nextafter', 'scalar', 'Returns the next floating point value after x in the direction of y', None, 'DOUBLE', ['x', ' y'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 828, 'nextafter(1::float, 2::float)', 'CONSISTENT'), ('system', '0', 'main', 'nextafter', 'scalar', 'Returns the next floating point value after x in the direction of y', None, 'FLOAT', ['x', ' y'], ['FLOAT', 'FLOAT'], None, None, False, True, 828, 'nextafter(1::float, 2::float)', 'CONSISTENT'), ('system', '0', 'main', 'make_date', 'scalar', 'The date for the given parts', None, 'DATE', ['year', 'month', 'day'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, False, True, 772, 'make_date(1992, 9, 20)', 'CONSISTENT'), ('system', '0', 'main', 'make_date', 'scalar', 'The date for the given parts', None, 'DATE', ['year'], ['STRUCT("year" BIGINT, "month" BIGINT, "day" BIGINT)'], None, None, False, True, 772, 'make_date(1992, 9, 20)', 'CONSISTENT'), ('system', '0', 'main', 'make_time', 'scalar', 'The time for the given parts', None, 'TIME', ['hour', 'minute', 'seconds'], ['BIGINT', 'BIGINT', 'DOUBLE'], None, None, False, True, 774, 'make_time(13, 34, 27.123456)', 'CONSISTENT'), ('system', '0', 'main', 'make_timestamp', 'scalar', 'The timestamp for the given parts', None, 'TIMESTAMP', ['year', 'month', 'day', 'hour', 'minute', 'seconds'], ['BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'DOUBLE'], None, None, False, True, 776, 'make_timestamp(1992, 9, 20, 13, 34, 27.123456)', 'CONSISTENT'), ('system', '0', 'main', 'make_timestamp', 'scalar', 'The timestamp for the given parts', None, 'TIMESTAMP', ['year'], ['BIGINT'], None, None, False, True, 776, 'make_timestamp(1992, 9, 20, 13, 34, 27.123456)', 'CONSISTENT'), ('system', '0', 'main', 'make_timestamptz', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1', 'col2', 'col3', 'col4', 'col5'], ['BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'DOUBLE'], None, None, False, True, 1445, None, 'CONSISTENT'), ('system', '0', 'main', 'make_timestamptz', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0', 'col1', 'col2', 'col3', 'col4', 'col5', 'col6'], ['BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'BIGINT', 'DOUBLE', 'VARCHAR'], None, None, False, True, 1445, None, 'CONSISTENT'), ('system', '0', 'main', 'make_timestamptz', 'scalar', None, None, 'TIMESTAMP WITH TIME ZONE', ['col0'], ['BIGINT'], None, None, False, True, 1445, None, 'CONSISTENT'), ('system', '0', 'main', 'map', 'scalar', 'Creates a map from a set of keys and values', None, 'MAP', [], [], 'ANY', None, False, True, 778, "map(['key1', 'key2'], ['val1', 'val2'])", 'CONSISTENT'), ('system', '0', 'main', 'map_concat', 'scalar', 'Returns a map created from merging the input maps, on key collision the value is taken from the last map with that key', None, 'LIST', [], [], 'ANY', None, False, True, 780, "map_concat(map([1,2], ['a', 'b']), map([2,3], ['c', 'd']));", 'CONSISTENT'), ('system', '0', 'main', 'map_entries', 'scalar', 'Returns the map entries as a list of keys/values', None, 'LIST', [], [], 'ANY', None, False, True, 782, "map_entries(map(['key'], ['val']))", 'CONSISTENT'), ('system', '0', 'main', 'map_extract', 'scalar', 'Returns a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned', None, 'ANY', ['map', 'key'], ['ANY', 'ANY'], 'ANY', None, False, True, 784, "map_extract(map(['key'], ['val']), 'key')", 'CONSISTENT'), ('system', '0', 'main', 'map_from_entries', 'scalar', 'Returns a map created from the entries of the array', None, 'MAP', [], [], 'ANY', None, False, True, 786, "map_from_entries([{k: 5, v: 'val1'}, {k: 3, v: 'val2'}]);", 'CONSISTENT'), ('system', '0', 'main', 'map_keys', 'scalar', 'Returns the keys of a map as a list', None, 'LIST', [], [], 'ANY', None, False, True, 788, "map_keys(map(['key'], ['val']))", 'CONSISTENT'), ('system', '0', 'main', 'map_values', 'scalar', 'Returns the values of a map as a list', None, 'LIST', [], [], 'ANY', None, False, True, 790, "map_values(map(['key'], ['val']))", 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['INTERVAL', 'BIGINT'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'multiply', 'scalar', None, None, 'INTERVAL', ['col0', 'col1'], ['BIGINT', 'INTERVAL'], None, None, False, True, 162, None, 'CONSISTENT'), ('system', '0', 'main', 'monthname', 'scalar', 'The (English) name of the month', None, 'VARCHAR', ['ts'], ['DATE'], None, None, False, True, 826, "monthname(TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'monthname', 'scalar', 'The (English) name of the month', None, 'VARCHAR', ['ts'], ['TIMESTAMP'], None, None, False, True, 826, "monthname(TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'monthname', 'scalar', 'The (English) name of the month', None, 'VARCHAR', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 826, "monthname(TIMESTAMP '1992-09-20')", 'CONSISTENT'), ('system', '0', 'main', 'md5', 'scalar', 'Returns the MD5 hash of the value as a string', None, 'VARCHAR', ['value'], ['VARCHAR'], None, None, False, True, 796, "md5('123')", 'CONSISTENT'), ('system', '0', 'main', 'md5_number', 'scalar', 'Returns the MD5 hash of the value as an INT128', None, 'HUGEINT', ['value'], ['VARCHAR'], None, None, False, True, 798, "md5_number('123')", 'CONSISTENT'), ('system', '0', 'main', 'md5_number_lower', 'scalar', 'Returns the MD5 hash of the value as an INT128', None, 'UBIGINT', ['value'], ['VARCHAR'], None, None, False, True, 800, "md5_number_lower('123')", 'CONSISTENT'), ('system', '0', 'main', 'md5_number_upper', 'scalar', 'Returns the MD5 hash of the value as an INT128', None, 'UBIGINT', ['value'], ['VARCHAR'], None, None, False, True, 802, "md5_number_upper('123')", 'CONSISTENT'), ('system', '0', 'main', 'to_milliseconds', 'scalar', 'Construct a millisecond interval', None, 'INTERVAL', ['double'], ['DOUBLE'], None, None, False, True, 1002, 'to_milliseconds(5.5)', 'CONSISTENT'), ('system', '0', 'main', 'month', 'scalar', 'Extract the month component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 824, "month(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'month', 'scalar', 'Extract the month component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 824, "month(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'month', 'scalar', 'Extract the month component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 824, "month(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'month', 'scalar', 'Extract the month component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 824, "month(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'microsecond', 'scalar', 'Extract the microsecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 808, "microsecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millennium', 'scalar', 'Extract the millennium component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 810, "millennium(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millennium', 'scalar', 'Extract the millennium component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 810, "millennium(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millennium', 'scalar', 'Extract the millennium component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 810, "millennium(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millennium', 'scalar', 'Extract the millennium component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 810, "millennium(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'millisecond', 'scalar', 'Extract the millisecond component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 812, "millisecond(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'TINYINT', ['col0', 'col1'], ['TINYINT', 'TINYINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'SMALLINT', ['col0', 'col1'], ['SMALLINT', 'SMALLINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'INTEGER', ['col0', 'col1'], ['INTEGER', 'INTEGER'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'BIGINT', ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'HUGEINT', ['col0', 'col1'], ['HUGEINT', 'HUGEINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'FLOAT', ['col0', 'col1'], ['FLOAT', 'FLOAT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'DOUBLE', ['col0', 'col1'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'DECIMAL', ['col0', 'col1'], ['DECIMAL', 'DECIMAL'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'UTINYINT', ['col0', 'col1'], ['UTINYINT', 'UTINYINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'USMALLINT', ['col0', 'col1'], ['USMALLINT', 'USMALLINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'UINTEGER', ['col0', 'col1'], ['UINTEGER', 'UINTEGER'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'UBIGINT', ['col0', 'col1'], ['UBIGINT', 'UBIGINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'mod', 'scalar', None, None, 'UHUGEINT', ['col0', 'col1'], ['UHUGEINT', 'UHUGEINT'], None, None, False, True, 172, None, 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['DATE'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['INTERVAL'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIME WITH TIME ZONE'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'minute', 'scalar', 'Extract the minute component from a date or timestamp', None, 'BIGINT', ['ts'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 818, "minute(timestamp '2021-08-03 11:59:44.123456')", 'CONSISTENT'), ('system', '0', 'main', 'mismatches', 'scalar', 'The number of positions with different characters for 2 strings of equal length. Different case is considered different', None, 'BIGINT', ['str1', 'str2'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 820, "hamming('duck','luck')", 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min_by', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 816, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'min', 'aggregate', 'Returns the minimum value present in arg.', None, 'DECIMAL', ['arg'], ['DECIMAL'], None, None, False, True, 814, 'min(A)', 'CONSISTENT'), ('system', '0', 'main', 'min', 'aggregate', 'Returns the minimum value present in arg.', None, 'ANY', ['arg'], ['ANY'], None, None, False, True, 814, 'min(A)', 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TINYINT', ['x'], ['TINYINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'SMALLINT', ['x'], ['SMALLINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'INTEGER', ['x'], ['INTEGER'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'HUGEINT', ['x'], ['HUGEINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'UTINYINT', ['x'], ['UTINYINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'USMALLINT', ['x'], ['USMALLINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'UINTEGER', ['x'], ['UINTEGER'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'UBIGINT', ['x'], ['UBIGINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'UHUGEINT', ['x'], ['UHUGEINT'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'DATE', ['x'], ['DATE'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TIMESTAMP', ['x'], ['TIMESTAMP'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TIME', ['x'], ['TIME'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TIMESTAMP WITH TIME ZONE', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'TIME WITH TIME ZONE', ['x'], ['TIME WITH TIME ZONE'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'INTERVAL', ['x'], ['INTERVAL'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'mode', 'aggregate', 'Returns the most frequent value for the values within x. NULL values are ignored.', None, 'VARCHAR', ['x'], ['ANY'], None, None, False, True, 822, None, 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['TINYINT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['SMALLINT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['INTEGER'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['BIGINT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['HUGEINT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIMESTAMP', ['x'], ['DATE'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIMESTAMP', ['x'], ['TIMESTAMP'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIME', ['x'], ['TIME'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIMESTAMP WITH TIME ZONE', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'TIME WITH TIME ZONE', ['x'], ['TIME WITH TIME ZONE'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'INTERVAL', ['x'], ['INTERVAL'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'median', 'aggregate', 'Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.', None, 'VARCHAR', ['x'], ['ANY'], None, None, False, True, 806, 'QUANTILE_CONT(x, 0.5)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max_by', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 794, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'max', 'aggregate', 'Returns the maximum value present in arg.', None, 'DECIMAL', ['arg'], ['DECIMAL'], None, None, False, True, 792, 'max(A)', 'CONSISTENT'), ('system', '0', 'main', 'max', 'aggregate', 'Returns the maximum value present in arg.', None, 'ANY', ['arg'], ['ANY'], None, None, False, True, 792, 'max(A)', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'FLOAT', ['x'], ['FLOAT'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['DATE'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['TIMESTAMP'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['TIME'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'mad', 'aggregate', 'Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t', None, 'INTERVAL', ['x'], ['TIME WITH TIME ZONE'], None, None, False, True, 770, 'MEDIAN(ABS(x-MEDIAN(x)))', 'CONSISTENT'), ('system', '0', 'main', 'variance', 'aggregate', 'Returns the sample variance of all input values.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 1052, '(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)', 'CONSISTENT'), ('system', '0', 'main', 'var_pop', 'aggregate', 'Returns the population variance.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 1048, None, 'CONSISTENT'), ('system', '0', 'main', 'var_samp', 'aggregate', 'Returns the sample variance of all input values.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 1050, '(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)', 'CONSISTENT'), ('system', '0', 'main', 'listagg', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str'], ['ANY'], None, None, False, True, 756, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'listagg', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str', 'arg'], ['ANY', 'VARCHAR'], None, None, False, True, 756, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'list', 'aggregate', 'Returns a LIST containing all the values of a column.', None, 'LIST', ['arg'], ['ANY'], None, None, False, True, 718, 'list(A)', 'CONSISTENT'), ('system', '0', 'main', 'last', 'aggregate', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 106, None, 'CONSISTENT'), ('system', '0', 'main', 'last', 'aggregate', None, None, 'ANY', ['col0'], ['ANY'], None, None, False, True, 106, None, 'CONSISTENT'), ('system', '0', 'main', 'kurtosis_pop', 'aggregate', 'Returns the excess kurtosis (Fisher’s definition) of all input values, without bias correction', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 700, None, 'CONSISTENT'), ('system', '0', 'main', 'kurtosis', 'aggregate', 'Returns the excess kurtosis (Fisher’s definition) of all input values, with a bias correction according to the sample size', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 698, None, 'CONSISTENT'), ('system', '0', 'main', 'kahan_sum', 'aggregate', 'Calculates the sum using a more accurate floating point summation (Kahan Sum).', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 696, 'kahan_sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['SMALLINT'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['INTEGER'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['BIGINT'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['HUGEINT'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'mean', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 804, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['BOOLEAN'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['UTINYINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['USMALLINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['UINTEGER'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['UBIGINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TINYINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['SMALLINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['INTEGER'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['BIGINT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['FLOAT'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['DOUBLE'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP_S'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP_MS'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIMESTAMP_NS'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIME'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['TIME WITH TIME ZONE'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['DATE'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'histogram', 'aggregate', 'Returns a LIST of STRUCTs with the fields bucket and count.', None, 'MAP', ['arg'], ['ANY'], None, None, False, True, 670, 'histogram(A)', 'CONSISTENT'), ('system', '0', 'main', 'group_concat', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str'], ['ANY'], None, None, False, True, 662, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'group_concat', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str', 'arg'], ['ANY', 'VARCHAR'], None, None, False, True, 662, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'fsum', 'aggregate', 'Calculates the sum using a more accurate floating point summation (Kahan Sum).', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 640, 'kahan_sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum_no_overflow', 'aggregate', 'Internal only. Calculates the sum value for all tuples in arg without overflow checks.', None, 'HUGEINT', ['arg'], ['INTEGER'], None, None, False, True, 968, 'sum_no_overflow(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum_no_overflow', 'aggregate', 'Internal only. Calculates the sum value for all tuples in arg without overflow checks.', None, 'HUGEINT', ['arg'], ['BIGINT'], None, None, False, True, 968, 'sum_no_overflow(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum_no_overflow', 'aggregate', 'Internal only. Calculates the sum value for all tuples in arg without overflow checks.', None, 'DECIMAL', ['arg'], ['DECIMAL'], None, None, False, True, 968, 'sum_no_overflow(A)', 'CONSISTENT'), ('system', '0', 'main', 'first', 'aggregate', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 102, None, 'CONSISTENT'), ('system', '0', 'main', 'first', 'aggregate', None, None, 'ANY', ['col0'], ['ANY'], None, None, False, True, 102, None, 'CONSISTENT'), ('system', '0', 'main', 'favg', 'aggregate', 'Calculates the average using a more accurate floating point summation (Kahan Sum)', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 618, 'favg(A)', 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['USMALLINT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['UINTEGER'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['UBIGINT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['FLOAT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['SMALLINT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['INTEGER'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['BIGINT'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['ANY'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['TIMESTAMP'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'entropy', 'aggregate', 'Returns the log-2 entropy of count input-values.', None, 'DOUBLE', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 588, None, 'CONSISTENT'), ('system', '0', 'main', 'covar_samp', 'aggregate', 'Returns the sample covariance for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 532, '(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / (COUNT(*) - 1)', 'CONSISTENT'), ('system', '0', 'main', 'product', 'aggregate', 'Calculates the product of all tuples in arg.', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 852, 'product(A)', 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DECIMAL', ['x', 'pos'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DECIMAL[]', ['x', 'pos'], ['DECIMAL', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TINYINT', ['x', 'pos'], ['TINYINT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TINYINT[]', ['x', 'pos'], ['TINYINT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'SMALLINT', ['x', 'pos'], ['SMALLINT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'SMALLINT[]', ['x', 'pos'], ['SMALLINT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTEGER', ['x', 'pos'], ['INTEGER', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTEGER[]', ['x', 'pos'], ['INTEGER', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'BIGINT', ['x', 'pos'], ['BIGINT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'BIGINT[]', ['x', 'pos'], ['BIGINT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'HUGEINT', ['x', 'pos'], ['HUGEINT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'HUGEINT[]', ['x', 'pos'], ['HUGEINT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'FLOAT', ['x', 'pos'], ['FLOAT', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'FLOAT[]', ['x', 'pos'], ['FLOAT', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DOUBLE', ['x', 'pos'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DOUBLE[]', ['x', 'pos'], ['DOUBLE', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DATE', ['x', 'pos'], ['DATE', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DATE[]', ['x', 'pos'], ['DATE', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP[]', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME', ['x', 'pos'], ['TIME', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME[]', ['x', 'pos'], ['TIME', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP WITH TIME ZONE', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP WITH TIME ZONE[]', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME WITH TIME ZONE', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME WITH TIME ZONE[]', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTERVAL', ['x', 'pos'], ['INTERVAL', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTERVAL[]', ['x', 'pos'], ['INTERVAL', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'VARCHAR', ['x', 'pos'], ['ANY', 'DOUBLE'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'VARCHAR[]', ['x', 'pos'], ['ANY', 'DOUBLE[]'], None, None, False, True, 854, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DECIMAL', ['x', 'pos'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DECIMAL[]', ['x', 'pos'], ['DECIMAL', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['TINYINT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['TINYINT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['SMALLINT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['SMALLINT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['INTEGER', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['INTEGER', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['BIGINT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['BIGINT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['HUGEINT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['HUGEINT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'FLOAT', ['x', 'pos'], ['FLOAT', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'FLOAT[]', ['x', 'pos'], ['FLOAT', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE', ['x', 'pos'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'DOUBLE[]', ['x', 'pos'], ['DOUBLE', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP', ['x', 'pos'], ['DATE', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP[]', ['x', 'pos'], ['DATE', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP[]', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIME', ['x', 'pos'], ['TIME', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIME[]', ['x', 'pos'], ['TIME', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP WITH TIME ZONE', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIMESTAMP WITH TIME ZONE[]', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIME WITH TIME ZONE', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_cont', 'aggregate', 'Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t', None, 'TIME WITH TIME ZONE[]', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 856, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DECIMAL', ['x', 'pos'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DECIMAL[]', ['x', 'pos'], ['DECIMAL', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TINYINT', ['x', 'pos'], ['TINYINT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TINYINT[]', ['x', 'pos'], ['TINYINT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'SMALLINT', ['x', 'pos'], ['SMALLINT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'SMALLINT[]', ['x', 'pos'], ['SMALLINT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTEGER', ['x', 'pos'], ['INTEGER', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTEGER[]', ['x', 'pos'], ['INTEGER', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'BIGINT', ['x', 'pos'], ['BIGINT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'BIGINT[]', ['x', 'pos'], ['BIGINT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'HUGEINT', ['x', 'pos'], ['HUGEINT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'HUGEINT[]', ['x', 'pos'], ['HUGEINT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'FLOAT', ['x', 'pos'], ['FLOAT', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'FLOAT[]', ['x', 'pos'], ['FLOAT', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DOUBLE', ['x', 'pos'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DOUBLE[]', ['x', 'pos'], ['DOUBLE', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DATE', ['x', 'pos'], ['DATE', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'DATE[]', ['x', 'pos'], ['DATE', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP[]', ['x', 'pos'], ['TIMESTAMP', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME', ['x', 'pos'], ['TIME', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME[]', ['x', 'pos'], ['TIME', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP WITH TIME ZONE', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIMESTAMP WITH TIME ZONE[]', ['x', 'pos'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME WITH TIME ZONE', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'TIME WITH TIME ZONE[]', ['x', 'pos'], ['TIME WITH TIME ZONE', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTERVAL', ['x', 'pos'], ['INTERVAL', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'INTERVAL[]', ['x', 'pos'], ['INTERVAL', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'VARCHAR', ['x', 'pos'], ['ANY', 'DOUBLE'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'quantile_disc', 'aggregate', 'Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.', None, 'VARCHAR[]', ['x', 'pos'], ['ANY', 'DOUBLE[]'], None, None, False, True, 858, None, 'CONSISTENT'), ('system', '0', 'main', 'covar_pop', 'aggregate', 'Returns the population covariance of input values.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 530, '(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'count_star', 'aggregate', None, None, 'BIGINT', [], [], None, None, False, True, 98, None, 'CONSISTENT'), ('system', '0', 'main', 'count', 'aggregate', None, None, 'BIGINT', ['col0'], ['ANY'], None, None, False, True, 100, None, 'CONSISTENT'), ('system', '0', 'main', 'count', 'aggregate', None, None, 'BIGINT', [], [], None, None, False, True, 100, None, 'CONSISTENT'), ('system', '0', 'main', 'corr', 'aggregate', 'Returns the correlation coefficient for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 524, 'COVAR_POP(y, x) / (STDDEV_POP(x) * STDDEV_POP(y))', 'CONSISTENT'), ('system', '0', 'main', 'bool_or', 'aggregate', 'Returns TRUE if any input value is TRUE, otherwise FALSE.', None, 'BOOLEAN', ['arg'], ['BOOLEAN'], None, None, False, True, 510, 'bool_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bool_and', 'aggregate', 'Returns TRUE if every input value is TRUE, otherwise FALSE.', None, 'BOOLEAN', ['arg'], ['BOOLEAN'], None, None, False, True, 508, 'bool_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'TINYINT', ['arg'], ['TINYINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'SMALLINT', ['arg'], ['SMALLINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'INTEGER', ['arg'], ['INTEGER'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'BIGINT', ['arg'], ['BIGINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'HUGEINT', ['arg'], ['HUGEINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'UTINYINT', ['arg'], ['UTINYINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'USMALLINT', ['arg'], ['USMALLINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'UINTEGER', ['arg'], ['UINTEGER'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'UBIGINT', ['arg'], ['UBIGINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'UHUGEINT', ['arg'], ['UHUGEINT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_xor', 'aggregate', 'Returns the bitwise XOR of all bits in a given expression.', None, 'BIT', ['arg'], ['BIT'], None, None, False, True, 502, 'bit_xor(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'TINYINT', ['arg'], ['TINYINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'SMALLINT', ['arg'], ['SMALLINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'INTEGER', ['arg'], ['INTEGER'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'BIGINT', ['arg'], ['BIGINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'HUGEINT', ['arg'], ['HUGEINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'UTINYINT', ['arg'], ['UTINYINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'USMALLINT', ['arg'], ['USMALLINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'UINTEGER', ['arg'], ['UINTEGER'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'UBIGINT', ['arg'], ['UBIGINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'UHUGEINT', ['arg'], ['UHUGEINT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_or', 'aggregate', 'Returns the bitwise OR of all bits in a given expression.', None, 'BIT', ['arg'], ['BIT'], None, None, False, True, 498, 'bit_or(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'TINYINT', ['arg'], ['TINYINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'SMALLINT', ['arg'], ['SMALLINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'INTEGER', ['arg'], ['INTEGER'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'BIGINT', ['arg'], ['BIGINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'HUGEINT', ['arg'], ['HUGEINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'UTINYINT', ['arg'], ['UTINYINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'USMALLINT', ['arg'], ['USMALLINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'UINTEGER', ['arg'], ['UINTEGER'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'UBIGINT', ['arg'], ['UBIGINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'UHUGEINT', ['arg'], ['UHUGEINT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bit_and', 'aggregate', 'Returns the bitwise AND of all bits in a given expression.', None, 'BIT', ['arg'], ['BIT'], None, None, False, True, 494, 'bit_and(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['TINYINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['TINYINT', 'TINYINT', 'TINYINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['SMALLINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['SMALLINT', 'SMALLINT', 'SMALLINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['INTEGER'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['INTEGER', 'INTEGER', 'INTEGER'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['BIGINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['HUGEINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['HUGEINT', 'HUGEINT', 'HUGEINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['UTINYINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['UTINYINT', 'UTINYINT', 'UTINYINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['USMALLINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['USMALLINT', 'USMALLINT', 'USMALLINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['UINTEGER'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['UINTEGER', 'UINTEGER', 'UINTEGER'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['UBIGINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['UBIGINT', 'UBIGINT', 'UBIGINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg'], ['UHUGEINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'bitstring_agg', 'aggregate', 'Returns a bitstring with bits set for each distinct value.', None, 'BIT', ['arg', 'col1', 'col2'], ['UHUGEINT', 'UHUGEINT', 'UHUGEINT'], None, None, False, True, 506, 'bitstring_agg(A)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DECIMAL', ['x'], ['DECIMAL'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['SMALLINT'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['INTEGER'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['BIGINT'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['HUGEINT'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'avg', 'aggregate', 'Calculates the average value for all tuples in x.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 486, 'SUM(x) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'array_agg', 'aggregate', 'Returns a LIST containing all the values of a column.', None, 'LIST', ['arg'], ['ANY'], None, None, False, True, 440, 'list(A)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min_null', 'aggregate', 'Finds the row with the minimum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 434, 'arg_min_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'regr_avgx', 'aggregate', 'Returns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 874, None, 'CONSISTENT'), ('system', '0', 'main', 'regr_avgy', 'aggregate', 'Returns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 876, None, 'CONSISTENT'), ('system', '0', 'main', 'regr_count', 'aggregate', 'Returns the number of non-null number pairs in a group.', None, 'UINTEGER', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 878, '(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)', 'CONSISTENT'), ('system', '0', 'main', 'regr_intercept', 'aggregate', 'Returns the intercept of the univariate linear regression line for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 880, 'AVG(y)-REGR_SLOPE(y,x)*AVG(x)', 'CONSISTENT'), ('system', '0', 'main', 'regr_r2', 'aggregate', 'Returns the coefficient of determination for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 882, None, 'CONSISTENT'), ('system', '0', 'main', 'regr_slope', 'aggregate', 'Returns the slope of the linear regression line for non-null pairs in a group.', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 884, 'COVAR_POP(x,y) / VAR_POP(x)', 'CONSISTENT'), ('system', '0', 'main', 'regr_sxx', 'aggregate', None, None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 886, 'REGR_COUNT(y, x) * VAR_POP(x)', 'CONSISTENT'), ('system', '0', 'main', 'regr_sxy', 'aggregate', 'Returns the population covariance of input values', None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 888, 'REGR_COUNT(y, x) * COVAR_POP(y, x)', 'CONSISTENT'), ('system', '0', 'main', 'regr_syy', 'aggregate', None, None, 'DOUBLE', ['y', 'x'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 890, 'REGR_COUNT(y, x) * VAR_POP(y)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_min', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 432, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max_null', 'aggregate', 'Finds the row with the maximum val. Calculates the arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 430, 'arg_max_null(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DECIMAL', ['x', 'quantile'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DECIMAL', ['x', 'quantile', 'sample_size'], ['DECIMAL', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DECIMAL[]', ['x', 'quantile'], ['DECIMAL', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DECIMAL[]', ['x', 'quantile', 'sample_size'], ['DECIMAL', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'TINYINT', ['x', 'quantile'], ['TINYINT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'TINYINT', ['x', 'quantile', 'sample_size'], ['TINYINT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'TINYINT[]', ['x', 'quantile'], ['TINYINT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'TINYINT[]', ['x', 'quantile', 'sample_size'], ['TINYINT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'SMALLINT', ['x', 'quantile'], ['SMALLINT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'SMALLINT', ['x', 'quantile', 'sample_size'], ['SMALLINT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'SMALLINT[]', ['x', 'quantile'], ['SMALLINT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'SMALLINT[]', ['x', 'quantile', 'sample_size'], ['SMALLINT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'INTEGER', ['x', 'quantile'], ['INTEGER', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'INTEGER', ['x', 'quantile', 'sample_size'], ['INTEGER', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'INTEGER[]', ['x', 'quantile'], ['INTEGER', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'INTEGER[]', ['x', 'quantile', 'sample_size'], ['INTEGER', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'BIGINT', ['x', 'quantile'], ['BIGINT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'BIGINT', ['x', 'quantile', 'sample_size'], ['BIGINT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'BIGINT[]', ['x', 'quantile'], ['BIGINT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'BIGINT[]', ['x', 'quantile', 'sample_size'], ['BIGINT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'HUGEINT', ['x', 'quantile'], ['HUGEINT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'HUGEINT', ['x', 'quantile', 'sample_size'], ['HUGEINT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'HUGEINT[]', ['x', 'quantile'], ['HUGEINT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'HUGEINT[]', ['x', 'quantile', 'sample_size'], ['HUGEINT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'FLOAT', ['x', 'quantile'], ['FLOAT', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'FLOAT', ['x', 'quantile', 'sample_size'], ['FLOAT', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'FLOAT[]', ['x', 'quantile'], ['FLOAT', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'FLOAT[]', ['x', 'quantile', 'sample_size'], ['FLOAT', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DOUBLE', ['x', 'quantile'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DOUBLE', ['x', 'quantile', 'sample_size'], ['DOUBLE', 'DOUBLE', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DOUBLE[]', ['x', 'quantile'], ['DOUBLE', 'DOUBLE[]'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'reservoir_quantile', 'aggregate', 'Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.', None, 'DOUBLE[]', ['x', 'quantile', 'sample_size'], ['DOUBLE', 'DOUBLE[]', 'INTEGER'], None, None, False, True, 896, 'reservoir_quantile(A,0.5,1024)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arg_max', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 428, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmin', 'aggregate', 'Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 438, 'arg_min(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'INTEGER', ['arg', 'val'], ['INTEGER', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BIGINT', ['arg', 'val'], ['BIGINT', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DOUBLE', ['arg', 'val'], ['DOUBLE', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'VARCHAR', ['arg', 'val'], ['VARCHAR', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DATE', ['arg', 'val'], ['DATE', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP', ['arg', 'val'], ['TIMESTAMP', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'TIMESTAMP WITH TIME ZONE', ['arg', 'val'], ['TIMESTAMP WITH TIME ZONE', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'BLOB', ['arg', 'val'], ['BLOB', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'DECIMAL', ['arg', 'val'], ['DECIMAL', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'INTEGER'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BIGINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'HUGEINT'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DOUBLE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'VARCHAR'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'DATE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'TIMESTAMP WITH TIME ZONE'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'argmax', 'aggregate', 'Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.', None, 'ANY', ['arg', 'val'], ['ANY', 'BLOB'], None, None, False, True, 436, 'arg_max(A,B)', 'CONSISTENT'), ('system', '0', 'main', 'arbitrary', 'aggregate', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 104, None, 'CONSISTENT'), ('system', '0', 'main', 'arbitrary', 'aggregate', None, None, 'ANY', ['col0'], ['ANY'], None, None, False, True, 104, None, 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'DECIMAL', ['x', 'pos'], ['DECIMAL', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'SMALLINT', ['x', 'pos'], ['SMALLINT', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'INTEGER', ['x', 'pos'], ['INTEGER', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'BIGINT', ['x', 'pos'], ['BIGINT', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'HUGEINT', ['x', 'pos'], ['HUGEINT', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'DOUBLE', ['x', 'pos'], ['DOUBLE', 'FLOAT'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'DECIMAL[]', ['x', 'pos'], ['DECIMAL', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'TINYINT[]', ['x', 'pos'], ['TINYINT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'SMALLINT[]', ['x', 'pos'], ['SMALLINT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'INTEGER[]', ['x', 'pos'], ['INTEGER', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'BIGINT[]', ['x', 'pos'], ['BIGINT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'HUGEINT[]', ['x', 'pos'], ['HUGEINT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'FLOAT[]', ['x', 'pos'], ['FLOAT', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_quantile', 'aggregate', 'Computes the approximate quantile using T-Digest.', None, 'DOUBLE[]', ['x', 'pos'], ['DOUBLE', 'FLOAT[]'], None, None, False, True, 426, 'approx_quantile(A,0.5)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['UTINYINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['USMALLINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['UINTEGER'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['UBIGINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['UHUGEINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['TINYINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['SMALLINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['BIGINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['HUGEINT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['FLOAT'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['DOUBLE'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['TIMESTAMP'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['TIMESTAMP WITH TIME ZONE'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['BLOB'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'approx_count_distinct', 'aggregate', 'Computes the approximate count of distinct elements using HyperLogLog.', None, 'BIGINT', ['x'], ['ANY'], None, None, False, True, 424, 'approx_count_distinct(A)', 'CONSISTENT'), ('system', '0', 'main', 'any_value', 'aggregate', None, None, 'DECIMAL', ['col0'], ['DECIMAL'], None, None, False, True, 108, None, 'CONSISTENT'), ('system', '0', 'main', 'any_value', 'aggregate', None, None, 'ANY', ['col0'], ['ANY'], None, None, False, True, 108, None, 'CONSISTENT'), ('system', '0', 'main', 'sumkahan', 'aggregate', 'Calculates the sum using a more accurate floating point summation (Kahan Sum).', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 970, 'kahan_sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'DECIMAL', ['arg'], ['DECIMAL'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'HUGEINT', ['arg'], ['SMALLINT'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'HUGEINT', ['arg'], ['INTEGER'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'HUGEINT', ['arg'], ['BIGINT'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'HUGEINT', ['arg'], ['HUGEINT'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'sum', 'aggregate', 'Calculates the sum value for all tuples in arg.', None, 'DOUBLE', ['arg'], ['DOUBLE'], None, None, False, True, 966, 'sum(A)', 'CONSISTENT'), ('system', '0', 'main', 'string_agg', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str'], ['ANY'], None, None, False, True, 950, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'string_agg', 'aggregate', 'Concatenates the column string values with an optional separator.', None, 'VARCHAR', ['str', 'arg'], ['ANY', 'VARCHAR'], None, None, False, True, 950, "string_agg(A, '-')", 'CONSISTENT'), ('system', '0', 'main', 'stddev_samp', 'aggregate', 'Returns the sample standard deviation', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 942, 'sqrt(var_samp(x))', 'CONSISTENT'), ('system', '0', 'main', 'sem', 'aggregate', 'Returns the standard error of the mean', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 914, None, 'CONSISTENT'), ('system', '0', 'main', 'stddev_pop', 'aggregate', 'Returns the population standard deviation.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 940, 'sqrt(var_pop(x))', 'CONSISTENT'), ('system', '0', 'main', 'stddev', 'aggregate', 'Returns the sample standard deviation', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 938, 'sqrt(var_samp(x))', 'CONSISTENT'), ('system', '0', 'main', 'skewness', 'aggregate', 'Returns the skewness of all input values.', None, 'DOUBLE', ['x'], ['DOUBLE'], None, None, False, True, 928, 'skewness(A)', 'CONSISTENT'), ('system', '0', 'main', 'tpcds', 'pragma', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 1473, None, None), ('system', '0', 'main', 'table_info', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 300, None, None), ('system', '0', 'main', 'storage_info', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 302, None, None), ('system', '0', 'main', 'show_tables_expanded', 'pragma', None, None, None, [], [], None, None, None, True, 308, None, None), ('system', '0', 'main', 'tpch', 'pragma', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 1087, None, None), ('system', '0', 'main', 'show_tables', 'pragma', None, None, None, [], [], None, None, None, True, 306, None, None), ('system', '0', 'main', 'show_databases', 'pragma', None, None, None, [], [], None, None, None, True, 310, None, None), ('system', '0', 'main', 'show', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 316, None, None), ('system', '0', 'main', 'platform', 'pragma', None, None, None, [], [], None, None, None, True, 320, None, None), ('system', '0', 'main', 'metadata_info', 'pragma', None, None, None, [], [], None, None, None, True, 304, None, None), ('system', '0', 'main', 'user_agent', 'pragma', None, None, None, [], [], None, None, None, True, 332, None, None), ('system', '0', 'main', 'verify_external', 'pragma', None, None, None, [], [], None, None, None, True, 346, None, None), ('system', '0', 'main', 'verify_fetch_row', 'pragma', None, None, None, [], [], None, None, None, True, 350, None, None), ('system', '0', 'main', 'json_execute_serialized_sql', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1161, None, None), ('system', '0', 'main', 'verify_parallelism', 'pragma', None, None, None, [], [], None, None, None, True, 358, None, None), ('system', '0', 'main', 'import_database', 'pragma', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 326, None, None), ('system', '0', 'main', 'functions', 'pragma', None, None, None, [], [], None, None, None, True, 324, None, None), ('system', '0', 'main', 'force_checkpoint', 'pragma', None, None, None, [], [], None, None, None, True, 370, None, None), ('system', '0', 'main', 'enable_verification', 'pragma', None, None, None, [], [], None, None, None, True, 342, None, None), ('system', '0', 'main', 'enable_progress_bar', 'pragma', None, None, None, [], [], None, None, None, True, 372, None, None), ('system', '0', 'main', 'enable_profiling', 'pragma', None, None, None, [], [], None, None, None, True, 336, None, None), ('system', '0', 'main', 'enable_profile', 'pragma', None, None, None, [], [], None, None, None, True, 334, None, None), ('system', '0', 'main', 'enable_print_progress_bar', 'pragma', None, None, None, [], [], None, None, None, True, 376, None, None), ('system', '0', 'main', 'enable_optimizer', 'pragma', None, None, None, [], [], None, None, None, True, 366, None, None), ('system', '0', 'main', 'enable_object_cache', 'pragma', None, None, None, [], [], None, None, None, True, 362, None, None), ('system', '0', 'main', 'enable_checkpoint_on_shutdown', 'pragma', None, None, None, [], [], None, None, None, True, 380, None, None), ('system', '0', 'main', 'disable_verify_serializer', 'pragma', None, None, None, [], [], None, None, None, True, 356, None, None), ('system', '0', 'main', 'disable_verify_parallelism', 'pragma', None, None, None, [], [], None, None, None, True, 360, None, None), ('system', '0', 'main', 'disable_verify_fetch_row', 'pragma', None, None, None, [], [], None, None, None, True, 352, None, None), ('system', '0', 'main', 'disable_verify_external', 'pragma', None, None, None, [], [], None, None, None, True, 348, None, None), ('system', '0', 'main', 'disable_verification', 'pragma', None, None, None, [], [], None, None, None, True, 344, None, None), ('system', '0', 'main', 'disable_progress_bar', 'pragma', None, None, None, [], [], None, None, None, True, 374, None, None), ('system', '0', 'main', 'verify_serializer', 'pragma', None, None, None, [], [], None, None, None, True, 354, None, None), ('system', '0', 'main', 'version', 'pragma', None, None, None, [], [], None, None, None, True, 318, None, None), ('system', '0', 'main', 'add_parquet_key', 'pragma', None, None, None, ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, None, True, 1469, None, None), ('system', '0', 'main', 'disable_profiling', 'pragma', None, None, None, [], [], None, None, None, True, 340, None, None), ('system', '0', 'main', 'disable_profile', 'pragma', None, None, None, [], [], None, None, None, True, 338, None, None), ('system', '0', 'main', 'disable_print_progress_bar', 'pragma', None, None, None, [], [], None, None, None, True, 378, None, None), ('system', '0', 'main', 'disable_optimizer', 'pragma', None, None, None, [], [], None, None, None, True, 368, None, None), ('system', '0', 'main', 'disable_object_cache', 'pragma', None, None, None, [], [], None, None, None, True, 364, None, None), ('system', '0', 'main', 'disable_checkpoint_on_shutdown', 'pragma', None, None, None, [], [], None, None, None, True, 382, None, None), ('system', '0', 'main', 'database_size', 'pragma', None, None, None, [], [], None, None, None, True, 322, None, None), ('system', '0', 'main', 'database_list', 'pragma', None, None, None, [], [], None, None, None, True, 312, None, None), ('system', '0', 'main', 'copy_database', 'pragma', None, None, None, ['col0', 'col1'], ['VARCHAR', 'VARCHAR'], None, None, None, True, 328, None, None), ('system', '0', 'main', 'collations', 'pragma', None, None, None, [], [], None, None, None, True, 314, None, None), ('system', '0', 'main', 'all_profiling_output', 'pragma', None, None, None, [], [], None, None, None, True, 330, None, None), ('system', '0', 'main', 'split_part', 'macro', None, None, None, ['string', 'delimiter', 'position'], [None, None, None], None, 'COALESCE(string_split(string, "delimiter")["position"], \'\')', None, True, 1631, None, None), ('system', '0', 'main', 'session_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1614, None, None), ('system', '0', 'main', 'round_even', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'CASE  WHEN ((((abs(x) * power(10, (n + 1))) % 10) = 5)) THEN ((round((x / 2), n) * 2)) ELSE round(x, n) END', None, True, 1615, None, None), ('system', '0', 'main', 'roundbankers', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'round_even(x, n)', None, True, 1616, None, None), ('system', '0', 'main', 'regexp_split_to_table', 'macro', None, None, None, ['text', 'pattern'], [None, None], None, 'unnest(string_split_regex("text", pattern))', None, True, 1675, None, None), ('system', '0', 'main', 'nullif', 'macro', None, None, None, ['a', 'b'], [None, None], None, 'CASE  WHEN ((a = b)) THEN (NULL) ELSE a END', None, True, 1617, None, None), ('duckdb', '1080', 'main', '&&', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1527, None, None), ('system', '0', 'main', 'list_var_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_samp')", None, True, 1646, None, None), ('system', '0', 'main', 'list_var_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_pop')", None, True, 1647, None, None), ('system', '0', 'main', 'list_sum', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sum')", None, True, 1668, None, None), ('system', '0', 'main', 'list_string_agg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'string_agg')", None, True, 1669, None, None), ('system', '0', 'main', 'list_stddev_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_samp')", None, True, 1649, None, None), ('system', '0', 'main', 'list_stddev_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_pop')", None, True, 1648, None, None), ('system', '0', 'main', 'list_skewness', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'skewness')", None, True, 1667, None, None), ('system', '0', 'main', 'list_sem', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sem')", None, True, 1650, None, None), ('system', '0', 'main', 'list_reverse', 'macro', None, None, None, ['l'], [None], None, 'l[:-:-1]', None, True, 1634, None, None), ('system', '0', 'main', 'list_product', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'product')", None, True, 1666, None, None), ('system', '0', 'main', 'list_prepend', 'macro', None, None, None, ['e', 'l'], [None, None], None, 'list_concat(list_value(e), l)', None, True, 1620, None, None), ('system', '0', 'main', 'list_mode', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mode')", None, True, 1670, None, None), ('system', '0', 'main', 'list_min', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'min')", None, True, 1664, None, None), ('system', '0', 'main', 'list_median', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'median')", None, True, 1671, None, None), ('system', '0', 'main', 'list_max', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'max')", None, True, 1665, None, None), ('system', '0', 'main', 'list_mad', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mad')", None, True, 1672, None, None), ('system', '0', 'main', 'list_last', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'last')", None, True, 1659, None, None), ('system', '0', 'main', 'list_kurtosis_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis_pop')", None, True, 1663, None, None), ('system', '0', 'main', 'list_kurtosis', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis')", None, True, 1662, None, None), ('system', '0', 'main', 'list_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_filter(list_distinct(l1), (variable_intersect -> list_contains(l2, variable_intersect)))', None, True, 1636, None, None), ('system', '0', 'main', 'list_histogram', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'histogram')", None, True, 1673, None, None), ('system', '0', 'main', 'list_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l1, (variable_has_any -> list_contains(l2, variable_has_any)))) > 0)) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1638, None, None), ('system', '0', 'main', 'user', 'macro', None, None, None, [], [], None, 'current_user', None, True, 1613, None, None), ('system', '0', 'main', 'list_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l2, (variable_has_all -> list_contains(l1, variable_has_all)))) = len(list_filter(l2, (variable_has_all -> (variable_has_all IS NOT NULL)))))) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1641, None, None), ('system', '0', 'main', 'list_first', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'first')", None, True, 1660, None, None), ('system', '0', 'main', 'list_entropy', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'entropy')", None, True, 1658, None, None), ('system', '0', 'main', 'list_count', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'count')", None, True, 1657, None, None), ('system', '0', 'main', 'list_bool_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_or')", None, True, 1656, None, None), ('system', '0', 'main', 'list_bool_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_and')", None, True, 1655, None, None), ('system', '0', 'main', 'list_bit_xor', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_xor')", None, True, 1652, None, None), ('system', '0', 'main', 'list_bit_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_or')", None, True, 1653, None, None), ('system', '0', 'main', 'list_bit_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_and')", None, True, 1654, None, None), ('system', '0', 'main', 'list_avg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'avg')", None, True, 1645, None, None), ('system', '0', 'main', 'list_approx_count_distinct', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'approx_count_distinct')", None, True, 1651, None, None), ('system', '0', 'main', 'list_append', 'macro', None, None, None, ['l', 'e'], [None, None], None, 'list_concat(l, list_value(e))', None, True, 1618, None, None), ('system', '0', 'main', 'list_any_value', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'any_value')", None, True, 1661, None, None), ('system', '0', 'main', 'json_group_structure', 'macro', None, None, None, ['x'], [None], None, "(json_structure(json_group_array(x)) -> '0')", None, True, 1169, None, None), ('system', '0', 'main', 'json_group_object', 'macro', None, None, None, ['name', 'value'], [None, None], None, 'to_json(map(list("name"), list("value")))', None, True, 1167, None, None), ('system', '0', 'main', 'json_group_array', 'macro', None, None, None, ['x'], [None], None, 'to_json(list(x))', None, True, 1165, None, None), ('system', '0', 'main', 'json', 'macro', None, None, None, ['x'], [None], None, "json_extract(x, '$')", None, True, 1171, None, None), ('system', '0', 'main', 'get_block_size', 'macro', None, None, None, ['db_name'], [None], None, '(SELECT block_size FROM pragma_database_size() WHERE (database_name = db_name))', None, True, 1676, None, None), ('system', '0', 'main', 'geometric_mean', 'macro', None, None, None, ['x'], [None], None, 'geomean(x)', None, True, 1633, None, None), ('system', '0', 'main', 'geomean', 'macro', None, None, None, ['x'], [None], None, 'exp(avg(ln(x)))', None, True, 1632, None, None), ('system', '0', 'main', 'generate_subscripts', 'macro', None, None, None, ['arr', 'dim'], [None, None], None, 'unnest(generate_series(1, array_length(arr, dim)))', None, True, 1627, None, None), ('system', '0', 'main', 'fmod', 'macro', None, None, None, ['x', 'y'], [None, None], None, '(x - (y * floor((x / y))))', None, True, 1629, None, None), ('system', '0', 'main', 'fdiv', 'macro', None, None, None, ['x', 'y'], [None, None], None, 'floor((x / y))', None, True, 1628, None, None), ('system', '0', 'main', 'date_add', 'macro', None, None, None, ['date', 'interval'], [None, None], None, '(date + "interval")', None, True, 1674, None, None), ('system', '0', 'main', 'current_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1611, None, None), ('system', '0', 'main', 'current_role', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1610, None, None), ('system', '0', 'main', 'current_catalog', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1612, None, None), ('system', '0', 'main', 'count_if', 'macro', None, None, None, ['l'], [None], None, 'sum(CASE  WHEN (l) THEN (1) ELSE 0 END)', None, True, 1630, None, None), ('system', '0', 'main', 'array_to_string', 'macro', None, None, None, ['arr', 'sep'], [None, None], None, "list_aggr(CAST(arr AS VARCHAR[]), 'string_agg', sep)", None, True, 1626, None, None), ('system', '0', 'main', 'array_reverse', 'macro', None, None, None, ['l'], [None], None, 'list_reverse(l)', None, True, 1635, None, None), ('system', '0', 'main', 'array_push_front', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(list_value(e), arr)', None, True, 1625, None, None), ('system', '0', 'main', 'array_push_back', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(arr, list_value(e))', None, True, 1624, None, None), ('system', '0', 'main', 'array_prepend', 'macro', None, None, None, ['el', 'arr'], [None, None], None, 'list_prepend(el, arr)', None, True, 1621, None, None), ('system', '0', 'main', 'array_pop_front', 'macro', None, None, None, ['arr'], [None], None, 'arr[2:]', None, True, 1623, None, None), ('system', '0', 'main', 'array_pop_back', 'macro', None, None, None, ['arr'], [None], None, 'arr[:(len(arr) - 1)]', None, True, 1622, None, None), ('system', '0', 'main', 'array_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_intersect(l1, l2)', None, True, 1637, None, None), ('system', '0', 'main', 'array_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1639, None, None), ('system', '0', 'main', 'array_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1642, None, None), ('system', '0', 'main', 'array_append', 'macro', None, None, None, ['arr', 'el'], [None, None], None, 'list_append(arr, el)', None, True, 1619, None, None), ('system', '0', 'main', '@>', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1643, None, None), ('system', '0', 'main', '<@', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l2, l1)', None, True, 1644, None, None), ('system', '0', 'main', '&&', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1640, None, None), ('duckdb', '1080', 'pg_catalog', 'shobj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1596, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_type_is_visible', 'macro', None, None, None, ['type_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1608, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_typeof', 'macro', None, None, None, ['expression'], [None], None, 'lower(typeof(expression))', None, True, 1572, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_ts_template_is_visible', 'macro', None, None, None, ['template_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1607, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_ts_parser_is_visible', 'macro', None, None, None, ['parser_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1606, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_ts_dict_is_visible', 'macro', None, None, None, ['dict_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1605, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_ts_config_is_visible', 'macro', None, None, None, ['config_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1604, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_table_is_visible', 'macro', None, None, None, ['table_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1603, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_size_pretty', 'macro', None, None, None, ['bytes'], [None], None, 'format_bytes(bytes)', None, True, 1609, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_postmaster_start_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1571, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_opfamily_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1602, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_operator_is_visible', 'macro', None, None, None, ['operator_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1601, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_opclass_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1600, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_my_temp_schema', 'macro', None, None, None, [], [], None, '0', None, True, 1568, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_is_other_temp_schema', 'macro', None, None, None, ['schema_id'], [None], None, "CAST('f' AS BOOLEAN)", None, True, 1569, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_has_role', 'macro', None, None, None, ['user', 'role', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1593, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_get_viewdef', 'macro', None, None, None, ['oid'], [None], None, '(SELECT "sql" FROM duckdb_views() AS v WHERE (v.view_oid = oid))', None, True, 1588, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_get_expr', 'macro', None, None, None, ['pg_node_tree', 'relation_oid'], [None, None], None, 'pg_node_tree', None, True, 1590, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_get_constraintdef', 'macro', None, None, None, ['constraint_oid', 'pretty_bool'], [None, None], None, '(SELECT constraint_text FROM duckdb_constraints() AS d_constraint WHERE ((d_constraint.table_oid = (constraint_oid // 1000000)) AND (d_constraint.constraint_index = (constraint_oid % 1000000))))', None, True, 1589, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_function_is_visible', 'macro', None, None, None, ['function_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1599, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_conversion_is_visible', 'macro', None, None, None, ['conversion_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1598, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_conf_load_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1570, None, None), ('duckdb', '1080', 'pg_catalog', 'pg_collation_is_visible', 'macro', None, None, None, ['collation_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1597, None, None), ('duckdb', '1080', 'pg_catalog', 'obj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1595, None, None), ('duckdb', '1080', 'pg_catalog', 'inet_server_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1567, None, None), ('duckdb', '1080', 'pg_catalog', 'inet_server_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1566, None, None), ('duckdb', '1080', 'pg_catalog', 'inet_client_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1565, None, None), ('duckdb', '1080', 'pg_catalog', 'inet_client_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1564, None, None), ('duckdb', '1080', 'pg_catalog', 'has_table_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1586, None, None), ('duckdb', '1080', 'pg_catalog', 'has_tablespace_privilege', 'macro', None, None, None, ['tablespace', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1587, None, None), ('duckdb', '1080', 'pg_catalog', 'has_server_privilege', 'macro', None, None, None, ['server', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1585, None, None), ('duckdb', '1080', 'pg_catalog', 'has_sequence_privilege', 'macro', None, None, None, ['sequence', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1584, None, None), ('duckdb', '1080', 'pg_catalog', 'has_schema_privilege', 'macro', None, None, None, ['schema', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1583, None, None), ('duckdb', '1080', 'pg_catalog', 'has_language_privilege', 'macro', None, None, None, ['language', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1582, None, None), ('duckdb', '1080', 'pg_catalog', 'has_function_privilege', 'macro', None, None, None, ['function', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1581, None, None), ('duckdb', '1080', 'pg_catalog', 'has_foreign_data_wrapper_privilege', 'macro', None, None, None, ['fdw', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1580, None, None), ('duckdb', '1080', 'pg_catalog', 'has_database_privilege', 'macro', None, None, None, ['database', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1579, None, None), ('duckdb', '1080', 'pg_catalog', 'has_column_privilege', 'macro', None, None, None, ['table', 'column', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1578, None, None), ('duckdb', '1080', 'pg_catalog', 'has_any_column_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1577, None, None), ('duckdb', '1080', 'pg_catalog', 'format_type', 'macro', None, None, None, ['type_oid', 'typemod'], [None, None], None, "((SELECT format_pg_type(logical_type, type_name) FROM duckdb_types() AS t WHERE (t.type_oid = type_oid)) || CASE  WHEN ((typemod > 0)) THEN (concat('(', (typemod // 1000), ',', (typemod % 1000), ')')) ELSE '' END)", None, True, 1592, None, None), ('duckdb', '1080', 'pg_catalog', 'format_pg_type', 'macro', None, None, None, ['logical_type', 'type_name'], [None, None], None, "CASE  WHEN ((logical_type = 'FLOAT')) THEN ('real') WHEN ((logical_type = 'DOUBLE')) THEN ('double precision') WHEN ((logical_type = 'DECIMAL')) THEN ('numeric') WHEN ((logical_type = 'ENUM')) THEN (lower(type_name)) WHEN ((logical_type = 'VARCHAR')) THEN ('character varying') WHEN ((logical_type = 'BLOB')) THEN ('bytea') WHEN ((logical_type = 'TIMESTAMP')) THEN ('timestamp without time zone') WHEN ((logical_type = 'TIME')) THEN ('time without time zone') ELSE lower(logical_type) END", None, True, 1591, None, None), ('duckdb', '1080', 'pg_catalog', 'current_schemas', 'macro', None, None, None, ['include_implicit'], [None], None, 'current_schemas(include_implicit)', None, True, 1576, None, None), ('duckdb', '1080', 'pg_catalog', 'current_schema', 'macro', None, None, None, [], [], None, 'current_schema()', None, True, 1575, None, None), ('duckdb', '1080', 'pg_catalog', 'current_query', 'macro', None, None, None, [], [], None, 'current_query()', None, True, 1574, None, None), ('duckdb', '1080', 'pg_catalog', 'current_database', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1573, None, None), ('duckdb', '1080', 'pg_catalog', 'col_description', 'macro', None, None, None, ['table_oid', 'column_number'], [None, None], None, 'NULL', None, True, 1594, None, None), ('duckdb', '1080', 'main', 'user', 'macro', None, None, None, [], [], None, 'current_user', None, True, 1500, None, None), ('duckdb', '1080', 'main', 'split_part', 'macro', None, None, None, ['string', 'delimiter', 'position'], [None, None, None], None, 'COALESCE(string_split(string, "delimiter")["position"], \'\')', None, True, 1518, None, None), ('duckdb', '1080', 'main', 'session_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1501, None, None), ('duckdb', '1080', 'main', 'round_even', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'CASE  WHEN ((((abs(x) * power(10, (n + 1))) % 10) = 5)) THEN ((round((x / 2), n) * 2)) ELSE round(x, n) END', None, True, 1502, None, None), ('duckdb', '1080', 'main', 'roundbankers', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'round_even(x, n)', None, True, 1503, None, None), ('duckdb', '1080', 'main', 'regexp_split_to_table', 'macro', None, None, None, ['text', 'pattern'], [None, None], None, 'unnest(string_split_regex("text", pattern))', None, True, 1562, None, None), ('duckdb', '1080', 'main', 'nullif', 'macro', None, None, None, ['a', 'b'], [None, None], None, 'CASE  WHEN ((a = b)) THEN (NULL) ELSE a END', None, True, 1504, None, None), ('duckdb', '1080', 'main', 'list_var_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_samp')", None, True, 1533, None, None), ('duckdb', '1080', 'main', 'list_var_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_pop')", None, True, 1534, None, None), ('duckdb', '1080', 'main', 'list_sum', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sum')", None, True, 1555, None, None), ('duckdb', '1080', 'main', 'list_string_agg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'string_agg')", None, True, 1556, None, None), ('duckdb', '1080', 'main', 'list_stddev_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_samp')", None, True, 1536, None, None), ('duckdb', '1080', 'main', 'list_stddev_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_pop')", None, True, 1535, None, None), ('duckdb', '1080', 'main', 'list_skewness', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'skewness')", None, True, 1554, None, None), ('duckdb', '1080', 'main', 'list_sem', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sem')", None, True, 1537, None, None), ('duckdb', '1080', 'main', 'list_reverse', 'macro', None, None, None, ['l'], [None], None, 'l[:-:-1]', None, True, 1521, None, None), ('duckdb', '1080', 'main', 'list_product', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'product')", None, True, 1553, None, None), ('duckdb', '1080', 'main', 'list_prepend', 'macro', None, None, None, ['e', 'l'], [None, None], None, 'list_concat(list_value(e), l)', None, True, 1507, None, None), ('duckdb', '1080', 'main', 'list_mode', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mode')", None, True, 1557, None, None), ('duckdb', '1080', 'main', 'list_min', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'min')", None, True, 1551, None, None), ('duckdb', '1080', 'main', 'list_median', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'median')", None, True, 1558, None, None), ('duckdb', '1080', 'main', 'list_max', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'max')", None, True, 1552, None, None), ('duckdb', '1080', 'main', 'list_mad', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mad')", None, True, 1559, None, None), ('duckdb', '1080', 'main', 'list_last', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'last')", None, True, 1546, None, None), ('duckdb', '1080', 'main', 'list_kurtosis_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis_pop')", None, True, 1550, None, None), ('duckdb', '1080', 'main', 'list_kurtosis', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis')", None, True, 1549, None, None), ('duckdb', '1080', 'main', 'list_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_filter(list_distinct(l1), (variable_intersect -> list_contains(l2, variable_intersect)))', None, True, 1523, None, None), ('duckdb', '1080', 'main', 'list_histogram', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'histogram')", None, True, 1560, None, None), ('duckdb', '1080', 'main', 'list_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l1, (variable_has_any -> list_contains(l2, variable_has_any)))) > 0)) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1525, None, None), ('duckdb', '1080', 'main', 'list_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l2, (variable_has_all -> list_contains(l1, variable_has_all)))) = len(list_filter(l2, (variable_has_all -> (variable_has_all IS NOT NULL)))))) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1528, None, None), ('duckdb', '1080', 'main', 'list_first', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'first')", None, True, 1547, None, None), ('duckdb', '1080', 'main', 'list_entropy', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'entropy')", None, True, 1545, None, None), ('duckdb', '1080', 'main', 'list_count', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'count')", None, True, 1544, None, None), ('duckdb', '1080', 'main', 'list_bool_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_or')", None, True, 1543, None, None), ('duckdb', '1080', 'main', 'list_bool_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_and')", None, True, 1542, None, None), ('duckdb', '1080', 'main', 'list_bit_xor', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_xor')", None, True, 1539, None, None), ('duckdb', '1080', 'main', 'list_bit_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_or')", None, True, 1540, None, None), ('duckdb', '1080', 'main', 'list_bit_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_and')", None, True, 1541, None, None), ('duckdb', '1080', 'main', 'list_avg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'avg')", None, True, 1532, None, None), ('duckdb', '1080', 'main', 'list_approx_count_distinct', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'approx_count_distinct')", None, True, 1538, None, None), ('duckdb', '1080', 'main', 'list_append', 'macro', None, None, None, ['l', 'e'], [None, None], None, 'list_concat(l, list_value(e))', None, True, 1505, None, None), ('duckdb', '1080', 'main', 'list_any_value', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'any_value')", None, True, 1548, None, None), ('duckdb', '1080', 'main', 'get_block_size', 'macro', None, None, None, ['db_name'], [None], None, '(SELECT block_size FROM pragma_database_size() WHERE (database_name = db_name))', None, True, 1563, None, None), ('duckdb', '1080', 'main', 'geometric_mean', 'macro', None, None, None, ['x'], [None], None, 'geomean(x)', None, True, 1520, None, None), ('duckdb', '1080', 'main', 'geomean', 'macro', None, None, None, ['x'], [None], None, 'exp(avg(ln(x)))', None, True, 1519, None, None), ('duckdb', '1080', 'main', 'generate_subscripts', 'macro', None, None, None, ['arr', 'dim'], [None, None], None, 'unnest(generate_series(1, array_length(arr, dim)))', None, True, 1514, None, None), ('duckdb', '1080', 'main', 'fmod', 'macro', None, None, None, ['x', 'y'], [None, None], None, '(x - (y * floor((x / y))))', None, True, 1516, None, None), ('duckdb', '1080', 'main', 'fdiv', 'macro', None, None, None, ['x', 'y'], [None, None], None, 'floor((x / y))', None, True, 1515, None, None), ('duckdb', '1080', 'main', 'date_add', 'macro', None, None, None, ['date', 'interval'], [None, None], None, '(date + "interval")', None, True, 1561, None, None), ('duckdb', '1080', 'main', 'current_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1498, None, None), ('duckdb', '1080', 'main', 'current_role', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1497, None, None), ('duckdb', '1080', 'main', 'current_catalog', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1499, None, None), ('duckdb', '1080', 'main', 'count_if', 'macro', None, None, None, ['l'], [None], None, 'sum(CASE  WHEN (l) THEN (1) ELSE 0 END)', None, True, 1517, None, None), ('duckdb', '1080', 'main', 'array_to_string', 'macro', None, None, None, ['arr', 'sep'], [None, None], None, "list_aggr(CAST(arr AS VARCHAR[]), 'string_agg', sep)", None, True, 1513, None, None), ('duckdb', '1080', 'main', 'array_reverse', 'macro', None, None, None, ['l'], [None], None, 'list_reverse(l)', None, True, 1522, None, None), ('duckdb', '1080', 'main', 'array_push_front', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(list_value(e), arr)', None, True, 1512, None, None), ('duckdb', '1080', 'main', 'array_push_back', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(arr, list_value(e))', None, True, 1511, None, None), ('duckdb', '1080', 'main', 'array_prepend', 'macro', None, None, None, ['el', 'arr'], [None, None], None, 'list_prepend(el, arr)', None, True, 1508, None, None), ('duckdb', '1080', 'main', 'array_pop_front', 'macro', None, None, None, ['arr'], [None], None, 'arr[2:]', None, True, 1510, None, None), ('duckdb', '1080', 'main', 'array_pop_back', 'macro', None, None, None, ['arr'], [None], None, 'arr[:(len(arr) - 1)]', None, True, 1509, None, None), ('duckdb', '1080', 'main', 'array_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_intersect(l1, l2)', None, True, 1524, None, None), ('duckdb', '1080', 'main', 'array_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1526, None, None), ('duckdb', '1080', 'main', 'array_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1529, None, None), ('duckdb', '1080', 'main', 'array_append', 'macro', None, None, None, ['arr', 'el'], [None, None], None, 'list_append(arr, el)', None, True, 1506, None, None), ('duckdb', '1080', 'main', 'add_default2', 'macro', None, None, None, ['a', 'b'], [None, None], None, '(a + b)', None, False, 1845, None, None), ('duckdb', '1080', 'main', 'add_default1', 'macro', None, None, None, ['b', 'a'], [None, None], None, '(a + b)', None, False, 1836, None, None), ('duckdb', '1080', 'main', '@>', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1530, None, None), ('duckdb', '1080', 'main', '<@', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l2, l1)', None, True, 1531, None, None), ('system', '0', 'pg_catalog', 'col_description', 'macro', None, None, None, ['table_oid', 'column_number'], [None, None], None, 'NULL', None, True, 1707, None, None), ('system', '0', 'pg_catalog', 'current_database', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1686, None, None), ('system', '0', 'pg_catalog', 'current_query', 'macro', None, None, None, [], [], None, 'current_query()', None, True, 1687, None, None), ('system', '0', 'pg_catalog', 'current_schema', 'macro', None, None, None, [], [], None, 'current_schema()', None, True, 1688, None, None), ('system', '0', 'pg_catalog', 'current_schemas', 'macro', None, None, None, ['include_implicit'], [None], None, 'current_schemas(include_implicit)', None, True, 1689, None, None), ('system', '0', 'pg_catalog', 'format_pg_type', 'macro', None, None, None, ['logical_type', 'type_name'], [None, None], None, "CASE  WHEN ((logical_type = 'FLOAT')) THEN ('real') WHEN ((logical_type = 'DOUBLE')) THEN ('double precision') WHEN ((logical_type = 'DECIMAL')) THEN ('numeric') WHEN ((logical_type = 'ENUM')) THEN (lower(type_name)) WHEN ((logical_type = 'VARCHAR')) THEN ('character varying') WHEN ((logical_type = 'BLOB')) THEN ('bytea') WHEN ((logical_type = 'TIMESTAMP')) THEN ('timestamp without time zone') WHEN ((logical_type = 'TIME')) THEN ('time without time zone') ELSE lower(logical_type) END", None, True, 1704, None, None), ('system', '0', 'pg_catalog', 'format_type', 'macro', None, None, None, ['type_oid', 'typemod'], [None, None], None, "((SELECT format_pg_type(logical_type, type_name) FROM duckdb_types() AS t WHERE (t.type_oid = type_oid)) || CASE  WHEN ((typemod > 0)) THEN (concat('(', (typemod // 1000), ',', (typemod % 1000), ')')) ELSE '' END)", None, True, 1705, None, None), ('system', '0', 'pg_catalog', 'has_any_column_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1690, None, None), ('system', '0', 'pg_catalog', 'has_column_privilege', 'macro', None, None, None, ['table', 'column', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1691, None, None), ('system', '0', 'pg_catalog', 'has_database_privilege', 'macro', None, None, None, ['database', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1692, None, None), ('system', '0', 'pg_catalog', 'has_foreign_data_wrapper_privilege', 'macro', None, None, None, ['fdw', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1693, None, None), ('system', '0', 'pg_catalog', 'has_function_privilege', 'macro', None, None, None, ['function', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1694, None, None), ('system', '0', 'pg_catalog', 'has_language_privilege', 'macro', None, None, None, ['language', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1695, None, None), ('system', '0', 'pg_catalog', 'has_schema_privilege', 'macro', None, None, None, ['schema', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1696, None, None), ('system', '0', 'pg_catalog', 'has_sequence_privilege', 'macro', None, None, None, ['sequence', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1697, None, None), ('system', '0', 'pg_catalog', 'has_server_privilege', 'macro', None, None, None, ['server', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1698, None, None), ('system', '0', 'pg_catalog', 'has_tablespace_privilege', 'macro', None, None, None, ['tablespace', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1700, None, None), ('system', '0', 'pg_catalog', 'has_table_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1699, None, None), ('system', '0', 'pg_catalog', 'inet_client_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1677, None, None), ('system', '0', 'pg_catalog', 'inet_client_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1678, None, None), ('system', '0', 'pg_catalog', 'inet_server_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1679, None, None), ('system', '0', 'pg_catalog', 'inet_server_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1680, None, None), ('system', '0', 'pg_catalog', 'obj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1708, None, None), ('system', '0', 'pg_catalog', 'pg_collation_is_visible', 'macro', None, None, None, ['collation_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1710, None, None), ('system', '0', 'pg_catalog', 'pg_conf_load_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1683, None, None), ('system', '0', 'pg_catalog', 'pg_conversion_is_visible', 'macro', None, None, None, ['conversion_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1711, None, None), ('system', '0', 'pg_catalog', 'pg_function_is_visible', 'macro', None, None, None, ['function_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1712, None, None), ('system', '0', 'pg_catalog', 'pg_get_constraintdef', 'macro', None, None, None, ['constraint_oid', 'pretty_bool'], [None, None], None, '(SELECT constraint_text FROM duckdb_constraints() AS d_constraint WHERE ((d_constraint.table_oid = (constraint_oid // 1000000)) AND (d_constraint.constraint_index = (constraint_oid % 1000000))))', None, True, 1702, None, None), ('system', '0', 'pg_catalog', 'pg_get_expr', 'macro', None, None, None, ['pg_node_tree', 'relation_oid'], [None, None], None, 'pg_node_tree', None, True, 1703, None, None), ('system', '0', 'pg_catalog', 'pg_get_viewdef', 'macro', None, None, None, ['oid'], [None], None, '(SELECT "sql" FROM duckdb_views() AS v WHERE (v.view_oid = oid))', None, True, 1701, None, None), ('system', '0', 'pg_catalog', 'pg_has_role', 'macro', None, None, None, ['user', 'role', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1706, None, None), ('system', '0', 'pg_catalog', 'pg_is_other_temp_schema', 'macro', None, None, None, ['schema_id'], [None], None, "CAST('f' AS BOOLEAN)", None, True, 1682, None, None), ('system', '0', 'pg_catalog', 'pg_my_temp_schema', 'macro', None, None, None, [], [], None, '0', None, True, 1681, None, None), ('system', '0', 'pg_catalog', 'pg_opclass_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1713, None, None), ('system', '0', 'pg_catalog', 'pg_operator_is_visible', 'macro', None, None, None, ['operator_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1714, None, None), ('system', '0', 'pg_catalog', 'pg_opfamily_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1715, None, None), ('system', '0', 'pg_catalog', 'pg_postmaster_start_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1684, None, None), ('system', '0', 'pg_catalog', 'pg_size_pretty', 'macro', None, None, None, ['bytes'], [None], None, 'format_bytes(bytes)', None, True, 1722, None, None), ('system', '0', 'pg_catalog', 'pg_table_is_visible', 'macro', None, None, None, ['table_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1716, None, None), ('system', '0', 'pg_catalog', 'pg_ts_config_is_visible', 'macro', None, None, None, ['config_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1717, None, None), ('system', '0', 'pg_catalog', 'pg_ts_dict_is_visible', 'macro', None, None, None, ['dict_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1718, None, None), ('system', '0', 'pg_catalog', 'pg_ts_parser_is_visible', 'macro', None, None, None, ['parser_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1719, None, None), ('system', '0', 'pg_catalog', 'pg_ts_template_is_visible', 'macro', None, None, None, ['template_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1720, None, None), ('system', '0', 'pg_catalog', 'pg_typeof', 'macro', None, None, None, ['expression'], [None], None, 'lower(typeof(expression))', None, True, 1685, None, None), ('system', '0', 'pg_catalog', 'pg_type_is_visible', 'macro', None, None, None, ['type_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1721, None, None), ('system', '0', 'pg_catalog', 'shobj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1709, None, None), ('temp', '1488', 'main', '&&', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1753, None, None), ('temp', '1488', 'main', '<@', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l2, l1)', None, True, 1757, None, None), ('temp', '1488', 'main', '@>', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1756, None, None), ('temp', '1488', 'main', 'array_append', 'macro', None, None, None, ['arr', 'el'], [None, None], None, 'list_append(arr, el)', None, True, 1732, None, None), ('temp', '1488', 'main', 'array_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_all(l1, l2)', None, True, 1755, None, None), ('temp', '1488', 'main', 'array_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_has_any(l1, l2)', None, True, 1752, None, None), ('temp', '1488', 'main', 'array_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_intersect(l1, l2)', None, True, 1750, None, None), ('temp', '1488', 'main', 'array_pop_back', 'macro', None, None, None, ['arr'], [None], None, 'arr[:(len(arr) - 1)]', None, True, 1735, None, None), ('temp', '1488', 'main', 'array_pop_front', 'macro', None, None, None, ['arr'], [None], None, 'arr[2:]', None, True, 1736, None, None), ('temp', '1488', 'main', 'array_prepend', 'macro', None, None, None, ['el', 'arr'], [None, None], None, 'list_prepend(el, arr)', None, True, 1734, None, None), ('temp', '1488', 'main', 'array_push_back', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(arr, list_value(e))', None, True, 1737, None, None), ('temp', '1488', 'main', 'array_push_front', 'macro', None, None, None, ['arr', 'e'], [None, None], None, 'list_concat(list_value(e), arr)', None, True, 1738, None, None), ('temp', '1488', 'main', 'array_reverse', 'macro', None, None, None, ['l'], [None], None, 'list_reverse(l)', None, True, 1748, None, None), ('temp', '1488', 'main', 'array_to_string', 'macro', None, None, None, ['arr', 'sep'], [None, None], None, "list_aggr(CAST(arr AS VARCHAR[]), 'string_agg', sep)", None, True, 1739, None, None), ('temp', '1488', 'main', 'count_if', 'macro', None, None, None, ['l'], [None], None, 'sum(CASE  WHEN (l) THEN (1) ELSE 0 END)', None, True, 1743, None, None), ('temp', '1488', 'main', 'current_catalog', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1725, None, None), ('temp', '1488', 'main', 'current_role', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1723, None, None), ('temp', '1488', 'main', 'current_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1724, None, None), ('temp', '1488', 'main', 'date_add', 'macro', None, None, None, ['date', 'interval'], [None, None], None, '(date + "interval")', None, True, 1787, None, None), ('temp', '1488', 'main', 'fdiv', 'macro', None, None, None, ['x', 'y'], [None, None], None, 'floor((x / y))', None, True, 1741, None, None), ('temp', '1488', 'main', 'fmod', 'macro', None, None, None, ['x', 'y'], [None, None], None, '(x - (y * floor((x / y))))', None, True, 1742, None, None), ('temp', '1488', 'main', 'generate_subscripts', 'macro', None, None, None, ['arr', 'dim'], [None, None], None, 'unnest(generate_series(1, array_length(arr, dim)))', None, True, 1740, None, None), ('temp', '1488', 'main', 'geomean', 'macro', None, None, None, ['x'], [None], None, 'exp(avg(ln(x)))', None, True, 1745, None, None), ('temp', '1488', 'main', 'geometric_mean', 'macro', None, None, None, ['x'], [None], None, 'geomean(x)', None, True, 1746, None, None), ('temp', '1488', 'main', 'get_block_size', 'macro', None, None, None, ['db_name'], [None], None, '(SELECT block_size FROM pragma_database_size() WHERE (database_name = db_name))', None, True, 1789, None, None), ('temp', '1488', 'main', 'list_any_value', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'any_value')", None, True, 1774, None, None), ('temp', '1488', 'main', 'list_append', 'macro', None, None, None, ['l', 'e'], [None, None], None, 'list_concat(l, list_value(e))', None, True, 1731, None, None), ('temp', '1488', 'main', 'list_approx_count_distinct', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'approx_count_distinct')", None, True, 1764, None, None), ('temp', '1488', 'main', 'list_avg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'avg')", None, True, 1758, None, None), ('temp', '1488', 'main', 'list_bit_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_and')", None, True, 1767, None, None), ('temp', '1488', 'main', 'list_bit_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_or')", None, True, 1766, None, None), ('temp', '1488', 'main', 'list_bit_xor', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bit_xor')", None, True, 1765, None, None), ('temp', '1488', 'main', 'list_bool_and', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_and')", None, True, 1768, None, None), ('temp', '1488', 'main', 'list_bool_or', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'bool_or')", None, True, 1769, None, None), ('temp', '1488', 'main', 'list_count', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'count')", None, True, 1770, None, None), ('temp', '1488', 'main', 'list_entropy', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'entropy')", None, True, 1771, None, None), ('temp', '1488', 'main', 'list_first', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'first')", None, True, 1773, None, None), ('temp', '1488', 'main', 'list_has_all', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l2, (variable_has_all -> list_contains(l1, variable_has_all)))) = len(list_filter(l2, (variable_has_all -> (variable_has_all IS NOT NULL)))))) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1754, None, None), ('temp', '1488', 'main', 'list_has_any', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, "CASE  WHEN ((l1 IS NULL)) THEN (NULL) WHEN ((l2 IS NULL)) THEN (NULL) WHEN ((len(list_filter(l1, (variable_has_any -> list_contains(l2, variable_has_any)))) > 0)) THEN (CAST('t' AS BOOLEAN)) ELSE CAST('f' AS BOOLEAN) END", None, True, 1751, None, None), ('temp', '1488', 'main', 'list_histogram', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'histogram')", None, True, 1786, None, None), ('temp', '1488', 'main', 'list_intersect', 'macro', None, None, None, ['l1', 'l2'], [None, None], None, 'list_filter(list_distinct(l1), (variable_intersect -> list_contains(l2, variable_intersect)))', None, True, 1749, None, None), ('temp', '1488', 'main', 'list_kurtosis', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis')", None, True, 1775, None, None), ('temp', '1488', 'main', 'list_kurtosis_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'kurtosis_pop')", None, True, 1776, None, None), ('temp', '1488', 'main', 'list_last', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'last')", None, True, 1772, None, None), ('temp', '1488', 'main', 'list_mad', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mad')", None, True, 1785, None, None), ('temp', '1488', 'main', 'list_max', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'max')", None, True, 1778, None, None), ('temp', '1488', 'main', 'list_median', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'median')", None, True, 1784, None, None), ('temp', '1488', 'main', 'list_min', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'min')", None, True, 1777, None, None), ('temp', '1488', 'main', 'list_mode', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'mode')", None, True, 1783, None, None), ('temp', '1488', 'main', 'list_prepend', 'macro', None, None, None, ['e', 'l'], [None, None], None, 'list_concat(list_value(e), l)', None, True, 1733, None, None), ('temp', '1488', 'main', 'list_product', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'product')", None, True, 1779, None, None), ('temp', '1488', 'main', 'list_reverse', 'macro', None, None, None, ['l'], [None], None, 'l[:-:-1]', None, True, 1747, None, None), ('temp', '1488', 'main', 'list_sem', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sem')", None, True, 1763, None, None), ('temp', '1488', 'main', 'list_skewness', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'skewness')", None, True, 1780, None, None), ('temp', '1488', 'main', 'list_stddev_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_pop')", None, True, 1761, None, None), ('temp', '1488', 'main', 'list_stddev_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'stddev_samp')", None, True, 1762, None, None), ('temp', '1488', 'main', 'list_string_agg', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'string_agg')", None, True, 1782, None, None), ('temp', '1488', 'main', 'list_sum', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'sum')", None, True, 1781, None, None), ('temp', '1488', 'main', 'list_var_pop', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_pop')", None, True, 1760, None, None), ('temp', '1488', 'main', 'list_var_samp', 'macro', None, None, None, ['l'], [None], None, "list_aggr(l, 'var_samp')", None, True, 1759, None, None), ('temp', '1488', 'main', 'nullif', 'macro', None, None, None, ['a', 'b'], [None, None], None, 'CASE  WHEN ((a = b)) THEN (NULL) ELSE a END', None, True, 1730, None, None), ('temp', '1488', 'main', 'regexp_split_to_table', 'macro', None, None, None, ['text', 'pattern'], [None, None], None, 'unnest(string_split_regex("text", pattern))', None, True, 1788, None, None), ('temp', '1488', 'main', 'roundbankers', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'round_even(x, n)', None, True, 1729, None, None), ('temp', '1488', 'main', 'round_even', 'macro', None, None, None, ['x', 'n'], [None, None], None, 'CASE  WHEN ((((abs(x) * power(10, (n + 1))) % 10) = 5)) THEN ((round((x / 2), n) * 2)) ELSE round(x, n) END', None, True, 1728, None, None), ('temp', '1488', 'main', 'session_user', 'macro', None, None, None, [], [], None, "'duckdb'", None, True, 1727, None, None), ('temp', '1488', 'main', 'split_part', 'macro', None, None, None, ['string', 'delimiter', 'position'], [None, None, None], None, 'COALESCE(string_split(string, "delimiter")["position"], \'\')', None, True, 1744, None, None), ('temp', '1488', 'main', 'user', 'macro', None, None, None, [], [], None, 'current_user', None, True, 1726, None, None), ('temp', '1488', 'pg_catalog', 'col_description', 'macro', None, None, None, ['table_oid', 'column_number'], [None, None], None, 'NULL', None, True, 1820, None, None), ('temp', '1488', 'pg_catalog', 'current_database', 'macro', None, None, None, [], [], None, 'current_database()', None, True, 1799, None, None), ('temp', '1488', 'pg_catalog', 'current_query', 'macro', None, None, None, [], [], None, 'current_query()', None, True, 1800, None, None), ('temp', '1488', 'pg_catalog', 'current_schema', 'macro', None, None, None, [], [], None, 'current_schema()', None, True, 1801, None, None), ('temp', '1488', 'pg_catalog', 'current_schemas', 'macro', None, None, None, ['include_implicit'], [None], None, 'current_schemas(include_implicit)', None, True, 1802, None, None), ('temp', '1488', 'pg_catalog', 'format_pg_type', 'macro', None, None, None, ['logical_type', 'type_name'], [None, None], None, "CASE  WHEN ((logical_type = 'FLOAT')) THEN ('real') WHEN ((logical_type = 'DOUBLE')) THEN ('double precision') WHEN ((logical_type = 'DECIMAL')) THEN ('numeric') WHEN ((logical_type = 'ENUM')) THEN (lower(type_name)) WHEN ((logical_type = 'VARCHAR')) THEN ('character varying') WHEN ((logical_type = 'BLOB')) THEN ('bytea') WHEN ((logical_type = 'TIMESTAMP')) THEN ('timestamp without time zone') WHEN ((logical_type = 'TIME')) THEN ('time without time zone') ELSE lower(logical_type) END", None, True, 1817, None, None), ('temp', '1488', 'pg_catalog', 'format_type', 'macro', None, None, None, ['type_oid', 'typemod'], [None, None], None, "((SELECT format_pg_type(logical_type, type_name) FROM duckdb_types() AS t WHERE (t.type_oid = type_oid)) || CASE  WHEN ((typemod > 0)) THEN (concat('(', (typemod // 1000), ',', (typemod % 1000), ')')) ELSE '' END)", None, True, 1818, None, None), ('temp', '1488', 'pg_catalog', 'has_any_column_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1803, None, None), ('temp', '1488', 'pg_catalog', 'has_column_privilege', 'macro', None, None, None, ['table', 'column', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1804, None, None), ('temp', '1488', 'pg_catalog', 'has_database_privilege', 'macro', None, None, None, ['database', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1805, None, None), ('temp', '1488', 'pg_catalog', 'has_foreign_data_wrapper_privilege', 'macro', None, None, None, ['fdw', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1806, None, None), ('temp', '1488', 'pg_catalog', 'has_function_privilege', 'macro', None, None, None, ['function', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1807, None, None), ('temp', '1488', 'pg_catalog', 'has_language_privilege', 'macro', None, None, None, ['language', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1808, None, None), ('temp', '1488', 'pg_catalog', 'has_schema_privilege', 'macro', None, None, None, ['schema', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1809, None, None), ('temp', '1488', 'pg_catalog', 'has_sequence_privilege', 'macro', None, None, None, ['sequence', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1810, None, None), ('temp', '1488', 'pg_catalog', 'has_server_privilege', 'macro', None, None, None, ['server', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1811, None, None), ('temp', '1488', 'pg_catalog', 'has_tablespace_privilege', 'macro', None, None, None, ['tablespace', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1813, None, None), ('temp', '1488', 'pg_catalog', 'has_table_privilege', 'macro', None, None, None, ['table', 'privilege'], [None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1812, None, None), ('temp', '1488', 'pg_catalog', 'inet_client_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1790, None, None), ('temp', '1488', 'pg_catalog', 'inet_client_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1791, None, None), ('temp', '1488', 'pg_catalog', 'inet_server_addr', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1792, None, None), ('temp', '1488', 'pg_catalog', 'inet_server_port', 'macro', None, None, None, [], [], None, 'NULL', None, True, 1793, None, None), ('temp', '1488', 'pg_catalog', 'obj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1821, None, None), ('temp', '1488', 'pg_catalog', 'pg_collation_is_visible', 'macro', None, None, None, ['collation_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1823, None, None), ('temp', '1488', 'pg_catalog', 'pg_conf_load_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1796, None, None), ('temp', '1488', 'pg_catalog', 'pg_conversion_is_visible', 'macro', None, None, None, ['conversion_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1824, None, None), ('temp', '1488', 'pg_catalog', 'pg_function_is_visible', 'macro', None, None, None, ['function_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1825, None, None), ('temp', '1488', 'pg_catalog', 'pg_get_constraintdef', 'macro', None, None, None, ['constraint_oid', 'pretty_bool'], [None, None], None, '(SELECT constraint_text FROM duckdb_constraints() AS d_constraint WHERE ((d_constraint.table_oid = (constraint_oid // 1000000)) AND (d_constraint.constraint_index = (constraint_oid % 1000000))))', None, True, 1815, None, None), ('temp', '1488', 'pg_catalog', 'pg_get_expr', 'macro', None, None, None, ['pg_node_tree', 'relation_oid'], [None, None], None, 'pg_node_tree', None, True, 1816, None, None), ('temp', '1488', 'pg_catalog', 'pg_get_viewdef', 'macro', None, None, None, ['oid'], [None], None, '(SELECT "sql" FROM duckdb_views() AS v WHERE (v.view_oid = oid))', None, True, 1814, None, None), ('temp', '1488', 'pg_catalog', 'pg_has_role', 'macro', None, None, None, ['user', 'role', 'privilege'], [None, None, None], None, "CAST('t' AS BOOLEAN)", None, True, 1819, None, None), ('temp', '1488', 'pg_catalog', 'pg_is_other_temp_schema', 'macro', None, None, None, ['schema_id'], [None], None, "CAST('f' AS BOOLEAN)", None, True, 1795, None, None), ('temp', '1488', 'pg_catalog', 'pg_my_temp_schema', 'macro', None, None, None, [], [], None, '0', None, True, 1794, None, None), ('temp', '1488', 'pg_catalog', 'pg_opclass_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1826, None, None), ('temp', '1488', 'pg_catalog', 'pg_operator_is_visible', 'macro', None, None, None, ['operator_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1827, None, None), ('temp', '1488', 'pg_catalog', 'pg_opfamily_is_visible', 'macro', None, None, None, ['opclass_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1828, None, None), ('temp', '1488', 'pg_catalog', 'pg_postmaster_start_time', 'macro', None, None, None, [], [], None, 'current_timestamp', None, True, 1797, None, None), ('temp', '1488', 'pg_catalog', 'pg_size_pretty', 'macro', None, None, None, ['bytes'], [None], None, 'format_bytes(bytes)', None, True, 1835, None, None), ('temp', '1488', 'pg_catalog', 'pg_table_is_visible', 'macro', None, None, None, ['table_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1829, None, None), ('temp', '1488', 'pg_catalog', 'pg_ts_config_is_visible', 'macro', None, None, None, ['config_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1830, None, None), ('temp', '1488', 'pg_catalog', 'pg_ts_dict_is_visible', 'macro', None, None, None, ['dict_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1831, None, None), ('temp', '1488', 'pg_catalog', 'pg_ts_parser_is_visible', 'macro', None, None, None, ['parser_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1832, None, None), ('temp', '1488', 'pg_catalog', 'pg_ts_template_is_visible', 'macro', None, None, None, ['template_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1833, None, None), ('temp', '1488', 'pg_catalog', 'pg_typeof', 'macro', None, None, None, ['expression'], [None], None, 'lower(typeof(expression))', None, True, 1798, None, None), ('temp', '1488', 'pg_catalog', 'pg_type_is_visible', 'macro', None, None, None, ['type_oid'], [None], None, "CAST('t' AS BOOLEAN)", None, True, 1834, None, None), ('temp', '1488', 'pg_catalog', 'shobj_description', 'macro', None, None, None, ['object_oid', 'catalog_name'], [None, None], None, 'NULL', None, True, 1822, None, None)]
+--------------------+
--Query--
SELECT * FROM duckdb_functions() WHERE function_type='table'
--Result--
[('system', '0', 'main', 'arrow_scan', 'table', None, None, None, ['col0', 'col1', 'col2'], ['POINTER', 'POINTER', 'POINTER'], None, None, None, True, 94, None, None), ('system', '0', 'main', 'arrow_scan_dumb', 'table', None, None, None, ['col0', 'col1', 'col2'], ['POINTER', 'POINTER', 'POINTER'], None, None, None, True, 96, None, None), ('system', '0', 'main', 'checkpoint', 'table', None, None, None, [], [], None, None, None, True, 70, None, None), ('system', '0', 'main', 'checkpoint', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 70, None, None), ('system', '0', 'main', 'dbgen', 'table', None, None, None, ['step', 'children', 'schema', 'suffix', 'catalog', 'overwrite', 'sf'], ['UINTEGER', 'UINTEGER', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'DOUBLE'], None, None, None, True, 1085, None, None), ('system', '0', 'main', 'dsdgen', 'table', None, None, None, ['schema', 'suffix', 'catalog', 'keys', 'overwrite', 'sf'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'DOUBLE'], None, None, None, True, 1471, None, None), ('system', '0', 'main', 'duckdb_columns', 'table', None, None, None, [], [], None, None, None, True, 24, None, None), ('system', '0', 'main', 'duckdb_constraints', 'table', None, None, None, [], [], None, None, None, True, 26, None, None), ('system', '0', 'main', 'duckdb_databases', 'table', None, None, None, [], [], None, None, None, True, 28, None, None), ('system', '0', 'main', 'duckdb_dependencies', 'table', None, None, None, [], [], None, None, None, True, 38, None, None), ('system', '0', 'main', 'duckdb_extensions', 'table', None, None, None, [], [], None, None, None, True, 40, None, None), ('system', '0', 'main', 'duckdb_functions', 'table', None, None, None, [], [], None, None, None, True, 30, None, None), ('system', '0', 'main', 'duckdb_indexes', 'table', None, None, None, [], [], None, None, None, True, 34, None, None), ('system', '0', 'main', 'duckdb_keywords', 'table', None, None, None, [], [], None, None, None, True, 32, None, None), ('system', '0', 'main', 'duckdb_memory', 'table', None, None, None, [], [], None, None, None, True, 42, None, None), ('system', '0', 'main', 'duckdb_optimizers', 'table', None, None, None, [], [], None, None, None, True, 44, None, None), ('system', '0', 'main', 'duckdb_schemas', 'table', None, None, None, [], [], None, None, None, True, 36, None, None), ('system', '0', 'main', 'duckdb_secrets', 'table', None, None, None, ['redact'], ['BOOLEAN'], None, None, None, True, 46, None, None), ('system', '0', 'main', 'duckdb_sequences', 'table', None, None, None, [], [], None, None, None, True, 48, None, None), ('system', '0', 'main', 'duckdb_settings', 'table', None, None, None, [], [], None, None, None, True, 50, None, None), ('system', '0', 'main', 'duckdb_tables', 'table', None, None, None, [], [], None, None, None, True, 52, None, None), ('system', '0', 'main', 'duckdb_temporary_files', 'table', None, None, None, [], [], None, None, None, True, 54, None, None), ('system', '0', 'main', 'duckdb_types', 'table', None, None, None, [], [], None, None, None, True, 56, None, None), ('system', '0', 'main', 'duckdb_views', 'table', None, None, None, [], [], None, None, None, True, 58, None, None), ('system', '0', 'main', 'force_checkpoint', 'table', None, None, None, [], [], None, None, None, True, 72, None, None), ('system', '0', 'main', 'force_checkpoint', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 72, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1', 'col2'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'generate_series', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, None, True, 78, None, None), ('system', '0', 'main', 'glob', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 74, None, None), ('system', '0', 'main', 'glob', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 74, None, None), ('system', '0', 'main', 'icu_calendar_names', 'table', None, None, None, [], [], None, None, None, True, 1453, None, None), ('system', '0', 'main', 'index_scan', 'table', None, None, None, [], [], None, None, None, True, 4, None, None), ('system', '0', 'main', 'json_execute_serialized_sql', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1159, None, None), ('system', '0', 'main', 'pandas_scan', 'table', None, None, None, ['col0'], ['POINTER'], None, None, None, True, 1482, None, None), ('system', '0', 'main', 'parquet_file_metadata', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1465, None, None), ('system', '0', 'main', 'parquet_file_metadata', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1465, None, None), ('system', '0', 'main', 'parquet_kv_metadata', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1463, None, None), ('system', '0', 'main', 'parquet_kv_metadata', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1463, None, None), ('system', '0', 'main', 'parquet_metadata', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1459, None, None), ('system', '0', 'main', 'parquet_metadata', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1459, None, None), ('system', '0', 'main', 'parquet_scan', 'table', None, None, None, ['col0', 'hive_types_autocast', 'union_by_name', 'filename', 'hive_types', 'hive_partitioning', 'encryption_config', 'compression', 'file_row_number', 'schema', 'binary_as_string'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN'], None, None, None, True, 1457, None, None), ('system', '0', 'main', 'parquet_scan', 'table', None, None, None, ['col0', 'binary_as_string', 'schema', 'file_row_number', 'compression', 'encryption_config', 'hive_partitioning', 'hive_types', 'filename', 'union_by_name', 'hive_types_autocast'], ['VARCHAR[]', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1457, None, None), ('system', '0', 'main', 'parquet_schema', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 1461, None, None), ('system', '0', 'main', 'parquet_schema', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 1461, None, None), ('system', '0', 'main', 'pg_timezone_names', 'table', None, None, None, [], [], None, None, None, True, 1447, None, None), ('system', '0', 'main', 'pragma_collations', 'table', None, None, None, [], [], None, None, None, True, 10, None, None), ('system', '0', 'main', 'pragma_database_size', 'table', None, None, None, [], [], None, None, None, True, 20, None, None), ('system', '0', 'main', 'pragma_metadata_info', 'table', None, None, None, [], [], None, None, None, True, 18, None, None), ('system', '0', 'main', 'pragma_metadata_info', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 18, None, None), ('system', '0', 'main', 'pragma_platform', 'table', None, None, None, [], [], None, None, None, True, 8, None, None), ('system', '0', 'main', 'pragma_show', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 14, None, None), ('system', '0', 'main', 'pragma_storage_info', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 16, None, None), ('system', '0', 'main', 'pragma_table_info', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 12, None, None), ('system', '0', 'main', 'pragma_user_agent', 'table', None, None, None, [], [], None, None, None, True, 22, None, None), ('system', '0', 'main', 'pragma_version', 'table', None, None, None, [], [], None, None, None, True, 6, None, None), ('system', '0', 'main', 'python_map_function', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TABLE', 'POINTER', 'POINTER'], None, None, None, True, 1484, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0'], ['BIGINT'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1'], ['BIGINT', 'BIGINT'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1', 'col2'], ['BIGINT', 'BIGINT', 'BIGINT'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP', 'TIMESTAMP', 'INTERVAL'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'range', 'table', None, None, None, ['col0', 'col1', 'col2'], ['TIMESTAMP WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE', 'INTERVAL'], None, None, None, True, 76, None, None), ('system', '0', 'main', 'unnest', 'table', None, None, None, ['col0'], ['TABLE'], None, None, None, True, 84, None, None), ('system', '0', 'main', 'tpch_queries', 'table', None, None, None, [], [], None, None, None, True, 1089, None, None), ('system', '0', 'main', 'tpch_answers', 'table', None, None, None, [], [], None, None, None, True, 1091, None, None), ('system', '0', 'main', 'tpcds_queries', 'table', None, None, None, [], [], None, None, None, True, 1475, None, None), ('system', '0', 'main', 'tpcds_answers', 'table', None, None, None, [], [], None, None, None, True, 1477, None, None), ('system', '0', 'main', 'test_vector_types', 'table', None, None, None, ['col0', 'all_flat'], ['ANY', 'BOOLEAN'], 'ANY', None, None, True, 62, None, None), ('system', '0', 'main', 'test_all_types', 'table', None, None, None, ['use_large_enum'], ['BOOLEAN'], None, None, None, True, 60, None, None), ('system', '0', 'main', 'summary', 'table', None, None, None, ['col0'], ['TABLE'], None, None, None, True, 82, None, None), ('system', '0', 'main', 'sniff_csv', 'table', None, None, None, ['col0', 'delim', 'dateformat', 'column_names', 'sep', 'hive_partitioning', 'header', 'escape', 'allow_quoted_nulls', 'maximum_line_size', 'new_line', 'columns', 'rejects_limit', 'force_not_null', 'timestampformat', 'auto_detect', 'sample_size', 'auto_type_candidates', 'nullstr', 'normalize_names', 'rejects_table', 'column_types', 'skip', 'types', 'max_line_size', 'quote', 'rejects_scan', 'ignore_errors', 'compression', 'names', 'store_rejects', 'all_varchar', 'buffer_size', 'decimal_separator', 'parallel', 'null_padding', 'dtypes', 'filename', 'union_by_name', 'hive_types', 'hive_types_autocast'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BIGINT', 'ANY', 'ANY', 'BOOLEAN', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'UBIGINT', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN'], None, None, None, True, 88, None, None), ('system', '0', 'main', 'seq_scan', 'table', None, None, None, [], [], None, None, None, True, 2, None, None), ('system', '0', 'main', 'repeat_row', 'table', None, None, None, ['num_rows'], ['BIGINT'], 'ANY', None, None, True, 86, None, None), ('system', '0', 'main', 'repeat', 'table', None, None, None, ['col0', 'col1'], ['ANY', 'BIGINT'], None, None, None, True, 80, None, None), ('system', '0', 'main', 'read_text', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 92, None, None), ('system', '0', 'main', 'read_text', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 92, None, None), ('system', '0', 'main', 'read_parquet', 'table', None, None, None, ['col0', 'hive_types_autocast', 'union_by_name', 'filename', 'hive_types', 'hive_partitioning', 'encryption_config', 'compression', 'file_row_number', 'schema', 'binary_as_string'], ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN'], None, None, None, True, 1455, None, None), ('system', '0', 'main', 'read_parquet', 'table', None, None, None, ['col0', 'binary_as_string', 'schema', 'file_row_number', 'compression', 'encryption_config', 'hive_partitioning', 'hive_types', 'filename', 'union_by_name', 'hive_types_autocast'], ['VARCHAR[]', 'BOOLEAN', 'MAP(INTEGER, STRUCT("name" VARCHAR, "type" VARCHAR, default_value VARCHAR))', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1455, None, None), ('system', '0', 'main', 'read_ndjson_objects', 'table', None, None, None, ['col0', 'format', 'ignore_errors', 'maximum_object_size', 'union_by_name', 'compression', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1147, None, None), ('system', '0', 'main', 'read_ndjson_objects', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'compression', 'union_by_name', 'maximum_object_size', 'ignore_errors', 'format'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR'], None, None, None, True, 1147, None, None), ('system', '0', 'main', 'read_ndjson_auto', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1157, None, None), ('system', '0', 'main', 'read_ndjson_auto', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1157, None, None), ('system', '0', 'main', 'read_ndjson', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1153, None, None), ('system', '0', 'main', 'read_ndjson', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1153, None, None), ('system', '0', 'main', 'read_json_objects_auto', 'table', None, None, None, ['col0', 'format', 'ignore_errors', 'maximum_object_size', 'union_by_name', 'compression', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1149, None, None), ('system', '0', 'main', 'read_json_objects_auto', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'compression', 'union_by_name', 'maximum_object_size', 'ignore_errors', 'format'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR'], None, None, None, True, 1149, None, None), ('system', '0', 'main', 'read_json_objects', 'table', None, None, None, ['col0', 'format', 'ignore_errors', 'maximum_object_size', 'union_by_name', 'compression', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1145, None, None), ('system', '0', 'main', 'read_json_objects', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'compression', 'union_by_name', 'maximum_object_size', 'ignore_errors', 'format'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BOOLEAN', 'VARCHAR'], None, None, None, True, 1145, None, None), ('system', '0', 'main', 'read_json_auto', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1155, None, None), ('system', '0', 'main', 'read_json_auto', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1155, None, None), ('system', '0', 'main', 'read_json', 'table', None, None, None, ['col0', 'records', 'timestampformat', 'field_appearance_threshold', 'date_format', 'dateformat', 'sample_size', 'columns', 'convert_strings_to_integers', 'format', 'ignore_errors', 'maximum_object_size', 'maximum_depth', 'auto_detect', 'union_by_name', 'maximum_sample_files', 'compression', 'timestamp_format', 'hive_types', 'hive_partitioning', 'hive_types_autocast', 'filename'], ['VARCHAR', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR', 'BIGINT', 'ANY', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'UINTEGER', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'VARCHAR', 'VARCHAR', 'ANY', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN'], None, None, None, True, 1151, None, None), ('system', '0', 'main', 'read_json', 'table', None, None, None, ['col0', 'filename', 'hive_types_autocast', 'hive_partitioning', 'hive_types', 'timestamp_format', 'compression', 'maximum_sample_files', 'union_by_name', 'auto_detect', 'maximum_depth', 'maximum_object_size', 'ignore_errors', 'format', 'convert_strings_to_integers', 'columns', 'sample_size', 'dateformat', 'date_format', 'field_appearance_threshold', 'timestampformat', 'records'], ['VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'ANY', 'VARCHAR', 'VARCHAR', 'BIGINT', 'BOOLEAN', 'BOOLEAN', 'BIGINT', 'UINTEGER', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'ANY', 'BIGINT', 'VARCHAR', 'VARCHAR', 'DOUBLE', 'VARCHAR', 'VARCHAR'], None, None, None, True, 1151, None, None), ('system', '0', 'main', 'read_csv_auto', 'table', None, None, None, ['col0', 'hive_types_autocast', 'hive_types', 'union_by_name', 'filename', 'dtypes', 'null_padding', 'parallel', 'decimal_separator', 'buffer_size', 'all_varchar', 'store_rejects', 'names', 'compression', 'ignore_errors', 'rejects_scan', 'quote', 'max_line_size', 'types', 'skip', 'column_types', 'rejects_table', 'normalize_names', 'nullstr', 'auto_type_candidates', 'sample_size', 'auto_detect', 'timestampformat', 'force_not_null', 'rejects_limit', 'columns', 'new_line', 'maximum_line_size', 'allow_quoted_nulls', 'escape', 'header', 'hive_partitioning', 'sep', 'column_names', 'dateformat', 'delim'], ['VARCHAR', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'UBIGINT', 'BOOLEAN', 'BOOLEAN', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'BOOLEAN', 'ANY', 'ANY', 'BIGINT', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'VARCHAR'], None, None, None, True, 68, None, None), ('system', '0', 'main', 'read_csv_auto', 'table', None, None, None, ['col0', 'delim', 'dateformat', 'column_names', 'sep', 'hive_partitioning', 'header', 'escape', 'allow_quoted_nulls', 'maximum_line_size', 'new_line', 'columns', 'rejects_limit', 'force_not_null', 'timestampformat', 'auto_detect', 'sample_size', 'auto_type_candidates', 'nullstr', 'normalize_names', 'rejects_table', 'column_types', 'skip', 'types', 'max_line_size', 'quote', 'rejects_scan', 'ignore_errors', 'compression', 'names', 'store_rejects', 'all_varchar', 'buffer_size', 'decimal_separator', 'parallel', 'null_padding', 'dtypes', 'filename', 'union_by_name', 'hive_types', 'hive_types_autocast'], ['VARCHAR[]', 'VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BIGINT', 'ANY', 'ANY', 'BOOLEAN', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'UBIGINT', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN'], None, None, None, True, 68, None, None), ('system', '0', 'main', 'read_csv', 'table', None, None, None, ['col0', 'hive_types_autocast', 'hive_types', 'union_by_name', 'filename', 'dtypes', 'null_padding', 'parallel', 'decimal_separator', 'buffer_size', 'all_varchar', 'store_rejects', 'names', 'compression', 'ignore_errors', 'rejects_scan', 'quote', 'max_line_size', 'types', 'skip', 'column_types', 'rejects_table', 'normalize_names', 'nullstr', 'auto_type_candidates', 'sample_size', 'auto_detect', 'timestampformat', 'force_not_null', 'rejects_limit', 'columns', 'new_line', 'maximum_line_size', 'allow_quoted_nulls', 'escape', 'header', 'hive_partitioning', 'sep', 'column_names', 'dateformat', 'delim'], ['VARCHAR', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'UBIGINT', 'BOOLEAN', 'BOOLEAN', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'BOOLEAN', 'ANY', 'ANY', 'BIGINT', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'VARCHAR'], None, None, None, True, 66, None, None), ('system', '0', 'main', 'read_csv', 'table', None, None, None, ['col0', 'delim', 'dateformat', 'column_names', 'sep', 'hive_partitioning', 'header', 'escape', 'allow_quoted_nulls', 'maximum_line_size', 'new_line', 'columns', 'rejects_limit', 'force_not_null', 'timestampformat', 'auto_detect', 'sample_size', 'auto_type_candidates', 'nullstr', 'normalize_names', 'rejects_table', 'column_types', 'skip', 'types', 'max_line_size', 'quote', 'rejects_scan', 'ignore_errors', 'compression', 'names', 'store_rejects', 'all_varchar', 'buffer_size', 'decimal_separator', 'parallel', 'null_padding', 'dtypes', 'filename', 'union_by_name', 'hive_types', 'hive_types_autocast'], ['VARCHAR[]', 'VARCHAR', 'VARCHAR', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR', 'ANY', 'BIGINT', 'VARCHAR[]', 'VARCHAR', 'BOOLEAN', 'BIGINT', 'ANY', 'ANY', 'BOOLEAN', 'VARCHAR', 'ANY', 'BIGINT', 'ANY', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'BOOLEAN', 'VARCHAR', 'VARCHAR[]', 'BOOLEAN', 'BOOLEAN', 'UBIGINT', 'VARCHAR', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN', 'BOOLEAN', 'ANY', 'BOOLEAN'], None, None, None, True, 66, None, None), ('system', '0', 'main', 'read_blob', 'table', None, None, None, ['col0'], ['VARCHAR'], None, None, None, True, 90, None, None), ('system', '0', 'main', 'read_blob', 'table', None, None, None, ['col0'], ['VARCHAR[]'], None, None, None, True, 90, None, None)]
+--------------------+
--Query--
select distinct function_name from duckdb_functions() where function_name='sqrt'
--Result--
[('sqrt',)]
+--------------------+
--Query--
select function_name from duckdb_functions() where not internal order by 1
--Result--
[('add_default1',), ('add_default2',), ('my_range',)]
+--------------------+
--Query--
select macro_definition from duckdb_functions() where function_name = 'my_range'
--Result--
[('SELECT * FROM range(x)',)]
+--------------------+
