DBMS_Base,DBMS_Tested,SQL_Query,SQL_File_Name,Result,ERROR_Type,ERROR_Message
postgresql,postgresql,"SELECT 	pg_advisory_xact_lock(1), pg_advisory_xact_lock_shared(2), 	pg_advisory_xact_lock(1, 1), pg_advisory_xact_lock_shared(2, 2)",advisory_lock.sql,SAME,,"[('', '', '', '')]"
postgresql,postgresql,SELECT pg_advisory_unlock_all(),advisory_lock.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT 	pg_advisory_unlock(1), pg_advisory_unlock_shared(2), 	pg_advisory_unlock(1, 1), pg_advisory_unlock_shared(2, 2)",advisory_lock.sql,SAME,,"[(False, False, False, False)]"
postgresql,postgresql,COMMIT,advisory_lock.sql,SAME,,[]
postgresql,postgresql,BEGIN,advisory_lock.sql,SAME,,[]
postgresql,postgresql,"SELECT 	pg_advisory_xact_lock(1), pg_advisory_xact_lock_shared(2), 	pg_advisory_xact_lock(1, 1), pg_advisory_xact_lock_shared(2, 2)",advisory_lock.sql,SAME,,"[('', '', '', '')]"
postgresql,postgresql,ROLLBACK,advisory_lock.sql,SAME,,[]
postgresql,postgresql,"SELECT 	pg_advisory_unlock(1), pg_advisory_unlock(1), 	pg_advisory_unlock_shared(2), pg_advisory_unlock_shared(2), 	pg_advisory_unlock(1, 1), pg_advisory_unlock(1, 1), 	pg_advisory_unlock_shared(2, 2), pg_advisory_unlock_shared(2, 2)",advisory_lock.sql,SAME,,"[(False, False, False, False, False, False, False, False)]"
postgresql,postgresql,BEGIN,advisory_lock.sql,SAME,,[]
postgresql,postgresql,"SELECT 	pg_advisory_lock(1), pg_advisory_lock_shared(2), 	pg_advisory_lock(1, 1), pg_advisory_lock_shared(2, 2)",advisory_lock.sql,SAME,,"[('', '', '', '')]"
postgresql,postgresql,ROLLBACK,advisory_lock.sql,SAME,,[]
postgresql,postgresql,SELECT pg_advisory_unlock_all(),advisory_lock.sql,SAME,,"[('',)]"
postgresql,postgresql,BEGIN,advisory_lock.sql,SAME,,[]
postgresql,postgresql,"SELECT 	pg_advisory_xact_lock(1), pg_advisory_xact_lock(1), 	pg_advisory_xact_lock_shared(2), pg_advisory_xact_lock_shared(2), 	pg_advisory_xact_lock(1, 1), pg_advisory_xact_lock(1, 1), 	pg_advisory_xact_lock_shared(2, 2), pg_advisory_xact_lock_shared(2, 2)",advisory_lock.sql,SAME,,"[('', '', '', '', '', '', '', '')]"
postgresql,postgresql,COMMIT,advisory_lock.sql,SAME,,[]
postgresql,postgresql,"SELECT 	pg_advisory_lock(1), pg_advisory_lock(1), 	pg_advisory_lock_shared(2), pg_advisory_lock_shared(2), 	pg_advisory_lock(1, 1), pg_advisory_lock(1, 1), 	pg_advisory_lock_shared(2, 2), pg_advisory_lock_shared(2, 2)",advisory_lock.sql,SAME,,"[('', '', '', '', '', '', '', '')]"
postgresql,postgresql,"SELECT 	pg_advisory_unlock(1), pg_advisory_unlock(1), 	pg_advisory_unlock_shared(2), pg_advisory_unlock_shared(2), 	pg_advisory_unlock(1, 1), pg_advisory_unlock(1, 1), 	pg_advisory_unlock_shared(2, 2), pg_advisory_unlock_shared(2, 2)",advisory_lock.sql,SAME,,"[(True, True, True, True, True, True, True, True)]"
postgresql,postgresql,"SELECT 	pg_advisory_lock(1), pg_advisory_lock(1), 	pg_advisory_lock_shared(2), pg_advisory_lock_shared(2), 	pg_advisory_lock(1, 1), pg_advisory_lock(1, 1), 	pg_advisory_lock_shared(2, 2), pg_advisory_lock_shared(2, 2)",advisory_lock.sql,SAME,,"[('', '', '', '', '', '', '', '')]"
postgresql,postgresql,SELECT pg_advisory_unlock_all(),advisory_lock.sql,SAME,,"[('',)]"
postgresql,postgresql,SET extra_float_digits = 0,aggregates.sql,SAME,,[]
postgresql,postgresql,ANALYZE aggtest,aggregates.sql,SAME,,[]
postgresql,postgresql,SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT any_value(v) FROM (VALUES (1), (2), (3)) AS v (v)",aggregates.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT any_value(v) FROM (VALUES (NULL)) AS v (v),aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT any_value(v) FROM (VALUES (NULL), (1), (2)) AS v (v)",aggregates.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT any_value(v) FROM (VALUES (array['hello', 'world'])) AS v (v)",aggregates.sql,SAME,,"[(['hello', 'world'],)]"
postgresql,postgresql,"SELECT avg(b)::numeric(10,3) AS avg_107_943 FROM aggtest",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT sum(a) AS sum_198 FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT sum(b) AS avg_431_773 FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT max(a) AS max_100 FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT max(aggtest.b) AS max_324_78 FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT stddev_pop(b) FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT stddev_samp(b) FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT var_pop(b) FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT var_samp(b) FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT stddev_pop(b::numeric) FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT stddev_samp(b::numeric) FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT var_pop(b::numeric) FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT var_samp(b::numeric) FROM aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT var_pop(1.0::float8), var_samp(2.0::float8)",aggregates.sql,SAME,,"[(0.0, None)]"
postgresql,postgresql,"SELECT stddev_pop(3.0::float8), stddev_samp(4.0::float8)",aggregates.sql,SAME,,"[(0.0, None)]"
postgresql,postgresql,"SELECT var_pop('inf'::float8), var_samp('inf'::float8)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT stddev_pop('inf'::float8), stddev_samp('inf'::float8)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT var_pop('nan'::float8), var_samp('nan'::float8)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT stddev_pop('nan'::float8), stddev_samp('nan'::float8)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT var_pop(1.0::float4), var_samp(2.0::float4)",aggregates.sql,SAME,,"[(0.0, None)]"
postgresql,postgresql,"SELECT stddev_pop(3.0::float4), stddev_samp(4.0::float4)",aggregates.sql,SAME,,"[(0.0, None)]"
postgresql,postgresql,"SELECT var_pop('inf'::float4), var_samp('inf'::float4)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT stddev_pop('inf'::float4), stddev_samp('inf'::float4)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT var_pop('nan'::float4), var_samp('nan'::float4)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT stddev_pop('nan'::float4), stddev_samp('nan'::float4)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT var_pop(1.0::numeric), var_samp(2.0::numeric)",aggregates.sql,SAME,,"[(Decimal('0'), None)]"
postgresql,postgresql,"SELECT stddev_pop(3.0::numeric), stddev_samp(4.0::numeric)",aggregates.sql,SAME,,"[(Decimal('0'), None)]"
postgresql,postgresql,"SELECT var_pop('inf'::numeric), var_samp('inf'::numeric)",aggregates.sql,SAME,,"[(Decimal('NaN'), None)]"
postgresql,postgresql,"SELECT stddev_pop('inf'::numeric), stddev_samp('inf'::numeric)",aggregates.sql,SAME,,"[(Decimal('NaN'), None)]"
postgresql,postgresql,"SELECT var_pop('nan'::numeric), var_samp('nan'::numeric)",aggregates.sql,SAME,,"[(Decimal('NaN'), None)]"
postgresql,postgresql,"SELECT stddev_pop('nan'::numeric), stddev_samp('nan'::numeric)",aggregates.sql,SAME,,"[(Decimal('NaN'), None)]"
postgresql,postgresql,"select sum(null::int4) from generate_series(1,3)",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select sum(null::int8) from generate_series(1,3)",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select sum(null::numeric) from generate_series(1,3)",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select sum(null::float8) from generate_series(1,3)",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select avg(null::int4) from generate_series(1,3)",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select avg(null::int8) from generate_series(1,3)",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select avg(null::numeric) from generate_series(1,3)",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select avg(null::float8) from generate_series(1,3)",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select sum('NaN'::numeric) from generate_series(1,3)",aggregates.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,"select avg('NaN'::numeric) from generate_series(1,3)",aggregates.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,"SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('1'), ('infinity')) v(x)",aggregates.sql,SAME,,"[(inf, inf, nan)]"
postgresql,postgresql,"SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('infinity'), ('1')) v(x)",aggregates.sql,SAME,,"[(inf, inf, nan)]"
postgresql,postgresql,"SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('infinity'), ('infinity')) v(x)",aggregates.sql,SAME,,"[(inf, inf, nan)]"
postgresql,postgresql,"SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('-infinity'), ('infinity')) v(x)",aggregates.sql,SAME,,"[(nan, nan, nan)]"
postgresql,postgresql,"SELECT sum(x::float8), avg(x::float8), var_pop(x::float8) FROM (VALUES ('-infinity'), ('-infinity')) v(x)",aggregates.sql,SAME,,"[(-inf, -inf, nan)]"
postgresql,postgresql,"SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('1'), ('infinity')) v(x)",aggregates.sql,SAME,,"[(Decimal('Infinity'), Decimal('Infinity'), Decimal('NaN'))]"
postgresql,postgresql,"SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('infinity'), ('1')) v(x)",aggregates.sql,SAME,,"[(Decimal('Infinity'), Decimal('Infinity'), Decimal('NaN'))]"
postgresql,postgresql,"SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('infinity'), ('infinity')) v(x)",aggregates.sql,SAME,,"[(Decimal('Infinity'), Decimal('Infinity'), Decimal('NaN'))]"
postgresql,postgresql,"SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('-infinity'), ('infinity')) v(x)",aggregates.sql,SAME,,"[(Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,"SELECT sum(x::numeric), avg(x::numeric), var_pop(x::numeric) FROM (VALUES ('-infinity'), ('-infinity')) v(x)",aggregates.sql,SAME,,"[(Decimal('-Infinity'), Decimal('-Infinity'), Decimal('NaN'))]"
postgresql,postgresql,"SELECT avg(x::float8), var_pop(x::float8) FROM (VALUES (100000003), (100000004), (100000006), (100000007)) v(x)",aggregates.sql,SAME,,"[(100000005.0, 2.5)]"
postgresql,postgresql,"SELECT avg(x::float8), var_pop(x::float8) FROM (VALUES (7000000000005), (7000000000007)) v(x)",aggregates.sql,SAME,,"[(7000000000006.0, 1.0)]"
postgresql,postgresql,"SELECT regr_count(b, a) FROM aggtest",aggregates.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT regr_sxx(b, a) FROM aggtest",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT regr_syy(b, a) FROM aggtest",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT regr_sxy(b, a) FROM aggtest",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT regr_avgx(b, a), regr_avgy(b, a) FROM aggtest",aggregates.sql,SAME,,"[(None, None)]"
postgresql,postgresql,"SELECT regr_r2(b, a) FROM aggtest",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT regr_slope(b, a), regr_intercept(b, a) FROM aggtest",aggregates.sql,SAME,,"[(None, None)]"
postgresql,postgresql,"SELECT covar_pop(b, a), covar_samp(b, a) FROM aggtest",aggregates.sql,SAME,,"[(None, None)]"
postgresql,postgresql,"SELECT corr(b, a) FROM aggtest",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT covar_pop(1::float8,2::float8), covar_samp(3::float8,4::float8)",aggregates.sql,SAME,,"[(0.0, None)]"
postgresql,postgresql,"SELECT covar_pop(1::float8,'inf'::float8), covar_samp(3::float8,'inf'::float8)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT covar_pop(1::float8,'nan'::float8), covar_samp(3::float8,'nan'::float8)",aggregates.sql,SAME,,"[(nan, None)]"
postgresql,postgresql,"SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x) FROM regr_test WHERE x IN (10,20,30,80)",aggregates.sql,SAME,,"[(4, 140.0, 2900.0, 1290.0, 83075.0, 15050.0)]"
postgresql,postgresql,"SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x) FROM regr_test",aggregates.sql,SAME,,"[(5, 240.0, 6280.0, 1490.0, 95080.0, 8680.0)]"
postgresql,postgresql,"SELECT float8_accum('{4,140,2900}'::float8[], 100)",aggregates.sql,SAME,,"[([5.0, 240.0, 6280.0],)]"
postgresql,postgresql,"SELECT float8_regr_accum('{4,140,2900,1290,83075,15050}'::float8[], 200, 100)",aggregates.sql,SAME,,"[([5.0, 240.0, 6280.0, 1490.0, 95080.0, 8680.0],)]"
postgresql,postgresql,"SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x) FROM regr_test WHERE x IN (10,20,30)",aggregates.sql,SAME,,"[(3, 60.0, 200.0, 750.0, 20000.0, 2000.0)]"
postgresql,postgresql,"SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x) FROM regr_test WHERE x IN (80,100)",aggregates.sql,SAME,,"[(2, 180.0, 200.0, 740.0, 57800.0, -3400.0)]"
postgresql,postgresql,"SELECT float8_combine('{3,60,200}'::float8[], '{0,0,0}'::float8[])",aggregates.sql,SAME,,"[([3.0, 60.0, 200.0],)]"
postgresql,postgresql,"SELECT float8_combine('{0,0,0}'::float8[], '{2,180,200}'::float8[])",aggregates.sql,SAME,,"[([2.0, 180.0, 200.0],)]"
postgresql,postgresql,"SELECT float8_combine('{3,60,200}'::float8[], '{2,180,200}'::float8[])",aggregates.sql,SAME,,"[([5.0, 240.0, 6280.0],)]"
postgresql,postgresql,"SELECT float8_regr_combine('{3,60,200,750,20000,2000}'::float8[],                            '{0,0,0,0,0,0}'::float8[])",aggregates.sql,SAME,,"[([3.0, 60.0, 200.0, 750.0, 20000.0, 2000.0],)]"
postgresql,postgresql,"SELECT float8_regr_combine('{0,0,0,0,0,0}'::float8[],                            '{2,180,200,740,57800,-3400}'::float8[])",aggregates.sql,SAME,,"[([2.0, 180.0, 200.0, 740.0, 57800.0, -3400.0],)]"
postgresql,postgresql,"SELECT float8_regr_combine('{3,60,200,750,20000,2000}'::float8[],                            '{2,180,200,740,57800,-3400}'::float8[])",aggregates.sql,SAME,,"[([5.0, 240.0, 6280.0, 1490.0, 95080.0, 8680.0],)]"
postgresql,postgresql,"explain (verbose, costs off) select s1, s2, sm from generate_series(1, 3) s1,      lateral (select s2, sum(s1 + s2) sm               from generate_series(1, 3) s2 group by s2) ss order by 1, 2",aggregates.sql,SAME,,"[('Sort',), ('  Output: s1.s1, s2.s2, (sum((s1.s1 + s2.s2)))',), ('  Sort Key: s1.s1, s2.s2',), ('  ->  Nested Loop',), ('        Output: s1.s1, s2.s2, (sum((s1.s1 + s2.s2)))',), ('        ->  Function Scan on pg_catalog.generate_series s1',), ('              Output: s1.s1',), ('              Function Call: generate_series(1, 3)',), ('        ->  HashAggregate',), ('              Output: s2.s2, sum((s1.s1 + s2.s2))',), ('              Group Key: s2.s2',), ('              ->  Function Scan on pg_catalog.generate_series s2',), ('                    Output: s2.s2',), ('                    Function Call: generate_series(1, 3)',)]"
postgresql,postgresql,"select s1, s2, sm from generate_series(1, 3) s1,      lateral (select s2, sum(s1 + s2) sm               from generate_series(1, 3) s2 group by s2) ss order by 1, 2",aggregates.sql,SAME,,"[(1, 1, 2), (1, 2, 3), (1, 3, 4), (2, 1, 3), (2, 2, 4), (2, 3, 5), (3, 1, 4), (3, 2, 5), (3, 3, 6)]"
postgresql,postgresql,"explain (verbose, costs off) select array(select sum(x+y) s             from generate_series(1,3) y group by y order by s)   from generate_series(1,3) x",aggregates.sql,SAME,,"[('Function Scan on pg_catalog.generate_series x',), ('  Output: (SubPlan 1)',), ('  Function Call: generate_series(1, 3)',), ('  SubPlan 1',), ('    ->  Sort',), ('          Output: (sum((x.x + y.y))), y.y',), ('          Sort Key: (sum((x.x + y.y)))',), ('          ->  HashAggregate',), ('                Output: sum((x.x + y.y)), y.y',), ('                Group Key: y.y',), ('                ->  Function Scan on pg_catalog.generate_series y',), ('                      Output: y.y',), ('                      Function Call: generate_series(1, 3)',)]"
postgresql,postgresql,"select array(select sum(x+y) s             from generate_series(1,3) y group by y order by s)   from generate_series(1,3) x",aggregates.sql,SAME,,"[([2, 3, 4],), ([3, 4, 5],), ([4, 5, 6],)]"
postgresql,postgresql,"CREATE TEMPORARY TABLE bitwise_test(   i2 INT2,   i4 INT4,   i8 INT8,   i INTEGER,   x INT2,   y BIT(4) )",aggregates.sql,SAME,,[]
postgresql,postgresql,"SELECT   BIT_AND(i2) AS ""?"",   BIT_OR(i4)  AS ""?"",   BIT_XOR(i8) AS ""?"" FROM bitwise_test",aggregates.sql,SAME,,"[(None, None, None)]"
postgresql,postgresql,"SELECT   booland_statefunc(NULL, NULL)  IS NULL AS ""t"",   booland_statefunc(TRUE, NULL)  IS NULL AS ""t"",   booland_statefunc(FALSE, NULL) IS NULL AS ""t"",   booland_statefunc(NULL, TRUE)  IS NULL AS ""t"",   booland_statefunc(NULL, FALSE) IS NULL AS ""t"",   booland_statefunc(TRUE, TRUE) AS ""t"",   NOT booland_statefunc(TRUE, FALSE) AS ""t"",   NOT booland_statefunc(FALSE, TRUE) AS ""t"",   NOT booland_statefunc(FALSE, FALSE) AS ""t""",aggregates.sql,SAME,,"[(True, True, True, True, True, True, True, True, True)]"
postgresql,postgresql,"SELECT   boolor_statefunc(NULL, NULL)  IS NULL AS ""t"",   boolor_statefunc(TRUE, NULL)  IS NULL AS ""t"",   boolor_statefunc(FALSE, NULL) IS NULL AS ""t"",   boolor_statefunc(NULL, TRUE)  IS NULL AS ""t"",   boolor_statefunc(NULL, FALSE) IS NULL AS ""t"",   boolor_statefunc(TRUE, TRUE) AS ""t"",   boolor_statefunc(TRUE, FALSE) AS ""t"",   boolor_statefunc(FALSE, TRUE) AS ""t"",   NOT boolor_statefunc(FALSE, FALSE) AS ""t""",aggregates.sql,SAME,,"[(True, True, True, True, True, True, True, True, True)]"
postgresql,postgresql,"CREATE TEMPORARY TABLE bool_test(   b1 BOOL,   b2 BOOL,   b3 BOOL,   b4 BOOL)",aggregates.sql,SAME,,[]
postgresql,postgresql,"SELECT   BOOL_AND(b1)   AS ""n"",   BOOL_OR(b3)    AS ""n"" FROM bool_test",aggregates.sql,SAME,,"[(None, None)]"
postgresql,postgresql,"SELECT   EVERY(b1)     AS ""f"",   EVERY(b2)     AS ""t"",   EVERY(b3)     AS ""f"",   EVERY(b4)     AS ""n"",   EVERY(NOT b2) AS ""f"",   EVERY(NOT b3) AS ""t"" FROM bool_test",aggregates.sql,SAME,,"[(None, None, None, None, None, None)]"
postgresql,postgresql,"SELECT   BOOL_OR(b1)      AS ""t"",   BOOL_OR(b2)      AS ""t"",   BOOL_OR(b3)      AS ""f"",   BOOL_OR(b4)      AS ""n"",   BOOL_OR(NOT b2)  AS ""f"",   BOOL_OR(NOT b3)  AS ""t"" FROM bool_test",aggregates.sql,SAME,,"[(None, None, None, None, None, None)]"
postgresql,postgresql,begin,aggregates.sql,SAME,,[]
postgresql,postgresql,set local max_parallel_workers_per_gather = 0,aggregates.sql,SAME,,[]
postgresql,postgresql,rollback,aggregates.sql,SAME,,[]
postgresql,postgresql,create index minmaxtesti on minmaxtest(f1),aggregates.sql,SAME,,[]
postgresql,postgresql,create index minmaxtest1i on minmaxtest1(f1),aggregates.sql,SAME,,[]
postgresql,postgresql,create index minmaxtest2i on minmaxtest2(f1 desc),aggregates.sql,SAME,,[]
postgresql,postgresql,create index minmaxtest3i on minmaxtest3(f1) where f1 is not null,aggregates.sql,SAME,,[]
postgresql,postgresql,"explain (costs off)   select min(f1), max(f1) from minmaxtest",aggregates.sql,SAME,,"[('Result',), ('  InitPlan 1 (returns $0)',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: minmaxtest.f1',), ('                ->  Index Only Scan using minmaxtesti on minmaxtest minmaxtest_1',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest1i on minmaxtest1 minmaxtest_2',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest2i on minmaxtest2 minmaxtest_3',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest3i on minmaxtest3 minmaxtest_4',), ('  InitPlan 2 (returns $1)',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: minmaxtest_5.f1 DESC',), ('                ->  Index Only Scan Backward using minmaxtesti on minmaxtest minmaxtest_6',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest1i on minmaxtest1 minmaxtest_7',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest2i on minmaxtest2 minmaxtest_8',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest3i on minmaxtest3 minmaxtest_9',)]"
postgresql,postgresql,"select min(f1), max(f1) from minmaxtest",aggregates.sql,SAME,,"[(11, 18)]"
postgresql,postgresql,"explain (costs off)   select distinct min(f1), max(f1) from minmaxtest",aggregates.sql,SAME,,"[('Unique',), ('  InitPlan 1 (returns $0)',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: minmaxtest.f1',), ('                ->  Index Only Scan using minmaxtesti on minmaxtest minmaxtest_1',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest1i on minmaxtest1 minmaxtest_2',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest2i on minmaxtest2 minmaxtest_3',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest3i on minmaxtest3 minmaxtest_4',), ('  InitPlan 2 (returns $1)',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: minmaxtest_5.f1 DESC',), ('                ->  Index Only Scan Backward using minmaxtesti on minmaxtest minmaxtest_6',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest1i on minmaxtest1 minmaxtest_7',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan using minmaxtest2i on minmaxtest2 minmaxtest_8',), ('                      Index Cond: (f1 IS NOT NULL)',), ('                ->  Index Only Scan Backward using minmaxtest3i on minmaxtest3 minmaxtest_9',), ('  ->  Sort',), ('        Sort Key: ($0), ($1)',), ('        ->  Result',)]"
postgresql,postgresql,"select distinct min(f1), max(f1) from minmaxtest",aggregates.sql,SAME,,"[(11, 18)]"
postgresql,postgresql,"create temp table t1 (a int, b int, c int, d int, primary key (a, b))",aggregates.sql,SAME,,[]
postgresql,postgresql,"create temp table t2 (x int, y int, z int, primary key (x, y))",aggregates.sql,SAME,,[]
postgresql,postgresql,"create temp table t3 (a int, b int, c int, primary key(a, b) deferrable)",aggregates.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from t1 group by a,b,c,d",aggregates.sql,SAME,,"[('HashAggregate',), ('  Group Key: a, b',), ('  ->  Seq Scan on t1',)]"
postgresql,postgresql,"explain (costs off) select a,c from t1 group by a,c,d",aggregates.sql,SAME,,"[('HashAggregate',), ('  Group Key: a, c, d',), ('  ->  Seq Scan on t1',)]"
postgresql,postgresql,"explain (costs off) select * from t1 inner join t2 on t1.a = t2.x and t1.b = t2.y group by t1.a,t1.b,t1.c,t1.d,t2.x,t2.y,t2.z",aggregates.sql,SAME,,"[('HashAggregate',), ('  Group Key: t1.a, t1.b',), ('  ->  Hash Join',), ('        Hash Cond: ((t2.x = t1.a) AND (t2.y = t1.b))',), ('        ->  Seq Scan on t2',), ('        ->  Hash',), ('              ->  Seq Scan on t1',)]"
postgresql,postgresql,"explain (costs off) select t1.*,t2.x,t2.z from t1 inner join t2 on t1.a = t2.x and t1.b = t2.y group by t1.a,t1.b,t1.c,t1.d,t2.x,t2.z",aggregates.sql,SAME,,"[('HashAggregate',), ('  Group Key: t1.a, t1.b, t2.z',), ('  ->  Hash Join',), ('        Hash Cond: ((t2.x = t1.a) AND (t2.y = t1.b))',), ('        ->  Seq Scan on t2',), ('        ->  Hash',), ('              ->  Seq Scan on t1',)]"
postgresql,postgresql,"explain (costs off) select * from t3 group by a,b,c",aggregates.sql,SAME,,"[('HashAggregate',), ('  Group Key: a, b, c',), ('  ->  Seq Scan on t3',)]"
postgresql,postgresql,create temp table t1c () inherits (t1),aggregates.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from t1 group by a,b,c,d",aggregates.sql,SAME,,"[('HashAggregate',), ('  Group Key: t1.a, t1.b, t1.c, t1.d',), ('  ->  Append',), ('        ->  Seq Scan on t1 t1_1',), ('        ->  Seq Scan on t1c t1_2',)]"
postgresql,postgresql,"explain (costs off) select * from only t1 group by a,b,c,d",aggregates.sql,SAME,,"[('HashAggregate',), ('  Group Key: a, b',), ('  ->  Seq Scan on t1',)]"
postgresql,postgresql,"create temp table p_t1 (   a int,   b int,   c int,   d int,   primary key(a,b) ) partition by list(a)",aggregates.sql,SAME,,[]
postgresql,postgresql,create temp table p_t1_1 partition of p_t1 for values in(1),aggregates.sql,SAME,,[]
postgresql,postgresql,create temp table p_t1_2 partition of p_t1 for values in(2),aggregates.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from p_t1 group by a,b,c,d",aggregates.sql,SAME,,"[('HashAggregate',), ('  Group Key: p_t1.a, p_t1.b',), ('  ->  Append',), ('        ->  Seq Scan on p_t1_1',), ('        ->  Seq Scan on p_t1_2',)]"
postgresql,postgresql,"create temp table t1(f1 int, f2 int)",aggregates.sql,SAME,,[]
postgresql,postgresql,"create temp table t2(f1 bigint, f2 oid)",aggregates.sql,SAME,,[]
postgresql,postgresql,select f1 from t1 left join t2 using (f1) group by f1,aggregates.sql,SAME,,[]
postgresql,postgresql,select f1 from t1 left join t2 using (f1) group by t1.f1,aggregates.sql,SAME,,[]
postgresql,postgresql,select t1.f1 from t1 left join t2 using (f1) group by t1.f1,aggregates.sql,SAME,,[]
postgresql,postgresql,"select f1, count(*) from t1 x(x0,x1) left join (t1 left join t2 using(f1)) on (x0 = 0) group by f1",aggregates.sql,SAME,,[]
postgresql,postgresql,"select f2, count(*) from t1 x(x0,x1) left join (t1 left join t2 using(f2)) on (x0 = 0) group by f2",aggregates.sql,SAME,,[]
postgresql,postgresql,"select array_agg(distinct val) from (select null as val from generate_series(1, 2))",aggregates.sql,SAME,,"[([None],)]"
postgresql,postgresql,set enable_presorted_aggregate to off,aggregates.sql,SAME,,[]
postgresql,postgresql,reset enable_presorted_aggregate,aggregates.sql,SAME,,[]
postgresql,postgresql,"select array_agg(a order by b)   from (values (1,4),(2,3),(3,1),(4,2)) v(a,b)",aggregates.sql,SAME,,"[([3, 4, 2, 1],)]"
postgresql,postgresql,"select array_agg(a order by a)   from (values (1,4),(2,3),(3,1),(4,2)) v(a,b)",aggregates.sql,SAME,,"[([1, 2, 3, 4],)]"
postgresql,postgresql,"select array_agg(a order by a desc)   from (values (1,4),(2,3),(3,1),(4,2)) v(a,b)",aggregates.sql,SAME,,"[([4, 3, 2, 1],)]"
postgresql,postgresql,"select array_agg(b order by a desc)   from (values (1,4),(2,3),(3,1),(4,2)) v(a,b)",aggregates.sql,SAME,,"[([2, 1, 3, 4],)]"
postgresql,postgresql,"select array_agg(distinct a)   from (values (1),(2),(1),(3),(null),(2)) v(a)",aggregates.sql,SAME,,"[([1, 2, 3, None],)]"
postgresql,postgresql,"select array_agg(distinct a order by a)   from (values (1),(2),(1),(3),(null),(2)) v(a)",aggregates.sql,SAME,,"[([1, 2, 3, None],)]"
postgresql,postgresql,"select array_agg(distinct a order by a desc)   from (values (1),(2),(1),(3),(null),(2)) v(a)",aggregates.sql,SAME,,"[([None, 3, 2, 1],)]"
postgresql,postgresql,"select array_agg(distinct a order by a desc nulls last)   from (values (1),(2),(1),(3),(null),(2)) v(a)",aggregates.sql,SAME,,"[([3, 2, 1, None],)]"
postgresql,postgresql,"select     string_agg(distinct 'a', ','),     sum((         select sum(1)         from (values(1)) b(id)         where a.id = b.id )) from unnest(array[1]) a(id)",aggregates.sql,SAME,,"[('a', Decimal('1'))]"
postgresql,postgresql,"select string_agg(a,',') from (values('aaaa'),('bbbb'),('cccc')) g(a)",aggregates.sql,SAME,,"[('aaaa,bbbb,cccc',)]"
postgresql,postgresql,"select string_agg(a,',') from (values('aaaa'),(null),('bbbb'),('cccc')) g(a)",aggregates.sql,SAME,,"[('aaaa,bbbb,cccc',)]"
postgresql,postgresql,"select string_agg(a,'AB') from (values(null),(null),('bbbb'),('cccc')) g(a)",aggregates.sql,SAME,,"[('bbbbABcccc',)]"
postgresql,postgresql,"select string_agg(a,',') from (values(null),(null)) g(a)",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select string_agg(v, '') from bytea_test_table",aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select string_agg(v, '') from bytea_test_table",aggregates.sql,SAME,,"[(<memory at 0x126577880>,)]"
postgresql,postgresql,"select string_agg(v, '') from bytea_test_table",aggregates.sql,SAME,,"[(<memory at 0x126577b80>,)]"
postgresql,postgresql,"select string_agg(v, NULL) from bytea_test_table",aggregates.sql,SAME,,"[(<memory at 0x126577c40>,)]"
postgresql,postgresql,"select string_agg(v, decode('ee', 'hex')) from bytea_test_table",aggregates.sql,SAME,,"[(<memory at 0x126577d00>,)]"
postgresql,postgresql,set parallel_setup_cost TO 0,aggregates.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost TO 0,aggregates.sql,SAME,,[]
postgresql,postgresql,set parallel_leader_participation TO 0,aggregates.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size = 0,aggregates.sql,SAME,,[]
postgresql,postgresql,set bytea_output = 'escape',aggregates.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather = 2,aggregates.sql,SAME,,[]
postgresql,postgresql,"create view v_pagg_test AS select 	y, 	min(t) AS tmin,max(t) AS tmax,count(distinct t) AS tndistinct, 	min(b) AS bmin,max(b) AS bmax,count(distinct b) AS bndistinct, 	min(a) AS amin,max(a) AS amax,count(distinct a) AS andistinct, 	min(aa) AS aamin,max(aa) AS aamax,count(distinct aa) AS aandistinct from ( 	select 		y, 		unnest(regexp_split_to_array(a1.t, ','))::int AS t, 		unnest(regexp_split_to_array(a1.b::text, ',')) AS b, 		unnest(a1.a) AS a, 		unnest(a1.aa) AS aa 	from ( 		select 			y, 			string_agg(x::text, ',') AS t, 			string_agg(x::text::bytea, ',') AS b, 			array_agg(x) AS a, 			array_agg(ARRAY[x]) AS aa 		from pagg_test 		group by y 	) a1 ) a2 group by y",aggregates.sql,SAME,,[]
postgresql,postgresql,select * from v_pagg_test order by y,aggregates.sql,SAME,,"[(0, 10, 5000, 500, '10', '990', 500, 10, 5000, 500, 10, 5000, 500), (1, 11, 4991, 250, '1011', '991', 250, 11, 4991, 250, 11, 4991, 250), (2, 2, 4992, 500, '1002', '992', 500, 2, 4992, 500, 2, 4992, 500), (3, 3, 4983, 250, '1003', '983', 250, 3, 4983, 250, 3, 4983, 250), (4, 4, 4994, 500, '1004', '994', 500, 4, 4994, 500, 4, 4994, 500), (5, 15, 4995, 250, '1015', '995', 250, 15, 4995, 250, 15, 4995, 250), (6, 6, 4996, 500, '1006', '996', 500, 6, 4996, 500, 6, 4996, 500), (7, 7, 4987, 250, '1007', '987', 250, 7, 4987, 250, 7, 4987, 250), (8, 8, 4998, 500, '1008', '998', 500, 8, 4998, 500, 8, 4998, 500), (9, 19, 4999, 250, '1019', '999', 250, 19, 4999, 250, 19, 4999, 250)]"
postgresql,postgresql,explain (costs off) select * from v_pagg_test order by y,aggregates.sql,SAME,,"[('GroupAggregate',), ('  Group Key: pagg_test.y',), ('  ->  Sort',), (""        Sort Key: pagg_test.y, (((unnest(regexp_split_to_array((string_agg((pagg_test.x)::text, ','::text)), ','::text))))::integer)"",), ('        ->  Result',), ('              ->  ProjectSet',), ('                    ->  Finalize HashAggregate',), ('                          Group Key: pagg_test.y',), ('                          ->  Gather',), ('                                Workers Planned: 2',), ('                                ->  Partial HashAggregate',), ('                                      Group Key: pagg_test.y',), ('                                      ->  Parallel Seq Scan on pagg_test',)]"
postgresql,postgresql,set max_parallel_workers_per_gather = 0,aggregates.sql,SAME,,[]
postgresql,postgresql,select * from v_pagg_test order by y,aggregates.sql,SAME,,"[(0, 10, 5000, 500, '10', '990', 500, 10, 5000, 500, 10, 5000, 500), (1, 11, 4991, 250, '1011', '991', 250, 11, 4991, 250, 11, 4991, 250), (2, 2, 4992, 500, '1002', '992', 500, 2, 4992, 500, 2, 4992, 500), (3, 3, 4983, 250, '1003', '983', 250, 3, 4983, 250, 3, 4983, 250), (4, 4, 4994, 500, '1004', '994', 500, 4, 4994, 500, 4, 4994, 500), (5, 15, 4995, 250, '1015', '995', 250, 15, 4995, 250, 15, 4995, 250), (6, 6, 4996, 500, '1006', '996', 500, 6, 4996, 500, 6, 4996, 500), (7, 7, 4987, 250, '1007', '987', 250, 7, 4987, 250, 7, 4987, 250), (8, 8, 4998, 500, '1008', '998', 500, 8, 4998, 500, 8, 4998, 500), (9, 19, 4999, 250, '1019', '999', 250, 19, 4999, 250, 19, 4999, 250)]"
postgresql,postgresql,reset max_parallel_workers_per_gather,aggregates.sql,SAME,,[]
postgresql,postgresql,reset bytea_output,aggregates.sql,SAME,,[]
postgresql,postgresql,reset min_parallel_table_scan_size,aggregates.sql,SAME,,[]
postgresql,postgresql,reset parallel_leader_participation,aggregates.sql,SAME,,[]
postgresql,postgresql,reset parallel_tuple_cost,aggregates.sql,SAME,,[]
postgresql,postgresql,reset parallel_setup_cost,aggregates.sql,SAME,,[]
postgresql,postgresql,drop view v_pagg_test,aggregates.sql,SAME,,[]
postgresql,postgresql,"select max(foo COLLATE ""C"") filter (where (bar collate ""POSIX"") > '0') from (values ('a', 'b')) AS v(foo,bar)",aggregates.sql,SAME,,"[('a',)]"
postgresql,postgresql,"select any_value(v) filter (where v > 2) from (values (1), (2), (3)) as v (v)",aggregates.sql,SAME,,"[(3,)]"
postgresql,postgresql,"select (select count(*)         from (values (1)) t0(inner_c)) from (values (2),(3)) t1(outer_c)",aggregates.sql,SAME,,"[(1,), (1,)]"
postgresql,postgresql,"select (select count(*) filter (where outer_c <> 0)         from (values (1)) t0(inner_c)) from (values (2),(3)) t1(outer_c)",aggregates.sql,SAME,,"[(2,)]"
postgresql,postgresql,"select (select count(inner_c) filter (where outer_c <> 0)         from (values (1)) t0(inner_c)) from (values (2),(3)) t1(outer_c)",aggregates.sql,SAME,,"[(1,), (1,)]"
postgresql,postgresql,select max(0) filter (where b1) from bool_test,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,select (select max(0) filter (where b1)) from bool_test,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select p, percentile_cont(p) within group (order by x::float8) from generate_series(1,5) x,      (values (0::float8),(0.1),(0.25),(0.4),(0.5),(0.6),(0.75),(0.9),(1)) v(p) group by p order by p",aggregates.sql,SAME,,"[(0.0, 1.0), (0.1, 1.4), (0.25, 2.0), (0.4, 2.6), (0.5, 3.0), (0.6, 3.4), (0.75, 4.0), (0.9, 4.6), (1.0, 5.0)]"
postgresql,postgresql,select percentile_cont(0.5) within group (order by b) from aggtest,aggregates.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select percentile_cont(0.5) within group (order by b), sum(b) from aggtest",aggregates.sql,SAME,,"[(None, None)]"
postgresql,postgresql,"select rank(3) within group (order by x) from (values (1),(1),(2),(2),(3),(3),(4)) v(x)",aggregates.sql,SAME,,"[(5,)]"
postgresql,postgresql,"select cume_dist(3) within group (order by x) from (values (1),(1),(2),(2),(3),(3),(4)) v(x)",aggregates.sql,SAME,,"[(0.875,)]"
postgresql,postgresql,"select percent_rank(3) within group (order by x) from (values (1),(1),(2),(2),(3),(3),(4),(5)) v(x)",aggregates.sql,SAME,,"[(0.5,)]"
postgresql,postgresql,"select dense_rank(3) within group (order by x) from (values (1),(1),(2),(2),(3),(3),(4)) v(x)",aggregates.sql,SAME,,"[(3,)]"
postgresql,postgresql,"select percentile_cont(array[0,1,0.25,0.75,0.5,1,0.3,0.32,0.35,0.38,0.4]) within group (order by x) from generate_series(1,6) x",aggregates.sql,SAME,,"[([1.0, 6.0, 2.25, 4.75, 3.5, 6.0, 2.5, 2.6, 2.75, 2.9, 3.0],)]"
postgresql,postgresql,"select percentile_disc(array[0.25,0.5,0.75]) within group (order by x) from unnest('{fred,jim,fred,jack,jill,fred,jill,jim,jim,sheila,jim,sheila}'::text[]) u(x)",aggregates.sql,SAME,,"[(['fred', 'jill', 'jim'],)]"
postgresql,postgresql,"select pg_collation_for(percentile_disc(1) within group (order by x collate ""POSIX""))   from (values ('fred'),('jim')) v(x)",aggregates.sql,SAME,,"[('""POSIX""',)]"
postgresql,postgresql,"select rank('adam'::varchar) within group (order by x) from (values ('fred'),('jim')) v(x)",aggregates.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select rank('3') within group (order by x) from generate_series(1,5) x",aggregates.sql,SAME,,"[(3,)]"
postgresql,postgresql,"select percent_rank(0) within group (order by x) from generate_series(1,0) x",aggregates.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,begin work,aggregates.sql,SAME,,[]
postgresql,postgresql,"create type avg_state as (total bigint, count bigint)",aggregates.sql,SAME,,[]
postgresql,postgresql,rollback,aggregates.sql,SAME,,[]
postgresql,postgresql,begin work,aggregates.sql,SAME,,[]
postgresql,postgresql,rollback,aggregates.sql,SAME,,[]
postgresql,postgresql,BEGIN,aggregates.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,aggregates.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX btg_x_y_idx ON btg(x, y)",aggregates.sql,SAME,,[]
postgresql,postgresql,ANALYZE btg,aggregates.sql,SAME,,[]
postgresql,postgresql,SET enable_hashagg = off,aggregates.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,aggregates.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM btg GROUP BY y, x",aggregates.sql,SAME,,"[('GroupAggregate',), ('  Group Key: y, x',), ('  ->  Sort',), ('        Sort Key: y, x',), ('        ->  Index Only Scan using btg_x_y_idx on btg',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM btg GROUP BY z, y, w, x",aggregates.sql,SAME,,"[('GroupAggregate',), ('  Group Key: z, y, w, x',), ('  ->  Sort',), ('        Sort Key: z, y, w, x',), ('        ->  Seq Scan on btg',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM (SELECT * FROM btg ORDER BY x, y, w, z) AS q1 GROUP BY w, x, z, y",aggregates.sql,SAME,,"[('GroupAggregate',), ('  Group Key: q1.w, q1.x, q1.z, q1.y',), ('  ->  Sort',), ('        Sort Key: q1.w, q1.x, q1.z, q1.y',), ('        ->  Subquery Scan on q1',), ('              ->  Incremental Sort',), ('                    Sort Key: btg.x, btg.y, btg.w, btg.z',), ('                    Presorted Key: btg.x, btg.y',), ('                    ->  Index Scan using btg_x_y_idx on btg',)]"
postgresql,postgresql,SET enable_hashjoin = off,aggregates.sql,SAME,,[]
postgresql,postgresql,SET enable_nestloop = off,aggregates.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*)   FROM btg t1 JOIN btg t2 ON t1.z = t2.z AND t1.w = t2.w AND t1.x = t2.x   GROUP BY t1.x, t1.y, t1.z, t1.w",aggregates.sql,SAME,,"[('GroupAggregate',), ('  Group Key: t1.x, t1.y, t1.z, t1.w',), ('  ->  Incremental Sort',), ('        Sort Key: t1.x, t1.y, t1.z, t1.w',), ('        Presorted Key: t1.x',), ('        ->  Merge Join',), ('              Merge Cond: ((t1.x = t2.x) AND (t1.z = t2.z) AND (t1.w = t2.w))',), ('              ->  Sort',), ('                    Sort Key: t1.x, t1.z, t1.w',), ('                    ->  Index Scan using btg_x_y_idx on btg t1',), ('              ->  Sort',), ('                    Sort Key: t2.x, t2.z, t2.w',), ('                    ->  Index Scan using btg_x_y_idx on btg t2',)]"
postgresql,postgresql,RESET enable_nestloop,aggregates.sql,SAME,,[]
postgresql,postgresql,RESET enable_hashjoin,aggregates.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM btg GROUP BY w, x, z, y ORDER BY y, x, z, w",aggregates.sql,SAME,,"[('GroupAggregate',), ('  Group Key: y, x, z, w',), ('  ->  Sort',), ('        Sort Key: y, x, z, w',), ('        ->  Seq Scan on btg',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM btg GROUP BY w, x, y, z ORDER BY x*x, z",aggregates.sql,SAME,,"[('Sort',), ('  Sort Key: ((x * x)), z',), ('  ->  GroupAggregate',), ('        Group Key: w, x, y, z',), ('        ->  Sort',), ('              Sort Key: w, x, y, z',), ('              ->  Seq Scan on btg',)]"
postgresql,postgresql,"CREATE INDEX btg_y_x_w_idx ON btg(y, x, w)",aggregates.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT y, x, array_agg(distinct w)   FROM btg WHERE y < 0 GROUP BY x, y",aggregates.sql,SAME,,"[('GroupAggregate',), ('  Output: y, x, array_agg(DISTINCT w)',), ('  Group Key: btg.x, btg.y',), ('  ->  Sort',), ('        Output: y, x, w',), ('        Sort Key: btg.x, btg.y, btg.w',), ('        ->  Index Only Scan using btg_y_x_w_idx on public.btg',), ('              Output: y, x, w',), ('              Index Cond: (btg.y < 0)',)]"
postgresql,postgresql,ANALYZE group_agg_pk,aggregates.sql,SAME,,[]
postgresql,postgresql,SET enable_nestloop = off,aggregates.sql,SAME,,[]
postgresql,postgresql,SET enable_hashjoin = off,aggregates.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT avg(c1.f ORDER BY c1.x, c1.y) FROM group_agg_pk c1 JOIN group_agg_pk c2 ON c1.x = c2.x GROUP BY c1.w, c1.z",aggregates.sql,SAME,,"[('GroupAggregate',), ('  Group Key: c1.w, c1.z',), ('  ->  Sort',), ('        Sort Key: c1.w, c1.z, c1.x, c1.y',), ('        ->  Merge Join',), ('              Merge Cond: (c1.x = c2.x)',), ('              ->  Sort',), ('                    Sort Key: c1.x',), ('                    ->  Seq Scan on group_agg_pk c1',), ('              ->  Sort',), ('                    Sort Key: c2.x',), ('                    ->  Seq Scan on group_agg_pk c2',)]"
postgresql,postgresql,"SELECT avg(c1.f ORDER BY c1.x, c1.y) FROM group_agg_pk c1 JOIN group_agg_pk c2 ON c1.x = c2.x GROUP BY c1.w, c1.z",aggregates.sql,SAME,,"[(Decimal('4.0000000000000000'),), (Decimal('5.0000000000000000'),)]"
postgresql,postgresql,RESET enable_nestloop,aggregates.sql,SAME,,[]
postgresql,postgresql,RESET enable_hashjoin,aggregates.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX agg_sort_order_c2_idx ON agg_sort_order(c2),aggregates.sql,SAME,,[]
postgresql,postgresql,ANALYZE agg_sort_order,aggregates.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT array_agg(c1 ORDER BY c2),c2 FROM agg_sort_order WHERE c2 < 100 GROUP BY c1 ORDER BY 2",aggregates.sql,SAME,,"[('Sort',), ('  Sort Key: c2',), ('  ->  GroupAggregate',), ('        Group Key: c1',), ('        ->  Incremental Sort',), ('              Sort Key: c1, c2',), ('              Presorted Key: c1',), ('              ->  Index Scan using agg_sort_order_pkey on agg_sort_order',), ('                    Filter: (c2 < 100)',)]"
postgresql,postgresql,RESET enable_hashagg,aggregates.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,aggregates.sql,SAME,,[]
postgresql,postgresql,BEGIN,aggregates.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION balkifnull(int8, int8) RETURNS int8 PARALLEL SAFE STRICT LANGUAGE plpgsql AS $$ BEGIN     IF $1 IS NULL THEN        RAISE 'erroneously called with NULL argument';     END IF;     RETURN NULL; END$$",aggregates.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE balk(int4) (     SFUNC = int4_sum(int8, int4),     STYPE = int8,     COMBINEFUNC = balkifnull(int8, int8),     PARALLEL = SAFE,     INITCOND = '0' )",aggregates.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,aggregates.sql,SAME,,[]
postgresql,postgresql,BEGIN,aggregates.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION rwagg_sfunc(x anyarray, y anyarray) RETURNS anyarray LANGUAGE plpgsql IMMUTABLE AS $$ BEGIN     RETURN array_fill(y[1], ARRAY[4]); END; $$",aggregates.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION rwagg_finalfunc(x anyarray) RETURNS anyarray LANGUAGE plpgsql STRICT IMMUTABLE AS $$ DECLARE     res x%TYPE; BEGIN     res := array_fill(x[1], ARRAY[4]);     RETURN res; END; $$",aggregates.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE rwagg(anyarray) (     STYPE = anyarray,     SFUNC = rwagg_sfunc,     FINALFUNC = rwagg_finalfunc )",aggregates.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION eatarray(x real[]) RETURNS real[] LANGUAGE plpgsql STRICT IMMUTABLE AS $$ BEGIN     x[1] := x[1] + 1;     RETURN x; END; $$,aggregates.sql,SAME,,[]
postgresql,postgresql,"SELECT eatarray(rwagg(ARRAY[1.0::real])), eatarray(rwagg(ARRAY[1.0::real]))",aggregates.sql,SAME,,"[([2.0, 1.0, 1.0, 1.0], [2.0, 1.0, 1.0, 1.0])]"
postgresql,postgresql,ROLLBACK,aggregates.sql,SAME,,[]
postgresql,postgresql,BEGIN,aggregates.sql,SAME,,[]
postgresql,postgresql,SET parallel_setup_cost = 0,aggregates.sql,SAME,,[]
postgresql,postgresql,SET parallel_tuple_cost = 0,aggregates.sql,SAME,,[]
postgresql,postgresql,SET min_parallel_table_scan_size = 0,aggregates.sql,SAME,,[]
postgresql,postgresql,SET max_parallel_workers_per_gather = 4,aggregates.sql,SAME,,[]
postgresql,postgresql,SET parallel_leader_participation = off,aggregates.sql,SAME,,[]
postgresql,postgresql,SET enable_indexonlyscan = off,aggregates.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,aggregates.sql,SAME,,[]
postgresql,postgresql,"SELECT dense_rank(x) WITHIN GROUP (ORDER BY x) FROM (VALUES (1),(1),(2),(2),(3),(3)) v(x) GROUP BY (x) ORDER BY 1",aggregates.sql,SAME,,"[(1,), (1,), (1,)]"
postgresql,postgresql,"SELECT min(x ORDER BY y) FROM (VALUES(1, NULL)) AS d(x,y)",aggregates.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT min(x ORDER BY y) FROM (VALUES(1, 2)) AS d(x,y)",aggregates.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select v||'a', case v||'a' when 'aa' then 1 else 0 end, count(*)   from unnest(array['a','b']) u(v)  group by v||'a' order by 1",aggregates.sql,SAME,,"[('aa', 1, 1), ('ba', 0, 1)]"
postgresql,postgresql,"select v||'a', case when v||'a' = 'aa' then 1 else 0 end, count(*)   from unnest(array['a','b']) u(v)  group by v||'a' order by 1",aggregates.sql,SAME,,"[('aa', 1, 1), ('ba', 0, 1)]"
postgresql,postgresql,set enable_memoize to off,aggregates.sql,SAME,,[]
postgresql,postgresql,reset enable_memoize,aggregates.sql,SAME,,[]
postgresql,postgresql,set enable_sort=false,aggregates.sql,SAME,,[]
postgresql,postgresql,set work_mem='64kB',aggregates.sql,SAME,,[]
postgresql,postgresql,set work_mem to default,aggregates.sql,SAME,,[]
postgresql,postgresql,set enable_sort to default,aggregates.sql,SAME,,[]
postgresql,postgresql,set work_mem='64kB',aggregates.sql,SAME,,[]
postgresql,postgresql,analyze agg_data_2k,aggregates.sql,SAME,,[]
postgresql,postgresql,analyze agg_data_20k,aggregates.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg = false,aggregates.sql,SAME,,[]
postgresql,postgresql,set jit_above_cost = 0,aggregates.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select g%10000 as c1, sum(g::numeric) as c2, count(*) as c3   from agg_data_20k group by g%10000",aggregates.sql,SAME,,"[('GroupAggregate',), ('  Group Key: ((g % 10000))',), ('  ->  Sort',), ('        Sort Key: ((g % 10000))',), ('        ->  Seq Scan on agg_data_20k',)]"
postgresql,postgresql,set jit_above_cost to default,aggregates.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg = true,aggregates.sql,SAME,,[]
postgresql,postgresql,set enable_sort = false,aggregates.sql,SAME,,[]
postgresql,postgresql,set jit_above_cost = 0,aggregates.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select g%10000 as c1, sum(g::numeric) as c2, count(*) as c3   from agg_data_20k group by g%10000",aggregates.sql,SAME,,"[('HashAggregate',), ('  Group Key: (g % 10000)',), ('  ->  Seq Scan on agg_data_20k',)]"
postgresql,postgresql,set jit_above_cost to default,aggregates.sql,SAME,,[]
postgresql,postgresql,set enable_sort = true,aggregates.sql,SAME,,[]
postgresql,postgresql,set work_mem to default,aggregates.sql,SAME,,[]
postgresql,postgresql,(select * from agg_hash_1 except select * from agg_group_1)   union all (select * from agg_group_1 except select * from agg_hash_1),aggregates.sql,SAME,,[]
postgresql,postgresql,(select * from agg_hash_2 except select * from agg_group_2)   union all (select * from agg_group_2 except select * from agg_hash_2),aggregates.sql,SAME,,[]
postgresql,postgresql,(select * from agg_hash_3 except select * from agg_group_3)   union all (select * from agg_group_3 except select * from agg_hash_3),aggregates.sql,SAME,,[]
postgresql,postgresql,(select * from agg_hash_4 except select * from agg_group_4)   union all (select * from agg_group_4 except select * from agg_hash_4),aggregates.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages TO 'warning',alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA alt_nsp1,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA alt_nsp2,alter_generic.sql,SAME,,[]
postgresql,postgresql,"GRANT ALL ON SCHEMA alt_nsp1, alt_nsp2 TO public",alter_generic.sql,SAME,,[]
postgresql,postgresql,"SET search_path = alt_nsp1, public",alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION alt_func1(int) RETURNS int LANGUAGE sql   AS 'SELECT $1 + 1',alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION alt_func2(int) RETURNS int LANGUAGE sql   AS 'SELECT $1 - 1',alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE alt_agg1 (   sfunc1 = int4pl, basetype = int4, stype1 = int4, initcond = 0 )",alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE alt_agg2 (   sfunc1 = int4mi, basetype = int4, stype1 = int4, initcond = 0 )",alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION alt_func1(int) RENAME TO alt_func3,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION alt_func2(int) SET SCHEMA alt_nsp1,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION alt_func2(int) SET SCHEMA alt_nsp2,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER AGGREGATE alt_agg1(int) RENAME TO alt_agg3,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER AGGREGATE alt_agg2(int) SET SCHEMA alt_nsp2,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION alt_func1(int) RETURNS int LANGUAGE sql   AS 'SELECT $1 + 2',alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION alt_func2(int) RETURNS int LANGUAGE sql   AS 'SELECT $1 - 2',alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE alt_agg1 (   sfunc1 = int4pl, basetype = int4, stype1 = int4, initcond = 100 )",alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE alt_agg2 (   sfunc1 = int4mi, basetype = int4, stype1 = int4, initcond = -100 )",alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION alt_func3(int) RENAME TO alt_func4,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER AGGREGATE alt_agg3(int) RENAME TO alt_agg4,alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE CONVERSION alt_conv1 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE CONVERSION alt_conv2 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER CONVERSION alt_conv1 RENAME TO alt_conv3,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER CONVERSION alt_conv2 SET SCHEMA alt_nsp2,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE CONVERSION alt_conv1 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE CONVERSION alt_conv2 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER CONVERSION alt_conv3 RENAME TO alt_conv4,alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_generic.sql,SAME,,[]
postgresql,postgresql,SELECT fdwname FROM pg_foreign_data_wrapper WHERE fdwname like 'alt_fdw%',alter_generic.sql,SAME,,[]
postgresql,postgresql,SELECT srvname FROM pg_foreign_server WHERE srvname like 'alt_fserv%',alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR @-@ ( leftarg = int4, rightarg = int4, procedure = int4mi )",alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR @+@ ( leftarg = int4, rightarg = int4, procedure = int4pl )",alter_generic.sql,SAME,,[]
postgresql,postgresql,"ALTER OPERATOR @-@(int4, int4) SET SCHEMA alt_nsp2",alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR @-@ ( leftarg = int4, rightarg = int4, procedure = int4mi )",alter_generic.sql,SAME,,[]
postgresql,postgresql,"ALTER OPERATOR @+@(int4, int4) SET SCHEMA alt_nsp2",alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_generic.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,alter_generic.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,alter_generic.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,alter_generic.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,alter_generic.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,alter_generic.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,alter_generic.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,alter_generic.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,alter_generic.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,alter_generic.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,alter_generic.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,alter_generic.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,alter_generic.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,alter_generic.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1",alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS alt_stat2 ON a, b FROM alt_regress_1",alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER STATISTICS alt_stat1 RENAME TO alt_stat3,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER STATISTICS alt_stat2 SET SCHEMA alt_nsp2,alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_2",alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS alt_stat2 ON a, b FROM alt_regress_2",alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER STATISTICS alt_stat3 RENAME TO alt_stat4,alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple),alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH DICTIONARY alt_ts_dict2 (template=simple),alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER TEXT SEARCH DICTIONARY alt_ts_dict1 RENAME TO alt_ts_dict3,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER TEXT SEARCH DICTIONARY alt_ts_dict2 SET SCHEMA alt_nsp2,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple),alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH DICTIONARY alt_ts_dict2 (template=simple),alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER TEXT SEARCH DICTIONARY alt_ts_dict3 RENAME TO alt_ts_dict4,alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION alt_ts_conf1 (copy=english),alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION alt_ts_conf2 (copy=english),alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER TEXT SEARCH CONFIGURATION alt_ts_conf1 RENAME TO alt_ts_conf3,alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER TEXT SEARCH CONFIGURATION alt_ts_conf2 SET SCHEMA alt_nsp2,alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION alt_ts_conf1 (copy=english),alter_generic.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION alt_ts_conf2 (copy=english),alter_generic.sql,SAME,,[]
postgresql,postgresql,ALTER TEXT SEARCH CONFIGURATION alt_ts_conf3 RENAME TO alt_ts_conf4,alter_generic.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_generic.sql,SAME,,[]
postgresql,postgresql,"SELECT nspname, tmplname   FROM pg_ts_template t, pg_namespace n   WHERE t.tmplnamespace = n.oid AND nspname like 'alt_nsp%'   ORDER BY nspname, tmplname",alter_generic.sql,SAME,,[]
postgresql,postgresql,"SELECT nspname, prsname   FROM pg_ts_parser t, pg_namespace n   WHERE t.prsnamespace = n.oid AND nspname like 'alt_nsp%'   ORDER BY nspname, prsname",alter_generic.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA alt_nsp1 CASCADE,alter_generic.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA alt_nsp2 CASCADE,alter_generic.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION alter_op_test_fn(boolean, boolean) RETURNS boolean AS $$ SELECT NULL::BOOLEAN; $$ LANGUAGE sql IMMUTABLE",alter_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT oprrest, oprjoin FROM pg_operator WHERE oprname = '==='   AND oprleft = 'boolean'::regtype AND oprright = 'boolean'::regtype",alter_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT oprrest, oprjoin FROM pg_operator WHERE oprname = '==='   AND oprleft = 'boolean'::regtype AND oprright = 'boolean'::regtype",alter_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT oprrest, oprjoin FROM pg_operator WHERE oprname = '==='   AND oprleft = 'boolean'::regtype AND oprright = 'boolean'::regtype",alter_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT oprrest, oprjoin FROM pg_operator WHERE oprname = '==='   AND oprleft = 'boolean'::regtype AND oprright = 'boolean'::regtype",alter_operator.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION alter_op_test_fn_bool_real(boolean, real) RETURNS boolean AS $$ SELECT NULL::BOOLEAN; $$ LANGUAGE sql IMMUTABLE",alter_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION alter_op_test_fn_real_bool(real, boolean) RETURNS boolean AS $$ SELECT NULL::BOOLEAN; $$ LANGUAGE sql IMMUTABLE",alter_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR === (     LEFTARG = boolean,     RIGHTARG = real,     PROCEDURE = alter_op_test_fn_bool_real )",alter_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR ==== (     LEFTARG = real,     RIGHTARG = boolean,     PROCEDURE = alter_op_test_fn_real_bool )",alter_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR !==== (     LEFTARG = boolean,     RIGHTARG = real,     PROCEDURE = alter_op_test_fn_bool_real )",alter_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT oprcanmerge, oprcanhash FROM pg_operator WHERE oprname = '==='   AND oprleft = 'boolean'::regtype AND oprright = 'real'::regtype",alter_operator.sql,SAME,,"[(False, False)]"
postgresql,postgresql,"SELECT op.oprname AS operator_name, com.oprname AS commutator_name,   com.oprcode AS commutator_func   FROM pg_operator op   INNER JOIN pg_operator com ON (op.oid = com.oprcom AND op.oprcom = com.oid)   WHERE op.oprname = '==='   AND op.oprleft = 'boolean'::regtype AND op.oprright = 'real'::regtype",alter_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT op.oprname AS operator_name, neg.oprname AS negator_name,   neg.oprcode AS negator_func   FROM pg_operator op   INNER JOIN pg_operator neg ON (op.oid = neg.oprnegate AND op.oprnegate = neg.oid)   WHERE op.oprname = '==='   AND op.oprleft = 'boolean'::regtype AND op.oprright = 'real'::regtype",alter_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT oprcanmerge, oprcanhash,        pg_describe_object('pg_operator'::regclass, oprcom, 0) AS commutator,        pg_describe_object('pg_operator'::regclass, oprnegate, 0) AS negator   FROM pg_operator WHERE oprname = '==='   AND oprleft = 'boolean'::regtype AND oprright = 'real'::regtype",alter_operator.sql,SAME,,"[(False, False, None, None)]"
postgresql,postgresql,"CREATE OPERATOR @= (     LEFTARG = real,     RIGHTARG = boolean,     PROCEDURE = alter_op_test_fn_real_bool )",alter_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR @!= (     LEFTARG = boolean,     RIGHTARG = real,     PROCEDURE = alter_op_test_fn_bool_real )",alter_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT oprcanmerge, oprcanhash,        pg_describe_object('pg_operator'::regclass, oprcom, 0) AS commutator,        pg_describe_object('pg_operator'::regclass, oprnegate, 0) AS negator   FROM pg_operator WHERE oprname = '==='   AND oprleft = 'boolean'::regtype AND oprright = 'real'::regtype",alter_operator.sql,SAME,,"[(False, False, None, None)]"
postgresql,postgresql,"DROP OPERATOR === (boolean, real)",alter_operator.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR ==== (real, boolean)",alter_operator.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR !==== (boolean, real)",alter_operator.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR @= (real, boolean)",alter_operator.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR @!= (boolean, real)",alter_operator.sql,SAME,,[]
postgresql,postgresql,"DROP FUNCTION alter_op_test_fn(boolean, boolean)",alter_operator.sql,SAME,,[]
postgresql,postgresql,"DROP FUNCTION alter_op_test_fn_bool_real(boolean, real)",alter_operator.sql,SAME,,[]
postgresql,postgresql,"DROP FUNCTION alter_op_test_fn_real_bool(real, boolean)",alter_operator.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages TO 'warning',alter_table.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON TABLE attmp IS 'table comment',alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON TABLE attmp IS NULL,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN a int4 default 3,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN b name,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN c text,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN d float8,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN e float4,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN f int2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN g polygon,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN i char,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN k int4,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN l tid,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN m xid,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN n oidvector,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN p boolean,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN q point,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN r lseg,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN s path,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN t box,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN v timestamp,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN w interval,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN x float8[],alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN y float4[],alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN z int2[],alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM attmp,alter_table.sql,SAME,,"[(None, 4, 'name', 'text', 4.1, 4.1, 2, '((4.1,4.1),(3.1,3.1))', 'c', 314159, '(1,1)', '512', '1 2 3 4 5 6 7 8', True, '(1.1,1.1)', '[(4.1,4.1),(3.1,3.1)]', '((0,2),(4.1,4.1),(3.1,3.1))', '(4.1,4.1),(3.1,3.1)', datetime.datetime(1970, 1, 1, 0, 0), datetime.timedelta(seconds=3610), [1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0], [1, 2, 3, 4])]"
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN a int4,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN b name,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN c text,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN d float8,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN e float4,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN f int2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN g polygon,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN i char,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN k int4,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN l tid,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN m xid,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN n oidvector,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN p boolean,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN q point,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN r lseg,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN s path,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN t box,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN v timestamp,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN w interval,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN x float8[],alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN y float4[],alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ADD COLUMN z int2[],alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM attmp,alter_table.sql,SAME,,"[(None, 4, 'name', 'text', 4.1, 4.1, 2, '((4.1,4.1),(3.1,3.1))', 'c', 314159, '(1,1)', '512', '1 2 3 4 5 6 7 8', True, '(1.1,1.1)', '[(4.1,4.1),(3.1,3.1)]', '((0,2),(4.1,4.1),(3.1,3.1))', '(4.1,4.1),(3.1,3.1)', datetime.datetime(1970, 1, 1, 0, 0), datetime.timedelta(seconds=3610), [1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0], [1, 2, 3, 4])]"
postgresql,postgresql,"CREATE INDEX attmp_idx ON attmp (a, (d + e), b)",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX attmp_idx ALTER COLUMN 2 SET STATISTICS 1000,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX attmp_idx ALTER COLUMN 2 SET STATISTICS -1,alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE attmp (attmptable int),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp RENAME TO attmp_new,alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM attmp,alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM attmp_new,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp RENAME TO attmp_new2,alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM attmp_new,alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM attmp_new2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX part_attmp_pkey RENAME TO part_attmp_index,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX part_attmp1_pkey RENAME TO part_attmp1_index,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_attmp RENAME TO part_at2tmp,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_attmp1 RENAME TO part_at2tmp1,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX part_attmp_index RENAME TO fail,alter_table.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT typname FROM pg_type WHERE oid = 'attmp_array[]'::regtype,alter_table.sql,SAME,,"[('_attmp_array',)]"
postgresql,postgresql,SELECT typname FROM pg_type WHERE oid = 'attmp_array2[]'::regtype,alter_table.sql,SAME,,"[('_attmp_array2',)]"
postgresql,postgresql,ALTER TABLE attmp_array2 RENAME TO _attmp_array,alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT typname FROM pg_type WHERE oid = 'attmp_array[]'::regtype,alter_table.sql,SAME,,"[('__attmp_array',)]"
postgresql,postgresql,SELECT typname FROM pg_type WHERE oid = '_attmp_array[]'::regtype,alter_table.sql,SAME,,"[('__attmp_array_1',)]"
postgresql,postgresql,SELECT typname FROM pg_type WHERE oid = 'attmp_array[]'::regtype,alter_table.sql,SAME,,"[('_attmp_array',)]"
postgresql,postgresql,ALTER TABLE attmp_array RENAME TO _attmp_array,alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT typname FROM pg_type WHERE oid = '_attmp_array[]'::regtype,alter_table.sql,SAME,,"[('__attmp_array',)]"
postgresql,postgresql,ALTER INDEX IF EXISTS __onek_unique1 RENAME TO attmp_onek_unique1,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX IF EXISTS __attmp_onek_unique1 RENAME TO onek_unique1,alter_table.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX alter_idx_rename_test_idx ON alter_idx_rename_test (a),alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX alter_idx_rename_test_parted_idx ON alter_idx_rename_test_parted (a),alter_table.sql,SAME,,[]
postgresql,postgresql,BEGIN,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX alter_idx_rename_test RENAME TO alter_idx_rename_test_2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX alter_idx_rename_test_parted RENAME TO alter_idx_rename_test_parted_2,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT relation::regclass, mode FROM pg_locks WHERE pid = pg_backend_pid() AND locktype = 'relation'   AND relation::regclass::text LIKE 'alter\_idx%' ORDER BY relation::regclass::text COLLATE ""C""",alter_table.sql,SAME,,"[('alter_idx_rename_test_2', 'AccessExclusiveLock'), ('alter_idx_rename_test_parted_2', 'AccessExclusiveLock')]"
postgresql,postgresql,COMMIT,alter_table.sql,SAME,,[]
postgresql,postgresql,BEGIN,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX alter_idx_rename_test_idx RENAME TO alter_idx_rename_test_idx_2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX alter_idx_rename_test_parted_idx RENAME TO alter_idx_rename_test_parted_idx_2,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT relation::regclass, mode FROM pg_locks WHERE pid = pg_backend_pid() AND locktype = 'relation'   AND relation::regclass::text LIKE 'alter\_idx%' ORDER BY relation::regclass::text COLLATE ""C""",alter_table.sql,SAME,,"[('alter_idx_rename_test_idx_2', 'ShareUpdateExclusiveLock'), ('alter_idx_rename_test_parted_idx_2', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,COMMIT,alter_table.sql,SAME,,[]
postgresql,postgresql,BEGIN,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE alter_idx_rename_test_idx_2 RENAME TO alter_idx_rename_test_idx_3,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE alter_idx_rename_test_parted_idx_2 RENAME TO alter_idx_rename_test_parted_idx_3,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT relation::regclass, mode FROM pg_locks WHERE pid = pg_backend_pid() AND locktype = 'relation'   AND relation::regclass::text LIKE 'alter\_idx%' ORDER BY relation::regclass::text COLLATE ""C""",alter_table.sql,SAME,,"[('alter_idx_rename_test_idx_3', 'AccessExclusiveLock'), ('alter_idx_rename_test_parted_idx_3', 'AccessExclusiveLock')]"
postgresql,postgresql,COMMIT,alter_table.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,alter_table.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan to off,alter_table.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan to off,alter_table.sql,SAME,,[]
postgresql,postgresql,reset enable_seqscan,alter_table.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE constraint_rename_test RENAME CONSTRAINT con1 TO con1foo,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE constraint_rename_test ADD CONSTRAINT con2 CHECK (b > 0) NO INHERIT,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY constraint_rename_test RENAME CONSTRAINT con2 TO con2foo,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE constraint_rename_test RENAME CONSTRAINT con2foo TO con2bar,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE constraint_rename_test ADD CONSTRAINT con3 PRIMARY KEY (a),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE constraint_rename_test RENAME CONSTRAINT con3 TO con3foo,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS constraint_not_exist RENAME CONSTRAINT con3 TO con3foo,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS constraint_rename_test ADD CONSTRAINT con4 UNIQUE (a),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE constraint_rename_cache   RENAME CONSTRAINT chk_a TO chk_a_new,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE constraint_rename_cache   RENAME CONSTRAINT constraint_rename_cache_pkey TO constraint_rename_pkey_new,alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM attmp3 where a=5,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp3 add constraint attmpconstr foreign key (a) references attmp2 match full,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp3 drop constraint attmpconstr,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp3 add constraint attmpconstr foreign key (a) references attmp2 match full NOT VALID,alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM attmp3 where a=5,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp3 validate constraint attmpconstr,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp3 validate constraint attmpconstr,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp3 ADD CONSTRAINT b_greater_than_ten CHECK (b > 10) NOT VALID,alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM attmp3 WHERE NOT b > 10,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp3 VALIDATE CONSTRAINT b_greater_than_ten,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp3 VALIDATE CONSTRAINT b_greater_than_ten,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from attmp3,alter_table.sql,SAME,,"[(1, 20)]"
postgresql,postgresql,ALTER TABLE attmp3 ADD CONSTRAINT b_le_20 CHECK (b <= 20) NOT VALID,alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM attmp6 WHERE b > 20,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp3 VALIDATE CONSTRAINT b_le_20,alter_table.sql,SAME,,[]
postgresql,postgresql,END,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table parent_noinh_convalid add constraint check_a_is_2 check (a = 2) no inherit not valid,alter_table.sql,SAME,,[]
postgresql,postgresql,delete from only parent_noinh_convalid,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table parent_noinh_convalid validate constraint check_a_is_2,alter_table.sql,SAME,,[]
postgresql,postgresql,select convalidated from pg_constraint where conrelid = 'parent_noinh_convalid'::regclass and conname = 'check_a_is_2',alter_table.sql,SAME,,"[(True,)]"
postgresql,postgresql,set constraint_exclusion TO 'partition',alter_table.sql,SAME,,[]
postgresql,postgresql,alter table nv_child_2010 add check (d between '2010-01-01'::date and '2010-12-31'::date) not valid,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table nv_child_2011 add check (d between '2011-01-01'::date and '2011-12-31'::date) not valid,alter_table.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from nv_parent where d between '2011-08-01' and '2011-08-31',alter_table.sql,SAME,,"[('Append',), ('  ->  Seq Scan on nv_parent nv_parent_1',), (""        Filter: ((d >= '2011-08-01'::date) AND (d <= '2011-08-31'::date))"",), ('  ->  Seq Scan on nv_child_2010 nv_parent_2',), (""        Filter: ((d >= '2011-08-01'::date) AND (d <= '2011-08-31'::date))"",), ('  ->  Seq Scan on nv_child_2011 nv_parent_3',), (""        Filter: ((d >= '2011-08-01'::date) AND (d <= '2011-08-31'::date))"",)]"
postgresql,postgresql,explain (costs off) select * from nv_parent where d between '2011-08-01'::date and '2011-08-31'::date,alter_table.sql,SAME,,"[('Append',), ('  ->  Seq Scan on nv_parent nv_parent_1',), (""        Filter: ((d >= '2011-08-01'::date) AND (d <= '2011-08-31'::date))"",), ('  ->  Seq Scan on nv_child_2010 nv_parent_2',), (""        Filter: ((d >= '2011-08-01'::date) AND (d <= '2011-08-31'::date))"",), ('  ->  Seq Scan on nv_child_2011 nv_parent_3',), (""        Filter: ((d >= '2011-08-01'::date) AND (d <= '2011-08-31'::date))"",)]"
postgresql,postgresql,explain (costs off) select * from nv_parent where d between '2009-08-01'::date and '2009-08-31'::date,alter_table.sql,SAME,,"[('Append',), ('  ->  Seq Scan on nv_parent nv_parent_1',), (""        Filter: ((d >= '2009-08-01'::date) AND (d <= '2009-08-31'::date))"",), ('  ->  Seq Scan on nv_child_2010 nv_parent_2',), (""        Filter: ((d >= '2009-08-01'::date) AND (d <= '2009-08-31'::date))"",), ('  ->  Seq Scan on nv_child_2011 nv_parent_3',), (""        Filter: ((d >= '2009-08-01'::date) AND (d <= '2009-08-31'::date))"",), ('  ->  Seq Scan on nv_child_2009 nv_parent_4',), (""        Filter: ((d >= '2009-08-01'::date) AND (d <= '2009-08-31'::date))"",)]"
postgresql,postgresql,alter table nv_child_2011 VALIDATE CONSTRAINT nv_child_2011_d_check,alter_table.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from nv_parent where d between '2009-08-01'::date and '2009-08-31'::date,alter_table.sql,SAME,,"[('Append',), ('  ->  Seq Scan on nv_parent nv_parent_1',), (""        Filter: ((d >= '2009-08-01'::date) AND (d <= '2009-08-31'::date))"",), ('  ->  Seq Scan on nv_child_2010 nv_parent_2',), (""        Filter: ((d >= '2009-08-01'::date) AND (d <= '2009-08-31'::date))"",), ('  ->  Seq Scan on nv_child_2009 nv_parent_3',), (""        Filter: ((d >= '2009-08-01'::date) AND (d <= '2009-08-31'::date))"",)]"
postgresql,postgresql,alter table nv_parent add check (d between '2001-01-01'::date and '2099-12-31'::date) not valid,alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE PKTABLE (ptest1 int PRIMARY KEY),alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE FKTABLE (ftest1 inet),alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE FKTABLE (ftest1 int8),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable,alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE FKTABLE (ftest1 numeric),alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE PKTABLE (ptest1 numeric PRIMARY KEY),alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE FKTABLE (ftest1 int),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable,alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE PKTABLE (ptest1 int, ptest2 inet,                            PRIMARY KEY(ptest1, ptest2))",alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE FKTABLE (ftest1 cidr, ftest2 timestamp)",alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE FKTABLE (ftest1 cidr, ftest2 timestamp)",alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE FKTABLE (ftest1 int, ftest2 inet)",alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE PKTABLE (ptest1 int primary key),alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE FKTABLE (ftest1 int),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ADD CONSTRAINT fknd FOREIGN KEY(ftest1) REFERENCES pktable   ON DELETE CASCADE ON UPDATE NO ACTION NOT DEFERRABLE,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ADD CONSTRAINT fkdd FOREIGN KEY(ftest1) REFERENCES pktable   ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY DEFERRED,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ADD CONSTRAINT fkdi FOREIGN KEY(ftest1) REFERENCES pktable   ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY IMMEDIATE,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ADD CONSTRAINT fknd2 FOREIGN KEY(ftest1) REFERENCES pktable   ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY DEFERRED,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ALTER CONSTRAINT fknd2 NOT DEFERRABLE,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ADD CONSTRAINT fkdd2 FOREIGN KEY(ftest1) REFERENCES pktable   ON DELETE CASCADE ON UPDATE NO ACTION NOT DEFERRABLE,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ALTER CONSTRAINT fkdd2 DEFERRABLE INITIALLY DEFERRED,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ADD CONSTRAINT fkdi2 FOREIGN KEY(ftest1) REFERENCES pktable   ON DELETE CASCADE ON UPDATE NO ACTION NOT DEFERRABLE,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ALTER CONSTRAINT fkdi2 DEFERRABLE INITIALLY IMMEDIATE,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT conname, tgfoid::regproc, tgtype, tgdeferrable, tginitdeferred FROM pg_trigger JOIN pg_constraint con ON con.oid = tgconstraint WHERE tgrelid = 'pktable'::regclass ORDER BY 1,2,3",alter_table.sql,SAME,,"[('fkdd', '""RI_FKey_cascade_del""', 9, False, False), ('fkdd', '""RI_FKey_noaction_upd""', 17, True, True), ('fkdd2', '""RI_FKey_cascade_del""', 9, False, False), ('fkdd2', '""RI_FKey_noaction_upd""', 17, True, True), ('fkdi', '""RI_FKey_cascade_del""', 9, False, False), ('fkdi', '""RI_FKey_noaction_upd""', 17, True, False), ('fkdi2', '""RI_FKey_cascade_del""', 9, False, False), ('fkdi2', '""RI_FKey_noaction_upd""', 17, True, False), ('fknd', '""RI_FKey_cascade_del""', 9, False, False), ('fknd', '""RI_FKey_noaction_upd""', 17, False, False), ('fknd2', '""RI_FKey_cascade_del""', 9, False, False), ('fknd2', '""RI_FKey_noaction_upd""', 17, False, False)]"
postgresql,postgresql,"SELECT conname, tgfoid::regproc, tgtype, tgdeferrable, tginitdeferred FROM pg_trigger JOIN pg_constraint con ON con.oid = tgconstraint WHERE tgrelid = 'fktable'::regclass ORDER BY 1,2,3",alter_table.sql,SAME,,"[('fkdd', '""RI_FKey_check_ins""', 5, True, True), ('fkdd', '""RI_FKey_check_upd""', 17, True, True), ('fkdd2', '""RI_FKey_check_ins""', 5, True, True), ('fkdd2', '""RI_FKey_check_upd""', 17, True, True), ('fkdi', '""RI_FKey_check_ins""', 5, True, False), ('fkdi', '""RI_FKey_check_upd""', 17, True, False), ('fkdi2', '""RI_FKey_check_ins""', 5, True, False), ('fkdi2', '""RI_FKey_check_upd""', 17, True, False), ('fknd', '""RI_FKey_check_ins""', 5, False, False), ('fknd', '""RI_FKey_check_upd""', 17, False, False), ('fknd2', '""RI_FKey_check_ins""', 5, False, False), ('fknd2', '""RI_FKey_check_upd""', 17, False, False)]"
postgresql,postgresql,alter table atacc1 add constraint atacc_test1 check (test>3),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc_test1 check (test+test2<test3*4),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add check (test2>test),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc2 add constraint foo check (test2>0),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc3 no inherit atacc2,alter_table.sql,SAME,,[]
postgresql,postgresql,select test2 from atacc2,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc2 add constraint foo check (test2>0),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc3 rename test2 to testx,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc3 add test2 bool,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc3 drop test2,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc3 add test2 int,alter_table.sql,SAME,,[]
postgresql,postgresql,update atacc3 set test2 = 4 where test2 is null,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc3 add constraint foo check (test2>0),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc3 inherit atacc2,alter_table.sql,SAME,,[]
postgresql,postgresql,select test2 from atacc2,alter_table.sql,SAME,,"[(4,)]"
postgresql,postgresql,alter table atacc1 add constraint foo check (test>0) no inherit,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc_test1 unique (test),alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1 add constraint atacc_test1 unique (test, test2)",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add unique (test2),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc_test1 primary key (test),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 drop constraint atacc_test1 restrict,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc_oid1 primary key(id),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add column test2 int default 0 primary key,alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1   add column b float8 not null default random(),   add primary key(a)",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc1_fkey foreign key (a) references atacc1 (a) not valid,alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1 validate constraint atacc1_fkey, alter a type bigint",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc1_chk check(b = 1) not valid,alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1 validate constraint atacc1_chk, alter a type int",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc1_chk check(b = 1) not valid,alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1 add constraint atacc_test1 primary key (test, test2)",alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1 add constraint ""atacc1_pkey"" primary key (test)",alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1 drop constraint ""atacc1_pkey""",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 alter test set not null,alter_table.sql,SAME,,[]
postgresql,postgresql,delete from atacc1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 alter test set not null,alter_table.sql,SAME,,[]
postgresql,postgresql,create view myview as select * from atacc1,alter_table.sql,SAME,,[]
postgresql,postgresql,drop view myview,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc1_constr_or check(test_a is not null or test_b < 10),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 drop constraint atacc1_constr_or,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc1_constr_invalid check(test_a is not null) not valid,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 drop constraint atacc1_constr_invalid,alter_table.sql,SAME,,[]
postgresql,postgresql,update atacc1 set test_a = 1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc1_constr_a_valid check(test_a is not null),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 alter test_a set not null,alter_table.sql,SAME,,[]
postgresql,postgresql,delete from atacc1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 alter test_a drop not null,alter_table.sql,SAME,,[]
postgresql,postgresql,update atacc1 set test_b = 1,alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1 alter test_b set not null, alter test_a set not null",alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1 alter test_a drop not null, alter test_b drop not null",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add constraint atacc1_constr_b_valid check(test_b is not null),alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table atacc1 alter test_b set not null, alter test_a set not null",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table parent alter a set not null,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table parent alter a drop not null,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table def_test alter column c1 drop default,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table def_test alter column c2 drop default,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table def_test alter column c1 set default 10,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table def_test alter column c2 set default 'new_default',alter_table.sql,SAME,,[]
postgresql,postgresql,select * from def_test,alter_table.sql,SAME,,"[(5, 'initial_default'), (None, 'initial_default'), (None, None), (10, 'new_default')]"
postgresql,postgresql,alter table def_test alter column c2 set default 20,alter_table.sql,SAME,,[]
postgresql,postgresql,create view def_view_test as select * from def_test,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table def_view_test alter column c1 set default 45,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table def_view_test alter column c2 set default 'view_default',alter_table.sql,SAME,,[]
postgresql,postgresql,select * from def_view_test,alter_table.sql,SAME,,"[(5, 'initial_default'), (None, 'initial_default'), (None, None), (10, 'new_default'), (None, None), (45, None), (45, 'view_default')]"
postgresql,postgresql,drop rule def_view_test_ins on def_view_test,alter_table.sql,SAME,,[]
postgresql,postgresql,drop view def_view_test,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 drop a,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from atacc1,alter_table.sql,SAME,,"[(2, 3, 4)]"
postgresql,postgresql,select atacc1.* from atacc1,alter_table.sql,SAME,,"[(2, 3, 4)]"
postgresql,postgresql,"select b,c,d from atacc1",alter_table.sql,SAME,,"[(2, 3, 4)]"
postgresql,postgresql,delete from atacc1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 SET WITHOUT OIDS,alter_table.sql,SAME,,[]
postgresql,postgresql,create view myview as select * from atacc1,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from myview,alter_table.sql,SAME,,[]
postgresql,postgresql,drop view myview,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from attest1,alter_table.sql,SAME,,"[(21, 22, 23)]"
postgresql,postgresql,select * into attest2 from atacc1,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from attest2,alter_table.sql,SAME,,"[(21, 22, 23)]"
postgresql,postgresql,alter table atacc1 drop c,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 drop d,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 drop b,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from atacc1,alter_table.sql,SAME,,[()]
postgresql,postgresql,alter table atacc1 drop column value,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atacc1 add column value int check (value < 10),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table parent drop a,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from parent,alter_table.sql,SAME,,"[(2, 3), (12, 13)]"
postgresql,postgresql,select * from child,alter_table.sql,SAME,,"[(12, 13, 'testing')]"
postgresql,postgresql,alter table parent drop c,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from parent,alter_table.sql,SAME,,"[(2,), (12,)]"
postgresql,postgresql,select * from child,alter_table.sql,SAME,,"[(12, 'testing')]"
postgresql,postgresql,alter table attest drop a,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table only dropColumn drop column e,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table dropColumnChild drop column c,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table dropColumn drop column a,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table renameColumn rename column a to d,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table renameColumnChild rename column b to a,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table if exists doesnt_exist_tab rename column a to d,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table if exists doesnt_exist_tab rename column b to a,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table renameColumn add column w int,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table p1 drop column f1,alter_table.sql,SAME,,[]
postgresql,postgresql,select f1 from c1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table c1 drop column f1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table p1 drop column f1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table only p1 drop column f1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table c1 drop column f1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table only p1 drop column f1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table c1 drop column f1,alter_table.sql,SAME,,[]
postgresql,postgresql,"select relname, attname, attinhcount, attislocal from pg_class join pg_attribute on (pg_class.oid = pg_attribute.attrelid) where relname in ('p1','p2','c1','gc1') and attnum > 0 and not attisdropped order by relname, attnum",alter_table.sql,SAME,,"[('c1', 'id', 1, False), ('c1', 'name', 2, False), ('c1', 'id2', 1, False), ('c1', 'height', 1, False), ('c1', 'age', 0, True), ('gc1', 'id', 1, False), ('gc1', 'name', 1, False), ('gc1', 'id2', 1, False), ('gc1', 'height', 1, False), ('gc1', 'age', 1, False), ('p1', 'id', 0, True), ('p1', 'name', 0, True), ('p2', 'id2', 0, True), ('p2', 'name', 0, True), ('p2', 'height', 0, True)]"
postgresql,postgresql,alter table only p1 drop column name,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table p2 drop column name,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table c1 drop column name,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table p2 drop column height,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table dropColumnExists drop column if exists non_existing,alter_table.sql,SAME,,[]
postgresql,postgresql,"select relname, attname, attinhcount, attislocal from pg_class join pg_attribute on (pg_class.oid = pg_attribute.attrelid) where relname in ('p1','p2','c1','gc1') and attnum > 0 and not attisdropped order by relname, attnum",alter_table.sql,SAME,,"[('c1', 'id', 1, False), ('c1', 'id2', 1, False), ('c1', 'age', 0, True), ('gc1', 'id', 1, False), ('gc1', 'id2', 1, False), ('gc1', 'age', 1, False), ('p1', 'id', 0, True), ('p2', 'id2', 0, True)]"
postgresql,postgresql,alter table depth0 add c text,alter_table.sql,SAME,,[]
postgresql,postgresql,"select attrelid::regclass, attname, attinhcount, attislocal from pg_attribute where attnum > 0 and attrelid::regclass in ('depth0', 'depth1', 'depth2') order by attrelid::regclass::text, attnum",alter_table.sql,SAME,,"[('depth0', 'c', 0, True), ('depth1', 'c', 1, True), ('depth2', 'c', 1, False)]"
postgresql,postgresql,alter table p1 add column a1 int check (a1 > 0),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table p1 add column f2 text,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from p1,alter_table.sql,SAME,,"[(1, 2, 'abc'), (11, 22, 'xyz')]"
postgresql,postgresql,"update p1 set a1 = a1 + 1, f2 = upper(f2)",alter_table.sql,SAME,,[]
postgresql,postgresql,select * from p1,alter_table.sql,SAME,,"[(1, 3, 'ABC'), (11, 23, 'XYZ')]"
postgresql,postgresql,create domain mytype as text,alter_table.sql,SAME,,[]
postgresql,postgresql,"create temp table foo (f1 text, f2 mytype, f3 text)",alter_table.sql,SAME,,[]
postgresql,postgresql,select * from foo,alter_table.sql,SAME,,"[('bb', 'cc', 'dd')]"
postgresql,postgresql,drop domain mytype cascade,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from foo,alter_table.sql,SAME,,"[('bb', 'dd')]"
postgresql,postgresql,select * from foo,alter_table.sql,SAME,,"[('bb', 'dd'), ('qq', 'rr')]"
postgresql,postgresql,update foo set f3 = 'zz',alter_table.sql,SAME,,[]
postgresql,postgresql,select * from foo,alter_table.sql,SAME,,"[('bb', 'zz'), ('qq', 'zz')]"
postgresql,postgresql,"select f3,max(f1) from foo group by f3",alter_table.sql,SAME,,"[('zz', 'qq')]"
postgresql,postgresql,alter table foo alter f1 TYPE varchar(10),alter_table.sql,SAME,,[]
postgresql,postgresql,select * from anothertab,alter_table.sql,SAME,,"[(1, True), (2, False)]"
postgresql,postgresql,alter table anothertab alter column atcol1 type integer,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from anothertab,alter_table.sql,SAME,,"[(1, True), (2, False)]"
postgresql,postgresql,select * from anothertab,alter_table.sql,SAME,,"[(1, True), (2, False), (3, None)]"
postgresql,postgresql,alter table anothertab alter column atcol2 type text       using case when atcol2 is true then 'IT WAS TRUE'                  when atcol2 is false then 'IT WAS FALSE'                  else 'IT WAS NULL!' end,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from anothertab,alter_table.sql,SAME,,"[(1, 'IT WAS TRUE'), (2, 'IT WAS FALSE'), (3, 'IT WAS NULL!')]"
postgresql,postgresql,alter table anothertab alter column atcol1 drop default,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table anothertab drop constraint anothertab_chk,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table anothertab drop constraint IF EXISTS anothertab_chk,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table anothertab alter column atcol1 type boolean         using case when atcol1 % 2 = 0 then true else false end,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from anothertab,alter_table.sql,SAME,,"[(False, 'IT WAS TRUE'), (True, 'IT WAS FALSE'), (False, 'IT WAS NULL!')]"
postgresql,postgresql,alter table anothertab   add exclude using btree (f3 with =),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table anothertab   add exclude using btree (f4 with =) where (f4 is not null),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table anothertab   add exclude using btree (f4 with =) where (f5 > 0),alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table anothertab   add unique(f1,f4)",alter_table.sql,SAME,,[]
postgresql,postgresql,"create index on anothertab(f2,f3)",alter_table.sql,SAME,,[]
postgresql,postgresql,create unique index on anothertab(f4),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table anothertab alter column f1 type bigint,alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table anothertab   alter column f2 type bigint,   alter column f3 type bigint,   alter column f4 type bigint",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table anothertab alter column f5 type bigint,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from another,alter_table.sql,SAME,,"[(1, 'one', 'uno'), (2, 'two', 'due'), (3, 'three', 'tre')]"
postgresql,postgresql,"alter table another   alter f1 type text using f2 || ' and ' || f3 || ' more',   alter f2 type bigint using f1 * 10,   drop column f3",alter_table.sql,SAME,,[]
postgresql,postgresql,select * from another,alter_table.sql,SAME,,"[('one and uno more', 10), ('two and due more', 20), ('three and tre more', 30)]"
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table skip_wal_skip_rewrite_index alter c type varchar(20),alter_table.sql,SAME,,[]
postgresql,postgresql,commit,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table at_tab1 alter column b type varchar,alter_table.sql,SAME,,[]
postgresql,postgresql,create index on at_partitioned (b),alter_table.sql,SAME,,[]
postgresql,postgresql,create index on at_partitioned (a),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table at_partitioned attach partition at_part_2 for values from (1000) to (2000),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table at_partitioned alter column b type numeric using b::numeric,alter_table.sql,SAME,,[]
postgresql,postgresql,comment on constraint at_partitioned_id_name_key on at_partitioned is 'parent constraint',alter_table.sql,SAME,,[]
postgresql,postgresql,comment on index at_partitioned_id_name_key is 'parent index',alter_table.sql,SAME,,[]
postgresql,postgresql,comment on constraint at_partitioned_0_id_name_key on at_partitioned_0 is 'child 0 constraint',alter_table.sql,SAME,,[]
postgresql,postgresql,comment on index at_partitioned_0_id_name_key is 'child 0 index',alter_table.sql,SAME,,[]
postgresql,postgresql,comment on constraint at_partitioned_1_id_name_key on at_partitioned_1 is 'child 1 constraint',alter_table.sql,SAME,,[]
postgresql,postgresql,comment on index at_partitioned_1_id_name_key is 'child 1 index',alter_table.sql,SAME,,[]
postgresql,postgresql,"create temp table old_oids as   select relname, oid as oldoid, relfilenode as oldfilenode   from pg_class where relname like 'at_partitioned%'",alter_table.sql,SAME,,[]
postgresql,postgresql,"select relname,   c.oid = oldoid as orig_oid,   case relfilenode     when 0 then 'none'     when c.oid then 'own'     when oldfilenode then 'orig'     else 'OTHER'     end as storage,   obj_description(c.oid, 'pg_class') as desc   from pg_class c left join old_oids using (relname)   where relname like 'at_partitioned%'   order by relname",alter_table.sql,SAME,,"[('at_partitioned', True, 'none', None), ('at_partitioned_0', True, 'own', None), ('at_partitioned_0_id_name_key', True, 'own', 'child 0 index'), ('at_partitioned_1', True, 'own', None), ('at_partitioned_1_id_name_key', True, 'own', 'child 1 index'), ('at_partitioned_id_name_key', True, 'none', 'parent index')]"
postgresql,postgresql,"select conname, obj_description(oid, 'pg_constraint') as desc   from pg_constraint where conname like 'at_partitioned%'   order by conname",alter_table.sql,SAME,,"[('at_partitioned_0_id_name_key', 'child 0 constraint'), ('at_partitioned_1_id_name_key', 'child 1 constraint'), ('at_partitioned_id_name_key', 'parent constraint')]"
postgresql,postgresql,alter table at_partitioned alter column name type varchar(127),alter_table.sql,SAME,,[]
postgresql,postgresql,"select relname,   c.oid = oldoid as orig_oid,   case relfilenode     when 0 then 'none'     when c.oid then 'own'     when oldfilenode then 'orig'     else 'OTHER'     end as storage,   obj_description(c.oid, 'pg_class') as desc   from pg_class c left join old_oids using (relname)   where relname like 'at_partitioned%'   order by relname",alter_table.sql,SAME,,"[('at_partitioned', True, 'none', None), ('at_partitioned_0', True, 'own', None), ('at_partitioned_0_id_name_key', False, 'own', 'parent index'), ('at_partitioned_1', True, 'own', None), ('at_partitioned_1_id_name_key', False, 'own', 'parent index'), ('at_partitioned_id_name_key', False, 'none', 'parent index')]"
postgresql,postgresql,"select conname, obj_description(oid, 'pg_constraint') as desc   from pg_constraint where conname like 'at_partitioned%'   order by conname",alter_table.sql,SAME,,"[('at_partitioned_0_id_name_key', None), ('at_partitioned_1_id_name_key', None), ('at_partitioned_id_name_key', 'parent constraint')]"
postgresql,postgresql,create temp table recur1 (f1 int),alter_table.sql,SAME,,[]
postgresql,postgresql,create domain array_of_recur1 as recur1[],alter_table.sql,SAME,,[]
postgresql,postgresql,"create temp table recur2 (f1 int, f2 recur1)",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table recur1 add column f2 int,alter_table.sql,SAME,,[]
postgresql,postgresql,select reltoastrelid <> 0 as has_toast_table   from pg_class where oid = 'test_storage'::regclass,alter_table.sql,SAME,,"[(True,)]"
postgresql,postgresql,alter table test_storage alter a set storage plain,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table test_storage add b int default random()::int,alter_table.sql,SAME,,[]
postgresql,postgresql,select reltoastrelid <> 0 as has_toast_table   from pg_class where oid = 'test_storage'::regclass,alter_table.sql,SAME,,"[(False,)]"
postgresql,postgresql,alter table test_storage alter a set storage default,alter_table.sql,SAME,,[]
postgresql,postgresql,select reltoastrelid <> 0 as has_toast_table   from pg_class where oid = 'test_storage'::regclass,alter_table.sql,SAME,,"[(True,)]"
postgresql,postgresql,"create index test_storage_idx on test_storage (b, a)",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table test_storage alter column a set storage external,alter_table.sql,SAME,,[]
postgresql,postgresql,"select relname, conname, coninhcount, conislocal, connoinherit   from pg_constraint c, pg_class r   where relname like 'test_inh_check%' and c.conrelid = r.oid   order by 1, 2",alter_table.sql,SAME,,"[('test_inh_check', 'test_inh_check_a_check', 0, True, False), ('test_inh_check_child', 'test_inh_check_a_check', 1, False, False)]"
postgresql,postgresql,ALTER TABLE test_inh_check ALTER COLUMN a TYPE numeric,alter_table.sql,SAME,,[]
postgresql,postgresql,"select relname, conname, coninhcount, conislocal, connoinherit   from pg_constraint c, pg_class r   where relname like 'test_inh_check%' and c.conrelid = r.oid   order by 1, 2",alter_table.sql,SAME,,"[('test_inh_check', 'test_inh_check_a_check', 0, True, False), ('test_inh_check_child', 'test_inh_check_a_check', 1, False, False)]"
postgresql,postgresql,ALTER TABLE test_inh_check ADD CONSTRAINT bnoinherit CHECK (b > 100) NO INHERIT,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_inh_check_child ADD CONSTRAINT blocal CHECK (b < 1000),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_inh_check_child ADD CONSTRAINT bmerged CHECK (b > 1),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_inh_check ADD CONSTRAINT bmerged CHECK (b > 1),alter_table.sql,SAME,,[]
postgresql,postgresql,"select relname, conname, coninhcount, conislocal, connoinherit   from pg_constraint c, pg_class r   where relname like 'test_inh_check%' and c.conrelid = r.oid   order by 1, 2",alter_table.sql,SAME,,"[('test_inh_check', 'bmerged', 0, True, False), ('test_inh_check', 'bnoinherit', 0, True, True), ('test_inh_check', 'test_inh_check_a_check', 0, True, False), ('test_inh_check_child', 'blocal', 0, True, False), ('test_inh_check_child', 'bmerged', 1, True, False), ('test_inh_check_child', 'test_inh_check_a_check', 1, False, False)]"
postgresql,postgresql,ALTER TABLE test_inh_check ALTER COLUMN b TYPE numeric,alter_table.sql,SAME,,[]
postgresql,postgresql,"select relname, conname, coninhcount, conislocal, connoinherit   from pg_constraint c, pg_class r   where relname like 'test_inh_check%' and c.conrelid = r.oid   order by 1, 2",alter_table.sql,SAME,,"[('test_inh_check', 'bmerged', 0, True, False), ('test_inh_check', 'bnoinherit', 0, True, True), ('test_inh_check', 'test_inh_check_a_check', 0, True, False), ('test_inh_check_child', 'blocal', 0, True, False), ('test_inh_check_child', 'bmerged', 1, True, False), ('test_inh_check_child', 'test_inh_check_a_check', 1, False, False)]"
postgresql,postgresql,ALTER TABLE test_type_diff ADD COLUMN f2 int,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_type_diff ALTER COLUMN f2 TYPE bigint USING f2::bigint,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_type_diff2_c1 INHERIT test_type_diff2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_type_diff2_c2 INHERIT test_type_diff2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_type_diff2_c3 INHERIT test_type_diff2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_type_diff2 ALTER COLUMN int_four TYPE int8 USING int_four::int8,alter_table.sql,SAME,,[]
postgresql,postgresql,BEGIN,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE check_fk_presence_2 DROP CONSTRAINT check_fk_presence_2_id_fkey,alter_table.sql,SAME,,[]
postgresql,postgresql,ANALYZE check_fk_presence_2,alter_table.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,alter_table.sql,SAME,,[]
postgresql,postgresql,create view at_view_1 as select * from at_base_table bt,alter_table.sql,SAME,,[]
postgresql,postgresql,"create view at_view_2 as select *, to_json(v1) as j from at_view_1 v1",alter_table.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from at_view_2",alter_table.sql,SAME,,"[('Seq Scan on public.at_base_table bt',), ('  Output: bt.id, bt.stuff, to_json(ROW(bt.id, bt.stuff))',)]"
postgresql,postgresql,select * from at_view_2,alter_table.sql,SAME,,"[(23, 'skidoo', {'id': 23, 'stuff': 'skidoo'})]"
postgresql,postgresql,"create or replace view at_view_1 as select *, 2+2 as more from at_base_table bt",alter_table.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from at_view_2",alter_table.sql,SAME,,"[('Seq Scan on public.at_base_table bt',), ('  Output: bt.id, bt.stuff, to_json(ROW(bt.id, bt.stuff, 4))',)]"
postgresql,postgresql,select * from at_view_2,alter_table.sql,SAME,,"[(23, 'skidoo', {'id': 23, 'stuff': 'skidoo', 'more': 4})]"
postgresql,postgresql,drop view at_view_2,alter_table.sql,SAME,,[]
postgresql,postgresql,drop view at_view_1,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,END,alter_table.sql,SAME,,[]
postgresql,postgresql,"create type lockmodes as enum (  'SIReadLock' ,'AccessShareLock' ,'RowShareLock' ,'RowExclusiveLock' ,'ShareUpdateExclusiveLock' ,'ShareLock' ,'ShareRowExclusiveLock' ,'ExclusiveLock' ,'AccessExclusiveLock' )",alter_table.sql,SAME,,[]
postgresql,postgresql,"create or replace view my_locks as select case when c.relname like 'pg_toast%' then 'pg_toast' else c.relname end, max(mode::lockmodes) as max_lockmode from pg_locks l join pg_class c on l.relation = c.oid where virtualtransaction = (         select virtualtransaction         from pg_locks         where transactionid = pg_current_xact_id()::xid) and locktype = 'relation' and relnamespace != (select oid from pg_namespace where nspname = 'pg_catalog') and c.relname != 'my_locks' group by c.relname",alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock alter column f2 set statistics 150,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock cluster on alterlock_pkey,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareUpdateExclusiveLock'), ('alterlock_pkey', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,commit,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock set without cluster,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,commit,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock set (fillfactor = 100),alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareUpdateExclusiveLock'), ('pg_toast', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,commit,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock reset (fillfactor),alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareUpdateExclusiveLock'), ('pg_toast', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,commit,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock set (toast.autovacuum_enabled = off),alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareUpdateExclusiveLock'), ('pg_toast', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,commit,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock set (autovacuum_enabled = off),alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareUpdateExclusiveLock'), ('pg_toast', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,commit,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock alter column f2 set (n_distinct = 1),alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,"alter table alterlock set (autovacuum_enabled = off, fillfactor = 80)",alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareUpdateExclusiveLock'), ('pg_toast', 'ShareUpdateExclusiveLock')]"
postgresql,postgresql,commit,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock alter column f2 set storage extended,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'AccessExclusiveLock')]"
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock alter column f2 set default 'x',alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'AccessExclusiveLock')]"
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock2 add foreign key (f1) references alterlock (f1),alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareRowExclusiveLock'), ('alterlock2', 'ShareRowExclusiveLock'), ('alterlock2_pkey', 'AccessShareLock'), ('alterlock_pkey', 'AccessShareLock')]"
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock2 add constraint alterlock2nv foreign key (f1) references alterlock (f1) NOT VALID,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'ShareRowExclusiveLock'), ('alterlock2', 'ShareRowExclusiveLock')]"
postgresql,postgresql,commit,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alterlock2 validate constraint alterlock2nv,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('alterlock', 'RowShareLock'), ('alterlock2', 'ShareUpdateExclusiveLock'), ('alterlock2_pkey', 'AccessShareLock'), ('alterlock_pkey', 'AccessShareLock')]"
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,"create or replace view my_locks as select case when c.relname like 'pg_toast%' then 'pg_toast' else c.relname end, max(mode::lockmodes) as max_lockmode from pg_locks l join pg_class c on l.relation = c.oid where virtualtransaction = (         select virtualtransaction         from pg_locks         where transactionid = pg_current_xact_id()::xid) and locktype = 'relation' and relnamespace != (select oid from pg_namespace where nspname = 'pg_catalog') and c.relname = 'my_locks' group by c.relname",alter_table.sql,SAME,,[]
postgresql,postgresql,alter table my_locks reset (autovacuum_enabled),alter_table.sql,SAME,,[]
postgresql,postgresql,alter view my_locks reset (autovacuum_enabled),alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter view my_locks set (security_barrier=off),alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('my_locks', 'AccessExclusiveLock')]"
postgresql,postgresql,alter view my_locks reset (security_barrier),alter_table.sql,SAME,,[]
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,begin,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table my_locks set (security_barrier=off),alter_table.sql,SAME,,[]
postgresql,postgresql,select * from my_locks order by 1,alter_table.sql,SAME,,"[('my_locks', 'AccessExclusiveLock')]"
postgresql,postgresql,alter table my_locks reset (security_barrier),alter_table.sql,SAME,,[]
postgresql,postgresql,rollback,alter_table.sql,SAME,,[]
postgresql,postgresql,drop view my_locks,alter_table.sql,SAME,,[]
postgresql,postgresql,drop type lockmodes,alter_table.sql,SAME,,[]
postgresql,postgresql,create schema alter1,alter_table.sql,SAME,,[]
postgresql,postgresql,create schema alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,create view alter1.v1 as select * from alter1.t1,alter_table.sql,SAME,,[]
postgresql,postgresql,create function alter1.plus1(int) returns int as 'select $1+1' language sql,alter_table.sql,SAME,,[]
postgresql,postgresql,create domain alter1.posint integer check (value > 0),alter_table.sql,SAME,,[]
postgresql,postgresql,"create type alter1.ctype as (f1 int, f2 text)",alter_table.sql,SAME,,[]
postgresql,postgresql,"create function alter1.same(alter1.ctype, alter1.ctype) returns boolean language sql as 'select $1.f1 is not distinct from $2.f1 and $1.f2 is not distinct from $2.f2'",alter_table.sql,SAME,,[]
postgresql,postgresql,"create operator alter1.=(procedure = alter1.same, leftarg  = alter1.ctype, rightarg = alter1.ctype)",alter_table.sql,SAME,,[]
postgresql,postgresql,create conversion alter1.latin1_to_utf8 for 'latin1' to 'utf8' from iso8859_1_to_utf8,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alter1.t1 set schema alter1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alter1.t1 set schema alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alter1.v1 set schema alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,alter function alter1.plus1(int) set schema alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,alter domain alter1.posint set schema alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,"alter operator alter1.=(alter1.ctype, alter1.ctype) set schema alter2",alter_table.sql,SAME,,[]
postgresql,postgresql,"alter function alter1.same(alter1.ctype, alter1.ctype) set schema alter2",alter_table.sql,SAME,,[]
postgresql,postgresql,alter type alter1.ctype set schema alter1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter type alter1.ctype set schema alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,alter conversion alter1.latin1_to_utf8 set schema alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,drop schema alter1,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from alter2.t1,alter_table.sql,SAME,,"[(1, 11), (2, 12), (3, 13), (4, 14)]"
postgresql,postgresql,select * from alter2.v1,alter_table.sql,SAME,,"[(1, 11), (2, 12), (3, 13), (4, 14)]"
postgresql,postgresql,select alter2.plus1(41),alter_table.sql,SAME,,"[(42,)]"
postgresql,postgresql,drop schema alter2 cascade,alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE test_type AS (a int),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type ADD ATTRIBUTE b text,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type ALTER ATTRIBUTE b SET DATA TYPE varchar,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type ALTER ATTRIBUTE b SET DATA TYPE integer,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type DROP ATTRIBUTE b,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type DROP ATTRIBUTE IF EXISTS c,alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TYPE test_type DROP ATTRIBUTE a, ADD ATTRIBUTE d boolean",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type RENAME ATTRIBUTE d TO dd,alter_table.sql,SAME,,[]
postgresql,postgresql,DROP TYPE test_type,alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE test_type1 AS (a int, b text)",alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX test_tbl1_idx ON test_tbl1((row(x,y)::test_type1))",alter_table.sql,SAME,,[]
postgresql,postgresql,DROP TYPE test_type1,alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE test_type2 AS (a int, b text)",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type2 ADD ATTRIBUTE c text CASCADE,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type2 ALTER ATTRIBUTE b TYPE varchar CASCADE,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type2 DROP ATTRIBUTE b CASCADE,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_type2 RENAME ATTRIBUTE a TO aa CASCADE,alter_table.sql,SAME,,[]
postgresql,postgresql,DROP TYPE test_type2,alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE test_typex AS (a int, b text)",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test_typex DROP ATTRIBUTE a CASCADE,alter_table.sql,SAME,,[]
postgresql,postgresql,DROP TYPE test_typex,alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE test_type3 AS (a int),alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TYPE test_type3 DROP ATTRIBUTE a, ADD ATTRIBUTE b int",alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE test_type_empty AS (),alter_table.sql,SAME,,[]
postgresql,postgresql,DROP TYPE test_type_empty,alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE tt_t0 AS (z inet, x int, y numeric(8,2))",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE tt_t0 DROP ATTRIBUTE z,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt7 DROP q,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt0 OF tt_t0,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt7 OF tt_t0,alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE tt_t1 AS (x int, y numeric(8,2))",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt7 OF tt_t1,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt7 NOT OF,alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ONLY test_drop_constr_parent DROP CONSTRAINT ""test_drop_constr_parent_c_check""",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 ADD COLUMN f int,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 ADD CONSTRAINT xxx PRIMARY KEY(f),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 ADD CHECK (f BETWEEN 0 AND 10),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 ALTER COLUMN f SET DEFAULT 0,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 RENAME COLUMN f TO f1,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 SET SCHEMA alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 ADD COLUMN f int,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 ADD CONSTRAINT xxx PRIMARY KEY(f),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 ADD CHECK (f BETWEEN 0 AND 10),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 ALTER COLUMN f SET DEFAULT 0,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 RENAME COLUMN f TO f1,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE IF EXISTS tt8 SET SCHEMA alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt9 ADD CHECK(c > 1),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt9 ADD CHECK(c > 2),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt9 ADD CONSTRAINT foo CHECK(c > 3),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt9 ADD UNIQUE(c),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt9 ADD UNIQUE(c),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt9 ADD CONSTRAINT tt9_c_key2 CHECK(c > 6),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt9 ADD UNIQUE(c),alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX comment_test_index ON comment_test(indexed_col),alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON COLUMN comment_test.id IS 'Column ''id'' on comment_test',alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON INDEX comment_test_index IS 'Simple index on comment_test',alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON CONSTRAINT comment_test_positive_col_check ON comment_test IS 'CHECK constraint on comment_test.positive_col',alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON CONSTRAINT comment_test_pk ON comment_test IS 'PRIMARY KEY constraint of comment_test',alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON INDEX comment_test_pk IS 'Index backing the PRIMARY KEY of comment_test',alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT col_description('comment_test'::regclass, 1) as comment",alter_table.sql,SAME,,"[(""Column 'id' on comment_test"",)]"
postgresql,postgresql,"SELECT indexrelid::regclass::text as index, obj_description(indexrelid, 'pg_class') as comment FROM pg_index where indrelid = 'comment_test'::regclass ORDER BY 1, 2",alter_table.sql,SAME,,"[('comment_test_index', 'Simple index on comment_test'), ('comment_test_pk', 'Index backing the PRIMARY KEY of comment_test')]"
postgresql,postgresql,"SELECT conname as constraint, obj_description(oid, 'pg_constraint') as comment FROM pg_constraint where conrelid = 'comment_test'::regclass ORDER BY 1, 2",alter_table.sql,SAME,,"[('comment_test_pk', 'PRIMARY KEY constraint of comment_test'), ('comment_test_positive_col_check', 'CHECK constraint on comment_test.positive_col')]"
postgresql,postgresql,ALTER TABLE comment_test ALTER COLUMN indexed_col SET DATA TYPE int,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE comment_test ALTER COLUMN indexed_col SET DATA TYPE text,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE comment_test ALTER COLUMN id SET DATA TYPE int,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE comment_test ALTER COLUMN id SET DATA TYPE text,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE comment_test ALTER COLUMN positive_col SET DATA TYPE int,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE comment_test ALTER COLUMN positive_col SET DATA TYPE bigint,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT col_description('comment_test'::regclass, 1) as comment",alter_table.sql,SAME,,"[(""Column 'id' on comment_test"",)]"
postgresql,postgresql,"SELECT indexrelid::regclass::text as index, obj_description(indexrelid, 'pg_class') as comment FROM pg_index where indrelid = 'comment_test'::regclass ORDER BY 1, 2",alter_table.sql,SAME,,"[('comment_test_index', 'Simple index on comment_test'), ('comment_test_pk', 'Index backing the PRIMARY KEY of comment_test')]"
postgresql,postgresql,"SELECT conname as constraint, obj_description(oid, 'pg_constraint') as comment FROM pg_constraint where conrelid = 'comment_test'::regclass ORDER BY 1, 2",alter_table.sql,SAME,,"[('comment_test_pk', 'PRIMARY KEY constraint of comment_test'), ('comment_test_positive_col_check', 'CHECK constraint on comment_test.positive_col')]"
postgresql,postgresql,CREATE INDEX comment_test_child_fk ON comment_test_child(id),alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON COLUMN comment_test_child.id IS 'Column ''id'' on comment_test_child',alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON INDEX comment_test_child_fk IS 'Index backing the FOREIGN KEY of comment_test_child',alter_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON CONSTRAINT comment_test_child_fk ON comment_test_child IS 'FOREIGN KEY constraint of comment_test_child',alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE comment_test ALTER COLUMN id SET DATA TYPE text,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT col_description('comment_test_child'::regclass, 1) as comment",alter_table.sql,SAME,,"[(""Column 'id' on comment_test_child"",)]"
postgresql,postgresql,"SELECT indexrelid::regclass::text as index, obj_description(indexrelid, 'pg_class') as comment FROM pg_index where indrelid = 'comment_test_child'::regclass ORDER BY 1, 2",alter_table.sql,SAME,,"[('comment_test_child_fk', 'Index backing the FOREIGN KEY of comment_test_child')]"
postgresql,postgresql,"SELECT conname as constraint, obj_description(oid, 'pg_constraint') as comment FROM pg_constraint where conrelid = 'comment_test_child'::regclass ORDER BY 1, 2",alter_table.sql,SAME,,"[('comment_test_child_fk', 'FOREIGN KEY constraint of comment_test_child')]"
postgresql,postgresql,"CREATE TEMP TABLE filenode_mapping AS SELECT     oid, mapped_oid, reltablespace, relfilenode, relname FROM pg_class,     pg_filenode_relation(reltablespace, pg_relation_filenode(oid)) AS mapped_oid WHERE relkind IN ('r', 'i', 'S', 't', 'm') AND mapped_oid IS DISTINCT FROM oid",alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT m.* FROM filenode_mapping m LEFT JOIN pg_class c ON c.oid = m.oid WHERE c.oid IS NOT NULL OR m.mapped_oid IS NOT NULL,alter_table.sql,SAME,,[]
postgresql,postgresql,SHOW allow_system_table_mods,alter_table.sql,SAME,,"[('off',)]"
postgresql,postgresql,ALTER TABLE new_system_table SET SCHEMA public,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE new_system_table RENAME TO old_system_table,alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX old_system_table__othercol ON old_system_table (othercol),alter_table.sql,SAME,,[]
postgresql,postgresql,UPDATE old_system_table SET id = -id,alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM old_system_table WHERE othercol = 'somedata',alter_table.sql,SAME,,[]
postgresql,postgresql,TRUNCATE old_system_table,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE old_system_table DROP CONSTRAINT new_system_table_pkey,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE old_system_table DROP COLUMN othercol,alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE UNLOGGED TABLE unlogged1(f1 SERIAL PRIMARY KEY, f2 TEXT)",alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relkind, relpersistence FROM pg_class WHERE relname ~ '^unlogged1' UNION ALL SELECT r.relname || ' toast table', t.relkind, t.relpersistence FROM pg_class r JOIN pg_class t ON t.oid = r.reltoastrelid WHERE r.relname ~ '^unlogged1' UNION ALL SELECT r.relname || ' toast index', ri.relkind, ri.relpersistence FROM pg_class r join pg_class t ON t.oid = r.reltoastrelid JOIN pg_index i ON i.indrelid = t.oid JOIN pg_class ri ON ri.oid = i.indexrelid WHERE r.relname ~ '^unlogged1' ORDER BY relname",alter_table.sql,SAME,,"[('unlogged1', 'r', 'u'), ('unlogged1 toast index', 'i', 'u'), ('unlogged1 toast table', 't', 'u'), ('unlogged1_f1_seq', 'S', 'u'), ('unlogged1_pkey', 'i', 'u')]"
postgresql,postgresql,"CREATE UNLOGGED TABLE unlogged2(f1 SERIAL PRIMARY KEY, f2 INTEGER REFERENCES unlogged1)",alter_table.sql,SAME,,[]
postgresql,postgresql,"CREATE UNLOGGED TABLE unlogged3(f1 SERIAL PRIMARY KEY, f2 INTEGER REFERENCES unlogged3)",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE unlogged3 SET LOGGED,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE unlogged1 SET LOGGED,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relkind, relpersistence FROM pg_class WHERE relname ~ '^unlogged1' UNION ALL SELECT r.relname || ' toast table', t.relkind, t.relpersistence FROM pg_class r JOIN pg_class t ON t.oid = r.reltoastrelid WHERE r.relname ~ '^unlogged1' UNION ALL SELECT r.relname || ' toast index', ri.relkind, ri.relpersistence FROM pg_class r join pg_class t ON t.oid = r.reltoastrelid JOIN pg_index i ON i.indrelid = t.oid JOIN pg_class ri ON ri.oid = i.indexrelid WHERE r.relname ~ '^unlogged1' ORDER BY relname",alter_table.sql,SAME,,"[('unlogged1', 'r', 'p'), ('unlogged1 toast index', 'i', 'p'), ('unlogged1 toast table', 't', 'p'), ('unlogged1_f1_seq', 'S', 'p'), ('unlogged1_pkey', 'i', 'p')]"
postgresql,postgresql,ALTER TABLE unlogged1 SET LOGGED,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relkind, relpersistence FROM pg_class WHERE relname ~ '^logged1' UNION ALL SELECT r.relname || ' toast table', t.relkind, t.relpersistence FROM pg_class r JOIN pg_class t ON t.oid = r.reltoastrelid WHERE r.relname ~ '^logged1' UNION ALL SELECT r.relname ||' toast index', ri.relkind, ri.relpersistence FROM pg_class r join pg_class t ON t.oid = r.reltoastrelid JOIN pg_index i ON i.indrelid = t.oid JOIN pg_class ri ON ri.oid = i.indexrelid WHERE r.relname ~ '^logged1' ORDER BY relname",alter_table.sql,SAME,,"[('logged1', 'r', 'p'), ('logged1 toast index', 'i', 'p'), ('logged1 toast table', 't', 'p'), ('logged1_f1_seq', 'S', 'p'), ('logged1_pkey', 'i', 'p')]"
postgresql,postgresql,ALTER TABLE logged3 SET UNLOGGED,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE logged2 SET UNLOGGED,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE logged1 SET UNLOGGED,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relkind, relpersistence FROM pg_class WHERE relname ~ '^logged1' UNION ALL SELECT r.relname || ' toast table', t.relkind, t.relpersistence FROM pg_class r JOIN pg_class t ON t.oid = r.reltoastrelid WHERE r.relname ~ '^logged1' UNION ALL SELECT r.relname || ' toast index', ri.relkind, ri.relpersistence FROM pg_class r join pg_class t ON t.oid = r.reltoastrelid JOIN pg_index i ON i.indrelid = t.oid JOIN pg_class ri ON ri.oid = i.indexrelid WHERE r.relname ~ '^logged1' ORDER BY relname",alter_table.sql,SAME,,"[('logged1', 'r', 'u'), ('logged1 toast index', 'i', 'u'), ('logged1 toast table', 't', 'u'), ('logged1_f1_seq', 'S', 'u'), ('logged1_pkey', 'i', 'u')]"
postgresql,postgresql,ALTER TABLE logged1 SET UNLOGGED,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_add_column 	ADD COLUMN c2 integer,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_add_column 	ADD COLUMN IF NOT EXISTS c2 integer,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY test_add_column 	ADD COLUMN IF NOT EXISTS c2 integer,alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE test_add_column 	ADD COLUMN IF NOT EXISTS c2 integer,  	ADD COLUMN c3 integer primary key",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE test_add_column 	ADD COLUMN IF NOT EXISTS c2 integer,  	ADD COLUMN IF NOT EXISTS c3 integer primary key",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE test_add_column 	ADD COLUMN IF NOT EXISTS c2 integer,  	ADD COLUMN IF NOT EXISTS c3 integer,  	ADD COLUMN c4 integer REFERENCES test_add_column",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_add_column 	ADD COLUMN IF NOT EXISTS c4 integer REFERENCES test_add_column,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_add_column 	ADD COLUMN IF NOT EXISTS c5 SERIAL CHECK (c5 > 8),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_add_column 	ADD COLUMN IF NOT EXISTS c5 SERIAL CHECK (c5 > 10),alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ataddindexi0 ON ataddindex(f1),alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ataddindex   ADD PRIMARY KEY USING INDEX ataddindexi0,   ALTER f1 TYPE BIGINT",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ataddindex   ALTER f1 SET DATA TYPE TEXT,   ADD EXCLUDE ((f1 LIKE 'a') WITH =)",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ataddindex   ADD PRIMARY KEY (id),   ADD FOREIGN KEY (ref_id) REFERENCES ataddindex",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ataddindex   ADD UNIQUE (id),   ADD FOREIGN KEY (ref_id) REFERENCES ataddindex (id)",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE atnotnull1   ADD COLUMN a INT,   ALTER a SET NOT NULL",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE atnotnull1   ADD COLUMN c INT,   ADD PRIMARY KEY (c)",alter_table.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temp_parted (a int) PARTITION BY LIST (a),alter_table.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE mytype AS (a int),alter_table.sql,SAME,,[]
postgresql,postgresql,DROP TYPE mytype CASCADE,alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE fail_part ALTER b TYPE char (2) COLLATE ""POSIX""",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fail_part ADD CONSTRAINT check_a CHECK (a >= 0),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted ATTACH PARTITION part_1 FOR VALUES IN (1),alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT attislocal, attinhcount FROM pg_attribute WHERE attrelid = 'part_1'::regclass AND attnum > 0",alter_table.sql,SAME,,"[(False, 1), (False, 1)]"
postgresql,postgresql,"SELECT conislocal, coninhcount FROM pg_constraint WHERE conrelid = 'part_1'::regclass AND conname = 'check_a'",alter_table.sql,SAME,,"[(False, 1)]"
postgresql,postgresql,ALTER TABLE list_parted ATTACH PARTITION def_part DEFAULT,alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM part_2,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 ATTACH PARTITION part_2 FOR VALUES IN (2),alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM list_parted2_def WHERE a = 11,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 ATTACH PARTITION part_3 FOR VALUES IN (11),alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE list_parted2 ATTACH PARTITION part_3_4 FOR VALUES IN (3, 4)",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 DETACH PARTITION part_3_4,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_3_4 ALTER a SET NOT NULL,alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE list_parted2 ATTACH PARTITION part_3_4 FOR VALUES IN (3, 4)",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE list_parted2_def ADD CONSTRAINT check_a CHECK (a IN (5, 6))",alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM part1,alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE range_parted ATTACH PARTITION part1 FOR VALUES FROM (1, 1) TO (1, 10)",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE range_parted ATTACH PARTITION part2 FOR VALUES FROM (1, 10) TO (1, 20)",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE range_parted ATTACH partition part3 FOR VALUES FROM (3, 10) TO (3, 20)",alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM part_5_a WHERE a NOT IN (3),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_5 ADD CONSTRAINT check_a CHECK (a IS NOT NULL AND a = 5),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 ATTACH PARTITION part_5 FOR VALUES IN (5),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 DETACH PARTITION part_5,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_5 DROP CONSTRAINT check_a,alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE part_5 ADD CONSTRAINT check_a CHECK (a IN (5)), ALTER a SET NOT NULL",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 ATTACH PARTITION part_5 FOR VALUES IN (5),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_6 DROP c,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 ATTACH PARTITION part_6 FOR VALUES IN (6),alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE part_7_a_null DROP c, DROP d, DROP e",alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE part_7 ATTACH PARTITION part_7_a_null FOR VALUES IN ('a', null)",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 ATTACH PARTITION part_7 FOR VALUES IN (7),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 DETACH PARTITION part_7,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_7 DROP CONSTRAINT check_a,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, a, b FROM part_7 order by a",alter_table.sql,SAME,,"[('part_7_a_null', 8, None), ('part_7_a_null', 9, 'a')]"
postgresql,postgresql,ALTER TABLE part_5 DROP CONSTRAINT check_a,alter_table.sql,SAME,,[]
postgresql,postgresql,DELETE FROM part5_def_p1 WHERE b = 'y',alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_5 ATTACH PARTITION part5_p1 FOR VALUES IN ('y'),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE quuux ATTACH PARTITION quuux1 FOR VALUES IN (1),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE quuux ATTACH PARTITION quuux2 FOR VALUES IN (2),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 DETACH PARTITION part_3_4,alter_table.sql,SAME,,[]
postgresql,postgresql,"SELECT attinhcount, attislocal FROM pg_attribute WHERE attrelid = 'part_3_4'::regclass AND attnum > 0",alter_table.sql,SAME,,"[(0, True), (0, True)]"
postgresql,postgresql,"SELECT coninhcount, conislocal FROM pg_constraint WHERE conrelid = 'part_3_4'::regclass AND conname = 'check_a'",alter_table.sql,SAME,,"[(0, True)]"
postgresql,postgresql,ALTER TABLE range_parted2 DETACH PARTITION part_rp,alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT * from part_rp,alter_table.sql,SAME,,[]
postgresql,postgresql,BEGIN,alter_table.sql,SAME,,[]
postgresql,postgresql,COMMIT,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE range_parted2 DETACH PARTITION part_rp CONCURRENTLY,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE range_parted2 DETACH PARTITION part_rp100 CONCURRENTLY,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 ALTER b SET NOT NULL,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted2 ADD CONSTRAINT check_b CHECK (b <> 'zz'),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY parted_no_parts ALTER a SET NOT NULL,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY parted_no_parts ADD CONSTRAINT check_a CHECK (a > 0),alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY parted_no_parts ALTER a DROP NOT NULL,alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY parted_no_parts DROP CONSTRAINT check_a,alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE list_parted2 ALTER b SET NOT NULL, ADD CONSTRAINT check_a2 CHECK (a > 0)",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE list_parted DROP COLUMN b,alter_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM list_parted,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table p11 drop a,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table p11 add a int,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table p11 drop a,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table p11 add a int not null,alter_table.sql,SAME,,[]
postgresql,postgresql,"select attrelid::regclass, attname, attnum from pg_attribute where attname = 'a'  and (attrelid = 'p'::regclass    or attrelid = 'p1'::regclass    or attrelid = 'p11'::regclass) order by attrelid::regclass::text",alter_table.sql,SAME,,"[('p', 'a', 1), ('p1', 'a', 2), ('p11', 'a', 4)]"
postgresql,postgresql,alter table p1 attach partition p11 for values from (2) to (5),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table parted_validate_test add constraint parted_validate_test_chka check (a > 0) not valid,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table parted_validate_test validate constraint parted_validate_test_chka,alter_table.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE attmp ALTER COLUMN i SET (n_distinct = 1, n_distinct_inherited = 2)",alter_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE attmp ALTER COLUMN i RESET (n_distinct_inherited),alter_table.sql,SAME,,[]
postgresql,postgresql,ANALYZE attmp,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table defpart_attach_test_d drop b,alter_table.sql,SAME,,[]
postgresql,postgresql,delete from defpart_attach_test_d where a = 1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table defpart_attach_test_d add check (a > 1),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table defpart_attach_test attach partition defpart_attach_test_d default,alter_table.sql,SAME,,[]
postgresql,postgresql,create temp table temp_part_parent (a int) partition by list (a),alter_table.sql,SAME,,[]
postgresql,postgresql,create temp table temp_part_child (a int),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table temp_part_parent attach partition temp_part_child default,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table bar2 add column b integer not null default 1,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table bar1 attach partition bar2 default,alter_table.sql,SAME,,[]
postgresql,postgresql,select * from bar1,alter_table.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,update bar1 set a = a + 1,alter_table.sql,SAME,,[]
postgresql,postgresql,cluster attbl using pk_attbl,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table attbl alter column p1 set data type bigint,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atref alter column c1 set data type bigint,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table attbl replica identity using index pk_attbl,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table attbl alter column p1 set data type bigint,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table atref alter column c1 set data type bigint,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alttype_cluster add primary key (a),alter_table.sql,SAME,,[]
postgresql,postgresql,create index alttype_cluster_ind on alttype_cluster (a),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alttype_cluster cluster on alttype_cluster_ind,alter_table.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indisclustered from pg_index   where indrelid = 'alttype_cluster'::regclass   order by indexrelid::regclass::text",alter_table.sql,SAME,,"[('alttype_cluster_ind', True), ('alttype_cluster_pkey', False)]"
postgresql,postgresql,alter table alttype_cluster alter a type bigint,alter_table.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indisclustered from pg_index   where indrelid = 'alttype_cluster'::regclass   order by indexrelid::regclass::text",alter_table.sql,SAME,,"[('alttype_cluster_ind', True), ('alttype_cluster_pkey', False)]"
postgresql,postgresql,alter table alttype_cluster cluster on alttype_cluster_pkey,alter_table.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indisclustered from pg_index   where indrelid = 'alttype_cluster'::regclass   order by indexrelid::regclass::text",alter_table.sql,SAME,,"[('alttype_cluster_ind', False), ('alttype_cluster_pkey', True)]"
postgresql,postgresql,alter table alttype_cluster alter a type int,alter_table.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indisclustered from pg_index   where indrelid = 'alttype_cluster'::regclass   order by indexrelid::regclass::text",alter_table.sql,SAME,,"[('alttype_cluster_ind', False), ('alttype_cluster_pkey', True)]"
postgresql,postgresql,alter table target_parted attach partition attach_parted for values in (1),alter_table.sql,SAME,,[]
postgresql,postgresql,alter table target_parted detach partition attach_parted,alter_table.sql,SAME,,[]
postgresql,postgresql,create schema alter1,alter_table.sql,SAME,,[]
postgresql,postgresql,create schema alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,set client_min_messages = 'ERROR',alter_table.sql,SAME,,[]
postgresql,postgresql,reset client_min_messages,alter_table.sql,SAME,,[]
postgresql,postgresql,alter table alter1.t1 set schema alter2,alter_table.sql,SAME,,[]
postgresql,postgresql,drop schema alter1 cascade,alter_table.sql,SAME,,[]
postgresql,postgresql,drop schema alter2 cascade,alter_table.sql,SAME,,[]
postgresql,postgresql,"select amname, prop, pg_indexam_has_property(a.oid, prop) as p   from pg_am a,        unnest(array['can_order', 'can_unique', 'can_multi_col',                     'can_exclude', 'can_include', 'bogus']::text[])          with ordinality as u(prop,ord)  where amtype = 'i'  order by amname, ord",amutils.sql,SAME,,"[('brin', 'can_order', False), ('brin', 'can_unique', False), ('brin', 'can_multi_col', True), ('brin', 'can_exclude', False), ('brin', 'can_include', False), ('brin', 'bogus', None), ('btree', 'can_order', True), ('btree', 'can_unique', True), ('btree', 'can_multi_col', True), ('btree', 'can_exclude', True), ('btree', 'can_include', True), ('btree', 'bogus', None), ('gin', 'can_order', False), ('gin', 'can_unique', False), ('gin', 'can_multi_col', True), ('gin', 'can_exclude', False), ('gin', 'can_include', False), ('gin', 'bogus', None), ('gist', 'can_order', False), ('gist', 'can_unique', False), ('gist', 'can_multi_col', True), ('gist', 'can_exclude', True), ('gist', 'can_include', True), ('gist', 'bogus', None), ('hash', 'can_order', False), ('hash', 'can_unique', False), ('hash', 'can_multi_col', False), ('hash', 'can_exclude', True), ('hash', 'can_include', False), ('hash', 'bogus', None), ('spgist', 'can_order', False), ('spgist', 'can_unique', False), ('spgist', 'can_multi_col', False), ('spgist', 'can_exclude', True), ('spgist', 'can_include', True), ('spgist', 'bogus', None)]"
postgresql,postgresql,"CREATE TEMP TABLE foo (f1 int, f2 int, f3 int, f4 int)",amutils.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX fooindex ON foo (f1 desc, f2 asc, f3 nulls first, f4 nulls last)",amutils.sql,SAME,,[]
postgresql,postgresql,"select col, prop, pg_index_column_has_property(o, col, prop)   from (values ('fooindex'::regclass)) v1(o),        (values (1,'orderable'),(2,'asc'),(3,'desc'),                (4,'nulls_first'),(5,'nulls_last'),                (6, 'bogus')) v2(idx,prop),        generate_series(1,4) col  order by col, idx",amutils.sql,SAME,,"[(1, 'orderable', True), (1, 'asc', False), (1, 'desc', True), (1, 'nulls_first', True), (1, 'nulls_last', False), (1, 'bogus', None), (2, 'orderable', True), (2, 'asc', True), (2, 'desc', False), (2, 'nulls_first', False), (2, 'nulls_last', True), (2, 'bogus', None), (3, 'orderable', True), (3, 'asc', True), (3, 'desc', False), (3, 'nulls_first', True), (3, 'nulls_last', False), (3, 'bogus', None), (4, 'orderable', True), (4, 'asc', True), (4, 'desc', False), (4, 'nulls_first', False), (4, 'nulls_last', True), (4, 'bogus', None)]"
postgresql,postgresql,"CREATE INDEX foocover ON foo (f1) INCLUDE (f2,f3)",amutils.sql,SAME,,[]
postgresql,postgresql,"select col, prop, pg_index_column_has_property(o, col, prop)   from (values ('foocover'::regclass)) v1(o),        (values (1,'orderable'),(2,'asc'),(3,'desc'),                (4,'nulls_first'),(5,'nulls_last'),                (6,'distance_orderable'),(7,'returnable'),                (8, 'bogus')) v2(idx,prop),        generate_series(1,3) col  order by col, idx",amutils.sql,SAME,,"[(1, 'orderable', True), (1, 'asc', True), (1, 'desc', False), (1, 'nulls_first', False), (1, 'nulls_last', True), (1, 'distance_orderable', False), (1, 'returnable', True), (1, 'bogus', None), (2, 'orderable', False), (2, 'asc', None), (2, 'desc', None), (2, 'nulls_first', None), (2, 'nulls_last', None), (2, 'distance_orderable', False), (2, 'returnable', True), (2, 'bogus', None), (3, 'orderable', False), (3, 'asc', None), (3, 'desc', None), (3, 'nulls_first', None), (3, 'nulls_last', None), (3, 'distance_orderable', False), (3, 'returnable', True), (3, 'bogus', None)]"
postgresql,postgresql,ANALYZE array_op_test,arrays.sql,SAME,,[]
postgresql,postgresql,UPDATE arrtest SET e[0] = '1.1',arrays.sql,SAME,,[]
postgresql,postgresql,UPDATE arrtest SET e[1] = '2.2',arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM arrtest,arrays.sql,SAME,,"[([1, 2, 3, 4, 5], [[[0, 0], [1, 2]]], [], [], [1.1, 2.2], [], []), ([11, 12, 23], [[3, 4], [4, 5]], ['foobar'], [['elt1', 'elt2']], [3.4, 6.7], ['abc  ', 'abcde'], ['abc', 'abcde']), ([], [3, 4], ['foo', 'bar'], ['bar', 'foo'], None, None, None)]"
postgresql,postgresql,"SELECT arrtest.a[1],           arrtest.b[1][1][1],           arrtest.c[1],           arrtest.d[1][1],           arrtest.e[0]    FROM arrtest",arrays.sql,SAME,,"[(1, 0, None, None, 1.1), (11, None, 'foobar', 'elt1', None), (None, None, 'foo', None, None)]"
postgresql,postgresql,"SELECT a[1], b[1][1][1], c[1], d[1][1], e[0]    FROM arrtest",arrays.sql,SAME,,"[(1, 0, None, None, 1.1), (11, None, 'foobar', 'elt1', None), (None, None, 'foo', None, None)]"
postgresql,postgresql,"SELECT a[1:3],           b[1:1][1:2][1:2],           c[1:2],           d[1:1][1:2]    FROM arrtest",arrays.sql,SAME,,"[([1, 2, 3], [[[0, 0], [1, 2]]], [], []), ([11, 12, 23], [], ['foobar'], [['elt1', 'elt2']]), ([], [], ['foo', 'bar'], [])]"
postgresql,postgresql,"SELECT array_ndims(a) AS a,array_ndims(b) AS b,array_ndims(c) AS c    FROM arrtest",arrays.sql,SAME,,"[(1, 3, None), (1, 2, 1), (None, 1, 1)]"
postgresql,postgresql,"SELECT array_dims(a) AS a,array_dims(b) AS b,array_dims(c) AS c    FROM arrtest",arrays.sql,SAME,,"[('[1:5]', '[1:1][1:2][1:2]', None), ('[1:3]', '[1:2][1:2]', '[1:1]'), (None, '[1:2]', '[1:2]')]"
postgresql,postgresql,"SELECT *    FROM arrtest    WHERE a[1] < 5 and          c = '{""foobar""}'::_name",arrays.sql,SAME,,[]
postgresql,postgresql,"UPDATE arrtest   SET a[1:2] = '{16,25}'   WHERE NOT a = '{}'::_int2",arrays.sql,SAME,,[]
postgresql,postgresql,"UPDATE arrtest   SET b[1:1][1:1][1:2] = '{113, 117}',       b[1:1][1:2][2:2] = '{142, 147}'   WHERE array_dims(b) = '[1:1][1:2][1:2]'",arrays.sql,SAME,,[]
postgresql,postgresql,"UPDATE arrtest   SET c[2:2] = '{""new_word""}'   WHERE array_dims(c) is not null",arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT a,b,c FROM arrtest",arrays.sql,SAME,,"[([16, 25, 3, 4, 5], [[[113, 142], [1, 147]]], []), ([], [3, 4], ['foo', 'new_word']), ([16, 25, 23], [[3, 4], [4, 5]], ['foobar', 'new_word'])]"
postgresql,postgresql,"SELECT a[1:3],           b[1:1][1:2][1:2],           c[1:2],           d[1:1][2:2]    FROM arrtest",arrays.sql,SAME,,"[([16, 25, 3], [[[113, 142], [1, 147]]], [], []), ([], [], ['foo', 'new_word'], []), ([16, 25, 23], [], ['foobar', 'new_word'], [['elt2']])]"
postgresql,postgresql,"SELECT b[1:1][2][2],        d[1:1][2]    FROM arrtest",arrays.sql,SAME,,"[([[[113, 142], [1, 147]]], []), ([], []), ([], [['elt1', 'elt2']])]"
postgresql,postgresql,SELECT a FROM arrtest,arrays.sql,SAME,,"[([16, 25, 3, 4, 5],), ([],), ([16, 25, 23],), ([1, None, 3],)]"
postgresql,postgresql,UPDATE arrtest SET a[4] = NULL WHERE a[2] IS NULL,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT a FROM arrtest WHERE a[2] IS NULL,arrays.sql,SAME,,"[([None],), ([1, None, 3, None],)]"
postgresql,postgresql,DELETE FROM arrtest WHERE a[2] IS NULL AND b IS NULL,arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT a,b,c FROM arrtest",arrays.sql,SAME,,"[([16, 25, 3, 4, 5], [[[113, 142], [1, 147]]], []), ([16, 25, 23], [[3, 4], [4, 5]], ['foobar', 'new_word']), ([None], [3, 4], ['foo', 'new_word'])]"
postgresql,postgresql,"SELECT pg_input_is_valid('{1,2,3}', 'integer[]')",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('{1,2', 'integer[]')",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('{1,zed}', 'integer[]')",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('{1,zed}', 'integer[]')",arrays.sql,SAME,,"[('invalid input syntax for type integer: ""zed""', None, None, '22P02')]"
postgresql,postgresql,"select '{{1,2,3},{4,5,6},{7,8,9}}'::int[]",arrays.sql,SAME,,"[([[1, 2, 3], [4, 5, 6], [7, 8, 9]],)]"
postgresql,postgresql,"select ('{{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2]",arrays.sql,SAME,,"[([[1, 2], [4, 5]],)]"
postgresql,postgresql,"select ('[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2]",arrays.sql,SAME,,"[([[5, 6], [8, 9]],)]"
postgresql,postgresql,"SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL][1]",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL:1][1]",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][1:NULL][1]",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"CREATE TEMP TABLE arrtest_s (   a       int2[],   b       int2[][] )",arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT a[:3], b[:2][:2] FROM arrtest_s",arrays.sql,SAME,,"[([1, 2, 3], [[1, 2], [4, 5]]), ([1, 2, 3, 4], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])]"
postgresql,postgresql,"SELECT a[2:], b[2:][2:] FROM arrtest_s",arrays.sql,SAME,,"[([2, 3, 4, 5], [[5, 6], [8, 9]]), ([3, 4, 5], [[9]])]"
postgresql,postgresql,"SELECT a[:], b[:] FROM arrtest_s",arrays.sql,SAME,,"[([1, 2, 3, 4, 5], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]), ([1, 2, 3, 4, 5], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])]"
postgresql,postgresql,"UPDATE arrtest_s SET a[:3] = '{11, 12, 13}', b[:2][:2] = '{{11,12}, {14,15}}'   WHERE array_lower(a,1) = 1",arrays.sql,SAME,,[]
postgresql,postgresql,"UPDATE arrtest_s SET a[3:] = '{23, 24, 25}', b[2:][2:] = '{{25,26}, {28,29}}'",arrays.sql,SAME,,[]
postgresql,postgresql,"UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}'",arrays.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE arrtest1 (i int[], t text[])",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([1, 2, None, 4], ['one', 'two', None, 'four'])]"
postgresql,postgresql,"update arrtest1 set i[2] = 22, t[2] = 'twenty-two'",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([1, 22, None, 4], ['one', 'twenty-two', None, 'four'])]"
postgresql,postgresql,"update arrtest1 set i[5] = 5, t[5] = 'five'",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([1, 22, None, 4, 5], ['one', 'twenty-two', None, 'four', 'five'])]"
postgresql,postgresql,"update arrtest1 set i[8] = 8, t[8] = 'eight'",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([1, 22, None, 4, 5, None, None, 8], ['one', 'twenty-two', None, 'four', 'five', None, None, 'eight'])]"
postgresql,postgresql,"update arrtest1 set i[0] = 0, t[0] = 'zero'",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([0, 1, 22, None, 4, 5, None, None, 8], ['zero', 'one', 'twenty-two', None, 'four', 'five', None, None, 'eight'])]"
postgresql,postgresql,"update arrtest1 set i[-3] = -3, t[-3] = 'minus-three'",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([-3, None, None, 0, 1, 22, None, 4, 5, None, None, 8], ['minus-three', None, None, 'zero', 'one', 'twenty-two', None, 'four', 'five', None, None, 'eight'])]"
postgresql,postgresql,"update arrtest1 set i[0:2] = array[10,11,12], t[0:2] = array['ten','eleven','twelve']",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([-3, None, None, 10, 11, 12, None, 4, 5, None, None, 8], ['minus-three', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'eight'])]"
postgresql,postgresql,"update arrtest1 set i[8:10] = array[18,null,20], t[8:10] = array['p18',null,'p20']",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([-3, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20], ['minus-three', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20'])]"
postgresql,postgresql,"update arrtest1 set i[11:12] = array[null,22], t[11:12] = array[null,'p22']",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([-3, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22], ['minus-three', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22'])]"
postgresql,postgresql,"update arrtest1 set i[15:16] = array[null,26], t[15:16] = array[null,'p26']",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([-3, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22, None, None, None, 26], ['minus-three', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22', None, None, None, 'p26'])]"
postgresql,postgresql,"update arrtest1 set i[-5:-3] = array[-15,-14,-13], t[-5:-3] = array['m15','m14','m13']",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([-15, -14, -13, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22, None, None, None, 26], ['m15', 'm14', 'm13', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22', None, None, None, 'p26'])]"
postgresql,postgresql,"update arrtest1 set i[-7:-6] = array[-17,null], t[-7:-6] = array['m17',null]",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([-17, None, -15, -14, -13, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22, None, None, None, 26], ['m17', None, 'm15', 'm14', 'm13', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22', None, None, None, 'p26'])]"
postgresql,postgresql,"update arrtest1 set i[-12:-10] = array[-22,null,-20], t[-12:-10] = array['m22',null,'m20']",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([-22, None, -20, None, None, -17, None, -15, -14, -13, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22, None, None, None, 26], ['m22', None, 'm20', None, None, 'm17', None, 'm15', 'm14', 'm13', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22', None, None, None, 'p26'])]"
postgresql,postgresql,delete from arrtest1,arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([1, 2, None, 4], ['one', 'two', None, 'four'])]"
postgresql,postgresql,"update arrtest1 set i[0:5] = array[0,1,2,null,4,5], t[0:5] = array['z','p1','p2',null,'p4','p5']",arrays.sql,SAME,,[]
postgresql,postgresql,select * from arrtest1,arrays.sql,SAME,,"[([0, 1, 2, None, 4, 5], ['z', 'p1', 'p2', None, 'p4', 'p5'])]"
postgresql,postgresql,"CREATE TEMP TABLE arrtest2 (i integer ARRAY[4], f float8[], n numeric[], t text[], d timestamp[])",arrays.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE arrtest_f (f0 int, f1 text, f2 float8)",arrays.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE arrtest_i (f0 int, f1 text, f2 int)",arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT t.f[1][3][1] AS ""131"", t.f[2][2][1] AS ""221"" FROM (   SELECT ARRAY[[[111,112],[121,122],[131,132]],[[211,212],[221,122],[231,232]]] AS f ) AS t",arrays.sql,SAME,,"[(131, 221)]"
postgresql,postgresql,"SELECT ARRAY[[[[[['hello'],['world']]]]]]",arrays.sql,SAME,,"[([[[[[['hello'], ['world']]]]]],)]"
postgresql,postgresql,"SELECT ARRAY[ARRAY['hello'],ARRAY['world']]",arrays.sql,SAME,,"[([['hello'], ['world']],)]"
postgresql,postgresql,"SELECT ARRAY(select f2 from arrtest_f order by f2) AS ""ARRAY""",arrays.sql,SAME,,"[([1.15, 1.15, 1.18, 1.21, 1.24, 1.26, 1.26, 1.3, 1.32],)]"
postgresql,postgresql,"SELECT '{1,null,3}'::int[]",arrays.sql,SAME,,"[([1, None, 3],)]"
postgresql,postgresql,"SELECT ARRAY[1,NULL,3]",arrays.sql,SAME,,"[([1, None, 3],)]"
postgresql,postgresql,"SELECT array_append(array[42], 6) AS ""{42,6}""",arrays.sql,SAME,,"[([42, 6],)]"
postgresql,postgresql,"SELECT array_prepend(6, array[42]) AS ""{6,42}""",arrays.sql,SAME,,"[([6, 42],)]"
postgresql,postgresql,"SELECT array_cat(ARRAY[1,2], ARRAY[3,4]) AS ""{1,2,3,4}""",arrays.sql,SAME,,"[([1, 2, 3, 4],)]"
postgresql,postgresql,"SELECT array_cat(ARRAY[1,2], ARRAY[[3,4],[5,6]]) AS ""{{1,2},{3,4},{5,6}}""",arrays.sql,SAME,,"[([[1, 2], [3, 4], [5, 6]],)]"
postgresql,postgresql,"SELECT array_cat(ARRAY[[3,4],[5,6]], ARRAY[1,2]) AS ""{{3,4},{5,6},{1,2}}""",arrays.sql,SAME,,"[([[3, 4], [5, 6], [1, 2]],)]"
postgresql,postgresql,"SELECT array_position(ARRAY[1,2,3,4,5], 4)",arrays.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT array_position(ARRAY[5,3,4,2,1], 4)",arrays.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon')",arrays.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'sat')",arrays.sql,SAME,,"[(7,)]"
postgresql,postgresql,"SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], NULL)",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], NULL)",arrays.sql,SAME,,"[(6,)]"
postgresql,postgresql,"SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], 'sat')",arrays.sql,SAME,,"[(8,)]"
postgresql,postgresql,"SELECT array_positions(NULL, 10)",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT array_positions(NULL, NULL::int)",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], 4)",arrays.sql,SAME,,"[([4, 10],)]"
postgresql,postgresql,"SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], NULL)",arrays.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT array_positions(ARRAY[1,2,3,NULL,5,6,1,2,3,NULL,5,6], NULL)",arrays.sql,SAME,,"[([4, 10],)]"
postgresql,postgresql,"SELECT array_length(array_positions(ARRAY(SELECT 'AAAAAAAAAAAAAAAAAAAAAAAAA'::text || i % 10                                           FROM generate_series(1,100) g(i)),                                   'AAAAAAAAAAAAAAAAAAAAAAAAA5'), 1)",arrays.sql,SAME,,"[(10,)]"
postgresql,postgresql,"SELECT array_position('[2:4]={1,2,3}'::int[], 1)",arrays.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT array_positions('[2:4]={1,2,3}'::int[], 1)",arrays.sql,SAME,,"[([2],)]"
postgresql,postgresql,"SELECT     array_position(ids, (1, 1)),     array_positions(ids, (1, 1))         FROM (VALUES     (ARRAY[(0, 0), (1, 1)]),     (ARRAY[(1, 1)]) ) AS f (ids)",arrays.sql,SAME,,"[(2, [2]), (1, [1])]"
postgresql,postgresql,"SELECT a FROM arrtest WHERE b = ARRAY[[[113,142],[1,147]]]",arrays.sql,SAME,,"[([16, 25, 3, 4, 5],)]"
postgresql,postgresql,"SELECT NOT ARRAY[1.1,1.2,1.3] = ARRAY[1.1,1.2,1.3] AS ""FALSE""",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT ARRAY[1,2] || 3 AS ""{1,2,3}""",arrays.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"SELECT 0 || ARRAY[1,2] AS ""{0,1,2}""",arrays.sql,SAME,,"[([0, 1, 2],)]"
postgresql,postgresql,"SELECT ARRAY[1,2] || ARRAY[3,4] AS ""{1,2,3,4}""",arrays.sql,SAME,,"[([1, 2, 3, 4],)]"
postgresql,postgresql,"SELECT ARRAY[[['hello','world']]] || ARRAY[[['happy','birthday']]] AS ""ARRAY""",arrays.sql,SAME,,"[([[['hello', 'world']], [['happy', 'birthday']]],)]"
postgresql,postgresql,"SELECT ARRAY[[1,2],[3,4]] || ARRAY[5,6] AS ""{{1,2},{3,4},{5,6}}""",arrays.sql,SAME,,"[([[1, 2], [3, 4], [5, 6]],)]"
postgresql,postgresql,"SELECT ARRAY[0,0] || ARRAY[1,1] || ARRAY[2,2] AS ""{0,0,1,1,2,2}""",arrays.sql,SAME,,"[([0, 0, 1, 1, 2, 2],)]"
postgresql,postgresql,"SELECT 0 || ARRAY[1,2] || 3 AS ""{0,1,2,3}""",arrays.sql,SAME,,"[([0, 1, 2, 3],)]"
postgresql,postgresql,"SELECT ARRAY[1.1] || ARRAY[2,3,4]",arrays.sql,SAME,,"[([Decimal('1.1'), Decimal('2'), Decimal('3'), Decimal('4')],)]"
postgresql,postgresql,"SELECT array_agg(x) || array_agg(x) FROM (VALUES (ROW(1,2)), (ROW(3,4))) v(x)",arrays.sql,SAME,,"[('{""(1,2)"",""(3,4)"",""(1,2)"",""(3,4)""}',)]"
postgresql,postgresql,"SELECT ROW(1,2) || array_agg(x) FROM (VALUES (ROW(3,4)), (ROW(5,6))) v(x)",arrays.sql,SAME,,"[('{""(1,2)"",""(3,4)"",""(5,6)""}',)]"
postgresql,postgresql,SELECT * FROM array_op_test WHERE i @> '{32}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i && '{32}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i @> '{17}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i && '{17}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_op_test WHERE i @> '{32,17}' ORDER BY seqno",arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_op_test WHERE i && '{32,17}' ORDER BY seqno",arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_op_test WHERE i <@ '{38,34,32,89}' ORDER BY seqno",arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i = '{}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i @> '{}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i && '{}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i <@ '{}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i = '{NULL}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i @> '{NULL}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i && '{NULL}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE i <@ '{NULL}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE t @> '{AAAAAAAAAA646}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE t && '{AAAAAAAAAA646}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno",arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno",arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_op_test WHERE t <@ '{AAAAAAAA72908,AAAAAAAAAAAAAAAAAAA17075,AA88409,AAAAAAAAAAAAAAAAAA36842,AAAAAAA48038,AAAAAAAAAAAAAA10611}' ORDER BY seqno",arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE t = '{}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE t @> '{}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE t && '{}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_op_test WHERE t <@ '{}' ORDER BY seqno,arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT ARRAY[1,2,3]::text[]::int[]::float8[] AS ""{1,2,3}""",arrays.sql,SAME,,"[([1.0, 2.0, 3.0],)]"
postgresql,postgresql,"SELECT pg_typeof(ARRAY[1,2,3]::text[]::int[]::float8[]) AS ""double precision[]""",arrays.sql,SAME,,"[('double precision[]',)]"
postgresql,postgresql,"SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] AS ""{{a,bc},{def,hijk}}""",arrays.sql,SAME,,"[([['a', 'bc'], ['def', 'hijk']],)]"
postgresql,postgresql,"SELECT pg_typeof(ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[]) AS ""character varying[]""",arrays.sql,SAME,,"[('character varying[]',)]"
postgresql,postgresql,"SELECT CAST(ARRAY[[[[[['a','bb','ccc']]]]]] as text[]) as ""{{{{{{a,bb,ccc}}}}}}""",arrays.sql,SAME,,"[([[[[[['a', 'bb', 'ccc']]]]]],)]"
postgresql,postgresql,"SELECT NULL::text[]::int[] AS ""NULL""",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select 33 = any ('{1,2,3}')",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select 33 = any ('{1,2,33}')",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select 33 = all ('{1,2,33}')",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select 33 >= all ('{1,2,33}')",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select null::int >= all ('{1,2,33}')",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,select null::int >= all ('{}'),arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,select null::int >= any ('{}'),arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select 33.4 = any (array[1,2,3])",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select 33.4 > all (array[1,2,3])",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 33 = any (null::int[]),arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select null::int = any ('{1,2,3}')",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select 33 = any ('{1,null,3}')",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select 33 = any ('{1,null,33}')",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 33 = all (null::int[]),arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select null::int = all ('{1,2,3}')",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select 33 = all ('{1,null,3}')",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select 33 = all ('{33,null,33}')",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT -1 != ALL(ARRAY(SELECT NULLIF(g.i, 900) FROM generate_series(1,1000) g(i)))",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,create temp table arr_tbl (f1 int[] unique),arrays.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan to off,arrays.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan to off,arrays.sql,SAME,,[]
postgresql,postgresql,"select * from arr_tbl where f1 > '{1,2,3}' and f1 <= '{1,5,3}'",arrays.sql,SAME,,"[([1, 2, 10],), ([1, 5, 3],)]"
postgresql,postgresql,"select * from arr_tbl where f1 >= '{1,2,3}' and f1 < '{1,5,3}'",arrays.sql,SAME,,"[([1, 2, 3],), ([1, 2, 10],)]"
postgresql,postgresql,"create temp table arr_pk_tbl (pk int4 primary key, f1 int[])",arrays.sql,SAME,,[]
postgresql,postgresql,reset enable_seqscan,arrays.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,arrays.sql,SAME,,[]
postgresql,postgresql,"select 'foo' like any (array['%a', '%o'])",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select 'foo' like any (array['%a', '%b'])",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select 'foo' like all (array['f%', '%o'])",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select 'foo' like all (array['f%', '%b'])",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select 'foo' not like any (array['%a', '%b'])",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select 'foo' not like all (array['%a', '%o'])",arrays.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select 'foo' ilike any (array['%A', '%O'])",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select 'foo' ilike all (array['F%', '%O'])",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select '{{1},{{2}}}'::text[]",arrays.sql,SAME,,"[([[['1']], [['2']]],)]"
postgresql,postgresql,"select '{{{1}},{2}}'::text[]",arrays.sql,SAME,,"[([],)]"
postgresql,postgresql,"select '[21474836488:21474836489]={1,2}'::int[]",arrays.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,select '{}'::text[],arrays.sql,SAME,,"[([],)]"
postgresql,postgresql,"select '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}'::text[]",arrays.sql,SAME,,"[([[['1', '2', '3', '4'], ['2', '3', '4', '5']], [['3', '4', '5', '6'], ['4', '5', '6', '7']]],)]"
postgresql,postgresql,"select '{null,n\ull,""null""}'::text[]",arrays.sql,SAME,,"[([None, 'null', 'null'],)]"
postgresql,postgresql,"select '{ ab\c , ""ab\""c"" }'::text[]",arrays.sql,SAME,,"[(['abc', 'ab""c'],)]"
postgresql,postgresql,"select '{0 second  ,0 second}'::interval[]",arrays.sql,SAME,,"[([datetime.timedelta(0), datetime.timedelta(0)],)]"
postgresql,postgresql,"select '{ { "","" } , { 3 } }'::text[]",arrays.sql,SAME,,"[([[','], ['3']],)]"
postgresql,postgresql,"select '  {   {  ""  0 second  ""   ,  0 second  }   }'::text[]",arrays.sql,SAME,,"[([['  0 second  ', '0 second']],)]"
postgresql,postgresql,"select '{            0 second,            @ 1 hour @ 42 minutes @ 20 seconds          }'::interval[]",arrays.sql,SAME,,"[([datetime.timedelta(0), datetime.timedelta(seconds=6140)],)]"
postgresql,postgresql,select array[]::text[],arrays.sql,SAME,,"[([],)]"
postgresql,postgresql,"select '[2]={1,7}'::int[]",arrays.sql,SAME,,"[([1, 7],)]"
postgresql,postgresql,"select '[0:1]={1.1,2.2}'::float8[]",arrays.sql,SAME,,"[([1.1, 2.2],)]"
postgresql,postgresql,select '[2147483646:2147483646]={1}'::int[],arrays.sql,SAME,,"[([1],)]"
postgresql,postgresql,"select '[-2147483648:-2147483647]={1,2}'::int[]",arrays.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,"CREATE TEMP TABLE arraggtest ( f1 INT[], f2 TEXT[][], f3 FLOAT[])",arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest",arrays.sql,SAME,,"[([1, 2, 3, 4], [1, 2, 3], [['grey', 'red'], ['grey', 'blue']], [['grey', 'red'], ['blue', 'blue']], [1.6, 0.0], [1.6])]"
postgresql,postgresql,"SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest",arrays.sql,SAME,,"[([3, 3, 2, 4, 5, 6], [1, 2, 3], [['white', 'yellow'], ['pink', 'orange']], [['grey', 'red'], ['blue', 'blue']], [2.1, 3.3, 1.8, 1.7, 1.6], [1.6])]"
postgresql,postgresql,"SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest",arrays.sql,SAME,,"[([3, 3, 2, 4, 5, 6], [1, 2, 3], [['white', 'yellow'], ['pink', 'orange']], [['black', 'red'], ['green', 'orange']], [2.1, 3.3, 1.8, 1.7, 1.6], [1.6])]"
postgresql,postgresql,"SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest",arrays.sql,SAME,,"[([4, 2, 6, 7, 8, 1], [1, 2, 3], [['white', 'yellow'], ['pink', 'orange']], [['black', 'red'], ['green', 'orange']], [2.1, 3.3, 1.8, 1.7, 1.6], [1.6])]"
postgresql,postgresql,"SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest",arrays.sql,SAME,,"[([4, 2, 6, 7, 8, 1], [], [['white', 'yellow'], ['pink', 'orange']], [['black', 'red'], ['green', 'orange']], [2.1, 3.3, 1.8, 1.7, 1.6], [1.6])]"
postgresql,postgresql,"create type comptype as (f1 int, f2 text)",arrays.sql,SAME,,[]
postgresql,postgresql,create type _comptype as enum('fooey'),arrays.sql,SAME,,[]
postgresql,postgresql,select * from comptable,arrays.sql,SAME,,"[('(1,foo)', '{""(2,bar)"",""(3,baz)""}')]"
postgresql,postgresql,select c2[2].f2 from comptable,arrays.sql,SAME,,"[('baz',)]"
postgresql,postgresql,drop type _comptype,arrays.sql,SAME,,[]
postgresql,postgresql,drop type comptype,arrays.sql,SAME,,[]
postgresql,postgresql,"create or replace function unnest1(anyarray) returns setof anyelement as $$ select $1[s] from generate_subscripts($1,1) g(s); $$ language sql immutable",arrays.sql,SAME,,[]
postgresql,postgresql,"create or replace function unnest2(anyarray) returns setof anyelement as $$ select $1[s1][s2] from generate_subscripts($1,1) g1(s1),                    generate_subscripts($1,2) g2(s2); $$ language sql immutable",arrays.sql,SAME,,[]
postgresql,postgresql,"select * from unnest1(array[1,2,3])",arrays.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,"select * from unnest2(array[[1,2,3],[4,5,6]])",arrays.sql,SAME,,"[(1,), (2,), (3,), (4,), (5,), (6,)]"
postgresql,postgresql,drop function unnest1(anyarray),arrays.sql,SAME,,[]
postgresql,postgresql,drop function unnest2(anyarray),arrays.sql,SAME,,[]
postgresql,postgresql,"select array_fill(null::integer, array[3,3])",arrays.sql,SAME,,"[([[None, None, None], [None, None, None], [None, None, None]],)]"
postgresql,postgresql,"select array_fill(null::text, array[3,3])",arrays.sql,SAME,,"[([[None, None, None], [None, None, None], [None, None, None]],)]"
postgresql,postgresql,"select array_fill(7, array[3,3])",arrays.sql,SAME,,"[([[7, 7, 7], [7, 7, 7], [7, 7, 7]],)]"
postgresql,postgresql,"select array_fill('juhu'::text, array[3,3])",arrays.sql,SAME,,"[([['juhu', 'juhu', 'juhu'], ['juhu', 'juhu', 'juhu'], ['juhu', 'juhu', 'juhu']],)]"
postgresql,postgresql,"select a, a = '{}' as is_eq, array_dims(a)   from (select array_fill(42, array[0]) as a) ss",arrays.sql,SAME,,"[([], True, None)]"
postgresql,postgresql,"select a, a = '{}' as is_eq, array_dims(a)   from (select array_fill(42, '{}') as a) ss",arrays.sql,SAME,,"[([], True, None)]"
postgresql,postgresql,"select a, a = '{}' as is_eq, array_dims(a)   from (select array_fill(42, '{}', '{}') as a) ss",arrays.sql,SAME,,"[([], True, None)]"
postgresql,postgresql,"select string_to_array('1|2|3', '|')",arrays.sql,SAME,,"[(['1', '2', '3'],)]"
postgresql,postgresql,"select string_to_array('1|2|3|', '|')",arrays.sql,SAME,,"[(['1', '2', '3', ''],)]"
postgresql,postgresql,"select string_to_array('1||2|3||', '||')",arrays.sql,SAME,,"[(['1', '2|3', ''],)]"
postgresql,postgresql,"select string_to_array('1|2|3', '')",arrays.sql,SAME,,"[(['1|2|3'],)]"
postgresql,postgresql,"select string_to_array('', '|')",arrays.sql,SAME,,"[([],)]"
postgresql,postgresql,"select string_to_array('1|2|3', NULL)",arrays.sql,SAME,,"[(['1', '|', '2', '|', '3'],)]"
postgresql,postgresql,"select string_to_array(NULL, '|') IS NULL",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select string_to_array('abc', '')",arrays.sql,SAME,,"[(['abc'],)]"
postgresql,postgresql,"select string_to_array('abc', '', 'abc')",arrays.sql,SAME,,"[([None],)]"
postgresql,postgresql,"select string_to_array('abc', ',')",arrays.sql,SAME,,"[(['abc'],)]"
postgresql,postgresql,"select string_to_array('abc', ',', 'abc')",arrays.sql,SAME,,"[([None],)]"
postgresql,postgresql,"select string_to_array('1,2,3,4,,6', ',')",arrays.sql,SAME,,"[(['1', '2', '3', '4', '', '6'],)]"
postgresql,postgresql,"select string_to_array('1,2,3,4,,6', ',', '')",arrays.sql,SAME,,"[(['1', '2', '3', '4', None, '6'],)]"
postgresql,postgresql,"select string_to_array('1,2,3,4,*,6', ',', '*')",arrays.sql,SAME,,"[(['1', '2', '3', '4', None, '6'],)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('1|2|3', '|') g(v)",arrays.sql,SAME,,"[('1', False), ('2', False), ('3', False)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('1|2|3|', '|') g(v)",arrays.sql,SAME,,"[('1', False), ('2', False), ('3', False), ('', False)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('1||2|3||', '||') g(v)",arrays.sql,SAME,,"[('1', False), ('2|3', False), ('', False)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('1|2|3', '') g(v)",arrays.sql,SAME,,"[('1|2|3', False)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('', '|') g(v)",arrays.sql,SAME,,[]
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('1|2|3', NULL) g(v)",arrays.sql,SAME,,"[('1', False), ('|', False), ('2', False), ('|', False), ('3', False)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table(NULL, '|') g(v)",arrays.sql,SAME,,[]
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('abc', '') g(v)",arrays.sql,SAME,,"[('abc', False)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('abc', '', 'abc') g(v)",arrays.sql,SAME,,"[(None, True)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('abc', ',') g(v)",arrays.sql,SAME,,"[('abc', False)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('abc', ',', 'abc') g(v)",arrays.sql,SAME,,"[(None, True)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('1,2,3,4,,6', ',') g(v)",arrays.sql,SAME,,"[('1', False), ('2', False), ('3', False), ('4', False), ('', False), ('6', False)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('1,2,3,4,,6', ',', '') g(v)",arrays.sql,SAME,,"[('1', False), ('2', False), ('3', False), ('4', False), (None, True), ('6', False)]"
postgresql,postgresql,"select v, v is null as ""is null"" from string_to_table('1,2,3,4,*,6', ',', '*') g(v)",arrays.sql,SAME,,"[('1', False), ('2', False), ('3', False), ('4', False), (None, True), ('6', False)]"
postgresql,postgresql,"select array_to_string(NULL::int4[], ',') IS NULL",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select array_to_string('{}'::int4[], ',')",arrays.sql,SAME,,"[('',)]"
postgresql,postgresql,"select array_to_string(array[1,2,3,4,NULL,6], ',')",arrays.sql,SAME,,"[('1,2,3,4,6',)]"
postgresql,postgresql,"select array_to_string(array[1,2,3,4,NULL,6], ',', '*')",arrays.sql,SAME,,"[('1,2,3,4,*,6',)]"
postgresql,postgresql,"select array_to_string(array[1,2,3,4,NULL,6], NULL)",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select array_to_string(array[1,2,3,4,NULL,6], ',', NULL)",arrays.sql,SAME,,"[('1,2,3,4,6',)]"
postgresql,postgresql,"select array_to_string(string_to_array('1|2|3', '|'), '|')",arrays.sql,SAME,,"[('1|2|3',)]"
postgresql,postgresql,"select array_length(array[1,2,3], 1)",arrays.sql,SAME,,"[(3,)]"
postgresql,postgresql,"select array_length(array[[1,2,3], [4,5,6]], 0)",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select array_length(array[[1,2,3], [4,5,6]], 1)",arrays.sql,SAME,,"[(2,)]"
postgresql,postgresql,"select array_length(array[[1,2,3], [4,5,6]], 2)",arrays.sql,SAME,,"[(3,)]"
postgresql,postgresql,"select array_length(array[[1,2,3], [4,5,6]], 3)",arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,select cardinality(NULL::int[]),arrays.sql,SAME,,"[(None,)]"
postgresql,postgresql,select cardinality('{}'::int[]),arrays.sql,SAME,,"[(0,)]"
postgresql,postgresql,"select cardinality(array[1,2,3])",arrays.sql,SAME,,"[(3,)]"
postgresql,postgresql,"select cardinality('[2:4]={5,6,7}'::int[])",arrays.sql,SAME,,"[(3,)]"
postgresql,postgresql,"select cardinality('{{1,2}}'::int[])",arrays.sql,SAME,,"[(2,)]"
postgresql,postgresql,"select cardinality('{{1,2},{3,4},{5,6}}'::int[])",arrays.sql,SAME,,"[(6,)]"
postgresql,postgresql,"select cardinality('{{{1,9},{5,6}},{{2,3},{3,4}}}'::int[])",arrays.sql,SAME,,"[(8,)]"
postgresql,postgresql,"select array_agg(ar)   from (values ('{1,2}'::int[]), ('{3,4}'::int[])) v(ar)",arrays.sql,SAME,,"[([[1, 2], [3, 4]],)]"
postgresql,postgresql,"select array_agg(distinct ar order by ar desc)   from (select array[i / 2] from generate_series(1,10) a(i)) b(ar)",arrays.sql,SAME,,"[([[5], [4], [3], [2], [1], [0]],)]"
postgresql,postgresql,"select array_agg(ar)   from (select array_agg(array[i, i+1, i-1])         from generate_series(1,2) a(i)) b(ar)",arrays.sql,SAME,,"[([[[1, 2, 0], [2, 3, 1]]],)]"
postgresql,postgresql,"select array_agg(array[i+1.2, i+1.3, i+1.4]) from generate_series(1,3) g(i)",arrays.sql,SAME,,"[([[Decimal('2.2'), Decimal('2.3'), Decimal('2.4')], [Decimal('3.2'), Decimal('3.3'), Decimal('3.4')], [Decimal('4.2'), Decimal('4.3'), Decimal('4.4')]],)]"
postgresql,postgresql,"select array_agg(array['Hello', i::text]) from generate_series(9,11) g(i)",arrays.sql,SAME,,"[([['Hello', '9'], ['Hello', '10'], ['Hello', '11']],)]"
postgresql,postgresql,"select array_agg(array[i, nullif(i, 3), i+1]) from generate_series(1,4) g(i)",arrays.sql,SAME,,"[([[1, 1, 2], [2, 2, 3], [3, None, 4], [4, 4, 5]],)]"
postgresql,postgresql,"select unnest(array[1,2,3])",arrays.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,"select * from unnest(array[1,2,3])",arrays.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,"select unnest(array[1,2,3,4.5]::float8[])",arrays.sql,SAME,,"[(1.0,), (2.0,), (3.0,), (4.5,)]"
postgresql,postgresql,"select unnest(array[1,2,3,4.5]::numeric[])",arrays.sql,SAME,,"[(Decimal('1'),), (Decimal('2'),), (Decimal('3'),), (Decimal('4.5'),)]"
postgresql,postgresql,"select unnest(array[1,2,3,null,4,null,null,5,6])",arrays.sql,SAME,,"[(1,), (2,), (3,), (None,), (4,), (None,), (None,), (5,), (6,)]"
postgresql,postgresql,"select unnest(array[1,2,3,null,4,null,null,5,6]::text[])",arrays.sql,SAME,,"[('1',), ('2',), ('3',), (None,), ('4',), (None,), (None,), ('5',), ('6',)]"
postgresql,postgresql,"select abs(unnest(array[1,2,null,-3]))",arrays.sql,SAME,,"[(1,), (2,), (None,), (3,)]"
postgresql,postgresql,"select array_remove(array[1,2,2,3], 2)",arrays.sql,SAME,,"[([1, 3],)]"
postgresql,postgresql,"select array_remove(array[1,2,2,3], 5)",arrays.sql,SAME,,"[([1, 2, 2, 3],)]"
postgresql,postgresql,"select array_remove(array[1,NULL,NULL,3], NULL)",arrays.sql,SAME,,"[([1, 3],)]"
postgresql,postgresql,"select array_remove(array['A','CC','D','C','RR'], 'RR')",arrays.sql,SAME,,"[(['A', 'CC', 'D', 'C'],)]"
postgresql,postgresql,"select array_remove(array[1.0, 2.1, 3.3], 1)",arrays.sql,SAME,,"[([Decimal('2.1'), Decimal('3.3')],)]"
postgresql,postgresql,"select array_remove(array['X','X','X'], 'X') = '{}'",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select array_replace(array[1,2,5,4],5,3)",arrays.sql,SAME,,"[([1, 2, 3, 4],)]"
postgresql,postgresql,"select array_replace(array[1,2,5,4],5,NULL)",arrays.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"select array_replace(array[1,2,NULL,4,NULL],NULL,5)",arrays.sql,SAME,,"[([1, 2, 5, 4, 5],)]"
postgresql,postgresql,"select array_replace(array['A','B','DD','B'],'B','CC')",arrays.sql,SAME,,"[(['A', 'CC', 'DD', 'CC'],)]"
postgresql,postgresql,"select array_replace(array[1,NULL,3],NULL,NULL)",arrays.sql,SAME,,"[([1, None, 3],)]"
postgresql,postgresql,"select array_replace(array['AB',NULL,'CDE'],NULL,'12')",arrays.sql,SAME,,"[(['AB', '12', 'CDE'],)]"
postgresql,postgresql,"select array(select array[i,i/2] from generate_series(1,5) i)",arrays.sql,SAME,,"[([[1, 0], [2, 1], [3, 1], [4, 2], [5, 2]],)]"
postgresql,postgresql,"select array(select array['Hello', i::text] from generate_series(9,11) i)",arrays.sql,SAME,,"[([['Hello', '9'], ['Hello', '10'], ['Hello', '11']],)]"
postgresql,postgresql,create temp table src (f1 text),arrays.sql,SAME,,[]
postgresql,postgresql,"create type textandtext as (c1 text, c2 text)",arrays.sql,SAME,,[]
postgresql,postgresql,create temp table dest (f1 textandtext[]),arrays.sql,SAME,,[]
postgresql,postgresql,delete from src,arrays.sql,SAME,,[]
postgresql,postgresql,truncate table src,arrays.sql,SAME,,[]
postgresql,postgresql,drop type textandtext,arrays.sql,SAME,,[]
postgresql,postgresql,"SELECT     op,     width_bucket(op::numeric, ARRAY[1, 3, 5, 10.0]::numeric[]) AS wb_n1,     width_bucket(op::numeric, ARRAY[0, 5.5, 9.99]::numeric[]) AS wb_n2,     width_bucket(op::numeric, ARRAY[-6, -5, 2.0]::numeric[]) AS wb_n3,     width_bucket(op::float8, ARRAY[1, 3, 5, 10.0]::float8[]) AS wb_f1,     width_bucket(op::float8, ARRAY[0, 5.5, 9.99]::float8[]) AS wb_f2,     width_bucket(op::float8, ARRAY[-6, -5, 2.0]::float8[]) AS wb_f3 FROM (VALUES   (-5.2),   (-0.0000000001),   (0.000000000001),   (1),   (1.99999999999999),   (2),   (2.00000000000001),   (3),   (4),   (4.5),   (5),   (5.5),   (6),   (7),   (8),   (9),   (9.99999999999999),   (10),   (10.0000000000001) ) v(op)",arrays.sql,SAME,,"[(Decimal('-5.2'), 0, 0, 1, 0, 0, 1), (Decimal('-1E-10'), 0, 0, 2, 0, 0, 2), (Decimal('1E-12'), 0, 1, 2, 0, 1, 2), (Decimal('1'), 1, 1, 2, 1, 1, 2), (Decimal('1.99999999999999'), 1, 1, 2, 1, 1, 2), (Decimal('2'), 1, 1, 3, 1, 1, 3), (Decimal('2.00000000000001'), 1, 1, 3, 1, 1, 3), (Decimal('3'), 2, 1, 3, 2, 1, 3), (Decimal('4'), 2, 1, 3, 2, 1, 3), (Decimal('4.5'), 2, 1, 3, 2, 1, 3), (Decimal('5'), 3, 1, 3, 3, 1, 3), (Decimal('5.5'), 3, 2, 3, 3, 2, 3), (Decimal('6'), 3, 2, 3, 3, 2, 3), (Decimal('7'), 3, 2, 3, 3, 2, 3), (Decimal('8'), 3, 2, 3, 3, 2, 3), (Decimal('9'), 3, 2, 3, 3, 2, 3), (Decimal('9.99999999999999'), 3, 3, 3, 3, 3, 3), (Decimal('10'), 4, 3, 3, 4, 3, 3), (Decimal('10.0000000000001'), 4, 3, 3, 4, 3, 3)]"
postgresql,postgresql,"SELECT     op,     width_bucket(op, ARRAY[1, 3, 9, 'NaN', 'NaN']::float8[]) AS wb FROM (VALUES   (-5.2::float8),   (4::float8),   (77::float8),   ('NaN'::float8) ) v(op)",arrays.sql,SAME,,"[(-5.2, 0), (4.0, 2), (77.0, 3), (nan, 5)]"
postgresql,postgresql,"SELECT     op,     width_bucket(op, ARRAY[1, 3, 5, 10]) AS wb_1 FROM generate_series(0,11) as op",arrays.sql,SAME,,"[(0, 0), (1, 1), (2, 1), (3, 2), (4, 2), (5, 3), (6, 3), (7, 3), (8, 3), (9, 3), (10, 4), (11, 4)]"
postgresql,postgresql,"SELECT width_bucket(now(),                     array['yesterday', 'today', 'tomorrow']::timestamptz[])",arrays.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT width_bucket(5, ARRAY[3])",arrays.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT width_bucket(5, '{}')",arrays.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT arr, trim_array(arr, 2) FROM (VALUES ('{1,2,3,4,5,6}'::bigint[]),         ('{1,2}'),         ('[10:16]={1,2,3,4,5,6,7}'),         ('[-15:-10]={1,2,3,4,5,6}'),         ('{{1,10},{2,20},{3,30},{4,40}}')) v(arr)",arrays.sql,SAME,,"[([1, 2, 3, 4, 5, 6], [1, 2, 3, 4]), ([1, 2], []), ([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5]), ([1, 2, 3, 4, 5, 6], [1, 2, 3, 4]), ([[1, 10], [2, 20], [3, 30], [4, 40]], [[1, 10], [2, 20]])]"
postgresql,postgresql,"SELECT array_shuffle('{1,2,3,4,5,6}'::int[]) <@ '{1,2,3,4,5,6}'",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT array_shuffle('{1,2,3,4,5,6}'::int[]) @> '{1,2,3,4,5,6}'",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT array_dims(array_shuffle('[-1:2][2:3]={{1,2},{3,NULL},{5,6},{7,8}}'::int[]))",arrays.sql,SAME,,"[('[-1:2][2:3]',)]"
postgresql,postgresql,"SELECT array_dims(array_shuffle('{{{1,2},{3,NULL}},{{5,6},{7,8}},{{9,10},{11,12}}}'::int[]))",arrays.sql,SAME,,"[('[1:3][1:2][1:2]',)]"
postgresql,postgresql,"SELECT array_sample('{1,2,3,4,5,6}'::int[], 3) <@ '{1,2,3,4,5,6}'",arrays.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT array_length(array_sample('{1,2,3,4,5,6}'::int[], 3), 1)",arrays.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT array_dims(array_sample('[-1:2][2:3]={{1,2},{3,NULL},{5,6},{7,8}}'::int[], 3))",arrays.sql,SAME,,"[('[1:3][2:3]',)]"
postgresql,postgresql,"SELECT array_dims(array_sample('{{{1,2},{3,NULL}},{{5,6},{7,8}},{{9,10},{11,12}}}'::int[], 2))",arrays.sql,SAME,,"[('[1:2][1:2][1:2]',)]"
postgresql,postgresql,"SELECT pg_notify('notify_async1','sample message1')",async.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT pg_notify('notify_async1','')",async.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT pg_notify('notify_async1',NULL)",async.sql,SAME,,"[('',)]"
postgresql,postgresql,NOTIFY notify_async2,async.sql,SAME,,[]
postgresql,postgresql,LISTEN notify_async2,async.sql,SAME,,[]
postgresql,postgresql,UNLISTEN notify_async2,async.sql,SAME,,[]
postgresql,postgresql,UNLISTEN *,async.sql,SAME,,[]
postgresql,postgresql,SELECT pg_notification_queue_usage(),async.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,SELECT * FROM BIT_TABLE,bit.sql,SAME,,"[('00000000000',), ('11011000000',), ('01010101010',)]"
postgresql,postgresql,SELECT * FROM VARBIT_TABLE,bit.sql,SAME,,"[('',), ('0',), ('010101',), ('01010101010',)]"
postgresql,postgresql,"SELECT v, b, (v || b) AS concat        FROM BIT_TABLE, VARBIT_TABLE        ORDER BY 3",bit.sql,SAME,,"[('', '00000000000', '00000000000'), ('0', '00000000000', '000000000000'), ('0', '01010101010', '001010101010'), ('010101', '00000000000', '01010100000000000'), ('', '01010101010', '01010101010'), ('01010101010', '00000000000', '0101010101000000000000'), ('01010101010', '01010101010', '0101010101001010101010'), ('010101', '01010101010', '01010101010101010'), ('01010101010', '11011000000', '0101010101011011000000'), ('010101', '11011000000', '01010111011000000'), ('0', '11011000000', '011011000000'), ('', '11011000000', '11011000000')]"
postgresql,postgresql,"SELECT b, length(b) AS lb        FROM BIT_TABLE",bit.sql,SAME,,"[('00000000000', 11), ('11011000000', 11), ('01010101010', 11)]"
postgresql,postgresql,"SELECT v, length(v) AS lv        FROM VARBIT_TABLE",bit.sql,SAME,,"[('', 0), ('0', 1), ('010101', 6), ('01010101010', 11)]"
postgresql,postgresql,"SELECT b,        SUBSTRING(b FROM 2 FOR 4) AS sub_2_4,        SUBSTRING(b FROM 7 FOR 13) AS sub_7_13,        SUBSTRING(b FROM 6) AS sub_6        FROM BIT_TABLE",bit.sql,SAME,,"[('00000000000', '0000', '00000', '000000'), ('11011000000', '1011', '00000', '000000'), ('01010101010', '1010', '01010', '101010')]"
postgresql,postgresql,"SELECT v,        SUBSTRING(v FROM 2 FOR 4) AS sub_2_4,        SUBSTRING(v FROM 7 FOR 13) AS sub_7_13,        SUBSTRING(v FROM 6) AS sub_6        FROM VARBIT_TABLE",bit.sql,SAME,,"[('', '', '', ''), ('0', '', '', ''), ('010101', '1010', '', '1'), ('01010101010', '1010', '01010', '101010')]"
postgresql,postgresql,"SELECT SUBSTRING('01010101'::bit(8) FROM 2 FOR 2147483646) AS ""1010101""",bit.sql,SAME,,"[('1010101',)]"
postgresql,postgresql,"SELECT SUBSTRING('01010101'::bit(8) FROM -10 FOR 2147483646) AS ""01010101""",bit.sql,SAME,,"[('01010101',)]"
postgresql,postgresql,"SELECT SUBSTRING('01010101'::varbit FROM 2 FOR 2147483646) AS ""1010101""",bit.sql,SAME,,"[('1010101',)]"
postgresql,postgresql,"SELECT SUBSTRING('01010101'::varbit FROM -10 FOR 2147483646) AS ""01010101""",bit.sql,SAME,,"[('01010101',)]"
postgresql,postgresql,"SELECT a,b,a<b AS ""a<b"",a<=b AS ""a<=b"",a=b AS ""a=b"",         a>=b AS ""a>=b"",a>b AS ""a>b"",a<>b AS ""a<>b"" FROM varbit_table",bit.sql,SAME,,[]
postgresql,postgresql,"SELECT a,a<<4 AS ""a<<4"",b,b>>2 AS ""b>>2"" FROM varbit_table",bit.sql,SAME,,[]
postgresql,postgresql,"SELECT a,b,a<b AS ""a<b"",a<=b AS ""a<=b"",a=b AS ""a=b"",         a>=b AS ""a>=b"",a>b AS ""a>b"",a<>b AS ""a<>b"" FROM bit_table",bit.sql,SAME,,[]
postgresql,postgresql,"SELECT a,a<<4 AS ""a<<4"",b,b>>2 AS ""b>>2"" FROM bit_table",bit.sql,SAME,,[]
postgresql,postgresql,SELECT POSITION(B'1010' IN B'0000101'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'1010' IN B'00001010'),bit.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT POSITION(B'1010' IN B'00000101'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'1010' IN B'000001010'),bit.sql,SAME,,"[(6,)]"
postgresql,postgresql,SELECT POSITION(B'' IN B'00001010'),bit.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT POSITION(B'0' IN B''),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'' IN B''),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'101101' IN B'001011011011011000'),bit.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT POSITION(B'10110110' IN B'001011011011010'),bit.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT POSITION(B'1011011011011' IN B'001011011011011'),bit.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT POSITION(B'1011011011011' IN B'00001011011011011'),bit.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT POSITION(B'11101011' IN B'11101011'),bit.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT POSITION(B'11101011' IN B'011101011'),bit.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT POSITION(B'11101011' IN B'00011101011'),bit.sql,SAME,,"[(4,)]"
postgresql,postgresql,SELECT POSITION(B'11101011' IN B'0000011101011'),bit.sql,SAME,,"[(6,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'111010110'),bit.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'0111010110'),bit.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'000111010110'),bit.sql,SAME,,"[(4,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'00000111010110'),bit.sql,SAME,,"[(6,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'11101011'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'011101011'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'00011101011'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'0000011101011'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'111010110'),bit.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'0111010110'),bit.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'000111010110'),bit.sql,SAME,,"[(4,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'00000111010110'),bit.sql,SAME,,"[(6,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'000001110101111101011'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'0000001110101111101011'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'000000001110101111101011'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'00000000001110101111101011'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'0000011101011111010110'),bit.sql,SAME,,"[(14,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'00000011101011111010110'),bit.sql,SAME,,"[(15,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'0000000011101011111010110'),bit.sql,SAME,,"[(17,)]"
postgresql,postgresql,SELECT POSITION(B'111010110' IN B'000000000011101011111010110'),bit.sql,SAME,,"[(19,)]"
postgresql,postgresql,SELECT POSITION(B'000000000011101011111010110' IN B'000000000011101011111010110'),bit.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT POSITION(B'00000000011101011111010110' IN B'000000000011101011111010110'),bit.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT POSITION(B'0000000000011101011111010110' IN B'000000000011101011111010110'),bit.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT POSITION(B'1101' IN b),        POSITION(B'11011' IN b),        b        FROM BIT_SHIFT_TABLE",bit.sql,SAME,,"[(1, 1, '1101100000000000'), (2, 2, '0110110000000000'), (3, 3, '0011011000000000'), (4, 4, '0001101100000000'), (5, 5, '0000110110000000'), (6, 6, '0000011011000000'), (7, 7, '0000001101100000'), (8, 8, '0000000110110000'), (9, 9, '0000000011011000'), (10, 10, '0000000001101100'), (11, 11, '0000000000110110'), (12, 12, '0000000000011011'), (13, 0, '0000000000001101'), (0, 0, '0000000000000110'), (0, 0, '0000000000000011'), (0, 0, '0000000000000001')]"
postgresql,postgresql,"SELECT b, b >> 1 AS bsr, b << 1 AS bsl        FROM BIT_SHIFT_TABLE",bit.sql,SAME,,"[('1101100000000000', '0110110000000000', '1011000000000000'), ('0110110000000000', '0011011000000000', '1101100000000000'), ('0011011000000000', '0001101100000000', '0110110000000000'), ('0001101100000000', '0000110110000000', '0011011000000000'), ('0000110110000000', '0000011011000000', '0001101100000000'), ('0000011011000000', '0000001101100000', '0000110110000000'), ('0000001101100000', '0000000110110000', '0000011011000000'), ('0000000110110000', '0000000011011000', '0000001101100000'), ('0000000011011000', '0000000001101100', '0000000110110000'), ('0000000001101100', '0000000000110110', '0000000011011000'), ('0000000000110110', '0000000000011011', '0000000001101100'), ('0000000000011011', '0000000000001101', '0000000000110110'), ('0000000000001101', '0000000000000110', '0000000000011010'), ('0000000000000110', '0000000000000011', '0000000000001100'), ('0000000000000011', '0000000000000001', '0000000000000110'), ('0000000000000001', '0000000000000000', '0000000000000010')]"
postgresql,postgresql,"SELECT b, b >> 8 AS bsr8, b << 8 AS bsl8        FROM BIT_SHIFT_TABLE",bit.sql,SAME,,"[('1101100000000000', '0000000011011000', '0000000000000000'), ('0110110000000000', '0000000001101100', '0000000000000000'), ('0011011000000000', '0000000000110110', '0000000000000000'), ('0001101100000000', '0000000000011011', '0000000000000000'), ('0000110110000000', '0000000000001101', '1000000000000000'), ('0000011011000000', '0000000000000110', '1100000000000000'), ('0000001101100000', '0000000000000011', '0110000000000000'), ('0000000110110000', '0000000000000001', '1011000000000000'), ('0000000011011000', '0000000000000000', '1101100000000000'), ('0000000001101100', '0000000000000000', '0110110000000000'), ('0000000000110110', '0000000000000000', '0011011000000000'), ('0000000000011011', '0000000000000000', '0001101100000000'), ('0000000000001101', '0000000000000000', '0000110100000000'), ('0000000000000110', '0000000000000000', '0000011000000000'), ('0000000000000011', '0000000000000000', '0000001100000000'), ('0000000000000001', '0000000000000000', '0000000100000000')]"
postgresql,postgresql,"SELECT b::bit(15), b::bit(15) >> 1 AS bsr, b::bit(15) << 1 AS bsl        FROM BIT_SHIFT_TABLE",bit.sql,SAME,,"[('110110000000000', '011011000000000', '101100000000000'), ('011011000000000', '001101100000000', '110110000000000'), ('001101100000000', '000110110000000', '011011000000000'), ('000110110000000', '000011011000000', '001101100000000'), ('000011011000000', '000001101100000', '000110110000000'), ('000001101100000', '000000110110000', '000011011000000'), ('000000110110000', '000000011011000', '000001101100000'), ('000000011011000', '000000001101100', '000000110110000'), ('000000001101100', '000000000110110', '000000011011000'), ('000000000110110', '000000000011011', '000000001101100'), ('000000000011011', '000000000001101', '000000000110110'), ('000000000001101', '000000000000110', '000000000011010'), ('000000000000110', '000000000000011', '000000000001100'), ('000000000000011', '000000000000001', '000000000000110'), ('000000000000001', '000000000000000', '000000000000010'), ('000000000000000', '000000000000000', '000000000000000')]"
postgresql,postgresql,"SELECT b::bit(15), b::bit(15) >> 8 AS bsr8, b::bit(15) << 8 AS bsl8        FROM BIT_SHIFT_TABLE",bit.sql,SAME,,"[('110110000000000', '000000001101100', '000000000000000'), ('011011000000000', '000000000110110', '000000000000000'), ('001101100000000', '000000000011011', '000000000000000'), ('000110110000000', '000000000001101', '000000000000000'), ('000011011000000', '000000000000110', '100000000000000'), ('000001101100000', '000000000000011', '110000000000000'), ('000000110110000', '000000000000001', '011000000000000'), ('000000011011000', '000000000000000', '101100000000000'), ('000000001101100', '000000000000000', '110110000000000'), ('000000000110110', '000000000000000', '011011000000000'), ('000000000011011', '000000000000000', '001101100000000'), ('000000000001101', '000000000000000', '000110100000000'), ('000000000000110', '000000000000000', '000011000000000'), ('000000000000011', '000000000000000', '000001100000000'), ('000000000000001', '000000000000000', '000000100000000'), ('000000000000000', '000000000000000', '000000000000000')]"
postgresql,postgresql,"SELECT POSITION(B'1101' IN v),        POSITION(B'11011' IN v),        v        FROM VARBIT_SHIFT_TABLE",bit.sql,SAME,,"[(1, 1, '11011'), (2, 2, '011011'), (3, 3, '0011011'), (4, 4, '00011011'), (5, 5, '000011011'), (6, 6, '0000011011'), (7, 7, '00000011011'), (8, 8, '000000011011'), (9, 9, '0000000011011'), (10, 10, '00000000011011'), (11, 11, '000000000011011'), (12, 12, '0000000000011011'), (13, 13, '00000000000011011'), (14, 14, '000000000000011011'), (15, 15, '0000000000000011011'), (16, 16, '00000000000000011011')]"
postgresql,postgresql,"SELECT v, v >> 1 AS vsr, v << 1 AS vsl        FROM VARBIT_SHIFT_TABLE",bit.sql,SAME,,"[('11011', '01101', '10110'), ('011011', '001101', '110110'), ('0011011', '0001101', '0110110'), ('00011011', '00001101', '00110110'), ('000011011', '000001101', '000110110'), ('0000011011', '0000001101', '0000110110'), ('00000011011', '00000001101', '00000110110'), ('000000011011', '000000001101', '000000110110'), ('0000000011011', '0000000001101', '0000000110110'), ('00000000011011', '00000000001101', '00000000110110'), ('000000000011011', '000000000001101', '000000000110110'), ('0000000000011011', '0000000000001101', '0000000000110110'), ('00000000000011011', '00000000000001101', '00000000000110110'), ('000000000000011011', '000000000000001101', '000000000000110110'), ('0000000000000011011', '0000000000000001101', '0000000000000110110'), ('00000000000000011011', '00000000000000001101', '00000000000000110110')]"
postgresql,postgresql,"SELECT v, v >> 8 AS vsr8, v << 8 AS vsl8        FROM VARBIT_SHIFT_TABLE",bit.sql,SAME,,"[('11011', '00000', '00000'), ('011011', '000000', '000000'), ('0011011', '0000000', '0000000'), ('00011011', '00000000', '00000000'), ('000011011', '000000000', '100000000'), ('0000011011', '0000000000', '1100000000'), ('00000011011', '00000000000', '01100000000'), ('000000011011', '000000000000', '101100000000'), ('0000000011011', '0000000000000', '1101100000000'), ('00000000011011', '00000000000000', '01101100000000'), ('000000000011011', '000000000000000', '001101100000000'), ('0000000000011011', '0000000000000000', '0001101100000000'), ('00000000000011011', '00000000000000000', '00001101100000000'), ('000000000000011011', '000000000000000000', '000001101100000000'), ('0000000000000011011', '0000000000000000000', '0000001101100000000'), ('00000000000000011011', '00000000000000000000', '00000001101100000000')]"
postgresql,postgresql,"SELECT get_bit(B'0101011000100', 10)",bit.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT set_bit(B'0101011000100100', 15, 1)",bit.sql,SAME,,"[('0101011000100101',)]"
postgresql,postgresql,SELECT overlay(B'0101011100' placing '001' from 2 for 3),bit.sql,SAME,,"[('0001011100',)]"
postgresql,postgresql,SELECT overlay(B'0101011100' placing '101' from 6),bit.sql,SAME,,"[('0101010100',)]"
postgresql,postgresql,SELECT overlay(B'0101011100' placing '001' from 11),bit.sql,SAME,,"[('0101011100001',)]"
postgresql,postgresql,SELECT overlay(B'0101011100' placing '001' from 20),bit.sql,SAME,,"[('0101011100001',)]"
postgresql,postgresql,SELECT bit_count(B'0101011100'::bit(10)),bit.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT bit_count(B'1111111111'::bit(10)),bit.sql,SAME,,"[(10,)]"
postgresql,postgresql,TABLE bit_defaults,bit.sql,SAME,,"[('1001', '0101', '1001', '0101')]"
postgresql,postgresql,"SELECT pg_input_is_valid('01010001', 'bit(10)')",bit.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('01010001', 'bit(10)')",bit.sql,SAME,,"[('bit string length 8 does not match type bit(10)', None, None, '22026')]"
postgresql,postgresql,"SELECT pg_input_is_valid('01010Z01', 'bit(8)')",bit.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('01010Z01', 'bit(8)')",bit.sql,SAME,,"[('""Z"" is not a valid binary digit', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('x01010Z01', 'bit(32)')",bit.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('x01010Z01', 'bit(32)')",bit.sql,SAME,,"[('""Z"" is not a valid hexadecimal digit', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('01010Z01', 'varbit')",bit.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('01010Z01', 'varbit')",bit.sql,SAME,,"[('""Z"" is not a valid binary digit', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('x01010Z01', 'varbit')",bit.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('x01010Z01', 'varbit')",bit.sql,SAME,,"[('""Z"" is not a valid hexadecimal digit', None, None, '22P02')]"
postgresql,postgresql,CREATE INDEX i_bmtest_a ON bmscantest(a),bitmapops.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX i_bmtest_b ON bmscantest(b),bitmapops.sql,SAME,,[]
postgresql,postgresql,set enable_indexscan=false,bitmapops.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan=false,bitmapops.sql,SAME,,[]
postgresql,postgresql,set work_mem = 64,bitmapops.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM bmscantest WHERE a = 1 AND b = 1,bitmapops.sql,SAME,,"[(23,)]"
postgresql,postgresql,SELECT count(*) FROM bmscantest WHERE a = 1 OR b = 1,bitmapops.sql,SAME,,"[(2485,)]"
postgresql,postgresql,SELECT 1 AS one,boolean.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT true AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT false AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT bool 't' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool '   f           ' AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT bool 'true' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 'false' AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT bool 'y' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 'yes' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 'n' AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT bool 'no' AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT bool 'on' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 'off' AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT bool 'of' AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT bool '1' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool '0' AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('true', 'bool')",boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('asdf', 'bool')",boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('junk', 'bool')",boolean.sql,SAME,,"[('invalid input syntax for type boolean: ""junk""', None, None, '22P02')]"
postgresql,postgresql,SELECT bool 't' or bool 'f' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 't' and bool 'f' AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT not bool 'f' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 't' = bool 'f' AS false,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT bool 't' <> bool 'f' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 't' > bool 'f' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 't' >= bool 'f' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 'f' < bool 't' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT bool 'f' <= bool 't' AS true,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'TrUe'::text::boolean AS true, 'fAlse'::text::boolean AS false",boolean.sql,SAME,,"[(True, False)]"
postgresql,postgresql,"SELECT '    true   '::text::boolean AS true,        '     FALSE'::text::boolean AS false",boolean.sql,SAME,,"[(True, False)]"
postgresql,postgresql,"SELECT true::boolean::text AS true, false::boolean::text AS false",boolean.sql,SAME,,"[('true', 'false')]"
postgresql,postgresql,SELECT BOOLTBL1.* FROM BOOLTBL1,boolean.sql,SAME,,"[(True,), (True,), (True,)]"
postgresql,postgresql,SELECT BOOLTBL1.*    FROM BOOLTBL1    WHERE f1 = bool 'true',boolean.sql,SAME,,"[(True,), (True,), (True,)]"
postgresql,postgresql,SELECT BOOLTBL1.*    FROM BOOLTBL1    WHERE f1 <> bool 'false',boolean.sql,SAME,,"[(True,), (True,), (True,)]"
postgresql,postgresql,"SELECT BOOLTBL1.*    FROM BOOLTBL1    WHERE booleq(bool 'false', f1)",boolean.sql,SAME,,[]
postgresql,postgresql,SELECT BOOLTBL1.*    FROM BOOLTBL1    WHERE f1 = bool 'false',boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT BOOLTBL2.* FROM BOOLTBL2,boolean.sql,SAME,,"[(False,), (False,), (False,), (False,)]"
postgresql,postgresql,"SELECT BOOLTBL1.*, BOOLTBL2.*    FROM BOOLTBL1, BOOLTBL2    WHERE BOOLTBL2.f1 <> BOOLTBL1.f1",boolean.sql,SAME,,"[(True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False)]"
postgresql,postgresql,"SELECT BOOLTBL1.*, BOOLTBL2.*    FROM BOOLTBL1, BOOLTBL2    WHERE boolne(BOOLTBL2.f1,BOOLTBL1.f1)",boolean.sql,SAME,,"[(True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False)]"
postgresql,postgresql,"SELECT BOOLTBL1.*, BOOLTBL2.*    FROM BOOLTBL1, BOOLTBL2    WHERE BOOLTBL2.f1 = BOOLTBL1.f1 and BOOLTBL1.f1 = bool 'false'",boolean.sql,SAME,,"[(False, False), (False, False), (False, False), (False, False)]"
postgresql,postgresql,"SELECT BOOLTBL1.*, BOOLTBL2.*    FROM BOOLTBL1, BOOLTBL2    WHERE BOOLTBL2.f1 = BOOLTBL1.f1 or BOOLTBL1.f1 = bool 'true'    ORDER BY BOOLTBL1.f1, BOOLTBL2.f1",boolean.sql,SAME,,"[(False, False), (False, False), (False, False), (False, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False), (True, False)]"
postgresql,postgresql,SELECT f1    FROM BOOLTBL1    WHERE f1 IS TRUE,boolean.sql,SAME,,"[(True,), (True,), (True,)]"
postgresql,postgresql,SELECT f1    FROM BOOLTBL1    WHERE f1 IS NOT FALSE,boolean.sql,SAME,,"[(True,), (True,), (True,)]"
postgresql,postgresql,SELECT f1    FROM BOOLTBL1    WHERE f1 IS FALSE,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT f1    FROM BOOLTBL1    WHERE f1 IS NOT TRUE,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT f1    FROM BOOLTBL2    WHERE f1 IS TRUE,boolean.sql,SAME,,[]
postgresql,postgresql,SELECT f1    FROM BOOLTBL2    WHERE f1 IS NOT FALSE,boolean.sql,SAME,,[]
postgresql,postgresql,SELECT f1    FROM BOOLTBL2    WHERE f1 IS FALSE,boolean.sql,SAME,,"[(False,), (False,), (False,), (False,)]"
postgresql,postgresql,SELECT f1    FROM BOOLTBL2    WHERE f1 IS NOT TRUE,boolean.sql,SAME,,"[(False,), (False,), (False,), (False,)]"
postgresql,postgresql,"SELECT     d,     b IS TRUE AS istrue,     b IS NOT TRUE AS isnottrue,     b IS FALSE AS isfalse,     b IS NOT FALSE AS isnotfalse,     b IS UNKNOWN AS isunknown,     b IS NOT UNKNOWN AS isnotunknown FROM booltbl3 ORDER BY o",boolean.sql,SAME,,"[('true', True, False, False, True, False, True), ('false', False, True, True, False, False, True), ('null', False, True, False, True, True, False)]"
postgresql,postgresql,SELECT istrue AND isnul AND istrue FROM booltbl4,boolean.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT istrue AND istrue AND isnul FROM booltbl4,boolean.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT isnul AND istrue AND istrue FROM booltbl4,boolean.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT isfalse AND isnul AND istrue FROM booltbl4,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT istrue AND isfalse AND isnul FROM booltbl4,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT isnul AND istrue AND isfalse FROM booltbl4,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT isfalse OR isnul OR isfalse FROM booltbl4,boolean.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT isfalse OR isfalse OR isnul FROM booltbl4,boolean.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT isnul OR isfalse OR isfalse FROM booltbl4,boolean.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT isfalse OR isnul OR istrue FROM booltbl4,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT istrue OR isfalse OR isnul FROM booltbl4,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT isnul OR istrue OR isfalse FROM booltbl4,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT 0::boolean,boolean.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 1::boolean,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT 2::boolean,boolean.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT * FROM BOX_TBL,box.sql,SAME,,"[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]"
postgresql,postgresql,"SELECT b.*, area(b.f1) as barea    FROM BOX_TBL b",box.sql,SAME,,"[('(2,2),(0,0)', 4.0), ('(3,3),(1,1)', 4.0), ('(-2,2),(-8,-10)', 72.0), ('(2.5,3.5),(2.5,2.5)', 0.0), ('(3,3),(3,3)', 0.0)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b    WHERE b.f1 && box '(2.5,2.5,1.0,1.0)'",box.sql,SAME,,"[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(2.5,3.5),(2.5,2.5)',)]"
postgresql,postgresql,"SELECT b1.*    FROM BOX_TBL b1    WHERE b1.f1 &< box '(2.0,2.0,2.5,2.5)'",box.sql,SAME,,"[('(2,2),(0,0)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',)]"
postgresql,postgresql,"SELECT b1.*    FROM BOX_TBL b1    WHERE b1.f1 &> box '(2.0,2.0,2.5,2.5)'",box.sql,SAME,,"[('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b    WHERE b.f1 << box '(3.0,3.0,5.0,5.0)'",box.sql,SAME,,"[('(2,2),(0,0)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b    WHERE b.f1 <= box '(3.0,3.0,5.0,5.0)'",box.sql,SAME,,"[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b    WHERE b.f1 < box '(3.0,3.0,5.0,5.0)'",box.sql,SAME,,"[('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b    WHERE b.f1 = box '(3.0,3.0,5.0,5.0)'",box.sql,SAME,,"[('(2,2),(0,0)',), ('(3,3),(1,1)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b				    WHERE b.f1 > box '(3.5,3.0,4.5,3.0)'",box.sql,SAME,,"[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(-2,2),(-8,-10)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b				    WHERE b.f1 >= box '(3.5,3.0,4.5,3.0)'",box.sql,SAME,,"[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b    WHERE box '(3.0,3.0,5.0,5.0)' >> b.f1",box.sql,SAME,,"[('(2,2),(0,0)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b    WHERE b.f1 <@ box '(0,0,3,3)'",box.sql,SAME,,"[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(3,3),(3,3)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b    WHERE box '(0,0,3,3)' @> b.f1",box.sql,SAME,,"[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(3,3),(3,3)',)]"
postgresql,postgresql,"SELECT b.f1    FROM BOX_TBL b    WHERE box '(1,1,3,3)' ~= b.f1",box.sql,SAME,,"[('(3,3),(1,1)',)]"
postgresql,postgresql,SELECT @@(b1.f1) AS p    FROM BOX_TBL b1,box.sql,SAME,,"[('(1,1)',), ('(2,2)',), ('(-5,-4)',), ('(2.5,3)',), ('(3,3)',)]"
postgresql,postgresql,"SELECT b1.*, b2.*    FROM BOX_TBL b1, BOX_TBL b2    WHERE b1.f1 @> b2.f1 and not b1.f1 ~= b2.f1",box.sql,SAME,,"[('(3,3),(1,1)', '(3,3),(3,3)')]"
postgresql,postgresql,"SELECT height(f1), width(f1) FROM BOX_TBL",box.sql,SAME,,"[(2.0, 2.0), (2.0, 2.0), (12.0, 6.0), (1.0, 0.0), (0.0, 0.0)]"
postgresql,postgresql,CREATE TEMPORARY TABLE box_temp (f1 box),box.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX box_spgist ON box_temp USING spgist (f1),box.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = false,box.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 << '(10,20),(30,40)'",box.sql,SAME,,"[('(2,2),(1,1)',), ('(4,4),(2,2)',), ('(6,6),(3,3)',), ('(8,8),(4,4)',), ('(0,100),(0,0)',), ('(0,Infinity),(0,100)',), ('(0,Infinity),(-Infinity,0)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 << '(10,20),(30,40)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 << '(30,40),(10,20)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 &< '(10,4.333334),(5,100)'",box.sql,SAME,,"[('(2,2),(1,1)',), ('(4,4),(2,2)',), ('(6,6),(3,3)',), ('(8,8),(4,4)',), ('(10,10),(5,5)',), ('(0,100),(0,0)',), ('(0,Infinity),(0,100)',), ('(0,Infinity),(-Infinity,0)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 &< '(10,4.333334),(5,100)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 &< '(10,100),(5,4.333334)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 && '(15,20),(25,30)'",box.sql,SAME,,"[('(20,20),(10,10)',), ('(22,22),(11,11)',), ('(24,24),(12,12)',), ('(26,26),(13,13)',), ('(28,28),(14,14)',), ('(30,30),(15,15)',), ('(32,32),(16,16)',), ('(34,34),(17,17)',), ('(36,36),(18,18)',), ('(38,38),(19,19)',), ('(40,40),(20,20)',), ('(42,42),(21,21)',), ('(44,44),(22,22)',), ('(46,46),(23,23)',), ('(48,48),(24,24)',), ('(50,50),(25,25)',), ('(Infinity,Infinity),(-Infinity,-Infinity)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 && '(15,20),(25,30)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 && '(25,30),(15,20)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 &> '(40,30),(45,50)'",box.sql,SAME,,"[('(80,80),(40,40)',), ('(82,82),(41,41)',), ('(84,84),(42,42)',), ('(86,86),(43,43)',), ('(88,88),(44,44)',), ('(90,90),(45,45)',), ('(92,92),(46,46)',), ('(94,94),(47,47)',), ('(96,96),(48,48)',), ('(98,98),(49,49)',), ('(100,100),(50,50)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 &> '(40,30),(45,50)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 &> '(45,50),(40,30)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 >> '(30,40),(40,30)'",box.sql,SAME,,"[('(82,82),(41,41)',), ('(84,84),(42,42)',), ('(86,86),(43,43)',), ('(88,88),(44,44)',), ('(90,90),(45,45)',), ('(92,92),(46,46)',), ('(94,94),(47,47)',), ('(96,96),(48,48)',), ('(98,98),(49,49)',), ('(100,100),(50,50)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 >> '(30,40),(40,30)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 >> '(40,40),(30,30)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 <<| '(10,4.33334),(5,100)'",box.sql,SAME,,"[('(2,2),(1,1)',), ('(4,4),(2,2)',), ('(40,4.3333333333),(-3,1)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 <<| '(10,4.33334),(5,100)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 <<| '(10,100),(5,4.33334)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 &<| '(10,4.3333334),(5,1)'",box.sql,SAME,,"[('(2,2),(1,1)',), ('(4,4),(2,2)',), ('(40,4.3333333333),(-3,1)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 &<| '(10,4.3333334),(5,1)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 &<| '(10,4.3333334),(5,1)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 |&> '(49.99,49.99),(49.99,49.99)'",box.sql,SAME,,"[('(100,100),(50,50)',), ('(0,Infinity),(0,100)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 |&> '(49.99,49.99),(49.99,49.99)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 |&> '(49.99,49.99),(49.99,49.99)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 |>> '(37,38),(39,40)'",box.sql,SAME,,"[('(82,82),(41,41)',), ('(84,84),(42,42)',), ('(86,86),(43,43)',), ('(88,88),(44,44)',), ('(90,90),(45,45)',), ('(92,92),(46,46)',), ('(94,94),(47,47)',), ('(96,96),(48,48)',), ('(98,98),(49,49)',), ('(100,100),(50,50)',), ('(0,Infinity),(0,100)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 |>> '(37,38),(39,40)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 |>> '(39,40),(37,38)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 @> '(10,11),(15,16)'",box.sql,SAME,,"[('(16,16),(8,8)',), ('(18,18),(9,9)',), ('(20,20),(10,10)',), ('(Infinity,Infinity),(-Infinity,-Infinity)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 @> '(10,11),(15,15)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 @> '(15,15),(10,11)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 <@ '(10,15),(30,35)'",box.sql,SAME,,"[('(30,30),(15,15)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 <@ '(10,15),(30,35)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 <@ '(30,35),(10,15)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM box_temp WHERE f1 ~= '(20,20),(40,40)'",box.sql,SAME,,"[('(40,40),(20,20)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 ~= '(20,20),(40,40)'",box.sql,SAME,,"[('Index Only Scan using box_spgist on box_temp',), (""  Index Cond: (f1 ~= '(40,40),(20,20)'::box)"",)]"
postgresql,postgresql,RESET enable_seqscan,box.sql,SAME,,[]
postgresql,postgresql,DROP INDEX box_spgist,box.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX quad_box_tbl_idx ON quad_box_tbl USING spgist(b),box.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = ON,box.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = OFF,box.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,box.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = OFF,box.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = ON,box.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = ON,box.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b <<  box '((100,200),(300,500))'",box.sql,SAME,,"[(901,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b &<  box '((100,200),(300,500))'",box.sql,SAME,,"[(3901,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b &&  box '((100,200),(300,500))'",box.sql,SAME,,"[(1653,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b &>  box '((100,200),(300,500))'",box.sql,SAME,,"[(10100,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b >>  box '((100,200),(300,500))'",box.sql,SAME,,"[(7000,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b >>  box '((100,200),(300,500))'",box.sql,SAME,,"[(7000,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b <<| box '((100,200),(300,500))'",box.sql,SAME,,"[(1900,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b &<| box '((100,200),(300,500))'",box.sql,SAME,,"[(5901,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b |&> box '((100,200),(300,500))'",box.sql,SAME,,"[(9100,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b |>> box '((100,200),(300,500))'",box.sql,SAME,,"[(5000,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b @>  box '((201,301),(202,303))'",box.sql,SAME,,"[(1003,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b <@  box '((100,200),(300,500))'",box.sql,SAME,,"[(1600,)]"
postgresql,postgresql,"SELECT count(*) FROM quad_box_tbl WHERE b ~=  box '((200,300),(205,305))'",box.sql,SAME,,"[(1,)]"
postgresql,postgresql,SET enable_indexscan = ON,box.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,box.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id FROM quad_box_tbl",box.sql,SAME,,"[('WindowAgg',), ('  ->  Index Scan using quad_box_tbl_idx on quad_box_tbl',), (""        Order By: (b <-> '(123,456)'::point)"",)]"
postgresql,postgresql,"CREATE TEMP TABLE quad_box_tbl_ord_idx1 AS SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id FROM quad_box_tbl",box.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM quad_box_tbl_ord_seq1 seq FULL JOIN quad_box_tbl_ord_idx1 idx 	ON seq.n = idx.n AND seq.id = idx.id AND 		(seq.dist = idx.dist OR seq.dist IS NULL AND idx.dist IS NULL) WHERE seq.id IS NULL OR idx.id IS NULL,box.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id FROM quad_box_tbl WHERE b <@ box '((200,300),(500,600))'",box.sql,SAME,,"[('WindowAgg',), ('  ->  Index Scan using quad_box_tbl_idx on quad_box_tbl',), (""        Index Cond: (b <@ '(500,600),(200,300)'::box)"",), (""        Order By: (b <-> '(123,456)'::point)"",)]"
postgresql,postgresql,"CREATE TEMP TABLE quad_box_tbl_ord_idx2 AS SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id FROM quad_box_tbl WHERE b <@ box '((200,300),(500,600))'",box.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM quad_box_tbl_ord_seq2 seq FULL JOIN quad_box_tbl_ord_idx2 idx 	ON seq.n = idx.n AND seq.id = idx.id AND 		(seq.dist = idx.dist OR seq.dist IS NULL AND idx.dist IS NULL) WHERE seq.id IS NULL OR idx.id IS NULL,box.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,box.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,box.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,box.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_input_is_valid('200', 'box')",box.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('200', 'box')",box.sql,SAME,,"[('invalid input syntax for type box: ""200""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('((200,300),(500, xyz))', 'box')",box.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('((200,300),(500, xyz))', 'box')",box.sql,SAME,,"[('invalid input syntax for type box: ""((200,300),(500, xyz))""', None, None, '22P02')]"
postgresql,postgresql,"CREATE INDEX brinidx ON brintest USING brin ( 	byteacol, 	charcol, 	namecol, 	int8col, 	int2col, 	int4col, 	textcol, 	oidcol, 	tidcol, 	float4col, 	float8col, 	macaddrcol, 	inetcol inet_inclusion_ops, 	inetcol inet_minmax_ops, 	cidrcol inet_inclusion_ops, 	cidrcol inet_minmax_ops, 	bpcharcol, 	datecol, 	timecol, 	timestampcol, 	timestamptzcol, 	intervalcol, 	timetzcol, 	bitcol, 	varbitcol, 	numericcol, 	uuidcol, 	int4rangecol, 	lsncol, 	boxcol ) with (pages_per_range = 1)",brin.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 0,brin.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 1,brin.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 1,brin.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 0,brin.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 1,brin.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 0,brin.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 0,brin.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 1,brin.sql,SAME,,[]
postgresql,postgresql,END,brin.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,brin.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,brin.sql,SAME,,[]
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx', 0)",brin.sql,SAME,,"[('',)]"
postgresql,postgresql,VACUUM brintest,brin.sql,SAME,,[]
postgresql,postgresql,UPDATE brintest SET int8col = int8col * int4col,brin.sql,SAME,,[]
postgresql,postgresql,UPDATE brintest SET textcol = '' WHERE textcol IS NOT NULL,brin.sql,SAME,,[]
postgresql,postgresql,SELECT brin_summarize_new_values('brinidx'),brin.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx', 0)",brin.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx', 0)",brin.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx', 100000000)",brin.sql,SAME,,"[('',)]"
postgresql,postgresql,CREATE INDEX brin_summarize_idx ON brin_summarize USING brin (value) WITH (pages_per_range=2),brin.sql,SAME,,[]
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_idx', 0)",brin.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_idx', 1)",brin.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_idx', 2)",brin.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_idx', 4294967295)",brin.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE INDEX brinidx_2 ON brintest_2 USING brin (n),brin.sql,SAME,,[]
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx', 0)",brin.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT brin_summarize_range('brinidx', 0)",brin.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE INDEX brin_test_a_idx ON brin_test USING brin (a) WITH (pages_per_range = 2),brin.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX brin_test_b_idx ON brin_test USING brin (b) WITH (pages_per_range = 2),brin.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE brin_test,brin.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brin_test WHERE a = 1,brin.sql,SAME,,"[('Bitmap Heap Scan on brin_test',), ('  Recheck Cond: (a = 1)',), ('  ->  Bitmap Index Scan on brin_test_a_idx',), ('        Index Cond: (a = 1)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brin_test WHERE b = 1,brin.sql,SAME,,"[('Seq Scan on brin_test',), ('  Filter: (b = 1)',)]"
postgresql,postgresql,"CREATE INDEX brin_test_toast_idx ON brintest_3 USING brin (b, c)",brin.sql,SAME,,[]
postgresql,postgresql,DELETE FROM brintest_3,brin.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX CONCURRENTLY brin_test_temp_idx ON brintest_3(a),brin.sql,SAME,,[]
postgresql,postgresql,DROP INDEX brin_test_temp_idx,brin.sql,SAME,,[]
postgresql,postgresql,VACUUM brintest_3,brin.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,brin.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brintest_3 WHERE b < '0',brin.sql,SAME,,"[('Bitmap Heap Scan on brintest_3',), (""  Recheck Cond: (b < '0'::text)"",), ('  ->  Bitmap Index Scan on brin_test_toast_idx',), (""        Index Cond: (b < '0'::text)"",)]"
postgresql,postgresql,SELECT * FROM brintest_3 WHERE b < '0',brin.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,brin.sql,SAME,,[]
postgresql,postgresql,CREATE UNLOGGED TABLE brintest_unlogged (n numrange),brin.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX brinidx_unlogged ON brintest_unlogged USING brin (n),brin.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON brin_insert_optimization USING brin (a),brin.sql,SAME,,[]
postgresql,postgresql,UPDATE brin_insert_optimization SET a = a,brin.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX brinidx_bloom ON brintest_bloom USING brin ( 	byteacol bytea_bloom_ops, 	charcol char_bloom_ops, 	namecol name_bloom_ops, 	int8col int8_bloom_ops, 	int2col int2_bloom_ops, 	int4col int4_bloom_ops, 	textcol text_bloom_ops, 	oidcol oid_bloom_ops, 	float4col float4_bloom_ops, 	float8col float8_bloom_ops, 	macaddrcol macaddr_bloom_ops, 	inetcol inet_bloom_ops, 	cidrcol inet_bloom_ops, 	bpcharcol bpchar_bloom_ops, 	datecol date_bloom_ops, 	timecol time_bloom_ops, 	timestampcol timestamp_bloom_ops, 	timestamptzcol timestamptz_bloom_ops, 	intervalcol interval_bloom_ops, 	timetzcol timetz_bloom_ops, 	numericcol numeric_bloom_ops, 	uuidcol uuid_bloom_ops, 	lsncol pg_lsn_bloom_ops ) with (pages_per_range = 1)",brin_bloom.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 0,brin_bloom.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 1,brin_bloom.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 1,brin_bloom.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 0,brin_bloom.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 1,brin_bloom.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 0,brin_bloom.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 0,brin_bloom.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 1,brin_bloom.sql,SAME,,[]
postgresql,postgresql,END,brin_bloom.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,brin_bloom.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,brin_bloom.sql,SAME,,[]
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx_bloom', 0)",brin_bloom.sql,SAME,,"[('',)]"
postgresql,postgresql,VACUUM brintest_bloom,brin_bloom.sql,SAME,,[]
postgresql,postgresql,UPDATE brintest_bloom SET int8col = int8col * int4col,brin_bloom.sql,SAME,,[]
postgresql,postgresql,UPDATE brintest_bloom SET textcol = '' WHERE textcol IS NOT NULL,brin_bloom.sql,SAME,,[]
postgresql,postgresql,SELECT brin_summarize_new_values('brinidx_bloom'),brin_bloom.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx_bloom', 0)",brin_bloom.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx_bloom', 0)",brin_bloom.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx_bloom', 100000000)",brin_bloom.sql,SAME,,"[('',)]"
postgresql,postgresql,CREATE INDEX brin_summarize_bloom_idx ON brin_summarize_bloom USING brin (value) WITH (pages_per_range=2),brin_bloom.sql,SAME,,[]
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_bloom_idx', 0)",brin_bloom.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_bloom_idx', 1)",brin_bloom.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_bloom_idx', 2)",brin_bloom.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_bloom_idx', 4294967295)",brin_bloom.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE INDEX brin_test_bloom_a_idx ON brin_test_bloom USING brin (a) WITH (pages_per_range = 2),brin_bloom.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX brin_test_bloom_b_idx ON brin_test_bloom USING brin (b) WITH (pages_per_range = 2),brin_bloom.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE brin_test_bloom,brin_bloom.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brin_test_bloom WHERE a = 1,brin_bloom.sql,SAME,,"[('Bitmap Heap Scan on brin_test_bloom',), ('  Recheck Cond: (a = 1)',), ('  ->  Bitmap Index Scan on brin_test_bloom_a_idx',), ('        Index Cond: (a = 1)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brin_test_bloom WHERE b = 1,brin_bloom.sql,SAME,,"[('Seq Scan on brin_test_bloom',), ('  Filter: (b = 1)',)]"
postgresql,postgresql,"CREATE INDEX brinidx_multi ON brintest_multi USING brin ( 	int8col int8_minmax_multi_ops, 	int2col int2_minmax_multi_ops, 	int4col int4_minmax_multi_ops, 	oidcol oid_minmax_multi_ops, 	tidcol tid_minmax_multi_ops, 	float4col float4_minmax_multi_ops, 	float8col float8_minmax_multi_ops, 	macaddrcol macaddr_minmax_multi_ops, 	macaddr8col macaddr8_minmax_multi_ops, 	inetcol inet_minmax_multi_ops, 	cidrcol inet_minmax_multi_ops, 	datecol date_minmax_multi_ops, 	timecol time_minmax_multi_ops, 	timestampcol timestamp_minmax_multi_ops, 	timestamptzcol timestamptz_minmax_multi_ops, 	intervalcol interval_minmax_multi_ops, 	timetzcol timetz_minmax_multi_ops, 	numericcol numeric_minmax_multi_ops, 	uuidcol uuid_minmax_multi_ops, 	lsncol pg_lsn_minmax_multi_ops )",brin_multi.sql,SAME,,[]
postgresql,postgresql,DROP INDEX brinidx_multi,brin_multi.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX brinidx_multi ON brintest_multi USING brin ( 	int8col int8_minmax_multi_ops, 	int2col int2_minmax_multi_ops, 	int4col int4_minmax_multi_ops, 	oidcol oid_minmax_multi_ops, 	tidcol tid_minmax_multi_ops, 	float4col float4_minmax_multi_ops, 	float8col float8_minmax_multi_ops, 	macaddrcol macaddr_minmax_multi_ops, 	macaddr8col macaddr8_minmax_multi_ops, 	inetcol inet_minmax_multi_ops, 	cidrcol inet_minmax_multi_ops, 	datecol date_minmax_multi_ops, 	timecol time_minmax_multi_ops, 	timestampcol timestamp_minmax_multi_ops, 	timestamptzcol timestamptz_minmax_multi_ops, 	intervalcol interval_minmax_multi_ops, 	timetzcol timetz_minmax_multi_ops, 	numericcol numeric_minmax_multi_ops, 	uuidcol uuid_minmax_multi_ops, 	lsncol pg_lsn_minmax_multi_ops ) with (pages_per_range = 1)",brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 0,brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 1,brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 1,brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 0,brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 1,brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 0,brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 0,brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = 1,brin_multi.sql,SAME,,[]
postgresql,postgresql,END,brin_multi.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,brin_multi.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,brin_multi.sql,SAME,,[]
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx_multi', 0)",brin_multi.sql,SAME,,"[('',)]"
postgresql,postgresql,VACUUM brintest_multi,brin_multi.sql,SAME,,[]
postgresql,postgresql,UPDATE brintest_multi SET int8col = int8col * int4col,brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON brin_test_inet USING brin (a inet_minmax_multi_ops),brin_multi.sql,SAME,,[]
postgresql,postgresql,SELECT brin_summarize_new_values('brinidx_multi'),brin_multi.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx_multi', 0)",brin_multi.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx_multi', 0)",brin_multi.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT brin_desummarize_range('brinidx_multi', 100000000)",brin_multi.sql,SAME,,"[('',)]"
postgresql,postgresql,CREATE INDEX brin_large_range_idx ON brin_large_range USING brin (a int4_minmax_multi_ops),brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX brin_summarize_multi_idx ON brin_summarize_multi USING brin (value) WITH (pages_per_range=2),brin_multi.sql,SAME,,[]
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_multi_idx', 0)",brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_multi_idx', 1)",brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_multi_idx', 2)",brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT brin_summarize_range('brin_summarize_multi_idx', 4294967295)",brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE INDEX brin_test_multi_a_idx ON brin_test_multi USING brin (a) WITH (pages_per_range = 2),brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX brin_test_multi_b_idx ON brin_test_multi USING brin (b) WITH (pages_per_range = 2),brin_multi.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE brin_test_multi,brin_multi.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brin_test_multi WHERE a = 1,brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_test_multi',), ('  Recheck Cond: (a = 1)',), ('  ->  Bitmap Index Scan on brin_test_multi_a_idx',), ('        Index Cond: (a = 1)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brin_test_multi WHERE b = 1,brin_multi.sql,SAME,,"[('Seq Scan on brin_test_multi',), ('  Filter: (b = 1)',)]"
postgresql,postgresql,CREATE INDEX brin_test_multi_1_idx_1 ON brin_test_multi_1 USING brin (a int4_minmax_multi_ops) WITH (pages_per_range=5),brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX brin_test_multi_1_idx_2 ON brin_test_multi_1 USING brin (b int8_minmax_multi_ops) WITH (pages_per_range=5),brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan=off,brin_multi.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a < 37,brin_multi.sql,SAME,,"[(124,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a < 113,brin_multi.sql,SAME,,"[(504,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a <= 177,brin_multi.sql,SAME,,"[(829,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a <= 25,brin_multi.sql,SAME,,"[(69,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a > 120,brin_multi.sql,SAME,,"[(456,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a >= 180,brin_multi.sql,SAME,,"[(161,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a > 71,brin_multi.sql,SAME,,"[(701,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a >= 63,brin_multi.sql,SAME,,"[(746,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a = 207,brin_multi.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a = 177,brin_multi.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b < 73,brin_multi.sql,SAME,,"[(529,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b <= 47,brin_multi.sql,SAME,,"[(279,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b < 199,brin_multi.sql,SAME,,"[(1000,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b <= 150,brin_multi.sql,SAME,,"[(1000,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b > 93,brin_multi.sql,SAME,,"[(261,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b > 37,brin_multi.sql,SAME,,"[(821,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b >= 215,brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b > 201,brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b = 88,brin_multi.sql,SAME,,"[(10,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b = 103,brin_multi.sql,SAME,,"[(9,)]"
postgresql,postgresql,TRUNCATE brin_test_multi_1,brin_multi.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a < 37,brin_multi.sql,SAME,,"[(124,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a < 113,brin_multi.sql,SAME,,"[(504,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a <= 177,brin_multi.sql,SAME,,"[(829,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a <= 25,brin_multi.sql,SAME,,"[(69,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a > 120,brin_multi.sql,SAME,,"[(456,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a >= 180,brin_multi.sql,SAME,,"[(161,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a > 71,brin_multi.sql,SAME,,"[(701,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a >= 63,brin_multi.sql,SAME,,"[(746,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a = 207,brin_multi.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE a = 177,brin_multi.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b < 73,brin_multi.sql,SAME,,"[(529,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b <= 47,brin_multi.sql,SAME,,"[(279,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b < 199,brin_multi.sql,SAME,,"[(1000,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b <= 150,brin_multi.sql,SAME,,"[(1000,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b > 93,brin_multi.sql,SAME,,"[(261,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b > 37,brin_multi.sql,SAME,,"[(821,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b >= 215,brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b > 201,brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b = 88,brin_multi.sql,SAME,,"[(10,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_1 WHERE b = 103,brin_multi.sql,SAME,,"[(9,)]"
postgresql,postgresql,RESET enable_seqscan,brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX brin_test_multi_2_idx ON brin_test_multi_2 USING brin (a uuid_minmax_multi_ops) WITH (pages_per_range=5),brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan=off,brin_multi.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a < '3d914f93-48c9-cc0f-f8a7-9716700b9fcd',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a > '3d914f93-48c9-cc0f-f8a7-9716700b9fcd',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a <= 'f369cb89-fc62-7e66-8987-007d121ed1ea',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a >= 'aea92132-c4cb-eb26-3e6a-c2bf6c183b5d',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a = '5feceb66-ffc8-6f38-d952-786c6d696c79',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a = '86e50149-6586-6131-2a9e-0b35558d84f6',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,TRUNCATE brin_test_multi_2,brin_multi.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a < '3d914f93-48c9-cc0f-f8a7-9716700b9fcd',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a > '3d914f93-48c9-cc0f-f8a7-9716700b9fcd',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a <= 'f369cb89-fc62-7e66-8987-007d121ed1ea',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a >= 'aea92132-c4cb-eb26-3e6a-c2bf6c183b5d',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a = '5feceb66-ffc8-6f38-d952-786c6d696c79',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_test_multi_2 WHERE a = '86e50149-6586-6131-2a9e-0b35558d84f6',brin_multi.sql,SAME,,"[(0,)]"
postgresql,postgresql,RESET enable_seqscan,brin_multi.sql,SAME,,[]
postgresql,postgresql,SET datestyle TO iso,brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON brin_timestamp_test USING brin (a timestamptz_minmax_multi_ops) WITH (pages_per_range=1),brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON brin_date_test USING brin (a date_minmax_multi_ops) WITH (pages_per_range=1),brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,brin_multi.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF, SUMMARY OFF) SELECT * FROM brin_date_test WHERE a = '2023-01-01'::date",brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_date_test (actual rows=0 loops=1)',), (""  Recheck Cond: (a = '2023-01-01'::date)"",), ('  ->  Bitmap Index Scan on brin_date_test_a_idx (actual rows=0 loops=1)',), (""        Index Cond: (a = '2023-01-01'::date)"",)]"
postgresql,postgresql,RESET enable_seqscan,brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON brin_timestamp_test USING brin (a timestamp_minmax_multi_ops) WITH (pages_per_range=1),brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,brin_multi.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF, SUMMARY OFF) SELECT * FROM brin_timestamp_test WHERE a = '2023-01-01'::timestamp",brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_timestamp_test (actual rows=0 loops=1)',), (""  Recheck Cond: (a = '2023-01-01 00:00:00'::timestamp without time zone)"",), ('  ->  Bitmap Index Scan on brin_timestamp_test_a_idx (actual rows=0 loops=1)',), (""        Index Cond: (a = '2023-01-01 00:00:00'::timestamp without time zone)"",)]"
postgresql,postgresql,"EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF, SUMMARY OFF) SELECT * FROM brin_timestamp_test WHERE a = '1900-01-01'::timestamp",brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_timestamp_test (actual rows=0 loops=1)',), (""  Recheck Cond: (a = '1900-01-01 00:00:00'::timestamp without time zone)"",), ('  ->  Bitmap Index Scan on brin_timestamp_test_a_idx (actual rows=0 loops=1)',), (""        Index Cond: (a = '1900-01-01 00:00:00'::timestamp without time zone)"",)]"
postgresql,postgresql,RESET enable_seqscan,brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON brin_date_test USING brin (a date_minmax_multi_ops) WITH (pages_per_range=1),brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,brin_multi.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF, SUMMARY OFF) SELECT * FROM brin_date_test WHERE a = '2023-01-01'::date",brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_date_test (actual rows=0 loops=1)',), (""  Recheck Cond: (a = '2023-01-01'::date)"",), ('  ->  Bitmap Index Scan on brin_date_test_a_idx (actual rows=0 loops=1)',), (""        Index Cond: (a = '2023-01-01'::date)"",)]"
postgresql,postgresql,"EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF, SUMMARY OFF) SELECT * FROM brin_date_test WHERE a = '1900-01-01'::date",brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_date_test (actual rows=0 loops=1)',), (""  Recheck Cond: (a = '1900-01-01'::date)"",), ('  ->  Bitmap Index Scan on brin_date_test_a_idx (actual rows=0 loops=1)',), (""        Index Cond: (a = '1900-01-01'::date)"",)]"
postgresql,postgresql,RESET enable_seqscan,brin_multi.sql,SAME,,[]
postgresql,postgresql,RESET datestyle,brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON brin_interval_test USING brin (a interval_minmax_multi_ops) WITH (pages_per_range=1),brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,brin_multi.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF, SUMMARY OFF) SELECT * FROM brin_interval_test WHERE a = '-30 years'::interval",brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_interval_test (actual rows=0 loops=1)',), (""  Recheck Cond: (a = '-30 years'::interval)"",), ('  ->  Bitmap Index Scan on brin_interval_test_a_idx (actual rows=0 loops=1)',), (""        Index Cond: (a = '-30 years'::interval)"",)]"
postgresql,postgresql,"EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF, SUMMARY OFF) SELECT * FROM brin_interval_test WHERE a = '30 years'::interval",brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_interval_test (actual rows=0 loops=1)',), (""  Recheck Cond: (a = '30 years'::interval)"",), ('  ->  Bitmap Index Scan on brin_interval_test_a_idx (actual rows=0 loops=1)',), (""        Index Cond: (a = '30 years'::interval)"",)]"
postgresql,postgresql,RESET enable_seqscan,brin_multi.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON brin_interval_test USING brin (a interval_minmax_multi_ops) WITH (pages_per_range=1),brin_multi.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,brin_multi.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF, SUMMARY OFF) SELECT * FROM brin_interval_test WHERE a = '-30 years'::interval",brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_interval_test (actual rows=0 loops=1)',), (""  Recheck Cond: (a = '-30 years'::interval)"",), ('  ->  Bitmap Index Scan on brin_interval_test_a_idx (actual rows=0 loops=1)',), (""        Index Cond: (a = '-30 years'::interval)"",)]"
postgresql,postgresql,"EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF, SUMMARY OFF) SELECT * FROM brin_interval_test WHERE a = '30 years'::interval",brin_multi.sql,SAME,,"[('Bitmap Heap Scan on brin_interval_test (actual rows=0 loops=1)',), (""  Recheck Cond: (a = '30 years'::interval)"",), ('  ->  Bitmap Index Scan on brin_interval_test_a_idx (actual rows=0 loops=1)',), (""        Index Cond: (a = '30 years'::interval)"",)]"
postgresql,postgresql,RESET enable_seqscan,brin_multi.sql,SAME,,[]
postgresql,postgresql,RESET datestyle,brin_multi.sql,SAME,,[]
postgresql,postgresql,ANALYZE bt_i4_heap,btree_index.sql,SAME,,[]
postgresql,postgresql,ANALYZE bt_name_heap,btree_index.sql,SAME,,[]
postgresql,postgresql,ANALYZE bt_txt_heap,btree_index.sql,SAME,,[]
postgresql,postgresql,ANALYZE bt_f8_heap,btree_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX bt_i4_index ON bt_i4_heap USING btree (seqno int4_ops),btree_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX bt_name_index ON bt_name_heap USING btree (seqno name_ops),btree_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX bt_txt_index ON bt_txt_heap USING btree (seqno text_ops),btree_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX bt_f8_index ON bt_f8_heap USING btree (seqno float8_ops),btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_i4_heap b    WHERE b.seqno < 1,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_i4_heap b    WHERE b.seqno >= 9999,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_i4_heap b    WHERE b.seqno = 4500,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_name_heap b    WHERE b.seqno < '1'::name,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_name_heap b    WHERE b.seqno >= '9999'::name,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_name_heap b    WHERE b.seqno = '4500'::name,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_txt_heap b    WHERE b.seqno < '1'::text,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_txt_heap b    WHERE b.seqno >= '9999'::text,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_txt_heap b    WHERE b.seqno = '4500'::text,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_f8_heap b    WHERE b.seqno < '1'::float8,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_f8_heap b    WHERE b.seqno >= '9999'::float8,btree_index.sql,SAME,,[]
postgresql,postgresql,SELECT b.*    FROM bt_f8_heap b    WHERE b.seqno = '4500'::float8,btree_index.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan to false,btree_index.sql,SAME,,[]
postgresql,postgresql,set enable_indexscan to true,btree_index.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan to false,btree_index.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan to false,btree_index.sql,SAME,,[]
postgresql,postgresql,set enable_indexscan to true,btree_index.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan to false,btree_index.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1,btree_index.sql,SAME,,"[('Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Index Cond: ((proname >= 'RI_FKey'::text) AND (proname < 'RI_FKez'::text))"",), (""  Filter: (proname ~~ 'RI\\_FKey%del'::text)"",)]"
postgresql,postgresql,select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1,btree_index.sql,SAME,,"[('RI_FKey_cascade_del',), ('RI_FKey_noaction_del',), ('RI_FKey_restrict_del',), ('RI_FKey_setdefault_del',), ('RI_FKey_setnull_del',)]"
postgresql,postgresql,explain (costs off) select proname from pg_proc where proname ilike '00%foo' order by 1,btree_index.sql,SAME,,"[('Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Index Cond: ((proname >= '00'::text) AND (proname < '01'::text))"",), (""  Filter: (proname ~~* '00%foo'::text)"",)]"
postgresql,postgresql,select proname from pg_proc where proname ilike '00%foo' order by 1,btree_index.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select proname from pg_proc where proname ilike 'ri%foo' order by 1,btree_index.sql,SAME,,"[('Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Filter: (proname ~~* 'ri%foo'::text)"",)]"
postgresql,postgresql,set enable_indexscan to false,btree_index.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan to true,btree_index.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1,btree_index.sql,SAME,,"[('Sort',), ('  Sort Key: proname',), ('  ->  Bitmap Heap Scan on pg_proc',), (""        Filter: (proname ~~ 'RI\\_FKey%del'::text)"",), ('        ->  Bitmap Index Scan on pg_proc_proname_args_nsp_index',), (""              Index Cond: ((proname >= 'RI_FKey'::text) AND (proname < 'RI_FKez'::text))"",)]"
postgresql,postgresql,select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1,btree_index.sql,SAME,,"[('RI_FKey_cascade_del',), ('RI_FKey_noaction_del',), ('RI_FKey_restrict_del',), ('RI_FKey_setdefault_del',), ('RI_FKey_setnull_del',)]"
postgresql,postgresql,explain (costs off) select proname from pg_proc where proname ilike '00%foo' order by 1,btree_index.sql,SAME,,"[('Sort',), ('  Sort Key: proname',), ('  ->  Bitmap Heap Scan on pg_proc',), (""        Filter: (proname ~~* '00%foo'::text)"",), ('        ->  Bitmap Index Scan on pg_proc_proname_args_nsp_index',), (""              Index Cond: ((proname >= '00'::text) AND (proname < '01'::text))"",)]"
postgresql,postgresql,select proname from pg_proc where proname ilike '00%foo' order by 1,btree_index.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select proname from pg_proc where proname ilike 'ri%foo' order by 1,btree_index.sql,SAME,,"[('Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Filter: (proname ~~* 'ri%foo'::text)"",)]"
postgresql,postgresql,reset enable_seqscan,btree_index.sql,SAME,,[]
postgresql,postgresql,reset enable_indexscan,btree_index.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,btree_index.sql,SAME,,[]
postgresql,postgresql,"create temp table btree_bpchar (f1 text collate ""C"")",btree_index.sql,SAME,,[]
postgresql,postgresql,create index on btree_bpchar(f1 bpchar_ops) WITH (deduplicate_items=on),btree_index.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from btree_bpchar where f1 like 'foo',btree_index.sql,SAME,,"[('Seq Scan on btree_bpchar',), (""  Filter: (f1 ~~ 'foo'::text)"",)]"
postgresql,postgresql,select * from btree_bpchar where f1 like 'foo',btree_index.sql,SAME,,"[('foo',)]"
postgresql,postgresql,explain (costs off) select * from btree_bpchar where f1 like 'foo%',btree_index.sql,SAME,,"[('Seq Scan on btree_bpchar',), (""  Filter: (f1 ~~ 'foo%'::text)"",)]"
postgresql,postgresql,select * from btree_bpchar where f1 like 'foo%',btree_index.sql,SAME,,"[('foo',), ('fool',)]"
postgresql,postgresql,explain (costs off) select * from btree_bpchar where f1::bpchar like 'foo',btree_index.sql,SAME,,"[('Bitmap Heap Scan on btree_bpchar',), (""  Filter: ((f1)::bpchar ~~ 'foo'::text)"",), ('  ->  Bitmap Index Scan on btree_bpchar_f1_idx',), (""        Index Cond: ((f1)::bpchar = 'foo'::bpchar)"",)]"
postgresql,postgresql,select * from btree_bpchar where f1::bpchar like 'foo',btree_index.sql,SAME,,"[('foo',)]"
postgresql,postgresql,explain (costs off) select * from btree_bpchar where f1::bpchar like 'foo%',btree_index.sql,SAME,,"[('Bitmap Heap Scan on btree_bpchar',), (""  Filter: ((f1)::bpchar ~~ 'foo%'::text)"",), ('  ->  Bitmap Index Scan on btree_bpchar_f1_idx',), (""        Index Cond: (((f1)::bpchar >= 'foo'::bpchar) AND ((f1)::bpchar < 'fop'::bpchar))"",)]"
postgresql,postgresql,select * from btree_bpchar where f1::bpchar like 'foo%',btree_index.sql,SAME,,"[('foo',), ('fool',)]"
postgresql,postgresql,CREATE UNIQUE INDEX dedup_unique ON dedup_unique_test_table (a) WITH (deduplicate_items=on),btree_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX plain_unique ON dedup_unique_test_table (a) WITH (deduplicate_items=off),btree_index.sql,SAME,,[]
postgresql,postgresql,DROP INDEX plain_unique,btree_index.sql,SAME,,[]
postgresql,postgresql,DELETE FROM dedup_unique_test_table WHERE a = 1,btree_index.sql,SAME,,[]
postgresql,postgresql,alter table btree_tall_tbl alter COLUMN t set storage plain,btree_index.sql,SAME,,[]
postgresql,postgresql,"create index btree_tall_idx on btree_tall_tbl (t, id) with (fillfactor = 10)",btree_index.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE delete_test_table ADD PRIMARY KEY (a,b,c,d)",btree_index.sql,SAME,,[]
postgresql,postgresql,DELETE FROM delete_test_table WHERE a < 79990,btree_index.sql,SAME,,[]
postgresql,postgresql,VACUUM delete_test_table,btree_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX btree_tall_idx2 ON btree_tall_tbl (id),btree_index.sql,SAME,,[]
postgresql,postgresql,DROP INDEX btree_tall_idx2,btree_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX btree_part_idx ON btree_part(id),btree_index.sql,SAME,,[]
postgresql,postgresql,"SELECT '3' AS ""One"",   CASE     WHEN 1 < 2 THEN 3   END AS ""Simple WHEN""",case.sql,SAME,,"[('3', 3)]"
postgresql,postgresql,"SELECT '<NULL>' AS ""One"",   CASE     WHEN 1 > 2 THEN 3   END AS ""Simple default""",case.sql,SAME,,"[('<NULL>', None)]"
postgresql,postgresql,"SELECT '3' AS ""One"",   CASE     WHEN 1 < 2 THEN 3     ELSE 4   END AS ""Simple ELSE""",case.sql,SAME,,"[('3', 3)]"
postgresql,postgresql,"SELECT '4' AS ""One"",   CASE     WHEN 1 > 2 THEN 3     ELSE 4   END AS ""ELSE default""",case.sql,SAME,,"[('4', 4)]"
postgresql,postgresql,"SELECT '6' AS ""One"",   CASE     WHEN 1 > 2 THEN 3     WHEN 4 < 5 THEN 6     ELSE 7   END AS ""Two WHEN with default""",case.sql,SAME,,"[('6', 6)]"
postgresql,postgresql,"SELECT '7' AS ""None"",    CASE WHEN random() < 0 THEN 1    END AS ""NULL on no matches""",case.sql,SAME,,"[('7', None)]"
postgresql,postgresql,SELECT CASE WHEN 1=0 THEN 1/0 WHEN 1=1 THEN 1 ELSE 2/0 END,case.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT CASE 1 WHEN 0 THEN 1/0 WHEN 1 THEN 1 ELSE 2/0 END,case.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT CASE 'a' WHEN 'a' THEN 1 ELSE 2 END,case.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT   CASE     WHEN i >= 3 THEN i   END AS "">= 3 or Null""   FROM CASE_TBL",case.sql,SAME,,"[(None,), (None,), (3,), (4,)]"
postgresql,postgresql,"SELECT   CASE WHEN i >= 3 THEN (i + i)        ELSE i   END AS ""Simplest Math""   FROM CASE_TBL",case.sql,SAME,,"[(1,), (2,), (6,), (8,)]"
postgresql,postgresql,"SELECT i AS ""Value"",   CASE WHEN (i < 0) THEN 'small'        WHEN (i = 0) THEN 'zero'        WHEN (i = 1) THEN 'one'        WHEN (i = 2) THEN 'two'        ELSE 'big'   END AS ""Category""   FROM CASE_TBL",case.sql,SAME,,"[(1, 'one'), (2, 'two'), (3, 'big'), (4, 'big')]"
postgresql,postgresql,"SELECT   CASE WHEN ((i < 0) or (i < 0)) THEN 'small'        WHEN ((i = 0) or (i = 0)) THEN 'zero'        WHEN ((i = 1) or (i = 1)) THEN 'one'        WHEN ((i = 2) or (i = 2)) THEN 'two'        ELSE 'big'   END AS ""Category""   FROM CASE_TBL",case.sql,SAME,,"[('one',), ('two',), ('big',), ('big',)]"
postgresql,postgresql,"SELECT * FROM CASE_TBL WHERE COALESCE(f,i) = 4",case.sql,SAME,,"[(4, None)]"
postgresql,postgresql,"SELECT * FROM CASE_TBL WHERE NULLIF(f,i) = 2",case.sql,SAME,,[]
postgresql,postgresql,"SELECT COALESCE(a.f, b.i, b.j)   FROM CASE_TBL a, CASE2_TBL b",case.sql,SAME,,"[(10.1,), (20.2,), (-30.3,), (1.0,), (10.1,), (20.2,), (-30.3,), (2.0,), (10.1,), (20.2,), (-30.3,), (3.0,), (10.1,), (20.2,), (-30.3,), (2.0,), (10.1,), (20.2,), (-30.3,), (1.0,), (10.1,), (20.2,), (-30.3,), (-6.0,)]"
postgresql,postgresql,"SELECT *   FROM CASE_TBL a, CASE2_TBL b   WHERE COALESCE(a.f, b.i, b.j) = 2",case.sql,SAME,,"[(4, None, 2, -2), (4, None, 2, -4)]"
postgresql,postgresql,"SELECT NULLIF(a.i,b.i) AS ""NULLIF(a.i,b.i)"",   NULLIF(b.i, 4) AS ""NULLIF(b.i,4)""   FROM CASE_TBL a, CASE2_TBL b",case.sql,SAME,,"[(None, 1), (2, 1), (3, 1), (4, 1), (1, 2), (None, 2), (3, 2), (4, 2), (1, 3), (2, 3), (None, 3), (4, 3), (1, 2), (None, 2), (3, 2), (4, 2), (None, 1), (2, 1), (3, 1), (4, 1), (1, None), (2, None), (3, None), (4, None)]"
postgresql,postgresql,"SELECT *   FROM CASE_TBL a, CASE2_TBL b   WHERE COALESCE(f,b.i) = 2",case.sql,SAME,,"[(4, None, 2, -2), (4, None, 2, -4)]"
postgresql,postgresql,"explain (costs off) SELECT * FROM CASE_TBL WHERE NULLIF(1, 2) = 2",case.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,"explain (costs off) SELECT * FROM CASE_TBL WHERE NULLIF(1, 1) IS NOT NULL",case.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,"explain (costs off) SELECT * FROM CASE_TBL WHERE NULLIF(1, null) = 2",case.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,UPDATE CASE_TBL   SET i = CASE WHEN i >= 3 THEN (- i)                 ELSE (2 * i) END,case.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM CASE_TBL,case.sql,SAME,,"[(2, 10.1), (4, 20.2), (-3, -30.3), (-4, None)]"
postgresql,postgresql,UPDATE CASE_TBL   SET i = CASE WHEN i >= 2 THEN (2 * i)                 ELSE (3 * i) END,case.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM CASE_TBL,case.sql,SAME,,"[(4, 10.1), (8, 20.2), (-9, -30.3), (-12, None)]"
postgresql,postgresql,UPDATE CASE_TBL   SET i = CASE WHEN b.i >= 2 THEN (2 * j)                 ELSE (3 * j) END   FROM CASE2_TBL b   WHERE j = -CASE_TBL.i,case.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM CASE_TBL,case.sql,SAME,,"[(8, 20.2), (-9, -30.3), (-12, None), (-8, 10.1)]"
postgresql,postgresql,BEGIN,case.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,case.sql,SAME,,[]
postgresql,postgresql,BEGIN,case.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN arrdomain AS int[],case.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,case.sql,SAME,,[]
postgresql,postgresql,BEGIN,case.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE casetestenum AS ENUM ('e', 'f', 'g')",case.sql,SAME,,[]
postgresql,postgresql,"SELECT   CASE 'foo'::text     WHEN 'foo' THEN ARRAY['a', 'b', 'c', 'd'] || enum_range(NULL::casetestenum)::text[]     ELSE ARRAY['x', 'y']     END",case.sql,SAME,,"[(['a', 'b', 'c', 'd', 'e', 'f', 'g'],)]"
postgresql,postgresql,ROLLBACK,case.sql,SAME,,[]
postgresql,postgresql,SELECT char 'c' = char 'c' AS true,char.sql,SAME,,"[(True,)]"
postgresql,postgresql,CREATE TEMP TABLE CHAR_TBL(f1 char),char.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM CHAR_TBL,char.sql,SAME,,"[('a',), ('A',), ('1',), ('2',), ('3',), (' ',), ('c',)]"
postgresql,postgresql,SELECT c.*    FROM CHAR_TBL c    WHERE c.f1 <> 'a',char.sql,SAME,,"[('A',), ('1',), ('2',), ('3',), (' ',), ('c',)]"
postgresql,postgresql,SELECT c.*    FROM CHAR_TBL c    WHERE c.f1 = 'a',char.sql,SAME,,"[('a',)]"
postgresql,postgresql,SELECT c.*    FROM CHAR_TBL c    WHERE c.f1 < 'a',char.sql,SAME,,"[('A',), ('1',), ('2',), ('3',), (' ',)]"
postgresql,postgresql,SELECT c.*    FROM CHAR_TBL c    WHERE c.f1 <= 'a',char.sql,SAME,,"[('a',), ('A',), ('1',), ('2',), ('3',), (' ',)]"
postgresql,postgresql,SELECT c.*    FROM CHAR_TBL c    WHERE c.f1 > 'a',char.sql,SAME,,"[('c',)]"
postgresql,postgresql,SELECT c.*    FROM CHAR_TBL c    WHERE c.f1 >= 'a',char.sql,SAME,,"[('a',), ('c',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('abcd  ', 'char(4)')",char.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('abcde', 'char(4)')",char.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('abcde', 'char(4)')",char.sql,SAME,,"[('value too long for type character(4)', None, None, '22001')]"
postgresql,postgresql,"SELECT 'a'::""char""",char.sql,SAME,,"[('a',)]"
postgresql,postgresql,"SELECT '\101'::""char""",char.sql,SAME,,"[('A',)]"
postgresql,postgresql,"SELECT '\377'::""char""",char.sql,SAME,,"[('\\377',)]"
postgresql,postgresql,"SELECT 'a'::""char""::text",char.sql,SAME,,"[('a',)]"
postgresql,postgresql,"SELECT '\377'::""char""::text",char.sql,SAME,,"[('\\377',)]"
postgresql,postgresql,"SELECT '\000'::""char""::text",char.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT 'a'::text::""char""",char.sql,SAME,,"[('a',)]"
postgresql,postgresql,"SELECT '\377'::text::""char""",char.sql,SAME,,"[('\\377',)]"
postgresql,postgresql,"SELECT ''::text::""char""",char.sql,SAME,,"[('',)]"
postgresql,postgresql,SET extra_float_digits = -1,circle.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM CIRCLE_TBL,circle.sql,SAME,,"[('<(5,1),3>',), ('<(1,2),100>',), ('<(1,3),5>',), ('<(1,2),3>',), ('<(100,200),10>',), ('<(100,1),115>',), ('<(3,5),0>',), ('<(3,5),NaN>',)]"
postgresql,postgresql,SELECT center(f1) AS center   FROM CIRCLE_TBL,circle.sql,SAME,,"[('(5,1)',), ('(1,2)',), ('(1,3)',), ('(1,2)',), ('(100,200)',), ('(100,1)',), ('(3,5)',), ('(3,5)',)]"
postgresql,postgresql,SELECT radius(f1) AS radius   FROM CIRCLE_TBL,circle.sql,SAME,,"[(3.0,), (100.0,), (5.0,), (3.0,), (10.0,), (115.0,), (0.0,), (nan,)]"
postgresql,postgresql,SELECT diameter(f1) AS diameter   FROM CIRCLE_TBL,circle.sql,SAME,,"[(6.0,), (200.0,), (10.0,), (6.0,), (20.0,), (230.0,), (0.0,), (nan,)]"
postgresql,postgresql,SELECT f1 FROM CIRCLE_TBL WHERE radius(f1) < 5,circle.sql,SAME,,"[('<(5,1),3>',), ('<(1,2),3>',), ('<(3,5),0>',)]"
postgresql,postgresql,SELECT f1 FROM CIRCLE_TBL WHERE diameter(f1) >= 10,circle.sql,SAME,,"[('<(1,2),100>',), ('<(1,3),5>',), ('<(100,200),10>',), ('<(100,1),115>',), ('<(3,5),NaN>',)]"
postgresql,postgresql,"SELECT c1.f1 AS one, c2.f1 AS two, (c1.f1 <-> c2.f1) AS distance   FROM CIRCLE_TBL c1, CIRCLE_TBL c2   WHERE (c1.f1 < c2.f1) AND ((c1.f1 <-> c2.f1) > 0)   ORDER BY distance, area(c1.f1), area(c2.f1)",circle.sql,SAME,,"[('<(3,5),0>', '<(1,2),3>', 0.60555127546399), ('<(3,5),0>', '<(5,1),3>', 1.4721359549996), ('<(100,200),10>', '<(100,1),115>', 74.0), ('<(100,200),10>', '<(1,2),100>', 111.37072977248), ('<(1,3),5>', '<(100,200),10>', 205.4767561445), ('<(5,1),3>', '<(100,200),10>', 207.51303816328), ('<(3,5),0>', '<(100,200),10>', 207.79348015953), ('<(1,2),3>', '<(100,200),10>', 208.37072977248)]"
postgresql,postgresql,CREATE INDEX clstr_tst_b ON clstr_tst (b),cluster.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX clstr_tst_c ON clstr_tst (c),cluster.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX clstr_tst_c_b ON clstr_tst (c,b)",cluster.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX clstr_tst_b_c ON clstr_tst (b,c)",cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER clstr_tst_c ON clstr_tst,cluster.sql,SAME,,[]
postgresql,postgresql,"SELECT a,b,c,substring(d for 30), length(d) from clstr_tst",cluster.sql,SAME,,"[(10, 14, 'catorce', None, None), (18, 5, 'cinco', None, None), (9, 4, 'cuatro', None, None), (26, 19, 'diecinueve', None, None), (12, 18, 'dieciocho', None, None), (30, 16, 'dieciseis', None, None), (24, 17, 'diecisiete', None, None), (2, 10, 'diez', None, None), (23, 12, 'doce', None, None), (11, 2, 'dos', None, None), (25, 9, 'nueve', None, None), (31, 8, 'ocho', None, None), (1, 11, 'once', None, None), (28, 15, 'quince', None, None), (32, 6, 'seis', 'xyzzyxyzzyxyzzyxyzzyxyzzyxyzzy', 500000), (29, 7, 'siete', None, None), (15, 13, 'trece', None, None), (22, 30, 'treinta', None, None), (17, 32, 'treinta y dos', None, None), (3, 31, 'treinta y uno', None, None), (5, 3, 'tres', None, None), (20, 1, 'uno', None, None), (6, 20, 'veinte', None, None), (14, 25, 'veinticinco', None, None), (21, 24, 'veinticuatro', None, None), (4, 22, 'veintidos', None, None), (19, 29, 'veintinueve', None, None), (16, 28, 'veintiocho', None, None), (27, 26, 'veintiseis', None, None), (13, 27, 'veintisiete', None, None), (7, 23, 'veintitres', None, None), (8, 21, 'veintiuno', None, None)]"
postgresql,postgresql,"SELECT a,b,c,substring(d for 30), length(d) from clstr_tst ORDER BY a",cluster.sql,SAME,,"[(1, 11, 'once', None, None), (2, 10, 'diez', None, None), (3, 31, 'treinta y uno', None, None), (4, 22, 'veintidos', None, None), (5, 3, 'tres', None, None), (6, 20, 'veinte', None, None), (7, 23, 'veintitres', None, None), (8, 21, 'veintiuno', None, None), (9, 4, 'cuatro', None, None), (10, 14, 'catorce', None, None), (11, 2, 'dos', None, None), (12, 18, 'dieciocho', None, None), (13, 27, 'veintisiete', None, None), (14, 25, 'veinticinco', None, None), (15, 13, 'trece', None, None), (16, 28, 'veintiocho', None, None), (17, 32, 'treinta y dos', None, None), (18, 5, 'cinco', None, None), (19, 29, 'veintinueve', None, None), (20, 1, 'uno', None, None), (21, 24, 'veinticuatro', None, None), (22, 30, 'treinta', None, None), (23, 12, 'doce', None, None), (24, 17, 'diecisiete', None, None), (25, 9, 'nueve', None, None), (26, 19, 'diecinueve', None, None), (27, 26, 'veintiseis', None, None), (28, 15, 'quince', None, None), (29, 7, 'siete', None, None), (30, 16, 'dieciseis', None, None), (31, 8, 'ocho', None, None), (32, 6, 'seis', 'xyzzyxyzzyxyzzyxyzzyxyzzyxyzzy', 500000)]"
postgresql,postgresql,"SELECT a,b,c,substring(d for 30), length(d) from clstr_tst ORDER BY b",cluster.sql,SAME,,"[(20, 1, 'uno', None, None), (11, 2, 'dos', None, None), (5, 3, 'tres', None, None), (9, 4, 'cuatro', None, None), (18, 5, 'cinco', None, None), (32, 6, 'seis', 'xyzzyxyzzyxyzzyxyzzyxyzzyxyzzy', 500000), (29, 7, 'siete', None, None), (31, 8, 'ocho', None, None), (25, 9, 'nueve', None, None), (2, 10, 'diez', None, None), (1, 11, 'once', None, None), (23, 12, 'doce', None, None), (15, 13, 'trece', None, None), (10, 14, 'catorce', None, None), (28, 15, 'quince', None, None), (30, 16, 'dieciseis', None, None), (24, 17, 'diecisiete', None, None), (12, 18, 'dieciocho', None, None), (26, 19, 'diecinueve', None, None), (6, 20, 'veinte', None, None), (8, 21, 'veintiuno', None, None), (4, 22, 'veintidos', None, None), (7, 23, 'veintitres', None, None), (21, 24, 'veinticuatro', None, None), (14, 25, 'veinticinco', None, None), (27, 26, 'veintiseis', None, None), (13, 27, 'veintisiete', None, None), (16, 28, 'veintiocho', None, None), (19, 29, 'veintinueve', None, None), (22, 30, 'treinta', None, None), (3, 31, 'treinta y uno', None, None), (17, 32, 'treinta y dos', None, None)]"
postgresql,postgresql,"SELECT a,b,c,substring(d for 30), length(d) from clstr_tst ORDER BY c",cluster.sql,SAME,,"[(10, 14, 'catorce', None, None), (18, 5, 'cinco', None, None), (9, 4, 'cuatro', None, None), (26, 19, 'diecinueve', None, None), (12, 18, 'dieciocho', None, None), (30, 16, 'dieciseis', None, None), (24, 17, 'diecisiete', None, None), (2, 10, 'diez', None, None), (23, 12, 'doce', None, None), (11, 2, 'dos', None, None), (25, 9, 'nueve', None, None), (31, 8, 'ocho', None, None), (1, 11, 'once', None, None), (28, 15, 'quince', None, None), (32, 6, 'seis', 'xyzzyxyzzyxyzzyxyzzyxyzzyxyzzy', 500000), (29, 7, 'siete', None, None), (15, 13, 'trece', None, None), (22, 30, 'treinta', None, None), (17, 32, 'treinta y dos', None, None), (3, 31, 'treinta y uno', None, None), (5, 3, 'tres', None, None), (20, 1, 'uno', None, None), (6, 20, 'veinte', None, None), (14, 25, 'veinticinco', None, None), (21, 24, 'veinticuatro', None, None), (4, 22, 'veintidos', None, None), (19, 29, 'veintinueve', None, None), (16, 28, 'veintiocho', None, None), (27, 26, 'veintiseis', None, None), (13, 27, 'veintisiete', None, None), (7, 23, 'veintitres', None, None), (8, 21, 'veintiuno', None, None)]"
postgresql,postgresql,"SELECT a,b,c,substring(d for 30), length(d) from clstr_tst",cluster.sql,SAME,,"[(10, 14, 'catorce', None, None), (18, 5, 'cinco', None, None), (9, 4, 'cuatro', None, None), (26, 19, 'diecinueve', None, None), (12, 18, 'dieciocho', None, None), (30, 16, 'dieciseis', None, None), (24, 17, 'diecisiete', None, None), (2, 10, 'diez', None, None), (23, 12, 'doce', None, None), (11, 2, 'dos', None, None), (25, 9, 'nueve', None, None), (31, 8, 'ocho', None, None), (1, 11, 'once', None, None), (28, 15, 'quince', None, None), (32, 6, 'seis', 'xyzzyxyzzyxyzzyxyzzyxyzzyxyzzy', 500000), (29, 7, 'siete', None, None), (15, 13, 'trece', None, None), (22, 30, 'treinta', None, None), (17, 32, 'treinta y dos', None, None), (3, 31, 'treinta y uno', None, None), (5, 3, 'tres', None, None), (20, 1, 'uno', None, None), (6, 20, 'veinte', None, None), (14, 25, 'veinticinco', None, None), (21, 24, 'veinticuatro', None, None), (4, 22, 'veintidos', None, None), (19, 29, 'veintinueve', None, None), (16, 28, 'veintiocho', None, None), (27, 26, 'veintiseis', None, None), (13, 27, 'veintisiete', None, None), (7, 23, 'veintitres', None, None), (8, 21, 'veintiuno', None, None), (0, 100, 'in child table', None, None)]"
postgresql,postgresql,SELECT conname FROM pg_constraint WHERE conrelid = 'clstr_tst'::regclass ORDER BY 1,cluster.sql,SAME,,"[('clstr_tst_con',), ('clstr_tst_pkey',)]"
postgresql,postgresql,"SELECT relname, relkind,     EXISTS(SELECT 1 FROM pg_class WHERE oid = c.reltoastrelid) AS hastoast FROM pg_class c WHERE relname LIKE 'clstr_tst%' ORDER BY relname",cluster.sql,SAME,,"[('clstr_tst', 'r', True), ('clstr_tst_a_seq', 'S', False), ('clstr_tst_b', 'i', False), ('clstr_tst_b_c', 'i', False), ('clstr_tst_c', 'i', False), ('clstr_tst_c_b', 'i', False), ('clstr_tst_inh', 'r', True), ('clstr_tst_pkey', 'i', False), ('clstr_tst_s', 'r', False), ('clstr_tst_s_pkey', 'i', False), ('clstr_tst_s_rf_a_seq', 'S', False)]"
postgresql,postgresql,"SELECT pg_class.relname FROM pg_index, pg_class, pg_class AS pg_class_2 WHERE pg_class.oid=indexrelid 	AND indrelid=pg_class_2.oid 	AND pg_class_2.relname = 'clstr_tst' 	AND indisclustered",cluster.sql,SAME,,"[('clstr_tst_c',)]"
postgresql,postgresql,ALTER TABLE clstr_tst CLUSTER ON clstr_tst_b_c,cluster.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_class.relname FROM pg_index, pg_class, pg_class AS pg_class_2 WHERE pg_class.oid=indexrelid 	AND indrelid=pg_class_2.oid 	AND pg_class_2.relname = 'clstr_tst' 	AND indisclustered",cluster.sql,SAME,,"[('clstr_tst_b_c',)]"
postgresql,postgresql,ALTER TABLE clstr_tst SET WITHOUT CLUSTER,cluster.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_class.relname FROM pg_index, pg_class, pg_class AS pg_class_2 WHERE pg_class.oid=indexrelid 	AND indrelid=pg_class_2.oid 	AND pg_class_2.relname = 'clstr_tst' 	AND indisclustered",cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER clstr_1_pkey ON clstr_1,cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER clstr_2 USING clstr_2_pkey,cluster.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM clstr_1 UNION ALL   SELECT * FROM clstr_2 UNION ALL   SELECT * FROM clstr_3,cluster.sql,SAME,,"[(1,), (2,), (1,), (2,), (2,), (1,)]"
postgresql,postgresql,DELETE FROM clstr_1,cluster.sql,SAME,,[]
postgresql,postgresql,DELETE FROM clstr_2,cluster.sql,SAME,,[]
postgresql,postgresql,DELETE FROM clstr_3,cluster.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = ERROR,cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER,cluster.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,cluster.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM clstr_1 UNION ALL   SELECT * FROM clstr_2 UNION ALL   SELECT * FROM clstr_3,cluster.sql,SAME,,"[(1,), (2,), (1,), (2,), (2,), (1,)]"
postgresql,postgresql,DELETE FROM clstr_1,cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER clstr_1,cluster.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM clstr_1,cluster.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,BEGIN,cluster.sql,SAME,,[]
postgresql,postgresql,UPDATE clustertest SET key = 100 WHERE key = 10,cluster.sql,SAME,,[]
postgresql,postgresql,UPDATE clustertest SET key = 35 WHERE key = 40,cluster.sql,SAME,,[]
postgresql,postgresql,UPDATE clustertest SET key = 60 WHERE key = 50,cluster.sql,SAME,,[]
postgresql,postgresql,UPDATE clustertest SET key = 70 WHERE key = 60,cluster.sql,SAME,,[]
postgresql,postgresql,UPDATE clustertest SET key = 80 WHERE key = 70,cluster.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM clustertest,cluster.sql,SAME,,"[(20,), (30,), (100,), (35,), (80,)]"
postgresql,postgresql,CLUSTER clustertest_pkey ON clustertest,cluster.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM clustertest,cluster.sql,SAME,,"[(20,), (30,), (35,), (80,), (100,)]"
postgresql,postgresql,COMMIT,cluster.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM clustertest,cluster.sql,SAME,,"[(20,), (30,), (35,), (80,), (100,)]"
postgresql,postgresql,"create temp table clstr_temp (col1 int primary key, col2 text)",cluster.sql,SAME,,[]
postgresql,postgresql,cluster clstr_temp using clstr_temp_pkey,cluster.sql,SAME,,[]
postgresql,postgresql,select * from clstr_temp,cluster.sql,SAME,,"[(1, 'one'), (2, 'two')]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER clustertest USING clustertest_pkey,cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER clustertest,cluster.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX clstrpart_only_idx ON ONLY clstrpart (a),cluster.sql,SAME,,[]
postgresql,postgresql,DROP INDEX clstrpart_only_idx,cluster.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX clstrpart_idx ON clstrpart (a),cluster.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE old_cluster_info AS SELECT relname, level, relfilenode, relkind FROM pg_partition_tree('clstrpart'::regclass) AS tree JOIN pg_class c ON c.oid=tree.relid",cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER clstrpart USING clstrpart_idx,cluster.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE new_cluster_info AS SELECT relname, level, relfilenode, relkind FROM pg_partition_tree('clstrpart'::regclass) AS tree JOIN pg_class c ON c.oid=tree.relid",cluster.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, old.level, old.relkind, old.relfilenode = new.relfilenode FROM old_cluster_info AS old JOIN new_cluster_info AS new USING (relname) ORDER BY relname COLLATE ""C""",cluster.sql,SAME,,"[('clstrpart', 0, 'p', True), ('clstrpart1', 1, 'p', True), ('clstrpart11', 2, 'r', False), ('clstrpart12', 2, 'p', True), ('clstrpart2', 1, 'r', False), ('clstrpart3', 1, 'p', True), ('clstrpart33', 2, 'r', False)]"
postgresql,postgresql,CREATE INDEX ptnowner_i_idx ON ptnowner(i),cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER ptnowner USING ptnowner_i_idx,cluster.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,cluster.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE ptnowner_oldnodes AS   SELECT oid, relname, relfilenode FROM pg_partition_tree('ptnowner') AS tree   JOIN pg_class AS c ON c.oid=tree.relid",cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER ptnowner USING ptnowner_i_idx,cluster.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,cluster.sql,SAME,,[]
postgresql,postgresql,"SELECT a.relname, a.relfilenode=b.relfilenode FROM pg_class a   JOIN ptnowner_oldnodes b USING (oid) ORDER BY a.relname COLLATE ""C""",cluster.sql,SAME,,"[('ptnowner', True), ('ptnowner1', False), ('ptnowner2', False)]"
postgresql,postgresql,set enable_indexscan = off,cluster.sql,SAME,,[]
postgresql,postgresql,set maintenance_work_mem = '1MB',cluster.sql,SAME,,[]
postgresql,postgresql,reset enable_indexscan,cluster.sql,SAME,,[]
postgresql,postgresql,reset maintenance_work_mem,cluster.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX clstr_expression_minus_a ON clstr_expression ((-a), b)",cluster.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX clstr_expression_upper_b ON clstr_expression ((upper(b))),cluster.sql,SAME,,[]
postgresql,postgresql,BEGIN,cluster.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_seqscan = false,cluster.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3',cluster.sql,SAME,,"[('Index Scan using clstr_expression_upper_b on clstr_expression',), (""  Index Cond: (upper(b) = 'PREFIX3'::text)"",)]"
postgresql,postgresql,SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3',cluster.sql,SAME,,"[(3, 3, 'prefix3')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b",cluster.sql,SAME,,"[('Index Scan using clstr_expression_minus_a on clstr_expression',), (""  Index Cond: ((- a) = '-3'::integer)"",)]"
postgresql,postgresql,"SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b",cluster.sql,SAME,,"[(129, 3, 'prefix129'), (3, 3, 'prefix3'), (45, 3, 'prefix45'), (87, 3, 'prefix87')]"
postgresql,postgresql,COMMIT,cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER clstr_expression USING clstr_expression_minus_a,cluster.sql,SAME,,[]
postgresql,postgresql,"WITH rows AS   (SELECT ctid, lag(a) OVER (ORDER BY ctid) AS la, a FROM clstr_expression) SELECT * FROM rows WHERE la < a",cluster.sql,SAME,,[]
postgresql,postgresql,BEGIN,cluster.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_seqscan = false,cluster.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3',cluster.sql,SAME,,"[('Index Scan using clstr_expression_upper_b on clstr_expression',), (""  Index Cond: (upper(b) = 'PREFIX3'::text)"",)]"
postgresql,postgresql,SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3',cluster.sql,SAME,,"[(3, 3, 'prefix3')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b",cluster.sql,SAME,,"[('Index Scan using clstr_expression_minus_a on clstr_expression',), (""  Index Cond: ((- a) = '-3'::integer)"",)]"
postgresql,postgresql,"SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b",cluster.sql,SAME,,"[(129, 3, 'prefix129'), (3, 3, 'prefix3'), (45, 3, 'prefix45'), (87, 3, 'prefix87')]"
postgresql,postgresql,COMMIT,cluster.sql,SAME,,[]
postgresql,postgresql,CLUSTER clstr_expression USING clstr_expression_upper_b,cluster.sql,SAME,,[]
postgresql,postgresql,"WITH rows AS   (SELECT ctid, lag(b) OVER (ORDER BY ctid) AS lb, b FROM clstr_expression) SELECT * FROM rows WHERE upper(lb) > upper(b)",cluster.sql,SAME,,[]
postgresql,postgresql,BEGIN,cluster.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_seqscan = false,cluster.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3',cluster.sql,SAME,,"[('Index Scan using clstr_expression_upper_b on clstr_expression',), (""  Index Cond: (upper(b) = 'PREFIX3'::text)"",)]"
postgresql,postgresql,SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3',cluster.sql,SAME,,"[(3, 3, 'prefix3')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b",cluster.sql,SAME,,"[('Index Scan using clstr_expression_minus_a on clstr_expression',), (""  Index Cond: ((- a) = '-3'::integer)"",)]"
postgresql,postgresql,"SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b",cluster.sql,SAME,,"[(129, 3, 'prefix129'), (3, 3, 'prefix3'), (45, 3, 'prefix45'), (87, 3, 'prefix87')]"
postgresql,postgresql,COMMIT,cluster.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA collate_tests,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SET search_path = collate_tests,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b >= 'bbc',collate.icu.utf8.sql,SAME,,"[(3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test2 WHERE b >= 'bbc',collate.icu.utf8.sql,SAME,,"[(3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test3 WHERE b >= 'bbc',collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test3 WHERE b >= 'BBC',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'bbc'",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b >= 'bbc' COLLATE ""C""",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'bbc' COLLATE ""C""",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"CREATE DOMAIN testdomain_sv AS text COLLATE ""sv-x-icu""",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b FROM collate_test4 ORDER BY b",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test5 ORDER BY b",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 ORDER BY b",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 ORDER BY b",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test3 ORDER BY b",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 ORDER BY b COLLATE ""C""",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SELECT * FROM collate_test1 ORDER BY b,collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test2 ORDER BY b,collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test3 ORDER BY b,collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT 'bbc' COLLATE ""en-x-icu"" > 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc' COLLATE ""en-x-icu"" AS ""true""",collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'bbc' COLLATE ""sv-x-icu"" > 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc' COLLATE ""sv-x-icu"" AS ""false""",collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT a, lower(x), lower(y), upper(x), upper(y), initcap(x), initcap(y) FROM collate_test10",collate.icu.utf8.sql,SAME,,"[(1, 'hij', 'hij', 'HIJ', 'HİJ', 'Hij', 'Hij'), (2, 'hij', 'hıj', 'HIJ', 'HIJ', 'Hij', 'Hıj')]"
postgresql,postgresql,"SELECT a, lower(x COLLATE ""C""), lower(y COLLATE ""C"") FROM collate_test10",collate.icu.utf8.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hij')]"
postgresql,postgresql,"SELECT a, x, y FROM collate_test10 ORDER BY lower(y), a",collate.icu.utf8.sql,SAME,,"[(2, 'HIJ', 'HIJ'), (1, 'hij', 'hij')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b LIKE 'abc',collate.icu.utf8.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b LIKE 'abc%',collate.icu.utf8.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b LIKE '%bc%',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ILIKE 'abc',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ILIKE 'abc%',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ILIKE '%bc%',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC')]"
postgresql,postgresql,"SELECT 'TÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¼rkiye' COLLATE ""en-x-icu"" ILIKE '%KI%' AS ""true""",collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'TÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¼rkiye' COLLATE ""tr-x-icu"" ILIKE '%KI%' AS ""false""",collate.icu.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'bÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ±t' ILIKE 'BIT' COLLATE ""en-x-icu"" AS ""false""",collate.icu.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'bÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ±t' ILIKE 'BIT' COLLATE ""tr-x-icu"" AS ""true""",collate.icu.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT relname FROM pg_class WHERE relname ILIKE 'abc%',collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~ '^abc$',collate.icu.utf8.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~ '^abc',collate.icu.utf8.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~ 'bc',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~* '^abc$',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~* '^abc',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~* 'bc',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC')]"
postgresql,postgresql,"SELECT b,        b ~ '^[[:alpha:]]+$' AS is_alpha,        b ~ '^[[:upper:]]+$' AS is_upper,        b ~ '^[[:lower:]]+$' AS is_lower,        b ~ '^[[:digit:]]+$' AS is_digit,        b ~ '^[[:alnum:]]+$' AS is_alnum,        b ~ '^[[:graph:]]+$' AS is_graph,        b ~ '^[[:print:]]+$' AS is_print,        b ~ '^[[:punct:]]+$' AS is_punct,        b ~ '^[[:space:]]+$' AS is_space FROM collate_test6",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT 'TÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¼rkiye' COLLATE ""en-x-icu"" ~* 'KI' AS ""true""",collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'TÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¼rkiye' COLLATE ""tr-x-icu"" ~* 'KI' AS ""true""",collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'bÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ±t' ~* 'BIT' COLLATE ""en-x-icu"" AS ""false""",collate.icu.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'bÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ±t' ~* 'BIT' COLLATE ""tr-x-icu"" AS ""false""",collate.icu.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT relname FROM pg_class WHERE relname ~* '^abc',collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(date '2010-04-01', 'DD TMMON YYYY')",collate.icu.utf8.sql,SAME,,"[('01 APR 2010',)]"
postgresql,postgresql,"SELECT to_char(date '2010-04-01', 'DD TMMON YYYY' COLLATE ""tr-x-icu"")",collate.icu.utf8.sql,SAME,,"[('01 APR 2010',)]"
postgresql,postgresql,"CREATE VIEW collview2 AS SELECT a, b FROM collate_test1 ORDER BY b COLLATE ""C""",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW collview3 AS SELECT a, lower((x || x) COLLATE ""C"") FROM collate_test10",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, view_definition FROM information_schema.views   WHERE table_name LIKE 'collview%' ORDER BY 1",collate.icu.utf8.sql,SAME,,"[('collview2', ' SELECT a,\n    b\n   FROM collate_test1\n  ORDER BY (b COLLATE ""C"");'), ('collview3', ' SELECT a,\n    lower(((x || x) COLLATE ""C"")) AS lower\n   FROM collate_test10;')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test1 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test2 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test3 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, lower(coalesce(x, 'foo')), lower(coalesce(y, 'foo')) FROM collate_test10",collate.icu.utf8.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hıj')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test1 ORDER BY 3",collate.icu.utf8.sql,SAME,,"[(1, 'abc', 'CCC'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'CCC'), (3, 'bbc', 'CCC'), (4, 'ABC', 'CCC')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test2 ORDER BY 3",collate.icu.utf8.sql,SAME,,"[(1, 'abc', 'CCC'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'CCC'), (3, 'bbc', 'CCC'), (4, 'ABC', 'CCC')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test3 ORDER BY 3",collate.icu.utf8.sql,SAME,,"[(4, 'ABC', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, x, y, lower(greatest(x, 'foo')), lower(greatest(y, 'foo')) FROM collate_test10",collate.icu.utf8.sql,SAME,,"[(1, 'hij', 'hij', 'hij', 'hij'), (2, 'HIJ', 'HIJ', 'hij', 'hıj')]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test1 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (3, 'bbc'), (1, None)]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test2 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (3, 'bbc'), (1, None)]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test3 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, None)]"
postgresql,postgresql,"SELECT a, lower(nullif(x, 'foo')), lower(nullif(y, 'foo')) FROM collate_test10",collate.icu.utf8.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hıj')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test1 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abcd'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test2 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abcd'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test3 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abcd'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,CREATE DOMAIN testdomain AS text,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test1 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test2 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test3 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b::testdomain_sv FROM collate_test3 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, lower(x::testdomain), lower(y::testdomain) FROM collate_test10",collate.icu.utf8.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hıj')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test1",collate.icu.utf8.sql,SAME,,"[('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'bbc')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test2",collate.icu.utf8.sql,SAME,,"[('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'bbc')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test3",collate.icu.utf8.sql,SAME,,"[('ABC', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test1,collate.icu.utf8.sql,SAME,,"[(['Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'abc', 'ABC', 'bbc'],)]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test2,collate.icu.utf8.sql,SAME,,"[(['Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'abc', 'ABC', 'bbc'],)]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test3,collate.icu.utf8.sql,SAME,,"[(['ABC', 'abc', 'bbc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'],)]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test1 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (1, 'abc'), (4, 'ABC'), (4, 'ABC'), (3, 'bbc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 UNION SELECT a, b FROM collate_test2 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test3 WHERE a < 4 INTERSECT SELECT a, b FROM collate_test3 WHERE a > 1 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test3 EXCEPT SELECT a, b FROM collate_test3 WHERE a < 2 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3",collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC'), (1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC')]"
postgresql,postgresql,"SELECT a, b COLLATE ""C"" FROM collate_test1 UNION SELECT a, b FROM collate_test3 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,select x || y from collate_test10,collate.icu.utf8.sql,SAME,,"[('hijhij',), ('HIJHIJ',)]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test1 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test2 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test3 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"CREATE FUNCTION mylt (text, text) RETURNS boolean LANGUAGE sql     AS $$ select $1 < $2 $$",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION mylt_noninline (text, text) RETURNS boolean LANGUAGE sql     AS $$ select $1 < $2 limit 1 $$",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test1)) ORDER BY 1,collate.icu.utf8.sql,SAME,,"[('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc',), ('abc',), ('ABC',), ('bbc',)]"
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test2)) ORDER BY 1,collate.icu.utf8.sql,SAME,,"[('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc',), ('abc',), ('ABC',), ('bbc',)]"
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test3)) ORDER BY 1,collate.icu.utf8.sql,SAME,,"[('ABC',), ('abc',), ('bbc',), ('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc',)]"
postgresql,postgresql,CREATE FUNCTION dup (anyelement) RETURNS anyelement     AS 'select $1' LANGUAGE sql,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test1 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test2 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test3 ORDER BY 2",collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,CREATE INDEX collate_test1_idx1 ON collate_test1 (b),collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx2 ON collate_test1 (b COLLATE ""C"")",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx3 ON collate_test1 ((b COLLATE ""C""))",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx4 ON collate_test1 (((b||'foo') COLLATE ""POSIX""))",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, pg_get_indexdef(oid) FROM pg_class WHERE relname LIKE 'collate_test%_idx%' ORDER BY 1",collate.icu.utf8.sql,SAME,,"[('collate_test1_idx1', 'CREATE INDEX collate_test1_idx1 ON collate_tests.collate_test1 USING btree (b)'), ('collate_test1_idx2', 'CREATE INDEX collate_test1_idx2 ON collate_tests.collate_test1 USING btree (b COLLATE ""C"")'), ('collate_test1_idx3', 'CREATE INDEX collate_test1_idx3 ON collate_tests.collate_test1 USING btree (b COLLATE ""C"")'), ('collate_test1_idx4', 'CREATE INDEX collate_test1_idx4 ON collate_tests.collate_test1 USING btree (((b || \'foo\'::text)) COLLATE ""POSIX"")')]"
postgresql,postgresql,set enable_seqscan = off,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from collate_test1 where b ilike 'abc',collate.icu.utf8.sql,SAME,,"[('Seq Scan on collate_test1',), (""  Filter: (b ~~* 'abc'::text)"",)]"
postgresql,postgresql,select * from collate_test1 where b ilike 'abc',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,explain (costs off) select * from collate_test1 where b ilike 'ABC',collate.icu.utf8.sql,SAME,,"[('Seq Scan on collate_test1',), (""  Filter: (b ~~* 'ABC'::text)"",)]"
postgresql,postgresql,select * from collate_test1 where b ilike 'ABC',collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,reset enable_seqscan,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA test_schema,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages TO WARNING,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SET icu_validation_level = disabled,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION test0 FROM ""C""",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,RESET icu_validation_level,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SET icu_validation_level = ERROR,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,RESET icu_validation_level,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION testx (provider = icu, locale = 'nonsense-nowhere')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,DROP COLLATION testx,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE COLLATION test5 FROM test0,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT collname FROM pg_collation WHERE collname LIKE 'test%' ORDER BY 1,collate.icu.utf8.sql,SAME,,"[('test0',), ('test5',)]"
postgresql,postgresql,ALTER COLLATION test0 RENAME TO test11,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,ALTER COLLATION test11 SET SCHEMA test_schema,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT collname, nspname, obj_description(pg_collation.oid, 'pg_collation')     FROM pg_collation JOIN pg_namespace ON (collnamespace = pg_namespace.oid)     WHERE collname LIKE 'test%'     ORDER BY 1",collate.icu.utf8.sql,SAME,,"[('test11', 'test_schema', None), ('test5', 'collate_tests', None)]"
postgresql,postgresql,DROP COLLATION IF EXISTS test0,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT collname FROM pg_collation WHERE collname LIKE 'test%',collate.icu.utf8.sql,SAME,,"[('test11',), ('test5',)]"
postgresql,postgresql,"CREATE COLLATION test0 FROM ""C""",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN collate_dep_dom1 AS text COLLATE test0,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE collate_dep_test2 AS (x int, y text COLLATE test0)",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW collate_dep_test3 AS SELECT text 'foo' COLLATE test0 AS foo,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX collate_dep_test4i ON collate_dep_test4t (b COLLATE test0),collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,DROP COLLATION test0 CASCADE,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,DROP TYPE collate_dep_test2,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"create type textrange_c as range(subtype=text, collation=""C"")",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"create type textrange_en_us as range(subtype=text, collation=""en-x-icu"")",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"select textrange_c('A','Z') @> 'b'::text",collate.icu.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select textrange_en_us('A','Z') @> 'b'::text",collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,drop type textrange_c,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,drop type textrange_en_us,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM collate_test2 ORDER BY b COLLATE UCS_BASIC,collate.icu.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SELECT * FROM collate_test2 ORDER BY b COLLATE UNICODE,collate.icu.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, 'abc'), (4, 'ABC'), (3, 'bbc')]"
postgresql,postgresql,SET client_min_messages=WARNING,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages=WARNING,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION testcoll_backwards (provider = icu, locale = '@colBackwards=yes')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT 'cotÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ©' < 'cÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ´te' COLLATE ""und-x-icu"", 'cotÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ©' > 'cÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ´te' COLLATE testcoll_backwards",collate.icu.utf8.sql,SAME,,"[(False, True)]"
postgresql,postgresql,"CREATE COLLATION testcoll_lower_first (provider = icu, locale = '@colCaseFirst=lower')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION testcoll_upper_first (provider = icu, locale = '@colCaseFirst=upper')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT 'aaa' < 'AAA' COLLATE testcoll_lower_first, 'aaa' > 'AAA' COLLATE testcoll_upper_first",collate.icu.utf8.sql,SAME,,"[(True, True)]"
postgresql,postgresql,"CREATE COLLATION testcoll_shifted (provider = icu, locale = '@colAlternate=shifted')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT 'de-luge' < 'deanza' COLLATE ""und-x-icu"", 'de-luge' > 'deanza' COLLATE testcoll_shifted",collate.icu.utf8.sql,SAME,,"[(True, True)]"
postgresql,postgresql,SET client_min_messages=WARNING,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION testcoll_numeric (provider = icu, locale = '@colNumeric=yes')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT 'A-21' > 'A-123' COLLATE ""und-x-icu"", 'A-21' < 'A-123' COLLATE testcoll_numeric",collate.icu.utf8.sql,SAME,,"[(True, True)]"
postgresql,postgresql,"CREATE COLLATION testcoll_de_phonebook (provider = icu, locale = 'de@collation=phonebook')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT 'Goldmann' < 'GÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¶tz' COLLATE ""de-x-icu"", 'Goldmann' > 'GÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¶tz' COLLATE testcoll_de_phonebook",collate.icu.utf8.sql,SAME,,"[(False, True)]"
postgresql,postgresql,"CREATE COLLATION testcoll_rules1 (provider = icu, locale = '', rules = '&a < g')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM test7 ORDER BY a COLLATE ""en-x-icu""",collate.icu.utf8.sql,SAME,,"[('Abernathy',), ('apple',), ('bird',), ('Boston',), ('Graham',), ('green',)]"
postgresql,postgresql,SELECT * FROM test7 ORDER BY a COLLATE testcoll_rules1,collate.icu.utf8.sql,SAME,,"[('Abernathy',), ('apple',), ('green',), ('bird',), ('Boston',), ('Graham',)]"
postgresql,postgresql,"CREATE COLLATION ctest_det (provider = icu, locale = '', deterministic = true)",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION ctest_nondet (provider = icu, locale = '', deterministic = false)",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test6,collate.icu.utf8.sql,SAME,,"[(1, 'äbc'), (2, 'äbc')]"
postgresql,postgresql,SELECT * FROM test6 WHERE b = 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc' COLLATE ctest_det,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test6 WHERE b = 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc' COLLATE ctest_nondet,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test6a,collate.icu.utf8.sql,SAME,,"[(1, ['äbc']), (2, ['äbc'])]"
postgresql,postgresql,SELECT * FROM test6a WHERE b = ARRAY['ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc'] COLLATE ctest_det,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test6a WHERE b = ARRAY['ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc'] COLLATE ctest_nondet,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION case_sensitive (provider = icu, locale = '')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION case_insensitive (provider = icu, locale = '@colStrength=secondary', deterministic = false)",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT 'abc' <= 'ABC' COLLATE case_sensitive, 'abc' >= 'ABC' COLLATE case_sensitive",collate.icu.utf8.sql,SAME,,"[(True, False)]"
postgresql,postgresql,"SELECT 'abc' <= 'ABC' COLLATE case_insensitive, 'abc' >= 'ABC' COLLATE case_insensitive",collate.icu.utf8.sql,SAME,,"[(True, True)]"
postgresql,postgresql,"CREATE COLLATION lt_insensitive (provider = icu, locale = 'en-u-ks-level1', deterministic = false)",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT 'aBcD' COLLATE lt_insensitive = 'AbCd' COLLATE lt_insensitive,collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"CREATE COLLATION lt_upperfirst (provider = icu, locale = 'und-u-kf-upper')",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT 'Z' COLLATE lt_upperfirst < 'z' COLLATE lt_upperfirst,collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT x FROM test3cs WHERE x = 'abc',collate.icu.utf8.sql,SAME,,"[('abc',)]"
postgresql,postgresql,SELECT x FROM test3cs WHERE x <> 'abc',collate.icu.utf8.sql,SAME,,"[('ABC',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test3cs WHERE x LIKE 'a%',collate.icu.utf8.sql,SAME,,"[('abc',)]"
postgresql,postgresql,SELECT x FROM test3cs WHERE x ILIKE 'a%',collate.icu.utf8.sql,SAME,,"[('abc',), ('ABC',)]"
postgresql,postgresql,SELECT x FROM test3cs WHERE x SIMILAR TO 'a%',collate.icu.utf8.sql,SAME,,"[('abc',)]"
postgresql,postgresql,SELECT x FROM test3cs WHERE x ~ 'a',collate.icu.utf8.sql,SAME,,"[('abc',)]"
postgresql,postgresql,SET enable_hashagg TO off,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT x FROM test1cs UNION SELECT x FROM test2cs ORDER BY x,collate.icu.utf8.sql,SAME,,"[('abc',), ('ABC',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test2cs UNION SELECT x FROM test1cs ORDER BY x,collate.icu.utf8.sql,SAME,,"[('abc',), ('ABC',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test1cs INTERSECT SELECT x FROM test2cs,collate.icu.utf8.sql,SAME,,"[('ghi',)]"
postgresql,postgresql,SELECT x FROM test2cs INTERSECT SELECT x FROM test1cs,collate.icu.utf8.sql,SAME,,"[('ghi',)]"
postgresql,postgresql,SELECT x FROM test1cs EXCEPT SELECT x FROM test2cs,collate.icu.utf8.sql,SAME,,"[('abc',), ('def',)]"
postgresql,postgresql,SELECT x FROM test2cs EXCEPT SELECT x FROM test1cs,collate.icu.utf8.sql,SAME,,"[('ABC',)]"
postgresql,postgresql,SELECT DISTINCT x FROM test3cs ORDER BY x,collate.icu.utf8.sql,SAME,,"[('abc',), ('ABC',), ('def',), ('ghi',)]"
postgresql,postgresql,RESET enable_hashagg,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT count(DISTINCT x) FROM test3cs,collate.icu.utf8.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT x, count(*) FROM test3cs GROUP BY x ORDER BY x",collate.icu.utf8.sql,SAME,,"[('abc', 1), ('ABC', 1), ('def', 1), ('ghi', 1)]"
postgresql,postgresql,"SELECT x, row_number() OVER (ORDER BY x), rank() OVER (ORDER BY x) FROM test3cs ORDER BY x",collate.icu.utf8.sql,SAME,,"[('abc', 1, 1), ('ABC', 2, 2), ('def', 3, 3), ('ghi', 4, 4)]"
postgresql,postgresql,CREATE UNIQUE INDEX ON test1cs (x),collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ON test3cs (x),collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT string_to_array('ABC,DEF,GHI' COLLATE case_sensitive, ',', 'abc')",collate.icu.utf8.sql,SAME,,"[(['ABC', 'DEF', 'GHI'],)]"
postgresql,postgresql,"SELECT string_to_array('ABCDEFGHI' COLLATE case_sensitive, NULL, 'b')",collate.icu.utf8.sql,SAME,,"[(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],)]"
postgresql,postgresql,SELECT x FROM test3ci WHERE x = 'abc',collate.icu.utf8.sql,SAME,,"[('abc',), ('ABC',)]"
postgresql,postgresql,SELECT x FROM test3ci WHERE x <> 'abc',collate.icu.utf8.sql,SAME,,"[('def',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test1ci UNION SELECT x FROM test2ci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('abc',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test2ci UNION SELECT x FROM test1ci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('ABC',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test1ci INTERSECT SELECT x FROM test2ci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('abc',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test2ci INTERSECT SELECT x FROM test1ci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('ABC',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test1ci EXCEPT SELECT x FROM test2ci,collate.icu.utf8.sql,SAME,,"[('def',)]"
postgresql,postgresql,SELECT x FROM test2ci EXCEPT SELECT x FROM test1ci,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT DISTINCT x FROM test3ci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('abc',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT count(DISTINCT x) FROM test3ci,collate.icu.utf8.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT x, count(*) FROM test3ci GROUP BY x ORDER BY x",collate.icu.utf8.sql,SAME,,"[('abc', 2), ('def', 1), ('ghi', 1)]"
postgresql,postgresql,"SELECT x, row_number() OVER (ORDER BY x), rank() OVER (ORDER BY x) FROM test3ci ORDER BY x",collate.icu.utf8.sql,SAME,,"[('abc', 1, 1), ('ABC', 2, 1), ('def', 3, 3), ('ghi', 4, 4)]"
postgresql,postgresql,CREATE UNIQUE INDEX ON test1ci (x),collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT string_to_array('ABCDEFGHI' COLLATE case_insensitive, NULL, 'b')",collate.icu.utf8.sql,SAME,,"[(['A', None, 'C', 'D', 'E', 'F', 'G', 'H', 'I'],)]"
postgresql,postgresql,SELECT x FROM test3bpci WHERE x = 'abc',collate.icu.utf8.sql,SAME,,"[('abc',), ('ABC',)]"
postgresql,postgresql,SELECT x FROM test3bpci WHERE x <> 'abc',collate.icu.utf8.sql,SAME,,"[('def',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test1bpci UNION SELECT x FROM test2bpci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('abc',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test2bpci UNION SELECT x FROM test1bpci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('ABC',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test1bpci INTERSECT SELECT x FROM test2bpci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('abc',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test2bpci INTERSECT SELECT x FROM test1bpci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('ABC',), ('ghi',)]"
postgresql,postgresql,SELECT x FROM test1bpci EXCEPT SELECT x FROM test2bpci,collate.icu.utf8.sql,SAME,,"[('def',)]"
postgresql,postgresql,SELECT x FROM test2bpci EXCEPT SELECT x FROM test1bpci,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT DISTINCT x FROM test3bpci ORDER BY x,collate.icu.utf8.sql,SAME,,"[('abc',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT count(DISTINCT x) FROM test3bpci,collate.icu.utf8.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT x, count(*) FROM test3bpci GROUP BY x ORDER BY x",collate.icu.utf8.sql,SAME,,"[('abc', 2), ('def', 1), ('ghi', 1)]"
postgresql,postgresql,"SELECT x, row_number() OVER (ORDER BY x), rank() OVER (ORDER BY x) FROM test3bpci ORDER BY x",collate.icu.utf8.sql,SAME,,"[('abc', 1, 1), ('ABC', 2, 1), ('def', 3, 3), ('ghi', 4, 4)]"
postgresql,postgresql,CREATE UNIQUE INDEX ON test1bpci (x),collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT string_to_array('ABCDEFGHI'::char(9) COLLATE case_insensitive, NULL, 'b')",collate.icu.utf8.sql,SAME,,"[(['A', None, 'C', 'D', 'E', 'F', 'G', 'H', 'I'],)]"
postgresql,postgresql,CREATE INDEX ON test4c (x),collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT x FROM test4c WHERE x LIKE 'ABC' COLLATE case_sensitive,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT x FROM test4c WHERE x LIKE 'ABC%' COLLATE case_sensitive,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¡ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ½ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ´ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂµÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ' = 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¡ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ½ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¥ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ£ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ£ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ£' COLLATE case_sensitive,collate.icu.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¡ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ½ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ´ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂµÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ' = 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¡ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ½ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¥ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ£ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ£ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ£' COLLATE case_insensitive,collate.icu.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT relname FROM pg_class WHERE relname = 'PG_CLASS'::text COLLATE case_insensitive,collate.icu.utf8.sql,SAME,,"[('pg_class',)]"
postgresql,postgresql,SELECT relname FROM pg_class WHERE 'PG_CLASS'::text = relname COLLATE case_insensitive,collate.icu.utf8.sql,SAME,,"[('pg_class',)]"
postgresql,postgresql,SELECT typname FROM pg_type WHERE typname LIKE 'int_' AND typname <> 'INT2'::text   COLLATE case_insensitive ORDER BY typname,collate.icu.utf8.sql,SAME,,"[('int4',), ('int8',)]"
postgresql,postgresql,SELECT typname FROM pg_type WHERE typname LIKE 'int_' AND 'INT2'::text <> typname   COLLATE case_insensitive ORDER BY typname,collate.icu.utf8.sql,SAME,,"[('int4',), ('int8',)]"
postgresql,postgresql,"CREATE TEMP TABLE outer_text (f1 text COLLATE case_insensitive, f2 text)",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE inner_text (c1 text COLLATE case_insensitive, c2 text)",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM outer_text WHERE (f1, f2) NOT IN (SELECT * FROM inner_text)",collate.icu.utf8.sql,SAME,,"[('b', 'a'), ('B', None)]"
postgresql,postgresql,SET client_min_messages=WARNING,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test4 WHERE b = 'cote',collate.icu.utf8.sql,SAME,,"[(1, 'cote')]"
postgresql,postgresql,SELECT * FROM test4 WHERE b = 'Cote' COLLATE case_insensitive,collate.icu.utf8.sql,SAME,,"[(1, 'cote')]"
postgresql,postgresql,SELECT * FROM test10pk,collate.icu.utf8.sql,SAME,,"[('abc',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT * FROM test10fk,collate.icu.utf8.sql,SAME,,"[('abc',)]"
postgresql,postgresql,SELECT * FROM test10fk,collate.icu.utf8.sql,SAME,,"[('abc',)]"
postgresql,postgresql,DELETE FROM test10pk WHERE x = 'abc',collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test10pk,collate.icu.utf8.sql,SAME,,"[('def',), ('ghi',)]"
postgresql,postgresql,SELECT * FROM test10fk,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test11pk,collate.icu.utf8.sql,SAME,,"[('abc',), ('def',), ('ghi',)]"
postgresql,postgresql,SELECT * FROM test11fk,collate.icu.utf8.sql,SAME,,"[('abc',), ('ABC',)]"
postgresql,postgresql,UPDATE test11pk SET x = 'ABC' WHERE x = 'abc',collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test11fk,collate.icu.utf8.sql,SAME,,"[('ABC',), ('ABC',)]"
postgresql,postgresql,DELETE FROM test11pk WHERE x = 'abc',collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test11pk,collate.icu.utf8.sql,SAME,,"[('def',), ('ghi',)]"
postgresql,postgresql,SELECT * FROM test11fk,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test20_1,collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'ABC')]"
postgresql,postgresql,SELECT * FROM test21_1,collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'ABC')]"
postgresql,postgresql,SELECT (SELECT count(*) FROM test22_0) = (SELECT count(*) FROM test22_1),collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT (SELECT count(*) FROM test22a_0) = (SELECT count(*) FROM test22a_1),collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT (SELECT count(*) FROM test23_0) <> (SELECT count(*) FROM test23_1),collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT (SELECT count(*) FROM test23a_0) <> (SELECT count(*) FROM test23a_1),collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT * FROM test30_1,collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'ABC')]"
postgresql,postgresql,SELECT * FROM test31_1,collate.icu.utf8.sql,SAME,,"[(1, 'abc'), (2, 'ABC')]"
postgresql,postgresql,SELECT (SELECT count(*) FROM test32_0) = (SELECT count(*) FROM test32_1),collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT (SELECT count(*) FROM test33_0) <> (SELECT count(*) FROM test33_1),collate.icu.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,RESET search_path,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages TO warning,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA collate_tests CASCADE,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION coll_icu_upgrade FROM ""und-x-icu""",collate.icu.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA collate_tests,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,SET search_path = collate_tests,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b >= 'bbc',collate.linux.utf8.sql,SAME,,"[(3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test2 WHERE b >= 'bbc',collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test3 WHERE b >= 'bbc',collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test3 WHERE b >= 'BBC',collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'bbc'",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b >= 'bbc' COLLATE ""C""",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'bbc' COLLATE ""C""",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"CREATE DOMAIN testdomain_sv AS text COLLATE ""sv_SE""",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b FROM collate_test4 ORDER BY b",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test5 ORDER BY b",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 ORDER BY b",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 ORDER BY b",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test3 ORDER BY b",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 ORDER BY b COLLATE ""C""",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SELECT * FROM collate_test1 ORDER BY b,collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test2 ORDER BY b,collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SELECT * FROM collate_test3 ORDER BY b,collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT 'bbc' COLLATE ""en_US"" > 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc' COLLATE ""en_US"" AS ""true""",collate.linux.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'bbc' COLLATE ""sv_SE"" > 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc' COLLATE ""sv_SE"" AS ""false""",collate.linux.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT a, lower(x), lower(y), upper(x), upper(y), initcap(x), initcap(y) FROM collate_test10",collate.linux.utf8.sql,SAME,,"[(1, 'hij', 'hij', 'HIJ', 'HIJ', 'Hij', 'Hij'), (2, 'hij', 'hij', 'HIJ', 'HIJ', 'Hij', 'Hij')]"
postgresql,postgresql,"SELECT a, lower(x COLLATE ""C""), lower(y COLLATE ""C"") FROM collate_test10",collate.linux.utf8.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hij')]"
postgresql,postgresql,"SELECT a, x, y FROM collate_test10 ORDER BY lower(y), a",collate.linux.utf8.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'HIJ', 'HIJ')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b LIKE 'abc',collate.linux.utf8.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b LIKE 'abc%',collate.linux.utf8.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b LIKE '%bc%',collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ILIKE 'abc',collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ILIKE 'abc%',collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ILIKE '%bc%',collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC')]"
postgresql,postgresql,"SELECT 'TÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¼rkiye' COLLATE ""en_US"" ILIKE '%KI%' AS ""true""",collate.linux.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'TÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¼rkiye' COLLATE ""tr_TR"" ILIKE '%KI%' AS ""false""",collate.linux.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'bÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ±t' ILIKE 'BIT' COLLATE ""en_US"" AS ""false""",collate.linux.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'bÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ±t' ILIKE 'BIT' COLLATE ""tr_TR"" AS ""true""",collate.linux.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT relname FROM pg_class WHERE relname ILIKE 'abc%',collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~ '^abc$',collate.linux.utf8.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~ '^abc',collate.linux.utf8.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~ 'bc',collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~* '^abc$',collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~* '^abc',collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~* 'bc',collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC')]"
postgresql,postgresql,"SELECT b,        b ~ '^[[:alpha:]]+$' AS is_alpha,        b ~ '^[[:upper:]]+$' AS is_upper,        b ~ '^[[:lower:]]+$' AS is_lower,        b ~ '^[[:digit:]]+$' AS is_digit,        b ~ '^[[:alnum:]]+$' AS is_alnum,        b ~ '^[[:graph:]]+$' AS is_graph,        b ~ '^[[:print:]]+$' AS is_print,        b ~ '^[[:punct:]]+$' AS is_punct,        b ~ '^[[:space:]]+$' AS is_space FROM collate_test6",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT 'TÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¼rkiye' COLLATE ""en_US"" ~* 'KI' AS ""true""",collate.linux.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'TÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¼rkiye' COLLATE ""tr_TR"" ~* 'KI' AS ""false""",collate.linux.utf8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'bÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ±t' ~* 'BIT' COLLATE ""en_US"" AS ""false""",collate.linux.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'bÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ±t' ~* 'BIT' COLLATE ""tr_TR"" AS ""true""",collate.linux.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT relname FROM pg_class WHERE relname ~* '^abc',collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,SET lc_time TO 'tr_TR',collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(date '2010-02-01', 'DD TMMON YYYY')",collate.linux.utf8.sql,SAME,,"[('01 ŞUB 2010',)]"
postgresql,postgresql,"SELECT to_char(date '2010-02-01', 'DD TMMON YYYY' COLLATE ""tr_TR"")",collate.linux.utf8.sql,SAME,,"[('01 ŞUB 2010',)]"
postgresql,postgresql,"SELECT to_char(date '2010-04-01', 'DD TMMON YYYY')",collate.linux.utf8.sql,SAME,,"[('01 NIS 2010',)]"
postgresql,postgresql,"SELECT to_char(date '2010-04-01', 'DD TMMON YYYY' COLLATE ""tr_TR"")",collate.linux.utf8.sql,SAME,,"[('01 NIS 2010',)]"
postgresql,postgresql,"CREATE VIEW collview1 AS SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'bbc'",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW collview2 AS SELECT a, b FROM collate_test1 ORDER BY b COLLATE ""C""",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW collview3 AS SELECT a, lower((x || x) COLLATE ""C"") FROM collate_test10",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, view_definition FROM information_schema.views   WHERE table_name LIKE 'collview%' ORDER BY 1",collate.linux.utf8.sql,SAME,,"[('collview1', ' SELECT a,\n    b\n   FROM collate_test1\n  WHERE ((b COLLATE ""C"") >= \'bbc\'::text);'), ('collview2', ' SELECT a,\n    b\n   FROM collate_test1\n  ORDER BY (b COLLATE ""C"");'), ('collview3', ' SELECT a,\n    lower(((x || x) COLLATE ""C"")) AS lower\n   FROM collate_test10;')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test1 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test2 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test3 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, lower(coalesce(x, 'foo')), lower(coalesce(y, 'foo')) FROM collate_test10",collate.linux.utf8.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hij')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test1 ORDER BY 3",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'CCC'), (4, 'ABC', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test2 ORDER BY 3",collate.linux.utf8.sql,SAME,,"[(4, 'ABC', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test3 ORDER BY 3",collate.linux.utf8.sql,SAME,,"[(4, 'ABC', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, x, y, lower(greatest(x, 'foo')), lower(greatest(y, 'foo')) FROM collate_test10",collate.linux.utf8.sql,SAME,,"[(1, 'hij', 'hij', 'hij', 'hij'), (2, 'HIJ', 'HIJ', 'foo', 'foo')]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test1 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (3, 'bbc'), (1, None)]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test2 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, None)]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test3 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, None)]"
postgresql,postgresql,"SELECT a, lower(nullif(x, 'foo')), lower(nullif(y, 'foo')) FROM collate_test10",collate.linux.utf8.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hij')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test1 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abcd'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test2 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abcd'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test3 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abcd'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,CREATE DOMAIN testdomain AS text,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test1 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test2 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test3 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b::testdomain_sv FROM collate_test3 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, lower(x::testdomain), lower(y::testdomain) FROM collate_test10",collate.linux.utf8.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hij')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test1",collate.linux.utf8.sql,SAME,,"[('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'bbc')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test2",collate.linux.utf8.sql,SAME,,"[('ABC', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test3",collate.linux.utf8.sql,SAME,,"[('ABC', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test1,collate.linux.utf8.sql,SAME,,"[(['Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'ABC', 'abc', 'bbc'],)]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test2,collate.linux.utf8.sql,SAME,,"[(['ABC', 'abc', 'bbc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'],)]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test3,collate.linux.utf8.sql,SAME,,"[(['ABC', 'abc', 'bbc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'],)]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test1 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (4, 'ABC'), (1, 'abc'), (1, 'abc'), (3, 'bbc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 UNION SELECT a, b FROM collate_test2 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test3 WHERE a < 4 INTERSECT SELECT a, b FROM collate_test3 WHERE a > 1 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test3 EXCEPT SELECT a, b FROM collate_test3 WHERE a < 2 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3",collate.linux.utf8.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC'), (1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC')]"
postgresql,postgresql,"SELECT a, b COLLATE ""C"" FROM collate_test1 UNION SELECT a, b FROM collate_test3 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,select x || y from collate_test10,collate.linux.utf8.sql,SAME,,"[('hijhij',), ('HIJHIJ',)]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test1 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test2 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test3 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"CREATE FUNCTION mylt (text, text) RETURNS boolean LANGUAGE sql     AS $$ select $1 < $2 $$",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION mylt_noninline (text, text) RETURNS boolean LANGUAGE sql     AS $$ select $1 < $2 limit 1 $$",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test1)) ORDER BY 1,collate.linux.utf8.sql,SAME,,"[('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc',), ('ABC',), ('abc',), ('bbc',)]"
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test2)) ORDER BY 1,collate.linux.utf8.sql,SAME,,"[('ABC',), ('abc',), ('bbc',), ('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc',)]"
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test3)) ORDER BY 1,collate.linux.utf8.sql,SAME,,"[('ABC',), ('abc',), ('bbc',), ('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc',)]"
postgresql,postgresql,CREATE FUNCTION dup (anyelement) RETURNS anyelement     AS 'select $1' LANGUAGE sql,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test1 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test2 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test3 ORDER BY 2",collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,CREATE INDEX collate_test1_idx1 ON collate_test1 (b),collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx2 ON collate_test1 (b COLLATE ""C"")",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx3 ON collate_test1 ((b COLLATE ""C""))",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx4 ON collate_test1 (((b||'foo') COLLATE ""POSIX""))",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, pg_get_indexdef(oid) FROM pg_class WHERE relname LIKE 'collate_test%_idx%' ORDER BY 1",collate.linux.utf8.sql,SAME,,"[('collate_test1_idx1', 'CREATE INDEX collate_test1_idx1 ON collate_tests.collate_test1 USING btree (b)'), ('collate_test1_idx2', 'CREATE INDEX collate_test1_idx2 ON collate_tests.collate_test1 USING btree (b COLLATE ""C"")'), ('collate_test1_idx3', 'CREATE INDEX collate_test1_idx3 ON collate_tests.collate_test1 USING btree (b COLLATE ""C"")'), ('collate_test1_idx4', 'CREATE INDEX collate_test1_idx4 ON collate_tests.collate_test1 USING btree (((b || \'foo\'::text)) COLLATE ""POSIX"")')]"
postgresql,postgresql,CREATE SCHEMA test_schema,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION test0 FROM ""C""",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION IF NOT EXISTS test0 FROM ""C""",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE COLLATION IF NOT EXISTS test0 (locale = 'foo'),collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE COLLATION test5 FROM test0,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT collname FROM pg_collation WHERE collname LIKE 'test%' ORDER BY 1,collate.linux.utf8.sql,SAME,,"[('test0',), ('test5',)]"
postgresql,postgresql,ALTER COLLATION test0 RENAME TO test11,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,ALTER COLLATION test11 SET SCHEMA test_schema,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"SELECT collname, nspname, obj_description(pg_collation.oid, 'pg_collation')     FROM pg_collation JOIN pg_namespace ON (collnamespace = pg_namespace.oid)     WHERE collname LIKE 'test%'     ORDER BY 1",collate.linux.utf8.sql,SAME,,"[('test11', 'test_schema', None), ('test5', 'collate_tests', None)]"
postgresql,postgresql,DROP COLLATION IF EXISTS test0,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT collname FROM pg_collation WHERE collname LIKE 'test%',collate.linux.utf8.sql,SAME,,"[('test11',), ('test5',)]"
postgresql,postgresql,"CREATE COLLATION test0 FROM ""C""",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN collate_dep_dom1 AS text COLLATE test0,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE collate_dep_test2 AS (x int, y text COLLATE test0)",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW collate_dep_test3 AS SELECT text 'foo' COLLATE test0 AS foo,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX collate_dep_test4i ON collate_dep_test4t (b COLLATE test0),collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,DROP COLLATION test0 CASCADE,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,DROP TYPE collate_dep_test2,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"create type textrange_c as range(subtype=text, collation=""C"")",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"create type textrange_en_us as range(subtype=text, collation=""en_US"")",collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"select textrange_c('A','Z') @> 'b'::text",collate.linux.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select textrange_en_us('A','Z') @> 'b'::text",collate.linux.utf8.sql,SAME,,"[(False,)]"
postgresql,postgresql,drop type textrange_c,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,drop type textrange_en_us,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM collate_test2 ORDER BY b COLLATE UCS_BASIC,collate.linux.utf8.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SET client_min_messages TO warning,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA collate_tests CASCADE,collate.linux.utf8.sql,SAME,,[]
postgresql,postgresql,"/*  * This test is intended to pass on all platforms supported by Postgres.  * We can therefore only assume that the default, C, and POSIX collations  * are available   * C-locale database, these may well all have the same behavior.  But  * fortunately, the system doesn't know that and will treat them as  * incompatible collations.  It is therefore at least possible to test  * parser behaviors such as collation conflict resolution.  This test will,  * however, be more revealing when run in a database with non-C locale,  * since any departure from C sorting behavior will show as a failure.  */  CREATE SCHEMA collate_tests",collate.sql,SAME,,[]
postgresql,postgresql,SET search_path = collate_tests,collate.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'abc'",collate.sql,SAME,,"[(1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b >= 'abc' COLLATE ""C""",collate.sql,SAME,,"[(1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'abc' COLLATE ""C""",collate.sql,SAME,,"[(1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"CREATE DOMAIN testdomain_p AS text COLLATE ""POSIX""",collate.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b FROM collate_test4 ORDER BY b",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test5 ORDER BY b",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 ORDER BY b",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 ORDER BY b",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 ORDER BY b COLLATE ""C""",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test1 ORDER BY b,collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test2 ORDER BY b,collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT 'bbc' COLLATE ""C"" > 'Abc' COLLATE ""C"" AS ""true""",collate.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'bbc' COLLATE ""POSIX"" < 'Abc' COLLATE ""POSIX"" AS ""false""",collate.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT a, lower(x), lower(y), upper(x), upper(y), initcap(x), initcap(y) FROM collate_test10",collate.sql,SAME,,"[(1, 'hij', 'hij', 'HIJ', 'HIJ', 'Hij', 'Hij'), (2, 'hij', 'hij', 'HIJ', 'HIJ', 'Hij', 'Hij')]"
postgresql,postgresql,"SELECT a, lower(x COLLATE ""C""), lower(y COLLATE ""C"") FROM collate_test10",collate.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hij')]"
postgresql,postgresql,"SELECT a, x, y FROM collate_test10 ORDER BY lower(y), a",collate.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'HIJ', 'HIJ')]"
postgresql,postgresql,"CREATE VIEW collview1 AS SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'bbc'",collate.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW collview2 AS SELECT a, b FROM collate_test1 ORDER BY b COLLATE ""C""",collate.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW collview3 AS SELECT a, lower((x || x) COLLATE ""POSIX"") FROM collate_test10",collate.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, view_definition FROM information_schema.views   WHERE table_name LIKE 'collview%' ORDER BY 1",collate.sql,SAME,,"[('collview1', ' SELECT a,\n    b\n   FROM collate_test1\n  WHERE ((b COLLATE ""C"") >= \'bbc\'::text);'), ('collview2', ' SELECT a,\n    b\n   FROM collate_test1\n  ORDER BY (b COLLATE ""C"");'), ('collview3', ' SELECT a,\n    lower(((x || x) COLLATE ""POSIX"")) AS lower\n   FROM collate_test10;')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test1 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, lower(coalesce(x, 'foo')), lower(coalesce(y, 'foo')) FROM collate_test10",collate.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hij')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test1 ORDER BY 3",collate.sql,SAME,,"[(2, 'Abc', 'CCC'), (4, 'ABD', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test2 ORDER BY 3",collate.sql,SAME,,"[(2, 'Abc', 'CCC'), (4, 'ABD', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc')]"
postgresql,postgresql,"SELECT a, x, y, lower(greatest(x, 'foo')), lower(greatest(y, 'foo')) FROM collate_test10",collate.sql,SAME,,"[(1, 'hij', 'hij', 'hij', 'hij'), (2, 'HIJ', 'HIJ', 'foo', 'foo')]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test1 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (3, 'bbc'), (1, None)]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (3, 'bbc'), (1, None)]"
postgresql,postgresql,"SELECT a, lower(nullif(x, 'foo')), lower(nullif(y, 'foo')) FROM collate_test10",collate.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hij')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test1 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abcd'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abcd'), (3, 'bbc')]"
postgresql,postgresql,CREATE DOMAIN testdomain AS text,collate.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test1 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b::testdomain_p FROM collate_test2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, lower(x::testdomain), lower(y::testdomain) FROM collate_test10",collate.sql,SAME,,"[(1, 'hij', 'hij'), (2, 'hij', 'hij')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test1",collate.sql,SAME,,"[('ABD', 'bbc')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test2",collate.sql,SAME,,"[('ABD', 'bbc')]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test1,collate.sql,SAME,,"[(['ABD', 'Abc', 'abc', 'bbc'],)]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test2,collate.sql,SAME,,"[(['ABD', 'Abc', 'abc', 'bbc'],)]"
postgresql,postgresql,"SELECT array_agg(x COLLATE ""C"" ORDER BY y COLLATE ""POSIX"") FROM collate_test10",collate.sql,SAME,,"[(['HIJ', 'hij'],)]"
postgresql,postgresql,"SELECT array_agg(a ORDER BY x COLLATE ""C"", y COLLATE ""POSIX"") FROM collate_test10",collate.sql,SAME,,"[([2, 1],)]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test1 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (4, 'ABD'), (2, 'Abc'), (2, 'Abc'), (1, 'abc'), (1, 'abc'), (3, 'bbc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 UNION SELECT a, b FROM collate_test2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 WHERE a < 4 INTERSECT SELECT a, b FROM collate_test2 WHERE a > 1 ORDER BY 2",collate.sql,SAME,,"[(2, 'Abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 EXCEPT SELECT a, b FROM collate_test2 WHERE a < 2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test2",collate.sql,SAME,,"[(1, 'abc'), (2, 'Abc'), (3, 'bbc'), (4, 'ABD'), (1, 'abc'), (2, 'Abc'), (3, 'bbc'), (4, 'ABD')]"
postgresql,postgresql,"SELECT a, b COLLATE ""C"" FROM collate_test1 UNION SELECT a, b FROM collate_test2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,select x || y from collate_test10,collate.sql,SAME,,"[('hijhij',), ('HIJHIJ',)]"
postgresql,postgresql,"SELECT a, b, a < b as lt FROM   (VALUES ('a', 'B'), ('A', 'b' COLLATE ""C"")) v(a,b)",collate.sql,SAME,,"[('a', 'B', False), ('A', 'b', True)]"
postgresql,postgresql,"SELECT * FROM collate_test10 WHERE (x COLLATE ""POSIX"", y COLLATE ""C"") NOT IN (SELECT y, x FROM collate_test10)",collate.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM collate_test10 WHERE (x, y) NOT IN (SELECT y COLLATE ""C"", x COLLATE ""POSIX"" FROM collate_test10)",collate.sql,SAME,,[]
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test1 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,CREATE FUNCTION vc (text) RETURNS text LANGUAGE sql     AS 'select $1::varchar',collate.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b FROM collate_test1 ORDER BY a, vc(b)",collate.sql,SAME,,"[(1, 'abc'), (2, 'Abc'), (3, 'bbc'), (4, 'ABD')]"
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test1)) ORDER BY 1,collate.sql,SAME,,"[('ABD',), ('Abc',), ('abc',), ('bbc',)]"
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test2)) ORDER BY 1,collate.sql,SAME,,"[('ABD',), ('Abc',), ('abc',), ('bbc',)]"
postgresql,postgresql,CREATE FUNCTION dup (anyelement) RETURNS anyelement     AS 'select $1' LANGUAGE sql,collate.sql,SAME,,[]
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test1 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test2 ORDER BY 2",collate.sql,SAME,,"[(4, 'ABD'), (2, 'Abc'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,CREATE INDEX collate_test1_idx1 ON collate_test1 (b),collate.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx2 ON collate_test1 (b COLLATE ""POSIX"")",collate.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx3 ON collate_test1 ((b COLLATE ""POSIX""))",collate.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx4 ON collate_test1 (((b||'foo') COLLATE ""POSIX""))",collate.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, pg_get_indexdef(oid) FROM pg_class WHERE relname LIKE 'collate_test%_idx%' ORDER BY 1",collate.sql,SAME,,"[('collate_test1_idx1', 'CREATE INDEX collate_test1_idx1 ON collate_tests.collate_test1 USING btree (b)'), ('collate_test1_idx2', 'CREATE INDEX collate_test1_idx2 ON collate_tests.collate_test1 USING btree (b COLLATE ""POSIX"")'), ('collate_test1_idx3', 'CREATE INDEX collate_test1_idx3 ON collate_tests.collate_test1 USING btree (b COLLATE ""POSIX"")'), ('collate_test1_idx4', 'CREATE INDEX collate_test1_idx4 ON collate_tests.collate_test1 USING btree (((b || \'foo\'::text)) COLLATE ""POSIX"")')]"
postgresql,postgresql,SET enable_seqscan TO 0,collate.sql,SAME,,[]
postgresql,postgresql,SET enable_hashjoin TO 0,collate.sql,SAME,,[]
postgresql,postgresql,SET enable_nestloop TO 0,collate.sql,SAME,,[]
postgresql,postgresql,DELETE FROM collate_test22 WHERE f2 = 'baz',collate.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE collate_test22 ADD FOREIGN KEY (f2) REFERENCES collate_test20,collate.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,collate.sql,SAME,,[]
postgresql,postgresql,RESET enable_hashjoin,collate.sql,SAME,,[]
postgresql,postgresql,RESET enable_nestloop,collate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF)   SELECT * FROM collate_test10 ORDER BY x, y",collate.sql,SAME,,"[('Sort',), ('  Sort Key: x COLLATE ""C"", y COLLATE ""POSIX""',), ('  ->  Seq Scan on collate_test10',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF)   SELECT * FROM collate_test10 ORDER BY x DESC, y COLLATE ""C"" ASC NULLS FIRST",collate.sql,SAME,,"[('Sort',), ('  Sort Key: x COLLATE ""C"" DESC, y COLLATE ""C"" NULLS FIRST',), ('  ->  Seq Scan on collate_test10',)]"
postgresql,postgresql,"CREATE COLLATION mycoll1 FROM ""C""",collate.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION mycoll2 ( LC_COLLATE = ""POSIX"", LC_CTYPE = ""POSIX"" )",collate.sql,SAME,,[]
postgresql,postgresql,DROP COLLATION mycoll1,collate.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE vctable (f1 varchar(25)),collate.sql,SAME,,[]
postgresql,postgresql,SELECT collation for ('foo'),collate.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT collation for ('foo'::text),collate.sql,SAME,,"[('""default""',)]"
postgresql,postgresql,SELECT collation for ((SELECT b FROM collate_test1 LIMIT 1)),collate.sql,SAME,,"[('""C""',)]"
postgresql,postgresql,"CREATE VIEW collate_on_int AS SELECT c1+1 AS c1p FROM   (SELECT ('4' COLLATE ""C"")::INT AS c1) ss",collate.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA collate_tests CASCADE,collate.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA collate_tests,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,SET search_path = collate_tests,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b >= 'bbc',collate.windows.win1252.sql,SAME,,"[(3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test2 WHERE b >= 'bbc',collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test3 WHERE b >= 'bbc',collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test3 WHERE b >= 'BBC',collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'bbc'",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b >= 'bbc' COLLATE ""C""",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'bbc' COLLATE ""C""",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,"CREATE DOMAIN testdomain_sv AS text COLLATE ""sv_SE""",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b FROM collate_test4 ORDER BY b",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test5 ORDER BY b",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 ORDER BY b",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 ORDER BY b",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test3 ORDER BY b",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 ORDER BY b COLLATE ""C""",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SELECT * FROM collate_test1 ORDER BY b,collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test2 ORDER BY b,collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SELECT * FROM collate_test3 ORDER BY b,collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT 'bbc' COLLATE ""en_US"" > 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc' COLLATE ""en_US"" AS ""true""",collate.windows.win1252.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'bbc' COLLATE ""sv_SE"" > 'ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤bc' COLLATE ""sv_SE"" AS ""false""",collate.windows.win1252.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b LIKE 'abc',collate.windows.win1252.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b LIKE 'abc%',collate.windows.win1252.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b LIKE '%bc%',collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ILIKE 'abc',collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ILIKE 'abc%',collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ILIKE '%bc%',collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC')]"
postgresql,postgresql,SELECT relname FROM pg_class WHERE relname ILIKE 'abc%',collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~ '^abc$',collate.windows.win1252.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~ '^abc',collate.windows.win1252.sql,SAME,,"[(1, 'abc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~ 'bc',collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~* '^abc$',collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~* '^abc',collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (4, 'ABC')]"
postgresql,postgresql,SELECT * FROM collate_test1 WHERE b ~* 'bc',collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC')]"
postgresql,postgresql,"SELECT b,        b ~ '^[[:alpha:]]+$' AS is_alpha,        b ~ '^[[:upper:]]+$' AS is_upper,        b ~ '^[[:lower:]]+$' AS is_lower,        b ~ '^[[:digit:]]+$' AS is_digit,        b ~ '^[[:alnum:]]+$' AS is_alnum,        b ~ '^[[:graph:]]+$' AS is_graph,        b ~ '^[[:print:]]+$' AS is_print,        b ~ '^[[:punct:]]+$' AS is_punct,        b ~ '^[[:space:]]+$' AS is_space FROM collate_test6",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,SELECT relname FROM pg_class WHERE relname ~* '^abc',collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW collview1 AS SELECT * FROM collate_test1 WHERE b COLLATE ""C"" >= 'bbc'",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW collview2 AS SELECT a, b FROM collate_test1 ORDER BY b COLLATE ""C""",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, view_definition FROM information_schema.views   WHERE table_name LIKE 'collview%' ORDER BY 1",collate.windows.win1252.sql,SAME,,"[('collview1', ' SELECT a,\n    b\n   FROM collate_test1\n  WHERE ((b COLLATE ""C"") >= \'bbc\'::text);'), ('collview2', ' SELECT a,\n    b\n   FROM collate_test1\n  ORDER BY (b COLLATE ""C"");')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test1 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test2 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, coalesce(b, 'foo') FROM collate_test3 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test1 ORDER BY 3",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'CCC'), (4, 'ABC', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test2 ORDER BY 3",collate.windows.win1252.sql,SAME,,"[(4, 'ABC', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b, greatest(b, 'CCC') FROM collate_test3 ORDER BY 3",collate.windows.win1252.sql,SAME,,"[(4, 'ABC', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test1 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (3, 'bbc'), (1, None)]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test2 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, None)]"
postgresql,postgresql,"SELECT a, nullif(b, 'abc') FROM collate_test3 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (1, None)]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test1 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abcd'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test2 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abcd'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test3 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abcd'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,CREATE DOMAIN testdomain AS text,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test1 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test2 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b::testdomain FROM collate_test3 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b::testdomain_sv FROM collate_test3 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test1",collate.windows.win1252.sql,SAME,,"[('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'bbc')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test2",collate.windows.win1252.sql,SAME,,"[('ABC', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT min(b), max(b) FROM collate_test3",collate.windows.win1252.sql,SAME,,"[('ABC', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test1,collate.windows.win1252.sql,SAME,,"[(['Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc', 'ABC', 'abc', 'bbc'],)]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test2,collate.windows.win1252.sql,SAME,,"[(['ABC', 'abc', 'bbc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'],)]"
postgresql,postgresql,SELECT array_agg(b ORDER BY b) FROM collate_test3,collate.windows.win1252.sql,SAME,,"[(['ABC', 'abc', 'bbc', 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'],)]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test1 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (4, 'ABC'), (1, 'abc'), (1, 'abc'), (3, 'bbc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test2 UNION SELECT a, b FROM collate_test2 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test3 WHERE a < 4 INTERSECT SELECT a, b FROM collate_test3 WHERE a > 1 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test3 EXCEPT SELECT a, b FROM collate_test3 WHERE a < 2 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3",collate.windows.win1252.sql,SAME,,"[(1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC'), (1, 'abc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (3, 'bbc'), (4, 'ABC')]"
postgresql,postgresql,"SELECT a, b COLLATE ""C"" FROM collate_test1 UNION SELECT a, b FROM collate_test3 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test1 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test2 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, CAST(b AS varchar) FROM collate_test3 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"CREATE FUNCTION mylt (text, text) RETURNS boolean LANGUAGE sql     AS $$ select $1 < $2 $$",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION mylt_noninline (text, text) RETURNS boolean LANGUAGE sql     AS $$ select $1 < $2 limit 1 $$",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test1)) ORDER BY 1,collate.windows.win1252.sql,SAME,,"[('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc',), ('ABC',), ('abc',), ('bbc',)]"
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test2)) ORDER BY 1,collate.windows.win1252.sql,SAME,,"[('ABC',), ('abc',), ('bbc',), ('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc',)]"
postgresql,postgresql,SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test3)) ORDER BY 1,collate.windows.win1252.sql,SAME,,"[('ABC',), ('abc',), ('bbc',), ('Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc',)]"
postgresql,postgresql,CREATE FUNCTION dup (anyelement) RETURNS anyelement     AS 'select $1' LANGUAGE sql,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test1 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc'), (4, 'ABC'), (1, 'abc'), (3, 'bbc')]"
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test2 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,"SELECT a, dup(b) FROM collate_test3 ORDER BY 2",collate.windows.win1252.sql,SAME,,"[(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â\x83Ã\x83Â\x83Ã\x82Â\x83Ã\x83Â\x82Ã\x82Â\x82Ã\x83Â\x83Ã\x82Â\x82Ã\x83Â\x82Ã\x82Â¤bc')]"
postgresql,postgresql,CREATE INDEX collate_test1_idx1 ON collate_test1 (b),collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx2 ON collate_test1 (b COLLATE ""C"")",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx3 ON collate_test1 ((b COLLATE ""C""))",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX collate_test1_idx4 ON collate_test1 (((b||'foo') COLLATE ""POSIX""))",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, pg_get_indexdef(oid) FROM pg_class WHERE relname LIKE 'collate_test%_idx%' ORDER BY 1",collate.windows.win1252.sql,SAME,,"[('collate_test1_idx1', 'CREATE INDEX collate_test1_idx1 ON collate_tests.collate_test1 USING btree (b)'), ('collate_test1_idx2', 'CREATE INDEX collate_test1_idx2 ON collate_tests.collate_test1 USING btree (b COLLATE ""C"")'), ('collate_test1_idx3', 'CREATE INDEX collate_test1_idx3 ON collate_tests.collate_test1 USING btree (b COLLATE ""C"")'), ('collate_test1_idx4', 'CREATE INDEX collate_test1_idx4 ON collate_tests.collate_test1 USING btree (((b || \'foo\'::text)) COLLATE ""POSIX"")')]"
postgresql,postgresql,CREATE SCHEMA test_schema,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION test0 FROM ""C""",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION IF NOT EXISTS test0 FROM ""C""",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,CREATE COLLATION IF NOT EXISTS test0 (locale = 'foo'),collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,CREATE COLLATION test5 FROM test0,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,SELECT collname FROM pg_collation WHERE collname LIKE 'test%' ORDER BY 1,collate.windows.win1252.sql,SAME,,"[('test0',), ('test5',)]"
postgresql,postgresql,ALTER COLLATION test0 RENAME TO test11,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,ALTER COLLATION test11 SET SCHEMA test_schema,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"SELECT collname, nspname, obj_description(pg_collation.oid, 'pg_collation')     FROM pg_collation JOIN pg_namespace ON (collnamespace = pg_namespace.oid)     WHERE collname LIKE 'test%'     ORDER BY 1",collate.windows.win1252.sql,SAME,,"[('test11', 'test_schema', None), ('test5', 'collate_tests', None)]"
postgresql,postgresql,DROP COLLATION IF EXISTS test0,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,SELECT collname FROM pg_collation WHERE collname LIKE 'test%',collate.windows.win1252.sql,SAME,,"[('test11',), ('test5',)]"
postgresql,postgresql,"CREATE COLLATION test0 FROM ""C""",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN collate_dep_dom1 AS text COLLATE test0,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE collate_dep_test2 AS (x int, y text COLLATE test0)",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW collate_dep_test3 AS SELECT text 'foo' COLLATE test0 AS foo,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX collate_dep_test4i ON collate_dep_test4t (b COLLATE test0),collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,DROP COLLATION test0 CASCADE,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,DROP TYPE collate_dep_test2,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"create type textrange_c as range(subtype=text, collation=""C"")",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"create type textrange_en_us as range(subtype=text, collation=""en_US"")",collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,"select textrange_c('A','Z') @> 'b'::text",collate.windows.win1252.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select textrange_en_us('A','Z') @> 'b'::text",collate.windows.win1252.sql,SAME,,"[(False,)]"
postgresql,postgresql,drop type textrange_c,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,drop type textrange_en_us,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages TO warning,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA collate_tests CASCADE,collate.windows.win1252.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE combocidtest (foobar int),combocid.sql,SAME,,[]
postgresql,postgresql,BEGIN,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,1)', '10', 1), ('(0,2)', '11', 2)]"
postgresql,postgresql,SAVEPOINT s1,combocid.sql,SAME,,[]
postgresql,postgresql,UPDATE combocidtest SET foobar = foobar + 10,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,3)', '12', 11), ('(0,4)', '12', 12)]"
postgresql,postgresql,ROLLBACK TO s1,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,1)', '0', 1), ('(0,2)', '1', 2)]"
postgresql,postgresql,COMMIT,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,1)', '0', 1), ('(0,2)', '1', 2)]"
postgresql,postgresql,BEGIN,combocid.sql,SAME,,[]
postgresql,postgresql,"DECLARE c CURSOR FOR SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,[]
postgresql,postgresql,DELETE FROM combocidtest,combocid.sql,SAME,,[]
postgresql,postgresql,FETCH ALL FROM c,combocid.sql,SAME,,"[('(0,1)', '1', 1), ('(0,2)', '1', 2), ('(0,5)', '0', 333)]"
postgresql,postgresql,ROLLBACK,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,1)', '1', 1), ('(0,2)', '1', 2)]"
postgresql,postgresql,BEGIN,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,1)', '1', 1), ('(0,2)', '1', 2), ('(0,6)', '10', 444)]"
postgresql,postgresql,SAVEPOINT s1,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest FOR UPDATE",combocid.sql,SAME,,"[('(0,1)', '1', 1), ('(0,2)', '1', 2), ('(0,6)', '10', 444)]"
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,1)', '1', 1), ('(0,2)', '1', 2), ('(0,6)', '10', 444)]"
postgresql,postgresql,UPDATE combocidtest SET foobar = foobar + 10,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,7)', '12', 11), ('(0,8)', '12', 12), ('(0,9)', '12', 454)]"
postgresql,postgresql,ROLLBACK TO s1,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,1)', '12', 1), ('(0,2)', '12', 2), ('(0,6)', '0', 444)]"
postgresql,postgresql,COMMIT,combocid.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid,cmin,* FROM combocidtest",combocid.sql,SAME,,"[('(0,1)', '12', 1), ('(0,2)', '12', 2), ('(0,6)', '0', 444)]"
postgresql,postgresql,BEGIN,combocid.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM testcase WHERE testcase.id = 1 FOR UPDATE,combocid.sql,SAME,,"[(1, Decimal('0'))]"
postgresql,postgresql,UPDATE testcase SET balance = balance + 400 WHERE id=1,combocid.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT subxact,combocid.sql,SAME,,[]
postgresql,postgresql,UPDATE testcase SET balance = balance - 100 WHERE id=1,combocid.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT subxact,combocid.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM testcase WHERE id = 1 FOR UPDATE,combocid.sql,SAME,,"[(1, Decimal('400'))]"
postgresql,postgresql,ROLLBACK,combocid.sql,SAME,,[]
postgresql,postgresql,SELECT 'trailing' AS first,comments.sql,SAME,,"[('trailing',)]"
postgresql,postgresql,SELECT /* embedded single line */ 'embedded' AS second,comments.sql,SAME,,"[('embedded',)]"
postgresql,postgresql,SELECT /* both embedded and trailing single line */ 'both' AS third,comments.sql,SAME,,"[('both',)]"
postgresql,postgresql,SELECT 'before multi-line' AS fourth,comments.sql,SAME,,"[('before multi-line',)]"
postgresql,postgresql,SET default_toast_compression = 'pglz',compression.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX idx ON cmdata(f1),compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmdata,compression.sql,SAME,,"[('pglz',)]"
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmdata1,compression.sql,SAME,,"[('lz4',)]"
postgresql,postgresql,"SELECT SUBSTR(f1, 200, 5) FROM cmdata",compression.sql,SAME,,"[('01234',)]"
postgresql,postgresql,"SELECT SUBSTR(f1, 2000, 50) FROM cmdata1",compression.sql,SAME,,"[('01234567890123456789012345678901234567890123456789',)]"
postgresql,postgresql,SELECT * INTO cmmove1 FROM cmdata,compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmmove1,compression.sql,SAME,,"[('pglz',)]"
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmmove3,compression.sql,SAME,,"[('pglz',), ('lz4',)]"
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmmove2,compression.sql,SAME,,"[('pglz',)]"
postgresql,postgresql,UPDATE cmmove2 SET f1 = cmdata1.f1 FROM cmdata1,compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmmove2,compression.sql,SAME,,"[('lz4',)]"
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmdata2,compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmdata1,compression.sql,SAME,,"[('lz4',)]"
postgresql,postgresql,"SELECT SUBSTR(f1, 200, 5) FROM cmdata1",compression.sql,SAME,,"[('01234',)]"
postgresql,postgresql,"SELECT SUBSTR(f1, 200, 5) FROM cmdata2",compression.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cmdata2 ALTER COLUMN f1 TYPE varchar,compression.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cmdata2 ALTER COLUMN f1 TYPE int USING f1::integer,compression.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cmdata2 ALTER COLUMN f1 TYPE varchar,compression.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cmdata2 ALTER COLUMN f1 SET COMPRESSION pglz,compression.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cmdata2 ALTER COLUMN f1 SET STORAGE plain,compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmdata2,compression.sql,SAME,,"[(None,)]"
postgresql,postgresql,CREATE MATERIALIZED VIEW compressmv(x) AS SELECT * FROM cmdata1,compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmdata1,compression.sql,SAME,,"[('lz4',)]"
postgresql,postgresql,SELECT pg_column_compression(x) FROM compressmv,compression.sql,SAME,,"[('lz4',)]"
postgresql,postgresql,"ALTER TABLE cmpart ATTACH PARTITION cmpart2 FOR VALUES WITH (MODULUS 2, REMAINDER 1)",compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmpart1,compression.sql,SAME,,"[('lz4',)]"
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmpart2,compression.sql,SAME,,"[('pglz',)]"
postgresql,postgresql,SET default_toast_compression = 'lz4',compression.sql,SAME,,[]
postgresql,postgresql,SET default_toast_compression = 'pglz',compression.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cmdata ALTER COLUMN f1 SET COMPRESSION lz4,compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmdata,compression.sql,SAME,,"[('pglz',), ('lz4',)]"
postgresql,postgresql,ALTER TABLE cmdata2 ALTER COLUMN f1 SET COMPRESSION default,compression.sql,SAME,,[]
postgresql,postgresql,ALTER MATERIALIZED VIEW compressmv ALTER COLUMN x SET COMPRESSION lz4,compression.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cmpart1 ALTER COLUMN f1 SET COMPRESSION pglz,compression.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cmpart2 ALTER COLUMN f1 SET COMPRESSION lz4,compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmpart1,compression.sql,SAME,,"[('lz4',), ('pglz',)]"
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmpart2,compression.sql,SAME,,"[('pglz',), ('lz4',)]"
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmdata,compression.sql,SAME,,"[('pglz',), ('lz4',)]"
postgresql,postgresql,VACUUM FULL cmdata,compression.sql,SAME,,[]
postgresql,postgresql,SELECT pg_column_compression(f1) FROM cmdata,compression.sql,SAME,,"[('pglz',), ('lz4',)]"
postgresql,postgresql,CREATE UNIQUE INDEX idx1 ON cmdata2 ((f1 || f2)),compression.sql,SAME,,[]
postgresql,postgresql,SELECT length(f1) FROM cmdata,compression.sql,SAME,,"[(10000,), (36036,)]"
postgresql,postgresql,SELECT length(f1) FROM cmdata1,compression.sql,SAME,,"[(10040,)]"
postgresql,postgresql,SELECT length(f1) FROM cmmove1,compression.sql,SAME,,"[(10000,)]"
postgresql,postgresql,SELECT length(f1) FROM cmmove2,compression.sql,SAME,,"[(10040,)]"
postgresql,postgresql,SELECT length(f1) FROM cmmove3,compression.sql,SAME,,"[(10000,), (10040,)]"
postgresql,postgresql,SELECT * FROM DEFAULT_TBL,constraints.sql,SAME,,"[(1, 'thomas', 57.0613), (1, 'bruce', 123.456), (2, 'vadim', 987.654), (100, 'marc', 123.456), (3, None, 1.0)]"
postgresql,postgresql,CREATE SEQUENCE DEFAULT_SEQ,constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM DEFAULTEXPR_TBL,constraints.sql,SAME,,"[(-1, -2), (-3, 1), (102, -4), (102, None)]"
postgresql,postgresql,SELECT * FROM CHECK_TBL,constraints.sql,SAME,,"[(5,), (4,), (6,)]"
postgresql,postgresql,CREATE SEQUENCE CHECK_SEQ,constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * from CHECK2_TBL,constraints.sql,SAME,,"[(4, 'check ok', -2), (7, 'check ok', 7)]"
postgresql,postgresql,CREATE SEQUENCE INSERT_SEQ,constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM INSERT_TBL,constraints.sql,SAME,,[]
postgresql,postgresql,"SELECT 'one' AS one, nextval('insert_seq')",constraints.sql,SAME,,"[('one', 1)]"
postgresql,postgresql,SELECT * FROM INSERT_TBL,constraints.sql,SAME,,"[(7, '-NULL-', -7), (7, '!check failed', -7)]"
postgresql,postgresql,SELECT * FROM INSERT_TBL,constraints.sql,SAME,,"[(7, '-NULL-', -7), (7, '!check failed', -7)]"
postgresql,postgresql,"SELECT 'seven' AS one, nextval('insert_seq')",constraints.sql,SAME,,"[('seven', 2)]"
postgresql,postgresql,"SELECT 'eight' AS one, currval('insert_seq')",constraints.sql,SAME,,"[('eight', 2)]"
postgresql,postgresql,SELECT * FROM INSERT_TBL,constraints.sql,SAME,,"[(7, '-NULL-', -7), (7, '!check failed', -7), (None, None, None)]"
postgresql,postgresql,"SELECT *, tableoid::regclass::text FROM SYS_COL_CHECK_TBL",constraints.sql,SAME,,"[('Seattle', 'Washington', False, 100, 'sys_col_check_tbl')]"
postgresql,postgresql,SELECT * FROM INSERT_CHILD,constraints.sql,SAME,,"[(7, '-NULL-', -7, 42, 11)]"
postgresql,postgresql,DELETE FROM INSERT_TBL,constraints.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE INSERT_SEQ RESTART WITH 4,constraints.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE tmp (xd INT, yd TEXT, zd INT)",constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM INSERT_TBL,constraints.sql,SAME,,"[(4, 'Y', -4), (5, '!check failed', -5), (6, 'try again', -6)]"
postgresql,postgresql,SELECT * FROM INSERT_TBL,constraints.sql,SAME,,"[(4, 'Y', -4), (5, '!check failed', -5), (6, 'try again', -6), (None, 'try again', None), (7, 'try again', -7)]"
postgresql,postgresql,UPDATE INSERT_TBL SET x = NULL WHERE x = 5,constraints.sql,SAME,,[]
postgresql,postgresql,UPDATE INSERT_TBL SET x = 6 WHERE x = 6,constraints.sql,SAME,,[]
postgresql,postgresql,"UPDATE INSERT_TBL SET x = -z, z = -x",constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM INSERT_TBL,constraints.sql,SAME,,"[(4, 'Y', -4), (None, 'try again', None), (7, 'try again', -7), (5, '!check failed', None), (6, 'try again', -6)]"
postgresql,postgresql,SELECT * FROM COPY_TBL,constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM COPY_TBL,constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM PRIMARY_TBL,constraints.sql,SAME,,"[(1, 'one'), (2, 'two'), (4, 'three'), (5, 'one')]"
postgresql,postgresql,SELECT * FROM PRIMARY_TBL,constraints.sql,SAME,,"[(1, 'one'), (2, 'two'), (1, 'three'), (4, 'three'), (5, 'one')]"
postgresql,postgresql,SELECT * FROM UNIQUE_TBL,constraints.sql,SAME,,"[(1, 'one'), (2, 'two'), (4, 'four'), (None, 'six'), (None, 'seven'), (5, 'five-upsert-update'), (6, 'six-upsert-insert')]"
postgresql,postgresql,SELECT * FROM UNIQUE_TBL,constraints.sql,SAME,,"[(1, 'one'), (2, 'two'), (4, 'four'), (5, 'one'), (None, 'six')]"
postgresql,postgresql,SELECT * FROM UNIQUE_TBL,constraints.sql,SAME,,"[(1, 'one'), (2, 'two'), (1, 'three'), (5, 'one'), (None, 'six')]"
postgresql,postgresql,BEGIN,constraints.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,constraints.sql,SAME,,[]
postgresql,postgresql,UPDATE unique_tbl SET i = i+1,constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM unique_tbl,constraints.sql,SAME,,"[(1, 'one'), (2, 'two'), (3, 'tree'), (4, 'four'), (5, 'five')]"
postgresql,postgresql,BEGIN,constraints.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS unique_tbl_i_key DEFERRED,constraints.sql,SAME,,[]
postgresql,postgresql,DELETE FROM unique_tbl WHERE t = 'tree',constraints.sql,SAME,,[]
postgresql,postgresql,COMMIT,constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM unique_tbl,constraints.sql,SAME,,"[(1, 'one'), (2, 'two'), (4, 'four'), (5, 'five'), (3, 'three')]"
postgresql,postgresql,ALTER TABLE unique_tbl DROP CONSTRAINT unique_tbl_i_key,constraints.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE unique_tbl ADD CONSTRAINT unique_tbl_i_key 	UNIQUE (i) DEFERRABLE INITIALLY DEFERRED,constraints.sql,SAME,,[]
postgresql,postgresql,BEGIN,constraints.sql,SAME,,[]
postgresql,postgresql,UPDATE unique_tbl SET i = 4 WHERE i = 2,constraints.sql,SAME,,[]
postgresql,postgresql,UPDATE unique_tbl SET i = 2 WHERE i = 4 AND t = 'four',constraints.sql,SAME,,[]
postgresql,postgresql,DELETE FROM unique_tbl WHERE i = 1 AND t = 'one',constraints.sql,SAME,,[]
postgresql,postgresql,DELETE FROM unique_tbl WHERE i = 5 AND t = 'five',constraints.sql,SAME,,[]
postgresql,postgresql,COMMIT,constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM unique_tbl,constraints.sql,SAME,,"[(3, 'three'), (1, 'five'), (5, 'one'), (4, 'two'), (2, 'four')]"
postgresql,postgresql,BEGIN,constraints.sql,SAME,,[]
postgresql,postgresql,BEGIN,constraints.sql,SAME,,[]
postgresql,postgresql,BEGIN,constraints.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS ALL DEFERRED,constraints.sql,SAME,,[]
postgresql,postgresql,"SELECT conname, conrelid::regclass FROM pg_constraint   WHERE conname LIKE 'parted_uniq%' ORDER BY conname",constraints.sql,SAME,,"[('parted_uniq_tbl_1_i_key', 'parted_uniq_tbl_1'), ('parted_uniq_tbl_2_i_key', 'parted_uniq_tbl_2'), ('parted_uniq_tbl_i_key', 'parted_uniq_tbl')]"
postgresql,postgresql,BEGIN,constraints.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT f,constraints.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO f,constraints.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS parted_uniq_tbl_i_key DEFERRED,constraints.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM unique_tbl,constraints.sql,SAME,,"[(3, 'three'), (1, 'five'), (5, 'one'), (4, 'two'), (2, 'four'), (3, 'Three'), (3, 'Three')]"
postgresql,postgresql,CREATE CONVERSION myconv FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8,conversion.sql,SAME,,[]
postgresql,postgresql,CREATE DEFAULT CONVERSION public.mydef FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8,conversion.sql,SAME,,[]
postgresql,postgresql,COMMENT ON CONVERSION myconv IS 'bar',conversion.sql,SAME,,[]
postgresql,postgresql,COMMENT ON CONVERSION myconv IS NULL,conversion.sql,SAME,,[]
postgresql,postgresql,DROP CONVERSION myconv,conversion.sql,SAME,,[]
postgresql,postgresql,DROP CONVERSION mydef,conversion.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,conversion.sql,SAME,,[]
postgresql,postgresql,"create or replace function test_conv(   input IN bytea,   src_encoding IN text,   dst_encoding IN text,    result OUT bytea,   errorat OUT bytea,   error OUT text) language plpgsql as $$ declare   validlen int; begin   begin     select * into validlen, result from test_enc_conversion(input, src_encoding, dst_encoding, false);     errorat = NULL;     error := NULL;   exception when others then     error := sqlerrm;     select * into validlen, result from test_enc_conversion(input, src_encoding, dst_encoding, true);     errorat = substr(input, validlen + 1);   end;   return; end; $$",conversion.sql,SAME,,[]
postgresql,postgresql,"create temp table copytest ( 	style	text, 	test 	text, 	filler	int)",copy.sql,SAME,,[]
postgresql,postgresql,create temp table copytest2 (like copytest),copy.sql,SAME,,[]
postgresql,postgresql,select * from copytest except select * from copytest2,copy.sql,SAME,,"[('esc\\ape', 'a\\r\\\r\\\n\\nb', 4), ('DOS', 'abc\r\ndef', 1), ('Unix', 'abc\ndef', 2), ('Mac', 'abc\rdef', 3)]"
postgresql,postgresql,truncate copytest2,copy.sql,SAME,,[]
postgresql,postgresql,select * from copytest except select * from copytest2,copy.sql,SAME,,"[('esc\\ape', 'a\\r\\\r\\\n\\nb', 4), ('DOS', 'abc\r\ndef', 1), ('Unix', 'abc\ndef', 2), ('Mac', 'abc\rdef', 3)]"
postgresql,postgresql,"create temp table copytest3 ( 	c1 int, 	""col with , comma"" text, 	""col with """" quote""  int)",copy.sql,SAME,,[]
postgresql,postgresql,"create temp table copytest4 ( 	c1 int, 	""colname with tab: 	"" text)",copy.sql,SAME,,[]
postgresql,postgresql,alter table parted_copytest attach partition parted_copytest_a1 for values in(1),copy.sql,SAME,,[]
postgresql,postgresql,alter table parted_copytest attach partition parted_copytest_a2 for values in(2),copy.sql,SAME,,[]
postgresql,postgresql,truncate parted_copytest,copy.sql,SAME,,[]
postgresql,postgresql,begin,copy.sql,SAME,,[]
postgresql,postgresql,truncate parted_copytest,copy.sql,SAME,,[]
postgresql,postgresql,rollback,copy.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass,count(*),sum(a) from parted_copytest group by tableoid order by tableoid::regclass::name",copy.sql,SAME,,[]
postgresql,postgresql,truncate parted_copytest,copy.sql,SAME,,[]
postgresql,postgresql,end,copy.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass,count(*),sum(a) from parted_copytest group by tableoid order by tableoid::regclass::name",copy.sql,SAME,,[]
postgresql,postgresql,truncate table parted_copytest,copy.sql,SAME,,[]
postgresql,postgresql,create index on parted_copytest (b),copy.sql,SAME,,[]
postgresql,postgresql,select * from parted_copytest where b = 2,copy.sql,SAME,,[]
postgresql,postgresql,alter table header_copytest drop column c,copy.sql,SAME,,[]
postgresql,postgresql,alter table header_copytest add column c text,copy.sql,SAME,,[]
postgresql,postgresql,alter table header_copytest drop column b,copy.sql,SAME,,[]
postgresql,postgresql,"create temp table oversized_column_default (     col1 varchar(5) DEFAULT 'more than 5 chars',     col2 varchar(5))",copy.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, id % 2 = 0 is_even, count(*) from parted_si GROUP BY 1, 2 ORDER BY 1",copy.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE x ( 	a serial, 	b int, 	c text not null default 'stuff', 	d text, 	e text )",copy2.sql,SAME,,[]
postgresql,postgresql,END,copy2.sql,SAME,,[]
postgresql,postgresql,END,copy2.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM x,copy2.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE y ( 	col1 text, 	col2 text )",copy2.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE testnl (a int, b text, c int)",copy2.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE testnull(a int, b text)",copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,COMMIT,copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,COMMIT,copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,COMMIT,copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,END,copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,COMMIT,copy2.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE forcetest (     a INT NOT NULL,     b TEXT NOT NULL,     c TEXT,     d TEXT,     e TEXT )",copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,copy2.sql,SAME,,[]
postgresql,postgresql,"create function check_con_function(check_con_tbl) returns bool as $$ begin   raise notice 'input = %', row_to_json($1);   return $1.f1 > 0; end $$ language plpgsql immutable",copy2.sql,SAME,,[]
postgresql,postgresql,alter table check_con_tbl add check (check_con_function(check_con_tbl.*)),copy2.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rls_t1 ENABLE ROW LEVEL SECURITY,copy2.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rls_t1 FORCE ROW LEVEL SECURITY,copy2.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,copy2.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,copy2.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW instead_of_insert_tbl_view AS SELECT ''::text AS str,copy2.sql,SAME,,[]
postgresql,postgresql,BEGIN,copy2.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW instead_of_insert_tbl_view_2 as select ''::text as str,copy2.sql,SAME,,[]
postgresql,postgresql,COMMIT,copy2.sql,SAME,,[]
postgresql,postgresql,DROP VIEW instead_of_insert_tbl_view,copy2.sql,SAME,,[]
postgresql,postgresql,"create temp table copy_default ( 	id integer primary key, 	text_value text not null default 'test', 	ts_value timestamp without time zone not null default '2022-07-05' )",copy2.sql,SAME,,[]
postgresql,postgresql,truncate copy_default,copy2.sql,SAME,,[]
postgresql,postgresql,truncate copy_default,copy2.sql,SAME,,[]
postgresql,postgresql,truncate copy_default,copy2.sql,SAME,,[]
postgresql,postgresql,truncate copy_default,copy2.sql,SAME,,[]
postgresql,postgresql,truncate copy_default,copy2.sql,SAME,,[]
postgresql,postgresql,truncate copy_default,copy2.sql,SAME,,[]
postgresql,postgresql,create rule qqq as on insert to copydml_test do instead nothing,copydml.sql,SAME,,[]
postgresql,postgresql,drop rule qqq on copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,create rule qqq as on insert to copydml_test do also delete from copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,drop rule qqq on copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,create rule qqq as on insert to copydml_test where new.t <> 'f' do instead delete from copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,drop rule qqq on copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,create rule qqq as on update to copydml_test do instead nothing,copydml.sql,SAME,,[]
postgresql,postgresql,drop rule qqq on copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,create rule qqq as on update to copydml_test do also delete from copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,drop rule qqq on copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,create rule qqq as on update to copydml_test where new.t <> 'f' do instead delete from copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,drop rule qqq on copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,create rule qqq as on delete to copydml_test do instead nothing,copydml.sql,SAME,,[]
postgresql,postgresql,drop rule qqq on copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,drop rule qqq on copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,drop rule qqq on copydml_test,copydml.sql,SAME,,[]
postgresql,postgresql,create view v_test1 as select 'v_'||t from test1,copyselect.sql,SAME,,[]
postgresql,postgresql,drop view v_test1,copyselect.sql,SAME,,[]
postgresql,postgresql,select 4,copyselect.sql,SAME,,"[(4,)]"
postgresql,postgresql,select 1,copyselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,"CREATE AGGREGATE newavg (    sfunc = int4_avg_accum, basetype = int4, stype = _int8,    finalfunc = int8_avg,    initcond1 = '{0,0}' )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,COMMENT ON AGGREGATE newavg (int4) IS 'an agg comment',create_aggregate.sql,SAME,,[]
postgresql,postgresql,COMMENT ON AGGREGATE newavg (int4) IS NULL,create_aggregate.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE newsum (    sfunc1 = int4pl, basetype = int4, stype1 = int4,    initcond1 = '0' )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE newcnt (*) (    sfunc = int8inc, stype = int8,    initcond = '0', parallel = safe )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE oldcnt (    sfunc = int8inc, basetype = 'ANY', stype = int8,    initcond = '0' )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE newcnt (""any"") (    sfunc = int8inc_any, stype = int8,    initcond = '0' )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,COMMENT ON AGGREGATE newcnt (*) IS 'an agg(*) comment',create_aggregate.sql,SAME,,[]
postgresql,postgresql,"COMMENT ON AGGREGATE newcnt (""any"") IS 'an agg(any) comment'",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create function sum3(int8,int8,int8) returns int8 as 'select $1 + $2 + $3' language sql strict immutable",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create aggregate sum2(int8,int8) (    sfunc = sum3, stype = int8,    initcond = '0' )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create type aggtype as (a integer, b integer, c text)",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create function aggf_trans(aggtype[],integer,integer,text) returns aggtype[] as 'select array_append($1,ROW($2,$3,$4)::aggtype)' language sql strict immutable",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create function aggfns_trans(aggtype[],integer,integer,text) returns aggtype[] as 'select array_append($1,ROW($2,$3,$4)::aggtype)' language sql immutable",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create aggregate aggfstr(integer,integer,text) (    sfunc = aggf_trans, stype = aggtype[],    initcond = '{}' )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create aggregate aggfns(integer,integer,text) (    sfunc = aggfns_trans, stype = aggtype[], sspace = 10000,    initcond = '{}' )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create function least_accum(int8, int8) returns int8 language sql as   'select least($1, $2)'",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"drop function least_accum(int8, int8)",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create function least_accum(anycompatible, anycompatible) returns anycompatible language sql as   'select least($1, $2)'",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create aggregate least_agg(int8) (   stype = int8, sfunc = least_accum )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"drop function least_accum(anycompatible, anycompatible) cascade",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create function least_accum(anyelement, variadic anyarray) returns anyelement language sql as   'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)'",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create aggregate least_agg(variadic items anyarray) (   stype = anyelement, sfunc = least_accum )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create function cleast_accum(anycompatible, variadic anycompatiblearray) returns anycompatible language sql as   'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)'",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"create aggregate cleast_agg(variadic items anycompatiblearray) (   stype = anycompatible, sfunc = cleast_accum )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE sumdouble (float8) (     stype = float8,     sfunc = float8pl,     mstype = float8,     msfunc = float8pl,     minvfunc = float8mi )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"CREATE OR REPLACE AGGREGATE myavg (numeric) ( 	stype = numeric, 	sfunc = numeric_add )",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"SELECT aggfnoid, aggtransfn, aggcombinefn, aggtranstype::regtype,        aggserialfn, aggdeserialfn, aggfinalmodify FROM pg_aggregate WHERE aggfnoid = 'myavg'::REGPROC",create_aggregate.sql,SAME,,"[('myavg', 'numeric_add', '-', 'numeric', '-', '-', 'r')]"
postgresql,postgresql,"create function sum4(int8,int8,int8,int8) returns int8 as 'select $1 + $2 + $3 + $4' language sql strict immutable",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"drop function sum4(int8,int8,int8,int8)",create_aggregate.sql,SAME,,[]
postgresql,postgresql,DROP AGGREGATE myavg (numeric),create_aggregate.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION float8mi_n(float8, float8) RETURNS float8 AS $$ SELECT $1 - $2; $$ LANGUAGE SQL",create_aggregate.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION float8mi_int(float8, float8) RETURNS int AS $$ SELECT CAST($1 - $2 AS INT); $$ LANGUAGE SQL",create_aggregate.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_am.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_am.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_am.sql,SAME,,[]
postgresql,postgresql,COMMIT,create_am.sql,SAME,,[]
postgresql,postgresql,"SELECT amname, amhandler, amtype FROM pg_am where amtype = 't' ORDER BY 1, 2",create_am.sql,SAME,,"[('heap', 'heap_tableam_handler', 't')]"
postgresql,postgresql,SET default_table_access_method = 'heap',create_am.sql,SAME,,[]
postgresql,postgresql,RESET default_table_access_method,create_am.sql,SAME,,[]
postgresql,postgresql,"SELECT     pc.relkind,     pa.amname,     CASE WHEN relkind = 't' THEN         (SELECT 'toast for ' || relname::regclass FROM pg_class pcm WHERE pcm.reltoastrelid = pc.oid)     ELSE         relname::regclass::text     END COLLATE ""C"" AS relname FROM pg_class AS pc,     pg_am AS pa WHERE pa.oid = pc.relam    AND pa.amname = 'heap2' ORDER BY 3, 1, 2",create_am.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_describe_object(classid,objid,objsubid) AS obj FROM pg_depend, pg_am WHERE pg_depend.refclassid = 'pg_am'::regclass     AND pg_am.oid = pg_depend.refobjid     AND pg_am.amname = 'heap2' ORDER BY classid, objid, objsubid",create_am.sql,SAME,,[]
postgresql,postgresql,"SELECT amname FROM pg_class c, pg_am am   WHERE c.relam = am.oid AND c.oid = 'heaptable'::regclass",create_am.sql,SAME,,"[('heap',)]"
postgresql,postgresql,"SELECT pg_describe_object(classid, objid, objsubid) as obj,        pg_describe_object(refclassid, refobjid, refobjsubid) as objref,        deptype   FROM pg_depend   WHERE classid = 'pg_class'::regclass AND         objid = 'heaptable'::regclass   ORDER BY 1, 2",create_am.sql,SAME,,"[('table heaptable', 'schema public', 'n')]"
postgresql,postgresql,ALTER TABLE heaptable SET ACCESS METHOD heap,create_am.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_describe_object(classid, objid, objsubid) as obj,        pg_describe_object(refclassid, refobjid, refobjsubid) as objref,        deptype   FROM pg_depend   WHERE classid = 'pg_class'::regclass AND         objid = 'heaptable'::regclass   ORDER BY 1, 2",create_am.sql,SAME,,"[('table heaptable', 'schema public', 'n')]"
postgresql,postgresql,"SELECT amname FROM pg_class c, pg_am am   WHERE c.relam = am.oid AND c.oid = 'heaptable'::regclass",create_am.sql,SAME,,"[('heap',)]"
postgresql,postgresql,"SELECT COUNT(a), COUNT(1) FILTER(WHERE a=1) FROM heaptable",create_am.sql,SAME,,"[(9, 1)]"
postgresql,postgresql,BEGIN,create_am.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_am.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW heapmv USING heap AS SELECT * FROM heaptable,create_am.sql,SAME,,[]
postgresql,postgresql,"SELECT amname FROM pg_class c, pg_am am   WHERE c.relam = am.oid AND c.oid = 'heapmv'::regclass",create_am.sql,SAME,,"[('heap',)]"
postgresql,postgresql,"SELECT amname FROM pg_class c, pg_am am   WHERE c.relam = am.oid AND c.oid = 'heapmv'::regclass",create_am.sql,SAME,,"[('heap',)]"
postgresql,postgresql,"SELECT COUNT(a), COUNT(1) FILTER(WHERE a=1) FROM heapmv",create_am.sql,SAME,,"[(9, 1)]"
postgresql,postgresql,DROP MATERIALIZED VIEW heapmv,create_am.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_am.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_am.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION bar_int4_text(int4) RETURNS text LANGUAGE SQL AS $$ SELECT ('bar'::text || $1::text); $$,create_cast.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA temp_func_test,create_function_sql.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON SCHEMA temp_func_test TO public,create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SET search_path TO temp_func_test, public",create_function_sql.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION functest_A_1(text, date) RETURNS bool LANGUAGE 'sql'        AS 'SELECT $1 = ''abcd'' AND $2 > ''2001-01-01'''",create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_A_2(text[]) RETURNS int LANGUAGE 'sql'        AS 'SELECT $1[1]::int',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_A_3() RETURNS bool LANGUAGE 'sql'        AS 'SELECT false',create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT proname, prorettype::regtype, proargtypes::regtype[] FROM pg_proc        WHERE oid in ('functest_A_1'::regproc,                      'functest_A_2'::regproc,                      'functest_A_3'::regproc) ORDER BY proname",create_function_sql.sql,SAME,,"[('functest_a_1', 'boolean', '[0:1]={text,date}'), ('functest_a_2', 'integer', '[0:0]={text[]}'), ('functest_a_3', 'boolean', '{}')]"
postgresql,postgresql,"SELECT functest_A_1('abcd', '2020-01-01')",create_function_sql.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT functest_A_2(ARRAY['1', '2', '3'])",create_function_sql.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT functest_A_3(),create_function_sql.sql,SAME,,"[(False,)]"
postgresql,postgresql,CREATE FUNCTION functest_B_1(int) RETURNS bool LANGUAGE 'sql'        AS 'SELECT $1 > 0',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_B_2(int) RETURNS bool LANGUAGE 'sql'        IMMUTABLE AS 'SELECT $1 > 0',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_B_3(int) RETURNS bool LANGUAGE 'sql'        STABLE AS 'SELECT $1 = 0',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_B_4(int) RETURNS bool LANGUAGE 'sql'        VOLATILE AS 'SELECT $1 < 0',create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT proname, provolatile FROM pg_proc        WHERE oid in ('functest_B_1'::regproc,                      'functest_B_2'::regproc,                      'functest_B_3'::regproc, 		     'functest_B_4'::regproc) ORDER BY proname",create_function_sql.sql,SAME,,"[('functest_b_1', 'v'), ('functest_b_2', 'i'), ('functest_b_3', 's'), ('functest_b_4', 'v')]"
postgresql,postgresql,ALTER FUNCTION functest_B_2(int) VOLATILE,create_function_sql.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION functest_B_3(int) COST 100,create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT proname, provolatile FROM pg_proc        WHERE oid in ('functest_B_1'::regproc,                      'functest_B_2'::regproc,                      'functest_B_3'::regproc, 		     'functest_B_4'::regproc) ORDER BY proname",create_function_sql.sql,SAME,,"[('functest_b_1', 'v'), ('functest_b_2', 'v'), ('functest_b_3', 's'), ('functest_b_4', 'v')]"
postgresql,postgresql,CREATE FUNCTION functest_C_1(int) RETURNS bool LANGUAGE 'sql'        AS 'SELECT $1 > 0',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_C_2(int) RETURNS bool LANGUAGE 'sql'        SECURITY DEFINER AS 'SELECT $1 = 0',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_C_3(int) RETURNS bool LANGUAGE 'sql'        SECURITY INVOKER AS 'SELECT $1 < 0',create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT proname, prosecdef FROM pg_proc        WHERE oid in ('functest_C_1'::regproc,                      'functest_C_2'::regproc,                      'functest_C_3'::regproc) ORDER BY proname",create_function_sql.sql,SAME,,"[('functest_c_1', False), ('functest_c_2', True), ('functest_c_3', False)]"
postgresql,postgresql,ALTER FUNCTION functest_C_1(int) IMMUTABLE,create_function_sql.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION functest_C_2(int) SECURITY INVOKER,create_function_sql.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION functest_C_3(int) SECURITY DEFINER,create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT proname, prosecdef FROM pg_proc        WHERE oid in ('functest_C_1'::regproc,                      'functest_C_2'::regproc,                      'functest_C_3'::regproc) ORDER BY proname",create_function_sql.sql,SAME,,"[('functest_c_1', False), ('functest_c_2', False), ('functest_c_3', True)]"
postgresql,postgresql,CREATE FUNCTION functest_E_1(int) RETURNS bool LANGUAGE 'sql'        AS 'SELECT $1 > 100',create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SET search_path TO temp_func_test, public",create_function_sql.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION functest_E_1(int) NOT LEAKPROOF,create_function_sql.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_F_1(int) RETURNS bool LANGUAGE 'sql'        AS 'SELECT $1 > 50',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_F_2(int) RETURNS bool LANGUAGE 'sql'        CALLED ON NULL INPUT AS 'SELECT $1 = 50',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_F_3(int) RETURNS bool LANGUAGE 'sql'        RETURNS NULL ON NULL INPUT AS 'SELECT $1 < 50',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_F_4(int) RETURNS bool LANGUAGE 'sql'        STRICT AS 'SELECT $1 = 50',create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT proname, proisstrict FROM pg_proc        WHERE oid in ('functest_F_1'::regproc,                      'functest_F_2'::regproc,                      'functest_F_3'::regproc,                      'functest_F_4'::regproc) ORDER BY proname",create_function_sql.sql,SAME,,"[('functest_f_1', False), ('functest_f_2', False), ('functest_f_3', True), ('functest_f_4', True)]"
postgresql,postgresql,ALTER FUNCTION functest_F_1(int) IMMUTABLE,create_function_sql.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION functest_F_2(int) STRICT,create_function_sql.sql,SAME,,[]
postgresql,postgresql,ALTER FUNCTION functest_F_3(int) CALLED ON NULL INPUT,create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT proname, proisstrict FROM pg_proc        WHERE oid in ('functest_F_1'::regproc,                      'functest_F_2'::regproc,                      'functest_F_3'::regproc,                      'functest_F_4'::regproc) ORDER BY proname",create_function_sql.sql,SAME,,"[('functest_f_1', False), ('functest_f_2', True), ('functest_f_3', False), ('functest_f_4', True)]"
postgresql,postgresql,SELECT pg_get_functiondef('functest_A_1'::regproc),create_function_sql.sql,SAME,,"[(""CREATE OR REPLACE FUNCTION temp_func_test.functest_a_1(text, date)\n RETURNS boolean\n LANGUAGE sql\nAS $function$SELECT $1 = 'abcd' AND $2 > '2001-01-01'$function$\n"",)]"
postgresql,postgresql,SELECT pg_get_functiondef('functest_B_3'::regproc),create_function_sql.sql,SAME,,"[('CREATE OR REPLACE FUNCTION temp_func_test.functest_b_3(integer)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$SELECT $1 = 0$function$\n',)]"
postgresql,postgresql,SELECT pg_get_functiondef('functest_C_3'::regproc),create_function_sql.sql,SAME,,"[('CREATE OR REPLACE FUNCTION temp_func_test.functest_c_3(integer)\n RETURNS boolean\n LANGUAGE sql\n SECURITY DEFINER\nAS $function$SELECT $1 < 0$function$\n',)]"
postgresql,postgresql,SELECT pg_get_functiondef('functest_F_2'::regproc),create_function_sql.sql,SAME,,"[('CREATE OR REPLACE FUNCTION temp_func_test.functest_f_2(integer)\n RETURNS boolean\n LANGUAGE sql\n STRICT\nAS $function$SELECT $1 = 50$function$\n',)]"
postgresql,postgresql,"CREATE FUNCTION functest_S_1(a text, b date) RETURNS boolean     LANGUAGE SQL     RETURN a = 'abcd' AND b > '2001-01-01'",create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_S_2(a text[]) RETURNS int     RETURN a[1]::int,create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_S_3() RETURNS boolean     RETURN false,create_function_sql.sql,SAME,,[]
postgresql,postgresql,END,create_function_sql.sql,SAME,,[]
postgresql,postgresql,END,create_function_sql.sql,SAME,,[]
postgresql,postgresql,SELECT false,create_function_sql.sql,SAME,,"[(False,)]"
postgresql,postgresql,END,create_function_sql.sql,SAME,,[]
postgresql,postgresql,END,create_function_sql.sql,SAME,,[]
postgresql,postgresql,END,create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT functest_S_1('abcd', '2020-01-01')",create_function_sql.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT functest_S_2(ARRAY['1', '2', '3'])",create_function_sql.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT functest_S_3(),create_function_sql.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT pg_get_functiondef('functest_S_1'::regproc),create_function_sql.sql,SAME,,"[(""CREATE OR REPLACE FUNCTION temp_func_test.functest_s_1(a text, b date)\n RETURNS boolean\n LANGUAGE sql\nRETURN ((a = 'abcd'::text) AND (b > '2001-01-01'::date))\n"",)]"
postgresql,postgresql,SELECT pg_get_functiondef('functest_S_2'::regproc),create_function_sql.sql,SAME,,"[('CREATE OR REPLACE FUNCTION temp_func_test.functest_s_2(a text[])\n RETURNS integer\n LANGUAGE sql\nRETURN ((a)[1])::integer\n',)]"
postgresql,postgresql,SELECT pg_get_functiondef('functest_S_3'::regproc),create_function_sql.sql,SAME,,"[('CREATE OR REPLACE FUNCTION temp_func_test.functest_s_3()\n RETURNS boolean\n LANGUAGE sql\nRETURN false\n',)]"
postgresql,postgresql,CREATE VIEW functestv3 AS SELECT * FROM functest3,create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_S_14() RETURNS bigint     RETURN (SELECT count(*) FROM functestv3),create_function_sql.sql,SAME,,[]
postgresql,postgresql,SELECT functest_S_14(),create_function_sql.sql,SAME,,"[(2,)]"
postgresql,postgresql,"CREATE FUNCTION functest_IS_1(a int, b int default 1, c text default 'foo')     RETURNS int     LANGUAGE SQL     AS 'SELECT $1 + $2'",create_function_sql.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION functest_IS_2(out a int, b int default 1)     RETURNS int     LANGUAGE SQL     AS 'SELECT $1'",create_function_sql.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION functest_IS_3(a int default 1, out b int)     RETURNS int     LANGUAGE SQL     AS 'SELECT $1'",create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT routine_name, ordinal_position, parameter_name, parameter_default     FROM information_schema.parameters JOIN information_schema.routines USING (specific_schema, specific_name)     WHERE routine_schema = 'temp_func_test' AND routine_name ~ '^functest_is_'     ORDER BY 1, 2",create_function_sql.sql,SAME,,"[('functest_is_1', 1, 'a', None), ('functest_is_1', 2, 'b', '1'), ('functest_is_1', 3, 'c', ""'foo'::text""), ('functest_is_2', 1, 'a', None), ('functest_is_2', 2, 'b', '1'), ('functest_is_3', 1, 'a', '1'), ('functest_is_3', 2, 'b', None)]"
postgresql,postgresql,"DROP FUNCTION functest_IS_1(int, int, text), functest_IS_2(int), functest_IS_3(int)",create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_IS_4a() RETURNS int LANGUAGE SQL AS 'SELECT 1',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_IS_4b(x int DEFAULT functest_IS_4a()) RETURNS int LANGUAGE SQL AS 'SELECT x',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE functest1,create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_IS_5(x int DEFAULT nextval('functest1'))     RETURNS int     LANGUAGE SQL     AS 'SELECT x',create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_IS_6()     RETURNS int     LANGUAGE SQL     RETURN nextval('functest1'),create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_IS_7()     RETURNS int     LANGUAGE SQL     RETURN (SELECT count(a) FROM functest2),create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT r0.routine_name, r1.routine_name   FROM information_schema.routine_routine_usage rru        JOIN information_schema.routines r0 ON r0.specific_name = rru.specific_name        JOIN information_schema.routines r1 ON r1.specific_name = rru.routine_name   WHERE r0.routine_schema = 'temp_func_test' AND         r1.routine_schema = 'temp_func_test'   ORDER BY 1, 2",create_function_sql.sql,SAME,,"[('functest_is_4b', 'functest_is_4a')]"
postgresql,postgresql,"SELECT routine_name, sequence_name FROM information_schema.routine_sequence_usage   WHERE routine_schema = 'temp_func_test'   ORDER BY 1, 2",create_function_sql.sql,SAME,,"[('functest_is_5', 'functest1'), ('functest_is_6', 'functest1')]"
postgresql,postgresql,"SELECT routine_name, table_name, column_name FROM information_schema.routine_column_usage   WHERE routine_schema = 'temp_func_test'   ORDER BY 1, 2",create_function_sql.sql,SAME,,"[('functest_is_7', 'functest2', 'a')]"
postgresql,postgresql,"SELECT routine_name, table_name FROM information_schema.routine_table_usage   WHERE routine_schema = 'temp_func_test'   ORDER BY 1, 2",create_function_sql.sql,SAME,,"[('functest_is_7', 'functest2')]"
postgresql,postgresql,DROP FUNCTION functest_IS_4a CASCADE,create_function_sql.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE functest1 CASCADE,create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest_B_2(bigint) RETURNS bool LANGUAGE 'sql'        IMMUTABLE AS 'SELECT $1 > 0',create_function_sql.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION functest_b_1,create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION functest1(a int) RETURNS int LANGUAGE SQL AS 'SELECT $1',create_function_sql.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION functest1(a int),create_function_sql.sql,SAME,,[]
postgresql,postgresql,END,create_function_sql.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION voidtest1(a int) RETURNS VOID LANGUAGE SQL AS $$ SELECT a + 1 $$,create_function_sql.sql,SAME,,[]
postgresql,postgresql,SELECT voidtest1(42),create_function_sql.sql,SAME,,"[(None,)]"
postgresql,postgresql,"CREATE FUNCTION voidtest2(a int, b int) RETURNS VOID LANGUAGE SQL AS $$ SELECT voidtest1(a + b) $$",create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT voidtest2(11,22)",create_function_sql.sql,SAME,,"[(None,)]"
postgresql,postgresql,"EXPLAIN (verbose, costs off) SELECT voidtest2(11,22)",create_function_sql.sql,SAME,,"[('Result',), ('  Output: voidtest1(33)',)]"
postgresql,postgresql,CREATE TEMP TABLE sometable(f1 int),create_function_sql.sql,SAME,,[]
postgresql,postgresql,SELECT voidtest3(17),create_function_sql.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT voidtest4(39),create_function_sql.sql,SAME,,"[(None,)]"
postgresql,postgresql,TABLE sometable,create_function_sql.sql,SAME,,"[(18,), (38,)]"
postgresql,postgresql,"CREATE FUNCTION voidtest5(a int) RETURNS SETOF VOID LANGUAGE SQL AS $$ SELECT generate_series(1, a) $$ STABLE",create_function_sql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM voidtest5(3),create_function_sql.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION double_append(anyarray, anyelement) RETURNS SETOF anyarray LANGUAGE SQL IMMUTABLE AS $$ SELECT array_append($1, $2) || array_append($1, $2) $$",create_function_sql.sql,SAME,,[]
postgresql,postgresql,"SELECT double_append(array_append(ARRAY[q1], q2), q3)   FROM (VALUES(1,2,3), (4,5,6)) v(q1,q2,q3)",create_function_sql.sql,SAME,,"[([1, 2, 3, 1, 2, 3],), ([4, 5, 6, 4, 5, 6],)]"
postgresql,postgresql,DROP SCHEMA temp_func_test CASCADE,create_function_sql.sql,SAME,,[]
postgresql,postgresql,RESET search_path,create_function_sql.sql,SAME,,[]
postgresql,postgresql,ANALYZE slow_emp4000,create_index.sql,SAME,,[]
postgresql,postgresql,ANALYZE fast_emp4000,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX grect2ind ON fast_emp4000 USING gist (home_base),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE gpolygon_tbl AS     SELECT polygon(home_base) AS f1 FROM slow_emp4000,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE gcircle_tbl AS     SELECT circle(home_base) AS f1 FROM slow_emp4000,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ggpolygonind ON gpolygon_tbl USING gist (f1),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ggcircleind ON gcircle_tbl USING gist (f1),create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = ON,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM fast_emp4000     WHERE home_base <@ '(200,200),(2000,1000)'::box     ORDER BY (home_base[0])[0]",create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box",create_index.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL,create_index.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM gpolygon_tbl WHERE f1 && '(1000,1000,0,0)'::polygon",create_index.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT count(*) FROM gcircle_tbl WHERE f1 && '<(500,500),500>'::circle",create_index.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT * FROM gpolygon_tbl ORDER BY f1 <-> '(0,0)'::point LIMIT 10",create_index.sql,SAME,,"[('((1000,0),(0,1000))',), ('((0,1000),(1000,1000))',)]"
postgresql,postgresql,"SELECT circle_center(f1), round(radius(f1)) as radius FROM gcircle_tbl ORDER BY f1 <-> '(200,300)'::point LIMIT 10",create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = ON,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM fast_emp4000     WHERE home_base <@ '(200,200),(2000,1000)'::box     ORDER BY (home_base[0])[0]",create_index.sql,SAME,,"[('Sort',), ('  Sort Key: ((home_base[0])[0])',), ('  ->  Index Only Scan using grect2ind on fast_emp4000',), (""        Index Cond: (home_base <@ '(2000,1000),(200,200)'::box)"",)]"
postgresql,postgresql,"SELECT * FROM fast_emp4000     WHERE home_base <@ '(200,200),(2000,1000)'::box     ORDER BY (home_base[0])[0]",create_index.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box",create_index.sql,SAME,,"[('Aggregate',), ('  ->  Index Only Scan using grect2ind on fast_emp4000',), (""        Index Cond: (home_base && '(1000,1000),(0,0)'::box)"",)]"
postgresql,postgresql,"SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box",create_index.sql,SAME,,"[(0,)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL,create_index.sql,SAME,,"[('Aggregate',), ('  ->  Index Only Scan using grect2ind on fast_emp4000',), ('        Index Cond: (home_base IS NULL)',)]"
postgresql,postgresql,SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL,create_index.sql,SAME,,"[(0,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM gpolygon_tbl WHERE f1 && '(1000,1000,0,0)'::polygon",create_index.sql,SAME,,"[('Aggregate',), ('  ->  Index Scan using ggpolygonind on gpolygon_tbl',), (""        Index Cond: (f1 && '((1000,1000),(0,0))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM gpolygon_tbl WHERE f1 && '(1000,1000,0,0)'::polygon",create_index.sql,SAME,,"[(2,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM gcircle_tbl WHERE f1 && '<(500,500),500>'::circle",create_index.sql,SAME,,"[('Aggregate',), ('  ->  Index Scan using ggcircleind on gcircle_tbl',), (""        Index Cond: (f1 && '<(500,500),500>'::circle)"",)]"
postgresql,postgresql,"SELECT count(*) FROM gcircle_tbl WHERE f1 && '<(500,500),500>'::circle",create_index.sql,SAME,,"[(0,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM gpolygon_tbl ORDER BY f1 <-> '(0,0)'::point LIMIT 10",create_index.sql,SAME,,"[('Limit',), ('  ->  Index Scan using ggpolygonind on gpolygon_tbl',), (""        Order By: (f1 <-> '(0,0)'::point)"",)]"
postgresql,postgresql,"SELECT * FROM gpolygon_tbl ORDER BY f1 <-> '(0,0)'::point LIMIT 10",create_index.sql,SAME,,"[('((1000,0),(0,1000))',), ('((0,1000),(1000,1000))',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT circle_center(f1), round(radius(f1)) as radius FROM gcircle_tbl ORDER BY f1 <-> '(200,300)'::point LIMIT 10",create_index.sql,SAME,,"[('Limit',), ('  ->  Index Scan using ggcircleind on gcircle_tbl',), (""        Order By: (f1 <-> '(200,300)'::point)"",)]"
postgresql,postgresql,"SELECT circle_center(f1), round(radius(f1)) as radius FROM gcircle_tbl ORDER BY f1 <-> '(200,300)'::point LIMIT 10",create_index.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT point(x,x), (SELECT f1 FROM gpolygon_tbl ORDER BY f1 <-> point(x,x) LIMIT 1) as c FROM generate_series(0,10,1) x",create_index.sql,SAME,,"[('Function Scan on generate_series x',), ('  SubPlan 1',), ('    ->  Limit',), ('          ->  Index Scan using ggpolygonind on gpolygon_tbl',), ('                Order By: (f1 <-> point((x.x)::double precision, (x.x)::double precision))',)]"
postgresql,postgresql,"SELECT point(x,x), (SELECT f1 FROM gpolygon_tbl ORDER BY f1 <-> point(x,x) LIMIT 1) as c FROM generate_series(0,10,1) x",create_index.sql,SAME,,"[('(0,0)', '((1000,0),(0,1000))'), ('(1,1)', '((1000,0),(0,1000))'), ('(2,2)', '((1000,0),(0,1000))'), ('(3,3)', '((1000,0),(0,1000))'), ('(4,4)', '((1000,0),(0,1000))'), ('(5,5)', '((1000,0),(0,1000))'), ('(6,6)', '((1000,0),(0,1000))'), ('(7,7)', '((1000,0),(0,1000))'), ('(8,8)', '((1000,0),(0,1000))'), ('(9,9)', '((1000,0),(0,1000))'), ('(10,10)', '((1000,0),(0,1000))')]"
postgresql,postgresql,SET enable_seqscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = ON,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,create_index.sql,SAME,,[]
postgresql,postgresql,ANALYZE array_index_op_test,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i = '{NULL}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i @> '{NULL}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i && '{NULL}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i <@ '{NULL}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = ON,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX intarrayidx ON array_index_op_test USING gin (i),create_index.sql,SAME,,[]
postgresql,postgresql,explain (costs off) SELECT * FROM array_index_op_test WHERE i @> '{32}' ORDER BY seqno,create_index.sql,SAME,,"[('Sort',), ('  Sort Key: seqno',), ('  ->  Bitmap Heap Scan on array_index_op_test',), (""        Recheck Cond: (i @> '{32}'::integer[])"",), ('        ->  Bitmap Index Scan on intarrayidx',), (""              Index Cond: (i @> '{32}'::integer[])"",)]"
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i @> '{32}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i && '{32}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i @> '{17}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i && '{17}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_index_op_test WHERE i @> '{32,17}' ORDER BY seqno",create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_index_op_test WHERE i && '{32,17}' ORDER BY seqno",create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_index_op_test WHERE i <@ '{38,34,32,89}' ORDER BY seqno",create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_index_op_test WHERE i = '{47,77}' ORDER BY seqno",create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i = '{}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i @> '{}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i && '{}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i <@ '{}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX textarrayidx ON array_index_op_test USING gin (t),create_index.sql,SAME,,[]
postgresql,postgresql,explain (costs off) SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno,create_index.sql,SAME,,"[('Sort',), ('  Sort Key: seqno',), ('  ->  Bitmap Heap Scan on array_index_op_test',), (""        Recheck Cond: (t @> '{AAAAAAAA72908}'::text[])"",), ('        ->  Bitmap Index Scan on textarrayidx',), (""              Index Cond: (t @> '{AAAAAAAA72908}'::text[])"",)]"
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t && '{AAAAAAAA72908}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAAAAA646}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t && '{AAAAAAAAAA646}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno",create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_index_op_test WHERE t && '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno",create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_index_op_test WHERE t <@ '{AAAAAAAA72908,AAAAAAAAAAAAAAAAAAA17075,AA88409,AAAAAAAAAAAAAAAAAA36842,AAAAAAA48038,AAAAAAAAAAAAAA10611}' ORDER BY seqno",create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM array_index_op_test WHERE t = '{AAAAAAAAAA646,A87088}' ORDER BY seqno",create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t = '{}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t @> '{}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t && '{}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t <@ '{}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,"DROP INDEX intarrayidx, textarrayidx",create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX botharrayidx ON array_index_op_test USING gin (i, t)",create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i @> '{32}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i && '{32}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAA80240}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t && '{AAAAAAA80240}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i @> '{32}' AND t && '{AAAAAAA80240}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE i && '{32}' AND t @> '{AAAAAAA80240}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM array_index_op_test WHERE t = '{}' ORDER BY seqno,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX array_gin_test_idx ON array_gin_test USING gin (a),create_index.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM array_gin_test WHERE a @> '{2}',create_index.sql,SAME,,"[(2000,)]"
postgresql,postgresql,"CREATE INDEX gin_relopts_test ON array_index_op_test USING gin (i)   WITH (FASTUPDATE=on, GIN_PENDING_LIST_LIMIT=128)",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNLOGGED TABLE unlogged_hash_table (id int4),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX unlogged_hash_index ON unlogged_hash_table USING hash (id int4_ops),create_index.sql,SAME,,[]
postgresql,postgresql,SET maintenance_work_mem = '1MB',create_index.sql,SAME,,[]
postgresql,postgresql,RESET maintenance_work_mem,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX unique_idx1 ON unique_tbl (i) NULLS DISTINCT,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX unique_idx2 ON unique_tbl (i) NULLS NOT DISTINCT,create_index.sql,SAME,,[]
postgresql,postgresql,"DROP INDEX unique_idx1, unique_idx2",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX unique_idx3 ON unique_tbl (i) NULLS DISTINCT,create_index.sql,SAME,,[]
postgresql,postgresql,DELETE FROM unique_tbl WHERE t = 'seven',create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX unique_idx4 ON unique_tbl (i) NULLS NOT DISTINCT,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef('unique_idx3'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX unique_idx3 ON public.unique_tbl USING btree (i)',)]"
postgresql,postgresql,SELECT pg_get_indexdef('unique_idx4'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX unique_idx4 ON public.unique_tbl USING btree (i) NULLS NOT DISTINCT',)]"
postgresql,postgresql,"CREATE UNIQUE INDEX func_index_index on func_index_heap (textcat(f1,f2))",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX func_index_index on func_index_heap ((f1 || f2) text_ops),create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX covering_index_index on covering_index_heap (f1,f2) INCLUDE(f3)",create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX covering_pkey on covering_index_heap (f1,f2) INCLUDE(f3)",create_index.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE covering_index_heap ADD CONSTRAINT covering_pkey PRIMARY KEY USING INDEX covering_pkey,create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX CONCURRENTLY concur_index1 ON concur_heap(f2,f1)",create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX CONCURRENTLY IF NOT EXISTS concur_index1 ON concur_heap(f2,f1)",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX CONCURRENTLY concur_index2 ON concur_heap(f1),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS concur_index2 ON concur_heap(f1),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX CONCURRENTLY concur_index4 on concur_heap(f2) WHERE f1='a',create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX CONCURRENTLY concur_index5 on concur_heap(f2) WHERE f1='x',create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX CONCURRENTLY on concur_heap((f2||f1)),create_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,COMMIT,create_index.sql,SAME,,[]
postgresql,postgresql,END,create_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX std_index on concur_heap(f2),create_index.sql,SAME,,[]
postgresql,postgresql,COMMIT,create_index.sql,SAME,,[]
postgresql,postgresql,VACUUM FULL concur_heap,create_index.sql,SAME,,[]
postgresql,postgresql,DELETE FROM concur_heap WHERE f1 = 'b',create_index.sql,SAME,,[]
postgresql,postgresql,VACUUM FULL concur_heap,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE concur_heap,create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE concur_temp (f1 int, f2 text)   ON COMMIT PRESERVE ROWS",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX CONCURRENTLY concur_temp_ind ON concur_temp(f1),create_index.sql,SAME,,[]
postgresql,postgresql,DROP INDEX CONCURRENTLY concur_temp_ind,create_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE concur_temp (f1 int, f2 text)   ON COMMIT DROP",create_index.sql,SAME,,[]
postgresql,postgresql,COMMIT,create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE concur_temp (f1 int, f2 text)   ON COMMIT DELETE ROWS",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX CONCURRENTLY concur_temp_ind ON concur_temp(f1),create_index.sql,SAME,,[]
postgresql,postgresql,DROP INDEX CONCURRENTLY concur_temp_ind,create_index.sql,SAME,,[]
postgresql,postgresql,"DROP INDEX CONCURRENTLY ""concur_index2""",create_index.sql,SAME,,[]
postgresql,postgresql,"DROP INDEX CONCURRENTLY IF EXISTS ""concur_index2""",create_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_index.sql,SAME,,[]
postgresql,postgresql,"DROP INDEX CONCURRENTLY IF EXISTS ""concur_index3""",create_index.sql,SAME,,[]
postgresql,postgresql,"DROP INDEX CONCURRENTLY ""concur_index4""",create_index.sql,SAME,,[]
postgresql,postgresql,"DROP INDEX CONCURRENTLY ""concur_index5""",create_index.sql,SAME,,[]
postgresql,postgresql,"DROP INDEX CONCURRENTLY ""concur_index1""",create_index.sql,SAME,,[]
postgresql,postgresql,"DROP INDEX CONCURRENTLY ""concur_heap_expr_idx""",create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX cwi_uniq_idx ON cwi_test(a , b)",create_index.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cwi_test ADD primary key USING INDEX cwi_uniq_idx,create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX cwi_uniq2_idx ON cwi_test(b , a)",create_index.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE cwi_test DROP CONSTRAINT cwi_uniq_idx, 	ADD CONSTRAINT cwi_replaced_pkey PRIMARY KEY 		USING INDEX cwi_uniq2_idx",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX cwi_uniq3_idx ON cwi_test(a desc),create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX cwi_uniq4_idx ON cwi_test(b collate ""POSIX"")",create_index.sql,SAME,,[]
postgresql,postgresql,create unique index on cwi_test (a),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX cwi_a_nnd ON cwi_test (a) NULLS NOT DISTINCT,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = ON,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = ON,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = ON,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_indexonlyscan = OFF,create_index.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexonlyscan,create_index.sql,SAME,,[]
postgresql,postgresql,"create temp table boolindex (b bool, i int, unique(b, i), junk float)",create_index.sql,SAME,,[]
postgresql,postgresql,"explain (costs off)   select * from boolindex order by b, i limit 10",create_index.sql,SAME,,"[('Limit',), ('  ->  Index Scan using boolindex_b_i_key on boolindex',)]"
postgresql,postgresql,explain (costs off)   select * from boolindex where b order by i limit 10,create_index.sql,SAME,,"[('Limit',), ('  ->  Index Scan using boolindex_b_i_key on boolindex',), ('        Index Cond: (b = true)',)]"
postgresql,postgresql,explain (costs off)   select * from boolindex where b = true order by i desc limit 10,create_index.sql,SAME,,"[('Limit',), ('  ->  Index Scan Backward using boolindex_b_i_key on boolindex',), ('        Index Cond: (b = true)',)]"
postgresql,postgresql,explain (costs off)   select * from boolindex where not b order by i limit 10,create_index.sql,SAME,,"[('Limit',), ('  ->  Index Scan using boolindex_b_i_key on boolindex',), ('        Index Cond: (b = false)',)]"
postgresql,postgresql,explain (costs off)   select * from boolindex where b is true order by i desc limit 10,create_index.sql,SAME,,"[('Limit',), ('  ->  Index Scan Backward using boolindex_b_i_key on boolindex',), ('        Index Cond: (b = true)',)]"
postgresql,postgresql,explain (costs off)   select * from boolindex where b is false order by i desc limit 10,create_index.sql,SAME,,"[('Limit',), ('  ->  Index Scan Backward using boolindex_b_i_key on boolindex',), ('        Index Cond: (b = false)',)]"
postgresql,postgresql,REINDEX (VERBOSE) TABLE reindex_verbose,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE concur_reindex_tab,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX (CONCURRENTLY) TABLE concur_reindex_tab,create_index.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE concur_reindex_tab ADD COLUMN c2 text,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX concur_reindex_ind1 ON concur_reindex_tab(c1),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_reindex_ind2 ON concur_reindex_tab(c2),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX concur_reindex_ind3 ON concur_reindex_tab(abs(c1)),create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX concur_reindex_ind4 ON concur_reindex_tab(c1, c1, c2)",create_index.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE concur_reindex_tab ADD PRIMARY KEY USING INDEX concur_reindex_ind1,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_tab3,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW concur_reindex_matview AS SELECT * FROM concur_reindex_tab,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_describe_object(classid, objid, objsubid) as obj,        pg_describe_object(refclassid,refobjid,refobjsubid) as objref,        deptype FROM pg_depend WHERE classid = 'pg_class'::regclass AND   objid in ('concur_reindex_tab'::regclass,             'concur_reindex_ind1'::regclass, 	    'concur_reindex_ind2'::regclass, 	    'concur_reindex_ind3'::regclass, 	    'concur_reindex_ind4'::regclass, 	    'concur_reindex_matview'::regclass)   ORDER BY 1, 2",create_index.sql,SAME,,"[('index concur_reindex_ind1', 'constraint concur_reindex_ind1 on table concur_reindex_tab', 'i'), ('index concur_reindex_ind2', 'column c2 of table concur_reindex_tab', 'a'), ('index concur_reindex_ind3', 'column c1 of table concur_reindex_tab', 'a'), ('index concur_reindex_ind3', 'table concur_reindex_tab', 'a'), ('index concur_reindex_ind4', 'column c1 of table concur_reindex_tab', 'a'), ('index concur_reindex_ind4', 'column c2 of table concur_reindex_tab', 'a'), ('materialized view concur_reindex_matview', 'schema public', 'n'), ('table concur_reindex_tab', 'schema public', 'n')]"
postgresql,postgresql,REINDEX INDEX CONCURRENTLY concur_reindex_ind1,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_tab,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_matview,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_describe_object(classid, objid, objsubid) as obj,        pg_describe_object(refclassid,refobjid,refobjsubid) as objref,        deptype FROM pg_depend WHERE classid = 'pg_class'::regclass AND   objid in ('concur_reindex_tab'::regclass,             'concur_reindex_ind1'::regclass, 	    'concur_reindex_ind2'::regclass, 	    'concur_reindex_ind3'::regclass, 	    'concur_reindex_ind4'::regclass, 	    'concur_reindex_matview'::regclass)   ORDER BY 1, 2",create_index.sql,SAME,,"[('index concur_reindex_ind1', 'constraint concur_reindex_ind1 on table concur_reindex_tab', 'i'), ('index concur_reindex_ind2', 'column c2 of table concur_reindex_tab', 'a'), ('index concur_reindex_ind3', 'column c1 of table concur_reindex_tab', 'a'), ('index concur_reindex_ind3', 'table concur_reindex_tab', 'a'), ('index concur_reindex_ind4', 'column c1 of table concur_reindex_tab', 'a'), ('index concur_reindex_ind4', 'column c2 of table concur_reindex_tab', 'a'), ('materialized view concur_reindex_matview', 'schema public', 'n'), ('table concur_reindex_tab', 'schema public', 'n')]"
postgresql,postgresql,CREATE INDEX testcomment_idx1 ON testcomment (i),create_index.sql,SAME,,[]
postgresql,postgresql,COMMENT ON INDEX testcomment_idx1 IS 'test comment',create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT obj_description('testcomment_idx1'::regclass, 'pg_class')",create_index.sql,SAME,,"[('test comment',)]"
postgresql,postgresql,REINDEX TABLE testcomment,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT obj_description('testcomment_idx1'::regclass, 'pg_class')",create_index.sql,SAME,,"[('test comment',)]"
postgresql,postgresql,REINDEX TABLE CONCURRENTLY testcomment,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT obj_description('testcomment_idx1'::regclass, 'pg_class')",create_index.sql,SAME,,"[('test comment',)]"
postgresql,postgresql,CREATE INDEX concur_clustered_i_idx ON concur_clustered(i),create_index.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE concur_clustered CLUSTER ON concur_clustered_i_idx,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_clustered,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT indexrelid::regclass, indisclustered FROM pg_index   WHERE indrelid = 'concur_clustered'::regclass",create_index.sql,SAME,,"[('concur_clustered_i_idx', True)]"
postgresql,postgresql,CREATE UNIQUE INDEX concur_replident_i_idx ON concur_replident(i),create_index.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE concur_replident REPLICA IDENTITY   USING INDEX concur_replident_i_idx,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT indexrelid::regclass, indisreplident FROM pg_index   WHERE indrelid = 'concur_replident'::regclass",create_index.sql,SAME,,"[('concur_replident_i_idx', True)]"
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_replident,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT indexrelid::regclass, indisreplident FROM pg_index   WHERE indrelid = 'concur_replident'::regclass",create_index.sql,SAME,,"[('concur_replident_i_idx', True)]"
postgresql,postgresql,"CREATE INDEX concur_appclass_ind on concur_appclass_tab   USING gist (i tsvector_ops (siglen='1000'), j tsvector_ops (siglen='500'))",create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX concur_appclass_ind_2 on concur_appclass_tab   USING gist (k tsvector_ops (siglen='300'), j tsvector_ops)",create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_appclass_tab,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_reindex_part_index ON ONLY concur_reindex_part (c1),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_reindex_part_index_0 ON ONLY concur_reindex_part_0 (c1),create_index.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX concur_reindex_part_index ATTACH PARTITION concur_reindex_part_index_0,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_reindex_part_index_10 ON ONLY concur_reindex_part_10 (c1),create_index.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX concur_reindex_part_index ATTACH PARTITION concur_reindex_part_index_10,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_reindex_part_index_0_1 ON ONLY concur_reindex_part_0_1 (c1),create_index.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX concur_reindex_part_index_0 ATTACH PARTITION concur_reindex_part_index_0_1,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_reindex_part_index_0_2 ON ONLY concur_reindex_part_0_2 (c1),create_index.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX concur_reindex_part_index_0 ATTACH PARTITION concur_reindex_part_index_0_2,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT relid, parentrelid, level FROM pg_partition_tree('concur_reindex_part_index')   ORDER BY relid, level",create_index.sql,SAME,,"[('concur_reindex_part_index', None, 0), ('concur_reindex_part_index_0', 'concur_reindex_part_index', 1), ('concur_reindex_part_index_10', 'concur_reindex_part_index', 1), ('concur_reindex_part_index_0_1', 'concur_reindex_part_index_0', 2), ('concur_reindex_part_index_0_2', 'concur_reindex_part_index_0', 2)]"
postgresql,postgresql,"SELECT relid, parentrelid, level FROM pg_partition_tree('concur_reindex_part_index')   ORDER BY relid, level",create_index.sql,SAME,,"[('concur_reindex_part_index', None, 0), ('concur_reindex_part_index_0', 'concur_reindex_part_index', 1), ('concur_reindex_part_index_10', 'concur_reindex_part_index', 1), ('concur_reindex_part_index_0_1', 'concur_reindex_part_index_0', 2), ('concur_reindex_part_index_0_2', 'concur_reindex_part_index_0', 2)]"
postgresql,postgresql,"SELECT pg_describe_object(classid, objid, objsubid) as obj,        pg_describe_object(refclassid,refobjid,refobjsubid) as objref,        deptype FROM pg_depend WHERE classid = 'pg_class'::regclass AND   objid in ('concur_reindex_part'::regclass,             'concur_reindex_part_0'::regclass,             'concur_reindex_part_0_1'::regclass,             'concur_reindex_part_0_2'::regclass,             'concur_reindex_part_index'::regclass,             'concur_reindex_part_index_0'::regclass,             'concur_reindex_part_index_0_1'::regclass,             'concur_reindex_part_index_0_2'::regclass)   ORDER BY 1, 2",create_index.sql,SAME,,"[('column c1 of table concur_reindex_part', 'table concur_reindex_part', 'i'), ('column c2 of table concur_reindex_part_0', 'table concur_reindex_part_0', 'i'), ('index concur_reindex_part_index', 'column c1 of table concur_reindex_part', 'a'), ('index concur_reindex_part_index_0', 'column c1 of table concur_reindex_part_0', 'a'), ('index concur_reindex_part_index_0', 'index concur_reindex_part_index', 'P'), ('index concur_reindex_part_index_0', 'table concur_reindex_part_0', 'S'), ('index concur_reindex_part_index_0_1', 'column c1 of table concur_reindex_part_0_1', 'a'), ('index concur_reindex_part_index_0_1', 'index concur_reindex_part_index_0', 'P'), ('index concur_reindex_part_index_0_1', 'table concur_reindex_part_0_1', 'S'), ('index concur_reindex_part_index_0_2', 'column c1 of table concur_reindex_part_0_2', 'a'), ('index concur_reindex_part_index_0_2', 'index concur_reindex_part_index_0', 'P'), ('index concur_reindex_part_index_0_2', 'table concur_reindex_part_0_2', 'S'), ('table concur_reindex_part', 'schema public', 'n'), ('table concur_reindex_part_0', 'schema public', 'n'), ('table concur_reindex_part_0', 'table concur_reindex_part', 'a'), ('table concur_reindex_part_0_1', 'schema public', 'n'), ('table concur_reindex_part_0_1', 'table concur_reindex_part_0', 'a'), ('table concur_reindex_part_0_2', 'schema public', 'n'), ('table concur_reindex_part_0_2', 'table concur_reindex_part_0', 'a')]"
postgresql,postgresql,REINDEX INDEX CONCURRENTLY concur_reindex_part_index_0_1,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX CONCURRENTLY concur_reindex_part_index_0_2,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT relid, parentrelid, level FROM pg_partition_tree('concur_reindex_part_index')   ORDER BY relid, level",create_index.sql,SAME,,"[('concur_reindex_part_index', None, 0), ('concur_reindex_part_index_0', 'concur_reindex_part_index', 1), ('concur_reindex_part_index_10', 'concur_reindex_part_index', 1), ('concur_reindex_part_index_0_1', 'concur_reindex_part_index_0', 2), ('concur_reindex_part_index_0_2', 'concur_reindex_part_index_0', 2)]"
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_part_0_1,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_part_0_2,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_describe_object(classid, objid, objsubid) as obj,        pg_describe_object(refclassid,refobjid,refobjsubid) as objref,        deptype FROM pg_depend WHERE classid = 'pg_class'::regclass AND   objid in ('concur_reindex_part'::regclass,             'concur_reindex_part_0'::regclass,             'concur_reindex_part_0_1'::regclass,             'concur_reindex_part_0_2'::regclass,             'concur_reindex_part_index'::regclass,             'concur_reindex_part_index_0'::regclass,             'concur_reindex_part_index_0_1'::regclass,             'concur_reindex_part_index_0_2'::regclass)   ORDER BY 1, 2",create_index.sql,SAME,,"[('column c1 of table concur_reindex_part', 'table concur_reindex_part', 'i'), ('column c2 of table concur_reindex_part_0', 'table concur_reindex_part_0', 'i'), ('index concur_reindex_part_index', 'column c1 of table concur_reindex_part', 'a'), ('index concur_reindex_part_index_0', 'column c1 of table concur_reindex_part_0', 'a'), ('index concur_reindex_part_index_0', 'index concur_reindex_part_index', 'P'), ('index concur_reindex_part_index_0', 'table concur_reindex_part_0', 'S'), ('index concur_reindex_part_index_0_1', 'column c1 of table concur_reindex_part_0_1', 'a'), ('index concur_reindex_part_index_0_1', 'index concur_reindex_part_index_0', 'P'), ('index concur_reindex_part_index_0_1', 'table concur_reindex_part_0_1', 'S'), ('index concur_reindex_part_index_0_2', 'column c1 of table concur_reindex_part_0_2', 'a'), ('index concur_reindex_part_index_0_2', 'index concur_reindex_part_index_0', 'P'), ('index concur_reindex_part_index_0_2', 'table concur_reindex_part_0_2', 'S'), ('table concur_reindex_part', 'schema public', 'n'), ('table concur_reindex_part_0', 'schema public', 'n'), ('table concur_reindex_part_0', 'table concur_reindex_part', 'a'), ('table concur_reindex_part_0_1', 'schema public', 'n'), ('table concur_reindex_part_0_1', 'table concur_reindex_part_0', 'a'), ('table concur_reindex_part_0_2', 'schema public', 'n'), ('table concur_reindex_part_0_2', 'table concur_reindex_part_0', 'a')]"
postgresql,postgresql,"SELECT relid, parentrelid, level FROM pg_partition_tree('concur_reindex_part_index')   ORDER BY relid, level",create_index.sql,SAME,,"[('concur_reindex_part_index', None, 0), ('concur_reindex_part_index_0', 'concur_reindex_part_index', 1), ('concur_reindex_part_index_10', 'concur_reindex_part_index', 1), ('concur_reindex_part_index_0_1', 'concur_reindex_part_index_0', 2), ('concur_reindex_part_index_0_2', 'concur_reindex_part_index_0', 2)]"
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX concur_reindex_part_index,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX CONCURRENTLY concur_reindex_part_index,create_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE concur_reindex_part,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_part,create_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,COMMIT,create_index.sql,SAME,,[]
postgresql,postgresql,DROP MATERIALIZED VIEW concur_reindex_matview,create_index.sql,SAME,,[]
postgresql,postgresql,DELETE FROM concur_reindex_tab4 WHERE c1 = 1,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_tab4,create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX concur_exprs_index_expr   ON concur_exprs_tab ((c1::text COLLATE ""C""))",create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX concur_exprs_index_pred ON concur_exprs_tab (c1)   WHERE (c1::text > 500000000::text COLLATE ""C"")",create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX concur_exprs_index_pred_2   ON concur_exprs_tab ((1 / c1))   WHERE ('-H') >= (c2::TEXT) COLLATE ""C""",create_index.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX concur_exprs_index_expr ALTER COLUMN 1 SET STATISTICS 100,create_index.sql,SAME,,[]
postgresql,postgresql,ANALYZE concur_exprs_tab,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef('concur_exprs_index_expr'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX concur_exprs_index_expr ON public.concur_exprs_tab USING btree (((c1)::text) COLLATE ""C"")',)]"
postgresql,postgresql,SELECT pg_get_indexdef('concur_exprs_index_pred'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX concur_exprs_index_pred ON public.concur_exprs_tab USING btree (c1) WHERE ((c1)::text > ((500000000)::text COLLATE ""C""))',)]"
postgresql,postgresql,SELECT pg_get_indexdef('concur_exprs_index_pred_2'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX concur_exprs_index_pred_2 ON public.concur_exprs_tab USING btree (((1 / c1))) WHERE (\'-H\'::text >= ((c2)::text COLLATE ""C""))',)]"
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_exprs_tab,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef('concur_exprs_index_expr'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX concur_exprs_index_expr ON public.concur_exprs_tab USING btree (((c1)::text) COLLATE ""C"")',)]"
postgresql,postgresql,SELECT pg_get_indexdef('concur_exprs_index_pred'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX concur_exprs_index_pred ON public.concur_exprs_tab USING btree (c1) WHERE ((c1)::text > ((500000000)::text COLLATE ""C""))',)]"
postgresql,postgresql,SELECT pg_get_indexdef('concur_exprs_index_pred_2'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX concur_exprs_index_pred_2 ON public.concur_exprs_tab USING btree (((1 / c1))) WHERE (\'-H\'::text >= ((c2)::text COLLATE ""C""))',)]"
postgresql,postgresql,ALTER TABLE concur_exprs_tab ALTER c2 TYPE TEXT,create_index.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef('concur_exprs_index_expr'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX concur_exprs_index_expr ON public.concur_exprs_tab USING btree (((c1)::text) COLLATE ""C"")',)]"
postgresql,postgresql,SELECT pg_get_indexdef('concur_exprs_index_pred'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX concur_exprs_index_pred ON public.concur_exprs_tab USING btree (c1) WHERE ((c1)::text > ((500000000)::text COLLATE ""C""))',)]"
postgresql,postgresql,SELECT pg_get_indexdef('concur_exprs_index_pred_2'::regclass),create_index.sql,SAME,,"[('CREATE UNIQUE INDEX concur_exprs_index_pred_2 ON public.concur_exprs_tab USING btree (((1 / c1))) WHERE (\'-H\'::text >= (c2 COLLATE ""C""))',)]"
postgresql,postgresql,"SELECT attrelid::regclass, attnum, attstattarget   FROM pg_attribute WHERE attrelid IN (     'concur_exprs_index_expr'::regclass,     'concur_exprs_index_pred'::regclass,     'concur_exprs_index_pred_2'::regclass)   ORDER BY attrelid::regclass::text, attnum",create_index.sql,SAME,,"[('concur_exprs_index_expr', 1, 100), ('concur_exprs_index_pred', 1, -1), ('concur_exprs_index_pred_2', 1, -1)]"
postgresql,postgresql,"CREATE TEMP TABLE concur_temp_tab_1 (c1 int, c2 text)   ON COMMIT PRESERVE ROWS",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_temp_ind_1 ON concur_temp_tab_1(c2),create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_temp_tab_1,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX CONCURRENTLY concur_temp_ind_1,create_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,COMMIT,create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE concur_temp_tab_2 (c1 int, c2 text)   ON COMMIT DELETE ROWS",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_temp_ind_2 ON concur_temp_tab_2(c2),create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_temp_tab_2,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX CONCURRENTLY concur_temp_ind_2,create_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE concur_temp_tab_3 (c1 int, c2 text)   ON COMMIT PRESERVE ROWS",create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_temp_ind_3 ON concur_temp_tab_3(c2),create_index.sql,SAME,,[]
postgresql,postgresql,COMMIT,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT  b.relname,         b.relkind,         CASE WHEN a.relfilenode = b.relfilenode THEN 'relfilenode is unchanged'         ELSE 'relfilenode has changed' END   FROM reindex_temp_before b JOIN pg_class a ON b.oid = a.oid   ORDER BY 1",create_index.sql,SAME,,"[('concur_temp_ind_1', 'i', 'relfilenode is unchanged'), ('concur_temp_ind_2', 'i', 'relfilenode is unchanged')]"
postgresql,postgresql,CREATE SCHEMA schema_to_reindex,create_index.sql,SAME,,[]
postgresql,postgresql,SET search_path = 'schema_to_reindex',create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON table2(col2),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW matview AS SELECT col1 FROM table2,create_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON matview(col1),create_index.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW view AS SELECT col2 FROM table2,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA schema_to_reindex,create_index.sql,SAME,,[]
postgresql,postgresql,"SELECT  b.relname,         b.relkind,         CASE WHEN a.relfilenode = b.relfilenode THEN 'relfilenode is unchanged'         ELSE 'relfilenode has changed' END   FROM reindex_before b JOIN pg_class a ON b.oid = a.oid   ORDER BY 1",create_index.sql,SAME,,"[('matview', 'm', 'relfilenode is unchanged'), ('matview_col1_idx', 'i', 'relfilenode has changed'), ('pg_toast_TABLE', 't', 'relfilenode is unchanged'), ('pg_toast_TABLE_index', 'i', 'relfilenode has changed'), ('table1', 'r', 'relfilenode is unchanged'), ('table1_col1_seq', 'S', 'relfilenode is unchanged'), ('table1_pkey', 'i', 'relfilenode has changed'), ('table2', 'r', 'relfilenode is unchanged'), ('table2_col1_seq', 'S', 'relfilenode is unchanged'), ('table2_col2_idx', 'i', 'relfilenode has changed'), ('table2_pkey', 'i', 'relfilenode has changed'), ('view', 'v', 'relfilenode is unchanged')]"
postgresql,postgresql,REINDEX SCHEMA schema_to_reindex,create_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_index.sql,SAME,,[]
postgresql,postgresql,END,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA CONCURRENTLY schema_to_reindex,create_index.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA schema_to_reindex,create_index.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,create_index.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,create_index.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA schema_to_reindex CASCADE,create_index.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = ON,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = OFF,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = OFF,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = ON,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,SET extra_float_digits = 0,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,RESET extra_float_digits,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = OFF,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = OFF,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = ON,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,create_index_spgist.sql,SAME,,[]
postgresql,postgresql,ANALYZE a_star,create_misc.sql,SAME,,[]
postgresql,postgresql,ANALYZE b_star,create_misc.sql,SAME,,[]
postgresql,postgresql,ANALYZE c_star,create_misc.sql,SAME,,[]
postgresql,postgresql,ANALYZE d_star,create_misc.sql,SAME,,[]
postgresql,postgresql,ANALYZE e_star,create_misc.sql,SAME,,[]
postgresql,postgresql,ANALYZE f_star,create_misc.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM a_star*,create_misc.sql,SAME,,"[('a', 1), ('a', 2), ('a', None), ('b', 3), ('b', 4), ('b', None), ('b', None), ('c', 5), ('c', 6), ('c', None), ('c', None), ('d', 7), ('d', 8), ('d', 9), ('d', 10), ('d', None), ('d', 11), ('d', 12), ('d', 13), ('d', None), ('d', None), ('d', None), ('d', 14), ('d', None), ('d', None), ('d', None), ('d', None), ('e', 15), ('e', 16), ('e', 17), ('e', None), ('e', 18), ('e', None), ('e', None), ('f', 19), ('f', 20), ('f', 21), ('f', 22), ('f', None), ('f', 24), ('f', 25), ('f', 26), ('f', None), ('f', None), ('f', None), ('f', 27), ('f', None), ('f', None), ('f', None), ('f', None)]"
postgresql,postgresql,SELECT *    FROM b_star* x    WHERE x.b = text 'bumble' or x.a < 3,create_misc.sql,SAME,,"[('b', None, 'bumble')]"
postgresql,postgresql,"SELECT class, a    FROM c_star* x    WHERE x.c ~ text 'hi'",create_misc.sql,SAME,,"[('c', 5), ('c', None), ('d', 7), ('d', 8), ('d', 10), ('d', None), ('d', 12), ('d', None), ('d', None), ('d', None), ('e', 15), ('e', 16), ('e', None), ('e', None), ('f', 19), ('f', 20), ('f', 21), ('f', None), ('f', 24), ('f', None), ('f', None), ('f', None)]"
postgresql,postgresql,"SELECT class, b, c    FROM d_star* x    WHERE x.a < 100",create_misc.sql,SAME,,"[('d', 'grumble', 'hi sunita'), ('d', 'stumble', 'hi koko'), ('d', 'rumble', None), ('d', None, 'hi kristin'), ('d', 'fumble', None), ('d', None, 'hi avi'), ('d', None, None), ('d', None, None)]"
postgresql,postgresql,"SELECT class, c FROM e_star* x WHERE x.c NOTNULL",create_misc.sql,SAME,,"[('e', 'hi carol'), ('e', 'hi bob'), ('e', 'hi michelle'), ('e', 'hi elisa'), ('f', 'hi claire'), ('f', 'hi mike'), ('f', 'hi marcel'), ('f', 'hi keith'), ('f', 'hi marc'), ('f', 'hi allison'), ('f', 'hi jeff'), ('f', 'hi carl')]"
postgresql,postgresql,SELECT * FROM f_star* x WHERE x.c ISNULL,create_misc.sql,SAME,,"[('f', 22, None, -7, '((111,555),(222,666),(333,777),(444,888))'), ('f', 25, None, -9, None), ('f', 26, None, None, '((11111,33333),(22222,44444))'), ('f', None, None, -11, '((1111111,3333333),(2222222,4444444))'), ('f', 27, None, None, None), ('f', None, None, -12, None), ('f', None, None, None, '((11111111,33333333),(22222222,44444444))'), ('f', None, None, None, None)]"
postgresql,postgresql,SELECT sum(a) FROM a_star*,create_misc.sql,SAME,,"[(355,)]"
postgresql,postgresql,"SELECT class, sum(a) FROM a_star* GROUP BY class ORDER BY class",create_misc.sql,SAME,,"[('a', 3), ('b', 7), ('c', 11), ('d', 84), ('e', 66), ('f', 184)]"
postgresql,postgresql,ALTER TABLE f_star RENAME COLUMN f TO ff,create_misc.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE e_star* RENAME COLUMN e TO ee,create_misc.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE d_star* RENAME COLUMN d TO dd,create_misc.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE c_star* RENAME COLUMN c TO cc,create_misc.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE b_star* RENAME COLUMN b TO bb,create_misc.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE a_star* RENAME COLUMN a TO aa,create_misc.sql,SAME,,[]
postgresql,postgresql,"SELECT class, aa    FROM a_star* x    WHERE aa ISNULL",create_misc.sql,SAME,,"[('a', None), ('b', None), ('b', None), ('c', None), ('c', None), ('d', None), ('d', None), ('d', None), ('d', None), ('d', None), ('d', None), ('d', None), ('d', None), ('e', None), ('e', None), ('e', None), ('f', None), ('f', None), ('f', None), ('f', None), ('f', None), ('f', None), ('f', None), ('f', None)]"
postgresql,postgresql,ALTER TABLE a_star RENAME COLUMN aa TO foo,create_misc.sql,SAME,,[]
postgresql,postgresql,"SELECT class, foo    FROM a_star* x    WHERE x.foo >= 2",create_misc.sql,SAME,,"[('a', 2), ('b', 3), ('b', 4), ('c', 5), ('c', 6), ('d', 7), ('d', 8), ('d', 9), ('d', 10), ('d', 11), ('d', 12), ('d', 13), ('d', 14), ('e', 15), ('e', 16), ('e', 17), ('e', 18), ('f', 19), ('f', 20), ('f', 21), ('f', 22), ('f', 24), ('f', 25), ('f', 26), ('f', 27)]"
postgresql,postgresql,ALTER TABLE a_star RENAME COLUMN foo TO aa,create_misc.sql,SAME,,[]
postgresql,postgresql,SELECT *    from a_star*    WHERE aa < 1000,create_misc.sql,SAME,,"[('a', 1), ('a', 2), ('b', 3), ('b', 4), ('c', 5), ('c', 6), ('d', 7), ('d', 8), ('d', 9), ('d', 10), ('d', 11), ('d', 12), ('d', 13), ('d', 14), ('e', 15), ('e', 16), ('e', 17), ('e', 18), ('f', 19), ('f', 20), ('f', 21), ('f', 22), ('f', 24), ('f', 25), ('f', 26), ('f', 27)]"
postgresql,postgresql,ALTER TABLE f_star ADD COLUMN f int4,create_misc.sql,SAME,,[]
postgresql,postgresql,UPDATE f_star SET f = 10,create_misc.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE e_star* ADD COLUMN e int4,create_misc.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM e_star*,create_misc.sql,SAME,,"[('e', 15, 'hi carol', -1, None), ('e', 16, 'hi bob', None, None), ('e', 17, None, -2, None), ('e', None, 'hi michelle', -3, None), ('e', 18, None, None, None), ('e', None, 'hi elisa', None, None), ('e', None, None, -4, None), ('f', 19, 'hi claire', -5, None), ('f', 20, 'hi mike', -6, None), ('f', 21, 'hi marcel', None, None), ('f', 22, None, -7, None), ('f', None, 'hi keith', -8, None), ('f', 24, 'hi marc', None, None), ('f', 25, None, -9, None), ('f', 26, None, None, None), ('f', None, 'hi allison', -10, None), ('f', None, 'hi jeff', None, None), ('f', None, None, -11, None), ('f', 27, None, None, None), ('f', None, 'hi carl', None, None), ('f', None, None, -12, None), ('f', None, None, None, None), ('f', None, None, None, None)]"
postgresql,postgresql,ALTER TABLE a_star* ADD COLUMN a text,create_misc.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, reltoastrelid <> 0 AS has_toast_table    FROM pg_class    WHERE oid::regclass IN ('a_star', 'c_star')    ORDER BY 1",create_misc.sql,SAME,,"[('a_star', True), ('c_star', True)]"
postgresql,postgresql,"SELECT class, aa, a FROM a_star*",create_misc.sql,SAME,,"[('a', 1, None), ('a', 2, None), ('a', None, None), ('b', 3, None), ('b', 4, None), ('b', None, None), ('b', None, None), ('c', 5, None), ('c', 6, None), ('c', None, None), ('c', None, None), ('d', 7, None), ('d', 8, None), ('d', 9, None), ('d', 10, None), ('d', None, None), ('d', 11, None), ('d', 12, None), ('d', 13, None), ('d', None, None), ('d', None, None), ('d', None, None), ('d', 14, None), ('d', None, None), ('d', None, None), ('d', None, None), ('d', None, None), ('e', 15, None), ('e', 16, None), ('e', 17, None), ('e', None, None), ('e', 18, None), ('e', None, None), ('e', None, None), ('f', 19, None), ('f', 20, None), ('f', 21, None), ('f', 22, None), ('f', None, None), ('f', 24, None), ('f', 25, None), ('f', 26, None), ('f', None, None), ('f', None, None), ('f', None, None), ('f', 27, None), ('f', None, None), ('f', None, None), ('f', None, None), ('f', None, None)]"
postgresql,postgresql,"CREATE OPERATOR ## (    leftarg = path,    rightarg = path,    function = path_inter,    commutator = ## )",create_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR @#@ (    rightarg = int8,		    procedure = factorial )",create_operator.sql,SAME,,[]
postgresql,postgresql,SELECT @#@ 24,create_operator.sql,SAME,,"[(Decimal('620448401733239439360000'),)]"
postgresql,postgresql,"CREATE OPERATOR !=- (    rightarg = int8,    procedure = factorial )",create_operator.sql,SAME,,[]
postgresql,postgresql,SELECT !=- 10,create_operator.sql,SAME,,"[(Decimal('3628800'),)]"
postgresql,postgresql,"SELECT 2 !=/**/ 1, 2 !=/**/ 2",create_operator.sql,SAME,,"[(True, False)]"
postgresql,postgresql,SELECT 2 !=   1,create_operator.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT true<>-1 BETWEEN 1 AND 1,create_operator.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT false<>/**/1 BETWEEN 1 AND 1,create_operator.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT false<=-1 BETWEEN 1 AND 1,create_operator.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT false>=-1 BETWEEN 1 AND 1,create_operator.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 2<=/**/3, 3>=/**/2, 2<>/**/3",create_operator.sql,SAME,,"[(True, True, True)]"
postgresql,postgresql,"SELECT 3<=/**/2, 2>=/**/3, 2<>/**/2",create_operator.sql,SAME,,"[(False, False, False)]"
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OR REPLACE FUNCTION fn_op2(boolean, boolean) RETURNS boolean AS $$     SELECT NULL::BOOLEAN; $$ LANGUAGE sql IMMUTABLE",create_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR === (     LEFTARG = boolean,     RIGHTARG = boolean,     PROCEDURE = fn_op2,     COMMUTATOR = ===,     NEGATOR = !==,     RESTRICT = contsel,     JOIN = contjoinsel,     SORT1, SORT2, LTCMP, GTCMP, HASHES, MERGES )",create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR #@%# (    rightarg = int8,    procedure = factorial,    invalid_att = int8 )",create_operator.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,create_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR === (     leftarg = integer,     rightarg = integer,     procedure = int4eq,     commutator = ===!!! )",create_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR ===!!! (     leftarg = integer,     rightarg = integer,     procedure = int4ne,     negator = ===!!! )",create_operator.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_operator.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION cp_testfunc1(a int) RETURNS int LANGUAGE SQL AS $$ SELECT a $$,create_procedure.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM cp_test ORDER BY b COLLATE ""C""",create_procedure.sql,SAME,,[]
postgresql,postgresql,END,create_procedure.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM cp_test ORDER BY b COLLATE ""C""",create_procedure.sql,SAME,,[]
postgresql,postgresql,END,create_procedure.sql,SAME,,[]
postgresql,postgresql,TRUNCATE cp_test,create_procedure.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM cp_test,create_procedure.sql,SAME,,[]
postgresql,postgresql,TRUNCATE cp_test,create_procedure.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM cp_test,create_procedure.sql,SAME,,[]
postgresql,postgresql,CREATE PROCEDURE ptest8(x text) BEGIN ATOMIC END,create_procedure.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_functiondef('ptest8'::regproc),create_procedure.sql,SAME,,"[('CREATE OR REPLACE PROCEDURE public.ptest8(IN x text)\n LANGUAGE sql\nBEGIN ATOMIC\nEND\n',)]"
postgresql,postgresql,CALL ptest8(''),create_procedure.sql,SAME,,[]
postgresql,postgresql,SELECT 1,create_procedure.sql,SAME,,"[(1,)]"
postgresql,postgresql,"CREATE PROCEDURE ptest10(OUT a int, IN b int, IN c int) LANGUAGE SQL AS $$ SELECT b - c $$",create_procedure.sql,SAME,,[]
postgresql,postgresql,"CALL ptest10(null, 7, 4)",create_procedure.sql,SAME,,"[(3,)]"
postgresql,postgresql,"CALL ptest10(a => null, b => 8, c => 2)",create_procedure.sql,SAME,,"[(6,)]"
postgresql,postgresql,"CALL ptest10(null, 7, c => 2)",create_procedure.sql,SAME,,"[(5,)]"
postgresql,postgresql,"CALL ptest10(null, c => 4, b => 11)",create_procedure.sql,SAME,,"[(7,)]"
postgresql,postgresql,"CALL ptest10(b => 8, c => 2, a => 0)",create_procedure.sql,SAME,,"[(6,)]"
postgresql,postgresql,"CREATE PROCEDURE ptest11(a OUT int, VARIADIC b int[]) LANGUAGE SQL   AS $$ SELECT b[1] + b[2] $$",create_procedure.sql,SAME,,[]
postgresql,postgresql,"CALL ptest11(null, 11, 12, 13)",create_procedure.sql,SAME,,"[(23,)]"
postgresql,postgresql,"CREATE PROCEDURE ptest10(IN a int, IN b int, IN c int) LANGUAGE SQL AS $$ SELECT a + b - c $$",create_procedure.sql,SAME,,[]
postgresql,postgresql,begin,create_procedure.sql,SAME,,[]
postgresql,postgresql,"drop procedure ptest10(out int, int, int)",create_procedure.sql,SAME,,[]
postgresql,postgresql,"drop procedure ptest10(int, int, int)",create_procedure.sql,SAME,,[]
postgresql,postgresql,rollback,create_procedure.sql,SAME,,[]
postgresql,postgresql,begin,create_procedure.sql,SAME,,[]
postgresql,postgresql,"drop procedure ptest10(in int, int, int)",create_procedure.sql,SAME,,[]
postgresql,postgresql,"drop procedure ptest10(int, int, int)",create_procedure.sql,SAME,,[]
postgresql,postgresql,rollback,create_procedure.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,create_procedure.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,create_procedure.sql,SAME,,[]
postgresql,postgresql,ALTER ROUTINE cp_testfunc1(int) RENAME TO cp_testfunc1a,create_procedure.sql,SAME,,[]
postgresql,postgresql,ALTER ROUTINE cp_testfunc1a RENAME TO cp_testfunc1,create_procedure.sql,SAME,,[]
postgresql,postgresql,DROP ROUTINE cp_testfunc1(int),create_procedure.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX tenant_idx ON tenant_table(i),create_role.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW tenant_view AS SELECT * FROM pg_catalog.pg_class,create_role.sql,SAME,,[]
postgresql,postgresql,REVOKE ALL PRIVILEGES ON tenant_table FROM PUBLIC,create_role.sql,SAME,,[]
postgresql,postgresql,DROP INDEX tenant_idx,create_role.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tenant_table ADD COLUMN t text,create_role.sql,SAME,,[]
postgresql,postgresql,DROP VIEW tenant_view,create_role.sql,SAME,,[]
postgresql,postgresql,"SET createrole_self_grant = 'set, inherit'",create_role.sql,SAME,,[]
postgresql,postgresql,REVOKE ALL PRIVILEGES ON tenant2_table FROM PUBLIC,create_role.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,create_role.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,create_schema.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA regress_schema_1 CASCADE,create_schema.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,create_schema.sql,SAME,,[]
postgresql,postgresql,CREATE UNLOGGED TABLE unlogged1 (a int primary key),create_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMPORARY TABLE unlogged2 (a int primary key),create_table.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relkind, relpersistence FROM pg_class WHERE relname ~ '^unlogged\d' ORDER BY relname",create_table.sql,SAME,,"[('unlogged1', 'r', 'u'), ('unlogged1_pkey', 'i', 'u'), ('unlogged2', 'r', 't'), ('unlogged2_pkey', 'i', 't')]"
postgresql,postgresql,REINDEX INDEX unlogged1_pkey,create_table.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX unlogged2_pkey,create_table.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relkind, relpersistence FROM pg_class WHERE relname ~ '^unlogged\d' ORDER BY relname",create_table.sql,SAME,,"[('unlogged1', 'r', 'u'), ('unlogged1_pkey', 'i', 'u'), ('unlogged2', 'r', 't'), ('unlogged2_pkey', 'i', 't')]"
postgresql,postgresql,CREATE UNLOGGED TABLE public.unlogged2 (a int primary key),create_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE explicitly_temp (a int primary key),create_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE pg_temp.doubly_temp (a int primary key),create_table.sql,SAME,,[]
postgresql,postgresql,PREPARE select1 AS SELECT 1 as a,create_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM as_select1,create_table.sql,SAME,,"[(1,)]"
postgresql,postgresql,DEALLOCATE select1,create_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE withoutoid() WITHOUT OIDS,create_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE withoutoid() WITH (oids = false),create_table.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_table.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT q,create_table.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO q,create_table.sql,SAME,,[]
postgresql,postgresql,COMMIT,create_table.sql,SAME,,[]
postgresql,postgresql,BEGIN,create_table.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE remember_node_subid ALTER c TYPE bigint,create_table.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT q,create_table.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO q,create_table.sql,SAME,,[]
postgresql,postgresql,COMMIT,create_table.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION retset (a int) RETURNS SETOF int AS $$ SELECT 1; $$ LANGUAGE SQL IMMUTABLE,create_table.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION retset(int),create_table.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION const_func () RETURNS int AS $$ SELECT 1; $$ LANGUAGE SQL IMMUTABLE,create_table.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION const_func(),create_table.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION immut_func (a int) RETURNS int AS $$ SELECT a + random()::int; $$ LANGUAGE SQL,create_table.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION immut_func(int),create_table.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION plusone(a int) RETURNS INT AS $$ SELECT a+1; $$ LANGUAGE SQL,create_table.sql,SAME,,[]
postgresql,postgresql,SELECT relkind FROM pg_class WHERE relname = 'partitioned',create_table.sql,SAME,,"[('p',)]"
postgresql,postgresql,"explain (costs off) select * from partitioned where row(a,b)::partitioned = '(1,2)'::partitioned",create_table.sql,SAME,,"[('Seq Scan on partitioned1 partitioned',), (""  Filter: (ROW(a, b)::partitioned = '(1,2)'::partitioned)"",)]"
postgresql,postgresql,"explain (costs off) select * from partitioned where partitioned = '(1,2)'::partitioned",create_table.sql,SAME,,"[('Seq Scan on partitioned1 partitioned',), (""  Filter: ((partitioned.*)::partitioned = '(1,2)'::partitioned)"",)]"
postgresql,postgresql,create domain intdom1 as int,create_table.sql,SAME,,[]
postgresql,postgresql,drop domain intdom1 cascade,create_table.sql,SAME,,[]
postgresql,postgresql,create domain intdom1 as int,create_table.sql,SAME,,[]
postgresql,postgresql,drop domain intdom1 cascade,create_table.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temp_parted ( 	a int ) PARTITION BY LIST (a),create_table.sql,SAME,,[]
postgresql,postgresql,"SELECT attname, attislocal, attinhcount FROM pg_attribute   WHERE attrelid = 'part_a'::regclass and attnum > 0   ORDER BY attnum",create_table.sql,SAME,,"[('a', False, 1), ('b', False, 1)]"
postgresql,postgresql,"SELECT conname, conislocal, coninhcount FROM pg_constraint WHERE conrelid = 'part_b'::regclass ORDER BY coninhcount DESC, conname",create_table.sql,SAME,,"[('check_a', False, 1), ('check_b', True, 0)]"
postgresql,postgresql,ALTER TABLE parted ADD CONSTRAINT check_b CHECK (b >= 0),create_table.sql,SAME,,[]
postgresql,postgresql,"SELECT conname, conislocal, coninhcount FROM pg_constraint WHERE conrelid = 'part_b'::regclass ORDER BY coninhcount DESC, conname",create_table.sql,SAME,,"[('check_a', False, 1), ('check_b', False, 1)]"
postgresql,postgresql,"ALTER TABLE parted DROP CONSTRAINT check_a, DROP CONSTRAINT check_b",create_table.sql,SAME,,[]
postgresql,postgresql,"SELECT conname, conislocal, coninhcount FROM pg_constraint WHERE conrelid = 'part_b'::regclass ORDER BY coninhcount DESC, conname",create_table.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION my_int4_sort(int4,int4) RETURNS int LANGUAGE sql   AS $$ SELECT CASE WHEN $1 = $2 THEN 0 WHEN $1 > $2 THEN 1 ELSE -1 END; $$",create_table.sql,SAME,,[]
postgresql,postgresql,"DROP FUNCTION my_int4_sort(int4,int4)",create_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON TABLE parted_col_comment IS 'Am partitioned table',create_table.sql,SAME,,[]
postgresql,postgresql,COMMENT ON COLUMN parted_col_comment.a IS 'Partition key',create_table.sql,SAME,,[]
postgresql,postgresql,SELECT obj_description('parted_col_comment'::regclass),create_table.sql,SAME,,"[('Am partitioned table',)]"
postgresql,postgresql,create temporary table temp_parted (a int) partition by list (a),create_table.sql,SAME,,[]
postgresql,postgresql,create temp table temp_part partition of temp_parted default,create_table.sql,SAME,,[]
postgresql,postgresql,create trigger trig_part_create before insert on tab_part_create   for each statement execute procedure func_part_create(),create_table.sql,SAME,,[]
postgresql,postgresql,drop function func_part_create(),create_table.sql,SAME,,[]
postgresql,postgresql,select tableoid::regclass from volatile_partbound_test,create_table.sql,SAME,,"[('volatile_partbound_test2',)]"
postgresql,postgresql,alter table defcheck_def drop c,create_table.sql,SAME,,[]
postgresql,postgresql,alter table defcheck attach partition defcheck_def default,create_table.sql,SAME,,[]
postgresql,postgresql,alter table defcheck_def add check (b <= 0 and b is not null),create_table.sql,SAME,,[]
postgresql,postgresql,alter table part_column_drop drop column useless_1,create_table.sql,SAME,,[]
postgresql,postgresql,alter table part_column_drop drop column useless_2,create_table.sql,SAME,,[]
postgresql,postgresql,alter table part_column_drop drop column useless_3,create_table.sql,SAME,,[]
postgresql,postgresql,create index part_column_drop_b_pred on part_column_drop(b) where b = 1,create_table.sql,SAME,,[]
postgresql,postgresql,create index part_column_drop_b_expr on part_column_drop((b = 1)),create_table.sql,SAME,,[]
postgresql,postgresql,create index part_column_drop_d_pred on part_column_drop(d) where d = 2,create_table.sql,SAME,,[]
postgresql,postgresql,create index part_column_drop_d_expr on part_column_drop((d = 2)),create_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM inhe,create_table_like.sql,SAME,,"[('ee-col1', 'ee-col2', None, 'ee-col4')]"
postgresql,postgresql,"/* Columns aa, bb, xx value NULL, ee */ SELECT * FROM inhx",create_table_like.sql,SAME,,[]
postgresql,postgresql,/* Empty set since LIKE inherits structure only */ SELECT * FROM ctlb,create_table_like.sql,SAME,,"[('ee-col1', 'ee-col2')]"
postgresql,postgresql,/* Has ee entry */ SELECT * FROM ctla,create_table_like.sql,SAME,,"[('ee-col1',)]"
postgresql,postgresql,SELECT * FROM inhf,create_table_like.sql,SAME,,"[('text',)]"
postgresql,postgresql,/* Single entry with value 'text' */  ALTER TABLE inhx add constraint foo CHECK (xx = 'text'),create_table_like.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE inhx ADD PRIMARY KEY (xx),create_table_like.sql,SAME,,[]
postgresql,postgresql,/* fails due to constraint */ SELECT * FROM inhg,create_table_like.sql,SAME,,"[('x', 'text', 'y'), ('x', 'text', 'y')]"
postgresql,postgresql,SELECT * FROM test_like_id_1,create_table_like.sql,SAME,,"[(1, 'b1')]"
postgresql,postgresql,SELECT * FROM test_like_id_2,create_table_like.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM test_like_id_3,create_table_like.sql,SAME,,"[(1, 'b3')]"
postgresql,postgresql,SELECT * FROM test_like_gen_1,create_table_like.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,SELECT * FROM test_like_gen_2,create_table_like.sql,SAME,,"[(1, None)]"
postgresql,postgresql,SELECT * FROM test_like_gen_3,create_table_like.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,"SELECT a, b, c FROM test_like_4a",create_table_like.sql,SAME,,"[(11, None, None)]"
postgresql,postgresql,"SELECT a, b, c FROM test_like_4b",create_table_like.sql,SAME,,"[(11, 42, None)]"
postgresql,postgresql,"SELECT a, b, c FROM test_like_4c",create_table_like.sql,SAME,,"[(11, None, 22)]"
postgresql,postgresql,"SELECT a, b, c FROM test_like_4d",create_table_like.sql,SAME,,"[(11, 42, 22)]"
postgresql,postgresql,CREATE UNIQUE INDEX inhz_xx_idx on inhz (xx) WHERE xx <> 'test',create_table_like.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ctlt1_b_key ON ctlt1 (b),create_table_like.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ctlt1_fnidx ON ctlt1 ((a || b)),create_table_like.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS ctlt1_a_b_stat ON a,b FROM ctlt1",create_table_like.sql,SAME,,[]
postgresql,postgresql,CREATE STATISTICS ctlt1_expr_stat ON (a || b) FROM ctlt1,create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON STATISTICS ctlt1_a_b_stat IS 'ab stats',create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON STATISTICS ctlt1_expr_stat IS 'ab expr stats',create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON COLUMN ctlt1.a IS 'A',create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON COLUMN ctlt1.b IS 'B',create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON CONSTRAINT ctlt1_a_check ON ctlt1 IS 't1_a_check',create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON INDEX ctlt1_pkey IS 'index pkey',create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON INDEX ctlt1_b_key IS 'index b_key',create_table_like.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ctlt1 ALTER COLUMN a SET STORAGE MAIN,create_table_like.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ctlt2 ALTER COLUMN c SET STORAGE EXTERNAL,create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON COLUMN ctlt2.c IS 'C',create_table_like.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ctlt3 ALTER COLUMN c SET STORAGE EXTERNAL,create_table_like.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ctlt3 ALTER COLUMN a SET STORAGE MAIN,create_table_like.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ctlt3_fnidx ON ctlt3 ((a || c)),create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON COLUMN ctlt3.a IS 'A3',create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON COLUMN ctlt3.c IS 'C',create_table_like.sql,SAME,,[]
postgresql,postgresql,COMMENT ON CONSTRAINT ctlt3_a_check ON ctlt3 IS 't3_a_check',create_table_like.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ctlt4 ALTER COLUMN c SET STORAGE EXTERNAL,create_table_like.sql,SAME,,[]
postgresql,postgresql,"SELECT description FROM pg_description, pg_constraint c WHERE classoid = 'pg_constraint'::regclass AND objoid = c.oid AND c.conrelid = 'ctlt1_inh'::regclass",create_table_like.sql,SAME,,"[('t1_a_check',)]"
postgresql,postgresql,"SELECT description FROM pg_description, pg_constraint c WHERE classoid = 'pg_constraint'::regclass AND objoid = c.oid AND c.conrelid = 'ctlt13_like'::regclass",create_table_like.sql,SAME,,"[('t3_a_check',)]"
postgresql,postgresql,"SELECT c.relname, objsubid, description FROM pg_description, pg_index i, pg_class c WHERE classoid = 'pg_class'::regclass AND objoid = i.indexrelid AND c.oid = i.indexrelid AND i.indrelid = 'ctlt_all'::regclass ORDER BY c.relname, objsubid",create_table_like.sql,SAME,,"[('ctlt_all_b_idx', 0, 'index b_key'), ('ctlt_all_pkey', 0, 'index pkey')]"
postgresql,postgresql,"SELECT s.stxname, objsubid, description FROM pg_description, pg_statistic_ext s WHERE classoid = 'pg_statistic_ext'::regclass AND objoid = s.oid AND s.stxrelid = 'ctlt_all'::regclass ORDER BY s.stxname, objsubid",create_table_like.sql,SAME,,"[('ctlt_all_a_b_stat', 0, 'ab stats'), ('ctlt_all_expr_stat', 0, 'ab expr stats')]"
postgresql,postgresql,BEGIN,create_table_like.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA ctl_schema,create_table_like.sql,SAME,,[]
postgresql,postgresql,"SET LOCAL search_path = ctl_schema, public",create_table_like.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,create_table_like.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE ctlseq1,create_table_like.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW ctlv1 AS SELECT * FROM ctlt4,create_table_like.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE ctlty1 AS (a int, b text)",create_table_like.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE ctlseq1,create_table_like.sql,SAME,,[]
postgresql,postgresql,DROP TYPE ctlty1,create_table_like.sql,SAME,,[]
postgresql,postgresql,DROP VIEW ctlv1,create_table_like.sql,SAME,,[]
postgresql,postgresql,"select format_type('varchar'::regtype, 42)",create_type.sql,SAME,,"[('character varying(38)',)]"
postgresql,postgresql,"select format_type('bpchar'::regtype, null)",create_type.sql,SAME,,"[('character',)]"
postgresql,postgresql,"select format_type('bpchar'::regtype, -1)",create_type.sql,SAME,,"[('bpchar',)]"
postgresql,postgresql,"SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,        typanalyze, typsubscript, typstorage FROM pg_type WHERE typname = 'myvarchar'",create_type.sql,SAME,,[]
postgresql,postgresql,"SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,        typanalyze, typsubscript, typstorage FROM pg_type WHERE typname = '_myvarchar'",create_type.sql,SAME,,[]
postgresql,postgresql,"SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,        typanalyze, typsubscript, typstorage FROM pg_type WHERE typname = 'myvarchardom'",create_type.sql,SAME,,[]
postgresql,postgresql,"SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,        typanalyze, typsubscript, typstorage FROM pg_type WHERE typname = '_myvarchardom'",create_type.sql,SAME,,[]
postgresql,postgresql,ANALYZE real_city,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW key_dependent_view AS    SELECT * FROM view_base_table GROUP BY key,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW key_dependent_view_no_cols AS    SELECT FROM view_base_table GROUP BY key HAVING length(data) > 0,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE VIEW viewtest AS 	SELECT * FROM viewtest_tbl WHERE a > 10,create_view.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM viewtest,create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE OR REPLACE VIEW viewtest AS 	SELECT a, b, c, d FROM viewtest_tbl WHERE a > 5 ORDER BY b DESC",create_view.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM viewtest,create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE OR REPLACE VIEW viewtest AS 	SELECT a, b, c, d, 0 AS e FROM viewtest_tbl",create_view.sql,SAME,,[]
postgresql,postgresql,DROP VIEW viewtest,create_view.sql,SAME,,[]
postgresql,postgresql,"SET search_path TO temp_view_test, public",create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMPORARY TABLE temp_table (a int, id int)",create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v1 AS SELECT * FROM base_table,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v1_temp AS SELECT * FROM temp_table,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP VIEW v2_temp AS SELECT * FROM base_table,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW temp_view_test.v2 AS SELECT * FROM base_table,create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW v3 AS     SELECT t1.a AS t1_a, t2.a AS t2_a     FROM base_table t1, base_table2 t2     WHERE t1.id = t2.id",create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW v4_temp AS     SELECT t1.a AS t1_a, t2.a AS t2_a     FROM base_table t1, temp_table t2     WHERE t1.id = t2.id",create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW v5_temp AS     SELECT t1.a AS t1_a, t2.a AS t2_a, t3.a AS t3_a     FROM base_table t1, base_table2 t2, temp_table t3     WHERE t1.id = t2.id and t2.id = t3.id",create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v4 AS SELECT * FROM base_table WHERE id IN (SELECT id FROM base_table2),create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW v5 AS SELECT t1.id, t2.a FROM base_table t1, (SELECT * FROM base_table2) t2",create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v6 AS SELECT * FROM base_table WHERE EXISTS (SELECT 1 FROM base_table2),create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v7 AS SELECT * FROM base_table WHERE NOT EXISTS (SELECT 1 FROM base_table2),create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v8 AS SELECT * FROM base_table WHERE EXISTS (SELECT 1),create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v6_temp AS SELECT * FROM base_table WHERE id IN (SELECT id FROM temp_table),create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW v7_temp AS SELECT t1.id, t2.a FROM base_table t1, (SELECT * FROM temp_table) t2",create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v8_temp AS SELECT * FROM base_table WHERE EXISTS (SELECT 1 FROM temp_table),create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v9_temp AS SELECT * FROM base_table WHERE NOT EXISTS (SELECT 1 FROM temp_table),create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v10_temp AS SELECT * FROM v7_temp,create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW v11_temp AS SELECT t1.id, t2.a FROM base_table t1, v10_temp t2",create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v12_temp AS SELECT true FROM v11_temp,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE seq1,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE TEMPORARY SEQUENCE seq1_temp,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v9 AS SELECT seq1.is_called FROM seq1,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v13_temp AS SELECT seq1_temp.is_called FROM seq1_temp,create_view.sql,SAME,,[]
postgresql,postgresql,SELECT relname FROM pg_class     WHERE relname LIKE 'v_'     AND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'temp_view_test')     ORDER BY relname,create_view.sql,SAME,,"[('v1',), ('v2',), ('v3',), ('v4',), ('v5',), ('v6',), ('v7',), ('v8',), ('v9',)]"
postgresql,postgresql,SELECT relname FROM pg_class     WHERE relname LIKE 'v%'     AND relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname LIKE 'pg_temp%')     ORDER BY relname,create_view.sql,SAME,,"[('v10_temp',), ('v11_temp',), ('v12_temp',), ('v13_temp',), ('v1_temp',), ('v2_temp',), ('v4_temp',), ('v5_temp',), ('v6_temp',), ('v7_temp',), ('v8_temp',), ('v9_temp',)]"
postgresql,postgresql,CREATE SCHEMA testviewschm2,create_view.sql,SAME,,[]
postgresql,postgresql,"SET search_path TO testviewschm2, public",create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE tt (num2 int, value text)",create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW nontemp1 AS SELECT * FROM t1 CROSS JOIN t2,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW temporal1 AS SELECT * FROM t1 CROSS JOIN tt,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW nontemp2 AS SELECT * FROM t1 INNER JOIN t2 ON t1.num = t2.num2,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW temporal2 AS SELECT * FROM t1 INNER JOIN tt ON t1.num = tt.num2,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW nontemp3 AS SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num2,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW temporal3 AS SELECT * FROM t1 LEFT JOIN tt ON t1.num = tt.num2,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW nontemp4 AS SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num2 AND t2.value = 'xxx',create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW temporal4 AS SELECT * FROM t1 LEFT JOIN tt ON t1.num = tt.num2 AND tt.value = 'xxx',create_view.sql,SAME,,[]
postgresql,postgresql,SELECT relname FROM pg_class     WHERE relname LIKE 'nontemp%'     AND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'testviewschm2')     ORDER BY relname,create_view.sql,SAME,,"[('nontemp1',), ('nontemp2',), ('nontemp3',), ('nontemp4',)]"
postgresql,postgresql,SELECT relname FROM pg_class     WHERE relname LIKE 'temporal%'     AND relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname LIKE 'pg_temp%')     ORDER BY relname,create_view.sql,SAME,,"[('temporal1',), ('temporal2',), ('temporal3',), ('temporal4',)]"
postgresql,postgresql,"CREATE TEMP TABLE tmptbl (i int, j int)",create_view.sql,SAME,,[]
postgresql,postgresql,CREATE   VIEW  pubview AS SELECT * FROM tbl1 WHERE tbl1.a BETWEEN (SELECT d FROM tbl2 WHERE c = 1) AND (SELECT e FROM tbl3 WHERE f = 2) AND EXISTS (SELECT g FROM tbl4 LEFT JOIN tbl3 ON tbl4.h = tbl3.f),create_view.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM pg_class where relname = 'pubview' AND relnamespace IN (SELECT OID FROM pg_namespace WHERE nspname = 'testviewschm2'),create_view.sql,SAME,,"[(1,)]"
postgresql,postgresql,CREATE   VIEW  mytempview AS SELECT * FROM tbl1 WHERE tbl1.a BETWEEN (SELECT d FROM tbl2 WHERE c = 1) AND (SELECT e FROM tbl3 WHERE f = 2) AND EXISTS (SELECT g FROM tbl4 LEFT JOIN tbl3 ON tbl4.h = tbl3.f) AND NOT EXISTS (SELECT g FROM tbl4 LEFT JOIN tmptbl ON tbl4.h = tmptbl.j),create_view.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM pg_class where relname LIKE 'mytempview' And relnamespace IN (SELECT OID FROM pg_namespace WHERE nspname LIKE 'pg_temp%'),create_view.sql,SAME,,"[(1,)]"
postgresql,postgresql,CREATE VIEW mysecview1        AS SELECT * FROM tbl1 WHERE a = 0,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW mysecview2 WITH (security_barrier=true)        AS SELECT * FROM tbl1 WHERE a > 0,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW mysecview3 WITH (security_barrier=false)        AS SELECT * FROM tbl1 WHERE a < 0,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW mysecview4 WITH (security_barrier)        AS SELECT * FROM tbl1 WHERE a <> 0,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW mysecview7 WITH (security_invoker=true)        AS SELECT * FROM tbl1 WHERE a = 100,create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW mysecview8 WITH (security_invoker=false, security_barrier=true)        AS SELECT * FROM tbl1 WHERE a > 100",create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW mysecview9 WITH (security_invoker)        AS SELECT * FROM tbl1 WHERE a < 100,create_view.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relkind, reloptions FROM pg_class        WHERE oid in ('mysecview1'::regclass, 'mysecview2'::regclass,                      'mysecview3'::regclass, 'mysecview4'::regclass,                      'mysecview7'::regclass, 'mysecview8'::regclass,                      'mysecview9'::regclass)        ORDER BY relname",create_view.sql,SAME,,"[('mysecview1', 'v', None), ('mysecview2', 'v', ['security_barrier=true']), ('mysecview3', 'v', ['security_barrier=false']), ('mysecview4', 'v', ['security_barrier=true']), ('mysecview7', 'v', ['security_invoker=true']), ('mysecview8', 'v', ['security_invoker=false', 'security_barrier=true']), ('mysecview9', 'v', ['security_invoker=true'])]"
postgresql,postgresql,CREATE OR REPLACE VIEW mysecview1        AS SELECT * FROM tbl1 WHERE a = 256,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE VIEW mysecview2        AS SELECT * FROM tbl1 WHERE a > 256,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE VIEW mysecview3 WITH (security_barrier=true)        AS SELECT * FROM tbl1 WHERE a < 256,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE VIEW mysecview4 WITH (security_barrier=false)        AS SELECT * FROM tbl1 WHERE a <> 256,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE VIEW mysecview7        AS SELECT * FROM tbl1 WHERE a > 256,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE VIEW mysecview8 WITH (security_invoker=true)        AS SELECT * FROM tbl1 WHERE a < 256,create_view.sql,SAME,,[]
postgresql,postgresql,"CREATE OR REPLACE VIEW mysecview9 WITH (security_invoker=false, security_barrier=true)        AS SELECT * FROM tbl1 WHERE a <> 256",create_view.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relkind, reloptions FROM pg_class        WHERE oid in ('mysecview1'::regclass, 'mysecview2'::regclass,                      'mysecview3'::regclass, 'mysecview4'::regclass,                      'mysecview7'::regclass, 'mysecview8'::regclass,                      'mysecview9'::regclass)        ORDER BY relname",create_view.sql,SAME,,"[('mysecview1', 'v', None), ('mysecview2', 'v', None), ('mysecview3', 'v', ['security_barrier=true']), ('mysecview4', 'v', ['security_barrier=false']), ('mysecview7', 'v', None), ('mysecview8', 'v', ['security_invoker=true']), ('mysecview9', 'v', ['security_invoker=false', 'security_barrier=true'])]"
postgresql,postgresql,"CREATE VIEW unspecified_types AS   SELECT 42 as i, 42.5 as num, 'foo' as u, 'foo'::unknown as u2, null as n",create_view.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM unspecified_types,create_view.sql,SAME,,"[(42, Decimal('42.5'), 'foo', 'foo', None)]"
postgresql,postgresql,"CREATE VIEW tt1 AS   SELECT * FROM (     VALUES        ('abc'::varchar(3), '0123456789', 42, 'abcd'::varchar(4)),        ('0123456789', 'abc'::varchar(3), 42.12, 'abc'::varchar(4))   ) vv(a,b,c,d)",create_view.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM tt1,create_view.sql,SAME,,"[('abc', '0123456789', Decimal('42'), 'abcd'), ('0123456789', 'abc', Decimal('42.12'), 'abc')]"
postgresql,postgresql,SELECT a::varchar(3) FROM tt1,create_view.sql,SAME,,"[('abc',), ('012',)]"
postgresql,postgresql,DROP VIEW tt1,create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW aliased_view_1 AS   select * from tt1     where exists (select 1 from tx1 where tt1.f1 = tx1.x1),create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW aliased_view_2 AS   select * from tt1 a1     where exists (select 1 from tx1 where a1.f1 = tx1.x1),create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW aliased_view_3 AS   select * from tt1     where exists (select 1 from tx1 a2 where tt1.f1 = a2.x1),create_view.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW aliased_view_4 AS   select * from temp_view_test.tt1     where exists (select 1 from tt1 where temp_view_test.tt1.y1 = tt1.f1),create_view.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tx1 RENAME TO a1,create_view.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tt1 RENAME TO a2,create_view.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE a1 RENAME TO tt1,create_view.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE a2 RENAME TO tx1,create_view.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tx1 SET SCHEMA temp_view_test,create_view.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE temp_view_test.tt1 RENAME TO tmp1,create_view.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE temp_view_test.tmp1 SET SCHEMA testviewschm2,create_view.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tmp1 RENAME TO tx1,create_view.sql,SAME,,[]
postgresql,postgresql,"create view view_of_joins as select * from   (select * from (tbl1 cross join tbl2) same) ss,   (tbl3 cross join tbl4) same",create_view.sql,SAME,,[]
postgresql,postgresql,create view view_of_joins_2a as select * from tbl1 join tbl1a using (a),create_view.sql,SAME,,[]
postgresql,postgresql,create view view_of_joins_2b as select * from tbl1 join tbl1a using (a) as x,create_view.sql,SAME,,[]
postgresql,postgresql,create view view_of_joins_2c as select * from (tbl1 join tbl1a using (a)) as y,create_view.sql,SAME,,[]
postgresql,postgresql,create view view_of_joins_2d as select * from (tbl1 join tbl1a using (a) as x) as y,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('view_of_joins_2a', true)",create_view.sql,SAME,,"[(' SELECT tbl1.a,\n    tbl1.b,\n    tbl1a.c\n   FROM tbl1\n     JOIN tbl1a USING (a);',)]"
postgresql,postgresql,"select pg_get_viewdef('view_of_joins_2b', true)",create_view.sql,SAME,,"[(' SELECT tbl1.a,\n    tbl1.b,\n    tbl1a.c\n   FROM tbl1\n     JOIN tbl1a USING (a) AS x;',)]"
postgresql,postgresql,"select pg_get_viewdef('view_of_joins_2c', true)",create_view.sql,SAME,,"[(' SELECT y.a,\n    y.b,\n    y.c\n   FROM (tbl1\n     JOIN tbl1a USING (a)) y;',)]"
postgresql,postgresql,"select pg_get_viewdef('view_of_joins_2d', true)",create_view.sql,SAME,,"[(' SELECT y.a,\n    y.b,\n    y.c\n   FROM (tbl1\n     JOIN tbl1a USING (a) AS x) y;',)]"
postgresql,postgresql,create view v1 as select * from tt2 natural join tt3,create_view.sql,SAME,,[]
postgresql,postgresql,create view v1a as select * from (tt2 natural join tt3) j,create_view.sql,SAME,,[]
postgresql,postgresql,"create view v2 as select * from tt2 join tt3 using (b,c) join tt4 using (b)",create_view.sql,SAME,,[]
postgresql,postgresql,"create view v2a as select * from (tt2 join tt3 using (b,c) join tt4 using (b)) j",create_view.sql,SAME,,[]
postgresql,postgresql,"create view v3 as select * from tt2 join tt3 using (b,c) full join tt4 using (b)",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('v1', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax\n   FROM tt2\n     JOIN tt3 USING (b, c);',)]"
postgresql,postgresql,"select pg_get_viewdef('v1a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax\n   FROM (tt2\n     JOIN tt3 USING (b, c)) j;',)]"
postgresql,postgresql,"select pg_get_viewdef('v2', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 USING (b, c)\n     JOIN tt4 USING (b);',)]"
postgresql,postgresql,"select pg_get_viewdef('v2a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax,\n    j.ay,\n    j.q\n   FROM (tt2\n     JOIN tt3 USING (b, c)\n     JOIN tt4 USING (b)) j;',)]"
postgresql,postgresql,"select pg_get_viewdef('v3', true)",create_view.sql,SAME,,"[(' SELECT b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 USING (b, c)\n     FULL JOIN tt4 USING (b);',)]"
postgresql,postgresql,alter table tt2 add column d int,create_view.sql,SAME,,[]
postgresql,postgresql,alter table tt2 add column e int,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('v1', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax\n   FROM tt2\n     JOIN tt3 USING (b, c);',)]"
postgresql,postgresql,"select pg_get_viewdef('v1a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax\n   FROM (tt2\n     JOIN tt3 USING (b, c)) j;',)]"
postgresql,postgresql,"select pg_get_viewdef('v2', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 USING (b, c)\n     JOIN tt4 USING (b);',)]"
postgresql,postgresql,"select pg_get_viewdef('v2a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax,\n    j.ay,\n    j.q\n   FROM (tt2\n     JOIN tt3 USING (b, c)\n     JOIN tt4 USING (b)) j;',)]"
postgresql,postgresql,"select pg_get_viewdef('v3', true)",create_view.sql,SAME,,"[(' SELECT b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 USING (b, c)\n     FULL JOIN tt4 USING (b);',)]"
postgresql,postgresql,alter table tt3 rename c to d,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('v1', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c) USING (b, c);',)]"
postgresql,postgresql,"select pg_get_viewdef('v1a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax\n   FROM (tt2\n     JOIN tt3 tt3(ax, b, c) USING (b, c)) j;',)]"
postgresql,postgresql,"select pg_get_viewdef('v2', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c) USING (b, c)\n     JOIN tt4 USING (b);',)]"
postgresql,postgresql,"select pg_get_viewdef('v2a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax,\n    j.ay,\n    j.q\n   FROM (tt2\n     JOIN tt3 tt3(ax, b, c) USING (b, c)\n     JOIN tt4 USING (b)) j;',)]"
postgresql,postgresql,"select pg_get_viewdef('v3', true)",create_view.sql,SAME,,"[(' SELECT b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c) USING (b, c)\n     FULL JOIN tt4 USING (b);',)]"
postgresql,postgresql,alter table tt3 add column c int,create_view.sql,SAME,,[]
postgresql,postgresql,alter table tt3 add column e int,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('v1', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c);',)]"
postgresql,postgresql,"select pg_get_viewdef('v1a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax\n   FROM (tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c)) j(b, c, a, d, e, ax, c_1, e_1);',)]"
postgresql,postgresql,"select pg_get_viewdef('v2', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c)\n     JOIN tt4 USING (b);',)]"
postgresql,postgresql,"select pg_get_viewdef('v2a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax,\n    j.ay,\n    j.q\n   FROM (tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c)\n     JOIN tt4 USING (b)) j(b, c, a, d, e, ax, c_1, e_1, ay, q);',)]"
postgresql,postgresql,"select pg_get_viewdef('v3', true)",create_view.sql,SAME,,"[(' SELECT b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c)\n     FULL JOIN tt4 USING (b);',)]"
postgresql,postgresql,alter table tt2 drop column d,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('v1', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c);',)]"
postgresql,postgresql,"select pg_get_viewdef('v1a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax\n   FROM (tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c)) j(b, c, a, e, ax, c_1, e_1);',)]"
postgresql,postgresql,"select pg_get_viewdef('v2', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c)\n     JOIN tt4 USING (b);',)]"
postgresql,postgresql,"select pg_get_viewdef('v2a', true)",create_view.sql,SAME,,"[(' SELECT j.b,\n    j.c,\n    j.a,\n    j.ax,\n    j.ay,\n    j.q\n   FROM (tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c)\n     JOIN tt4 USING (b)) j(b, c, a, e, ax, c_1, e_1, ay, q);',)]"
postgresql,postgresql,"select pg_get_viewdef('v3', true)",create_view.sql,SAME,,"[(' SELECT b,\n    tt3.c,\n    tt2.a,\n    tt3.ax,\n    tt4.ay,\n    tt4.q\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c)\n     FULL JOIN tt4 USING (b);',)]"
postgresql,postgresql,"create view vv1 as select * from (tt5 cross join tt6) j(aa,bb,cc,dd)",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv1', true)",create_view.sql,SAME,,"[(' SELECT j.aa,\n    j.bb,\n    j.cc,\n    j.dd\n   FROM (tt5\n     CROSS JOIN tt6) j(aa, bb, cc, dd);',)]"
postgresql,postgresql,alter table tt5 add column c int,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv1', true)",create_view.sql,SAME,,"[(' SELECT j.aa,\n    j.bb,\n    j.cc,\n    j.dd\n   FROM (tt5\n     CROSS JOIN tt6) j(aa, bb, c, cc, dd);',)]"
postgresql,postgresql,alter table tt5 add column cc int,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv1', true)",create_view.sql,SAME,,"[(' SELECT j.aa,\n    j.bb,\n    j.cc,\n    j.dd\n   FROM (tt5\n     CROSS JOIN tt6) j(aa, bb, c, cc_1, cc, dd);',)]"
postgresql,postgresql,alter table tt5 drop column c,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv1', true)",create_view.sql,SAME,,"[(' SELECT j.aa,\n    j.bb,\n    j.cc,\n    j.dd\n   FROM (tt5\n     CROSS JOIN tt6) j(aa, bb, cc_1, cc, dd);',)]"
postgresql,postgresql,create view v4 as select * from v1,create_view.sql,SAME,,[]
postgresql,postgresql,alter view v1 rename column a to x,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('v1', true)",create_view.sql,SAME,,"[(' SELECT tt2.b,\n    tt3.c,\n    tt2.a AS x,\n    tt3.ax\n   FROM tt2\n     JOIN tt3 tt3(ax, b, c, c_1, e) USING (b, c);',)]"
postgresql,postgresql,"select pg_get_viewdef('v4', true)",create_view.sql,SAME,,"[(' SELECT b,\n    c,\n    x AS a,\n    ax\n   FROM v1;',)]"
postgresql,postgresql,alter table tt7 drop column xx,create_view.sql,SAME,,[]
postgresql,postgresql,"create view vv2 as select * from (values(1,2,3,4,5)) v(a,b,c,d,e) union all select * from tt7 full join tt8 using (x), tt8 tt8x",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv2', true)",create_view.sql,SAME,,"[(' SELECT v.a,\n    v.b,\n    v.c,\n    v.d,\n    v.e\n   FROM ( VALUES (1,2,3,4,5)) v(a, b, c, d, e)\nUNION ALL\n SELECT x AS a,\n    tt7.y AS b,\n    tt8.z AS c,\n    tt8x.x_1 AS d,\n    tt8x.z AS e\n   FROM tt7\n     FULL JOIN tt8 USING (x),\n    tt8 tt8x(x_1, z);',)]"
postgresql,postgresql,"create view vv3 as select * from (values(1,2,3,4,5,6)) v(a,b,c,x,e,f) union all select * from   tt7 full join tt8 using (x),   tt7 tt7x full join tt8 tt8x using (x)",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv3', true)",create_view.sql,SAME,,"[(' SELECT v.a,\n    v.b,\n    v.c,\n    v.x,\n    v.e,\n    v.f\n   FROM ( VALUES (1,2,3,4,5,6)) v(a, b, c, x, e, f)\nUNION ALL\n SELECT x AS a,\n    tt7.y AS b,\n    tt8.z AS c,\n    x_1 AS x,\n    tt7x.y AS e,\n    tt8x.z AS f\n   FROM tt7\n     FULL JOIN tt8 USING (x),\n    tt7 tt7x(x_1, y)\n     FULL JOIN tt8 tt8x(x_1, z) USING (x_1);',)]"
postgresql,postgresql,"create view vv4 as select * from (values(1,2,3,4,5,6,7)) v(a,b,c,x,e,f,g) union all select * from   tt7 full join tt8 using (x),   tt7 tt7x full join tt8 tt8x using (x) full join tt8 tt8y using (x)",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv4', true)",create_view.sql,SAME,,"[(' SELECT v.a,\n    v.b,\n    v.c,\n    v.x,\n    v.e,\n    v.f,\n    v.g\n   FROM ( VALUES (1,2,3,4,5,6,7)) v(a, b, c, x, e, f, g)\nUNION ALL\n SELECT x AS a,\n    tt7.y AS b,\n    tt8.z AS c,\n    x_1 AS x,\n    tt7x.y AS e,\n    tt8x.z AS f,\n    tt8y.z AS g\n   FROM tt7\n     FULL JOIN tt8 USING (x),\n    tt7 tt7x(x_1, y)\n     FULL JOIN tt8 tt8x(x_1, z) USING (x_1)\n     FULL JOIN tt8 tt8y(x_1, z) USING (x_1);',)]"
postgresql,postgresql,alter table tt7 add column zz int,create_view.sql,SAME,,[]
postgresql,postgresql,alter table tt7 add column z int,create_view.sql,SAME,,[]
postgresql,postgresql,alter table tt7 drop column zz,create_view.sql,SAME,,[]
postgresql,postgresql,alter table tt8 add column z2 int,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv2', true)",create_view.sql,SAME,,"[(' SELECT v.a,\n    v.b,\n    v.c,\n    v.d,\n    v.e\n   FROM ( VALUES (1,2,3,4,5)) v(a, b, c, d, e)\nUNION ALL\n SELECT x AS a,\n    tt7.y AS b,\n    tt8.z AS c,\n    tt8x.x_1 AS d,\n    tt8x.z AS e\n   FROM tt7\n     FULL JOIN tt8 USING (x),\n    tt8 tt8x(x_1, z, z2);',)]"
postgresql,postgresql,"select pg_get_viewdef('vv3', true)",create_view.sql,SAME,,"[(' SELECT v.a,\n    v.b,\n    v.c,\n    v.x,\n    v.e,\n    v.f\n   FROM ( VALUES (1,2,3,4,5,6)) v(a, b, c, x, e, f)\nUNION ALL\n SELECT x AS a,\n    tt7.y AS b,\n    tt8.z AS c,\n    x_1 AS x,\n    tt7x.y AS e,\n    tt8x.z AS f\n   FROM tt7\n     FULL JOIN tt8 USING (x),\n    tt7 tt7x(x_1, y, z)\n     FULL JOIN tt8 tt8x(x_1, z, z2) USING (x_1);',)]"
postgresql,postgresql,"select pg_get_viewdef('vv4', true)",create_view.sql,SAME,,"[(' SELECT v.a,\n    v.b,\n    v.c,\n    v.x,\n    v.e,\n    v.f,\n    v.g\n   FROM ( VALUES (1,2,3,4,5,6,7)) v(a, b, c, x, e, f, g)\nUNION ALL\n SELECT x AS a,\n    tt7.y AS b,\n    tt8.z AS c,\n    x_1 AS x,\n    tt7x.y AS e,\n    tt8x.z AS f,\n    tt8y.z AS g\n   FROM tt7\n     FULL JOIN tt8 USING (x),\n    tt7 tt7x(x_1, y, z)\n     FULL JOIN tt8 tt8x(x_1, z, z2) USING (x_1)\n     FULL JOIN tt8 tt8y(x_1, z, z2) USING (x_1);',)]"
postgresql,postgresql,alter table tt7a drop column xx,create_view.sql,SAME,,[]
postgresql,postgresql,"create view vv2a as select * from (values(now(),2,3,now(),5)) v(a,b,c,d,e) union all select * from tt7a left join tt8a using (x), tt8a tt8ax",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv2a', true)",create_view.sql,SAME,,"[(' SELECT v.a,\n    v.b,\n    v.c,\n    v.d,\n    v.e\n   FROM ( VALUES (now(),2,3,now(),5)) v(a, b, c, d, e)\nUNION ALL\n SELECT x AS a,\n    tt7a.y AS b,\n    tt8a.z AS c,\n    tt8ax.x_1 AS d,\n    tt8ax.z AS e\n   FROM tt7a\n     LEFT JOIN tt8a USING (x),\n    tt8a tt8ax(x_1, z);',)]"
postgresql,postgresql,"create view vv5 as select x,y,z from tt9 join tt10 using(x)",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv5', true)",create_view.sql,SAME,,"[(' SELECT tt9.x,\n    tt9.y,\n    tt10.z\n   FROM tt9\n     JOIN tt10 USING (x);',)]"
postgresql,postgresql,alter table tt9 drop column xx,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv5', true)",create_view.sql,SAME,,"[(' SELECT tt9.x,\n    tt9.y,\n    tt10.z\n   FROM tt9\n     JOIN tt10 USING (x);',)]"
postgresql,postgresql,"create view vv6 as select x,y,z,q from   (tt11 join tt12 using(x)) join tt13 using(z)",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv6', true)",create_view.sql,SAME,,"[(' SELECT tt11.x,\n    tt11.y,\n    tt12.z,\n    tt13.q\n   FROM tt11\n     JOIN tt12 USING (x)\n     JOIN tt13 USING (z);',)]"
postgresql,postgresql,alter table tt11 add column z int,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('vv6', true)",create_view.sql,SAME,,"[(' SELECT tt11.x,\n    tt11.y,\n    tt12.z,\n    tt13.q\n   FROM tt11 tt11(x, y, z_1)\n     JOIN tt12 USING (x)\n     JOIN tt13 USING (z);',)]"
postgresql,postgresql,alter table tt14t drop column f2,create_view.sql,SAME,,[]
postgresql,postgresql,create function tt14f() returns setof tt14t as $$ declare     rec1 record; begin     for rec1 in select * from tt14t     loop         return next rec1;     end loop; end; $$ language plpgsql,create_view.sql,SAME,,[]
postgresql,postgresql,create view tt14v as select t.* from tt14f() t,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt14v', true)",create_view.sql,SAME,,"[(' SELECT f1,\n    f3,\n    f4\n   FROM tt14f() t(f1, f3, f4);',)]"
postgresql,postgresql,select * from tt14v,create_view.sql,SAME,,"[('foo', 'baz', '42')]"
postgresql,postgresql,begin,create_view.sql,SAME,,[]
postgresql,postgresql,rollback,create_view.sql,SAME,,[]
postgresql,postgresql,begin,create_view.sql,SAME,,[]
postgresql,postgresql,rollback,create_view.sql,SAME,,[]
postgresql,postgresql,drop view tt14v,create_view.sql,SAME,,[]
postgresql,postgresql,"create view tt14v as select t.f1, t.f4 from tt14f() t",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt14v', true)",create_view.sql,SAME,,"[(' SELECT f1,\n    f4\n   FROM tt14f() t(f1, f3, f4);',)]"
postgresql,postgresql,select * from tt14v,create_view.sql,SAME,,"[('foo', '42')]"
postgresql,postgresql,alter table tt14t drop column f3,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt14v', true)",create_view.sql,SAME,,"[(' SELECT f1,\n    f4\n   FROM tt14f() t(f1, f4);',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from tt14v",create_view.sql,SAME,,"[('Function Scan on testviewschm2.tt14f t',), ('  Output: t.f1, t.f4',), ('  Function Call: tt14f()',)]"
postgresql,postgresql,select * from tt14v,create_view.sql,SAME,,"[('foo', '42')]"
postgresql,postgresql,"select 'foo'::text = any(array['abc','def','foo']::text[])",create_view.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select 'foo'::text = any((select array['abc','def','foo']::text[])::text[])",create_view.sql,SAME,,"[(True,)]"
postgresql,postgresql,"create view tt19v as select 'foo'::text = any(array['abc','def','foo']::text[]) c1,        'foo'::text = any((select array['abc','def','foo']::text[])::text[]) c2",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt19v', true)",create_view.sql,SAME,,"[(' SELECT \'foo\'::text = ANY (ARRAY[\'abc\'::text, \'def\'::text, \'foo\'::text]) AS c1,\n    \'foo\'::text = ANY ((( SELECT ARRAY[\'abc\'::text, \'def\'::text, \'foo\'::text] AS ""array""))::text[]) AS c2;',)]"
postgresql,postgresql,"create view tt20v as select * from   coalesce(1,2) as c,   collation for ('x'::text) col,   current_date as d,   localtimestamp(3) as t,   cast(1+2 as int4) as i4,   cast(1+2 as int8) as i8",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt20v', true)",create_view.sql,SAME,,"[("" SELECT c.c,\n    col.col,\n    d.d,\n    t.t,\n    i4.i4,\n    i8.i8\n   FROM COALESCE(1, 2) c(c),\n    COLLATION FOR ('x'::text) col(col),\n    CURRENT_DATE d(d),\n    LOCALTIMESTAMP(3) t(t),\n    CAST(1 + 2 AS integer) i4(i4),\n    CAST((1 + 2)::bigint AS bigint) i8(i8);"",)]"
postgresql,postgresql,"create view tt201v as select   ('2022-12-01'::date + '1 day'::interval) at time zone 'UTC' as atz,   extract(day from now()) as extr,   (now(), '1 day'::interval) overlaps     (current_timestamp(2), '1 day'::interval) as o,   'foo' is normalized isn,   'foo' is nfkc normalized isnn,   normalize('foo') as n,   normalize('foo', nfkd) as nfkd,   overlay('foo' placing 'bar' from 2) as ovl,   overlay('foo' placing 'bar' from 2 for 3) as ovl2,   position('foo' in 'foobar') as p,   substring('foo' from 2 for 3) as s,   substring('foo' similar 'f' escape '#') as ss,   substring('foo' from 'oo') as ssf,     trim(' ' from ' foo ') as bt,   trim(leading ' ' from ' foo ') as lt,   trim(trailing ' foo ') as rt,   trim(E'\\000'::bytea from E'\\000Tom\\000'::bytea) as btb,   trim(leading E'\\000'::bytea from E'\\000Tom\\000'::bytea) as ltb,   trim(trailing E'\\000'::bytea from E'\\000Tom\\000'::bytea) as rtb,   CURRENT_DATE as cd,   (select * from CURRENT_DATE) as cd2,   CURRENT_TIME as ct,   (select * from CURRENT_TIME) as ct2,   CURRENT_TIME (1) as ct3,   (select * from CURRENT_TIME (1)) as ct4,   CURRENT_TIMESTAMP as ct5,   (select * from CURRENT_TIMESTAMP) as ct6,   CURRENT_TIMESTAMP (1) as ct7,   (select * from CURRENT_TIMESTAMP (1)) as ct8,   LOCALTIME as lt1,   (select * from LOCALTIME) as lt2,   LOCALTIME (1) as lt3,   (select * from LOCALTIME (1)) as lt4,   LOCALTIMESTAMP as lt5,   (select * from LOCALTIMESTAMP) as lt6,   LOCALTIMESTAMP (1) as lt7,   (select * from LOCALTIMESTAMP (1)) as lt8,   CURRENT_CATALOG as ca,   (select * from CURRENT_CATALOG) as ca2,   CURRENT_ROLE as cr,   (select * from CURRENT_ROLE) as cr2,   CURRENT_SCHEMA as cs,   (select * from CURRENT_SCHEMA) as cs2,   CURRENT_USER as cu,   (select * from CURRENT_USER) as cu2,   USER as us,   (select * from USER) as us2,   SESSION_USER seu,   (select * from SESSION_USER) as seu2,   SYSTEM_USER as su,   (select * from SYSTEM_USER) as su2",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt201v', true)",create_view.sql,SAME,,"[(' SELECT ((\'2022-12-01\'::date + \'1 day\'::interval) AT TIME ZONE \'UTC\'::text) AS atz,\n    EXTRACT(day FROM now()) AS extr,\n    ((now(), \'1 day\'::interval) OVERLAPS (CURRENT_TIMESTAMP(2), \'1 day\'::interval)) AS o,\n    (\'foo\'::text IS NORMALIZED) AS isn,\n    (\'foo\'::text IS NFKC NORMALIZED) AS isnn,\n    NORMALIZE(\'foo\'::text) AS n,\n    NORMALIZE(\'foo\'::text, NFKD) AS nfkd,\n    OVERLAY(\'foo\'::text PLACING \'bar\'::text FROM 2) AS ovl,\n    OVERLAY(\'foo\'::text PLACING \'bar\'::text FROM 2 FOR 3) AS ovl2,\n    POSITION((\'foo\'::text) IN (\'foobar\'::text)) AS p,\n    SUBSTRING(\'foo\'::text FROM 2 FOR 3) AS s,\n    SUBSTRING(\'foo\'::text SIMILAR \'f\'::text ESCAPE \'#\'::text) AS ss,\n    ""substring""(\'foo\'::text, \'oo\'::text) AS ssf,\n    TRIM(BOTH \' \'::text FROM \' foo \'::text) AS bt,\n    TRIM(LEADING \' \'::text FROM \' foo \'::text) AS lt,\n    TRIM(TRAILING FROM \' foo \'::text) AS rt,\n    TRIM(BOTH \'\\x00\'::bytea FROM \'\\x00546f6d00\'::bytea) AS btb,\n    TRIM(LEADING \'\\x00\'::bytea FROM \'\\x00546f6d00\'::bytea) AS ltb,\n    TRIM(TRAILING \'\\x00\'::bytea FROM \'\\x00546f6d00\'::bytea) AS rtb,\n    CURRENT_DATE AS cd,\n    ( SELECT ""current_date"".""current_date""\n           FROM CURRENT_DATE ""current_date""(""current_date"")) AS cd2,\n    CURRENT_TIME AS ct,\n    ( SELECT ""current_time"".""current_time""\n           FROM CURRENT_TIME ""current_time""(""current_time"")) AS ct2,\n    CURRENT_TIME(1) AS ct3,\n    ( SELECT ""current_time"".""current_time""\n           FROM CURRENT_TIME(1) ""current_time""(""current_time"")) AS ct4,\n    CURRENT_TIMESTAMP AS ct5,\n    ( SELECT ""current_timestamp"".""current_timestamp""\n           FROM CURRENT_TIMESTAMP ""current_timestamp""(""current_timestamp"")) AS ct6,\n    CURRENT_TIMESTAMP(1) AS ct7,\n    ( SELECT ""current_timestamp"".""current_timestamp""\n           FROM CURRENT_TIMESTAMP(1) ""current_timestamp""(""current_timestamp"")) AS ct8,\n    LOCALTIME AS lt1,\n    ( SELECT ""localtime"".""localtime""\n           FROM LOCALTIME ""localtime""(""localtime"")) AS lt2,\n    LOCALTIME(1) AS lt3,\n    ( SELECT ""localtime"".""localtime""\n           FROM LOCALTIME(1) ""localtime""(""localtime"")) AS lt4,\n    LOCALTIMESTAMP AS lt5,\n    ( SELECT ""localtimestamp"".""localtimestamp""\n           FROM LOCALTIMESTAMP ""localtimestamp""(""localtimestamp"")) AS lt6,\n    LOCALTIMESTAMP(1) AS lt7,\n    ( SELECT ""localtimestamp"".""localtimestamp""\n           FROM LOCALTIMESTAMP(1) ""localtimestamp""(""localtimestamp"")) AS lt8,\n    CURRENT_CATALOG AS ca,\n    ( SELECT ""current_catalog"".""current_catalog""\n           FROM CURRENT_CATALOG ""current_catalog""(""current_catalog"")) AS ca2,\n    CURRENT_ROLE AS cr,\n    ( SELECT ""current_role"".""current_role""\n           FROM CURRENT_ROLE ""current_role""(""current_role"")) AS cr2,\n    CURRENT_SCHEMA AS cs,\n    ( SELECT ""current_schema"".""current_schema""\n           FROM CURRENT_SCHEMA ""current_schema""(""current_schema"")) AS cs2,\n    CURRENT_USER AS cu,\n    ( SELECT ""current_user"".""current_user""\n           FROM CURRENT_USER ""current_user""(""current_user"")) AS cu2,\n    USER AS us,\n    ( SELECT ""user"".""user""\n           FROM USER ""user""(""user"")) AS us2,\n    SESSION_USER AS seu,\n    ( SELECT ""session_user"".""session_user""\n           FROM SESSION_USER ""session_user""(""session_user"")) AS seu2,\n    SYSTEM_USER AS su,\n    ( SELECT ""system_user"".""system_user""\n           FROM SYSTEM_USER ""system_user""(""system_user"")) AS su2;',)]"
postgresql,postgresql,create view tt21v as select * from tt5 natural inner join tt6,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt21v', true)",create_view.sql,SAME,,"[(' SELECT tt5.a,\n    tt5.b,\n    tt5.cc,\n    tt6.c,\n    tt6.d\n   FROM tt5\n     CROSS JOIN tt6;',)]"
postgresql,postgresql,create view tt22v as select * from tt5 natural left join tt6,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt22v', true)",create_view.sql,SAME,,"[(' SELECT tt5.a,\n    tt5.b,\n    tt5.cc,\n    tt6.c,\n    tt6.d\n   FROM tt5\n     LEFT JOIN tt6 ON TRUE;',)]"
postgresql,postgresql,"create view tt24v as with cte as materialized (select r from (values(1,2),(3,4)) r) select (r).column2 as col_a, (rr).column2 as col_b from   cte join (select rr from (values(1,7),(3,8)) rr limit 2) ss   on (r).column1 = (rr).column1",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt24v', true)",create_view.sql,SAME,,"[(' WITH cte AS MATERIALIZED (\n         SELECT r.*::record AS r\n           FROM ( VALUES (1,2), (3,4)) r\n        )\n SELECT (cte.r).column2 AS col_a,\n    (ss.rr).column2 AS col_b\n   FROM cte\n     JOIN ( SELECT rr.*::record AS rr\n           FROM ( VALUES (1,7), (3,8)) rr\n         LIMIT 2) ss ON (cte.r).column1 = (ss.rr).column1;',)]"
postgresql,postgresql,create view tt25v as with cte as materialized (select pg_get_keywords() k) select (k).word from cte,create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt25v', true)",create_view.sql,SAME,,"[(' WITH cte AS MATERIALIZED (\n         SELECT pg_get_keywords() AS k\n        )\n SELECT (k).word AS word\n   FROM cte;',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from tt24v",create_view.sql,SAME,,"[('Hash Join',), ('  Output: (cte.r).column2, ((ROW(""*VALUES*"".column1, ""*VALUES*"".column2))).column2',), ('  Hash Cond: ((cte.r).column1 = ((ROW(""*VALUES*"".column1, ""*VALUES*"".column2))).column1)',), ('  CTE cte',), ('    ->  Values Scan on ""*VALUES*_1""',), ('          Output: ROW(""*VALUES*_1"".column1, ""*VALUES*_1"".column2)',), ('  ->  CTE Scan on cte',), ('        Output: cte.r',), ('  ->  Hash',), ('        Output: (ROW(""*VALUES*"".column1, ""*VALUES*"".column2))',), ('        ->  Limit',), ('              Output: (ROW(""*VALUES*"".column1, ""*VALUES*"".column2))',), ('              ->  Values Scan on ""*VALUES*""',), ('                    Output: ROW(""*VALUES*"".column1, ""*VALUES*"".column2)',)]"
postgresql,postgresql,"explain (verbose, costs off) select (r).column2 from (select r from (values(1,2),(3,4)) r limit 1) ss",create_view.sql,SAME,,"[('Subquery Scan on ss',), ('  Output: (ss.r).column2',), ('  ->  Limit',), ('        Output: (ROW(""*VALUES*"".column1, ""*VALUES*"".column2))',), ('        ->  Values Scan on ""*VALUES*""',), ('              Output: ROW(""*VALUES*"".column1, ""*VALUES*"".column2)',)]"
postgresql,postgresql,"create view tt26v as select x + y + z as c1,        (x * y) + z as c2,        x + (y * z) as c3,        (x + y) * z as c4,        x * (y + z) as c5,        x + (y + z) as c6,        x + (y # z) as c7,        (x > y) AND (y > z OR x > z) as c8,        (x > y) OR (y > z AND NOT (x > z)) as c9,        (x,y) <> ALL (values(1,2),(3,4)) as c10,        (x,y) <= ANY (values(1,2),(3,4)) as c11 from (values(1,2,3)) v(x,y,z)",create_view.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('tt26v', true)",create_view.sql,SAME,,"[(' SELECT x + y + z AS c1,\n    x * y + z AS c2,\n    x + y * z AS c3,\n    (x + y) * z AS c4,\n    x * (y + z) AS c5,\n    x + (y + z) AS c6,\n    x + (y # z) AS c7,\n    x > y AND (y > z OR x > z) AS c8,\n    x > y OR y > z AND NOT x > z AS c9,\n    ((x, y) <> ALL ( VALUES (1,2), (3,4))) AS c10,\n    ((x, y) <= ANY ( VALUES (1,2), (3,4))) AS c11\n   FROM ( VALUES (1,2,3)) v(x, y, z);',)]"
postgresql,postgresql,DROP SCHEMA temp_view_test CASCADE,create_view.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA testviewschm2 CASCADE,create_view.sql,SAME,,[]
postgresql,postgresql,SELECT f1 FROM DATE_TBL   WHERE f1 BETWEEN '2000-01-01' AND '2001-01-01',date.sql,SAME,,"[(datetime.date(2000, 4, 1),), (datetime.date(2000, 4, 2),), (datetime.date(2000, 4, 3),)]"
postgresql,postgresql,SET datestyle TO iso,date.sql,SAME,,[]
postgresql,postgresql,SET datestyle TO ymd,date.sql,SAME,,[]
postgresql,postgresql,"SELECT date 'January 8, 1999'",date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-01-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-01-18',date.sql,SAME,,"[(datetime.date(1999, 1, 18),)]"
postgresql,postgresql,SELECT date '01/02/03',date.sql,SAME,,"[(datetime.date(2001, 2, 3),)]"
postgresql,postgresql,SELECT date '19990108',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '990108',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999.008',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'J2451187',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '99-Jan-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-Jan-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08-Jan-1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan-08-1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '99 Jan 08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999 Jan 08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08 Jan 1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan 08 1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '99 08 Jan',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999 08 Jan',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '99-01-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-01-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '99-08-01',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '1999-08-01',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '99 01 08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999 01 08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '99 08 01',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '1999 08 01',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SET datestyle TO dmy,date.sql,SAME,,[]
postgresql,postgresql,"SELECT date 'January 8, 1999'",date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-01-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-01-18',date.sql,SAME,,"[(datetime.date(1999, 1, 18),)]"
postgresql,postgresql,SELECT date '1/8/1999',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '18/1/1999',date.sql,SAME,,"[(datetime.date(1999, 1, 18),)]"
postgresql,postgresql,SELECT date '01/02/03',date.sql,SAME,,"[(datetime.date(2003, 2, 1),)]"
postgresql,postgresql,SELECT date '19990108',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '990108',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999.008',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'J2451187',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-Jan-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08-Jan-99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08-Jan-1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan-08-99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan-08-1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999 Jan 08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08 Jan 99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08 Jan 1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan 08 99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan 08 1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999 08 Jan',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-01-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08-01-99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08-01-1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '01-08-99',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '01-08-1999',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '1999-08-01',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '1999 01 08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08 01 99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08 01 1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '01 08 99',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '01 08 1999',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '1999 08 01',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SET datestyle TO mdy,date.sql,SAME,,[]
postgresql,postgresql,"SELECT date 'January 8, 1999'",date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-01-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-01-18',date.sql,SAME,,"[(datetime.date(1999, 1, 18),)]"
postgresql,postgresql,SELECT date '1/8/1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1/18/1999',date.sql,SAME,,"[(datetime.date(1999, 1, 18),)]"
postgresql,postgresql,SELECT date '01/02/03',date.sql,SAME,,"[(datetime.date(2003, 1, 2),)]"
postgresql,postgresql,SELECT date '19990108',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '990108',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999.008',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'J2451187',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-Jan-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08-Jan-99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08-Jan-1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan-08-99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan-08-1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999 Jan 08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08 Jan 99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08 Jan 1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan 08 99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date 'Jan 08 1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999 08 Jan',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-01-08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08-01-99',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '08-01-1999',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '01-08-99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '01-08-1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999-08-01',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '1999 01 08',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '08 01 99',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '08 01 1999',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,SELECT date '01 08 99',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '01 08 1999',date.sql,SAME,,"[(datetime.date(1999, 1, 8),)]"
postgresql,postgresql,SELECT date '1999 08 01',date.sql,SAME,,"[(datetime.date(1999, 8, 1),)]"
postgresql,postgresql,"SELECT pg_input_is_valid('now', 'date')",date.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('garbage', 'date')",date.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('6874898-01-01', 'date')",date.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('garbage', 'date')",date.sql,SAME,,"[('invalid input syntax for type date: ""garbage""', None, None, '22007')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('6874898-01-01', 'date')",date.sql,SAME,,"[('date out of range: ""6874898-01-01""', None, None, '22008')]"
postgresql,postgresql,RESET datestyle,date.sql,SAME,,[]
postgresql,postgresql,"SELECT f1 - date '2000-01-01' AS ""Days From 2K"" FROM DATE_TBL",date.sql,SAME,,"[(-15607,), (-15542,), (-1403,), (-1402,), (-1401,), (-1400,), (-1037,), (-1036,), (-1035,), (91,), (92,), (93,), (13977,), (14343,), (14710,), (-1475115,)]"
postgresql,postgresql,"SELECT f1 - date 'epoch' AS ""Days From Epoch"" FROM DATE_TBL",date.sql,SAME,,"[(-4650,), (-4585,), (9554,), (9555,), (9556,), (9557,), (9920,), (9921,), (9922,), (11048,), (11049,), (11050,), (24934,), (25300,), (25667,), (-1464158,)]"
postgresql,postgresql,"SELECT date 'yesterday' - date 'today' AS ""One day""",date.sql,SAME,,"[(-1,)]"
postgresql,postgresql,"SELECT date 'today' - date 'tomorrow' AS ""One day""",date.sql,SAME,,"[(-1,)]"
postgresql,postgresql,"SELECT date 'yesterday' - date 'tomorrow' AS ""Two days""",date.sql,SAME,,"[(-2,)]"
postgresql,postgresql,"SELECT date 'tomorrow' - date 'today' AS ""One day""",date.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT date 'today' - date 'yesterday' AS ""One day""",date.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT date 'tomorrow' - date 'yesterday' AS ""Two days""",date.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT EXTRACT(EPOCH FROM DATE        '1970-01-01'),date.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM DATE '0101-12-31 BC'),date.sql,SAME,,"[(Decimal('-2'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM DATE '0100-12-31 BC'),date.sql,SAME,,"[(Decimal('-1'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM DATE '0001-12-31 BC'),date.sql,SAME,,"[(Decimal('-1'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM DATE '0001-01-01'),date.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM DATE '0001-01-01 AD'),date.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM DATE '1900-12-31'),date.sql,SAME,,"[(Decimal('19'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM DATE '1901-01-01'),date.sql,SAME,,"[(Decimal('20'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM DATE '2000-12-31'),date.sql,SAME,,"[(Decimal('20'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM DATE '2001-01-01'),date.sql,SAME,,"[(Decimal('21'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM CURRENT_DATE)>=21 AS True,date.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT EXTRACT(MILLENNIUM FROM DATE '0001-12-31 BC'),date.sql,SAME,,"[(Decimal('-1'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLENNIUM FROM DATE '0001-01-01 AD'),date.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLENNIUM FROM DATE '1000-12-31'),date.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLENNIUM FROM DATE '1001-01-01'),date.sql,SAME,,"[(Decimal('2'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLENNIUM FROM DATE '2000-12-31'),date.sql,SAME,,"[(Decimal('2'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLENNIUM FROM DATE '2001-01-01'),date.sql,SAME,,"[(Decimal('3'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLENNIUM FROM CURRENT_DATE),date.sql,SAME,,"[(Decimal('3'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM DATE '1994-12-25'),date.sql,SAME,,"[(Decimal('199'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM DATE '0010-01-01'),date.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM DATE '0009-12-31'),date.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM DATE '0001-01-01 BC'),date.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM DATE '0002-12-31 BC'),date.sql,SAME,,"[(Decimal('-1'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM DATE '0011-01-01 BC'),date.sql,SAME,,"[(Decimal('-1'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM DATE '0012-12-31 BC'),date.sql,SAME,,"[(Decimal('-2'),)]"
postgresql,postgresql,SELECT EXTRACT(DAY           FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('11'),)]"
postgresql,postgresql,SELECT EXTRACT(MONTH         FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('8'),)]"
postgresql,postgresql,SELECT EXTRACT(YEAR          FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('2020'),)]"
postgresql,postgresql,SELECT EXTRACT(YEAR          FROM DATE '2020-08-11 BC'),date.sql,SAME,,"[(Decimal('-2020'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE        FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('202'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY       FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('21'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLENNIUM    FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('3'),)]"
postgresql,postgresql,SELECT EXTRACT(ISOYEAR       FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('2020'),)]"
postgresql,postgresql,SELECT EXTRACT(ISOYEAR       FROM DATE '2020-08-11 BC'),date.sql,SAME,,"[(Decimal('-2020'),)]"
postgresql,postgresql,SELECT EXTRACT(QUARTER       FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('3'),)]"
postgresql,postgresql,SELECT EXTRACT(WEEK          FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('33'),)]"
postgresql,postgresql,SELECT EXTRACT(DOW           FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('2'),)]"
postgresql,postgresql,SELECT EXTRACT(DOW           FROM DATE '2020-08-16'),date.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,SELECT EXTRACT(ISODOW        FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('2'),)]"
postgresql,postgresql,SELECT EXTRACT(ISODOW        FROM DATE '2020-08-16'),date.sql,SAME,,"[(Decimal('7'),)]"
postgresql,postgresql,SELECT EXTRACT(DOY           FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('224'),)]"
postgresql,postgresql,SELECT EXTRACT(EPOCH         FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('1597104000'),)]"
postgresql,postgresql,SELECT EXTRACT(JULIAN        FROM DATE '2020-08-11'),date.sql,SAME,,"[(Decimal('2459073'),)]"
postgresql,postgresql,"SELECT DATE_TRUNC('MILLENNIUM', TIMESTAMP '1970-03-20 04:30:00.00000')",date.sql,SAME,,"[(datetime.datetime(1001, 1, 1, 0, 0),)]"
postgresql,postgresql,"SELECT DATE_TRUNC('MILLENNIUM', DATE '1970-03-20')",date.sql,SAME,,"[(datetime.datetime(1001, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=2048))),)]"
postgresql,postgresql,"SELECT DATE_TRUNC('CENTURY', TIMESTAMP '1970-03-20 04:30:00.00000')",date.sql,SAME,,"[(datetime.datetime(1901, 1, 1, 0, 0),)]"
postgresql,postgresql,"SELECT DATE_TRUNC('CENTURY', DATE '1970-03-20')",date.sql,SAME,,"[(datetime.datetime(1901, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT DATE_TRUNC('CENTURY', DATE '2004-08-10')",date.sql,SAME,,"[(datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT DATE_TRUNC('CENTURY', DATE '0002-02-04')",date.sql,SAME,,"[(datetime.datetime(1, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=2048))),)]"
postgresql,postgresql,"SELECT DATE_TRUNC('DECADE', DATE '1993-12-25')",date.sql,SAME,,"[(datetime.datetime(1990, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"select 'infinity'::date, '-infinity'::date",date.sql,SAME,,"[(datetime.date(9999, 12, 31), datetime.date(1, 1, 1))]"
postgresql,postgresql,select 'infinity'::date > 'today'::date as t,date.sql,SAME,,"[(True,)]"
postgresql,postgresql,select '-infinity'::date < 'today'::date as t,date.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select isfinite('infinity'::date), isfinite('-infinity'::date), isfinite('today'::date)",date.sql,SAME,,"[(False, False, True)]"
postgresql,postgresql,select 'infinity'::date = '+infinity'::date as t,date.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT EXTRACT(DAY FROM DATE 'infinity'),date.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT EXTRACT(DAY FROM DATE '-infinity'),date.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT EXTRACT(DAY           FROM DATE 'infinity'),date.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT EXTRACT(MONTH         FROM DATE 'infinity'),date.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT EXTRACT(QUARTER       FROM DATE 'infinity'),date.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT EXTRACT(WEEK          FROM DATE 'infinity'),date.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT EXTRACT(DOW           FROM DATE 'infinity'),date.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT EXTRACT(ISODOW        FROM DATE 'infinity'),date.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT EXTRACT(DOY           FROM DATE 'infinity'),date.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT EXTRACT(EPOCH FROM DATE 'infinity'),date.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,SELECT EXTRACT(EPOCH FROM DATE '-infinity'),date.sql,SAME,,"[(Decimal('-Infinity'),)]"
postgresql,postgresql,SELECT EXTRACT(YEAR       FROM DATE 'infinity'),date.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE     FROM DATE 'infinity'),date.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY    FROM DATE 'infinity'),date.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLENNIUM FROM DATE 'infinity'),date.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,SELECT EXTRACT(JULIAN     FROM DATE 'infinity'),date.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,SELECT EXTRACT(ISOYEAR    FROM DATE 'infinity'),date.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,SELECT EXTRACT(EPOCH      FROM DATE 'infinity'),date.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,"select make_date(2013, 7, 15)",date.sql,SAME,,"[(datetime.date(2013, 7, 15),)]"
postgresql,postgresql,"select make_time(8, 20, 0.0)",date.sql,SAME,,"[(datetime.time(8, 20),)]"
postgresql,postgresql,"SELECT size, pg_size_pretty(size), pg_size_pretty(-1 * size) FROM     (VALUES (10::bigint), (1000::bigint), (1000000::bigint),             (1000000000::bigint), (1000000000000::bigint),             (1000000000000000::bigint)) x(size)",dbsize.sql,SAME,,"[(10, '10 bytes', '-10 bytes'), (1000, '1000 bytes', '-1000 bytes'), (1000000, '977 kB', '-977 kB'), (1000000000, '954 MB', '-954 MB'), (1000000000000, '931 GB', '-931 GB'), (1000000000000000, '909 TB', '-909 TB')]"
postgresql,postgresql,"SELECT size, pg_size_pretty(size), pg_size_pretty(-1 * size) FROM     (VALUES (10::numeric), (1000::numeric), (1000000::numeric),             (1000000000::numeric), (1000000000000::numeric),             (1000000000000000::numeric),             (10.5::numeric), (1000.5::numeric), (1000000.5::numeric),             (1000000000.5::numeric), (1000000000000.5::numeric),             (1000000000000000.5::numeric)) x(size)",dbsize.sql,SAME,,"[(Decimal('10'), '10 bytes', '-10 bytes'), (Decimal('1000'), '1000 bytes', '-1000 bytes'), (Decimal('1000000'), '977 kB', '-977 kB'), (Decimal('1000000000'), '954 MB', '-954 MB'), (Decimal('1000000000000'), '931 GB', '-931 GB'), (Decimal('1000000000000000'), '909 TB', '-909 TB'), (Decimal('10.5'), '10.5 bytes', '-10.5 bytes'), (Decimal('1000.5'), '1000.5 bytes', '-1000.5 bytes'), (Decimal('1000000.5'), '977 kB', '-977 kB'), (Decimal('1000000000.5'), '954 MB', '-954 MB'), (Decimal('1000000000000.5'), '931 GB', '-931 GB'), (Decimal('1000000000000000.5'), '909 TB', '-909 TB')]"
postgresql,postgresql,"SELECT size, pg_size_pretty(size), pg_size_pretty(-1 * size) FROM     (VALUES (10239::bigint), (10240::bigint),             (10485247::bigint), (10485248::bigint),             (10736893951::bigint), (10736893952::bigint),             (10994579406847::bigint), (10994579406848::bigint),             (11258449312612351::bigint), (11258449312612352::bigint)) x(size)",dbsize.sql,SAME,,"[(10239, '10239 bytes', '-10239 bytes'), (10240, '10 kB', '-10 kB'), (10485247, '10239 kB', '-10239 kB'), (10485248, '10 MB', '-10 MB'), (10736893951, '10239 MB', '-10239 MB'), (10736893952, '10 GB', '-10 GB'), (10994579406847, '10239 GB', '-10239 GB'), (10994579406848, '10 TB', '-10 TB'), (11258449312612351, '10239 TB', '-10239 TB'), (11258449312612352, '10 PB', '-10 PB')]"
postgresql,postgresql,"SELECT size, pg_size_pretty(size), pg_size_pretty(-1 * size) FROM     (VALUES (10239::numeric), (10240::numeric),             (10485247::numeric), (10485248::numeric),             (10736893951::numeric), (10736893952::numeric),             (10994579406847::numeric), (10994579406848::numeric),             (11258449312612351::numeric), (11258449312612352::numeric),             (11528652096115048447::numeric), (11528652096115048448::numeric)) x(size)",dbsize.sql,SAME,,"[(Decimal('10239'), '10239 bytes', '-10239 bytes'), (Decimal('10240'), '10 kB', '-10 kB'), (Decimal('10485247'), '10239 kB', '-10239 kB'), (Decimal('10485248'), '10 MB', '-10 MB'), (Decimal('10736893951'), '10239 MB', '-10239 MB'), (Decimal('10736893952'), '10 GB', '-10 GB'), (Decimal('10994579406847'), '10239 GB', '-10239 GB'), (Decimal('10994579406848'), '10 TB', '-10 TB'), (Decimal('11258449312612351'), '10239 TB', '-10239 TB'), (Decimal('11258449312612352'), '10 PB', '-10 PB'), (Decimal('11528652096115048447'), '10239 PB', '-10239 PB'), (Decimal('11528652096115048448'), '10240 PB', '-10240 PB')]"
postgresql,postgresql,"SELECT size, pg_size_bytes(size) FROM     (VALUES ('1'), ('123bytes'), ('256 B'), ('1kB'), ('1MB'), (' 1 GB'), ('1.5 GB '),             ('1TB'), ('3000 TB'), ('1e6 MB'), ('99 PB')) x(size)",dbsize.sql,SAME,,"[('1', 1), ('123bytes', 123), ('256 B', 256), ('1kB', 1024), ('1MB', 1048576), (' 1 GB', 1073741824), ('1.5 GB ', 1610612736), ('1TB', 1099511627776), ('3000 TB', 3298534883328000), ('1e6 MB', 1048576000000), ('99 PB', 111464090777419776)]"
postgresql,postgresql,"SELECT size, pg_size_bytes(size) FROM     (VALUES ('1'), ('123bYteS'), ('1kb'), ('1mb'), (' 1 Gb'), ('1.5 gB '),             ('1tb'), ('3000 tb'), ('1e6 mb'), ('99 pb')) x(size)",dbsize.sql,SAME,,"[('1', 1), ('123bYteS', 123), ('1kb', 1024), ('1mb', 1048576), (' 1 Gb', 1073741824), ('1.5 gB ', 1610612736), ('1tb', 1099511627776), ('3000 tb', 3298534883328000), ('1e6 mb', 1048576000000), ('99 pb', 111464090777419776)]"
postgresql,postgresql,"SELECT size, pg_size_bytes(size) FROM     (VALUES ('-1'), ('-123bytes'), ('-1kb'), ('-1mb'), (' -1 Gb'), ('-1.5 gB '),             ('-1tb'), ('-3000 TB'), ('-10e-1 MB'), ('-99 PB')) x(size)",dbsize.sql,SAME,,"[('-1', -1), ('-123bytes', -123), ('-1kb', -1024), ('-1mb', -1048576), (' -1 Gb', -1073741824), ('-1.5 gB ', -1610612736), ('-1tb', -1099511627776), ('-3000 TB', -3298534883328000), ('-10e-1 MB', -1048576), ('-99 PB', -111464090777419776)]"
postgresql,postgresql,"SELECT size, pg_size_bytes(size) FROM      (VALUES ('-1.'), ('-1.kb'), ('-1. kb'), ('-0. gb'),              ('-.1'), ('-.1kb'), ('-.1 kb'), ('-.0 gb')) x(size)",dbsize.sql,SAME,,"[('-1.', -1), ('-1.kb', -1024), ('-1. kb', -1024), ('-0. gb', 0), ('-.1', 0), ('-.1kb', -102), ('-.1 kb', -102), ('-.0 gb', 0)]"
postgresql,postgresql,DELETE FROM delete_test AS dt WHERE dt.a > 75,delete.sql,SAME,,[]
postgresql,postgresql,"SELECT id, a, char_length(b) FROM delete_test",delete.sql,SAME,,"[(1, 10, None), (2, 50, 10000)]"
postgresql,postgresql,DELETE FROM delete_test WHERE a > 25,delete.sql,SAME,,[]
postgresql,postgresql,"SELECT id, a, char_length(b) FROM delete_test",delete.sql,SAME,,"[(1, 10, None)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,dependency.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA deptest,dependency.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION deptest_func() RETURNS void LANGUAGE plpgsql   AS $$ BEGIN END; $$,dependency.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE deptest_enum AS ENUM ('red'),dependency.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE deptest_range AS RANGE (SUBTYPE = int4),dependency.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE ss1,dependency.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE deptest2 ALTER f1 SET DEFAULT nextval('ss1'),dependency.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE ss1 OWNED BY deptest2.f1,dependency.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE deptest_t AS (a int),dependency.sql,SAME,,[]
postgresql,postgresql,SELECT typowner = relowner FROM pg_type JOIN pg_class c ON typrelid = c.oid WHERE typname = 'deptest_t',dependency.sql,SAME,,"[(True,)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,dependency.sql,SAME,,[]
postgresql,postgresql,SELECT typowner = relowner FROM pg_type JOIN pg_class c ON typrelid = c.oid WHERE typname = 'deptest_t',dependency.sql,SAME,,"[(True,)]"
postgresql,postgresql,create domain domaindroptest int4,domain.sql,SAME,,[]
postgresql,postgresql,comment on domain domaindroptest is 'About to drop this..',domain.sql,SAME,,[]
postgresql,postgresql,create domain dependenttypetest domaindroptest,domain.sql,SAME,,[]
postgresql,postgresql,drop domain domaindroptest cascade,domain.sql,SAME,,[]
postgresql,postgresql,create domain domainvarchar varchar(5),domain.sql,SAME,,[]
postgresql,postgresql,"create domain domainnumeric numeric(8,2)",domain.sql,SAME,,[]
postgresql,postgresql,create domain domainint4 int4,domain.sql,SAME,,[]
postgresql,postgresql,create domain domaintext text,domain.sql,SAME,,[]
postgresql,postgresql,SELECT cast('123456' as domainvarchar),domain.sql,SAME,,"[('12345',)]"
postgresql,postgresql,SELECT cast('12345' as domainvarchar),domain.sql,SAME,,"[('12345',)]"
postgresql,postgresql,"select testtext || testvarchar as concat, testnumeric + 42 as sum from basictest",domain.sql,SAME,,"[('hahashort', Decimal('165.12')), ('hahashort', Decimal('165.12'))]"
postgresql,postgresql,"select pg_typeof(coalesce(4::domainint4, 7))",domain.sql,SAME,,"[('integer',)]"
postgresql,postgresql,"select pg_typeof(coalesce(4::domainint4, 7::domainint4))",domain.sql,SAME,,"[('domainint4',)]"
postgresql,postgresql,drop domain domainvarchar restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain domainnumeric restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain domainint4 restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain domaintext,domain.sql,SAME,,[]
postgresql,postgresql,create domain positiveint int4 check(value > 0),domain.sql,SAME,,[]
postgresql,postgresql,create domain weirdfloat float8 check((1 / value) < 10),domain.sql,SAME,,[]
postgresql,postgresql,"select pg_input_is_valid('1', 'positiveint')",domain.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_input_is_valid('junk', 'positiveint')",domain.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select pg_input_is_valid('-1', 'positiveint')",domain.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('junk', 'positiveint')",domain.sql,SAME,,"[('invalid input syntax for type integer: ""junk""', None, None, '22P02')]"
postgresql,postgresql,"select * from pg_input_error_info('-1', 'positiveint')",domain.sql,SAME,,"[('value for domain positiveint violates check constraint ""positiveint_check""', None, None, '23514')]"
postgresql,postgresql,"select * from pg_input_error_info('junk', 'weirdfloat')",domain.sql,SAME,,"[('invalid input syntax for type double precision: ""junk""', None, None, '22P02')]"
postgresql,postgresql,"select * from pg_input_error_info('0.01', 'weirdfloat')",domain.sql,SAME,,"[('value for domain weirdfloat violates check constraint ""weirdfloat_check""', None, None, '23514')]"
postgresql,postgresql,drop domain positiveint,domain.sql,SAME,,[]
postgresql,postgresql,drop domain weirdfloat,domain.sql,SAME,,[]
postgresql,postgresql,create domain domainint4arr int4[1],domain.sql,SAME,,[]
postgresql,postgresql,create domain domainchar4arr varchar(4)[2][3],domain.sql,SAME,,[]
postgresql,postgresql,select * from domarrtest,domain.sql,SAME,,"[([2, 2], [['a', 'b'], ['c', 'd']]), ([[2, 2], [2, 2]], [['a', 'b']]), ([2, 2], [['a', 'b'], ['c', 'd'], ['e', 'f']]), ([2, 2], [['a'], ['c']]), (None, [['a', 'b', 'c'], ['d', 'e', 'f']]), ([11, None, 22], None)]"
postgresql,postgresql,"select testint4arr[1], testchar4arr[2:2] from domarrtest",domain.sql,SAME,,"[(2, [['c', 'd']]), (None, []), (2, [['c', 'd']]), (2, [['c']]), (None, [['d', 'e', 'f']]), (11, None)]"
postgresql,postgresql,"select array_dims(testint4arr), array_dims(testchar4arr) from domarrtest",domain.sql,SAME,,"[('[1:2]', '[1:2][1:2]'), ('[1:2][1:2]', '[1:1][1:2]'), ('[1:2]', '[1:3][1:2]'), ('[1:2]', '[1:2][1:1]'), (None, '[1:2][1:3]'), ('[1:3]', None)]"
postgresql,postgresql,"update domarrtest set   testint4arr[1] = testint4arr[1] + 1,   testint4arr[3] = testint4arr[3] - 1 where testchar4arr is null",domain.sql,SAME,,[]
postgresql,postgresql,select * from domarrtest where testchar4arr is null,domain.sql,SAME,,"[([12, None, 21], None)]"
postgresql,postgresql,drop domain domainint4arr restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain domainchar4arr restrict,domain.sql,SAME,,[]
postgresql,postgresql,create domain dia as int[],domain.sql,SAME,,[]
postgresql,postgresql,"select '{1,2,3}'::dia",domain.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"select array_dims('{1,2,3}'::dia)",domain.sql,SAME,,"[('[1:3]',)]"
postgresql,postgresql,"select pg_typeof('{1,2,3}'::dia)",domain.sql,SAME,,"[('dia',)]"
postgresql,postgresql,"select pg_typeof('{1,2,3}'::dia || 42)",domain.sql,SAME,,"[('integer[]',)]"
postgresql,postgresql,drop domain dia,domain.sql,SAME,,[]
postgresql,postgresql,"create type comptype as (r float8, i float8)",domain.sql,SAME,,[]
postgresql,postgresql,create domain dcomptype as comptype,domain.sql,SAME,,[]
postgresql,postgresql,select * from dcomptable,domain.sql,SAME,,"[('(1,2)',), ('(3,4)',), ('(11,)',)]"
postgresql,postgresql,"select (d1).r, (d1).i, (d1).* from dcomptable",domain.sql,SAME,,"[(1.0, 2.0, 1.0, 2.0), (3.0, 4.0, 3.0, 4.0), (11.0, None, 11.0, None)]"
postgresql,postgresql,update dcomptable set d1.r = (d1).r + 1 where (d1).i > 0,domain.sql,SAME,,[]
postgresql,postgresql,select * from dcomptable,domain.sql,SAME,,"[('(11,)',), ('(2,2)',), ('(4,4)',)]"
postgresql,postgresql,alter domain dcomptype add constraint c1 check ((value).r <= (value).i),domain.sql,SAME,,[]
postgresql,postgresql,"update dcomptable set d1.r = (d1).r - 1, d1.i = (d1).i + 1 where (d1).i > 0",domain.sql,SAME,,[]
postgresql,postgresql,select * from dcomptable,domain.sql,SAME,,"[('(11,)',), ('(99,)',), ('(1,3)',), ('(3,5)',), ('(0,3)',), ('(98,101)',)]"
postgresql,postgresql,"explain (verbose, costs off)   update dcomptable set d1.r = (d1).r - 1, d1.i = (d1).i + 1 where (d1).i > 0",domain.sql,SAME,,"[('Update on public.dcomptable',), ('  ->  Seq Scan on public.dcomptable',), (""        Output: ROW(((d1).r - '1'::double precision), ((d1).i + '1'::double precision)), ctid"",), (""        Filter: ((dcomptable.d1).i > '0'::double precision)"",)]"
postgresql,postgresql,"create rule silly as on delete to dcomptable do instead   update dcomptable set d1.r = (d1).r - 1, d1.i = (d1).i + 1 where (d1).i > 0",domain.sql,SAME,,[]
postgresql,postgresql,"create function makedcomp(r float8, i float8) returns dcomptype as 'select row(r, i)' language sql",domain.sql,SAME,,[]
postgresql,postgresql,"select makedcomp(1,2)",domain.sql,SAME,,"[('(1,2)',)]"
postgresql,postgresql,"select * from makedcomp(1,2) m",domain.sql,SAME,,"[(1.0, 2.0)]"
postgresql,postgresql,"select m, m is not null from makedcomp(1,2) m",domain.sql,SAME,,"[('(1,2)', True)]"
postgresql,postgresql,"drop function makedcomp(float8, float8)",domain.sql,SAME,,[]
postgresql,postgresql,drop type comptype cascade,domain.sql,SAME,,[]
postgresql,postgresql,"create type comptype as (r float8, i float8)",domain.sql,SAME,,[]
postgresql,postgresql,create domain dcomptype as comptype,domain.sql,SAME,,[]
postgresql,postgresql,alter domain dcomptype add constraint c1 check ((value).r > 0),domain.sql,SAME,,[]
postgresql,postgresql,comment on constraint c1 on domain dcomptype is 'random commentary',domain.sql,SAME,,[]
postgresql,postgresql,alter type comptype alter attribute r type bigint,domain.sql,SAME,,[]
postgresql,postgresql,alter type comptype drop attribute i,domain.sql,SAME,,[]
postgresql,postgresql,"select conname, obj_description(oid, 'pg_constraint') from pg_constraint   where contypid = 'dcomptype'::regtype",domain.sql,SAME,,"[('c1', 'random commentary')]"
postgresql,postgresql,drop type comptype cascade,domain.sql,SAME,,[]
postgresql,postgresql,"create type comptype as (r float8, i float8)",domain.sql,SAME,,[]
postgresql,postgresql,create domain dcomptypea as comptype[],domain.sql,SAME,,[]
postgresql,postgresql,select * from dcomptable,domain.sql,SAME,,"[('{""(1,2)""}',), ('{""(3,4)"",""(5,6)""}',), ('{""(7,8)"",""(9,10)""}',), ('{""(9,10)""}',), ('{""(11,)""}',)]"
postgresql,postgresql,"select d1[2], d1[1].r, d1[1].i from dcomptable",domain.sql,SAME,,"[(None, 1.0, 2.0), ('(5,6)', 3.0, 4.0), ('(9,10)', 7.0, 8.0), (None, 9.0, 10.0), (None, 11.0, None)]"
postgresql,postgresql,"update dcomptable set d1[2] = row(d1[2].i, d1[2].r)",domain.sql,SAME,,[]
postgresql,postgresql,select * from dcomptable,domain.sql,SAME,,"[('{""(1,2)"",""(,)""}',), ('{""(3,4)"",""(6,5)""}',), ('{""(7,8)"",""(10,9)""}',), ('{""(9,10)"",""(,)""}',), ('{""(11,)"",""(,)""}',)]"
postgresql,postgresql,update dcomptable set d1[1].r = d1[1].r + 1 where d1[1].i > 0,domain.sql,SAME,,[]
postgresql,postgresql,select * from dcomptable,domain.sql,SAME,,"[('{""(11,)"",""(,)""}',), ('{""(2,2)"",""(,)""}',), ('{""(4,4)"",""(6,5)""}',), ('{""(8,8)"",""(10,9)""}',), ('{""(10,10)"",""(,)""}',)]"
postgresql,postgresql,alter domain dcomptypea add constraint c1 check (value[1].r <= value[1].i),domain.sql,SAME,,[]
postgresql,postgresql,"update dcomptable set d1[1].r = d1[1].r - 1, d1[1].i = d1[1].i + 1   where d1[1].i > 0",domain.sql,SAME,,[]
postgresql,postgresql,select * from dcomptable,domain.sql,SAME,,"[('{""(11,)"",""(,)""}',), ('{""(99,)""}',), ('{""(1,3)"",""(,)""}',), ('{""(3,5)"",""(6,5)""}',), ('{""(7,9)"",""(10,9)""}',), ('{""(9,11)"",""(,)""}',), ('{""(0,3)""}',), ('{""(98,101)""}',)]"
postgresql,postgresql,"explain (verbose, costs off)   update dcomptable set d1[1].r = d1[1].r - 1, d1[1].i = d1[1].i + 1     where d1[1].i > 0",domain.sql,SAME,,"[('Update on public.dcomptable',), ('  ->  Seq Scan on public.dcomptable',), (""        Output: (d1[1].r := (d1[1].r - '1'::double precision))[1].i := (d1[1].i + '1'::double precision), ctid"",), (""        Filter: (dcomptable.d1[1].i > '0'::double precision)"",)]"
postgresql,postgresql,"create rule silly as on delete to dcomptable do instead   update dcomptable set d1[1].r = d1[1].r - 1, d1[1].i = d1[1].i + 1     where d1[1].i > 0",domain.sql,SAME,,[]
postgresql,postgresql,drop type comptype cascade,domain.sql,SAME,,[]
postgresql,postgresql,create domain posint as int check (value > 0),domain.sql,SAME,,[]
postgresql,postgresql,update pitable set f1[1] = f1[1] + 1,domain.sql,SAME,,[]
postgresql,postgresql,select * from pitable,domain.sql,SAME,,"[('{43}',)]"
postgresql,postgresql,create domain vc4 as varchar(4),domain.sql,SAME,,[]
postgresql,postgresql,select * from vc4table,domain.sql,SAME,,"[('{""too ""}',)]"
postgresql,postgresql,drop type vc4,domain.sql,SAME,,[]
postgresql,postgresql,create domain dposinta as posint[],domain.sql,SAME,,[]
postgresql,postgresql,"select f1, f1[1], (f1[1])[1] from dposintatable",domain.sql,SAME,,"[('{""{42}""}', '{42}', 42)]"
postgresql,postgresql,select pg_typeof(f1) from dposintatable,domain.sql,SAME,,"[('dposinta[]',)]"
postgresql,postgresql,select pg_typeof(f1[1]) from dposintatable,domain.sql,SAME,,"[('dposinta',)]"
postgresql,postgresql,select pg_typeof(f1[1][1]) from dposintatable,domain.sql,SAME,,"[('dposinta',)]"
postgresql,postgresql,select pg_typeof((f1[1])[1]) from dposintatable,domain.sql,SAME,,"[('posint',)]"
postgresql,postgresql,update dposintatable set f1[2] = array[99],domain.sql,SAME,,[]
postgresql,postgresql,"select f1, f1[1], (f1[2])[1] from dposintatable",domain.sql,SAME,,"[('{""{42}"",""{99}""}', '{42}', 99)]"
postgresql,postgresql,drop domain posint cascade,domain.sql,SAME,,[]
postgresql,postgresql,"create type comptype as (cf1 int, cf2 int)",domain.sql,SAME,,[]
postgresql,postgresql,create domain dcomptype as comptype check ((value).cf1 > 0),domain.sql,SAME,,[]
postgresql,postgresql,update dcomptable set f1[1].cf2 = 5,domain.sql,SAME,,[]
postgresql,postgresql,table dcomptable,domain.sql,SAME,,"[('{""(,5)""}',)]"
postgresql,postgresql,update dcomptable set f1[1].cf1 = 1,domain.sql,SAME,,[]
postgresql,postgresql,table dcomptable,domain.sql,SAME,,"[('{""(1,5)""}',)]"
postgresql,postgresql,alter domain dcomptype drop constraint dcomptype_check,domain.sql,SAME,,[]
postgresql,postgresql,update dcomptable set f1[1].cf1 = -1,domain.sql,SAME,,[]
postgresql,postgresql,table dcomptable,domain.sql,SAME,,"[('{""(-1,5)""}',)]"
postgresql,postgresql,drop type comptype cascade,domain.sql,SAME,,[]
postgresql,postgresql,create domain dnotnull varchar(15) NOT NULL,domain.sql,SAME,,[]
postgresql,postgresql,create domain dnull    varchar(15),domain.sql,SAME,,[]
postgresql,postgresql,create domain dcheck   varchar(15) NOT NULL CHECK (VALUE = 'a' OR VALUE = 'c' OR VALUE = 'd'),domain.sql,SAME,,[]
postgresql,postgresql,SELECT cast('1' as dnotnull),domain.sql,SAME,,"[('1',)]"
postgresql,postgresql,drop domain dnotnull restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain dnull restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain dcheck restrict,domain.sql,SAME,,[]
postgresql,postgresql,create domain ddef1 int4 DEFAULT 3,domain.sql,SAME,,[]
postgresql,postgresql,create domain ddef2 oid DEFAULT '12',domain.sql,SAME,,[]
postgresql,postgresql,create domain ddef3 text DEFAULT 5,domain.sql,SAME,,[]
postgresql,postgresql,create sequence ddef4_seq,domain.sql,SAME,,[]
postgresql,postgresql,create domain ddef4 int4 DEFAULT nextval('ddef4_seq'),domain.sql,SAME,,[]
postgresql,postgresql,"create domain ddef5 numeric(8,2) NOT NULL DEFAULT '12.12'",domain.sql,SAME,,[]
postgresql,postgresql,alter table defaulttest alter column col5 drop default,domain.sql,SAME,,[]
postgresql,postgresql,alter table defaulttest alter column col5 set default null,domain.sql,SAME,,[]
postgresql,postgresql,alter table defaulttest alter column col5 drop default,domain.sql,SAME,,[]
postgresql,postgresql,create domain dnotnulltest integer,domain.sql,SAME,,[]
postgresql,postgresql,update domnotnull set col1 = 5,domain.sql,SAME,,[]
postgresql,postgresql,update domnotnull set col2 = 6,domain.sql,SAME,,[]
postgresql,postgresql,alter domain dnotnulltest set not null,domain.sql,SAME,,[]
postgresql,postgresql,alter domain dnotnulltest drop not null,domain.sql,SAME,,[]
postgresql,postgresql,update domnotnull set col1 = null,domain.sql,SAME,,[]
postgresql,postgresql,drop domain dnotnulltest cascade,domain.sql,SAME,,[]
postgresql,postgresql,select * from domdeftest,domain.sql,SAME,,"[(3,)]"
postgresql,postgresql,alter domain ddef1 set default '42',domain.sql,SAME,,[]
postgresql,postgresql,select * from domdeftest,domain.sql,SAME,,"[(3,), (42,)]"
postgresql,postgresql,alter domain ddef1 drop default,domain.sql,SAME,,[]
postgresql,postgresql,select * from domdeftest,domain.sql,SAME,,"[(3,), (42,), (None,)]"
postgresql,postgresql,create domain con as integer,domain.sql,SAME,,[]
postgresql,postgresql,alter domain con add constraint t check (VALUE < 34),domain.sql,SAME,,[]
postgresql,postgresql,alter domain con add check (VALUE > 0),domain.sql,SAME,,[]
postgresql,postgresql,alter domain con drop constraint t,domain.sql,SAME,,[]
postgresql,postgresql,alter domain con drop constraint if exists nonexistent,domain.sql,SAME,,[]
postgresql,postgresql,create domain connotnull integer,domain.sql,SAME,,[]
postgresql,postgresql,update domconnotnulltest set col1 = 5,domain.sql,SAME,,[]
postgresql,postgresql,update domconnotnulltest set col2 = 6,domain.sql,SAME,,[]
postgresql,postgresql,select count(*) from pg_constraint where contypid = 'connotnull'::regtype and contype = 'n',domain.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from pg_constraint where contypid = 'connotnull'::regtype and contype = 'n',domain.sql,SAME,,"[(0,)]"
postgresql,postgresql,update domconnotnulltest set col1 = null,domain.sql,SAME,,[]
postgresql,postgresql,update domconnotnulltest set col1 = null,domain.sql,SAME,,[]
postgresql,postgresql,drop domain connotnull cascade,domain.sql,SAME,,[]
postgresql,postgresql,create domain things AS INT,domain.sql,SAME,,[]
postgresql,postgresql,ALTER DOMAIN things ADD CONSTRAINT meow CHECK (VALUE < 11) NOT VALID,domain.sql,SAME,,[]
postgresql,postgresql,UPDATE thethings SET stuff = 10,domain.sql,SAME,,[]
postgresql,postgresql,ALTER DOMAIN things VALIDATE CONSTRAINT meow,domain.sql,SAME,,[]
postgresql,postgresql,create domain dom as integer,domain.sql,SAME,,[]
postgresql,postgresql,create view domview as select cast(col1 as dom) from domtab,domain.sql,SAME,,[]
postgresql,postgresql,select * from domview,domain.sql,SAME,,"[(None,), (5,)]"
postgresql,postgresql,alter domain dom set not null,domain.sql,SAME,,[]
postgresql,postgresql,alter domain dom drop not null,domain.sql,SAME,,[]
postgresql,postgresql,select * from domview,domain.sql,SAME,,"[(None,), (5,)]"
postgresql,postgresql,alter domain dom add constraint domchkgt6 check(value > 6),domain.sql,SAME,,[]
postgresql,postgresql,alter domain dom drop constraint domchkgt6 restrict,domain.sql,SAME,,[]
postgresql,postgresql,select * from domview,domain.sql,SAME,,"[(None,), (5,)]"
postgresql,postgresql,drop domain ddef1 restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain ddef2 restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain ddef3 restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain ddef4 restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop domain ddef5 restrict,domain.sql,SAME,,[]
postgresql,postgresql,drop sequence ddef4_seq,domain.sql,SAME,,[]
postgresql,postgresql,create domain vchar4 varchar(4),domain.sql,SAME,,[]
postgresql,postgresql,"create domain dinter vchar4 check (substring(VALUE, 1, 1) = 'x')",domain.sql,SAME,,[]
postgresql,postgresql,"create domain dtop dinter check (substring(VALUE, 2, 1) = '1')",domain.sql,SAME,,[]
postgresql,postgresql,select 'x123'::dtop,domain.sql,SAME,,"[('x123',)]"
postgresql,postgresql,select 'x1234'::dtop,domain.sql,SAME,,"[('x123',)]"
postgresql,postgresql,create temp table dtest(f1 dtop),domain.sql,SAME,,[]
postgresql,postgresql,drop domain vchar4 cascade,domain.sql,SAME,,[]
postgresql,postgresql,create domain str_domain as text not null,domain.sql,SAME,,[]
postgresql,postgresql,create domain str_domain2 as text check (value <> 'foo') default 'foo',domain.sql,SAME,,[]
postgresql,postgresql,create domain pos_int as int4 check (value > 0) not null,domain.sql,SAME,,[]
postgresql,postgresql,"prepare s1 as select $1::pos_int = 10 as ""is_ten""",domain.sql,SAME,,[]
postgresql,postgresql,execute s1(10),domain.sql,SAME,,"[(True,)]"
postgresql,postgresql,create domain posint as int4,domain.sql,SAME,,[]
postgresql,postgresql,create type ddtest1 as (f1 posint),domain.sql,SAME,,[]
postgresql,postgresql,create domain ddtest1d as ddtest1,domain.sql,SAME,,[]
postgresql,postgresql,drop domain ddtest1d,domain.sql,SAME,,[]
postgresql,postgresql,create domain ddtest1d as ddtest1[],domain.sql,SAME,,[]
postgresql,postgresql,drop domain ddtest1d,domain.sql,SAME,,[]
postgresql,postgresql,create type rposint as range (subtype = posint),domain.sql,SAME,,[]
postgresql,postgresql,drop type rposint,domain.sql,SAME,,[]
postgresql,postgresql,alter domain posint add constraint c1 check(value >= 0),domain.sql,SAME,,[]
postgresql,postgresql,create domain posint2 as posint check (value % 2 = 0),domain.sql,SAME,,[]
postgresql,postgresql,alter domain posint add constraint c2 check(value > 0),domain.sql,SAME,,[]
postgresql,postgresql,drop type ddtest1,domain.sql,SAME,,[]
postgresql,postgresql,drop domain posint cascade,domain.sql,SAME,,[]
postgresql,postgresql,"create domain mynums as numeric(4,2)[1]",domain.sql,SAME,,[]
postgresql,postgresql,create domain mynums2 as mynums,domain.sql,SAME,,[]
postgresql,postgresql,create domain orderedpair as int[2] check (value[1] < value[2]),domain.sql,SAME,,[]
postgresql,postgresql,"select array[1,2]::orderedpair",domain.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,create temp table op (f1 orderedpair),domain.sql,SAME,,[]
postgresql,postgresql,update op set f1[2] = 3,domain.sql,SAME,,[]
postgresql,postgresql,select * from op,domain.sql,SAME,,"[([1, 3],)]"
postgresql,postgresql,"create or replace function array_elem_check(int) returns int as $$ declare   x orderedpair := '{1,2}'; begin   x[2] := $1;   return x[2]; end$$ language plpgsql",domain.sql,SAME,,[]
postgresql,postgresql,select array_elem_check(3),domain.sql,SAME,,"[(3,)]"
postgresql,postgresql,drop function array_elem_check(int),domain.sql,SAME,,[]
postgresql,postgresql,create domain di as int,domain.sql,SAME,,[]
postgresql,postgresql,create function dom_check(int) returns di as $$ declare d di; begin   d := $1::di;   return d; end $$ language plpgsql immutable,domain.sql,SAME,,[]
postgresql,postgresql,select dom_check(0),domain.sql,SAME,,"[(0,)]"
postgresql,postgresql,alter domain di add constraint pos check (value > 0),domain.sql,SAME,,[]
postgresql,postgresql,alter domain di drop constraint pos,domain.sql,SAME,,[]
postgresql,postgresql,select dom_check(0),domain.sql,SAME,,"[(0,)]"
postgresql,postgresql,create or replace function dom_check(int) returns di as $$ declare d di; begin   d := $1;   return d; end $$ language plpgsql immutable,domain.sql,SAME,,[]
postgresql,postgresql,select dom_check(0),domain.sql,SAME,,"[(0,)]"
postgresql,postgresql,alter domain di add constraint pos check (value > 0),domain.sql,SAME,,[]
postgresql,postgresql,alter domain di drop constraint pos,domain.sql,SAME,,[]
postgresql,postgresql,select dom_check(0),domain.sql,SAME,,"[(0,)]"
postgresql,postgresql,drop function dom_check(int),domain.sql,SAME,,[]
postgresql,postgresql,drop domain di,domain.sql,SAME,,[]
postgresql,postgresql,"create function sql_is_distinct_from(anyelement, anyelement) returns boolean language sql as 'select $1 is distinct from $2 limit 1'",domain.sql,SAME,,[]
postgresql,postgresql,"create domain inotnull int   check (sql_is_distinct_from(value, null))",domain.sql,SAME,,[]
postgresql,postgresql,select 1::inotnull,domain.sql,SAME,,"[(1,)]"
postgresql,postgresql,drop domain inotnull,domain.sql,SAME,,[]
postgresql,postgresql,"drop function sql_is_distinct_from(anyelement, anyelement)",domain.sql,SAME,,[]
postgresql,postgresql,create domain testdomain1 as int,domain.sql,SAME,,[]
postgresql,postgresql,alter domain testdomain1 rename to testdomain2,domain.sql,SAME,,[]
postgresql,postgresql,alter type testdomain2 rename to testdomain3,domain.sql,SAME,,[]
postgresql,postgresql,drop domain testdomain3,domain.sql,SAME,,[]
postgresql,postgresql,create domain testdomain1 as int constraint unsigned check (value > 0),domain.sql,SAME,,[]
postgresql,postgresql,alter domain testdomain1 rename constraint unsigned to unsigned_foo,domain.sql,SAME,,[]
postgresql,postgresql,alter domain testdomain1 drop constraint unsigned_foo,domain.sql,SAME,,[]
postgresql,postgresql,drop domain testdomain1,domain.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.column_domain_usage   WHERE domain_name IN ('con', 'dom', 'pos_int', 'things')   ORDER BY domain_name",domain.sql,SAME,,"[('test_db', 'public', 'con', 'test_db', 'public', 'domcontest', 'col1'), ('test_db', 'public', 'dom', 'test_db', 'public', 'domview', 'col1'), ('test_db', 'public', 'things', 'test_db', 'public', 'thethings', 'stuff')]"
postgresql,postgresql,"SELECT * FROM information_schema.domain_constraints   WHERE domain_name IN ('con', 'dom', 'pos_int', 'things')   ORDER BY constraint_name",domain.sql,SAME,,"[('test_db', 'public', 'con_check', 'test_db', 'public', 'con', 'NO', 'NO'), ('test_db', 'public', 'meow', 'test_db', 'public', 'things', 'NO', 'NO'), ('test_db', 'public', 'pos_int_check', 'test_db', 'public', 'pos_int', 'NO', 'NO')]"
postgresql,postgresql,"SELECT * FROM information_schema.domains   WHERE domain_name IN ('con', 'dom', 'pos_int', 'things')   ORDER BY domain_name",domain.sql,SAME,,"[('test_db', 'public', 'con', 'integer', None, None, None, None, None, None, None, None, 32, 2, 0, None, None, None, None, 'test_db', 'pg_catalog', 'int4', None, None, None, None, '1'), ('test_db', 'public', 'dom', 'integer', None, None, None, None, None, None, None, None, 32, 2, 0, None, None, None, None, 'test_db', 'pg_catalog', 'int4', None, None, None, None, '1'), ('test_db', 'public', 'pos_int', 'integer', None, None, None, None, None, None, None, None, 32, 2, 0, None, None, None, None, 'test_db', 'pg_catalog', 'int4', None, None, None, None, '1'), ('test_db', 'public', 'things', 'integer', None, None, None, None, None, None, None, None, 32, 2, 0, None, None, None, None, 'test_db', 'pg_catalog', 'int4', None, None, None, None, '1')]"
postgresql,postgresql,"SELECT * FROM information_schema.check_constraints   WHERE (constraint_schema, constraint_name)         IN (SELECT constraint_schema, constraint_name             FROM information_schema.domain_constraints             WHERE domain_name IN ('con', 'dom', 'pos_int', 'things'))   ORDER BY constraint_name",domain.sql,SAME,,"[('test_db', 'public', 'con_check', '((VALUE > 0))'), ('test_db', 'public', 'meow', '((VALUE < 11))'), ('test_db', 'public', 'pos_int_check', '((VALUE > 0))')]"
postgresql,postgresql,DROP VIEW IF EXISTS test_view_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW test_view_exists AS select * from test_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP VIEW IF EXISTS test_view_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP INDEX IF EXISTS test_index_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX test_index_exists on test_exists(a),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP INDEX IF EXISTS test_index_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE IF EXISTS test_sequence_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE test_sequence_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE IF EXISTS test_sequence_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA IF EXISTS test_schema_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA test_schema_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA IF EXISTS test_schema_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TYPE IF EXISTS test_type_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"CREATE type test_type_exists as (a int, b text)",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TYPE IF EXISTS test_type_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN IF EXISTS test_domain_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE domain test_domain_exists as int not null check (value > 0),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN IF EXISTS test_domain_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP COLLATION IF EXISTS test_collation_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP CONVERSION IF EXISTS test_conversion_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE CONVERSION test_conversion_exists     FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP CONVERSION test_conversion_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH PARSER IF EXISTS test_tsparser_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH DICTIONARY IF EXISTS test_tsdict_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY test_tsdict_exists (         Template=ispell,         DictFile=ispell_sample,         AffFile=ispell_sample )",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH DICTIONARY test_tsdict_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH TEMPLATE IF EXISTS test_tstemplate_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH CONFIGURATION IF EXISTS test_tsconfig_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION test_tsconfig_exists (COPY=english),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH CONFIGURATION test_tsconfig_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP EXTENSION IF EXISTS test_extension_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION IF EXISTS test_function_exists(),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"DROP FUNCTION IF EXISTS test_function_exists(int, text, int[])",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP AGGREGATE IF EXISTS test_aggregate_exists(*),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP AGGREGATE IF EXISTS test_aggregate_exists(int),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR IF EXISTS @#@ (int, int)",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR @#@         (leftarg = int8, rightarg = int8, procedure = int8xor)",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR @#@ (int8, int8)",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP LANGUAGE IF EXISTS test_language_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP CAST IF EXISTS (text AS text),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TRIGGER IF EXISTS test_trigger_exists ON test_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TRIGGER IF EXISTS test_trigger_exists ON no_such_table,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TRIGGER IF EXISTS test_trigger_exists ON no_such_schema.no_such_table,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER test_trigger_exists     BEFORE UPDATE ON test_exists     FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger(),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TRIGGER test_trigger_exists ON test_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP RULE IF EXISTS test_rule_exists ON test_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP RULE IF EXISTS test_rule_exists ON no_such_table,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP RULE IF EXISTS test_rule_exists ON no_such_schema.no_such_table,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP RULE test_rule_exists ON test_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP FOREIGN DATA WRAPPER IF EXISTS test_fdw_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP SERVER IF EXISTS test_server_exists,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP OPERATOR CLASS IF EXISTS test_operator_class USING btree,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP OPERATOR FAMILY IF EXISTS test_operator_family USING btree,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP ACCESS METHOD IF EXISTS no_such_am,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP AGGREGATE IF EXISTS no_such_schema.foo(int),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP AGGREGATE IF EXISTS foo(no_such_type),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP AGGREGATE IF EXISTS foo(no_such_schema.no_such_type),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP CAST IF EXISTS (INTEGER AS no_such_type2),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP CAST IF EXISTS (no_such_type1 AS INTEGER),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP CAST IF EXISTS (INTEGER AS no_such_schema.bar),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP CAST IF EXISTS (no_such_schema.foo AS INTEGER),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP COLLATION IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP CONVERSION IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP FOREIGN TABLE IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION IF EXISTS no_such_schema.foo(),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION IF EXISTS foo(no_such_type),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION IF EXISTS foo(no_such_schema.no_such_type),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP INDEX IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP MATERIALIZED VIEW IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR IF EXISTS no_such_schema.+ (int, int)",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR IF EXISTS + (no_such_type, no_such_type)",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR IF EXISTS + (no_such_schema.no_such_type, no_such_schema.no_such_type)",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR IF EXISTS # (NONE, no_such_schema.no_such_type)",drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP OPERATOR CLASS IF EXISTS no_such_schema.widget_ops USING btree,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP OPERATOR FAMILY IF EXISTS no_such_schema.float_ops USING btree,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP RULE IF EXISTS foo ON no_such_schema.bar,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH CONFIGURATION IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH DICTIONARY IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH PARSER IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH TEMPLATE IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TRIGGER IF EXISTS foo ON no_such_schema.bar,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP TYPE IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP VIEW IF EXISTS no_such_schema.foo,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION test_ambiguous_funcname(int) returns int as $$ select $1; $$ language sql,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION test_ambiguous_funcname(text) returns text as $$ select $1; $$ language sql,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION test_ambiguous_funcname(int),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION test_ambiguous_funcname(text),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE PROCEDURE test_ambiguous_procname(int) as $$ begin end; $$ language plpgsql,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,CREATE PROCEDURE test_ambiguous_procname(text) as $$ begin end; $$ language plpgsql,drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP PROCEDURE test_ambiguous_procname(int),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,DROP PROCEDURE test_ambiguous_procname(text),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,drop database if exists test_database_exists (force),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,drop database if exists test_database_exists with (force),drop_if_exists.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR === (         PROCEDURE = int8eq,         LEFTARG = bigint,         RIGHTARG = bigint,         COMMUTATOR = === )",drop_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR !== (         PROCEDURE = int8ne,         LEFTARG = bigint,         RIGHTARG = bigint,         NEGATOR = ===,         COMMUTATOR = !== )",drop_operator.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR !==(bigint, bigint)",drop_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT  ctid, oprcom FROM    pg_catalog.pg_operator fk WHERE   oprcom != 0 AND         NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.oprcom)",drop_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT  ctid, oprnegate FROM    pg_catalog.pg_operator fk WHERE   oprnegate != 0 AND         NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.oprnegate)",drop_operator.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR ===(bigint, bigint)",drop_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR <| (         PROCEDURE = int8lt,         LEFTARG = bigint,         RIGHTARG = bigint )",drop_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR |> (         PROCEDURE = int8gt,         LEFTARG = bigint,         RIGHTARG = bigint,         NEGATOR = <|,         COMMUTATOR = <| )",drop_operator.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR |>(bigint, bigint)",drop_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT  ctid, oprcom FROM    pg_catalog.pg_operator fk WHERE   oprcom != 0 AND         NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.oprcom)",drop_operator.sql,SAME,,[]
postgresql,postgresql,"SELECT  ctid, oprnegate FROM    pg_catalog.pg_operator fk WHERE   oprnegate != 0 AND         NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.oprnegate)",drop_operator.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR <|(bigint, bigint)",drop_operator.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple')",enum.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM pg_enum WHERE enumtypid = 'rainbow'::regtype,enum.sql,SAME,,"[(6,)]"
postgresql,postgresql,SELECT 'red'::rainbow,enum.sql,SAME,,"[('red',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('red', 'rainbow')",enum.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('mauve', 'rainbow')",enum.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('mauve', 'rainbow')",enum.sql,SAME,,"[('invalid input value for enum rainbow: ""mauve""', None, None, '22P02')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info(repeat('too_long', 32), 'rainbow')",enum.sql,SAME,,"[('invalid input value for enum rainbow: ""too_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_long""', None, None, '22P02')]"
postgresql,postgresql,"CREATE TYPE planets AS ENUM ( 'venus', 'earth', 'mars' )",enum.sql,SAME,,[]
postgresql,postgresql,"SELECT enumlabel, enumsortorder FROM pg_enum WHERE enumtypid = 'planets'::regtype ORDER BY 2",enum.sql,SAME,,"[('venus', 1.0), ('earth', 2.0), ('mars', 3.0)]"
postgresql,postgresql,ALTER TYPE planets ADD VALUE 'uranus',enum.sql,SAME,,[]
postgresql,postgresql,"SELECT enumlabel, enumsortorder FROM pg_enum WHERE enumtypid = 'planets'::regtype ORDER BY 2",enum.sql,SAME,,"[('venus', 1.0), ('earth', 2.0), ('mars', 3.0), ('uranus', 4.0)]"
postgresql,postgresql,ALTER TYPE planets ADD VALUE 'mercury' BEFORE 'venus',enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE planets ADD VALUE 'saturn' BEFORE 'uranus',enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE planets ADD VALUE 'jupiter' AFTER 'mars',enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE planets ADD VALUE 'neptune' AFTER 'uranus',enum.sql,SAME,,[]
postgresql,postgresql,"SELECT enumlabel, enumsortorder FROM pg_enum WHERE enumtypid = 'planets'::regtype ORDER BY 2",enum.sql,SAME,,"[('mercury', 0.0), ('venus', 1.0), ('earth', 2.0), ('mars', 3.0), ('jupiter', 3.25), ('saturn', 3.5), ('uranus', 4.0), ('neptune', 5.0)]"
postgresql,postgresql,"SELECT enumlabel, enumsortorder FROM pg_enum WHERE enumtypid = 'planets'::regtype ORDER BY enumlabel::planets",enum.sql,SAME,,"[('mercury', 0.0), ('venus', 1.0), ('earth', 2.0), ('mars', 3.0), ('jupiter', 3.25), ('saturn', 3.5), ('uranus', 4.0), ('neptune', 5.0)]"
postgresql,postgresql,ALTER TYPE planets ADD VALUE IF NOT EXISTS 'mercury',enum.sql,SAME,,[]
postgresql,postgresql,SELECT enum_last(NULL::planets),enum.sql,SAME,,"[('neptune',)]"
postgresql,postgresql,ALTER TYPE planets ADD VALUE IF NOT EXISTS 'pluto',enum.sql,SAME,,[]
postgresql,postgresql,SELECT enum_last(NULL::planets),enum.sql,SAME,,"[('pluto',)]"
postgresql,postgresql,"create type insenum as enum ('L1', 'L2')",enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i1' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i2' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i3' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i4' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i5' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i6' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i7' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i8' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i9' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i10' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i11' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i12' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i13' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i14' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i15' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i16' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i17' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i18' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i19' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i20' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i21' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i22' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i23' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i24' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i25' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i26' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i27' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i28' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i29' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,alter type insenum add value 'i30' before 'L2',enum.sql,SAME,,[]
postgresql,postgresql,"SELECT enumlabel,        case when enumsortorder > 20 then null else enumsortorder end as so FROM pg_enum WHERE enumtypid = 'insenum'::regtype ORDER BY enumsortorder",enum.sql,SAME,,"[('L1', 1.0), ('i1', 2.0), ('i2', 3.0), ('i3', 4.0), ('i4', 5.0), ('i5', 6.0), ('i6', 7.0), ('i7', 8.0), ('i8', 9.0), ('i9', 10.0), ('i10', 11.0), ('i11', 12.0), ('i12', 13.0), ('i13', 14.0), ('i14', 15.0), ('i15', 16.0), ('i16', 17.0), ('i17', 18.0), ('i18', 19.0), ('i19', 20.0), ('i20', None), ('i21', None), ('i22', None), ('i23', None), ('i24', None), ('i25', None), ('i26', None), ('i27', None), ('i28', None), ('i29', None), ('i30', None), ('L2', None)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col = 'orange',enum.sql,SAME,,"[('orange',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col <> 'orange' ORDER BY col,enum.sql,SAME,,"[('red',), ('yellow',), ('green',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col > 'yellow' ORDER BY col,enum.sql,SAME,,"[('green',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col >= 'yellow' ORDER BY col,enum.sql,SAME,,"[('yellow',), ('green',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col < 'green' ORDER BY col,enum.sql,SAME,,"[('red',), ('orange',), ('yellow',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col <= 'green' ORDER BY col,enum.sql,SAME,,"[('red',), ('orange',), ('yellow',), ('green',)]"
postgresql,postgresql,SELECT 'red'::rainbow::text || 'hithere',enum.sql,SAME,,"[('redhithere',)]"
postgresql,postgresql,SELECT 'red'::text::rainbow = 'red'::rainbow,enum.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT min(col) FROM enumtest,enum.sql,SAME,,"[('red',)]"
postgresql,postgresql,SELECT max(col) FROM enumtest,enum.sql,SAME,,"[('green',)]"
postgresql,postgresql,SELECT max(col) FROM enumtest WHERE col < 'green',enum.sql,SAME,,"[('yellow',)]"
postgresql,postgresql,SET enable_seqscan = off,enum.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = off,enum.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX enumtest_btree ON enumtest USING btree (col),enum.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM enumtest WHERE col = 'orange',enum.sql,SAME,,"[('orange',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col <> 'orange' ORDER BY col,enum.sql,SAME,,"[('red',), ('yellow',), ('green',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col > 'yellow' ORDER BY col,enum.sql,SAME,,"[('green',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col >= 'yellow' ORDER BY col,enum.sql,SAME,,"[('yellow',), ('green',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col < 'green' ORDER BY col,enum.sql,SAME,,"[('red',), ('orange',), ('yellow',)]"
postgresql,postgresql,SELECT * FROM enumtest WHERE col <= 'green' ORDER BY col,enum.sql,SAME,,"[('red',), ('orange',), ('yellow',), ('green',)]"
postgresql,postgresql,SELECT min(col) FROM enumtest,enum.sql,SAME,,"[('red',)]"
postgresql,postgresql,SELECT max(col) FROM enumtest,enum.sql,SAME,,"[('green',)]"
postgresql,postgresql,SELECT max(col) FROM enumtest WHERE col < 'green',enum.sql,SAME,,"[('yellow',)]"
postgresql,postgresql,DROP INDEX enumtest_btree,enum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX enumtest_hash ON enumtest USING hash (col),enum.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM enumtest WHERE col = 'orange',enum.sql,SAME,,"[('orange',)]"
postgresql,postgresql,DROP INDEX enumtest_hash,enum.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,enum.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,enum.sql,SAME,,[]
postgresql,postgresql,"CREATE DOMAIN rgb AS rainbow CHECK (VALUE IN ('red', 'green', 'blue'))",enum.sql,SAME,,[]
postgresql,postgresql,SELECT 'red'::rgb,enum.sql,SAME,,"[('red',)]"
postgresql,postgresql,DROP DOMAIN rgb,enum.sql,SAME,,[]
postgresql,postgresql,"SELECT '{red,green,blue}'::rainbow[]",enum.sql,SAME,,"[('{red,green,blue}',)]"
postgresql,postgresql,"SELECT ('{red,green,blue}'::rainbow[])[2]",enum.sql,SAME,,"[('green',)]"
postgresql,postgresql,"SELECT 'red' = ANY ('{red,green,blue}'::rainbow[])",enum.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'yellow' = ANY ('{red,green,blue}'::rainbow[])",enum.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'red' = ALL ('{red,green,blue}'::rainbow[])",enum.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'red' = ALL ('{red,red}'::rainbow[])",enum.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT enum_first(NULL::rainbow),enum.sql,SAME,,"[('red',)]"
postgresql,postgresql,SELECT enum_last('green'::rainbow),enum.sql,SAME,,"[('purple',)]"
postgresql,postgresql,SELECT enum_range(NULL::rainbow),enum.sql,SAME,,"[('{red,orange,yellow,green,blue,purple}',)]"
postgresql,postgresql,"SELECT enum_range('orange'::rainbow, 'green'::rainbow)",enum.sql,SAME,,"[('{orange,yellow,green}',)]"
postgresql,postgresql,"SELECT enum_range(NULL, 'green'::rainbow)",enum.sql,SAME,,"[('{red,orange,yellow,green}',)]"
postgresql,postgresql,"SELECT enum_range('orange'::rainbow, NULL)",enum.sql,SAME,,"[('{orange,yellow,green,blue,purple}',)]"
postgresql,postgresql,"SELECT enum_range(NULL::rainbow, NULL)",enum.sql,SAME,,"[('{red,orange,yellow,green,blue,purple}',)]"
postgresql,postgresql,CREATE FUNCTION echo_me(rainbow) RETURNS text AS $$ BEGIN RETURN $1::text || 'wtf'; END $$ LANGUAGE plpgsql,enum.sql,SAME,,[]
postgresql,postgresql,SELECT echo_me('red'::rainbow),enum.sql,SAME,,"[('redwtf',)]"
postgresql,postgresql,SELECT echo_me('red'),enum.sql,SAME,,"[('redwtf',)]"
postgresql,postgresql,DROP FUNCTION echo_me(rainbow),enum.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE bogus AS ENUM('good', 'bad', 'ugly')",enum.sql,SAME,,[]
postgresql,postgresql,DROP TYPE bogus,enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE rainbow RENAME VALUE 'red' TO 'crimson',enum.sql,SAME,,[]
postgresql,postgresql,"SELECT enumlabel, enumsortorder FROM pg_enum WHERE enumtypid = 'rainbow'::regtype ORDER BY 2",enum.sql,SAME,,"[('crimson', 1.0), ('orange', 2.0), ('yellow', 3.0), ('green', 4.0), ('blue', 5.0), ('purple', 6.0)]"
postgresql,postgresql,CREATE TYPE bogus AS ENUM('good'),enum.sql,SAME,,[]
postgresql,postgresql,BEGIN,enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE bogus ADD VALUE 'new',enum.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT x,enum.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO x,enum.sql,SAME,,[]
postgresql,postgresql,SELECT enum_first(null::bogus),enum.sql,SAME,,"[('good',)]"
postgresql,postgresql,ROLLBACK TO x,enum.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO x,enum.sql,SAME,,[]
postgresql,postgresql,COMMIT,enum.sql,SAME,,[]
postgresql,postgresql,SELECT 'new'::bogus,enum.sql,SAME,,"[('new',)]"
postgresql,postgresql,"SELECT enumlabel, enumsortorder FROM pg_enum WHERE enumtypid = 'bogus'::regtype ORDER BY 2",enum.sql,SAME,,"[('good', 1.0), ('new', 2.0)]"
postgresql,postgresql,BEGIN,enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE bogus RENAME TO bogon,enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE bogon ADD VALUE 'bad',enum.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,enum.sql,SAME,,[]
postgresql,postgresql,BEGIN,enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE bogus RENAME VALUE 'good' to 'bad',enum.sql,SAME,,[]
postgresql,postgresql,SELECT 'bad'::bogus,enum.sql,SAME,,"[('bad',)]"
postgresql,postgresql,ROLLBACK,enum.sql,SAME,,[]
postgresql,postgresql,DROP TYPE bogus,enum.sql,SAME,,[]
postgresql,postgresql,BEGIN,enum.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE bogus AS ENUM('good','bad','ugly')",enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE bogus RENAME TO bogon,enum.sql,SAME,,[]
postgresql,postgresql,select enum_range(null::bogon),enum.sql,SAME,,"[('{good,bad,ugly}',)]"
postgresql,postgresql,ROLLBACK,enum.sql,SAME,,[]
postgresql,postgresql,BEGIN,enum.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE bogus AS ENUM('good'),enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE bogus RENAME TO bogon,enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE bogon ADD VALUE 'bad',enum.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE bogon ADD VALUE 'ugly',enum.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,enum.sql,SAME,,[]
postgresql,postgresql,DROP TYPE rainbow,enum.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM pg_type WHERE typname = 'rainbow',enum.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT * FROM pg_enum WHERE NOT EXISTS   (SELECT 1 FROM pg_type WHERE pg_type.oid = enumtypid),enum.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin = off,equivclass.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = off,equivclass.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select * from ec0 where ff = f1 and f1 = '42'::int8,equivclass.sql,SAME,,"[('Index Scan using ec0_pkey on ec0',), (""  Index Cond: (ff = '42'::bigint)"",), (""  Filter: (f1 = '42'::bigint)"",)]"
postgresql,postgresql,set enable_mergejoin = on,equivclass.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop = off,equivclass.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop = on,equivclass.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = off,equivclass.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = on,equivclass.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop = off,equivclass.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop = on,equivclass.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = off,equivclass.sql,SAME,,[]
postgresql,postgresql,reset session authorization,equivclass.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin to off,equivclass.sql,SAME,,[]
postgresql,postgresql,reset enable_mergejoin,equivclass.sql,SAME,,[]
postgresql,postgresql,"create temp table undername (f1 name, f2 int)",equivclass.sql,SAME,,[]
postgresql,postgresql,"create temp view overview as   select f1::information_schema.sql_identifier as sqli, f2 from undername",equivclass.sql,SAME,,[]
postgresql,postgresql,explain (costs off)     select * from overview where sqli = 'foo' order by sqli,equivclass.sql,SAME,,"[('Seq Scan on undername',), (""  Filter: (f1 = 'foo'::name)"",)]"
postgresql,postgresql,select 1,errors.sql,SAME,,"[(1,)]"
postgresql,postgresql,select,errors.sql,SAME,,[()]
postgresql,postgresql,abort,errors.sql,SAME,,[]
postgresql,postgresql,end,errors.sql,SAME,,[]
postgresql,postgresql,reset role,event_trigger.sql,SAME,,[]
postgresql,postgresql,grant all on table event_trigger_fire1 to public,event_trigger.sql,SAME,,[]
postgresql,postgresql,comment on table event_trigger_fire1 is 'here is a comment',event_trigger.sql,SAME,,[]
postgresql,postgresql,revoke all on table event_trigger_fire1 from public,event_trigger.sql,SAME,,[]
postgresql,postgresql,drop event trigger if exists regress_event_trigger2,event_trigger.sql,SAME,,[]
postgresql,postgresql,drop event trigger if exists regress_event_trigger2,event_trigger.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE a_temp_tbl (),event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,DELETE FROM undroppable_objs WHERE object_identity = 'audit_tbls.schema_two_table_three',event_trigger.sql,SAME,,[]
postgresql,postgresql,DELETE FROM undroppable_objs WHERE object_identity = 'schema_one.table_three',event_trigger.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM dropped_objects WHERE schema IS NULL OR schema <> 'pg_toast',event_trigger.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM dropped_objects WHERE type = 'schema',event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE evttrig.two DROP COLUMN col_c,event_trigger.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE evttrig.one ALTER COLUMN col_b DROP DEFAULT,event_trigger.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE evttrig.one DROP CONSTRAINT one_pkey,event_trigger.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE evttrig.one DROP COLUMN col_c,event_trigger.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE evttrig.id ALTER COLUMN col_d SET DATA TYPE bigint,event_trigger.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE evttrig.id ALTER COLUMN col_d DROP IDENTITY,   ALTER COLUMN col_d SET DATA TYPE int",event_trigger.sql,SAME,,[]
postgresql,postgresql,DROP INDEX evttrig.one_idx,event_trigger.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA evttrig CASCADE,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,alter table rewriteme alter column foo type numeric,event_trigger.sql,SAME,,[]
postgresql,postgresql,alter table rewriteme add column baz int default 0,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,"alter table rewriteme  add column onemore int default 0,  add column another int default -1,  alter column foo type numeric(10,4)",event_trigger.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW heapmv USING heap AS SELECT 1 AS a,event_trigger.sql,SAME,,[]
postgresql,postgresql,DROP MATERIALIZED VIEW heapmv,event_trigger.sql,SAME,,[]
postgresql,postgresql,"alter table rewriteme alter column foo type numeric(12,4)",event_trigger.sql,SAME,,[]
postgresql,postgresql,begin,event_trigger.sql,SAME,,[]
postgresql,postgresql,set timezone to 'UTC',event_trigger.sql,SAME,,[]
postgresql,postgresql,alter table rewriteme alter column bar type timestamp,event_trigger.sql,SAME,,[]
postgresql,postgresql,set timezone to '0',event_trigger.sql,SAME,,[]
postgresql,postgresql,alter table rewriteme alter column bar type timestamptz,event_trigger.sql,SAME,,[]
postgresql,postgresql,set timezone to 'Europe/London',event_trigger.sql,SAME,,[]
postgresql,postgresql,alter table rewriteme alter column bar type timestamp,event_trigger.sql,SAME,,[]
postgresql,postgresql,rollback,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,create type rewritetype as (a int),event_trigger.sql,SAME,,[]
postgresql,postgresql,alter type rewritetype alter attribute a type text cascade,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_reindex_ind ON concur_reindex_tab (c1),event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX concur_reindex_ind,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE concur_reindex_tab,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX CONCURRENTLY concur_reindex_ind,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_tab,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX concur_reindex_ind,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX CONCURRENTLY concur_reindex_ind,event_trigger.sql,SAME,,[]
postgresql,postgresql,DROP INDEX concur_reindex_ind,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE concur_reindex_tab,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_tab,event_trigger.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA concur_reindex_schema,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA concur_reindex_schema,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA CONCURRENTLY concur_reindex_schema,event_trigger.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ind ON concur_reindex_schema.tab (a),event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA concur_reindex_schema,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA CONCURRENTLY concur_reindex_schema,event_trigger.sql,SAME,,[]
postgresql,postgresql,DROP INDEX concur_reindex_schema.ind,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA concur_reindex_schema,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA CONCURRENTLY concur_reindex_schema,event_trigger.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA concur_reindex_schema CASCADE,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE concur_reindex_part,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_part,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE concur_reindex_part,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_part,event_trigger.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX concur_reindex_partidx ON concur_reindex_part (id),event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX concur_reindex_partidx,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX CONCURRENTLY concur_reindex_partidx,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE concur_reindex_part,event_trigger.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY concur_reindex_part,event_trigger.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,END,event_trigger.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON event_trigger_test USING (FALSE),event_trigger.sql,SAME,,[]
postgresql,postgresql,ALTER POLICY p1 ON event_trigger_test USING (TRUE),event_trigger.sql,SAME,,[]
postgresql,postgresql,ALTER POLICY p1 ON event_trigger_test RENAME TO p2,event_trigger.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p2 ON event_trigger_test,event_trigger.sql,SAME,,[]
postgresql,postgresql,"SELECT     e.evtname,     pg_describe_object('pg_event_trigger'::regclass, e.oid, 0) as descr,     b.type, b.object_names, b.object_args,     pg_identify_object(a.classid, a.objid, a.objsubid) as ident   FROM pg_event_trigger as e,     LATERAL pg_identify_object_as_address('pg_event_trigger'::regclass, e.oid, 0) as b,     LATERAL pg_get_object_address(b.type, b.object_names, b.object_args) as a   ORDER BY e.evtname",event_trigger.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY pguc ON event_trigger_test USING (FALSE),event_trigger.sql,SAME,,[]
postgresql,postgresql,DROP POLICY pguc ON event_trigger_test,event_trigger.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY pguc ON event_trigger_test USING (FALSE),event_trigger.sql,SAME,,[]
postgresql,postgresql,DROP POLICY pguc ON event_trigger_test,event_trigger.sql,SAME,,[]
postgresql,postgresql,GRANT SELECT ON user_logins TO public,event_trigger_login.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM user_logins,event_trigger_login.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(*) FROM user_logins,event_trigger_login.sql,SAME,,"[(0,)]"
postgresql,postgresql,end,explain.sql,SAME,,[]
postgresql,postgresql,set jit = off,explain.sql,SAME,,[]
postgresql,postgresql,begin,explain.sql,SAME,,[]
postgresql,postgresql,set local plan_cache_mode = force_generic_plan,explain.sql,SAME,,[]
postgresql,postgresql,rollback,explain.sql,SAME,,[]
postgresql,postgresql,begin,explain.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost=0,explain.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost=0,explain.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size=0,explain.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather=4,explain.sql,SAME,,[]
postgresql,postgresql,rollback,explain.sql,SAME,,[]
postgresql,postgresql,create temp table t1(f1 float8),explain.sql,SAME,,[]
postgresql,postgresql,SELECT date(now())::text = current_date::text,expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT now()::timetz::text = current_time::text,expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT now()::timetz(4)::text = current_time(4)::text,expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT now()::time::text = localtime::text,expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT now()::time(3)::text = localtime(3)::text,expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT current_timestamp = NOW(),expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT length(current_timestamp::text) >= length(current_timestamp(0)::text),expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT now()::timestamp::text = localtimestamp::text,expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT current_time = current_time(7),expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT current_timestamp = current_timestamp(7),expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT localtime = localtime(7),expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT localtimestamp = localtimestamp(7),expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT current_catalog = current_database(),expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT current_schema,expressions.sql,SAME,,"[('public',)]"
postgresql,postgresql,SET search_path = 'notme',expressions.sql,SAME,,[]
postgresql,postgresql,SELECT current_schema,expressions.sql,SAME,,"[(None,)]"
postgresql,postgresql,SET search_path = 'pg_catalog',expressions.sql,SAME,,[]
postgresql,postgresql,SELECT current_schema,expressions.sql,SAME,,"[('pg_catalog',)]"
postgresql,postgresql,RESET search_path,expressions.sql,SAME,,[]
postgresql,postgresql,begin,expressions.sql,SAME,,[]
postgresql,postgresql,"create view numeric_view as   select     f1, f1::numeric(16,4) as f1164, f1::numeric as f1n,     f2, f2::numeric(16,4) as f2164, f2::numeric as f2n   from numeric_tbl",expressions.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from numeric_view",expressions.sql,SAME,,"[('Seq Scan on public.numeric_tbl',), ('  Output: numeric_tbl.f1, (numeric_tbl.f1)::numeric(16,4), (numeric_tbl.f1)::numeric, numeric_tbl.f2, (numeric_tbl.f2)::numeric(16,4), numeric_tbl.f2',)]"
postgresql,postgresql,"create view bpchar_view as   select     f1, f1::character(14) as f114, f1::bpchar as f1n,     f2, f2::character(14) as f214, f2::bpchar as f2n   from bpchar_tbl",expressions.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from bpchar_view   where f1::bpchar = 'foo'",expressions.sql,SAME,,"[('Index Scan using bpchar_tbl_f1_key on public.bpchar_tbl',), ('  Output: bpchar_tbl.f1, (bpchar_tbl.f1)::character(14), (bpchar_tbl.f1)::bpchar, bpchar_tbl.f2, (bpchar_tbl.f2)::character(14), bpchar_tbl.f2',), (""  Index Cond: ((bpchar_tbl.f1)::bpchar = 'foo'::bpchar)"",)]"
postgresql,postgresql,rollback,expressions.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select random() IN (1, 4, 8.0)",expressions.sql,SAME,,"[('Result',), (""  Output: (random() = ANY ('{1,4,8}'::double precision[]))"",)]"
postgresql,postgresql,"explain (verbose, costs off) select random()::int IN (1, 4, 8.0)",expressions.sql,SAME,,"[('Result',), (""  Output: (((random())::integer)::numeric = ANY ('{1,4,8.0}'::numeric[]))"",)]"
postgresql,postgresql,begin,expressions.sql,SAME,,[]
postgresql,postgresql,create function return_int_input(int) returns int as $$ begin 	return $1; end; $$ language plpgsql stable,expressions.sql,SAME,,[]
postgresql,postgresql,create function return_text_input(text) returns text as $$ begin 	return $1; end; $$ language plpgsql stable,expressions.sql,SAME,,[]
postgresql,postgresql,"select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)",expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null)",expressions.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select return_int_input(1) in (null, null, null, null, null, null, null, null, null, null, null)",expressions.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null)",expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)",expressions.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null)",expressions.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select return_text_input('a') in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')",expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)",expressions.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 0)",expressions.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 2, null)",expressions.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null)",expressions.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select return_int_input(1) not in (null, null, null, null, null, null, null, null, null, null, null)",expressions.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)",expressions.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, null)",expressions.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select return_text_input('a') not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')",expressions.sql,SAME,,"[(False,)]"
postgresql,postgresql,rollback,expressions.sql,SAME,,[]
postgresql,postgresql,begin,expressions.sql,SAME,,[]
postgresql,postgresql,rollback,expressions.sql,SAME,,[]
postgresql,postgresql,SET search_path = fast_default,fast_default.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA fast_default,fast_default.sql,SAME,,[]
postgresql,postgresql,END,fast_default.sql,SAME,,[]
postgresql,postgresql,END,fast_default.sql,SAME,,[]
postgresql,postgresql,end,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE has_volatile ADD col1 int,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE has_volatile ADD col2 int DEFAULT 1,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE has_volatile ADD col3 timestamptz DEFAULT current_timestamp,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE has_volatile ADD col4 int DEFAULT (random() * 10000)::int,fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_bpchar BPCHAR(5) DEFAULT 'hello',               ALTER COLUMN c_int SET DEFAULT 2",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_text TEXT  DEFAULT 'world',               ALTER COLUMN c_bpchar SET DEFAULT 'dog'",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_date DATE DEFAULT '2016-06-02',               ALTER COLUMN c_text SET DEFAULT 'cat'",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_timestamp TIMESTAMP DEFAULT '2016-09-01 12:00:00',               ADD COLUMN c_timestamp_null TIMESTAMP,               ALTER COLUMN c_date SET DEFAULT '2010-01-01'",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_array TEXT[]                   DEFAULT '{""This"", ""is"", ""the"", ""real"", ""world""}',               ALTER COLUMN c_timestamp SET DEFAULT '1970-12-31 11:12:13',               ALTER COLUMN c_timestamp_null SET DEFAULT '2016-09-29 12:00:00'",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_small SMALLINT DEFAULT -5,               ADD COLUMN c_small_null SMALLINT,               ALTER COLUMN c_array                   SET DEFAULT '{""This"", ""is"", ""no"", ""fantasy""}'",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_big BIGINT DEFAULT 180000000000018,               ALTER COLUMN c_small SET DEFAULT 9,               ALTER COLUMN c_small_null SET DEFAULT 13",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_num NUMERIC DEFAULT 1.00000000001,               ALTER COLUMN c_big SET DEFAULT -9999999999999999",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_time TIME DEFAULT '12:00:00',               ALTER COLUMN c_num SET DEFAULT 2.000000000000002",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_interval INTERVAL DEFAULT '1 day',               ALTER COLUMN c_time SET DEFAULT '23:59:59'",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ADD COLUMN c_hugetext TEXT DEFAULT repeat('abcdefg',1000),               ALTER COLUMN c_interval SET DEFAULT '3 hours'",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ALTER COLUMN c_interval DROP DEFAULT,               ALTER COLUMN c_hugetext SET DEFAULT repeat('poiuyt', 1000)",fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ALTER COLUMN c_bpchar    DROP DEFAULT,               ALTER COLUMN c_date      DROP DEFAULT,               ALTER COLUMN c_text      DROP DEFAULT,               ALTER COLUMN c_timestamp DROP DEFAULT,               ALTER COLUMN c_array     DROP DEFAULT,               ALTER COLUMN c_small     DROP DEFAULT,               ALTER COLUMN c_big       DROP DEFAULT,               ALTER COLUMN c_num       DROP DEFAULT,               ALTER COLUMN c_time      DROP DEFAULT,               ALTER COLUMN c_hugetext  DROP DEFAULT",fast_default.sql,SAME,,[]
postgresql,postgresql,"SELECT pk, c_int, c_bpchar, c_text, c_date, c_timestamp,        c_timestamp_null, c_array, c_small, c_small_null,        c_big, c_num, c_time, c_interval,        c_hugetext = repeat('abcdefg',1000) as c_hugetext_origdef,        c_hugetext = repeat('poiuyt', 1000) as c_hugetext_newdef FROM T ORDER BY pk",fast_default.sql,SAME,,"[(1, 1, 'hello', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (2, 1, 'hello', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (3, 2, 'hello', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (4, 2, 'hello', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (5, 2, 'dog  ', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (6, 2, 'dog  ', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (7, 2, 'dog  ', 'cat', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (8, 2, 'dog  ', 'cat', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (9, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (10, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (11, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (12, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (13, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (14, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (15, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (16, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (17, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (18, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (19, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (20, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (21, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), datetime.timedelta(days=1), True, False), (22, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), datetime.timedelta(days=1), True, False), (23, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), datetime.timedelta(seconds=10800), True, False), (24, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), datetime.timedelta(seconds=10800), True, False), (25, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), None, False, True), (26, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), None, False, True), (27, 2, None, None, None, None, datetime.datetime(2016, 9, 29, 12, 0), None, None, 13, None, None, None, None, None, None), (28, 2, None, None, None, None, datetime.datetime(2016, 9, 29, 12, 0), None, None, 13, None, None, None, None, None, None)]"
postgresql,postgresql,END,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE T ADD COLUMN c1 TIMESTAMP DEFAULT now(),fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE T ADD COLUMN c2 TIMESTAMP DEFAULT clock_timestamp(),fast_default.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION foolme(timestamptz DEFAULT clock_timestamp())   RETURNS timestamptz   IMMUTABLE AS 'select $1' LANGUAGE sql,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE T ADD COLUMN c3 timestamptz DEFAULT foolme(),fast_default.sql,SAME,,[]
postgresql,postgresql,"SELECT attname, atthasmissing, attmissingval FROM pg_attribute   WHERE attrelid = 't'::regclass AND attnum > 0   ORDER BY attnum",fast_default.sql,SAME,,"[('pk', False, None), ('c1', False, None), ('c2', False, None), ('c3', False, None)]"
postgresql,postgresql,DROP FUNCTION foolme(timestamptz),fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE T ADD COLUMN c_bigint BIGINT NOT NULL DEFAULT -1,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE T ADD COLUMN c_text TEXT DEFAULT 'hello',fast_default.sql,SAME,,[]
postgresql,postgresql,"SELECT c_bigint, c_text FROM T WHERE c_bigint = -1 LIMIT 1",fast_default.sql,SAME,,"[(-1, 'hello')]"
postgresql,postgresql,"EXPLAIN (VERBOSE TRUE, COSTS FALSE) SELECT c_bigint, c_text FROM T WHERE c_bigint = -1 LIMIT 1",fast_default.sql,SAME,,"[('Limit',), ('  Output: c_bigint, c_text',), ('  ->  Seq Scan on fast_default.t',), ('        Output: c_bigint, c_text',), (""        Filter: (t.c_bigint = '-1'::integer)"",)]"
postgresql,postgresql,"SELECT c_bigint, c_text FROM T WHERE c_text = 'hello' LIMIT 1",fast_default.sql,SAME,,"[(-1, 'hello')]"
postgresql,postgresql,"EXPLAIN (VERBOSE TRUE, COSTS FALSE) SELECT c_bigint, c_text FROM T WHERE c_text = 'hello' LIMIT 1",fast_default.sql,SAME,,"[('Limit',), ('  Output: c_bigint, c_text',), ('  ->  Seq Scan on fast_default.t',), ('        Output: c_bigint, c_text',), (""        Filter: (t.c_text = 'hello'::text)"",)]"
postgresql,postgresql,"SELECT COALESCE(c_bigint, pk), COALESCE(c_text, pk::text) FROM T ORDER BY pk LIMIT 10",fast_default.sql,SAME,,"[(-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello')]"
postgresql,postgresql,"SELECT SUM(c_bigint), MAX(c_text COLLATE ""C"" ), MIN(c_text COLLATE ""C"") FROM T",fast_default.sql,SAME,,"[(Decimal('200'), 'hello', '31')]"
postgresql,postgresql,"SELECT * FROM T ORDER BY c_bigint, c_text, pk LIMIT 10",fast_default.sql,SAME,,"[(1, -1, 'hello'), (2, -1, 'hello'), (3, -1, 'hello'), (4, -1, 'hello'), (5, -1, 'hello'), (6, -1, 'hello'), (7, -1, 'hello'), (8, -1, 'hello'), (9, -1, 'hello'), (10, -1, 'hello')]"
postgresql,postgresql,"EXPLAIN (VERBOSE TRUE, COSTS FALSE) SELECT * FROM T ORDER BY c_bigint, c_text, pk LIMIT 10",fast_default.sql,SAME,,"[('Limit',), ('  Output: pk, c_bigint, c_text',), ('  ->  Sort',), ('        Output: pk, c_bigint, c_text',), ('        Sort Key: t.c_bigint, t.c_text, t.pk',), ('        ->  Seq Scan on fast_default.t',), ('              Output: pk, c_bigint, c_text',)]"
postgresql,postgresql,"SELECT * FROM T WHERE c_bigint > -1 ORDER BY c_bigint, c_text, pk LIMIT 10",fast_default.sql,SAME,,"[(11, 1, 'hello'), (12, 2, 'hello'), (13, 3, 'hello'), (14, 4, 'hello'), (15, 5, 'hello'), (16, 6, 'hello'), (17, 7, 'hello'), (18, 8, 'hello'), (19, 9, 'hello'), (20, 10, 'hello')]"
postgresql,postgresql,"EXPLAIN (VERBOSE TRUE, COSTS FALSE) SELECT * FROM T WHERE c_bigint > -1 ORDER BY c_bigint, c_text, pk LIMIT 10",fast_default.sql,SAME,,"[('Limit',), ('  Output: pk, c_bigint, c_text',), ('  ->  Sort',), ('        Output: pk, c_bigint, c_text',), ('        Sort Key: t.c_bigint, t.c_text, t.pk',), ('        ->  Seq Scan on fast_default.t',), ('              Output: pk, c_bigint, c_text',), (""              Filter: (t.c_bigint > '-1'::integer)"",)]"
postgresql,postgresql,DELETE FROM T WHERE pk BETWEEN 10 AND 20 RETURNING *,fast_default.sql,SAME,,"[(10, -1, 'hello'), (11, 1, 'hello'), (12, 2, 'hello'), (13, 3, 'hello'), (14, 4, 'hello'), (15, 5, 'hello'), (16, 6, 'hello'), (17, 7, 'hello'), (18, 8, 'hello'), (19, 9, 'hello'), (20, 10, 'hello')]"
postgresql,postgresql,"EXPLAIN (VERBOSE TRUE, COSTS FALSE) DELETE FROM T WHERE pk BETWEEN 10 AND 20 RETURNING *",fast_default.sql,SAME,,"[('Delete on fast_default.t',), ('  Output: pk, c_bigint, c_text',), ('  ->  Bitmap Heap Scan on fast_default.t',), ('        Output: ctid',), ('        Recheck Cond: ((t.pk >= 10) AND (t.pk <= 20))',), ('        ->  Bitmap Index Scan on t_pkey',), ('              Index Cond: ((t.pk >= 10) AND (t.pk <= 20))',)]"
postgresql,postgresql,"UPDATE T SET c_text = '""' || c_text || '""'  WHERE pk < 10",fast_default.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM T WHERE c_text LIKE '""%""' ORDER BY PK",fast_default.sql,SAME,,"[(1, -1, '""hello""'), (2, -1, '""hello""'), (3, -1, '""hello""'), (4, -1, '""hello""'), (5, -1, '""hello""'), (6, -1, '""hello""'), (7, -1, '""hello""'), (8, -1, '""hello""'), (9, -1, '""hello""')]"
postgresql,postgresql,ALTER TABLE T ADD COLUMN c_int INT NOT NULL DEFAULT -1,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE T ADD COLUMN c_text TEXT DEFAULT 'Hello',fast_default.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE T ALTER COLUMN c_text SET DEFAULT 'world',               ALTER COLUMN c_int  SET DEFAULT 1",fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM T ORDER BY pk,fast_default.sql,SAME,,"[(1, -1, 'Hello'), (2, -1, 'Hello'), (3, -1, 'Hello'), (4, -1, 'Hello'), (5, -1, 'Hello'), (6, -1, 'Hello'), (7, 1, 'world'), (8, 1, 'world')]"
postgresql,postgresql,"CREATE INDEX i ON T(c_int, c_text)",fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT c_text FROM T WHERE c_int = -1,fast_default.sql,SAME,,"[('Hello',), ('Hello',), ('Hello',), ('Hello',), ('Hello',), ('Hello',)]"
postgresql,postgresql,ALTER TABLE t1 ADD COLUMN c text,fast_default.sql,SAME,,[]
postgresql,postgresql,"SELECT a,        stddev(cast((SELECT sum(1) FROM generate_series(1,20) x) AS float4))           OVER (PARTITION BY a,b,c ORDER BY b)        AS z FROM t1",fast_default.sql,SAME,,"[(1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0)]"
postgresql,postgresql,ALTER TABLE t ADD COLUMN x int NOT NULL DEFAULT 4,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t ADD COLUMN y int NOT NULL DEFAULT 5,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, 3, 4, 5)]"
postgresql,postgresql,UPDATE t SET y = 2,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, 3, 4, 2)]"
postgresql,postgresql,ALTER TABLE t ADD COLUMN x int NOT NULL DEFAULT 4,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t ADD COLUMN y int,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, 3, 4, None)]"
postgresql,postgresql,UPDATE t SET y = 2,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, 3, 4, 2)]"
postgresql,postgresql,ALTER TABLE t ADD COLUMN x int,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t ADD COLUMN y int NOT NULL DEFAULT 5,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, 3, None, 5)]"
postgresql,postgresql,UPDATE t SET y = 2,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, 3, None, 2)]"
postgresql,postgresql,ALTER TABLE t ADD COLUMN x int,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t ADD COLUMN y int,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, 3, None, None)]"
postgresql,postgresql,UPDATE t SET y = 2,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, 3, None, 2)]"
postgresql,postgresql,ALTER TABLE t ADD COLUMN x int NOT NULL DEFAULT 4,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t ADD COLUMN y int NOT NULL DEFAULT 5,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, None, 4, 5)]"
postgresql,postgresql,UPDATE t SET y = 2,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, None, 4, 2)]"
postgresql,postgresql,ALTER TABLE t ADD COLUMN x int NOT NULL DEFAULT 4,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t ADD COLUMN y int,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, None, 4, None)]"
postgresql,postgresql,UPDATE t SET y = 2,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, None, 4, 2)]"
postgresql,postgresql,ALTER TABLE t ADD COLUMN x int,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t ADD COLUMN y int NOT NULL DEFAULT 5,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, None, None, 5)]"
postgresql,postgresql,UPDATE t SET y = 2,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, None, None, 2)]"
postgresql,postgresql,ALTER TABLE t ADD COLUMN x int,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t ADD COLUMN y int,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, None, None, None)]"
postgresql,postgresql,UPDATE t SET y = 2,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t,fast_default.sql,SAME,,"[(1, 1, 2, None, None, 2)]"
postgresql,postgresql,ALTER TABLE leader ADD c int,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE leader DROP c,fast_default.sql,SAME,,[]
postgresql,postgresql,DELETE FROM leader,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE vtype ADD COLUMN b DOUBLE PRECISION DEFAULT 0.2,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE vtype ADD COLUMN c BOOLEAN DEFAULT true,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM vtype,fast_default.sql,SAME,,"[(1, 0.2, True)]"
postgresql,postgresql,"ALTER TABLE vtype       ALTER b TYPE text USING b::text,       ALTER c TYPE text USING c::text",fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM vtype,fast_default.sql,SAME,,"[(1, '0.2', 'true')]"
postgresql,postgresql,ALTER TABLE vtype2 ADD COLUMN b varchar(10) DEFAULT 'xxx',fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE vtype2 ALTER COLUMN b SET DEFAULT 'yyy',fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE vtype2 ALTER COLUMN b TYPE varchar(20) USING b::varchar(20),fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM vtype2,fast_default.sql,SAME,,"[(1, 'xxx'), (2, 'yyy')]"
postgresql,postgresql,BEGIN,fast_default.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t ADD COLUMN a int DEFAULT 1,fast_default.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON t(a),fast_default.sql,SAME,,[]
postgresql,postgresql,UPDATE t SET a = NULL,fast_default.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_seqscan = true,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t WHERE a IS NULL,fast_default.sql,SAME,,"[(None,)]"
postgresql,postgresql,SET LOCAL enable_seqscan = false,fast_default.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t WHERE a IS NULL,fast_default.sql,SAME,,"[(None,)]"
postgresql,postgresql,ROLLBACK,fast_default.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA fast_default,fast_default.sql,SAME,,[]
postgresql,postgresql,set search_path = public,fast_default.sql,SAME,,[]
postgresql,postgresql,alter table has_fast_default add column f2 int default 42,fast_default.sql,SAME,,[]
postgresql,postgresql,table has_fast_default,fast_default.sql,SAME,,"[(1, 42)]"
postgresql,postgresql,"SELECT pg_input_is_valid('34.5', 'float4')",float4.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('xyz', 'float4')",float4.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('1e400', 'float4')",float4.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1e400', 'float4')",float4.sql,SAME,,"[('""1e400"" is out of range for type real', None, None, '22003')]"
postgresql,postgresql,SELECT 'NaN'::float4,float4.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'nan'::float4,float4.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT '   NAN  '::float4,float4.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'infinity'::float4,float4.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT '          -INFINiTY   '::float4,float4.sql,SAME,,"[(-inf,)]"
postgresql,postgresql,SELECT 'Infinity'::float4 + 100.0,float4.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT 'Infinity'::float4 / 'Infinity'::float4,float4.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT '42'::float4 / 'Infinity'::float4,float4.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,SELECT 'nan'::float4 / 'nan'::float4,float4.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'nan'::float4 / '0'::float4,float4.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'nan'::numeric::float4,float4.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT * FROM FLOAT4_TBL,float4.sql,SAME,,"[(0.0,), (1004.3,), (-34.84,), (1.2345679e+20,), (1.2345679e-20,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 <> '1004.3',float4.sql,SAME,,"[(0.0,), (-34.84,), (1.2345679e+20,), (1.2345679e-20,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 = '1004.3',float4.sql,SAME,,"[(1004.3,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' > f.f1,float4.sql,SAME,,"[(0.0,), (-34.84,), (1.2345679e-20,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 < '1004.3',float4.sql,SAME,,"[(0.0,), (-34.84,), (1.2345679e-20,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' >= f.f1,float4.sql,SAME,,"[(0.0,), (1004.3,), (-34.84,), (1.2345679e-20,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 <= '1004.3',float4.sql,SAME,,"[(0.0,), (1004.3,), (-34.84,), (1.2345679e-20,)]"
postgresql,postgresql,"SELECT f.f1, f.f1 * '-10' AS x FROM FLOAT4_TBL f    WHERE f.f1 > '0.0'",float4.sql,SAME,,"[(1004.3, -10043.0), (1.2345679e+20, -1.2345678e+21), (1.2345679e-20, -1.2345678e-19)]"
postgresql,postgresql,"SELECT f.f1, f.f1 + '-10' AS x FROM FLOAT4_TBL f    WHERE f.f1 > '0.0'",float4.sql,SAME,,"[(1004.3, 994.3), (1.2345679e+20, 1.2345679e+20), (1.2345679e-20, -10.0)]"
postgresql,postgresql,"SELECT f.f1, f.f1 / '-10' AS x FROM FLOAT4_TBL f    WHERE f.f1 > '0.0'",float4.sql,SAME,,"[(1004.3, -100.43), (1.2345679e+20, -1.2345679e+19), (1.2345679e-20, -1.2345679e-21)]"
postgresql,postgresql,"SELECT f.f1, f.f1 - '-10' AS x FROM FLOAT4_TBL f    WHERE f.f1 > '0.0'",float4.sql,SAME,,"[(1004.3, 1014.3), (1.2345679e+20, 1.2345679e+20), (1.2345679e-20, 10.0)]"
postgresql,postgresql,SELECT * FROM FLOAT4_TBL,float4.sql,SAME,,"[(0.0,), (1004.3,), (-34.84,), (1.2345679e+20,), (1.2345679e-20,)]"
postgresql,postgresql,"SELECT f.f1, @f.f1 AS abs_f1 FROM FLOAT4_TBL f",float4.sql,SAME,,"[(0.0, 0.0), (1004.3, 1004.3), (-34.84, 34.84), (1.2345679e+20, 1.2345679e+20), (1.2345679e-20, 1.2345679e-20)]"
postgresql,postgresql,UPDATE FLOAT4_TBL    SET f1 = FLOAT4_TBL.f1 * '-1'    WHERE FLOAT4_TBL.f1 > '0.0',float4.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FLOAT4_TBL,float4.sql,SAME,,"[(0.0,), (-34.84,), (-1004.3,), (-1.2345679e+20,), (-1.2345679e-20,)]"
postgresql,postgresql,SELECT '32767.4'::float4::int2,float4.sql,SAME,,"[(32767,)]"
postgresql,postgresql,SELECT '-32768.4'::float4::int2,float4.sql,SAME,,"[(-32768,)]"
postgresql,postgresql,SELECT '2147483520'::float4::int4,float4.sql,SAME,,"[(2147483520,)]"
postgresql,postgresql,SELECT '-2147483648.5'::float4::int4,float4.sql,SAME,,"[(-2147483648,)]"
postgresql,postgresql,SELECT '9223369837831520256'::float4::int8,float4.sql,SAME,,"[(9223369837831520256,)]"
postgresql,postgresql,SELECT '-9223372036854775808.5'::float4::int8,float4.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,SELECT float4send('5e-20'::float4),float4.sql,SAME,,"[(<memory at 0x126577d00>,)]"
postgresql,postgresql,SELECT float4send('67e14'::float4),float4.sql,SAME,,"[(<memory at 0x126577b80>,)]"
postgresql,postgresql,SELECT float4send('985e15'::float4),float4.sql,SAME,,"[(<memory at 0x126577940>,)]"
postgresql,postgresql,SELECT float4send('55895e-16'::float4),float4.sql,SAME,,"[(<memory at 0x126577640>,)]"
postgresql,postgresql,SELECT float4send('7038531e-32'::float4),float4.sql,SAME,,"[(<memory at 0x126577c40>,)]"
postgresql,postgresql,SELECT float4send('702990899e-20'::float4),float4.sql,SAME,,"[(<memory at 0x126577e80>,)]"
postgresql,postgresql,SELECT float4send('3e-23'::float4),float4.sql,SAME,,"[(<memory at 0x126577a00>,)]"
postgresql,postgresql,SELECT float4send('57e18'::float4),float4.sql,SAME,,"[(<memory at 0x126577880>,)]"
postgresql,postgresql,SELECT float4send('789e-35'::float4),float4.sql,SAME,,"[(<memory at 0x126577f40>,)]"
postgresql,postgresql,SELECT float4send('2539e-18'::float4),float4.sql,SAME,,"[(<memory at 0x126577dc0>,)]"
postgresql,postgresql,SELECT float4send('76173e28'::float4),float4.sql,SAME,,"[(<memory at 0x126577ac0>,)]"
postgresql,postgresql,SELECT float4send('887745e-11'::float4),float4.sql,SAME,,"[(<memory at 0x1266bc040>,)]"
postgresql,postgresql,SELECT float4send('5382571e-37'::float4),float4.sql,SAME,,"[(<memory at 0x1266bc100>,)]"
postgresql,postgresql,SELECT float4send('82381273e-35'::float4),float4.sql,SAME,,"[(<memory at 0x1266bc1c0>,)]"
postgresql,postgresql,SELECT float4send('750486563e-38'::float4),float4.sql,SAME,,"[(<memory at 0x1266bc280>,)]"
postgresql,postgresql,SELECT float4send('1.17549435e-38'::float4),float4.sql,SAME,,"[(<memory at 0x1266bc340>,)]"
postgresql,postgresql,SELECT float4send('1.1754944e-38'::float4),float4.sql,SAME,,"[(<memory at 0x1266bc400>,)]"
postgresql,postgresql,CREATE TEMP TABLE FLOAT8_TBL(f1 float8),float8.sql,SAME,,[]
postgresql,postgresql,SELECT float8send('2.2250738585072014E-308'::float8),float8.sql,SAME,,"[(<memory at 0x1266bc4c0>,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('34.5', 'float8')",float8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('xyz', 'float8')",float8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('1e4000', 'float8')",float8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1e4000', 'float8')",float8.sql,SAME,,"[('""1e4000"" is out of range for type double precision', None, None, '22003')]"
postgresql,postgresql,SELECT 'NaN'::float8,float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'nan'::float8,float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT '   NAN  '::float8,float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'infinity'::float8,float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT '          -INFINiTY   '::float8,float8.sql,SAME,,"[(-inf,)]"
postgresql,postgresql,SELECT 'Infinity'::float8 + 100.0,float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT 'Infinity'::float8 / 'Infinity'::float8,float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT '42'::float8 / 'Infinity'::float8,float8.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,SELECT 'nan'::float8 / 'nan'::float8,float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'nan'::float8 / '0'::float8,float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'nan'::numeric::float8,float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT * FROM FLOAT8_TBL,float8.sql,SAME,,"[(0.0,), (1004.3,), (-34.84,), (1.2345678901234e+200,), (1.2345678901234e-200,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT8_TBL f WHERE f.f1 <> '1004.3',float8.sql,SAME,,"[(0.0,), (-34.84,), (1.2345678901234e+200,), (1.2345678901234e-200,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT8_TBL f WHERE f.f1 = '1004.3',float8.sql,SAME,,"[(1004.3,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT8_TBL f WHERE '1004.3' > f.f1,float8.sql,SAME,,"[(0.0,), (-34.84,), (1.2345678901234e-200,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT8_TBL f WHERE  f.f1 < '1004.3',float8.sql,SAME,,"[(0.0,), (-34.84,), (1.2345678901234e-200,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT8_TBL f WHERE '1004.3' >= f.f1,float8.sql,SAME,,"[(0.0,), (1004.3,), (-34.84,), (1.2345678901234e-200,)]"
postgresql,postgresql,SELECT f.* FROM FLOAT8_TBL f WHERE  f.f1 <= '1004.3',float8.sql,SAME,,"[(0.0,), (1004.3,), (-34.84,), (1.2345678901234e-200,)]"
postgresql,postgresql,"SELECT f.f1, f.f1 * '-10' AS x    FROM FLOAT8_TBL f    WHERE f.f1 > '0.0'",float8.sql,SAME,,"[(1004.3, -10043.0), (1.2345678901234e+200, -1.2345678901234e+201), (1.2345678901234e-200, -1.2345678901234e-199)]"
postgresql,postgresql,"SELECT f.f1, f.f1 + '-10' AS x    FROM FLOAT8_TBL f    WHERE f.f1 > '0.0'",float8.sql,SAME,,"[(1004.3, 994.3), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, -10.0)]"
postgresql,postgresql,"SELECT f.f1, f.f1 / '-10' AS x    FROM FLOAT8_TBL f    WHERE f.f1 > '0.0'",float8.sql,SAME,,"[(1004.3, -100.42999999999999), (1.2345678901234e+200, -1.2345678901234e+199), (1.2345678901234e-200, -1.2345678901234e-201)]"
postgresql,postgresql,"SELECT f.f1, f.f1 - '-10' AS x    FROM FLOAT8_TBL f    WHERE f.f1 > '0.0'",float8.sql,SAME,,"[(1004.3, 1014.3), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, 10.0)]"
postgresql,postgresql,SELECT f.f1 ^ '2.0' AS square_f1    FROM FLOAT8_TBL f where f.f1 = '1004.3',float8.sql,SAME,,"[(1008618.4899999999,)]"
postgresql,postgresql,"SELECT f.f1, @f.f1 AS abs_f1    FROM FLOAT8_TBL f",float8.sql,SAME,,"[(0.0, 0.0), (1004.3, 1004.3), (-34.84, 34.84), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, 1.2345678901234e-200)]"
postgresql,postgresql,"SELECT f.f1, trunc(f.f1) AS trunc_f1    FROM FLOAT8_TBL f",float8.sql,SAME,,"[(0.0, 0.0), (1004.3, 1004.0), (-34.84, -34.0), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, 0.0)]"
postgresql,postgresql,"SELECT f.f1, round(f.f1) AS round_f1    FROM FLOAT8_TBL f",float8.sql,SAME,,"[(0.0, 0.0), (1004.3, 1004.0), (-34.84, -35.0), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, 0.0)]"
postgresql,postgresql,select ceil(f1) as ceil_f1 from float8_tbl f,float8.sql,SAME,,"[(0.0,), (1005.0,), (-34.0,), (1.2345678901234e+200,), (1.0,)]"
postgresql,postgresql,select ceiling(f1) as ceiling_f1 from float8_tbl f,float8.sql,SAME,,"[(0.0,), (1005.0,), (-34.0,), (1.2345678901234e+200,), (1.0,)]"
postgresql,postgresql,select floor(f1) as floor_f1 from float8_tbl f,float8.sql,SAME,,"[(0.0,), (1004.0,), (-35.0,), (1.2345678901234e+200,), (0.0,)]"
postgresql,postgresql,select sign(f1) as sign_f1 from float8_tbl f,float8.sql,SAME,,"[(0.0,), (1.0,), (-1.0,), (1.0,), (1.0,)]"
postgresql,postgresql,SET extra_float_digits = 0,float8.sql,SAME,,[]
postgresql,postgresql,SELECT sqrt(float8 '64') AS eight,float8.sql,SAME,,"[(8.0,)]"
postgresql,postgresql,SELECT |/ float8 '64' AS eight,float8.sql,SAME,,"[(8.0,)]"
postgresql,postgresql,"SELECT f.f1, |/f.f1 AS sqrt_f1    FROM FLOAT8_TBL f    WHERE f.f1 > '0.0'",float8.sql,SAME,,"[(1004.3, 31.6906926399535), (1.2345678901234e+200, 1.11111110611109e+100), (1.2345678901234e-200, 1.11111110611109e-100)]"
postgresql,postgresql,"SELECT power(float8 '144', float8 '0.5')",float8.sql,SAME,,"[(12.0,)]"
postgresql,postgresql,"SELECT power(float8 'NaN', float8 '0.5')",float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,"SELECT power(float8 '144', float8 'NaN')",float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,"SELECT power(float8 'NaN', float8 'NaN')",float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,"SELECT power(float8 '-1', float8 'NaN')",float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,"SELECT power(float8 '1', float8 'NaN')",float8.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,"SELECT power(float8 'NaN', float8 '0')",float8.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,"SELECT power(float8 'inf', float8 '0')",float8.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,"SELECT power(float8 '-inf', float8 '0')",float8.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,"SELECT power(float8 '0', float8 'inf')",float8.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT power(float8 '1', float8 'inf')",float8.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,"SELECT power(float8 '1', float8 '-inf')",float8.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,"SELECT power(float8 '-1', float8 'inf')",float8.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,"SELECT power(float8 '-1', float8 '-inf')",float8.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,"SELECT power(float8 '0.1', float8 'inf')",float8.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT power(float8 '-0.1', float8 'inf')",float8.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT power(float8 '1.1', float8 'inf')",float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,"SELECT power(float8 '-1.1', float8 'inf')",float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,"SELECT power(float8 '0.1', float8 '-inf')",float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,"SELECT power(float8 '-0.1', float8 '-inf')",float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,"SELECT power(float8 '1.1', float8 '-inf')",float8.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT power(float8 '-1.1', float8 '-inf')",float8.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT power(float8 'inf', float8 '-2')",float8.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT power(float8 'inf', float8 '2')",float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,"SELECT power(float8 'inf', float8 'inf')",float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,"SELECT power(float8 'inf', float8 '-inf')",float8.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT power(float8 '-inf', float8 '-2') = '0'",float8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT power(float8 '-inf', float8 '-3')",float8.sql,SAME,,"[(-0.0,)]"
postgresql,postgresql,"SELECT power(float8 '-inf', float8 '2')",float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,"SELECT power(float8 '-inf', float8 '3')",float8.sql,SAME,,"[(-inf,)]"
postgresql,postgresql,"SELECT power(float8 '-inf', float8 'inf')",float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,"SELECT power(float8 '-inf', float8 '-inf')",float8.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT f.f1, exp(ln(f.f1)) AS exp_ln_f1    FROM FLOAT8_TBL f    WHERE f.f1 > '0.0'",float8.sql,SAME,,"[(1004.3, 1004.3), (1.2345678901234e+200, 1.23456789012338e+200), (1.2345678901234e-200, 1.23456789012339e-200)]"
postgresql,postgresql,"SELECT exp('inf'::float8), exp('-inf'::float8), exp('nan'::float8)",float8.sql,SAME,,"[(inf, 0.0, nan)]"
postgresql,postgresql,SELECT ||/ float8 '27' AS three,float8.sql,SAME,,"[(3.0,)]"
postgresql,postgresql,"SELECT f.f1, ||/f.f1 AS cbrt_f1 FROM FLOAT8_TBL f",float8.sql,SAME,,"[(0.0, 0.0), (1004.3, 10.014312837827), (-34.84, -3.26607421344208), (1.2345678901234e+200, 4.97933859234765e+66), (1.2345678901234e-200, 2.3112042409018e-67)]"
postgresql,postgresql,SELECT * FROM FLOAT8_TBL,float8.sql,SAME,,"[(0.0,), (1004.3,), (-34.84,), (1.2345678901234e+200,), (1.2345678901234e-200,)]"
postgresql,postgresql,UPDATE FLOAT8_TBL    SET f1 = FLOAT8_TBL.f1 * '-1'    WHERE FLOAT8_TBL.f1 > '0.0',float8.sql,SAME,,[]
postgresql,postgresql,SELECT 0 ^ 0 + 0 ^ 1 + 0 ^ 0.0 + 0 ^ 0.5,float8.sql,SAME,,"[(2.0,)]"
postgresql,postgresql,SELECT * FROM FLOAT8_TBL,float8.sql,SAME,,"[(0.0,), (-34.84,), (-1004.3,), (-1.2345678901234e+200,), (-1.2345678901234e-200,)]"
postgresql,postgresql,SELECT sinh(float8 '1'),float8.sql,SAME,,"[(1.1752011936438,)]"
postgresql,postgresql,SELECT cosh(float8 '1'),float8.sql,SAME,,"[(1.54308063481524,)]"
postgresql,postgresql,SELECT tanh(float8 '1'),float8.sql,SAME,,"[(0.761594155955765,)]"
postgresql,postgresql,SELECT asinh(float8 '1'),float8.sql,SAME,,"[(0.881373587019543,)]"
postgresql,postgresql,SELECT acosh(float8 '2'),float8.sql,SAME,,"[(1.31695789692482,)]"
postgresql,postgresql,SELECT atanh(float8 '0.5'),float8.sql,SAME,,"[(0.549306144334055,)]"
postgresql,postgresql,SELECT sinh(float8 'infinity'),float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT sinh(float8 '-infinity'),float8.sql,SAME,,"[(-inf,)]"
postgresql,postgresql,SELECT sinh(float8 'nan'),float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT cosh(float8 'infinity'),float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT cosh(float8 '-infinity'),float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT cosh(float8 'nan'),float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT tanh(float8 'infinity'),float8.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,SELECT tanh(float8 '-infinity'),float8.sql,SAME,,"[(-1.0,)]"
postgresql,postgresql,SELECT tanh(float8 'nan'),float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT asinh(float8 'infinity'),float8.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT asinh(float8 '-infinity'),float8.sql,SAME,,"[(-inf,)]"
postgresql,postgresql,SELECT asinh(float8 'nan'),float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT acosh(float8 'nan'),float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT atanh(float8 'nan'),float8.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SET extra_float_digits = -1,float8.sql,SAME,,[]
postgresql,postgresql,"SELECT x,        erf(x),        erfc(x) FROM (VALUES (float8 '-infinity'),       (-28), (-6), (-3.4), (-2.1), (-1.1), (-0.45),       (-1.2e-9), (-2.3e-13), (-1.2e-17), (0),       (1.2e-17), (2.3e-13), (1.2e-9),       (0.45), (1.1), (2.1), (3.4), (6), (28),       (float8 'infinity'), (float8 'nan')) AS t(x)",float8.sql,SAME,,"[(-inf, -1.0, 2.0), (-28.0, -1.0, 2.0), (-6.0, -1.0, 2.0), (-3.4, -0.99999847800664, 1.9999984780066), (-2.1, -0.99702053334367, 1.9970205333437), (-1.1, -0.88020506957408, 1.8802050695741), (-0.45, -0.47548171978692, 1.4754817197869), (-1.2e-09, -1.3540550005146e-09, 1.0000000013541), (-2.3e-13, -2.5952720843197e-13, 1.0000000000003), (-1.2e-17, -1.3540550005146e-17, 1.0), (0.0, 0.0, 1.0), (1.2e-17, 1.3540550005146e-17, 1.0), (2.3e-13, 2.5952720843197e-13, 0.99999999999974), (1.2e-09, 1.3540550005146e-09, 0.99999999864595), (0.45, 0.47548171978692, 0.52451828021308), (1.1, 0.88020506957408, 0.11979493042592), (2.1, 0.99702053334367, 0.002979466656333), (3.4, 0.99999847800664, 1.5219933628623e-06), (6.0, 1.0, 2.1519736712499e-17), (28.0, 1.0, 0.0), (inf, 1.0, 0.0), (nan, nan, nan)]"
postgresql,postgresql,RESET extra_float_digits,float8.sql,SAME,,[]
postgresql,postgresql,SELECT '32767.4'::float8::int2,float8.sql,SAME,,"[(32767,)]"
postgresql,postgresql,SELECT '-32768.4'::float8::int2,float8.sql,SAME,,"[(-32768,)]"
postgresql,postgresql,SELECT '2147483647.4'::float8::int4,float8.sql,SAME,,"[(2147483647,)]"
postgresql,postgresql,SELECT '-2147483648.4'::float8::int4,float8.sql,SAME,,"[(-2147483648,)]"
postgresql,postgresql,SELECT '9223372036854773760'::float8::int8,float8.sql,SAME,,"[(9223372036854773760,)]"
postgresql,postgresql,SELECT '-9223372036854775808.5'::float8::int8,float8.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,"SELECT x,        sind(x),        sind(x) IN (-1,-0.5,0,0.5,1) AS sind_exact FROM (VALUES (0), (30), (90), (150), (180),       (210), (270), (330), (360)) AS t(x)",float8.sql,SAME,,"[(0, 0.0, True), (30, 0.5, True), (90, 1.0, True), (150, 0.5, True), (180, 0.0, True), (210, -0.5, True), (270, -1.0, True), (330, -0.5, True), (360, 0.0, True)]"
postgresql,postgresql,"SELECT x,        cosd(x),        cosd(x) IN (-1,-0.5,0,0.5,1) AS cosd_exact FROM (VALUES (0), (60), (90), (120), (180),       (240), (270), (300), (360)) AS t(x)",float8.sql,SAME,,"[(0, 1.0, True), (60, 0.5, True), (90, 0.0, True), (120, -0.5, True), (180, -1.0, True), (240, -0.5, True), (270, 0.0, True), (300, 0.5, True), (360, 1.0, True)]"
postgresql,postgresql,"SELECT x,        tand(x),        tand(x) IN ('-Infinity'::float8,-1,0,                    1,'Infinity'::float8) AS tand_exact,        cotd(x),        cotd(x) IN ('-Infinity'::float8,-1,0,                    1,'Infinity'::float8) AS cotd_exact FROM (VALUES (0), (45), (90), (135), (180),       (225), (270), (315), (360)) AS t(x)",float8.sql,SAME,,"[(0, 0.0, True, inf, True), (45, 1.0, True, 1.0, True), (90, inf, True, 0.0, True), (135, -1.0, True, -1.0, True), (180, 0.0, True, -inf, True), (225, 1.0, True, 1.0, True), (270, -inf, True, 0.0, True), (315, -1.0, True, -1.0, True), (360, 0.0, True, inf, True)]"
postgresql,postgresql,"SELECT x,        asind(x),        asind(x) IN (-90,-30,0,30,90) AS asind_exact,        acosd(x),        acosd(x) IN (0,60,90,120,180) AS acosd_exact FROM (VALUES (-1), (-0.5), (0), (0.5), (1)) AS t(x)",float8.sql,SAME,,"[(Decimal('-1'), -90.0, True, 180.0, True), (Decimal('-0.5'), -30.0, True, 120.0, True), (Decimal('0'), 0.0, True, 90.0, True), (Decimal('0.5'), 30.0, True, 60.0, True), (Decimal('1'), 90.0, True, 0.0, True)]"
postgresql,postgresql,"SELECT x,        atand(x),        atand(x) IN (-90,-45,0,45,90) AS atand_exact FROM (VALUES ('-Infinity'::float8), (-1), (0), (1),       ('Infinity'::float8)) AS t(x)",float8.sql,SAME,,"[(-inf, -90.0, True), (-1.0, -45.0, True), (0.0, 0.0, True), (1.0, 45.0, True), (inf, 90.0, True)]"
postgresql,postgresql,"SELECT x, y,        atan2d(y, x),        atan2d(y, x) IN (-90,0,90,180) AS atan2d_exact FROM (SELECT 10*cosd(a), 10*sind(a)       FROM generate_series(0, 360, 90) AS t(a)) AS t(x,y)",float8.sql,SAME,,"[(10.0, 0.0, 0.0, True), (0.0, 10.0, 90.0, True), (-10.0, 0.0, 180.0, True), (0.0, -10.0, -90.0, True), (10.0, 0.0, 0.0, True)]"
postgresql,postgresql,SET client_min_messages TO 'warning',foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT fdwname, fdwhandler::regproc, fdwvalidator::regproc, fdwoptions FROM pg_foreign_data_wrapper ORDER BY 1, 2, 3",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT srvname, srvoptions FROM pg_foreign_server",foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,DROP FOREIGN DATA WRAPPER IF EXISTS nonexistent,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,DROP SERVER IF EXISTS nonexistent,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,DROP USER MAPPING IF EXISTS FOR regress_test_missing_role SERVER s4,foreign_data.sql,SAME,,[]
postgresql,postgresql,DROP USER MAPPING IF EXISTS FOR user SERVER ss4,foreign_data.sql,SAME,,[]
postgresql,postgresql,DROP USER MAPPING IF EXISTS FOR public SERVER s7,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA foreign_schema,foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON lt1 (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ON lt1 (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE lt1 ADD PRIMARY KEY (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON lt1 (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ON lt1 (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE lt1 ADD PRIMARY KEY (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON lt1 (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ON lt1 (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE lt1 ADD PRIMARY KEY (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ON lt1 (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c4 integer,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c6 integer,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c7 integer NOT NULL,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c8 integer,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c9 integer,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c10 integer OPTIONS (p1 'v1'),foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c6 SET NOT NULL,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c7 DROP NOT NULL,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c8 TYPE char(10),foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c8 SET DATA TYPE text,foreign_data.sql,SAME,,[]
postgresql,postgresql,"ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c7 OPTIONS (ADD p1 'v1', ADD p2 'v2'),                         ALTER COLUMN c8 OPTIONS (ADD p1 'v1', ADD p2 'v2')",foreign_data.sql,SAME,,[]
postgresql,postgresql,"ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c8 OPTIONS (SET p2 'V2', DROP p1)",foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP CONSTRAINT IF EXISTS no_const,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP CONSTRAINT ft1_c1_check,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 OWNER TO regress_test_role,foreign_data.sql,SAME,,[]
postgresql,postgresql,"ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 OPTIONS (DROP delimiter, SET quote '~', ADD escape '@')",foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP COLUMN IF EXISTS no_column,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP COLUMN c9,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 SET SCHEMA foreign_schema,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 RENAME c1 TO foreign_column_1,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 RENAME TO foreign_table_1,foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.foreign_data_wrappers ORDER BY 1, 2",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.foreign_data_wrapper_options ORDER BY 1, 2, 3",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.foreign_servers ORDER BY 1, 2",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.foreign_server_options ORDER BY 1, 2, 3",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.user_mappings ORDER BY lower(authorization_identifier), 2, 3",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.user_mapping_options ORDER BY lower(authorization_identifier), 2, 3, 4",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.usage_privileges WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.role_usage_grants WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.foreign_tables ORDER BY 1, 2, 3",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.foreign_table_options ORDER BY 1, 2, 3, 4",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.user_mapping_options ORDER BY 1, 2, 3, 4",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.usage_privileges WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.role_usage_grants WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.user_mapping_options ORDER BY 1, 2, 3, 4",foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT has_foreign_data_wrapper_privilege('regress_test_role',     (SELECT oid FROM pg_foreign_data_wrapper WHERE fdwname='foo'), 'USAGE')",foreign_data.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT has_foreign_data_wrapper_privilege(     (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'),     (SELECT oid FROM pg_foreign_data_wrapper WHERE fdwname='foo'), 'USAGE')",foreign_data.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT has_foreign_data_wrapper_privilege(     (SELECT oid FROM pg_foreign_data_wrapper WHERE fdwname='foo'), 'USAGE')",foreign_data.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT has_foreign_data_wrapper_privilege(     (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'), 'foo', 'USAGE')",foreign_data.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT has_server_privilege('regress_test_role',     (SELECT oid FROM pg_foreign_server WHERE srvname='s8'), 'USAGE')",foreign_data.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT has_server_privilege(     (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'),     (SELECT oid FROM pg_foreign_server WHERE srvname='s8'), 'USAGE')",foreign_data.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT has_server_privilege(     (SELECT oid FROM pg_foreign_server WHERE srvname='s8'), 'USAGE')",foreign_data.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT has_server_privilege(     (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'), 's8', 'USAGE')",foreign_data.sql,SAME,,"[(None,)]"
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION dummy_trigger() RETURNS TRIGGER AS $$   BEGIN     RETURN NULL;   END $$ language plpgsql,foreign_data.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION dummy_trigger(),foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ADD COLUMN c4 integer,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ADD COLUMN c5 integer DEFAULT 0,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ADD COLUMN c6 integer,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ADD COLUMN c7 integer NOT NULL,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ADD COLUMN c8 integer,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c4 SET DEFAULT 0,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c5 DROP DEFAULT,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c6 SET NOT NULL,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c7 DROP NOT NULL,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c8 TYPE char(10) USING '0',foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c8 TYPE char(10),foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c8 SET DATA TYPE text,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c1 SET STATISTICS 10000,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c1 SET (n_distinct = 100),foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c8 SET STATISTICS -1,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ALTER COLUMN c8 SET STORAGE EXTERNAL,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 DROP COLUMN c4,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 DROP COLUMN c5,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 DROP COLUMN c6,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 DROP COLUMN c7,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 DROP COLUMN c8,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk1 CHECK (c1 > 0) NO INHERIT,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk2 CHECK (c2 <> ''),foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, conname, contype, conislocal, coninhcount, connoinherit   FROM pg_class AS pc JOIN pg_constraint AS pgc ON (conrelid = pc.oid)   WHERE pc.relname = 'fd_pt1'   ORDER BY 1,2",foreign_data.sql,SAME,,"[('fd_pt1', 'fd_pt1chk1', 'c', True, 0, True), ('fd_pt1', 'fd_pt1chk2', 'c', True, 0, False)]"
postgresql,postgresql,ALTER TABLE fd_pt1 DROP CONSTRAINT fd_pt1chk1 CASCADE,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 DROP CONSTRAINT fd_pt1chk2 CASCADE,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk3 CHECK (c2 <> '') NOT VALID,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 VALIDATE CONSTRAINT fd_pt1chk3,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 RENAME COLUMN c1 TO f1,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 RENAME COLUMN c2 TO f2,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 RENAME COLUMN c3 TO f3,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt1 RENAME CONSTRAINT fd_pt1chk3 TO f2_check,foreign_data.sql,SAME,,[]
postgresql,postgresql,DROP FOREIGN TABLE IF EXISTS no_table,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt2 ALTER c2 SET NOT NULL,foreign_data.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fd_pt2 ADD CONSTRAINT fd_pt2chk1 CHECK (c1 > 0),foreign_data.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temp_parted (a int) PARTITION BY LIST (a),foreign_data.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA foreign_schema CASCADE,foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT fdwname, fdwhandler, fdwvalidator, fdwoptions FROM pg_foreign_data_wrapper",foreign_data.sql,SAME,,[]
postgresql,postgresql,"SELECT srvname, srvoptions FROM pg_foreign_server",foreign_data.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 2), (2, 3), (3, 4), (None, 1)]"
postgresql,postgresql,DELETE FROM PKTABLE WHERE ptest1=1,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(2, 3), (3, 4), (None, 1)]"
postgresql,postgresql,UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(3, 4), (None, 1), (1, 3)]"
postgresql,postgresql,COMMENT ON CONSTRAINT constrname ON FKTABLE IS 'fk constraint comment',foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMENT ON CONSTRAINT constrname ON FKTABLE IS NULL,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 2, 4), (1, 3, 5), (2, 4, 8), (3, 6, 12), (None, None, 0)]"
postgresql,postgresql,DELETE FROM PKTABLE WHERE ptest1=1 and ptest2=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 3, 5), (2, 4, 8), (3, 6, 12), (None, None, 0), (None, None, 4)]"
postgresql,postgresql,DELETE FROM PKTABLE WHERE ptest1=5 and ptest2=10,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 3, 5), (2, 4, 8), (3, 6, 12), (None, None, 0), (None, None, 4)]"
postgresql,postgresql,UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 3, 5), (3, 6, 12), (None, None, 0), (None, None, 4), (None, None, 8)]"
postgresql,postgresql,UPDATE FKTABLE SET ftest1 = 1 WHERE ftest1 = 1,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE PKTABLE ALTER COLUMN ptest1 TYPE bigint,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE FKTABLE ALTER COLUMN ftest1 TYPE bigint,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM PKTABLE,foreign_key.sql,SAME,,"[(1, 3, 'Test1-2'), (3, 6, 'Test3'), (4, 8, 'Test4'), (1, 4, 'Test2')]"
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(3, 6, 12), (None, None, 0), (None, None, 4), (None, None, 8), (1, 3, 5)]"
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 2, 4), (1, 3, 5), (2, 4, 8), (3, 6, 12), (None, None, 0)]"
postgresql,postgresql,DELETE FROM PKTABLE WHERE ptest1=1 and ptest2=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 3, 5), (2, 4, 8), (3, 6, 12), (None, None, 0), (-1, -2, 4)]"
postgresql,postgresql,DELETE FROM PKTABLE WHERE ptest1=5 and ptest2=10,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 3, 5), (2, 4, 8), (3, 6, 12), (None, None, 0), (-1, -2, 4)]"
postgresql,postgresql,UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 3, 5), (3, 6, 12), (None, None, 0), (-1, -2, 4), (-1, -2, 8)]"
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 2), (2, 3), (3, 4), (None, 1)]"
postgresql,postgresql,SELECT * FROM PKTABLE,foreign_key.sql,SAME,,"[(1, 'Test1'), (2, 'Test2'), (3, 'Test3'), (4, 'Test4'), (5, 'Test5')]"
postgresql,postgresql,DELETE FROM PKTABLE WHERE ptest1=5,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM PKTABLE,foreign_key.sql,SAME,,"[(1, 'Test1'), (2, 'Test2'), (3, 'Test3'), (4, 'Test4')]"
postgresql,postgresql,UPDATE PKTABLE SET ptest1=0 WHERE ptest1=4,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM PKTABLE,foreign_key.sql,SAME,,"[(1, 'Test1'), (2, 'Test2'), (3, 'Test3'), (0, 'Test4')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(1, 2, 3, 1), (None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5)]"
postgresql,postgresql,UPDATE PKTABLE set ptest1=1 WHERE ptest2=3,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM PKTABLE where ptest1=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(1, 2, 3, 'test1'), (1, 3, 3, 'test2'), (1, 3, 4, 'test3')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(1, 2, 3, 1), (None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5)]"
postgresql,postgresql,DELETE FROM PKTABLE WHERE ptest1 = 2,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM PKTABLE,foreign_key.sql,SAME,,"[(1, 2, 3, 'test1'), (1, 3, None, 'test2')]"
postgresql,postgresql,SELECT * FROM FKTABLE,foreign_key.sql,SAME,,"[(1, 2, 3, 1)]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(1, 2, 3, 1), (None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5)]"
postgresql,postgresql,UPDATE PKTABLE set ptest2=5 where ptest2=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE PKTABLE set ptest1=1 WHERE ptest2=3,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(2, 4, 5, 'test4'), (1, 5, 3, 'test1'), (1, 3, 3, 'test2'), (1, 3, 4, 'test3')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5), (1, 5, 3, 1)]"
postgresql,postgresql,DELETE FROM PKTABLE where ptest1=1 and ptest2=5 and ptest3=3,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(2, 4, 5, 'test4'), (1, 3, 3, 'test2'), (1, 3, 4, 'test3')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5)]"
postgresql,postgresql,DELETE FROM PKTABLE where ptest1=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(1, 3, 3, 'test2'), (1, 3, 4, 'test3')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5)]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(1, 2, 3, 1), (2, 3, 4, 1), (None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5)]"
postgresql,postgresql,UPDATE PKTABLE set ptest2=5 where ptest2=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE PKTABLE set ptest2=2 WHERE ptest2=3 and ptest1=1,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(2, 3, 4, 'test3'), (2, 4, 5, 'test4'), (1, 5, 3, 'test1'), (1, 2, 3, 'test2')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(2, 3, 4, 1), (None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5), (None, None, None, 1)]"
postgresql,postgresql,DELETE FROM PKTABLE where ptest1=2 and ptest2=3 and ptest3=4,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(2, 4, 5, 'test4'), (1, 5, 3, 'test1'), (1, 2, 3, 'test2')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5), (None, None, None, 1), (0, None, None, 1)]"
postgresql,postgresql,DELETE FROM PKTABLE where ptest2=5,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(2, 4, 5, 'test4'), (1, 2, 3, 'test2')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5), (None, None, None, 1), (0, None, None, 1)]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(1, 2, 3, 1), (2, 3, 4, 1), (2, 4, 5, 1), (None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5)]"
postgresql,postgresql,"UPDATE PKTABLE set ptest1=0, ptest2=-1, ptest3=-2 where ptest2=2",foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE PKTABLE set ptest2=10 where ptest2=4,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE PKTABLE set ptest2=2 WHERE ptest2=3 and ptest1=1,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(2, 3, 4, 'test3'), (2, -1, 5, 'test5'), (0, -1, -2, 'test1'), (2, 10, 5, 'test4'), (1, 2, 3, 'test2')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(2, 3, 4, 1), (None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5), (0, -1, -2, 1), (0, -1, -2, 1)]"
postgresql,postgresql,DELETE FROM PKTABLE where ptest1=2 and ptest2=3 and ptest3=4,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(2, -1, 5, 'test5'), (0, -1, -2, 'test1'), (2, 10, 5, 'test4'), (1, 2, 3, 'test2')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5), (0, -1, -2, 1), (0, -1, -2, 1), (None, None, None, 1)]"
postgresql,postgresql,DELETE FROM PKTABLE where ptest2=-1 and ptest3=5,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * from PKTABLE,foreign_key.sql,SAME,,"[(0, -1, -2, 'test1'), (2, 10, 5, 'test4'), (1, 2, 3, 'test2')]"
postgresql,postgresql,SELECT * from FKTABLE,foreign_key.sql,SAME,,"[(None, 2, 3, 2), (2, None, 3, 3), (None, 2, 7, 4), (None, 3, 4, 5), (0, -1, -2, 1), (0, -1, -2, 1), (None, None, None, 1)]"
postgresql,postgresql,SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conrelid = 'fktable'::regclass::oid ORDER BY oid,foreign_key.sql,SAME,,"[('FOREIGN KEY (tid, fk_id_del_set_null) REFERENCES pktable(tid, id) ON DELETE SET NULL (fk_id_del_set_null)',), ('FOREIGN KEY (tid, fk_id_del_set_default) REFERENCES pktable(tid, id) ON DELETE SET DEFAULT (fk_id_del_set_default)',)]"
postgresql,postgresql,DELETE FROM PKTABLE WHERE id = 1 OR id = 2,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM FKTABLE ORDER BY id,foreign_key.sql,SAME,,"[(1, 1, None, None), (1, 2, None, 0)]"
postgresql,postgresql,UPDATE FKTABLE SET ftest1 = ftest1,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE FKTABLE SET ftest1 = ftest1,foreign_key.sql,SAME,,[]
postgresql,postgresql,update pktable set base1=base1*4 where base1<3,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from pktable where base1>3,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from pktable,foreign_key.sql,SAME,,[]
postgresql,postgresql,update pktable set base1=base1*4 where base1<3,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from pktable where base1>3,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from pktable where base2=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from pktable where base1=2,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS ALL DEFERRED,foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS ALL IMMEDIATE,foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS ALL DEFERRED,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fktable ALTER CONSTRAINT fktable_fk_fkey NOT DEFERRABLE,foreign_key.sql,ERROR,ObjectInUse,"cannot ALTER TABLE ""fktable"" because it has pending trigger events"
postgresql,postgresql,"CREATE TEMP TABLE users (   id INT PRIMARY KEY,   name VARCHAR NOT NULL )",foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,"CREATE TEMP TABLE tasks (   id INT PRIMARY KEY,   owner INT REFERENCES users ON UPDATE CASCADE ON DELETE SET NULL,   worker INT REFERENCES users ON UPDATE CASCADE ON DELETE SET NULL,   checked_by INT REFERENCES users ON UPDATE CASCADE ON DELETE SET NULL )",foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,SELECT * FROM tasks,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,UPDATE users SET id = 4 WHERE id = 3,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,SELECT * FROM tasks,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,DELETE FROM users WHERE id = 4,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,SELECT * FROM tasks,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,BEGIN,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,UPDATE tasks set id=id WHERE id=2,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,SELECT * FROM tasks,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,DELETE FROM users WHERE id = 2,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,SELECT * FROM tasks,foreign_key.sql,ERROR,InFailedSqlTransaction,"current transaction is aborted, commands ignored until end of transaction block"
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,"create temp table selfref (     a int primary key,     b int,     foreign key (b) references selfref (a)         on update cascade on delete cascade )",foreign_key.sql,SAME,,[]
postgresql,postgresql,begin,foreign_key.sql,SAME,,[]
postgresql,postgresql,update selfref set a = 123 where a = 0,foreign_key.sql,SAME,,[]
postgresql,postgresql,"select a, b from selfref",foreign_key.sql,SAME,,"[(1, 1), (123, 123)]"
postgresql,postgresql,update selfref set a = 456 where a = 123,foreign_key.sql,SAME,,[]
postgresql,postgresql,"select a, b from selfref",foreign_key.sql,SAME,,"[(1, 1), (456, 456)]"
postgresql,postgresql,commit,foreign_key.sql,SAME,,[]
postgresql,postgresql,create temp table defp (f1 int primary key),foreign_key.sql,SAME,,[]
postgresql,postgresql,create temp table defc (f1 int default 0                         references defp on delete set default),foreign_key.sql,SAME,,[]
postgresql,postgresql,select * from defc,foreign_key.sql,SAME,,"[(2,)]"
postgresql,postgresql,delete from defp where f1 = 2,foreign_key.sql,SAME,,[]
postgresql,postgresql,select * from defc,foreign_key.sql,SAME,,"[(0,)]"
postgresql,postgresql,alter table defc alter column f1 set default 1,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from defp where f1 = 0,foreign_key.sql,SAME,,[]
postgresql,postgresql,select * from defc,foreign_key.sql,SAME,,"[(1,)]"
postgresql,postgresql,create temp table pp (f1 int primary key),foreign_key.sql,SAME,,[]
postgresql,postgresql,create temp table cc (f1 int references pp on update no action on delete no action),foreign_key.sql,SAME,,[]
postgresql,postgresql,update pp set f1=f1+1,foreign_key.sql,SAME,,[]
postgresql,postgresql,update pp set f1=f1+1,foreign_key.sql,SAME,,[]
postgresql,postgresql,create temp table pp (f1 int primary key),foreign_key.sql,SAME,,[]
postgresql,postgresql,create temp table cc (f1 int references pp on update restrict on delete restrict),foreign_key.sql,SAME,,[]
postgresql,postgresql,update pp set f1=f1+1,foreign_key.sql,SAME,,[]
postgresql,postgresql,"create temp table t1 (a integer primary key, b text)",foreign_key.sql,SAME,,[]
postgresql,postgresql,"create temp table t2 (a integer primary key, b integer references t1)",foreign_key.sql,SAME,,[]
postgresql,postgresql,create rule r1 as on delete to t1 do delete from t2 where t2.b = old.a,foreign_key.sql,SAME,,[]
postgresql,postgresql,explain (costs off) delete from t1 where a = 1,foreign_key.sql,SAME,,"[('Delete on t2',), ('  ->  Nested Loop',), ('        ->  Index Scan using t1_pkey on t1',), ('              Index Cond: (a = 1)',), ('        ->  Seq Scan on t2',), ('              Filter: (b = 1)',), ('',), ('Delete on t1',), ('  ->  Index Scan using t1_pkey on t1',), ('        Index Cond: (a = 1)',)]"
postgresql,postgresql,delete from t1 where a = 1,foreign_key.sql,SAME,,[]
postgresql,postgresql,select conname from pg_constraint where conrelid = 'fktable2'::regclass order by conname,foreign_key.sql,SAME,,"[('fktable2_a_very_very_long_column_name_to_exceed_63_charac_fkey1',), ('fktable2_a_very_very_long_column_name_to_exceed_63_charact_fkey',), ('fktable2_very_very_long_column_name_to_exceed_63_character_fkey',)]"
postgresql,postgresql,begin,foreign_key.sql,SAME,,[]
postgresql,postgresql,savepoint x,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from fktable2,foreign_key.sql,SAME,,[]
postgresql,postgresql,rollback to x,foreign_key.sql,SAME,,[]
postgresql,postgresql,commit,foreign_key.sql,SAME,,[]
postgresql,postgresql,begin,foreign_key.sql,SAME,,[]
postgresql,postgresql,savepoint x,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from fktable2,foreign_key.sql,SAME,,[]
postgresql,postgresql,rollback to x,foreign_key.sql,SAME,,[]
postgresql,postgresql,begin,foreign_key.sql,SAME,,[]
postgresql,postgresql,begin,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from pktable2 where f1 = 1,foreign_key.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,foreign_key.sql,SAME,,[]
postgresql,postgresql,reset role,foreign_key.sql,SAME,,[]
postgresql,postgresql,reset role,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE parted_self_fk ATTACH PARTITION part1_self_fk FOR VALUES FROM (0) TO (10),foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE parted_self_fk ATTACH PARTITION part3_self_fk FOR VALUES FROM (20) TO (40),foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part3_self_fk ATTACH PARTITION part33_self_fk FOR VALUES FROM (30) TO (40),foreign_key.sql,SAME,,[]
postgresql,postgresql,"SELECT cr.relname, co.conname, co.contype, co.convalidated,        p.conname AS conparent, p.convalidated, cf.relname AS foreignrel FROM pg_constraint co JOIN pg_class cr ON cr.oid = co.conrelid LEFT JOIN pg_class cf ON cf.oid = co.confrelid LEFT JOIN pg_constraint p ON p.oid = co.conparentid WHERE cr.oid IN (SELECT relid FROM pg_partition_tree('parted_self_fk')) ORDER BY co.contype, cr.relname, co.conname, p.conname",foreign_key.sql,SAME,,"[('part1_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('part2_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('part32_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('part33_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('part3_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('parted_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, None, None, 'parted_self_fk'), ('part1_self_fk', 'part1_self_fk_pkey', 'p', True, 'parted_self_fk_pkey', True, None), ('part2_self_fk', 'part2_self_fk_pkey', 'p', True, 'parted_self_fk_pkey', True, None), ('part32_self_fk', 'part32_self_fk_pkey', 'p', True, 'part3_self_fk_pkey', True, None), ('part33_self_fk', 'part33_self_fk_pkey', 'p', True, 'part3_self_fk_pkey', True, None), ('part3_self_fk', 'part3_self_fk_pkey', 'p', True, 'parted_self_fk_pkey', True, None), ('parted_self_fk', 'parted_self_fk_pkey', 'p', True, None, None, None)]"
postgresql,postgresql,ALTER TABLE parted_self_fk DETACH PARTITION part2_self_fk,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE parted_self_fk ATTACH PARTITION part2_self_fk FOR VALUES FROM (10) TO (20),foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE parted_self_fk DETACH PARTITION part2_self_fk,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE parted_self_fk ATTACH PARTITION part2_self_fk FOR VALUES FROM (10) TO (20),foreign_key.sql,SAME,,[]
postgresql,postgresql,"SELECT cr.relname, co.conname, co.contype, co.convalidated,        p.conname AS conparent, p.convalidated, cf.relname AS foreignrel FROM pg_constraint co JOIN pg_class cr ON cr.oid = co.conrelid LEFT JOIN pg_class cf ON cf.oid = co.confrelid LEFT JOIN pg_constraint p ON p.oid = co.conparentid WHERE cr.oid IN (SELECT relid FROM pg_partition_tree('parted_self_fk')) ORDER BY co.contype, cr.relname, co.conname, p.conname",foreign_key.sql,SAME,,"[('part1_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('part2_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('part32_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('part33_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('part3_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, 'parted_self_fk_id_abc_fkey', True, 'parted_self_fk'), ('parted_self_fk', 'parted_self_fk_id_abc_fkey', 'f', True, None, None, 'parted_self_fk'), ('part1_self_fk', 'part1_self_fk_pkey', 'p', True, 'parted_self_fk_pkey', True, None), ('part2_self_fk', 'part2_self_fk_pkey', 'p', True, 'parted_self_fk_pkey', True, None), ('part32_self_fk', 'part32_self_fk_pkey', 'p', True, 'part3_self_fk_pkey', True, None), ('part33_self_fk', 'part33_self_fk_pkey', 'p', True, 'part3_self_fk_pkey', True, None), ('part3_self_fk', 'part3_self_fk_pkey', 'p', True, 'parted_self_fk_pkey', True, None), ('parted_self_fk', 'parted_self_fk_pkey', 'p', True, None, None, None)]"
postgresql,postgresql,alter table fkpart0.fk_part add foreign key (a) references fkpart0.pkey,foreign_key.sql,SAME,,[]
postgresql,postgresql,alter table fkpart1.fk_part add foreign key (a) references fkpart1.pkey,foreign_key.sql,SAME,,[]
postgresql,postgresql,alter table fkpart1.fk_part detach partition fkpart1.fk_part_1,foreign_key.sql,SAME,,[]
postgresql,postgresql,alter table fkpart2.fk_part_1 attach partition fkpart2.fk_part_1_1 for values in (1),foreign_key.sql,SAME,,[]
postgresql,postgresql,alter table fkpart2.fk_part detach partition fkpart2.fk_part_1,foreign_key.sql,SAME,,[]
postgresql,postgresql,alter table fkpart2.fk_part_1 drop constraint fkey,foreign_key.sql,SAME,,[]
postgresql,postgresql,begin,foreign_key.sql,SAME,,[]
postgresql,postgresql,set constraints fkpart3.fkey deferred,foreign_key.sql,SAME,,[]
postgresql,postgresql,commit,foreign_key.sql,SAME,,[]
postgresql,postgresql,begin,foreign_key.sql,SAME,,[]
postgresql,postgresql,set constraints fkpart3.fkey deferred,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from fkpart3.pkey,foreign_key.sql,SAME,,[]
postgresql,postgresql,delete from fkpart3.fk_part,foreign_key.sql,SAME,,[]
postgresql,postgresql,commit,foreign_key.sql,SAME,,[]
postgresql,postgresql,"drop schema fkpart0, fkpart1, fkpart2, fkpart3 cascade",foreign_key.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA fkpart3,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET search_path TO fkpart3,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pk2 DROP COLUMN b,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pk2 ALTER a SET NOT NULL,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pk ATTACH PARTITION pk2 FOR VALUES FROM (1000) TO (2000),foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk ADD FOREIGN KEY (a) REFERENCES pk,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk2 DROP COLUMN b,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk ATTACH PARTITION fk2 FOR VALUES FROM (750) TO (3500),foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pk ATTACH PARTITION pk4 FOR VALUES FROM (3000) TO (4000),foreign_key.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE pk5 DROP COLUMN b, DROP COLUMN c",foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pk ATTACH PARTITION pk5 FOR VALUES FROM (4000) TO (5000),foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM fk,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE pk SET a = 2 WHERE a = 1,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pk WHERE a = 2,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE pk SET a = 1002 WHERE a = 1000,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pk WHERE a = 1002,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE pk SET a = 2002 WHERE a = 2000,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pk WHERE a = 2002,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE pk SET a = 3002 WHERE a = 3000,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pk WHERE a = 3002,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE pk SET a = 4002 WHERE a = 4000,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pk WHERE a = 4002,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE pk SET a = 4502 WHERE a = 4500,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pk WHERE a = 4502,foreign_key.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA fkpart4,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET search_path TO fkpart4,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM dropfk,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE droppk2 DETACH PARTITION droppk21,foreign_key.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA fkpart5,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET search_path TO fkpart5,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk ADD FOREIGN KEY (a) REFERENCES pk,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pk32 DROP COLUMN b,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pk3 ATTACH PARTITION pk32 FOR VALUES IN (32),foreign_key.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE pk ATTACH PARTITION pk3 FOR VALUES IN (31, 32)",foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk3 DROP COLUMN b,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk ATTACH PARTITION fk3 FOR VALUES IN (3),foreign_key.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_describe_object('pg_constraint'::regclass, oid, 0), confrelid::regclass,        CASE WHEN conparentid <> 0 THEN pg_describe_object('pg_constraint'::regclass, conparentid, 0) ELSE 'TOP' END FROM pg_catalog.pg_constraint WHERE conrelid IN (SELECT relid FROM pg_partition_tree('fk')) ORDER BY conrelid::regclass::text, conname",foreign_key.sql,SAME,,"[('constraint fk_a_fkey on table fk', 'pk', 'TOP'), ('constraint fk_a_fkey1 on table fk', 'pk1', 'constraint fk_a_fkey on table fk'), ('constraint fk_a_fkey2 on table fk', 'pk11', 'constraint fk_a_fkey1 on table fk'), ('constraint fk_a_fkey3 on table fk', 'pk2', 'constraint fk_a_fkey on table fk'), ('constraint fk_a_fkey4 on table fk', 'pk3', 'constraint fk_a_fkey on table fk'), ('constraint fk_a_fkey5 on table fk', 'pk31', 'constraint fk_a_fkey4 on table fk'), ('constraint fk_a_fkey6 on table fk', 'pk32', 'constraint fk_a_fkey4 on table fk'), ('constraint fk_a_fkey on table fk1', 'pk', 'constraint fk_a_fkey on table fk'), ('constraint fk_a_fkey on table fk11', 'pk', 'constraint fk_a_fkey on table fk1'), ('constraint fk_a_fkey on table fk2', 'pk', 'constraint fk_a_fkey on table fk'), ('constraint fk_a_fkey on table fk3', 'pk', 'constraint fk_a_fkey on table fk')]"
postgresql,postgresql,CREATE SCHEMA fkpart9,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET search_path TO fkpart9,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS fk_a_fkey DEFERRED,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS fk_a_fkey DEFERRED,foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS fk_a_fkey DEFERRED,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pk WHERE a = 1,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM fk WHERE a = 1,foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ref ADD FOREIGN KEY(f1,f2) REFERENCES pt",foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ref ALTER CONSTRAINT ref_f1_f2_fkey   DEFERRABLE INITIALLY DEFERRED,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pt,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM ref,foreign_key.sql,SAME,,[]
postgresql,postgresql,ABORT,foreign_key.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ref ADD FOREIGN KEY(f1,f2) REFERENCES pt",foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ref ALTER CONSTRAINT ref_f1_f2_fkey   DEFERRABLE INITIALLY DEFERRED,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pt,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM ref,foreign_key.sql,SAME,,[]
postgresql,postgresql,ABORT,foreign_key.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ref ADD FOREIGN KEY(f1,f2) REFERENCES pt",foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ref ALTER CONSTRAINT ref_f1_f2_fkey   DEFERRABLE INITIALLY DEFERRED,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pt,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM ref,foreign_key.sql,SAME,,[]
postgresql,postgresql,ABORT,foreign_key.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ref ADD FOREIGN KEY(f1,f2) REFERENCES pt",foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ref ALTER CONSTRAINT ref_f1_f2_fkey   DEFERRABLE INITIALLY DEFERRED,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pt,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM ref,foreign_key.sql,SAME,,[]
postgresql,postgresql,ABORT,foreign_key.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA fkpart9 CASCADE,foreign_key.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA fkpart6,foreign_key.sql,SAME,,[]
postgresql,postgresql,SET search_path TO fkpart6,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk ADD FOREIGN KEY (a) REFERENCES pk ON UPDATE CASCADE ON DELETE CASCADE,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE pk SET a = 20,foreign_key.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, * FROM fk",foreign_key.sql,SAME,,"[('fk12', 20)]"
postgresql,postgresql,DELETE FROM pk WHERE a = 20,foreign_key.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, * FROM fk",foreign_key.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE pk,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk ADD FOREIGN KEY (a) REFERENCES pk ON UPDATE SET NULL ON DELETE SET NULL,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE pk SET a = 21 WHERE a = 20,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pk WHERE a = 50,foreign_key.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, * FROM fk",foreign_key.sql,SAME,,"[('fk_d', None), ('fk_d', None)]"
postgresql,postgresql,TRUNCATE TABLE pk,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk ADD FOREIGN KEY (a) REFERENCES pk ON UPDATE SET DEFAULT ON DELETE SET DEFAULT,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM pk WHERE a = 20 RETURNING *,foreign_key.sql,SAME,,"[(20,)]"
postgresql,postgresql,UPDATE pk SET a = 90 WHERE a = 30 RETURNING *,foreign_key.sql,SAME,,"[(90,)]"
postgresql,postgresql,"SELECT tableoid::regclass, * FROM fk",foreign_key.sql,SAME,,"[('fk12', 1, 50), ('fk12', 2, 50)]"
postgresql,postgresql,TRUNCATE TABLE pk,foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fk ADD FOREIGN KEY (a) REFERENCES pk ON UPDATE RESTRICT ON DELETE RESTRICT,foreign_key.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, * FROM fk",foreign_key.sql,SAME,,"[('fk12', 20), ('fk12', 30)]"
postgresql,postgresql,ALTER TABLE fkpart7.pkpart1 ADD PRIMARY KEY (a),foreign_key.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE fkpart7.pkpart ADD PRIMARY KEY (a),foreign_key.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA fkpart7 CASCADE,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA fkpart8 CASCADE,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM fkpart9.pk WHERE a=35,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM fkpart9.pk,foreign_key.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM fkpart9.fk,foreign_key.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA fkpart9 CASCADE,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM fkpart10.tbl1 WHERE f1 = 0,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE fkpart10.tbl1 SET f1 = 2 WHERE f1 = 1,foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE fkpart10.tbl1 SET f1 = 3 WHERE f1 = 0,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE fkpart10.tbl3 SET f1 = f1 * -1,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE fkpart10.tbl3 SET f1 = f1 * -1,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE fkpart10.tbl3 SET f1 = f1 + 3,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE fkpart10.tbl1 SET f1 = 3 WHERE f1 = 0,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE fkpart10.tbl3 SET f1 = f1 * -1,foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,COMMIT,foreign_key.sql,SAME,,[]
postgresql,postgresql,DELETE FROM fkpart10.tbl5,foreign_key.sql,SAME,,[]
postgresql,postgresql,BEGIN,foreign_key.sql,SAME,,[]
postgresql,postgresql,UPDATE fkpart10.tbl3 SET f1 = f1 * -3,foreign_key.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE articles (     id int CONSTRAINT articles_pkey PRIMARY KEY,     keywords text,     title text UNIQUE NOT NULL,     body text UNIQUE,     created date )",functional_deps.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE articles_in_category (     article_id int,     category_id int,     changed date,     PRIMARY KEY (article_id, category_id) )",functional_deps.sql,SAME,,[]
postgresql,postgresql,"SELECT id, keywords, title, body, created FROM articles GROUP BY id",functional_deps.sql,SAME,,[]
postgresql,postgresql,"SELECT a.id, a.keywords, a.title, a.body, a.created FROM articles AS a, articles_in_category AS aic WHERE a.id = aic.article_id AND aic.category_id in (14,62,70,53,138) GROUP BY a.id",functional_deps.sql,SAME,,[]
postgresql,postgresql,"SELECT a.id, a.keywords, a.title, a.body, a.created FROM articles AS a JOIN articles_in_category AS aic ON a.id = aic.article_id WHERE aic.category_id in (14,62,70,53,138) GROUP BY a.id",functional_deps.sql,SAME,,[]
postgresql,postgresql,"SELECT aic.changed FROM articles AS a JOIN articles_in_category AS aic ON a.id = aic.article_id WHERE aic.category_id in (14,62,70,53,138) GROUP BY aic.category_id, aic.article_id",functional_deps.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE products (product_id int, name text, price numeric)",functional_deps.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE sales (product_id int, units int)",functional_deps.sql,SAME,,[]
postgresql,postgresql,"SELECT product_id, p.name, (sum(s.units) * p.price) AS sales     FROM products p LEFT JOIN sales s USING (product_id)     GROUP BY product_id, p.name, p.price",functional_deps.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE products ADD PRIMARY KEY (product_id),functional_deps.sql,SAME,,[]
postgresql,postgresql,"SELECT product_id, p.name, (sum(s.units) * p.price) AS sales     FROM products p LEFT JOIN sales s USING (product_id)     GROUP BY product_id",functional_deps.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE node (     nid SERIAL,     vid integer NOT NULL default '0',     type varchar(32) NOT NULL default '',     title varchar(128) NOT NULL default '',     uid integer NOT NULL default '0',     status integer NOT NULL default '1',     created integer NOT NULL default '0',     PRIMARY KEY (nid, vid) )",functional_deps.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE users (     uid integer NOT NULL default '0',     name varchar(60) NOT NULL default '',     pass varchar(32) NOT NULL default '',     PRIMARY KEY (uid),     UNIQUE (name) )",functional_deps.sql,SAME,,[]
postgresql,postgresql,"SELECT u.uid, u.name FROM node n INNER JOIN users u ON u.uid = n.uid WHERE n.type = 'blog' AND n.status = 1 GROUP BY u.uid, u.name",functional_deps.sql,SAME,,[]
postgresql,postgresql,"SELECT u.uid, u.name FROM node n INNER JOIN users u ON u.uid = n.uid WHERE n.type = 'blog' AND n.status = 1 GROUP BY u.uid",functional_deps.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP VIEW fdv1 AS SELECT id, keywords, title, body, created FROM articles GROUP BY id",functional_deps.sql,SAME,,[]
postgresql,postgresql,DROP VIEW fdv1,functional_deps.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP VIEW fdv2 AS SELECT a.id, a.keywords, a.title, aic.category_id, aic.changed FROM articles AS a JOIN articles_in_category AS aic ON a.id = aic.article_id WHERE aic.category_id in (14,62,70,53,138) GROUP BY a.id, aic.category_id, aic.article_id",functional_deps.sql,SAME,,[]
postgresql,postgresql,DROP VIEW fdv2,functional_deps.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP VIEW fdv3 AS SELECT id, keywords, title, body, created FROM articles GROUP BY id UNION SELECT id, keywords, title, body, created FROM articles GROUP BY id",functional_deps.sql,SAME,,[]
postgresql,postgresql,DROP VIEW fdv3,functional_deps.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP VIEW fdv4 AS SELECT * FROM articles WHERE title IN (SELECT title FROM articles GROUP BY id),functional_deps.sql,SAME,,[]
postgresql,postgresql,DROP VIEW fdv4,functional_deps.sql,SAME,,[]
postgresql,postgresql,"PREPARE foo AS   SELECT id, keywords, title, body, created   FROM articles   GROUP BY id",functional_deps.sql,SAME,,[]
postgresql,postgresql,EXECUTE foo,functional_deps.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE articles DROP CONSTRAINT articles_pkey RESTRICT,functional_deps.sql,SAME,,[]
postgresql,postgresql,"SELECT attrelid, attname, attgenerated FROM pg_attribute WHERE attgenerated NOT IN ('', 's')",generated.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, column_name, column_default, is_nullable, is_generated, generation_expression FROM information_schema.columns WHERE table_name LIKE 'gtest_' ORDER BY 1, 2",generated.sql,SAME,,"[('gtest0', 'a', None, 'NO', 'NEVER', None), ('gtest0', 'b', None, 'YES', 'ALWAYS', '55'), ('gtest1', 'a', None, 'NO', 'NEVER', None), ('gtest1', 'b', None, 'YES', 'ALWAYS', '(a * 2)')]"
postgresql,postgresql,"SELECT table_name, column_name, dependent_column FROM information_schema.column_column_usage ORDER BY 1, 2, 3",generated.sql,SAME,,"[('gtest1', 'a', 'b')]"
postgresql,postgresql,SELECT * FROM gtest1 ORDER BY a,generated.sql,SAME,,"[(1, 2), (2, 4), (3, 6), (4, 8)]"
postgresql,postgresql,DELETE FROM gtest1 WHERE a >= 3,generated.sql,SAME,,[]
postgresql,postgresql,UPDATE gtest1 SET b = DEFAULT WHERE a = 1,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest1 ORDER BY a,generated.sql,SAME,,"[(1, 2), (2, 4)]"
postgresql,postgresql,"SELECT a, b, b * 2 AS b2 FROM gtest1 ORDER BY a",generated.sql,SAME,,"[(1, 2, 4), (2, 4, 8)]"
postgresql,postgresql,"SELECT a, b FROM gtest1 WHERE b = 4 ORDER BY a",generated.sql,SAME,,"[(2, 4)]"
postgresql,postgresql,SELECT * FROM gtest1,generated.sql,SAME,,"[(2, 4), (1, 2)]"
postgresql,postgresql,DELETE FROM gtest1 WHERE a = 2000000000,generated.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM gtestx, gtest1 WHERE gtestx.y = gtest1.a",generated.sql,SAME,,"[(11, 1, 1, 2), (22, 2, 2, 4)]"
postgresql,postgresql,SELECT * FROM gtest1 ORDER BY a,generated.sql,SAME,,"[(1, 2), (2, 4)]"
postgresql,postgresql,UPDATE gtest1 SET a = 3 WHERE b = 4,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest1 ORDER BY a,generated.sql,SAME,,"[(1, 2), (3, 6)]"
postgresql,postgresql,DELETE FROM gtest1 WHERE b = 2,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest1 ORDER BY a,generated.sql,SAME,,"[(3, 6)]"
postgresql,postgresql,"MERGE INTO gtestm t USING (VALUES (1, 10), (2, 20)) v(id, f1) ON t.id = v.id   WHEN MATCHED THEN UPDATE SET f1 = v.f1   WHEN NOT MATCHED THEN INSERT VALUES (v.id, v.f1, 200)",generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtestm ORDER BY id,generated.sql,SAME,,"[(1, 10, 100, 20, 200), (2, 20, 200, 40, 400)]"
postgresql,postgresql,CREATE VIEW gtest1v AS SELECT * FROM gtest1,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest1v,generated.sql,SAME,,"[(3, 6)]"
postgresql,postgresql,ALTER VIEW gtest1v ALTER COLUMN b SET DEFAULT 100,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest1v,generated.sql,SAME,,"[(3, 6), (5, 10), (6, 12), (7, 14)]"
postgresql,postgresql,DELETE FROM gtest1v WHERE a >= 5,generated.sql,SAME,,[]
postgresql,postgresql,DROP VIEW gtest1v,generated.sql,SAME,,[]
postgresql,postgresql,WITH foo AS (SELECT * FROM gtest1) SELECT * FROM foo,generated.sql,SAME,,"[(3, 6)]"
postgresql,postgresql,SELECT * FROM gtest1_1,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest1_1,generated.sql,SAME,,"[(4, 8)]"
postgresql,postgresql,SELECT * FROM gtest1,generated.sql,SAME,,"[(3, 6), (4, 8)]"
postgresql,postgresql,ALTER TABLE gtestxx_3 INHERIT gtest1,generated.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE gtestxx_4 INHERIT gtest1,generated.sql,SAME,,[]
postgresql,postgresql,TABLE gtestc,generated.sql,SAME,,"[(42, 43)]"
postgresql,postgresql,UPDATE gtestp SET f1 = f1 * 10,generated.sql,SAME,,[]
postgresql,postgresql,TABLE gtestc,generated.sql,SAME,,"[(420, 421)]"
postgresql,postgresql,SELECT * FROM gtest3 ORDER BY a,generated.sql,SAME,,"[(1, 3), (2, 6), (3, 9), (None, None)]"
postgresql,postgresql,UPDATE gtest3 SET a = 22 WHERE a = 2,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest3 ORDER BY a,generated.sql,SAME,,"[(1, 3), (3, 9), (22, 66), (None, None)]"
postgresql,postgresql,SELECT * FROM gtest3a ORDER BY a,generated.sql,SAME,,"[('a', 'a+a'), ('b', 'b+b'), ('c', 'c+c'), (None, None)]"
postgresql,postgresql,UPDATE gtest3a SET a = 'bb' WHERE a = 'b',generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest3a ORDER BY a,generated.sql,SAME,,"[('a', 'a+a'), ('bb', 'bb+bb'), ('c', 'c+c'), (None, None)]"
postgresql,postgresql,TRUNCATE gtest1,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest1 ORDER BY a,generated.sql,SAME,,"[(1, 2), (2, 4)]"
postgresql,postgresql,TRUNCATE gtest3,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest3 ORDER BY a,generated.sql,SAME,,"[(1, 3), (2, 6)]"
postgresql,postgresql,SELECT * FROM gtest2,generated.sql,SAME,,"[(1, None)]"
postgresql,postgresql,SELECT * FROM gtest_varlena ORDER BY a,generated.sql,SAME,,"[('01234567890123456789', '01234567890123456789'), (None, None)]"
postgresql,postgresql,"CREATE TYPE double_int as (a int, b int)",generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest4,generated.sql,SAME,,"[(1, '(2,3)'), (6, '(12,18)')]"
postgresql,postgresql,DROP TYPE double_int,generated.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE gtest_tableoid ADD COLUMN   c regclass GENERATED ALWAYS AS (tableoid) STORED,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest_tableoid,generated.sql,SAME,,"[(1, True, 'gtest_tableoid'), (2, True, 'gtest_tableoid')]"
postgresql,postgresql,ALTER TABLE gtest10 DROP COLUMN b CASCADE,generated.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE gtest10a DROP COLUMN b,generated.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION gf1(a int) RETURNS int AS $$ SELECT a * 3 $$ IMMUTABLE LANGUAGE SQL,generated.sql,SAME,,[]
postgresql,postgresql,REVOKE ALL ON FUNCTION gf1(int) FROM PUBLIC,generated.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b FROM gtest11s",generated.sql,SAME,,"[(1, 10), (2, 20)]"
postgresql,postgresql,"SELECT a, c FROM gtest11s",generated.sql,SAME,,"[(1, 20), (2, 40)]"
postgresql,postgresql,SELECT gf1(10),generated.sql,SAME,,"[(30,)]"
postgresql,postgresql,"SELECT a, c FROM gtest12s",generated.sql,SAME,,"[(1, 30), (2, 60)]"
postgresql,postgresql,RESET ROLE,generated.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION gf1(int),generated.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE gtest20b ADD CONSTRAINT chk CHECK (b < 50) NOT VALID,generated.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE gtest21b ALTER COLUMN b SET NOT NULL,generated.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE gtest21b ALTER COLUMN b DROP NOT NULL,generated.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX gtest22c_b_idx ON gtest22c (b),generated.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX gtest22c_expr_idx ON gtest22c ((b * 3)),generated.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX gtest22c_pred_idx ON gtest22c (a) WHERE b > 0,generated.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO off,generated.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan TO off,generated.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b = 4,generated.sql,SAME,,"[('Index Scan using gtest22c_b_idx on gtest22c',), ('  Index Cond: (b = 4)',)]"
postgresql,postgresql,SELECT * FROM gtest22c WHERE b = 4,generated.sql,SAME,,"[(2, 4)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b * 3 = 6,generated.sql,SAME,,"[('Index Scan using gtest22c_expr_idx on gtest22c',), ('  Index Cond: ((b * 3) = 6)',)]"
postgresql,postgresql,SELECT * FROM gtest22c WHERE b * 3 = 6,generated.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE a = 1 AND b > 0,generated.sql,SAME,,"[('Index Scan using gtest22c_pred_idx on gtest22c',), ('  Index Cond: (a = 1)',)]"
postgresql,postgresql,SELECT * FROM gtest22c WHERE a = 1 AND b > 0,generated.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,ANALYZE gtest22c,generated.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b = 8,generated.sql,SAME,,"[('Index Scan using gtest22c_b_idx on gtest22c',), ('  Index Cond: (b = 8)',)]"
postgresql,postgresql,SELECT * FROM gtest22c WHERE b = 8,generated.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b * 3 = 12,generated.sql,SAME,,"[('Index Scan using gtest22c_expr_idx on gtest22c',), ('  Index Cond: ((b * 3) = 12)',)]"
postgresql,postgresql,SELECT * FROM gtest22c WHERE b * 3 = 12,generated.sql,SAME,,"[(2, 4)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE a = 1 AND b > 0,generated.sql,SAME,,"[('Index Scan using gtest22c_pred_idx on gtest22c',), ('  Index Cond: (a = 1)',)]"
postgresql,postgresql,SELECT * FROM gtest22c WHERE a = 1 AND b > 0,generated.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,RESET enable_seqscan,generated.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,generated.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN gtestdomain1 AS int CHECK (VALUE < 10),generated.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE gtest_type AS (f1 integer, f2 text, f3 bigint)",generated.sql,SAME,,[]
postgresql,postgresql,DROP TYPE gtest_type CASCADE,generated.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE gtest_parent ATTACH PARTITION gtest_child3 FOR VALUES FROM ('2016-09-01') TO ('2016-10-01'),generated.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, * FROM gtest_parent ORDER BY 1, 2, 3",generated.sql,SAME,,"[('gtest_child', datetime.date(2016, 7, 15), 1, 2), ('gtest_child', datetime.date(2016, 7, 15), 2, 4), ('gtest_child2', datetime.date(2016, 8, 15), 3, 66)]"
postgresql,postgresql,UPDATE gtest_parent SET f1 = f1 + 60 WHERE f2 = 1,generated.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, * FROM gtest_parent ORDER BY 1, 2, 3",generated.sql,SAME,,"[('gtest_child', datetime.date(2016, 7, 15), 2, 4), ('gtest_child2', datetime.date(2016, 8, 15), 3, 66), ('gtest_child3', datetime.date(2016, 9, 13), 1, 33)]"
postgresql,postgresql,"SELECT tableoid::regclass, * FROM gtest_parent ORDER BY 1, 2, 3",generated.sql,SAME,,"[('gtest_child', datetime.date(2016, 7, 15), 2, 4), ('gtest_child2', datetime.date(2016, 8, 15), 3, 66), ('gtest_child3', datetime.date(2016, 9, 13), 1, 33)]"
postgresql,postgresql,"SELECT tableoid::regclass, * FROM gtest_parent ORDER BY 1, 2, 3",generated.sql,SAME,,"[('gtest_child', datetime.date(2016, 7, 15), 2, 4), ('gtest_child2', datetime.date(2016, 8, 15), 3, 66), ('gtest_child3', datetime.date(2016, 9, 13), 1, 33)]"
postgresql,postgresql,SELECT * FROM gtest25 ORDER BY a,generated.sql,SAME,,"[(3,), (4,)]"
postgresql,postgresql,"ALTER TABLE gtest25 ADD COLUMN c int DEFAULT 42,   ADD COLUMN x int GENERATED ALWAYS AS (c * 4) STORED",generated.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE gtest25 ADD COLUMN d int DEFAULT 101,generated.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE gtest25 ALTER COLUMN d SET DATA TYPE float8,   ADD COLUMN y float8 GENERATED ALWAYS AS (d * 4) STORED",generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest25 ORDER BY a,generated.sql,SAME,,"[(3, 42, 168, 101.0, 404.0), (4, 42, 168, 101.0, 404.0)]"
postgresql,postgresql,ALTER TABLE gtest27 ALTER COLUMN x TYPE numeric,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest27,generated.sql,SAME,,"[(3, 7, Decimal('20')), (4, 11, Decimal('30'))]"
postgresql,postgresql,"ALTER TABLE gtest27   DROP COLUMN x,   ALTER COLUMN a TYPE bigint,   ALTER COLUMN b TYPE bigint,   ADD COLUMN x bigint GENERATED ALWAYS AS ((a + b) * 2) STORED",generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest27,generated.sql,SAME,,"[(3, 7, 20), (4, 11, 30)]"
postgresql,postgresql,SELECT * FROM gtest29,generated.sql,SAME,,"[(3, 6), (4, 8)]"
postgresql,postgresql,ALTER TABLE gtest29 ALTER COLUMN a DROP EXPRESSION IF EXISTS,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest29,generated.sql,SAME,,"[(3, 6), (4, 8)]"
postgresql,postgresql,ALTER TABLE gtest29 ALTER COLUMN b DROP EXPRESSION,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest29,generated.sql,SAME,,"[(3, 6), (4, 8), (5, None), (6, 66)]"
postgresql,postgresql,ALTER TABLE gtest29 DROP COLUMN a,generated.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE gtest30 ALTER COLUMN b DROP EXPRESSION,generated.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION gtest_trigger_func() RETURNS trigger   LANGUAGE plpgsql AS $$ BEGIN   IF tg_op IN ('DELETE', 'UPDATE') THEN     RAISE INFO '%: %: old = %', TG_NAME, TG_WHEN, OLD;   END IF;   IF tg_op IN ('INSERT', 'UPDATE') THEN     RAISE INFO '%: %: new = %', TG_NAME, TG_WHEN, NEW;   END IF;   IF tg_op = 'DELETE' THEN     RETURN OLD;   ELSE     RETURN NEW;   END IF; END $$",generated.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER gtest1 BEFORE DELETE OR UPDATE ON gtest26   FOR EACH ROW   WHEN (OLD.b < 0)     EXECUTE PROCEDURE gtest_trigger_func(),generated.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER gtest2 BEFORE INSERT ON gtest26   FOR EACH ROW   WHEN (NEW.a < 0)   EXECUTE PROCEDURE gtest_trigger_func(),generated.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER gtest3 AFTER DELETE OR UPDATE ON gtest26   FOR EACH ROW   WHEN (OLD.b < 0)     EXECUTE PROCEDURE gtest_trigger_func(),generated.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER gtest4 AFTER INSERT OR UPDATE ON gtest26   FOR EACH ROW   WHEN (NEW.b < 0)     EXECUTE PROCEDURE gtest_trigger_func(),generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest26 ORDER BY a,generated.sql,SAME,,"[(-2, -4), (0, 0), (3, 6)]"
postgresql,postgresql,UPDATE gtest26 SET a = a * -2,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest26 ORDER BY a,generated.sql,SAME,,"[(-6, -12), (0, 0), (4, 8)]"
postgresql,postgresql,DELETE FROM gtest26 WHERE a = -6,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest26 ORDER BY a,generated.sql,SAME,,"[(0, 0), (4, 8)]"
postgresql,postgresql,DROP TRIGGER gtest1 ON gtest26,generated.sql,SAME,,[]
postgresql,postgresql,DROP TRIGGER gtest2 ON gtest26,generated.sql,SAME,,[]
postgresql,postgresql,DROP TRIGGER gtest3 ON gtest26,generated.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION gtest_trigger_func3() RETURNS trigger   LANGUAGE plpgsql AS $$ BEGIN   RAISE NOTICE 'OK';   RETURN NEW; END $$,generated.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER gtest11 BEFORE UPDATE OF b ON gtest26   FOR EACH ROW   EXECUTE PROCEDURE gtest_trigger_func3(),generated.sql,SAME,,[]
postgresql,postgresql,UPDATE gtest26 SET a = 1 WHERE a = 0,generated.sql,SAME,,[]
postgresql,postgresql,DROP TRIGGER gtest11 ON gtest26,generated.sql,SAME,,[]
postgresql,postgresql,TRUNCATE gtest26,generated.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION gtest_trigger_func4() RETURNS trigger   LANGUAGE plpgsql AS $$ BEGIN   NEW.a = 10;   NEW.b = 300;   RETURN NEW; END; $$,generated.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER gtest12_01 BEFORE UPDATE ON gtest26   FOR EACH ROW   EXECUTE PROCEDURE gtest_trigger_func(),generated.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER gtest12_02 BEFORE UPDATE ON gtest26   FOR EACH ROW   EXECUTE PROCEDURE gtest_trigger_func4(),generated.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER gtest12_03 BEFORE UPDATE ON gtest26   FOR EACH ROW   EXECUTE PROCEDURE gtest_trigger_func(),generated.sql,SAME,,[]
postgresql,postgresql,UPDATE gtest26 SET a = 11 WHERE a = 1,generated.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM gtest26 ORDER BY a,generated.sql,SAME,,"[(10, 20)]"
postgresql,postgresql,ALTER TABLE gtest28a DROP COLUMN a,generated.sql,SAME,,[]
postgresql,postgresql,SET extra_float_digits TO -3,geometry.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_input_is_valid('(1', 'circle')",geometry.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1,', 'circle')",geometry.sql,SAME,,"[('invalid input syntax for type circle: ""1,""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('(1,2),-1', 'circle')",geometry.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('(1,2),-1', 'circle')",geometry.sql,SAME,,"[('invalid input syntax for type circle: ""(1,2),-1""', None, None, '22P02')]"
postgresql,postgresql,"create index gin_test_idx on gin_test_tbl using gin (i)   with (fastupdate = on, gin_pending_list_limit = 4096)",gin.sql,SAME,,[]
postgresql,postgresql,select gin_clean_pending_list('gin_test_idx')>10 as many,gin.sql,SAME,,"[(True,)]"
postgresql,postgresql,vacuum gin_test_tbl,gin.sql,SAME,,[]
postgresql,postgresql,select gin_clean_pending_list('gin_test_idx'),gin.sql,SAME,,"[(0,)]"
postgresql,postgresql,delete from gin_test_tbl where i @> array[2],gin.sql,SAME,,[]
postgresql,postgresql,vacuum gin_test_tbl,gin.sql,SAME,,[]
postgresql,postgresql,alter index gin_test_idx set (fastupdate = off),gin.sql,SAME,,[]
postgresql,postgresql,delete from gin_test_tbl where i @> array[2],gin.sql,SAME,,[]
postgresql,postgresql,vacuum gin_test_tbl,gin.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select count(*) from gin_test_tbl where i @> array[1, 999]",gin.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on gin_test_tbl',), (""        Recheck Cond: (i @> '{1,999}'::integer[])"",), ('        ->  Bitmap Index Scan on gin_test_idx',), (""              Index Cond: (i @> '{1,999}'::integer[])"",)]"
postgresql,postgresql,"select count(*) from gin_test_tbl where i @> array[1, 999]",gin.sql,SAME,,"[(3,)]"
postgresql,postgresql,set gin_fuzzy_search_limit = 1000,gin.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select count(*) > 0 as ok from gin_test_tbl where i @> array[1],gin.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on gin_test_tbl',), (""        Recheck Cond: (i @> '{1}'::integer[])"",), ('        ->  Bitmap Index Scan on gin_test_idx',), (""              Index Cond: (i @> '{1}'::integer[])"",)]"
postgresql,postgresql,select count(*) > 0 as ok from gin_test_tbl where i @> array[1],gin.sql,SAME,,"[(True,)]"
postgresql,postgresql,reset gin_fuzzy_search_limit,gin.sql,SAME,,[]
postgresql,postgresql,"create temp table t_gin_test_tbl(i int4[], j int4[])",gin.sql,SAME,,[]
postgresql,postgresql,"create index on t_gin_test_tbl using gin (i, j)",gin.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan = off,gin.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from t_gin_test_tbl where array[0] <@ i,gin.sql,SAME,,"[('Bitmap Heap Scan on t_gin_test_tbl',), (""  Recheck Cond: ('{0}'::integer[] <@ i)"",), ('  ->  Bitmap Index Scan on t_gin_test_tbl_i_j_idx',), (""        Index Cond: (i @> '{0}'::integer[])"",)]"
postgresql,postgresql,select * from t_gin_test_tbl where array[0] <@ i,gin.sql,SAME,,[]
postgresql,postgresql,select * from t_gin_test_tbl where array[0] <@ i and '{}'::int4[] <@ j,gin.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from t_gin_test_tbl where i @> '{}',gin.sql,SAME,,"[('Bitmap Heap Scan on t_gin_test_tbl',), (""  Recheck Cond: (i @> '{}'::integer[])"",), ('  ->  Bitmap Index Scan on t_gin_test_tbl_i_j_idx',), (""        Index Cond: (i @> '{}'::integer[])"",)]"
postgresql,postgresql,select * from t_gin_test_tbl where i @> '{}',gin.sql,SAME,,"[([], None), ([1], None), ([1, 2], None), ([1, 2], [10]), ([2], [10]), ([1, 3], []), ([1, 1], [10])]"
postgresql,postgresql,set enable_bitmapscan = on,gin.sql,SAME,,[]
postgresql,postgresql,end,gin.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan = on,gin.sql,SAME,,[]
postgresql,postgresql,end,gin.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan = off,gin.sql,SAME,,[]
postgresql,postgresql,end,gin.sql,SAME,,[]
postgresql,postgresql,reset enable_seqscan,gin.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,gin.sql,SAME,,[]
postgresql,postgresql,select gin_clean_pending_list('t_gin_test_tbl_i_j_idx') is not null,gin.sql,SAME,,"[(True,)]"
postgresql,postgresql,analyze t_gin_test_tbl,gin.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan = off,gin.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan = on,gin.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select count(*) from t_gin_test_tbl where j @> array[50],gin.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on t_gin_test_tbl',), (""        Recheck Cond: (j @> '{50}'::integer[])"",), ('        ->  Bitmap Index Scan on t_gin_test_tbl_i_j_idx',), (""              Index Cond: (j @> '{50}'::integer[])"",)]"
postgresql,postgresql,select count(*) from t_gin_test_tbl where j @> array[50],gin.sql,SAME,,"[(11,)]"
postgresql,postgresql,explain (costs off) select count(*) from t_gin_test_tbl where j @> array[2],gin.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on t_gin_test_tbl',), (""        Recheck Cond: (j @> '{2}'::integer[])"",), ('        ->  Bitmap Index Scan on t_gin_test_tbl_i_j_idx',), (""              Index Cond: (j @> '{2}'::integer[])"",)]"
postgresql,postgresql,select count(*) from t_gin_test_tbl where j @> array[2],gin.sql,SAME,,"[(20000,)]"
postgresql,postgresql,explain (costs off) select count(*) from t_gin_test_tbl where j @> '{}'::int[],gin.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on t_gin_test_tbl',), (""        Recheck Cond: (j @> '{}'::integer[])"",), ('        ->  Bitmap Index Scan on t_gin_test_tbl_i_j_idx',), (""              Index Cond: (j @> '{}'::integer[])"",)]"
postgresql,postgresql,select count(*) from t_gin_test_tbl where j @> '{}'::int[],gin.sql,SAME,,"[(20006,)]"
postgresql,postgresql,delete from t_gin_test_tbl where j @> array[2],gin.sql,SAME,,[]
postgresql,postgresql,vacuum t_gin_test_tbl,gin.sql,SAME,,[]
postgresql,postgresql,select count(*) from t_gin_test_tbl where j @> array[50],gin.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from t_gin_test_tbl where j @> array[2],gin.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from t_gin_test_tbl where j @> '{}'::int[],gin.sql,SAME,,"[(6,)]"
postgresql,postgresql,reset enable_seqscan,gin.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,gin.sql,SAME,,[]
postgresql,postgresql,"create unlogged table t_gin_test_tbl(i int4[], j int4[])",gin.sql,SAME,,[]
postgresql,postgresql,"create index on t_gin_test_tbl using gin (i, j)",gin.sql,SAME,,[]
postgresql,postgresql,create index gist_pointidx on gist_point_tbl using gist(p),gist.sql,SAME,,[]
postgresql,postgresql,"create index gist_pointidx2 on gist_point_tbl using gist(p) with (buffering = on, fillfactor=50)",gist.sql,SAME,,[]
postgresql,postgresql,create index gist_pointidx3 on gist_point_tbl using gist(p) with (buffering = off),gist.sql,SAME,,[]
postgresql,postgresql,create index gist_pointidx4 on gist_point_tbl using gist(p) with (buffering = auto),gist.sql,SAME,,[]
postgresql,postgresql,"drop index gist_pointidx2, gist_pointidx3, gist_pointidx4",gist.sql,SAME,,[]
postgresql,postgresql,delete from gist_point_tbl where id % 2 = 1,gist.sql,SAME,,[]
postgresql,postgresql,delete from gist_point_tbl where id > 5000,gist.sql,SAME,,[]
postgresql,postgresql,vacuum analyze gist_point_tbl,gist.sql,SAME,,[]
postgresql,postgresql,alter index gist_pointidx SET (fillfactor = 40),gist.sql,SAME,,[]
postgresql,postgresql,reindex index gist_pointidx,gist.sql,SAME,,[]
postgresql,postgresql,vacuum analyze gist_tbl,gist.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan=off,gist.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan=off,gist.sql,SAME,,[]
postgresql,postgresql,set enable_indexonlyscan=on,gist.sql,SAME,,[]
postgresql,postgresql,create index gist_tbl_point_index on gist_tbl using gist (p),gist.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5))",gist.sql,SAME,,"[('Index Only Scan using gist_tbl_point_index on gist_tbl',), (""  Index Cond: (p <@ '(0.5,0.5),(0,0)'::box)"",)]"
postgresql,postgresql,"select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5))",gist.sql,SAME,,"[('(0,0)',), ('(0.05,0.05)',), ('(0.1,0.1)',), ('(0.15,0.15)',), ('(0.2,0.2)',), ('(0.25,0.25)',), ('(0.3,0.3)',), ('(0.35,0.35)',), ('(0.4,0.4)',), ('(0.45,0.45)',), ('(0.5,0.5)',)]"
postgresql,postgresql,"explain (costs off) select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5)) order by p <-> point(0.201, 0.201)",gist.sql,SAME,,"[('Index Only Scan using gist_tbl_point_index on gist_tbl',), (""  Index Cond: (p <@ '(0.5,0.5),(0,0)'::box)"",), (""  Order By: (p <-> '(0.201,0.201)'::point)"",)]"
postgresql,postgresql,"select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5)) order by p <-> point(0.201, 0.201)",gist.sql,SAME,,"[('(0.2,0.2)',), ('(0.25,0.25)',), ('(0.15,0.15)',), ('(0.3,0.3)',), ('(0.1,0.1)',), ('(0.35,0.35)',), ('(0.05,0.05)',), ('(0.4,0.4)',), ('(0,0)',), ('(0.45,0.45)',), ('(0.5,0.5)',)]"
postgresql,postgresql,"explain (costs off) select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5)) order by point(0.101, 0.101) <-> p",gist.sql,SAME,,"[('Index Only Scan using gist_tbl_point_index on gist_tbl',), (""  Index Cond: (p <@ '(0.5,0.5),(0,0)'::box)"",), (""  Order By: (p <-> '(0.101,0.101)'::point)"",)]"
postgresql,postgresql,"select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5)) order by point(0.101, 0.101) <-> p",gist.sql,SAME,,"[('(0.1,0.1)',), ('(0.15,0.15)',), ('(0.05,0.05)',), ('(0.2,0.2)',), ('(0,0)',), ('(0.25,0.25)',), ('(0.3,0.3)',), ('(0.35,0.35)',), ('(0.4,0.4)',), ('(0.45,0.45)',), ('(0.5,0.5)',)]"
postgresql,postgresql,"explain (costs off) select p from   (values (box(point(0,0), point(0.5,0.5))),           (box(point(0.5,0.5), point(0.75,0.75))),           (box(point(0.8,0.8), point(1.0,1.0)))) as v(bb) cross join lateral   (select p from gist_tbl where p <@ bb order by p <-> bb[0] limit 2) ss",gist.sql,SAME,,"[('Nested Loop',), ('  ->  Values Scan on ""*VALUES*""',), ('  ->  Limit',), ('        ->  Index Only Scan using gist_tbl_point_index on gist_tbl',), ('              Index Cond: (p <@ ""*VALUES*"".column1)',), ('              Order By: (p <-> (""*VALUES*"".column1)[0])',)]"
postgresql,postgresql,"select p from   (values (box(point(0,0), point(0.5,0.5))),           (box(point(0.5,0.5), point(0.75,0.75))),           (box(point(0.8,0.8), point(1.0,1.0)))) as v(bb) cross join lateral   (select p from gist_tbl where p <@ bb order by p <-> bb[0] limit 2) ss",gist.sql,SAME,,"[('(0.5,0.5)',), ('(0.45,0.45)',), ('(0.75,0.75)',), ('(0.7,0.7)',), ('(1,1)',), ('(0.95,0.95)',)]"
postgresql,postgresql,drop index gist_tbl_point_index,gist.sql,SAME,,[]
postgresql,postgresql,create index gist_tbl_box_index on gist_tbl using gist (b),gist.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select b from gist_tbl where b <@ box(point(5,5), point(6,6))",gist.sql,SAME,,"[('Index Only Scan using gist_tbl_box_index on gist_tbl',), (""  Index Cond: (b <@ '(6,6),(5,5)'::box)"",)]"
postgresql,postgresql,"select b from gist_tbl where b <@ box(point(5,5), point(6,6))",gist.sql,SAME,,"[('(5,5),(5,5)',), ('(5.05,5.05),(5.05,5.05)',), ('(5.1,5.1),(5.1,5.1)',), ('(5.15,5.15),(5.15,5.15)',), ('(5.2,5.2),(5.2,5.2)',), ('(5.25,5.25),(5.25,5.25)',), ('(5.3,5.3),(5.3,5.3)',), ('(5.35,5.35),(5.35,5.35)',), ('(5.4,5.4),(5.4,5.4)',), ('(5.45,5.45),(5.45,5.45)',), ('(5.5,5.5),(5.5,5.5)',), ('(5.55,5.55),(5.55,5.55)',), ('(5.6,5.6),(5.6,5.6)',), ('(5.65,5.65),(5.65,5.65)',), ('(5.7,5.7),(5.7,5.7)',), ('(5.75,5.75),(5.75,5.75)',), ('(5.8,5.8),(5.8,5.8)',), ('(5.85,5.85),(5.85,5.85)',), ('(5.9,5.9),(5.9,5.9)',), ('(5.95,5.95),(5.95,5.95)',), ('(6,6),(6,6)',)]"
postgresql,postgresql,"explain (costs off) select b from gist_tbl where b <@ box(point(5,5), point(6,6)) order by b <-> point(5.2, 5.91)",gist.sql,SAME,,"[('Index Only Scan using gist_tbl_box_index on gist_tbl',), (""  Index Cond: (b <@ '(6,6),(5,5)'::box)"",), (""  Order By: (b <-> '(5.2,5.91)'::point)"",)]"
postgresql,postgresql,"select b from gist_tbl where b <@ box(point(5,5), point(6,6)) order by b <-> point(5.2, 5.91)",gist.sql,SAME,,"[('(5.55,5.55),(5.55,5.55)',), ('(5.6,5.6),(5.6,5.6)',), ('(5.5,5.5),(5.5,5.5)',), ('(5.65,5.65),(5.65,5.65)',), ('(5.45,5.45),(5.45,5.45)',), ('(5.7,5.7),(5.7,5.7)',), ('(5.4,5.4),(5.4,5.4)',), ('(5.75,5.75),(5.75,5.75)',), ('(5.35,5.35),(5.35,5.35)',), ('(5.8,5.8),(5.8,5.8)',), ('(5.3,5.3),(5.3,5.3)',), ('(5.85,5.85),(5.85,5.85)',), ('(5.25,5.25),(5.25,5.25)',), ('(5.9,5.9),(5.9,5.9)',), ('(5.2,5.2),(5.2,5.2)',), ('(5.95,5.95),(5.95,5.95)',), ('(5.15,5.15),(5.15,5.15)',), ('(6,6),(6,6)',), ('(5.1,5.1),(5.1,5.1)',), ('(5.05,5.05),(5.05,5.05)',), ('(5,5),(5,5)',)]"
postgresql,postgresql,"explain (costs off) select b from gist_tbl where b <@ box(point(5,5), point(6,6)) order by point(5.2, 5.91) <-> b",gist.sql,SAME,,"[('Index Only Scan using gist_tbl_box_index on gist_tbl',), (""  Index Cond: (b <@ '(6,6),(5,5)'::box)"",), (""  Order By: (b <-> '(5.2,5.91)'::point)"",)]"
postgresql,postgresql,"select b from gist_tbl where b <@ box(point(5,5), point(6,6)) order by point(5.2, 5.91) <-> b",gist.sql,SAME,,"[('(5.55,5.55),(5.55,5.55)',), ('(5.6,5.6),(5.6,5.6)',), ('(5.5,5.5),(5.5,5.5)',), ('(5.65,5.65),(5.65,5.65)',), ('(5.45,5.45),(5.45,5.45)',), ('(5.7,5.7),(5.7,5.7)',), ('(5.4,5.4),(5.4,5.4)',), ('(5.75,5.75),(5.75,5.75)',), ('(5.35,5.35),(5.35,5.35)',), ('(5.8,5.8),(5.8,5.8)',), ('(5.3,5.3),(5.3,5.3)',), ('(5.85,5.85),(5.85,5.85)',), ('(5.25,5.25),(5.25,5.25)',), ('(5.9,5.9),(5.9,5.9)',), ('(5.2,5.2),(5.2,5.2)',), ('(5.95,5.95),(5.95,5.95)',), ('(5.15,5.15),(5.15,5.15)',), ('(6,6),(6,6)',), ('(5.1,5.1),(5.1,5.1)',), ('(5.05,5.05),(5.05,5.05)',), ('(5,5),(5,5)',)]"
postgresql,postgresql,drop index gist_tbl_box_index,gist.sql,SAME,,[]
postgresql,postgresql,"create index gist_tbl_multi_index on gist_tbl using gist (p, c)",gist.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select p, c from gist_tbl where p <@ box(point(5,5), point(6, 6))",gist.sql,SAME,,"[('Index Scan using gist_tbl_multi_index on gist_tbl',), (""  Index Cond: (p <@ '(6,6),(5,5)'::box)"",)]"
postgresql,postgresql,"select b, p from gist_tbl where b <@ box(point(4.5, 4.5), point(5.5, 5.5)) and p <@ box(point(5,5), point(6, 6))",gist.sql,SAME,,"[('(5,5),(5,5)', '(5,5)'), ('(5.05,5.05),(5.05,5.05)', '(5.05,5.05)'), ('(5.1,5.1),(5.1,5.1)', '(5.1,5.1)'), ('(5.15,5.15),(5.15,5.15)', '(5.15,5.15)'), ('(5.2,5.2),(5.2,5.2)', '(5.2,5.2)'), ('(5.25,5.25),(5.25,5.25)', '(5.25,5.25)'), ('(5.3,5.3),(5.3,5.3)', '(5.3,5.3)'), ('(5.35,5.35),(5.35,5.35)', '(5.35,5.35)'), ('(5.4,5.4),(5.4,5.4)', '(5.4,5.4)'), ('(5.45,5.45),(5.45,5.45)', '(5.45,5.45)'), ('(5.5,5.5),(5.5,5.5)', '(5.5,5.5)')]"
postgresql,postgresql,drop index gist_tbl_multi_index,gist.sql,SAME,,[]
postgresql,postgresql,"create index gist_tbl_multi_index on gist_tbl using gist (circle(p,1), p)",gist.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select circle(p,1) from gist_tbl where p <@ box(point(5, 5), point(5.3, 5.3))",gist.sql,SAME,,"[('Index Only Scan using gist_tbl_multi_index on public.gist_tbl',), (""  Output: circle(p, '1'::double precision)"",), (""  Index Cond: (gist_tbl.p <@ '(5.3,5.3),(5,5)'::box)"",)]"
postgresql,postgresql,"select circle(p,1) from gist_tbl where p <@ box(point(5, 5), point(5.3, 5.3))",gist.sql,SAME,,"[('<(5,5),1>',), ('<(5.05,5.05),1>',), ('<(5.1,5.1),1>',), ('<(5.15,5.15),1>',), ('<(5.2,5.2),1>',), ('<(5.25,5.25),1>',), ('<(5.3,5.3),1>',)]"
postgresql,postgresql,"explain (verbose, costs off) select p from gist_tbl where circle(p,1) @> circle(point(0,0),0.95)",gist.sql,SAME,,"[('Index Only Scan using gist_tbl_multi_index on public.gist_tbl',), ('  Output: p',), (""  Index Cond: ((circle(gist_tbl.p, '1'::double precision)) @> '<(0,0),0.95>'::circle)"",)]"
postgresql,postgresql,"select p from gist_tbl where circle(p,1) @> circle(point(0,0),0.95)",gist.sql,SAME,,"[('(0,0)',)]"
postgresql,postgresql,"explain (verbose, costs off) select count(*) from gist_tbl",gist.sql,SAME,,"[('Aggregate',), ('  Output: count(*)',), ('  ->  Index Only Scan using gist_tbl_multi_index on public.gist_tbl',)]"
postgresql,postgresql,select count(*) from gist_tbl,gist.sql,SAME,,"[(10001,)]"
postgresql,postgresql,"explain (verbose, costs off) select p from gist_tbl order by circle(p,1) <-> point(0,0) limit 1",gist.sql,SAME,,"[('Limit',), (""  Output: p, ((circle(p, '1'::double precision) <-> '(0,0)'::point))"",), ('  ->  Index Only Scan using gist_tbl_multi_index on public.gist_tbl',), (""        Output: p, (circle(p, '1'::double precision) <-> '(0,0)'::point)"",), (""        Order By: ((circle(gist_tbl.p, '1'::double precision)) <-> '(0,0)'::point)"",)]"
postgresql,postgresql,"create index gist_tbl_box_index_forcing_buffering on gist_tbl using gist (p)   with (buffering=on, fillfactor=50)",gist.sql,SAME,,[]
postgresql,postgresql,reset enable_seqscan,gist.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,gist.sql,SAME,,[]
postgresql,postgresql,reset enable_indexonlyscan,gist.sql,SAME,,[]
postgresql,postgresql,create unlogged table gist_tbl (b box),gist.sql,SAME,,[]
postgresql,postgresql,create index gist_tbl_box_index on gist_tbl using gist (b),gist.sql,SAME,,[]
postgresql,postgresql,"create temp view gstest1(a,b,v)   as values (1,1,10),(1,1,11),(1,2,12),(1,2,13),(1,3,14),             (2,3,15),             (3,3,16),(3,4,17),             (4,1,18),(4,1,19)",groupingsets.sql,SAME,,[]
postgresql,postgresql,"create temp table gstest2 (a integer, b integer, c integer, d integer,                            e integer, f integer, g integer, h integer)",groupingsets.sql,SAME,,[]
postgresql,postgresql,"create temp table gstest4(id integer, v integer,                           unhashable_col bit(4), unsortable_col xid)",groupingsets.sql,SAME,,[]
postgresql,postgresql,"create temp table gstest_empty (a integer, b integer, v integer)",groupingsets.sql,SAME,,[]
postgresql,postgresql,"create function gstest_data(v integer, out a integer, out b integer)   returns setof record   as $f$     begin       return query select v, i from generate_series(1,3) i;     end;   $f$ language plpgsql",groupingsets.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg = false,groupingsets.sql,SAME,,[]
postgresql,postgresql,"select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by rollup (a,b)",groupingsets.sql,SAME,,"[(1, 1, 0, 21, 2, 11), (1, 2, 0, 25, 2, 13), (1, 3, 0, 14, 1, 14), (1, None, 1, 60, 5, 14), (2, 3, 0, 15, 1, 15), (2, None, 1, 15, 1, 15), (3, 3, 0, 16, 1, 16), (3, 4, 0, 17, 1, 17), (3, None, 1, 33, 2, 17), (4, 1, 0, 37, 2, 19), (4, None, 1, 37, 2, 19), (None, None, 3, 145, 10, 19)]"
postgresql,postgresql,"select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by rollup (a,b) order by a,b",groupingsets.sql,SAME,,"[(1, 1, 0, 21, 2, 11), (1, 2, 0, 25, 2, 13), (1, 3, 0, 14, 1, 14), (1, None, 1, 60, 5, 14), (2, 3, 0, 15, 1, 15), (2, None, 1, 15, 1, 15), (3, 3, 0, 16, 1, 16), (3, 4, 0, 17, 1, 17), (3, None, 1, 33, 2, 17), (4, 1, 0, 37, 2, 19), (4, None, 1, 37, 2, 19), (None, None, 3, 145, 10, 19)]"
postgresql,postgresql,"select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by rollup (a,b) order by b desc, a",groupingsets.sql,SAME,,"[(1, None, 1, 60, 5, 14), (2, None, 1, 15, 1, 15), (3, None, 1, 33, 2, 17), (4, None, 1, 37, 2, 19), (None, None, 3, 145, 10, 19), (3, 4, 0, 17, 1, 17), (1, 3, 0, 14, 1, 14), (2, 3, 0, 15, 1, 15), (3, 3, 0, 16, 1, 16), (1, 2, 0, 25, 2, 13), (1, 1, 0, 21, 2, 11), (4, 1, 0, 37, 2, 19)]"
postgresql,postgresql,"select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by rollup (a,b) order by coalesce(a,0)+coalesce(b,0)",groupingsets.sql,SAME,,"[(None, None, 3, 145, 10, 19), (1, None, 1, 60, 5, 14), (1, 1, 0, 21, 2, 11), (2, None, 1, 15, 1, 15), (3, None, 1, 33, 2, 17), (1, 2, 0, 25, 2, 13), (1, 3, 0, 14, 1, 14), (4, None, 1, 37, 2, 19), (4, 1, 0, 37, 2, 19), (2, 3, 0, 15, 1, 15), (3, 3, 0, 16, 1, 16), (3, 4, 0, 17, 1, 17)]"
postgresql,postgresql,"select a, b, grouping(a,b),        array_agg(v order by v),        string_agg(v::text, ':' order by v desc),        percentile_disc(0.5) within group (order by v),        rank(1,2,12) within group (order by a,b,v)   from gstest1 group by rollup (a,b) order by a,b",groupingsets.sql,SAME,,"[(1, 1, 0, [10, 11], '11:10', 10, 3), (1, 2, 0, [12, 13], '13:12', 12, 1), (1, 3, 0, [14], '14', 14, 1), (1, None, 1, [10, 11, 12, 13, 14], '14:13:12:11:10', 12, 3), (2, 3, 0, [15], '15', 15, 1), (2, None, 1, [15], '15', 15, 1), (3, 3, 0, [16], '16', 16, 1), (3, 4, 0, [17], '17', 17, 1), (3, None, 1, [16, 17], '17:16', 16, 1), (4, 1, 0, [18, 19], '19:18', 18, 1), (4, None, 1, [18, 19], '19:18', 18, 1), (None, None, 3, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], '19:18:17:16:15:14:13:12:11:10', 14, 3)]"
postgresql,postgresql,"select grouping(a), a, array_agg(b),        rank(a) within group (order by b nulls first),        rank(a) within group (order by b nulls last)   from (values (1,1),(1,4),(1,5),(3,1),(3,2)) v(a,b)  group by rollup (a) order by a",groupingsets.sql,SAME,,"[(0, 1, [1, 4, 5], 1, 1), (0, 3, [1, 2], 3, 3), (1, None, [1, 4, 5, 1, 2], 1, 6)]"
postgresql,postgresql,"select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum   from gstest2 group by rollup (a,b) order by rsum, a, b",groupingsets.sql,SAME,,"[(None, None, None, None)]"
postgresql,postgresql,"select sum(c) from gstest2   group by grouping sets((), grouping sets((), grouping sets(())))   order by 1 desc",groupingsets.sql,SAME,,"[(None,), (None,), (None,)]"
postgresql,postgresql,"select sum(c) from gstest2   group by grouping sets((), grouping sets((), grouping sets(((a, b)))))   order by 1 desc",groupingsets.sql,SAME,,"[(None,), (None,)]"
postgresql,postgresql,"select sum(c) from gstest2   group by grouping sets(grouping sets(rollup(c), grouping sets(cube(c))))   order by 1 desc",groupingsets.sql,SAME,,"[(None,), (None,)]"
postgresql,postgresql,"select sum(c) from gstest2   group by grouping sets(a, grouping sets(a, cube(b)))   order by 1 desc",groupingsets.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select sum(c) from gstest2   group by grouping sets(grouping sets((a, (b))))   order by 1 desc",groupingsets.sql,SAME,,[]
postgresql,postgresql,"select sum(c) from gstest2   group by grouping sets(grouping sets((a, b)))   order by 1 desc",groupingsets.sql,SAME,,[]
postgresql,postgresql,"select sum(c) from gstest2   group by grouping sets(grouping sets(a, grouping sets(a), a))   order by 1 desc",groupingsets.sql,SAME,,[]
postgresql,postgresql,"select sum(c) from gstest2   group by grouping sets(grouping sets(a, grouping sets(a, grouping sets(a), ((a)), a, grouping sets(a), (a)), a))   order by 1 desc",groupingsets.sql,SAME,,[]
postgresql,postgresql,"select sum(c) from gstest2   group by grouping sets((a,(a,b)), grouping sets((a,(a,b)),a))   order by 1 desc",groupingsets.sql,SAME,,[]
postgresql,postgresql,"select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),a)",groupingsets.sql,SAME,,[]
postgresql,postgresql,"select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),())",groupingsets.sql,SAME,,"[(None, None, None, 0)]"
postgresql,postgresql,"select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),(),(),())",groupingsets.sql,SAME,,"[(None, None, None, 0), (None, None, None, 0), (None, None, None, 0)]"
postgresql,postgresql,"select sum(v), count(*) from gstest_empty group by grouping sets ((),(),())",groupingsets.sql,SAME,,"[(None, 0), (None, 0), (None, 0)]"
postgresql,postgresql,"select t1.a, t2.b, sum(t1.v), count(*) from gstest_empty t1, gstest_empty t2  group by grouping sets ((t1.a,t2.b),())",groupingsets.sql,SAME,,"[(None, None, None, 0)]"
postgresql,postgresql,"select t1.a, t2.b, grouping(t1.a, t2.b), sum(t1.v), max(t2.a)   from gstest1 t1, gstest2 t2  group by grouping sets ((t1.a, t2.b), ())",groupingsets.sql,SAME,,"[(None, None, 3, None, None)]"
postgresql,postgresql,"select t1.a, t2.b, grouping(t1.a, t2.b), sum(t1.v), max(t2.a)   from gstest1 t1 join gstest2 t2 on (t1.a=t2.a)  group by grouping sets ((t1.a, t2.b), ())",groupingsets.sql,SAME,,"[(None, None, 3, None, None)]"
postgresql,postgresql,"select a, b, grouping(a, b), sum(t1.v), max(t2.c)   from gstest1 t1 join gstest2 t2 using (a,b)  group by grouping sets ((a, b), ())",groupingsets.sql,SAME,,"[(None, None, 3, None, None)]"
postgresql,postgresql,"explain (costs off) select g as alias1, g as alias2   from generate_series(1,3) g  group by alias1, rollup(alias2)",groupingsets.sql,SAME,,"[('GroupAggregate',), ('  Group Key: g, g',), ('  Group Key: g',), ('  ->  Sort',), ('        Sort Key: g',), ('        ->  Function Scan on generate_series g',)]"
postgresql,postgresql,"select g as alias1, g as alias2   from generate_series(1,3) g  group by alias1, rollup(alias2)",groupingsets.sql,SAME,,"[(1, 1), (1, None), (2, 2), (2, None), (3, 3), (3, None)]"
postgresql,postgresql,"select (x+y)*1, sum(z)  from (select 1 as x, 2 as y, 3 as z) s  group by grouping sets (x+y, x)",groupingsets.sql,SAME,,"[(3, 3), (None, 3)]"
postgresql,postgresql,"select a, b, sum(v.x)   from (values (1),(2)) v(x), gstest_data(v.x)  group by rollup (a,b)",groupingsets.sql,SAME,,"[(1, 1, 1), (1, 2, 1), (1, 3, 1), (1, None, 3), (2, 1, 2), (2, 2, 2), (2, 3, 2), (2, None, 6), (None, None, 9)]"
postgresql,postgresql,"CREATE VIEW gstest_view AS select a, b, grouping(a,b), sum(c), count(*), max(c)   from gstest2 group by rollup ((a,b,c),(c,d))",groupingsets.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('gstest_view'::regclass, true)",groupingsets.sql,SAME,,"[(' SELECT a,\n    b,\n    GROUPING(a, b) AS ""grouping"",\n    sum(c) AS sum,\n    count(*) AS count,\n    max(c) AS max\n   FROM gstest2\n  GROUP BY ROLLUP((a, b, c), (c, d));',)]"
postgresql,postgresql,"select(select (select grouping(a,b) from (values (1)) v2(c)) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY ROLLUP(e,f)",groupingsets.sql,SAME,,"[(0,), (0,), (0,)]"
postgresql,postgresql,"select(select (select grouping(e,f) from (values (1)) v2(c)) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY ROLLUP(e,f)",groupingsets.sql,SAME,,"[(0,), (1,), (3,)]"
postgresql,postgresql,"select(select (select grouping(c) from (values (1)) v2(c) GROUP BY c) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY ROLLUP(e,f)",groupingsets.sql,SAME,,"[(0,), (0,), (0,)]"
postgresql,postgresql,"select a, b, c, d from gstest2 group by rollup(a,b),grouping sets(c,d)",groupingsets.sql,SAME,,[]
postgresql,postgresql,"select a, b from (values (1,2),(2,3)) v(a,b) group by a,b, grouping sets(a)",groupingsets.sql,SAME,,"[(1, 2), (2, 3)]"
postgresql,postgresql,"select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+2,b+2)) order by 3,6",groupingsets.sql,SAME,,"[(1, 1, 0, 21, 2, 11), (1, 2, 0, 25, 2, 13), (1, 3, 0, 14, 1, 14), (2, 3, 0, 15, 1, 15), (3, 3, 0, 16, 1, 16), (3, 4, 0, 17, 1, 17), (4, 1, 0, 37, 2, 19), (None, None, 3, 21, 2, 11), (None, None, 3, 21, 2, 11), (None, None, 3, 25, 2, 13), (None, None, 3, 25, 2, 13), (None, None, 3, 14, 1, 14), (None, None, 3, 14, 1, 14), (None, None, 3, 15, 1, 15), (None, None, 3, 15, 1, 15), (None, None, 3, 16, 1, 16), (None, None, 3, 16, 1, 16), (None, None, 3, 17, 1, 17), (None, None, 3, 17, 1, 17), (None, None, 3, 37, 2, 19), (None, None, 3, 37, 2, 19)]"
postgresql,postgresql,"select(select (select grouping(a,b) from (values (1)) v2(c)) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY ROLLUP((e+1),(f+1))",groupingsets.sql,SAME,,"[(0,), (0,), (0,)]"
postgresql,postgresql,"select(select (select grouping(a,b) from (values (1)) v2(c)) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY CUBE((e+1),(f+1)) ORDER BY (e+1),(f+1)",groupingsets.sql,SAME,,"[(0,), (0,), (0,), (0,)]"
postgresql,postgresql,"select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum   from gstest2 group by cube (a,b) order by rsum, a, b",groupingsets.sql,SAME,,"[(None, None, None, None)]"
postgresql,postgresql,"select a, b, sum(c) from (values (1,1,10),(1,1,11),(1,2,12),(1,2,13),(1,3,14),(2,3,15),(3,3,16),(3,4,17),(4,1,18),(4,1,19)) v(a,b,c) group by rollup (a,b)",groupingsets.sql,SAME,,"[(1, 1, 21), (1, 2, 25), (1, 3, 14), (1, None, 60), (2, 3, 15), (2, None, 15), (3, 3, 16), (3, 4, 17), (3, None, 33), (4, 1, 37), (4, None, 37), (None, None, 145)]"
postgresql,postgresql,"select a, b, sum(v.x)   from (values (1),(2)) v(x), gstest_data(v.x)  group by cube (a,b) order by a,b",groupingsets.sql,SAME,,"[(1, 1, 1), (1, 2, 1), (1, 3, 1), (1, None, 3), (2, 1, 2), (2, 2, 2), (2, 3, 2), (2, None, 6), (None, 1, 3), (None, 2, 3), (None, 3, 3), (None, None, 9)]"
postgresql,postgresql,"explain (costs off) select * from gstest1 group by grouping sets((a,b,v),(v)) order by v,b,a",groupingsets.sql,SAME,,"[('GroupAggregate',), ('  Group Key: ""*VALUES*"".column3, ""*VALUES*"".column2, ""*VALUES*"".column1',), ('  Group Key: ""*VALUES*"".column3',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column3, ""*VALUES*"".column2, ""*VALUES*"".column1',), ('        ->  Values Scan on ""*VALUES*""',)]"
postgresql,postgresql,"select a, b, sum(c), count(*) from gstest2 group by grouping sets (rollup(a,b),a)",groupingsets.sql,SAME,,"[(None, None, None, 0)]"
postgresql,postgresql,"select a,count(*) from gstest2 group by rollup(a) order by a",groupingsets.sql,SAME,,"[(None, 0)]"
postgresql,postgresql,"select a,count(*) from gstest2 group by rollup(a) having a is distinct from 1 order by a",groupingsets.sql,SAME,,"[(None, 0)]"
postgresql,postgresql,"explain (costs off)   select a,count(*) from gstest2 group by rollup(a) having a is distinct from 1 order by a",groupingsets.sql,SAME,,"[('GroupAggregate',), ('  Group Key: a',), ('  Group Key: ()',), ('  Filter: (a IS DISTINCT FROM 1)',), ('  ->  Sort',), ('        Sort Key: a',), ('        ->  Seq Scan on gstest2',)]"
postgresql,postgresql,"select v.c, (select count(*) from gstest2 group by () having v.c)   from (values (false),(true)) v(c) order by v.c",groupingsets.sql,SAME,,"[(False, None), (True, 0)]"
postgresql,postgresql,"explain (costs off)   select v.c, (select count(*) from gstest2 group by () having v.c)     from (values (false),(true)) v(c) order by v.c",groupingsets.sql,SAME,,"[('Sort',), ('  Sort Key: ""*VALUES*"".column1',), ('  ->  Values Scan on ""*VALUES*""',), ('        SubPlan 1',), ('          ->  Aggregate',), ('                Group Key: ()',), ('                Filter: ""*VALUES*"".column1',), ('                ->  Result',), ('                      One-Time Filter: ""*VALUES*"".column1',), ('                      ->  Seq Scan on gstest2',)]"
postgresql,postgresql,set enable_hashagg = true,groupingsets.sql,SAME,,[]
postgresql,postgresql,"select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by grouping sets ((a),(b)) order by 3,1,2",groupingsets.sql,SAME,,"[(1, None, 1, 60, 5, 14), (2, None, 1, 15, 1, 15), (3, None, 1, 33, 2, 17), (4, None, 1, 37, 2, 19), (None, 1, 2, 58, 4, 19), (None, 2, 2, 25, 2, 13), (None, 3, 2, 45, 3, 16), (None, 4, 2, 17, 1, 17)]"
postgresql,postgresql,"explain (costs off) select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by grouping sets ((a),(b)) order by 3,1,2",groupingsets.sql,SAME,,"[('Sort',), ('  Sort Key: (GROUPING(""*VALUES*"".column1, ""*VALUES*"".column2)), ""*VALUES*"".column1, ""*VALUES*"".column2',), ('  ->  HashAggregate',), ('        Hash Key: ""*VALUES*"".column1',), ('        Hash Key: ""*VALUES*"".column2',), ('        ->  Values Scan on ""*VALUES*""',)]"
postgresql,postgresql,"select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by cube(a,b) order by 3,1,2",groupingsets.sql,SAME,,"[(1, 1, 0, 21, 2, 11), (1, 2, 0, 25, 2, 13), (1, 3, 0, 14, 1, 14), (2, 3, 0, 15, 1, 15), (3, 3, 0, 16, 1, 16), (3, 4, 0, 17, 1, 17), (4, 1, 0, 37, 2, 19), (1, None, 1, 60, 5, 14), (2, None, 1, 15, 1, 15), (3, None, 1, 33, 2, 17), (4, None, 1, 37, 2, 19), (None, 1, 2, 58, 4, 19), (None, 2, 2, 25, 2, 13), (None, 3, 2, 45, 3, 16), (None, 4, 2, 17, 1, 17), (None, None, 3, 145, 10, 19)]"
postgresql,postgresql,"explain (costs off) select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by cube(a,b) order by 3,1,2",groupingsets.sql,SAME,,"[('Sort',), ('  Sort Key: (GROUPING(""*VALUES*"".column1, ""*VALUES*"".column2)), ""*VALUES*"".column1, ""*VALUES*"".column2',), ('  ->  MixedAggregate',), ('        Hash Key: ""*VALUES*"".column1, ""*VALUES*"".column2',), ('        Hash Key: ""*VALUES*"".column1',), ('        Hash Key: ""*VALUES*"".column2',), ('        Group Key: ()',), ('        ->  Values Scan on ""*VALUES*""',)]"
postgresql,postgresql,"explain (costs off)   select a, b, grouping(a,b), array_agg(v order by v)     from gstest1 group by cube(a,b)",groupingsets.sql,SAME,,"[('GroupAggregate',), ('  Group Key: ""*VALUES*"".column1, ""*VALUES*"".column2',), ('  Group Key: ""*VALUES*"".column1',), ('  Group Key: ()',), ('  Sort Key: ""*VALUES*"".column2',), ('    Group Key: ""*VALUES*"".column2',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column1, ""*VALUES*"".column2',), ('        ->  Values Scan on ""*VALUES*""',)]"
postgresql,postgresql,"select unsortable_col, count(*)   from gstest4 group by grouping sets ((unsortable_col),(unsortable_col))   order by unsortable_col::text",groupingsets.sql,SAME,,"[('1', 4), ('1', 4), ('2', 4), ('2', 4)]"
postgresql,postgresql,"select unhashable_col, unsortable_col,        grouping(unhashable_col, unsortable_col),        count(*), sum(v)   from gstest4 group by grouping sets ((unhashable_col),(unsortable_col))  order by 3, 5",groupingsets.sql,SAME,,"[('0000', None, 1, 2, 17), ('0001', None, 1, 2, 34), ('0010', None, 1, 2, 68), ('0011', None, 1, 2, 136), (None, '2', 2, 4, 60), (None, '1', 2, 4, 195)]"
postgresql,postgresql,"explain (costs off)   select unhashable_col, unsortable_col,          grouping(unhashable_col, unsortable_col),          count(*), sum(v)     from gstest4 group by grouping sets ((unhashable_col),(unsortable_col))    order by 3,5",groupingsets.sql,SAME,,"[('Sort',), ('  Sort Key: (GROUPING(unhashable_col, unsortable_col)), (sum(v))',), ('  ->  MixedAggregate',), ('        Hash Key: unsortable_col',), ('        Group Key: unhashable_col',), ('        ->  Sort',), ('              Sort Key: unhashable_col',), ('              ->  Seq Scan on gstest4',)]"
postgresql,postgresql,"select unhashable_col, unsortable_col,        grouping(unhashable_col, unsortable_col),        count(*), sum(v)   from gstest4 group by grouping sets ((v,unhashable_col),(v,unsortable_col))  order by 3,5",groupingsets.sql,SAME,,"[('0000', None, 1, 1, 1), ('0001', None, 1, 1, 2), ('0010', None, 1, 1, 4), ('0011', None, 1, 1, 8), ('0000', None, 1, 1, 16), ('0001', None, 1, 1, 32), ('0010', None, 1, 1, 64), ('0011', None, 1, 1, 128), (None, '1', 2, 1, 1), (None, '1', 2, 1, 2), (None, '2', 2, 1, 4), (None, '2', 2, 1, 8), (None, '2', 2, 1, 16), (None, '2', 2, 1, 32), (None, '1', 2, 1, 64), (None, '1', 2, 1, 128)]"
postgresql,postgresql,"explain (costs off)   select unhashable_col, unsortable_col,          grouping(unhashable_col, unsortable_col),          count(*), sum(v)     from gstest4 group by grouping sets ((v,unhashable_col),(v,unsortable_col))    order by 3,5",groupingsets.sql,SAME,,"[('Sort',), ('  Sort Key: (GROUPING(unhashable_col, unsortable_col)), (sum(v))',), ('  ->  MixedAggregate',), ('        Hash Key: v, unsortable_col',), ('        Group Key: v, unhashable_col',), ('        ->  Sort',), ('              Sort Key: v, unhashable_col',), ('              ->  Seq Scan on gstest4',)]"
postgresql,postgresql,"select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),a)",groupingsets.sql,SAME,,[]
postgresql,postgresql,"explain (costs off)   select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),a)",groupingsets.sql,SAME,,"[('HashAggregate',), ('  Hash Key: a, b',), ('  Hash Key: a',), ('  ->  Seq Scan on gstest_empty',)]"
postgresql,postgresql,"select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),())",groupingsets.sql,SAME,,"[(None, None, None, 0)]"
postgresql,postgresql,"select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),(),(),())",groupingsets.sql,SAME,,"[(None, None, None, 0), (None, None, None, 0), (None, None, None, 0)]"
postgresql,postgresql,"explain (costs off)   select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),(),(),())",groupingsets.sql,SAME,,"[('MixedAggregate',), ('  Hash Key: a, b',), ('  Group Key: ()',), ('  Group Key: ()',), ('  Group Key: ()',), ('  ->  Seq Scan on gstest_empty',)]"
postgresql,postgresql,"select sum(v), count(*) from gstest_empty group by grouping sets ((),(),())",groupingsets.sql,SAME,,"[(None, 0), (None, 0), (None, 0)]"
postgresql,postgresql,"explain (costs off)   select sum(v), count(*) from gstest_empty group by grouping sets ((),(),())",groupingsets.sql,SAME,,"[('Aggregate',), ('  Group Key: ()',), ('  Group Key: ()',), ('  Group Key: ()',), ('  ->  Seq Scan on gstest_empty',)]"
postgresql,postgresql,"select a, b, sum(v.x)   from (values (1),(2)) v(x), gstest_data(v.x)  group by grouping sets (a,b)  order by 1, 2, 3",groupingsets.sql,SAME,,"[(1, None, 3), (2, None, 6), (None, 1, 3), (None, 2, 3), (None, 3, 3)]"
postgresql,postgresql,"explain (costs off)   select a, b, sum(v.x)     from (values (1),(2)) v(x), gstest_data(v.x)    group by grouping sets (a,b)    order by 3, 1, 2",groupingsets.sql,SAME,,"[('Sort',), ('  Sort Key: (sum(""*VALUES*"".column1)), gstest_data.a, gstest_data.b',), ('  ->  HashAggregate',), ('        Hash Key: gstest_data.a',), ('        Hash Key: gstest_data.b',), ('        ->  Nested Loop',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Function Scan on gstest_data',)]"
postgresql,postgresql,"select a, b, grouping(a,b), sum(v), count(*), max(v)   from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+2,b+2)) order by 3,6",groupingsets.sql,SAME,,"[(1, 1, 0, 21, 2, 11), (1, 2, 0, 25, 2, 13), (1, 3, 0, 14, 1, 14), (2, 3, 0, 15, 1, 15), (3, 3, 0, 16, 1, 16), (3, 4, 0, 17, 1, 17), (4, 1, 0, 37, 2, 19), (None, None, 3, 21, 2, 11), (None, None, 3, 21, 2, 11), (None, None, 3, 25, 2, 13), (None, None, 3, 25, 2, 13), (None, None, 3, 14, 1, 14), (None, None, 3, 14, 1, 14), (None, None, 3, 15, 1, 15), (None, None, 3, 15, 1, 15), (None, None, 3, 16, 1, 16), (None, None, 3, 16, 1, 16), (None, None, 3, 17, 1, 17), (None, None, 3, 17, 1, 17), (None, None, 3, 37, 2, 19), (None, None, 3, 37, 2, 19)]"
postgresql,postgresql,"explain (costs off)   select a, b, grouping(a,b), sum(v), count(*), max(v)     from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+2,b+2)) order by 3,6",groupingsets.sql,SAME,,"[('Sort',), ('  Sort Key: (GROUPING(""*VALUES*"".column1, ""*VALUES*"".column2)), (max(""*VALUES*"".column3))',), ('  ->  HashAggregate',), ('        Hash Key: ""*VALUES*"".column1, ""*VALUES*"".column2',), ('        Hash Key: (""*VALUES*"".column1 + 1), (""*VALUES*"".column2 + 1)',), ('        Hash Key: (""*VALUES*"".column1 + 2), (""*VALUES*"".column2 + 2)',), ('        ->  Values Scan on ""*VALUES*""',)]"
postgresql,postgresql,"select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum   from gstest2 group by cube (a,b) order by rsum, a, b",groupingsets.sql,SAME,,"[(None, None, None, None)]"
postgresql,postgresql,"explain (costs off)   select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum     from gstest2 group by cube (a,b) order by rsum, a, b",groupingsets.sql,SAME,,"[('Sort',), ('  Sort Key: (sum((sum(c))) OVER (?)), a, b',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: a, b',), ('              ->  MixedAggregate',), ('                    Hash Key: a, b',), ('                    Hash Key: a',), ('                    Hash Key: b',), ('                    Group Key: ()',), ('                    ->  Seq Scan on gstest2',)]"
postgresql,postgresql,"select a, b, sum(v.x)   from (values (1),(2)) v(x), gstest_data(v.x)  group by cube (a,b) order by a,b",groupingsets.sql,SAME,,"[(1, 1, 1), (1, 2, 1), (1, 3, 1), (1, None, 3), (2, 1, 2), (2, 2, 2), (2, 3, 2), (2, None, 6), (None, 1, 3), (None, 2, 3), (None, 3, 3), (None, None, 9)]"
postgresql,postgresql,"explain (costs off)   select a, b, sum(v.x)     from (values (1),(2)) v(x), gstest_data(v.x)    group by cube (a,b) order by a,b",groupingsets.sql,SAME,,"[('Sort',), ('  Sort Key: gstest_data.a, gstest_data.b',), ('  ->  MixedAggregate',), ('        Hash Key: gstest_data.a, gstest_data.b',), ('        Hash Key: gstest_data.a',), ('        Hash Key: gstest_data.b',), ('        Group Key: ()',), ('        ->  Nested Loop',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Function Scan on gstest_data',)]"
postgresql,postgresql,BEGIN,groupingsets.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_hashagg = false,groupingsets.sql,SAME,,[]
postgresql,postgresql,COMMIT,groupingsets.sql,SAME,,[]
postgresql,postgresql,set enable_indexscan = false,groupingsets.sql,SAME,,[]
postgresql,postgresql,set hash_mem_multiplier = 1.0,groupingsets.sql,SAME,,[]
postgresql,postgresql,set work_mem = '64kB',groupingsets.sql,SAME,,[]
postgresql,postgresql,set work_mem = '384kB',groupingsets.sql,SAME,,[]
postgresql,postgresql,"select v||'a', case grouping(v||'a') when 1 then 1 else 0 end, count(*)   from unnest(array[1,1], array['a','b']) u(i,v)  group by rollup(i, v||'a') order by 1,3",groupingsets.sql,SAME,,"[('aa', 0, 1), ('ba', 0, 1), (None, 1, 2), (None, 1, 2)]"
postgresql,postgresql,"select v||'a', case when grouping(v||'a') = 1 then 1 else 0 end, count(*)   from unnest(array[1,1], array['a','b']) u(i,v)  group by rollup(i, v||'a') order by 1,3",groupingsets.sql,SAME,,"[('aa', 0, 1), ('ba', 0, 1), (None, 1, 2), (None, 1, 2)]"
postgresql,postgresql,analyze bug_16784,groupingsets.sql,SAME,,[]
postgresql,postgresql,alter table bug_16784 set (autovacuum_enabled = 'false'),groupingsets.sql,SAME,,[]
postgresql,postgresql,set work_mem='64kB',groupingsets.sql,SAME,,[]
postgresql,postgresql,set enable_sort = false,groupingsets.sql,SAME,,[]
postgresql,postgresql,"select * from   (values (1),(2)) v(a),   lateral (select a, i, j, count(*) from              bug_16784 group by cube(i,j)) s   order by v.a, i, j",groupingsets.sql,SAME,,"[(1, 1, 0, 1, 1), (1, 1, 0, 2, 1), (1, 1, 0, 3, 1), (1, 1, 0, 4, 1), (1, 1, 0, 5, 1), (1, 1, 0, 6, 1), (1, 1, 0, 7, 1), (1, 1, 0, 8, 1), (1, 1, 0, 9, 1), (1, 1, 0, None, 9), (1, 1, 1, 10, 1), (1, 1, 1, 11, 1), (1, 1, 1, 12, 1), (1, 1, 1, 13, 1), (1, 1, 1, 14, 1), (1, 1, 1, 15, 1), (1, 1, 1, 16, 1), (1, 1, 1, 17, 1), (1, 1, 1, 18, 1), (1, 1, 1, 19, 1), (1, 1, 1, None, 10), (1, 1, 2, 20, 1), (1, 1, 2, 21, 1), (1, 1, 2, 22, 1), (1, 1, 2, 23, 1), (1, 1, 2, 24, 1), (1, 1, 2, 25, 1), (1, 1, 2, 26, 1), (1, 1, 2, 27, 1), (1, 1, 2, 28, 1), (1, 1, 2, 29, 1), (1, 1, 2, None, 10), (1, 1, 3, 30, 1), (1, 1, 3, 31, 1), (1, 1, 3, 32, 1), (1, 1, 3, 33, 1), (1, 1, 3, 34, 1), (1, 1, 3, 35, 1), (1, 1, 3, 36, 1), (1, 1, 3, 37, 1), (1, 1, 3, 38, 1), (1, 1, 3, 39, 1), (1, 1, 3, None, 10), (1, 1, 4, 40, 1), (1, 1, 4, None, 1), (1, 1, None, 1, 1), (1, 1, None, 2, 1), (1, 1, None, 3, 1), (1, 1, None, 4, 1), (1, 1, None, 5, 1), (1, 1, None, 6, 1), (1, 1, None, 7, 1), (1, 1, None, 8, 1), (1, 1, None, 9, 1), (1, 1, None, 10, 1), (1, 1, None, 11, 1), (1, 1, None, 12, 1), (1, 1, None, 13, 1), (1, 1, None, 14, 1), (1, 1, None, 15, 1), (1, 1, None, 16, 1), (1, 1, None, 17, 1), (1, 1, None, 18, 1), (1, 1, None, 19, 1), (1, 1, None, 20, 1), (1, 1, None, 21, 1), (1, 1, None, 22, 1), (1, 1, None, 23, 1), (1, 1, None, 24, 1), (1, 1, None, 25, 1), (1, 1, None, 26, 1), (1, 1, None, 27, 1), (1, 1, None, 28, 1), (1, 1, None, 29, 1), (1, 1, None, 30, 1), (1, 1, None, 31, 1), (1, 1, None, 32, 1), (1, 1, None, 33, 1), (1, 1, None, 34, 1), (1, 1, None, 35, 1), (1, 1, None, 36, 1), (1, 1, None, 37, 1), (1, 1, None, 38, 1), (1, 1, None, 39, 1), (1, 1, None, 40, 1), (1, 1, None, None, 40), (2, 2, 0, 1, 1), (2, 2, 0, 2, 1), (2, 2, 0, 3, 1), (2, 2, 0, 4, 1), (2, 2, 0, 5, 1), (2, 2, 0, 6, 1), (2, 2, 0, 7, 1), (2, 2, 0, 8, 1), (2, 2, 0, 9, 1), (2, 2, 0, None, 9), (2, 2, 1, 10, 1), (2, 2, 1, 11, 1), (2, 2, 1, 12, 1), (2, 2, 1, 13, 1), (2, 2, 1, 14, 1), (2, 2, 1, 15, 1), (2, 2, 1, 16, 1), (2, 2, 1, 17, 1), (2, 2, 1, 18, 1), (2, 2, 1, 19, 1), (2, 2, 1, None, 10), (2, 2, 2, 20, 1), (2, 2, 2, 21, 1), (2, 2, 2, 22, 1), (2, 2, 2, 23, 1), (2, 2, 2, 24, 1), (2, 2, 2, 25, 1), (2, 2, 2, 26, 1), (2, 2, 2, 27, 1), (2, 2, 2, 28, 1), (2, 2, 2, 29, 1), (2, 2, 2, None, 10), (2, 2, 3, 30, 1), (2, 2, 3, 31, 1), (2, 2, 3, 32, 1), (2, 2, 3, 33, 1), (2, 2, 3, 34, 1), (2, 2, 3, 35, 1), (2, 2, 3, 36, 1), (2, 2, 3, 37, 1), (2, 2, 3, 38, 1), (2, 2, 3, 39, 1), (2, 2, 3, None, 10), (2, 2, 4, 40, 1), (2, 2, 4, None, 1), (2, 2, None, 1, 1), (2, 2, None, 2, 1), (2, 2, None, 3, 1), (2, 2, None, 4, 1), (2, 2, None, 5, 1), (2, 2, None, 6, 1), (2, 2, None, 7, 1), (2, 2, None, 8, 1), (2, 2, None, 9, 1), (2, 2, None, 10, 1), (2, 2, None, 11, 1), (2, 2, None, 12, 1), (2, 2, None, 13, 1), (2, 2, None, 14, 1), (2, 2, None, 15, 1), (2, 2, None, 16, 1), (2, 2, None, 17, 1), (2, 2, None, 18, 1), (2, 2, None, 19, 1), (2, 2, None, 20, 1), (2, 2, None, 21, 1), (2, 2, None, 22, 1), (2, 2, None, 23, 1), (2, 2, None, 24, 1), (2, 2, None, 25, 1), (2, 2, None, 26, 1), (2, 2, None, 27, 1), (2, 2, None, 28, 1), (2, 2, None, 29, 1), (2, 2, None, 30, 1), (2, 2, None, 31, 1), (2, 2, None, 32, 1), (2, 2, None, 33, 1), (2, 2, None, 34, 1), (2, 2, None, 35, 1), (2, 2, None, 36, 1), (2, 2, None, 37, 1), (2, 2, None, 38, 1), (2, 2, None, 39, 1), (2, 2, None, 40, 1), (2, 2, None, None, 40)]"
postgresql,postgresql,analyze gs_data_1,groupingsets.sql,SAME,,[]
postgresql,postgresql,alter table gs_data_1 set (autovacuum_enabled = 'false'),groupingsets.sql,SAME,,[]
postgresql,postgresql,set work_mem='64kB',groupingsets.sql,SAME,,[]
postgresql,postgresql,set enable_sort = true,groupingsets.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg = false,groupingsets.sql,SAME,,[]
postgresql,postgresql,set jit_above_cost = 0,groupingsets.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select g100, g10, sum(g::numeric), count(*), max(g::text) from gs_data_1 group by cube (g1000, g100,g10)",groupingsets.sql,SAME,,"[('GroupAggregate',), ('  Group Key: g1000, g100, g10',), ('  Group Key: g1000, g100',), ('  Group Key: g1000',), ('  Group Key: ()',), ('  Sort Key: g100, g10',), ('    Group Key: g100, g10',), ('    Group Key: g100',), ('  Sort Key: g10, g1000',), ('    Group Key: g10, g1000',), ('    Group Key: g10',), ('  ->  Sort',), ('        Sort Key: g1000, g100, g10',), ('        ->  Seq Scan on gs_data_1',)]"
postgresql,postgresql,set enable_hashagg = true,groupingsets.sql,SAME,,[]
postgresql,postgresql,set enable_sort = false,groupingsets.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select g100, g10, sum(g::numeric), count(*), max(g::text) from gs_data_1 group by cube (g1000, g100,g10)",groupingsets.sql,SAME,,"[('GroupAggregate',), ('  Group Key: g1000, g100, g10',), ('  Group Key: g1000, g100',), ('  Group Key: g1000',), ('  Group Key: ()',), ('  Sort Key: g100, g10',), ('    Group Key: g100, g10',), ('    Group Key: g100',), ('  Sort Key: g10, g1000',), ('    Group Key: g10, g1000',), ('    Group Key: g10',), ('  ->  Sort',), ('        Sort Key: g1000, g100, g10',), ('        ->  Seq Scan on gs_data_1',)]"
postgresql,postgresql,set enable_sort = true,groupingsets.sql,SAME,,[]
postgresql,postgresql,set work_mem to default,groupingsets.sql,SAME,,[]
postgresql,postgresql,set hash_mem_multiplier to default,groupingsets.sql,SAME,,[]
postgresql,postgresql,(select * from gs_hash_1 except select * from gs_group_1)   union all (select * from gs_group_1 except select * from gs_hash_1),groupingsets.sql,SAME,,[]
postgresql,postgresql,"select a, b, c from (values (1, 2, 3), (4, null, 6), (7, 8, 9)) as t (a, b, c) group by all rollup(a, b), rollup(a, c) order by a, b, c",groupingsets.sql,SAME,,"[(1, 2, 3), (1, 2, None), (1, 2, None), (1, None, 3), (1, None, 3), (1, None, None), (1, None, None), (1, None, None), (4, None, 6), (4, None, 6), (4, None, 6), (4, None, None), (4, None, None), (4, None, None), (4, None, None), (4, None, None), (7, 8, 9), (7, 8, None), (7, 8, None), (7, None, 9), (7, None, 9), (7, None, None), (7, None, None), (7, None, None), (None, None, None)]"
postgresql,postgresql,"select a, b, c from (values (1, 2, 3), (4, null, 6), (7, 8, 9)) as t (a, b, c) group by rollup(a, b), rollup(a, c) order by a, b, c",groupingsets.sql,SAME,,"[(1, 2, 3), (1, 2, None), (1, 2, None), (1, None, 3), (1, None, 3), (1, None, None), (1, None, None), (1, None, None), (4, None, 6), (4, None, 6), (4, None, 6), (4, None, None), (4, None, None), (4, None, None), (4, None, None), (4, None, None), (7, 8, 9), (7, 8, None), (7, 8, None), (7, None, 9), (7, None, 9), (7, None, None), (7, None, None), (7, None, None), (None, None, None)]"
postgresql,postgresql,"select a, b, c from (values (1, 2, 3), (4, null, 6), (7, 8, 9)) as t (a, b, c) group by distinct rollup(a, b), rollup(a, c) order by a, b, c",groupingsets.sql,SAME,,"[(1, 2, 3), (1, 2, None), (1, None, 3), (1, None, None), (4, None, 6), (4, None, 6), (4, None, None), (4, None, None), (7, 8, 9), (7, 8, None), (7, None, 9), (7, None, None), (None, None, None)]"
postgresql,postgresql,"select distinct a, b, c from (values (1, 2, 3), (4, null, 6), (7, 8, 9)) as t (a, b, c) group by rollup(a, b), rollup(a, c) order by a, b, c",groupingsets.sql,SAME,,"[(1, 2, 3), (1, 2, None), (1, None, 3), (1, None, None), (4, None, 6), (4, None, None), (7, 8, 9), (7, 8, None), (7, None, 9), (7, None, None), (None, None, None)]"
postgresql,postgresql,explain (costs off) select (select grouping(v1)) from (values ((select 1))) v(v1) group by cube(v1),groupingsets.sql,SAME,,"[('MixedAggregate',), ('  Hash Key: $2',), ('  Group Key: ()',), ('  InitPlan 1 (returns $1)',), ('    ->  Result',), ('  InitPlan 3 (returns $2)',), ('    ->  Result',), ('  ->  Result',), ('  SubPlan 2',), ('    ->  Result',)]"
postgresql,postgresql,select (select grouping(v1)) from (values ((select 1))) v(v1) group by cube(v1),groupingsets.sql,SAME,,"[(1,), (0,)]"
postgresql,postgresql,explain (costs off) select (select grouping(v1)) from (values ((select 1))) v(v1) group by v1,groupingsets.sql,SAME,,"[('GroupAggregate',), ('  InitPlan 1 (returns $1)',), ('    ->  Result',), ('  InitPlan 3 (returns $2)',), ('    ->  Result',), ('  ->  Result',), ('  SubPlan 2',), ('    ->  Result',)]"
postgresql,postgresql,select (select grouping(v1)) from (values ((select 1))) v(v1) group by v1,groupingsets.sql,SAME,,"[(0,)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, MDY',)]"
postgresql,postgresql,SET vacuum_cost_delay TO 40,guc.sql,SAME,,[]
postgresql,postgresql,"SET datestyle = 'ISO, YMD'",guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SET LOCAL vacuum_cost_delay TO 50,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SET LOCAL datestyle = 'SQL',guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,BEGIN,guc.sql,SAME,,[]
postgresql,postgresql,SET LOCAL vacuum_cost_delay TO 50,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('50ms',)]"
postgresql,postgresql,SET LOCAL datestyle = 'SQL',guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('SQL, YMD',)]"
postgresql,postgresql,COMMIT,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,BEGIN,guc.sql,SAME,,[]
postgresql,postgresql,SET vacuum_cost_delay TO 60,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('60ms',)]"
postgresql,postgresql,SET datestyle = 'German',guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('German, DMY',)]"
postgresql,postgresql,ROLLBACK,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,BEGIN,guc.sql,SAME,,[]
postgresql,postgresql,SET vacuum_cost_delay TO 70,guc.sql,SAME,,[]
postgresql,postgresql,SET datestyle = 'MDY',guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, MDY',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SAVEPOINT first_sp,guc.sql,SAME,,[]
postgresql,postgresql,SET vacuum_cost_delay TO 80.1,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('80100us',)]"
postgresql,postgresql,"SET datestyle = 'German, DMY'",guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('German, DMY',)]"
postgresql,postgresql,ROLLBACK TO first_sp,guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, MDY',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SAVEPOINT second_sp,guc.sql,SAME,,[]
postgresql,postgresql,SET vacuum_cost_delay TO '900us',guc.sql,SAME,,[]
postgresql,postgresql,"SET datestyle = 'SQL, YMD'",guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('SQL, YMD',)]"
postgresql,postgresql,SAVEPOINT third_sp,guc.sql,SAME,,[]
postgresql,postgresql,SET vacuum_cost_delay TO 100,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('100ms',)]"
postgresql,postgresql,"SET datestyle = 'Postgres, MDY'",guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('Postgres, MDY',)]"
postgresql,postgresql,ROLLBACK TO third_sp,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('900us',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('SQL, YMD',)]"
postgresql,postgresql,ROLLBACK TO second_sp,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('70ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, MDY',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,ROLLBACK,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,BEGIN,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SAVEPOINT sp,guc.sql,SAME,,[]
postgresql,postgresql,SET LOCAL vacuum_cost_delay TO 30,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('30ms',)]"
postgresql,postgresql,"SET LOCAL datestyle = 'Postgres, MDY'",guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('Postgres, MDY',)]"
postgresql,postgresql,ROLLBACK TO sp,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,ROLLBACK,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,BEGIN,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SAVEPOINT sp,guc.sql,SAME,,[]
postgresql,postgresql,SET LOCAL vacuum_cost_delay TO 30,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('30ms',)]"
postgresql,postgresql,"SET LOCAL datestyle = 'Postgres, MDY'",guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('Postgres, MDY',)]"
postgresql,postgresql,RELEASE SAVEPOINT sp,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('30ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('Postgres, MDY',)]"
postgresql,postgresql,ROLLBACK,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,BEGIN,guc.sql,SAME,,[]
postgresql,postgresql,SET vacuum_cost_delay TO 40,guc.sql,SAME,,[]
postgresql,postgresql,SET LOCAL vacuum_cost_delay TO 50,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('50ms',)]"
postgresql,postgresql,"SET datestyle = 'ISO, DMY'",guc.sql,SAME,,[]
postgresql,postgresql,"SET LOCAL datestyle = 'Postgres, MDY'",guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('Postgres, MDY',)]"
postgresql,postgresql,COMMIT,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('40ms',)]"
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, DMY',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SET datestyle = iso, ymd",guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, YMD',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,RESET datestyle,guc.sql,SAME,,[]
postgresql,postgresql,SHOW datestyle,guc.sql,SAME,,"[('ISO, MDY',)]"
postgresql,postgresql,SELECT '2006-08-13 12:34:56'::timestamptz,guc.sql,SAME,,"[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SET custom.my_guc = 42,guc.sql,SAME,,[]
postgresql,postgresql,SHOW custom.my_guc,guc.sql,SAME,,"[('42',)]"
postgresql,postgresql,RESET custom.my_guc,guc.sql,SAME,,[]
postgresql,postgresql,SHOW custom.my_guc,guc.sql,SAME,,"[('',)]"
postgresql,postgresql,SET custom.my.qualified.guc = 'foo',guc.sql,SAME,,[]
postgresql,postgresql,SHOW custom.my.qualified.guc,guc.sql,SAME,,"[('foo',)]"
postgresql,postgresql,SET plpgsql.extra_foo_warnings = true,guc.sql,SAME,,[]
postgresql,postgresql,SET plpgsql.extra_foo_warnings = true,guc.sql,SAME,,[]
postgresql,postgresql,SHOW plpgsql.extra_foo_warnings,guc.sql,SAME,,"[('true',)]"
postgresql,postgresql,CREATE TEMP TABLE reset_test ( data text ) ON COMMIT DELETE ROWS,guc.sql,SAME,,[]
postgresql,postgresql,SELECT relname FROM pg_class WHERE relname = 'reset_test',guc.sql,SAME,,"[('reset_test',)]"
postgresql,postgresql,DISCARD TEMP,guc.sql,SAME,,[]
postgresql,postgresql,SELECT relname FROM pg_class WHERE relname = 'reset_test',guc.sql,SAME,,[]
postgresql,postgresql,DECLARE foo CURSOR WITH HOLD FOR SELECT 1,guc.sql,SAME,,[]
postgresql,postgresql,PREPARE foo AS SELECT 1,guc.sql,SAME,,[]
postgresql,postgresql,LISTEN foo_event,guc.sql,SAME,,[]
postgresql,postgresql,SET vacuum_cost_delay = 13,guc.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE tmp_foo (data text) ON COMMIT DELETE ROWS,guc.sql,SAME,,[]
postgresql,postgresql,SELECT pg_listening_channels(),guc.sql,SAME,,"[('foo_event',)]"
postgresql,postgresql,SELECT name FROM pg_prepared_statements,guc.sql,SAME,,"[('foo',)]"
postgresql,postgresql,SELECT name FROM pg_cursors,guc.sql,SAME,,"[('foo',)]"
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('13ms',)]"
postgresql,postgresql,SELECT relname from pg_class where relname = 'tmp_foo',guc.sql,SAME,,"[('tmp_foo',)]"
postgresql,postgresql,SELECT current_user = 'regress_guc_user',guc.sql,SAME,,"[(False,)]"
postgresql,postgresql,DISCARD ALL,guc.sql,SAME,,[]
postgresql,postgresql,SELECT pg_listening_channels(),guc.sql,SAME,,[]
postgresql,postgresql,SELECT name FROM pg_prepared_statements,guc.sql,SAME,,[]
postgresql,postgresql,SELECT name FROM pg_cursors,guc.sql,SAME,,[]
postgresql,postgresql,SHOW vacuum_cost_delay,guc.sql,SAME,,"[('0',)]"
postgresql,postgresql,SELECT relname from pg_class where relname = 'tmp_foo',guc.sql,SAME,,[]
postgresql,postgresql,SELECT current_user = 'regress_guc_user',guc.sql,SAME,,"[(False,)]"
postgresql,postgresql,"set search_path = foo, public, not_there_initially",guc.sql,SAME,,[]
postgresql,postgresql,select current_schemas(false),guc.sql,SAME,,"[(['public'],)]"
postgresql,postgresql,create schema not_there_initially,guc.sql,SAME,,[]
postgresql,postgresql,select current_schemas(false),guc.sql,SAME,,"[(['public', 'not_there_initially'],)]"
postgresql,postgresql,drop schema not_there_initially,guc.sql,SAME,,[]
postgresql,postgresql,select current_schemas(false),guc.sql,SAME,,"[(['public'],)]"
postgresql,postgresql,reset search_path,guc.sql,SAME,,[]
postgresql,postgresql,set work_mem = '3MB',guc.sql,SAME,,[]
postgresql,postgresql,create function report_guc(text) returns text as $$ select current_setting($1) $$ language sql set work_mem = '1MB',guc.sql,SAME,,[]
postgresql,postgresql,"select report_guc('work_mem'), current_setting('work_mem')",guc.sql,SAME,,"[('1MB', '3MB')]"
postgresql,postgresql,alter function report_guc(text) set work_mem = '2MB',guc.sql,SAME,,[]
postgresql,postgresql,"select report_guc('work_mem'), current_setting('work_mem')",guc.sql,SAME,,"[('2MB', '3MB')]"
postgresql,postgresql,alter function report_guc(text) reset all,guc.sql,SAME,,[]
postgresql,postgresql,"select report_guc('work_mem'), current_setting('work_mem')",guc.sql,SAME,,"[('3MB', '3MB')]"
postgresql,postgresql,set work_mem = '3MB',guc.sql,SAME,,[]
postgresql,postgresql,set work_mem = '3MB',guc.sql,SAME,,[]
postgresql,postgresql,select current_setting('work_mem'),guc.sql,SAME,,"[('3MB',)]"
postgresql,postgresql,"select current_setting('nosuch.setting', true) is null",guc.sql,SAME,,"[(True,)]"
postgresql,postgresql,set nosuch.setting = 'nada',guc.sql,SAME,,[]
postgresql,postgresql,select current_setting('nosuch.setting'),guc.sql,SAME,,"[('nada',)]"
postgresql,postgresql,"select current_setting('nosuch.setting', false)",guc.sql,SAME,,"[('nada',)]"
postgresql,postgresql,"select current_setting('nosuch.setting', true)",guc.sql,SAME,,"[('nada',)]"
postgresql,postgresql,set check_function_bodies = off,guc.sql,SAME,,[]
postgresql,postgresql,create function func_with_bad_set() returns int as $$ select 1 $$ language sql set default_text_search_config = no_such_config,guc.sql,SAME,,[]
postgresql,postgresql,reset check_function_bodies,guc.sql,SAME,,[]
postgresql,postgresql,set default_with_oids to f,guc.sql,SAME,,[]
postgresql,postgresql,SELECT pg_settings_get_flags(NULL),guc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_settings_get_flags('does_not_exist'),guc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT name FROM tab_settings_flags   WHERE category = 'Developer Options' AND NOT not_in_sample   ORDER BY 1,guc.sql,SAME,,[]
postgresql,postgresql,SELECT name FROM tab_settings_flags   WHERE category ~ '^Query Tuning' AND NOT explain   ORDER BY 1,guc.sql,SAME,,"[('default_statistics_target',)]"
postgresql,postgresql,SELECT name FROM tab_settings_flags   WHERE NOT category = 'Preset Options' AND runtime_computed   ORDER BY 1,guc.sql,SAME,,[]
postgresql,postgresql,SELECT name FROM tab_settings_flags   WHERE category = 'Preset Options' AND NOT not_in_sample   ORDER BY 1,guc.sql,SAME,,[]
postgresql,postgresql,SELECT name FROM tab_settings_flags   WHERE no_reset AND NOT no_reset_all   ORDER BY 1,guc.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashint2(v)::bit(32) as standard,        hashint2extended(v, 0)::bit(32) as extended0,        hashint2extended(v, 1)::bit(32) as extended1 FROM   (VALUES (0::int2), (1::int2), (17::int2), (42::int2)) x(v) WHERE  hashint2(v)::bit(32) != hashint2extended(v, 0)::bit(32)        OR hashint2(v)::bit(32) = hashint2extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashint4(v)::bit(32) as standard,        hashint4extended(v, 0)::bit(32) as extended0,        hashint4extended(v, 1)::bit(32) as extended1 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v) WHERE  hashint4(v)::bit(32) != hashint4extended(v, 0)::bit(32)        OR hashint4(v)::bit(32) = hashint4extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashint8(v)::bit(32) as standard,        hashint8extended(v, 0)::bit(32) as extended0,        hashint8extended(v, 1)::bit(32) as extended1 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v) WHERE  hashint8(v)::bit(32) != hashint8extended(v, 0)::bit(32)        OR hashint8(v)::bit(32) = hashint8extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashfloat4(v)::bit(32) as standard,        hashfloat4extended(v, 0)::bit(32) as extended0,        hashfloat4extended(v, 1)::bit(32) as extended1 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v) WHERE  hashfloat4(v)::bit(32) != hashfloat4extended(v, 0)::bit(32)        OR hashfloat4(v)::bit(32) = hashfloat4extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashfloat8(v)::bit(32) as standard,        hashfloat8extended(v, 0)::bit(32) as extended0,        hashfloat8extended(v, 1)::bit(32) as extended1 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v) WHERE  hashfloat8(v)::bit(32) != hashfloat8extended(v, 0)::bit(32)        OR hashfloat8(v)::bit(32) = hashfloat8extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashoid(v)::bit(32) as standard,        hashoidextended(v, 0)::bit(32) as extended0,        hashoidextended(v, 1)::bit(32) as extended1 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v) WHERE  hashoid(v)::bit(32) != hashoidextended(v, 0)::bit(32)        OR hashoid(v)::bit(32) = hashoidextended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashchar(v)::bit(32) as standard,        hashcharextended(v, 0)::bit(32) as extended0,        hashcharextended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::""char""), ('1'), ('x'), ('X'), ('p'), ('N')) x(v) WHERE  hashchar(v)::bit(32) != hashcharextended(v, 0)::bit(32)        OR hashchar(v)::bit(32) = hashcharextended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashname(v)::bit(32) as standard,        hashnameextended(v, 0)::bit(32) as extended0,        hashnameextended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL), ('PostgreSQL'), ('eIpUEtqmY89'), ('AXKEJBTK'),         ('muop28x03'), ('yi3nm0d73')) x(v) WHERE  hashname(v)::bit(32) != hashnameextended(v, 0)::bit(32)        OR hashname(v)::bit(32) = hashnameextended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashtext(v)::bit(32) as standard,        hashtextextended(v, 0)::bit(32) as extended0,        hashtextextended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL), ('PostgreSQL'), ('eIpUEtqmY89'), ('AXKEJBTK'),         ('muop28x03'), ('yi3nm0d73')) x(v) WHERE  hashtext(v)::bit(32) != hashtextextended(v, 0)::bit(32)        OR hashtext(v)::bit(32) = hashtextextended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashoidvector(v)::bit(32) as standard,        hashoidvectorextended(v, 0)::bit(32) as extended0,        hashoidvectorextended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::oidvector), ('0 1 2 3 4'), ('17 18 19 20'),         ('42 43 42 45'), ('550273 550273 570274'),         ('207112489 207112499 21512 2155 372325 1363252')) x(v) WHERE  hashoidvector(v)::bit(32) != hashoidvectorextended(v, 0)::bit(32)        OR hashoidvector(v)::bit(32) = hashoidvectorextended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hash_aclitem(v)::bit(32) as standard,        hash_aclitem_extended(v, 0)::bit(32) as extended0,        hash_aclitem_extended(v, 1)::bit(32) as extended1 FROM   (SELECT DISTINCT(relacl[1]) FROM pg_class LIMIT 10) x(v) WHERE  hash_aclitem(v)::bit(32) != hash_aclitem_extended(v, 0)::bit(32)        OR hash_aclitem(v)::bit(32) = hash_aclitem_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashmacaddr(v)::bit(32) as standard,        hashmacaddrextended(v, 0)::bit(32) as extended0,        hashmacaddrextended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::macaddr), ('08:00:2b:01:02:04'), ('08:00:2b:01:02:04'),         ('e2:7f:51:3e:70:49'), ('d6:a9:4a:78:1c:d5'),         ('ea:29:b1:5e:1f:a5')) x(v) WHERE  hashmacaddr(v)::bit(32) != hashmacaddrextended(v, 0)::bit(32)        OR hashmacaddr(v)::bit(32) = hashmacaddrextended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashinet(v)::bit(32) as standard,        hashinetextended(v, 0)::bit(32) as extended0,        hashinetextended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::inet), ('192.168.100.128/25'), ('192.168.100.0/8'),         ('172.168.10.126/16'), ('172.18.103.126/24'), ('192.188.13.16/32')) x(v) WHERE  hashinet(v)::bit(32) != hashinetextended(v, 0)::bit(32)        OR hashinet(v)::bit(32) = hashinetextended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hash_numeric(v)::bit(32) as standard,        hash_numeric_extended(v, 0)::bit(32) as extended0,        hash_numeric_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (0), (1.149484958), (17.149484958), (42.149484958),         (149484958.550273), (2071124898672)) x(v) WHERE  hash_numeric(v)::bit(32) != hash_numeric_extended(v, 0)::bit(32)        OR hash_numeric(v)::bit(32) = hash_numeric_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashmacaddr8(v)::bit(32) as standard,        hashmacaddr8extended(v, 0)::bit(32) as extended0,        hashmacaddr8extended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::macaddr8), ('08:00:2b:01:02:04:36:49'),         ('08:00:2b:01:02:04:f0:e8'), ('e2:7f:51:3e:70:49:16:29'),         ('d6:a9:4a:78:1c:d5:47:32'), ('ea:29:b1:5e:1f:a5')) x(v) WHERE  hashmacaddr8(v)::bit(32) != hashmacaddr8extended(v, 0)::bit(32)        OR hashmacaddr8(v)::bit(32) = hashmacaddr8extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hash_array(v)::bit(32) as standard,        hash_array_extended(v, 0)::bit(32) as extended0,        hash_array_extended(v, 1)::bit(32) as extended1 FROM   (VALUES ('{0}'::int4[]), ('{0,1,2,3,4}'), ('{17,18,19,20}'),         ('{42,34,65,98}'), ('{550273,590027, 870273}'),         ('{207112489, 807112489}')) x(v) WHERE  hash_array(v)::bit(32) != hash_array_extended(v, 0)::bit(32)        OR hash_array(v)::bit(32) = hash_array_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashbpchar(v)::bit(32) as standard,        hashbpcharextended(v, 0)::bit(32) as extended0,        hashbpcharextended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL), ('PostgreSQL'), ('eIpUEtqmY89'), ('AXKEJBTK'),         ('muop28x03'), ('yi3nm0d73')) x(v) WHERE  hashbpchar(v)::bit(32) != hashbpcharextended(v, 0)::bit(32)        OR hashbpchar(v)::bit(32) = hashbpcharextended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, time_hash(v)::bit(32) as standard,        time_hash_extended(v, 0)::bit(32) as extended0,        time_hash_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::time), ('11:09:59'), ('1:09:59'), ('11:59:59'),         ('7:9:59'), ('5:15:59')) x(v) WHERE  time_hash(v)::bit(32) != time_hash_extended(v, 0)::bit(32)        OR time_hash(v)::bit(32) = time_hash_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, timetz_hash(v)::bit(32) as standard,        timetz_hash_extended(v, 0)::bit(32) as extended0,        timetz_hash_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::timetz), ('00:11:52.518762-07'), ('00:11:52.51762-08'),         ('00:11:52.62-01'), ('00:11:52.62+01'), ('11:59:59+04')) x(v) WHERE  timetz_hash(v)::bit(32) != timetz_hash_extended(v, 0)::bit(32)        OR timetz_hash(v)::bit(32) = timetz_hash_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, interval_hash(v)::bit(32) as standard,        interval_hash_extended(v, 0)::bit(32) as extended0,        interval_hash_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::interval),         ('5 month 7 day 46 minutes'), ('1 year 7 day 46 minutes'),         ('1 year 7 month 20 day 46 minutes'), ('5 month'),         ('17 year 11 month 7 day 9 hours 46 minutes 5 seconds')) x(v) WHERE  interval_hash(v)::bit(32) != interval_hash_extended(v, 0)::bit(32)        OR interval_hash(v)::bit(32) = interval_hash_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, timestamp_hash(v)::bit(32) as standard,        timestamp_hash_extended(v, 0)::bit(32) as extended0,        timestamp_hash_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::timestamp), ('2017-08-22 00:09:59.518762'),         ('2015-08-20 00:11:52.51762-08'),         ('2017-05-22 00:11:52.62-01'),         ('2013-08-22 00:11:52.62+01'), ('2013-08-22 11:59:59+04')) x(v) WHERE  timestamp_hash(v)::bit(32) != timestamp_hash_extended(v, 0)::bit(32)        OR timestamp_hash(v)::bit(32) = timestamp_hash_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, uuid_hash(v)::bit(32) as standard,        uuid_hash_extended(v, 0)::bit(32) as extended0,        uuid_hash_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::uuid), ('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'),         ('5a9ba4ac-8d6f-11e7-bb31-be2e44b06b34'),         ('99c6705c-d939-461c-a3c9-1690ad64ed7b'),         ('7deed3ca-8d6f-11e7-bb31-be2e44b06b34'),         ('9ad46d4f-6f2a-4edd-aadb-745993928e1e')) x(v) WHERE  uuid_hash(v)::bit(32) != uuid_hash_extended(v, 0)::bit(32)        OR uuid_hash(v)::bit(32) = uuid_hash_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, pg_lsn_hash(v)::bit(32) as standard,        pg_lsn_hash_extended(v, 0)::bit(32) as extended0,        pg_lsn_hash_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::pg_lsn), ('16/B374D84'), ('30/B374D84'),         ('255/B374D84'), ('25/B379D90'), ('900/F37FD90')) x(v) WHERE  pg_lsn_hash(v)::bit(32) != pg_lsn_hash_extended(v, 0)::bit(32)        OR pg_lsn_hash(v)::bit(32) = pg_lsn_hash_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy')",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hashenum(v)::bit(32) as standard,        hashenumextended(v, 0)::bit(32) as extended0,        hashenumextended(v, 1)::bit(32) as extended1 FROM   (VALUES ('sad'::mood), ('ok'), ('happy')) x(v) WHERE  hashenum(v)::bit(32) != hashenumextended(v, 0)::bit(32)        OR hashenum(v)::bit(32) = hashenumextended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,DROP TYPE mood,hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, jsonb_hash(v)::bit(32) as standard,        jsonb_hash_extended(v, 0)::bit(32) as extended0,        jsonb_hash_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (NULL::jsonb),         ('{""a"": ""aaa bbb ddd ccc"", ""b"": [""eee fff ggg""], ""c"": {""d"": ""hhh iii""}}'),         ('{""foo"": [true, ""bar""], ""tags"": {""e"": 1, ""f"": null}}'),         ('{""g"": {""h"": ""value""}}')) x(v) WHERE  jsonb_hash(v)::bit(32) != jsonb_hash_extended(v, 0)::bit(32)        OR jsonb_hash(v)::bit(32) = jsonb_hash_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hash_range(v)::bit(32) as standard,        hash_range_extended(v, 0)::bit(32) as extended0,        hash_range_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (int4range(10, 20)), (int4range(23, 43)),         (int4range(5675, 550273)),         (int4range(550274, 1550274)), (int4range(1550275, 208112489))) x(v) WHERE  hash_range(v)::bit(32) != hash_range_extended(v, 0)::bit(32)        OR hash_range(v)::bit(32) = hash_range_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hash_multirange(v)::bit(32) as standard, 	   hash_multirange_extended(v, 0)::bit(32) as extended0, 	   hash_multirange_extended(v, 1)::bit(32) as extended1 FROM   (VALUES ('{[10,20)}'::int4multirange), ('{[23, 43]}'::int4multirange),          ('{[5675, 550273)}'::int4multirange), 		 ('{[550274, 1550274)}'::int4multirange), 		 ('{[1550275, 208112489)}'::int4multirange)) x(v) WHERE  hash_multirange(v)::bit(32) != hash_multirange_extended(v, 0)::bit(32)        OR hash_multirange(v)::bit(32) = hash_multirange_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE hash_test_t1 AS (a int, b text)",hash_func.sql,SAME,,[]
postgresql,postgresql,"SELECT v as value, hash_record(v)::bit(32) as standard,        hash_record_extended(v, 0)::bit(32) as extended0,        hash_record_extended(v, 1)::bit(32) as extended1 FROM   (VALUES (row(1, 'aaa')::hash_test_t1, row(2, 'bbb'), row(-1, 'ccc'))) x(v) WHERE  hash_record(v)::bit(32) != hash_record_extended(v, 0)::bit(32)        OR hash_record(v)::bit(32) = hash_record_extended(v, 1)::bit(32)",hash_func.sql,SAME,,[]
postgresql,postgresql,DROP TYPE hash_test_t1,hash_func.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE hash_test_t2 AS (a varbit, b text)",hash_func.sql,SAME,,[]
postgresql,postgresql,DROP TYPE hash_test_t2,hash_func.sql,SAME,,[]
postgresql,postgresql,SELECT hashfloat4('0'::float4) = hashfloat4('-0'::float4) AS t,hash_func.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT hashfloat4('NaN'::float4) = hashfloat4(-'NaN'::float4) AS t,hash_func.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT hashfloat8('0'::float8) = hashfloat8('-0'::float8) AS t,hash_func.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT hashfloat8('NaN'::float8) = hashfloat8(-'NaN'::float8) AS t,hash_func.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT hashfloat4('NaN'::float4) = hashfloat8('NaN'::float8) AS t,hash_func.sql,SAME,,"[(True,)]"
postgresql,postgresql,ANALYZE hash_i4_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,ANALYZE hash_name_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,ANALYZE hash_txt_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,ANALYZE hash_f8_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX hash_i4_index ON hash_i4_heap USING hash (random int4_ops),hash_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX hash_name_index ON hash_name_heap USING hash (random name_ops),hash_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX hash_txt_index ON hash_txt_heap USING hash (random text_ops),hash_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX hash_f8_index ON hash_f8_heap USING hash (random float8_ops)   WITH (fillfactor=60),hash_index.sql,SAME,,[]
postgresql,postgresql,create unique index hash_f8_index_1 on hash_f8_heap(abs(random)),hash_index.sql,SAME,,[]
postgresql,postgresql,"create unique index hash_f8_index_2 on hash_f8_heap((seqno + 1), random)",hash_index.sql,SAME,,[]
postgresql,postgresql,create unique index hash_f8_index_3 on hash_f8_heap(random) where seqno > 1000,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hash_i4_heap    WHERE hash_i4_heap.random = 843938989,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hash_i4_heap    WHERE hash_i4_heap.random = 66766766,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hash_name_heap    WHERE hash_name_heap.random = '1505703298'::name,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hash_name_heap    WHERE hash_name_heap.random = '7777777'::name,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hash_txt_heap    WHERE hash_txt_heap.random = '1351610853'::text,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hash_txt_heap    WHERE hash_txt_heap.random = '111111112222222233333333'::text,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hash_f8_heap    WHERE hash_f8_heap.random = '444705537'::float8,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hash_f8_heap    WHERE hash_f8_heap.random = '88888888'::float8,hash_index.sql,SAME,,[]
postgresql,postgresql,UPDATE hash_i4_heap    SET random = 1    WHERE hash_i4_heap.seqno = 1492,hash_index.sql,SAME,,[]
postgresql,postgresql,"SELECT h.seqno AS i1492, h.random AS i1    FROM hash_i4_heap h    WHERE h.random = 1",hash_index.sql,SAME,,[]
postgresql,postgresql,UPDATE hash_i4_heap    SET seqno = 20000    WHERE hash_i4_heap.random = 1492795354,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT h.seqno AS i20000    FROM hash_i4_heap h    WHERE h.random = 1492795354,hash_index.sql,SAME,,[]
postgresql,postgresql,UPDATE hash_name_heap    SET random = '0123456789abcdef'::name    WHERE hash_name_heap.seqno = 6543,hash_index.sql,SAME,,[]
postgresql,postgresql,"SELECT h.seqno AS i6543, h.random AS c0_to_f    FROM hash_name_heap h    WHERE h.random = '0123456789abcdef'::name",hash_index.sql,SAME,,[]
postgresql,postgresql,UPDATE hash_name_heap    SET seqno = 20000    WHERE hash_name_heap.random = '76652222'::name,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT h.seqno AS emptyset    FROM hash_name_heap h    WHERE h.random = '76652222'::name,hash_index.sql,SAME,,[]
postgresql,postgresql,UPDATE hash_txt_heap    SET random = '0123456789abcdefghijklmnop'::text    WHERE hash_txt_heap.seqno = 4002,hash_index.sql,SAME,,[]
postgresql,postgresql,"SELECT h.seqno AS i4002, h.random AS c0_to_p    FROM hash_txt_heap h    WHERE h.random = '0123456789abcdefghijklmnop'::text",hash_index.sql,SAME,,[]
postgresql,postgresql,UPDATE hash_txt_heap    SET seqno = 20000    WHERE hash_txt_heap.random = '959363399'::text,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT h.seqno AS t20000    FROM hash_txt_heap h    WHERE h.random = '959363399'::text,hash_index.sql,SAME,,[]
postgresql,postgresql,UPDATE hash_f8_heap    SET random = '-1234.1234'::float8    WHERE hash_f8_heap.seqno = 8906,hash_index.sql,SAME,,[]
postgresql,postgresql,"SELECT h.seqno AS i8096, h.random AS f1234_1234    FROM hash_f8_heap h    WHERE h.random = '-1234.1234'::float8",hash_index.sql,SAME,,[]
postgresql,postgresql,UPDATE hash_f8_heap    SET seqno = 20000    WHERE hash_f8_heap.random = '488912369'::float8,hash_index.sql,SAME,,[]
postgresql,postgresql,SELECT h.seqno AS f20000    FROM hash_f8_heap h    WHERE h.random = '488912369'::float8,hash_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX hash_split_index on hash_split_heap USING HASH (keycol),hash_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,hash_index.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = OFF,hash_index.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,hash_index.sql,SAME,,[]
postgresql,postgresql,DECLARE c CURSOR FOR SELECT * from hash_split_heap WHERE keycol = 1,hash_index.sql,SAME,,[]
postgresql,postgresql,MOVE FORWARD ALL FROM c,hash_index.sql,SAME,,[]
postgresql,postgresql,MOVE BACKWARD 10000 FROM c,hash_index.sql,SAME,,[]
postgresql,postgresql,MOVE BACKWARD ALL FROM c,hash_index.sql,SAME,,[]
postgresql,postgresql,CLOSE c,hash_index.sql,SAME,,[]
postgresql,postgresql,END,hash_index.sql,SAME,,[]
postgresql,postgresql,DELETE FROM hash_split_heap WHERE keycol = 1,hash_index.sql,SAME,,[]
postgresql,postgresql,VACUUM hash_split_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX hash_split_index SET (fillfactor = 10),hash_index.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX hash_split_index,hash_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX hash_cleanup_index on hash_cleanup_heap USING HASH (keycol),hash_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,hash_index.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,hash_index.sql,SAME,,[]
postgresql,postgresql,VACUUM hash_cleanup_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,TRUNCATE hash_cleanup_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,hash_index.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,hash_index.sql,SAME,,[]
postgresql,postgresql,VACUUM hash_cleanup_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,TRUNCATE hash_cleanup_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,BEGIN,hash_index.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,hash_index.sql,SAME,,[]
postgresql,postgresql,VACUUM hash_cleanup_heap,hash_index.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE hash_temp_heap (x int, y int)",hash_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX hash_idx ON hash_temp_heap USING hash (x),hash_index.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX hash_idx ON hash_heap_float4 USING hash (x),hash_index.sql,SAME,,[]
postgresql,postgresql,"select satisfies_hash_partition('text_hashp'::regclass, 2, 0, 'xxx'::text) OR 	   satisfies_hash_partition('text_hashp'::regclass, 2, 1, 'xxx'::text) AS satisfies",hash_part.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SET DateStyle = 'Postgres, MDY'",horology.sql,SAME,,[]
postgresql,postgresql,SHOW TimeZone,horology.sql,SAME,,"[('Europe/Zurich',)]"
postgresql,postgresql,set datestyle to dmy,horology.sql,SAME,,[]
postgresql,postgresql,reset datestyle,horology.sql,SAME,,[]
postgresql,postgresql,SELECT timestamp with time zone 'J2452271+08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 26, 17, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone 'J2452271-08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 27, 9, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone 'J2452271.5+08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 27, 5, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone 'J2452271.5-08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 27, 21, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone 'J2452271 04:05:06+08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 26, 21, 5, 6, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone 'J2452271 04:05:06-08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 27, 13, 5, 6, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone 'J2452271T040506+08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 26, 21, 5, 6, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone 'J2452271T040506-08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 27, 13, 5, 6, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone 'J2452271T040506.789+08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 26, 21, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone 'J2452271T040506.789-08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 27, 13, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone '12.27.2001 04:05:06.789+08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 26, 21, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT timestamp with time zone '12.27.2001 04:05:06.789-08',horology.sql,SAME,,"[(datetime.datetime(2001, 12, 27, 13, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SET DateStyle = 'German',horology.sql,SAME,,[]
postgresql,postgresql,SET DateStyle = 'ISO',horology.sql,SAME,,[]
postgresql,postgresql,SELECT time without time zone '040506.789+08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000),)]"
postgresql,postgresql,SELECT time without time zone '040506.789-08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000),)]"
postgresql,postgresql,SELECT time without time zone 'T040506.789+08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000),)]"
postgresql,postgresql,SELECT time without time zone 'T040506.789-08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000),)]"
postgresql,postgresql,SELECT time with time zone '040506.789+08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800))),)]"
postgresql,postgresql,SELECT time with time zone '040506.789-08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),)]"
postgresql,postgresql,SELECT time with time zone 'T040506.789+08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800))),)]"
postgresql,postgresql,SELECT time with time zone 'T040506.789-08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),)]"
postgresql,postgresql,SELECT time with time zone 'T040506.789 +08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800))),)]"
postgresql,postgresql,SELECT time with time zone 'T040506.789 -08',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),)]"
postgresql,postgresql,SELECT time with time zone '2001-12-27 T040506.789 America/Los_Angeles',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),)]"
postgresql,postgresql,SELECT time with time zone 'J2452271 T040506.789 America/Los_Angeles',horology.sql,SAME,,"[(datetime.time(4, 5, 6, 789000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),)]"
postgresql,postgresql,"SET DateStyle = 'Postgres, MDY'",horology.sql,SAME,,[]
postgresql,postgresql,"SELECT timestamp without time zone '12/31/294276' - timestamp without time zone '12/23/1999' AS ""106751991 Days""",horology.sql,SAME,,"[(datetime.timedelta(days=106751991),)]"
postgresql,postgresql,"SELECT (timestamp without time zone 'today' = (timestamp without time zone 'yesterday' + interval '1 day')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone 'today' = (timestamp without time zone 'tomorrow' - interval '1 day')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone 'today 10:30' = (timestamp without time zone 'yesterday' + interval '1 day 10 hr 30 min')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone '10:30 today' = (timestamp without time zone 'yesterday' + interval '1 day 10 hr 30 min')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone 'tomorrow' = (timestamp without time zone 'yesterday' + interval '2 days')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone 'tomorrow 16:00:00' = (timestamp without time zone 'today' + interval '1 day 16 hours')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone '16:00:00 tomorrow' = (timestamp without time zone 'today' + interval '1 day 16 hours')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone 'yesterday 12:34:56' = (timestamp without time zone 'tomorrow' - interval '2 days - 12:34:56')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone '12:34:56 yesterday' = (timestamp without time zone 'tomorrow' - interval '2 days - 12:34:56')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone 'tomorrow' > 'now') as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp with time zone 'today' = (timestamp with time zone 'yesterday' + interval '1 day')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp with time zone 'today' = (timestamp with time zone 'tomorrow' - interval '1 day')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp with time zone 'tomorrow' = (timestamp with time zone 'yesterday' + interval '2 days')) as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp with time zone 'tomorrow' > 'now') as ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SET TIME ZONE 'CST7CDT,M4.1.0,M10.5.0'",horology.sql,SAME,,[]
postgresql,postgresql,RESET TIME ZONE,horology.sql,SAME,,[]
postgresql,postgresql,"SELECT CAST(time '01:02' AS interval) AS ""+01:02""",horology.sql,SAME,,"[(datetime.timedelta(seconds=3720),)]"
postgresql,postgresql,"SELECT CAST(interval '02:03' AS time) AS ""02:03:00""",horology.sql,SAME,,"[(datetime.time(2, 3),)]"
postgresql,postgresql,"SELECT CAST(interval '-02:03' AS time) AS ""21:57:00""",horology.sql,SAME,,"[(datetime.time(21, 57),)]"
postgresql,postgresql,"SELECT time '01:30' + interval '02:01' AS ""03:31:00""",horology.sql,SAME,,"[(datetime.time(3, 31),)]"
postgresql,postgresql,"SELECT time '01:30' - interval '02:01' AS ""23:29:00""",horology.sql,SAME,,"[(datetime.time(23, 29),)]"
postgresql,postgresql,"SELECT time '02:30' + interval '36:01' AS ""14:31:00""",horology.sql,SAME,,"[(datetime.time(14, 31),)]"
postgresql,postgresql,"SELECT time '03:30' + interval '1 month 04:01' AS ""07:31:00""",horology.sql,SAME,,"[(datetime.time(7, 31),)]"
postgresql,postgresql,"SELECT time with time zone '01:30-08' - interval '02:01' AS ""23:29:00-08""",horology.sql,SAME,,"[(datetime.time(23, 29, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),)]"
postgresql,postgresql,"SELECT time with time zone '02:30-08' + interval '36:01' AS ""14:31:00-08""",horology.sql,SAME,,"[(datetime.time(14, 31, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),)]"
postgresql,postgresql,"SELECT CAST(CAST(date 'today' + time with time zone '05:30'             + interval '02:01' AS time with time zone) AS time) AS ""07:31:00""",horology.sql,SAME,,"[(datetime.time(7, 31),)]"
postgresql,postgresql,"SELECT CAST(cast(date 'today' + time with time zone '03:30'   + interval '1 month 04:01' as timestamp without time zone) AS time) AS ""07:31:00""",horology.sql,SAME,,"[(datetime.time(7, 31),)]"
postgresql,postgresql,"SELECT (timestamp with time zone '2000-11-27', timestamp with time zone '2000-11-28')   OVERLAPS (timestamp with time zone '2000-11-27 12:00', timestamp with time zone '2000-11-30') AS ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp with time zone '2000-11-26', timestamp with time zone '2000-11-27')   OVERLAPS (timestamp with time zone '2000-11-27 12:00', timestamp with time zone '2000-11-30') AS ""False""",horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT (timestamp with time zone '2000-11-27', timestamp with time zone '2000-11-28')   OVERLAPS (timestamp with time zone '2000-11-27 12:00', interval '1 day') AS ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp with time zone '2000-11-27', interval '12 hours')   OVERLAPS (timestamp with time zone '2000-11-27 12:00', timestamp with time zone '2000-11-30') AS ""False""",horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT (timestamp with time zone '2000-11-27', interval '12 hours')   OVERLAPS (timestamp with time zone '2000-11-27', interval '12 hours') AS ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp with time zone '2000-11-27', interval '12 hours')   OVERLAPS (timestamp with time zone '2000-11-27 12:00', interval '12 hours') AS ""False""",horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT (timestamp without time zone '2000-11-27', timestamp without time zone '2000-11-28')   OVERLAPS (timestamp without time zone '2000-11-27 12:00', timestamp without time zone '2000-11-30') AS ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone '2000-11-26', timestamp without time zone '2000-11-27')   OVERLAPS (timestamp without time zone '2000-11-27 12:00', timestamp without time zone '2000-11-30') AS ""False""",horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT (timestamp without time zone '2000-11-27', timestamp without time zone '2000-11-28')   OVERLAPS (timestamp without time zone '2000-11-27 12:00', interval '1 day') AS ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone '2000-11-27', interval '12 hours')   OVERLAPS (timestamp without time zone '2000-11-27 12:00', timestamp without time zone '2000-11-30') AS ""False""",horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT (timestamp without time zone '2000-11-27', interval '12 hours')   OVERLAPS (timestamp without time zone '2000-11-27', interval '12 hours') AS ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (timestamp without time zone '2000-11-27', interval '12 hours')   OVERLAPS (timestamp without time zone '2000-11-27 12:00', interval '12 hours') AS ""False""",horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT (time '00:00', time '01:00')   OVERLAPS (time '00:30', time '01:30') AS ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (time '00:00', interval '1 hour')   OVERLAPS (time '00:30', interval '1 hour') AS ""True""",horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT (time '00:00', interval '1 hour')   OVERLAPS (time '01:30', interval '1 hour') AS ""False""",horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT (time '00:00', interval '1 hour')   OVERLAPS (time '01:30', interval '1 day') AS ""False""",horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT f1 AS ""timestamp""   FROM TEMP_TIMESTAMP   ORDER BY ""timestamp""",horology.sql,SAME,,[]
postgresql,postgresql,"SELECT d.f1 AS ""timestamp"",    timestamp with time zone '1980-01-06 00:00 GMT' AS gpstime_zero,    d.f1 - timestamp with time zone '1980-01-06 00:00 GMT' AS difference   FROM TEMP_TIMESTAMP d   ORDER BY difference",horology.sql,SAME,,[]
postgresql,postgresql,"SELECT d1.f1 AS timestamp1, d2.f1 AS timestamp2, d1.f1 - d2.f1 AS difference   FROM TEMP_TIMESTAMP d1, TEMP_TIMESTAMP d2   ORDER BY timestamp1, timestamp2, difference",horology.sql,SAME,,[]
postgresql,postgresql,"SELECT f1 AS ""timestamp"", date(f1) AS date   FROM TEMP_TIMESTAMP   WHERE f1 <> timestamp 'now'   ORDER BY date, ""timestamp""",horology.sql,SAME,,[]
postgresql,postgresql,SELECT '2202020-10-05'::date > '2020-10-05'::timestamp as t,horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '2020-10-05'::timestamp > '2202020-10-05'::date as f,horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT '2202020-10-05'::date > '2020-10-05'::timestamptz as t,horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '2020-10-05'::timestamptz > '2202020-10-05'::date as f,horology.sql,SAME,,"[(False,)]"
postgresql,postgresql,SET TimeZone = 'UTC-2',horology.sql,SAME,,[]
postgresql,postgresql,SELECT '4714-11-24 BC'::date < '2020-10-05'::timestamptz as t,horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '2020-10-05'::timestamptz >= '4714-11-24 BC'::date as t,horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '4714-11-24 BC'::timestamp < '2020-10-05'::timestamptz as t,horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '2020-10-05'::timestamptz >= '4714-11-24 BC'::timestamp as t,horology.sql,SAME,,"[(True,)]"
postgresql,postgresql,RESET TimeZone,horology.sql,SAME,,[]
postgresql,postgresql,"SET DateStyle TO 'US,Postgres'",horology.sql,SAME,,[]
postgresql,postgresql,SHOW DateStyle,horology.sql,SAME,,"[('Postgres, MDY',)]"
postgresql,postgresql,"SET DateStyle TO 'US,ISO'",horology.sql,SAME,,[]
postgresql,postgresql,"SET DateStyle TO 'US,SQL'",horology.sql,SAME,,[]
postgresql,postgresql,SHOW DateStyle,horology.sql,SAME,,"[('SQL, MDY',)]"
postgresql,postgresql,"SET DateStyle TO 'European,Postgres'",horology.sql,SAME,,[]
postgresql,postgresql,SHOW DateStyle,horology.sql,SAME,,"[('Postgres, DMY',)]"
postgresql,postgresql,"SET DateStyle TO 'European,ISO'",horology.sql,SAME,,[]
postgresql,postgresql,SHOW DateStyle,horology.sql,SAME,,"[('ISO, DMY',)]"
postgresql,postgresql,"SET DateStyle TO 'European,SQL'",horology.sql,SAME,,[]
postgresql,postgresql,SHOW DateStyle,horology.sql,SAME,,"[('SQL, DMY',)]"
postgresql,postgresql,RESET DateStyle,horology.sql,SAME,,[]
postgresql,postgresql,"SELECT to_timestamp('2011$03!18 23_38_15', 'YYYY-MM-DD HH24:MI:SS')",horology.sql,SAME,,"[(datetime.datetime(2011, 3, 18, 23, 38, 15, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('1985 January 12', 'YYYY FMMonth DD')",horology.sql,SAME,,"[(datetime.datetime(1985, 1, 12, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('1985 FMMonth 12', 'YYYY ""FMMonth"" DD')",horology.sql,SAME,,"[(datetime.datetime(1985, 1, 12, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('1985 \ 12', 'YYYY \\ DD')",horology.sql,SAME,,"[(datetime.datetime(1985, 1, 12, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('My birthday-> Year: 1976, Month: May, Day: 16',                     '""My birthday-> Year:"" YYYY, ""Month:"" FMMonth, ""Day:"" DD')",horology.sql,SAME,,"[(datetime.datetime(1976, 5, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('1,582nd VIII 21', 'Y,YYYth FMRM DD')",horology.sql,SAME,,"[(datetime.datetime(1582, 8, 21, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=2048))),)]"
postgresql,postgresql,"SELECT to_timestamp('15 ""text between quote marks"" 98 54 45',                     E'HH24 ""\\""text between quote marks\\"""" YY MI SS')",horology.sql,SAME,,"[(datetime.datetime(1998, 1, 1, 15, 54, 45, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('05121445482000', 'MMDDHH24MISSYYYY')",horology.sql,SAME,,"[(datetime.datetime(2000, 5, 12, 14, 45, 48, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('2000January09Sunday', 'YYYYFMMonthDDFMDay')",horology.sql,SAME,,"[(datetime.datetime(2000, 1, 9, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('97/Feb/16', 'YY:Mon:DD')",horology.sql,SAME,,"[(datetime.datetime(1997, 2, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('97/Feb/16', 'FXYY:Mon:DD')",horology.sql,SAME,,"[(datetime.datetime(1997, 2, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('97/Feb/16', 'FXYY/Mon/DD')",horology.sql,SAME,,"[(datetime.datetime(1997, 2, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('19971116', 'YYYYMMDD')",horology.sql,SAME,,"[(datetime.datetime(1997, 11, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('1997 AD 11 16', 'YYYY BC MM DD')",horology.sql,SAME,,"[(datetime.datetime(1997, 11, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('1997 A.D. 11 16', 'YYYY B.C. MM DD')",horology.sql,SAME,,"[(datetime.datetime(1997, 11, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('9-1116', 'Y-MMDD')",horology.sql,SAME,,"[(datetime.datetime(2009, 11, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('95-1116', 'YY-MMDD')",horology.sql,SAME,,"[(datetime.datetime(1995, 11, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('995-1116', 'YYY-MMDD')",horology.sql,SAME,,"[(datetime.datetime(1995, 11, 16, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2005426', 'YYYYWWD')",horology.sql,SAME,,"[(datetime.datetime(2005, 10, 15, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('2005300', 'YYYYDDD')",horology.sql,SAME,,"[(datetime.datetime(2005, 10, 27, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('2005527', 'IYYYIWID')",horology.sql,SAME,,"[(datetime.datetime(2006, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('005527', 'IYYIWID')",horology.sql,SAME,,"[(datetime.datetime(2006, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('05527', 'IYIWID')",horology.sql,SAME,,"[(datetime.datetime(2006, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('5527', 'IIWID')",horology.sql,SAME,,"[(datetime.datetime(2006, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2005364', 'IYYYIDDD')",horology.sql,SAME,,"[(datetime.datetime(2006, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('20050302', 'YYYYMMDD')",horology.sql,SAME,,"[(datetime.datetime(2005, 3, 2, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2005 03 02', 'YYYYMMDD')",horology.sql,SAME,,"[(datetime.datetime(2005, 3, 2, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp(' 2005 03 02', 'YYYYMMDD')",horology.sql,SAME,,"[(datetime.datetime(2005, 3, 2, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('  20050302', 'YYYYMMDD')",horology.sql,SAME,,"[(datetime.datetime(2005, 3, 2, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 11:38 AM', 'YYYY-MM-DD HH12:MI PM')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 11, 38, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 11:38 PM', 'YYYY-MM-DD HH12:MI PM')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 23, 38, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 11:38 A.M.', 'YYYY-MM-DD HH12:MI P.M.')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 11, 38, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 11:38 P.M.', 'YYYY-MM-DD HH12:MI P.M.')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 23, 38, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 11:38 +05',    'YYYY-MM-DD HH12:MI TZH')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 7, 38, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 11:38 -05',    'YYYY-MM-DD HH12:MI TZH')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 17, 38, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 11:38 +05:20', 'YYYY-MM-DD HH12:MI TZH:TZM')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 7, 18, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 11:38 -05:20', 'YYYY-MM-DD HH12:MI TZH:TZM')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 17, 58, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 11:38 20',     'YYYY-MM-DD HH12:MI TZM')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 12, 18, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2018-11-02 12:34:56.025', 'YYYY-MM-DD HH24:MI:SS.MS')",horology.sql,SAME,,"[(datetime.datetime(2018, 11, 2, 12, 34, 56, 25000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT i, to_timestamp('2018-11-02 12:34:56', 'YYYY-MM-DD HH24:MI:SS.FF' || i) FROM generate_series(1, 6) i",horology.sql,SAME,,"[(1, datetime.datetime(2018, 11, 2, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (2, datetime.datetime(2018, 11, 2, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (3, datetime.datetime(2018, 11, 2, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (4, datetime.datetime(2018, 11, 2, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (5, datetime.datetime(2018, 11, 2, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (6, datetime.datetime(2018, 11, 2, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))))]"
postgresql,postgresql,"SELECT i, to_timestamp('2018-11-02 12:34:56.1', 'YYYY-MM-DD HH24:MI:SS.FF' || i) FROM generate_series(1, 6) i",horology.sql,SAME,,"[(1, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (2, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (3, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (4, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (5, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (6, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))))]"
postgresql,postgresql,"SELECT i, to_timestamp('2018-11-02 12:34:56.12', 'YYYY-MM-DD HH24:MI:SS.FF' || i) FROM generate_series(1, 6) i",horology.sql,SAME,,"[(1, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (2, datetime.datetime(2018, 11, 2, 12, 34, 56, 120000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (3, datetime.datetime(2018, 11, 2, 12, 34, 56, 120000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (4, datetime.datetime(2018, 11, 2, 12, 34, 56, 120000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (5, datetime.datetime(2018, 11, 2, 12, 34, 56, 120000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (6, datetime.datetime(2018, 11, 2, 12, 34, 56, 120000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))))]"
postgresql,postgresql,"SELECT i, to_timestamp('2018-11-02 12:34:56.123', 'YYYY-MM-DD HH24:MI:SS.FF' || i) FROM generate_series(1, 6) i",horology.sql,SAME,,"[(1, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (2, datetime.datetime(2018, 11, 2, 12, 34, 56, 120000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (3, datetime.datetime(2018, 11, 2, 12, 34, 56, 123000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (4, datetime.datetime(2018, 11, 2, 12, 34, 56, 123000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (5, datetime.datetime(2018, 11, 2, 12, 34, 56, 123000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (6, datetime.datetime(2018, 11, 2, 12, 34, 56, 123000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))))]"
postgresql,postgresql,"SELECT i, to_timestamp('2018-11-02 12:34:56.1234', 'YYYY-MM-DD HH24:MI:SS.FF' || i) FROM generate_series(1, 6) i",horology.sql,SAME,,"[(1, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (2, datetime.datetime(2018, 11, 2, 12, 34, 56, 120000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (3, datetime.datetime(2018, 11, 2, 12, 34, 56, 123000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (4, datetime.datetime(2018, 11, 2, 12, 34, 56, 123400, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (5, datetime.datetime(2018, 11, 2, 12, 34, 56, 123400, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (6, datetime.datetime(2018, 11, 2, 12, 34, 56, 123400, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))))]"
postgresql,postgresql,"SELECT i, to_timestamp('2018-11-02 12:34:56.12345', 'YYYY-MM-DD HH24:MI:SS.FF' || i) FROM generate_series(1, 6) i",horology.sql,SAME,,"[(1, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (2, datetime.datetime(2018, 11, 2, 12, 34, 56, 120000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (3, datetime.datetime(2018, 11, 2, 12, 34, 56, 123000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (4, datetime.datetime(2018, 11, 2, 12, 34, 56, 123500, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (5, datetime.datetime(2018, 11, 2, 12, 34, 56, 123450, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (6, datetime.datetime(2018, 11, 2, 12, 34, 56, 123450, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))))]"
postgresql,postgresql,"SELECT i, to_timestamp('2018-11-02 12:34:56.123456', 'YYYY-MM-DD HH24:MI:SS.FF' || i) FROM generate_series(1, 6) i",horology.sql,SAME,,"[(1, datetime.datetime(2018, 11, 2, 12, 34, 56, 100000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (2, datetime.datetime(2018, 11, 2, 12, 34, 56, 120000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (3, datetime.datetime(2018, 11, 2, 12, 34, 56, 123000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (4, datetime.datetime(2018, 11, 2, 12, 34, 56, 123500, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (5, datetime.datetime(2018, 11, 2, 12, 34, 56, 123460, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), (6, datetime.datetime(2018, 11, 2, 12, 34, 56, 123456, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))))]"
postgresql,postgresql,"SELECT to_date('1 4 1902', 'Q MM YYYY')",horology.sql,SAME,,"[(datetime.date(1902, 4, 1),)]"
postgresql,postgresql,"SELECT to_date('3 4 21 01', 'W MM CC YY')",horology.sql,SAME,,"[(datetime.date(2001, 4, 15),)]"
postgresql,postgresql,"SELECT to_date('2458872', 'J')",horology.sql,SAME,,"[(datetime.date(2020, 1, 23),)]"
postgresql,postgresql,"SELECT to_date('-44-02-01 BC','YYYY-MM-DD BC')",horology.sql,SAME,,"[(datetime.date(44, 2, 1),)]"
postgresql,postgresql,"SELECT to_timestamp('-44-02-01 11:12:13 BC','YYYY-MM-DD HH24:MI:SS BC')",horology.sql,SAME,,"[(datetime.datetime(44, 2, 1, 11, 12, 13, tzinfo=datetime.timezone(datetime.timedelta(seconds=2048))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18 23:38:15', 'YYYY-MM-DD  HH24:MI:SS')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 23, 38, 15, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18  23:38:15', 'YYYY-MM-DD  HH24:MI:SS')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 23, 38, 15, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18   23:38:15', 'YYYY-MM-DD  HH24:MI:SS')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 23, 38, 15, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18  23:38:15', 'YYYY-MM-DD HH24:MI:SS')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 23, 38, 15, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18  23:38:15', 'YYYY-MM-DD  HH24:MI:SS')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 23, 38, 15, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2011-12-18  23:38:15', 'YYYY-MM-DD   HH24:MI:SS')",horology.sql,SAME,,"[(datetime.datetime(2011, 12, 18, 23, 38, 15, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2000+   JUN', 'YYYY/MON')",horology.sql,SAME,,"[(datetime.datetime(2000, 6, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('  2000 +JUN', 'YYYY/MON')",horology.sql,SAME,,"[(datetime.datetime(2000, 6, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp(' 2000 +JUN', 'YYYY//MON')",horology.sql,SAME,,"[(datetime.datetime(2000, 6, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('2000  +JUN', 'YYYY//MON')",horology.sql,SAME,,"[(datetime.datetime(2000, 6, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('2000 + JUN', 'YYYY MON')",horology.sql,SAME,,"[(datetime.datetime(2000, 6, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('2000 ++ JUN', 'YYYY  MON')",horology.sql,SAME,,"[(datetime.datetime(2000, 6, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('2000 + + JUN', 'YYYY   MON')",horology.sql,SAME,,"[(datetime.datetime(2000, 6, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('2000 -10', 'YYYY TZH')",horology.sql,SAME,,"[(datetime.datetime(2000, 1, 1, 11, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2000 -10', 'YYYY  TZH')",horology.sql,SAME,,"[(datetime.datetime(1999, 12, 31, 15, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_date('2011 12  18', 'YYYY MM DD')",horology.sql,SAME,,"[(datetime.date(2011, 12, 18),)]"
postgresql,postgresql,"SELECT to_date('2011 12  18', 'YYYY MM  DD')",horology.sql,SAME,,"[(datetime.date(2011, 12, 18),)]"
postgresql,postgresql,"SELECT to_date('2011 12  18', 'YYYY MM   DD')",horology.sql,SAME,,"[(datetime.date(2011, 12, 18),)]"
postgresql,postgresql,"SELECT to_date('2011 12 18', 'YYYY  MM DD')",horology.sql,SAME,,"[(datetime.date(2011, 12, 18),)]"
postgresql,postgresql,"SELECT to_date('2011  12 18', 'YYYY  MM DD')",horology.sql,SAME,,"[(datetime.date(2011, 12, 18),)]"
postgresql,postgresql,"SELECT to_date('2011   12 18', 'YYYY  MM DD')",horology.sql,SAME,,"[(datetime.date(2011, 12, 18),)]"
postgresql,postgresql,"SELECT to_date('2011 12 18', 'YYYYxMMxDD')",horology.sql,SAME,,"[(datetime.date(2011, 12, 18),)]"
postgresql,postgresql,"SELECT to_date('2011x 12x 18', 'YYYYxMMxDD')",horology.sql,SAME,,"[(datetime.date(2011, 12, 18),)]"
postgresql,postgresql,"SELECT to_timestamp('Fri 1-Jan-1999', 'DY DD MON YYYY')",horology.sql,SAME,,"[(datetime.datetime(1999, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2016-06-13 15:50:55', 'YYYY-MM-DD HH24:MI:SS')",horology.sql,SAME,,"[(datetime.datetime(2016, 6, 13, 15, 50, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,"SELECT to_timestamp('2016-02-29 15:50:55', 'YYYY-MM-DD HH24:MI:SS')",horology.sql,SAME,,"[(datetime.datetime(2016, 2, 29, 15, 50, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2015-02-11 86000', 'YYYY-MM-DD SSSS')",horology.sql,SAME,,"[(datetime.datetime(2015, 2, 11, 23, 53, 20, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_timestamp('2015-02-11 86000', 'YYYY-MM-DD SSSSS')",horology.sql,SAME,,"[(datetime.datetime(2015, 2, 11, 23, 53, 20, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT to_date('2016-02-29', 'YYYY-MM-DD')",horology.sql,SAME,,"[(datetime.date(2016, 2, 29),)]"
postgresql,postgresql,"SELECT to_date('2015 365', 'YYYY DDD')",horology.sql,SAME,,"[(datetime.date(2015, 12, 31),)]"
postgresql,postgresql,"SELECT to_date('2016 365', 'YYYY DDD')",horology.sql,SAME,,"[(datetime.date(2016, 12, 30),)]"
postgresql,postgresql,"SELECT to_date('2016 366', 'YYYY DDD')",horology.sql,SAME,,"[(datetime.date(2016, 12, 31),)]"
postgresql,postgresql,"SELECT to_char('2012-12-12 12:00'::timestamptz, 'YYYY-MM-DD HH:MI:SS TZ')",horology.sql,SAME,,"[('2012-12-12 12:00:00 CET',)]"
postgresql,postgresql,"SELECT to_char('2012-12-12 12:00'::timestamptz, 'YYYY-MM-DD HH:MI:SS tz')",horology.sql,SAME,,"[('2012-12-12 12:00:00 cet',)]"
postgresql,postgresql,SET TIME ZONE 'America/New_York',horology.sql,SAME,,[]
postgresql,postgresql,SET TIME ZONE '-1.5',horology.sql,SAME,,[]
postgresql,postgresql,SHOW TIME ZONE,horology.sql,SAME,,"[('<-01:30>+01:30',)]"
postgresql,postgresql,SELECT '2012-12-12 12:00'::timestamptz,horology.sql,SAME,,"[(datetime.datetime(2012, 12, 12, 12, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=81000))),)]"
postgresql,postgresql,SELECT '2012-12-12 12:00 America/New_York'::timestamptz,horology.sql,SAME,,"[(datetime.datetime(2012, 12, 12, 15, 30, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=81000))),)]"
postgresql,postgresql,"SELECT to_char('2012-12-12 12:00'::timestamptz, 'YYYY-MM-DD HH:MI:SS TZ')",horology.sql,SAME,,"[('2012-12-12 12:00:00 -01:30',)]"
postgresql,postgresql,"SELECT to_char('2012-12-12 12:00'::timestamptz, 'YYYY-MM-DD SSSS')",horology.sql,SAME,,"[('2012-12-12 43200',)]"
postgresql,postgresql,"SELECT to_char('2012-12-12 12:00'::timestamptz, 'YYYY-MM-DD SSSSS')",horology.sql,SAME,,"[('2012-12-12 43200',)]"
postgresql,postgresql,SET TIME ZONE '+2',horology.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char('2012-12-12 12:00'::timestamptz, 'YYYY-MM-DD HH:MI:SS TZ')",horology.sql,SAME,,"[('2012-12-12 12:00:00 +02',)]"
postgresql,postgresql,RESET TIME ZONE,horology.sql,SAME,,[]
postgresql,postgresql,"SELECT attrelid, attname, attidentity FROM pg_attribute WHERE attidentity NOT IN ('', 'a', 'd')",identity.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, column_name, column_default, is_nullable, is_identity, identity_generation, identity_start, identity_increment, identity_maximum, identity_minimum, identity_cycle FROM information_schema.columns WHERE table_name LIKE 'itest_' ORDER BY 1, 2",identity.sql,SAME,,"[('itest1', 'a', None, 'NO', 'YES', 'BY DEFAULT', '1', '1', '2147483647', '1', 'NO'), ('itest1', 'b', None, 'YES', 'NO', None, None, None, None, None, 'NO'), ('itest2', 'a', None, 'NO', 'YES', 'ALWAYS', '1', '1', '9223372036854775807', '1', 'NO'), ('itest2', 'b', None, 'YES', 'NO', None, None, None, None, None, 'NO'), ('itest3', 'a', None, 'NO', 'YES', 'BY DEFAULT', '7', '5', '32767', '1', 'NO'), ('itest3', 'b', None, 'YES', 'NO', None, None, None, None, None, 'NO')]"
postgresql,postgresql,SELECT sequence_name FROM information_schema.sequences WHERE sequence_name LIKE 'itest%',identity.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_get_serial_sequence('itest1', 'a')",identity.sql,SAME,,"[('public.itest1_a_seq',)]"
postgresql,postgresql,ALTER TABLE itest4 ALTER COLUMN a SET NOT NULL,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest4 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest4 ALTER COLUMN b SET DEFAULT '',identity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM itest1,identity.sql,SAME,,"[(1, None), (2, None)]"
postgresql,postgresql,SELECT * FROM itest2,identity.sql,SAME,,"[(1, None), (2, None)]"
postgresql,postgresql,SELECT * FROM itest3,identity.sql,SAME,,"[(7, None), (12, None)]"
postgresql,postgresql,SELECT * FROM itest4,identity.sql,SAME,,"[(1, ''), (2, '')]"
postgresql,postgresql,SELECT * FROM itest5,identity.sql,SAME,,"[(1, 'a'), (2, 'b'), (3, 'c'), (-1, 'aa'), (-2, 'bb'), (-3, 'cc'), (4, 'dd'), (-4, 'ee'), (-5, 'ff'), (5, 'gg'), (6, 'hh'), (7, 'ii'), (8, 'aaa'), (9, 'bbb'), (10, 'ccc'), (11, 'ddd'), (12, 'eee'), (13, 'fff'), (14, 'ggg'), (15, 'hhh'), (16, 'iii')]"
postgresql,postgresql,SELECT * FROM itest3,identity.sql,SAME,,"[(7, None), (12, None), (17, 'a'), (22, 'b'), (27, 'c')]"
postgresql,postgresql,SELECT * FROM itest1,identity.sql,SAME,,"[(1, None), (2, None), (10, 'xyz'), (20, 'xyz'), (3, 'xyz')]"
postgresql,postgresql,SELECT * FROM itest2,identity.sql,SAME,,"[(1, None), (2, None), (20, 'xyz'), (3, 'xyz')]"
postgresql,postgresql,UPDATE itest1 SET a = 101 WHERE a = 1,identity.sql,SAME,,[]
postgresql,postgresql,UPDATE itest1 SET a = DEFAULT WHERE a = 2,identity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM itest1,identity.sql,SAME,,"[(10, 'xyz'), (20, 'xyz'), (3, 'xyz'), (101, None), (4, None)]"
postgresql,postgresql,UPDATE itest2 SET a = DEFAULT WHERE a = 2,identity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM itest2,identity.sql,SAME,,"[(1, None), (20, 'xyz'), (3, 'xyz'), (4, None)]"
postgresql,postgresql,ALTER TABLE itest4 ALTER COLUMN a DROP IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest4 ALTER COLUMN a DROP IDENTITY IF EXISTS,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest4 ALTER COLUMN a DROP NOT NULL,identity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM itest4,identity.sql,SAME,,"[(1, ''), (2, ''), (None, '')]"
postgresql,postgresql,CREATE VIEW itestv10 AS SELECT * FROM itest10,identity.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW itestv11 AS SELECT * FROM itest11,identity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM itestv10,identity.sql,SAME,,"[(1, None), (2, None)]"
postgresql,postgresql,SELECT * FROM itestv11,identity.sql,SAME,,"[(1, None), (2, None)]"
postgresql,postgresql,SELECT * FROM itestv10,identity.sql,SAME,,"[(1, None), (2, None), (10, 'xyz'), (3, 'xyz')]"
postgresql,postgresql,SELECT * FROM itestv11,identity.sql,SAME,,"[(1, None), (2, None), (11, 'xyz')]"
postgresql,postgresql,"DROP VIEW itestv10, itestv11",identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest13 ADD COLUMN b int GENERATED BY DEFAULT AS IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest13 ADD COLUMN c int GENERATED BY DEFAULT AS IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM itest13,identity.sql,SAME,,"[(1, 1, 1), (2, 2, 2), (3, 3, 3)]"
postgresql,postgresql,ALTER TABLE itest3 ALTER COLUMN a TYPE int,identity.sql,SAME,,[]
postgresql,postgresql,SELECT seqtypid::regtype FROM pg_sequence WHERE seqrelid = 'itest3_a_seq'::regclass,identity.sql,SAME,,"[('integer',)]"
postgresql,postgresql,"CREATE UNLOGGED TABLE itest17 (a int NOT NULL, b text)",identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest17 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest17 ADD COLUMN c int GENERATED ALWAYS AS IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE itest18 SET UNLOGGED, ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY",identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest18 SET LOGGED,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest18 SET UNLOGGED,identity.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE itest3   ADD COLUMN c int GENERATED BY DEFAULT AS IDENTITY,   ALTER COLUMN c SET GENERATED ALWAYS",identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest6 ALTER COLUMN a SET GENERATED BY DEFAULT SET INCREMENT BY 2 SET START WITH 100 RESTART,identity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM itest6,identity.sql,SAME,,"[(1, None), (100, None), (102, None)]"
postgresql,postgresql,"SELECT table_name, column_name, is_identity, identity_generation FROM information_schema.columns WHERE table_name = 'itest6' ORDER BY 1, 2",identity.sql,SAME,,"[('itest6', 'a', 'YES', 'BY DEFAULT'), ('itest6', 'b', 'NO', None)]"
postgresql,postgresql,SELECT * FROM itest7,identity.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT * FROM itest7c,identity.sql,SAME,,"[(1,)]"
postgresql,postgresql,ALTER TABLE itest7d ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, column_name, is_nullable, is_identity, identity_generation FROM information_schema.columns WHERE table_name LIKE 'itest7%' ORDER BY 1, 2",identity.sql,SAME,,"[('itest7', 'a', 'NO', 'YES', 'ALWAYS'), ('itest7a', 'a', 'NO', 'NO', None), ('itest7a', 'b', 'YES', 'NO', None), ('itest7b', 'a', 'YES', 'NO', None), ('itest7c', 'a', 'NO', 'YES', 'ALWAYS'), ('itest7d', 'a', 'NO', 'YES', 'ALWAYS'), ('itest7e', 'a', 'NO', 'NO', None)]"
postgresql,postgresql,ALTER TABLE itest7 ALTER COLUMN a SET GENERATED BY DEFAULT,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest7 ALTER COLUMN a RESTART,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest7 ALTER COLUMN a DROP IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM itest8,identity.sql,SAME,,"[(1, None)]"
postgresql,postgresql,RESET ROLE,identity.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE itest8   ADD COLUMN f2 int NOT NULL,   ALTER COLUMN f2 ADD GENERATED ALWAYS AS IDENTITY",identity.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE itest8   ADD COLUMN f3 int NOT NULL,   ALTER COLUMN f3 ADD GENERATED ALWAYS AS IDENTITY,   ALTER COLUMN f3 SET GENERATED BY DEFAULT SET INCREMENT 10",identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest8   ADD COLUMN f4 int,identity.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE itest8   ALTER COLUMN f4 SET NOT NULL,   ALTER COLUMN f4 ADD GENERATED ALWAYS AS IDENTITY,   ALTER COLUMN f4 SET DATA TYPE bigint",identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest8   ADD COLUMN f5 int GENERATED ALWAYS AS IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE itest8   ALTER COLUMN f5 DROP IDENTITY,   ALTER COLUMN f5 DROP NOT NULL,   ALTER COLUMN f5 SET DATA TYPE bigint",identity.sql,SAME,,[]
postgresql,postgresql,TABLE itest8,identity.sql,SAME,,"[(0, 1, 1, 1, None), (1, 2, 11, 2, None)]"
postgresql,postgresql,"CREATE TYPE itest_type AS (f1 integer, f2 text, f3 bigint)",identity.sql,SAME,,[]
postgresql,postgresql,DROP TYPE itest_type CASCADE,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pitest1_p2 ALTER COLUMN f3 SET NOT NULL,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pitest1 ATTACH PARTITION pitest1_p2 FOR VALUES FROM ('2016-08-01') TO ('2016-09-01'),identity.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, f1, f2, f3 FROM pitest1",identity.sql,SAME,,"[('pitest1_p1', datetime.date(2016, 7, 2), 'from pitest1', 1), ('pitest1_p2', datetime.date(2016, 8, 2), 'before attaching', 100), ('pitest1_p2', datetime.date(2016, 8, 4), 'from pitest1', 2)]"
postgresql,postgresql,ALTER TABLE pitest2 DETACH PARTITION pitest2_p1,identity.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE pitest3_p1             ALTER COLUMN f3 SET NOT NULL,             ALTER COLUMN f3 ADD GENERATED ALWAYS AS IDENTITY (START WITH 3)",identity.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE ONLY pitest3             ALTER COLUMN f3 SET NOT NULL,             ALTER COLUMN f3 ADD GENERATED ALWAYS AS IDENTITY (START WITH 3)",identity.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, f1, f2, f3 FROM pitest3",identity.sql,SAME,,"[('pitest3_p1', datetime.date(2016, 7, 2), 'from pitest3', 1), ('pitest3_p1', datetime.date(2016, 7, 3), 'from pitest3_p1', 2), ('pitest3_p1', datetime.date(2016, 7, 4), 'from pitest3', 3), ('pitest3_p1', datetime.date(2016, 7, 5), 'from pitest3_p1', 3)]"
postgresql,postgresql,ALTER TABLE pitest3_p1 ALTER COLUMN f3 DROP IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY pitest3 ALTER COLUMN f3 DROP IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, f1, f2, f3 FROM pitest3",identity.sql,SAME,,"[('pitest3_p1', datetime.date(2016, 7, 2), 'from pitest3', 1), ('pitest3_p1', datetime.date(2016, 7, 3), 'from pitest3_p1', 2), ('pitest3_p1', datetime.date(2016, 7, 4), 'from pitest3', 3), ('pitest3_p1', datetime.date(2016, 7, 5), 'from pitest3_p1', 3), ('pitest3_p1', datetime.date(2016, 7, 6), 'from pitest3', 5), ('pitest3_p1', datetime.date(2016, 7, 7), 'from pitest3_p1', 6)]"
postgresql,postgresql,ALTER TABLE pitest1_p2 ALTER COLUMN f3 SET DEFAULT 10000,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pitest1 ATTACH PARTITION pitest1_pfail FOR VALUES FROM ('2016-11-01') TO ('2016-12-01'),identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest14 ALTER id DROP DEFAULT,identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE itest14 ALTER id ADD GENERATED BY DEFAULT AS IDENTITY,identity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO itest15 t USING (SELECT 20 AS s_a, 'inserted by merge' AS s_b) s ON t.a = s.s_a WHEN NOT MATCHED THEN 	INSERT (a, b) OVERRIDING USER VALUE VALUES (s.s_a, s.s_b)",identity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO itest15 t USING (SELECT 30 AS s_a, 'inserted by merge' AS s_b) s ON t.a = s.s_a WHEN NOT MATCHED THEN 	INSERT (a, b) OVERRIDING SYSTEM VALUE VALUES (s.s_a, s.s_b)",identity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO itest16 t USING (SELECT 10 AS s_a, 'inserted by merge' AS s_b) s ON t.a = s.s_a WHEN NOT MATCHED THEN 	INSERT (a, b) VALUES (s.s_a, s.s_b)",identity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO itest16 t USING (SELECT 20 AS s_a, 'inserted by merge' AS s_b) s ON t.a = s.s_a WHEN NOT MATCHED THEN 	INSERT (a, b) OVERRIDING USER VALUE VALUES (s.s_a, s.s_b)",identity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO itest16 t USING (SELECT 30 AS s_a, 'inserted by merge' AS s_b) s ON t.a = s.s_a WHEN NOT MATCHED THEN 	INSERT (a, b) OVERRIDING SYSTEM VALUE VALUES (s.s_a, s.s_b)",identity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM itest15,identity.sql,SAME,,"[(1, 'inserted by merge'), (30, 'inserted by merge')]"
postgresql,postgresql,SELECT * FROM itest16,identity.sql,SAME,,"[(10, 'inserted by merge'), (1, 'inserted by merge'), (30, 'inserted by merge')]"
postgresql,postgresql,set work_mem to '2MB',incremental_sort.sql,SAME,,[]
postgresql,postgresql,reset work_mem,incremental_sort.sql,SAME,,[]
postgresql,postgresql,end,incremental_sort.sql,SAME,,[]
postgresql,postgresql,end,incremental_sort.sql,SAME,,[]
postgresql,postgresql,end,incremental_sort.sql,SAME,,[]
postgresql,postgresql,analyze t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 31",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 31",incremental_sort.sql,SAME,,"[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 32",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 32",incremental_sort.sql,SAME,,"[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31), (1, 32)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 33",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 33",incremental_sort.sql,SAME,,"[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31), (1, 32), (1, 33)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 65",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 65",incremental_sort.sql,SAME,,"[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31), (1, 32), (1, 33), (1, 34), (1, 35), (1, 36), (1, 37), (1, 38), (1, 39), (1, 40), (1, 41), (1, 42), (1, 43), (1, 44), (1, 45), (1, 46), (1, 47), (1, 48), (1, 49), (1, 50), (1, 51), (1, 52), (1, 53), (1, 54), (1, 55), (1, 56), (1, 57), (1, 58), (1, 59), (1, 60), (1, 61), (1, 62), (1, 63), (1, 64), (1, 65)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 66",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 66",incremental_sort.sql,SAME,,"[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31), (1, 32), (1, 33), (1, 34), (1, 35), (1, 36), (1, 37), (1, 38), (1, 39), (1, 40), (1, 41), (1, 42), (1, 43), (1, 44), (1, 45), (1, 46), (1, 47), (1, 48), (1, 49), (1, 50), (1, 51), (1, 52), (1, 53), (1, 54), (1, 55), (1, 56), (1, 57), (1, 58), (1, 59), (1, 60), (1, 61), (1, 62), (1, 63), (1, 64), (1, 65), (1, 66)]"
postgresql,postgresql,delete from t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,analyze t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 55",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 55",incremental_sort.sql,SAME,,"[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31), (1, 32), (1, 33), (1, 34), (1, 35), (1, 36), (1, 37), (1, 38), (1, 39), (1, 40), (1, 41), (1, 42), (1, 43), (1, 44), (1, 45), (1, 46), (1, 47), (1, 48), (1, 49), (1, 50), (2, 51), (2, 52), (2, 53), (2, 54), (2, 55)]"
postgresql,postgresql,delete from t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,analyze t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 70",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 70",incremental_sort.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 27), (9, 28), (9, 29), (9, 30), (9, 31), (9, 32), (9, 33), (9, 34), (9, 35), (9, 36), (9, 37), (9, 38), (9, 39), (9, 40), (9, 41), (9, 42), (9, 43), (9, 44), (9, 45), (9, 46), (9, 47), (9, 48), (9, 49), (9, 50), (9, 51), (9, 52), (9, 53), (9, 54), (9, 55), (9, 56), (9, 57), (9, 58), (9, 59), (9, 60), (9, 61), (9, 62), (9, 63), (9, 64), (9, 65), (9, 66), (9, 67), (9, 68), (9, 69), (9, 70)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 5",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 5",incremental_sort.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (9, 5)]"
postgresql,postgresql,begin,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set local enable_hashjoin = off,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set local enable_mergejoin = off,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set local enable_material = off,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set local enable_sort = off,incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from t left join (select * from (select * from t order by a) v order by a, b) s on s.a = t.a where t.a in (1, 2)",incremental_sort.sql,SAME,,"[('Nested Loop Left Join',), ('  Join Filter: (t_1.a = t.a)',), ('  ->  Seq Scan on t',), (""        Filter: (a = ANY ('{1,2}'::integer[]))"",), ('  ->  Incremental Sort',), ('        Sort Key: t_1.a, t_1.b',), ('        Presorted Key: t_1.a',), ('        ->  Sort',), ('              Sort Key: t_1.a',), ('              ->  Seq Scan on t t_1',)]"
postgresql,postgresql,"select * from t left join (select * from (select * from t order by a) v order by a, b) s on s.a = t.a where t.a in (1, 2)",incremental_sort.sql,SAME,,"[(1, 1, 1, 1), (2, 2, 2, 2)]"
postgresql,postgresql,rollback,incremental_sort.sql,SAME,,[]
postgresql,postgresql,delete from t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,analyze t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 31",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 31",incremental_sort.sql,SAME,,"[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 27), (2, 28), (2, 29), (3, 30), (3, 31)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 32",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 32",incremental_sort.sql,SAME,,"[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 27), (2, 28), (2, 29), (3, 30), (3, 31), (3, 32)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 33",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 33",incremental_sort.sql,SAME,,"[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 27), (2, 28), (2, 29), (3, 30), (3, 31), (3, 32), (3, 33)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 65",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 65",incremental_sort.sql,SAME,,"[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 27), (2, 28), (2, 29), (3, 30), (3, 31), (3, 32), (3, 33), (3, 34), (3, 35), (3, 36), (3, 37), (3, 38), (3, 39), (4, 40), (4, 41), (4, 42), (4, 43), (4, 44), (4, 45), (4, 46), (4, 47), (4, 48), (4, 49), (5, 50), (5, 51), (5, 52), (5, 53), (5, 54), (5, 55), (5, 56), (5, 57), (5, 58), (5, 59), (6, 60), (6, 61), (6, 62), (6, 63), (6, 64), (6, 65)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 66",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 66",incremental_sort.sql,SAME,,"[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 27), (2, 28), (2, 29), (3, 30), (3, 31), (3, 32), (3, 33), (3, 34), (3, 35), (3, 36), (3, 37), (3, 38), (3, 39), (4, 40), (4, 41), (4, 42), (4, 43), (4, 44), (4, 45), (4, 46), (4, 47), (4, 48), (4, 49), (5, 50), (5, 51), (5, 52), (5, 53), (5, 54), (5, 55), (5, 56), (5, 57), (5, 58), (5, 59), (6, 60), (6, 61), (6, 62), (6, 63), (6, 64), (6, 65), (6, 66)]"
postgresql,postgresql,delete from t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,analyze t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 31",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 31",incremental_sort.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 32",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 32",incremental_sort.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 33",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 33",incremental_sort.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 65",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 65",incremental_sort.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65)]"
postgresql,postgresql,"explain (costs off) select * from (select * from t order by a) s order by a, b limit 66",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: t.a, t.b',), ('        Presorted Key: t.a',), ('        ->  Sort',), ('              Sort Key: t.a',), ('              ->  Seq Scan on t',)]"
postgresql,postgresql,"select * from (select * from t order by a) s order by a, b limit 66",incremental_sort.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66)]"
postgresql,postgresql,delete from t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size = '1kB',incremental_sort.sql,SAME,,[]
postgresql,postgresql,set min_parallel_index_scan_size = '1kB',incremental_sort.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost = 0,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost = 0,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather = 2,incremental_sort.sql,SAME,,[]
postgresql,postgresql,create index on t (a),incremental_sort.sql,SAME,,[]
postgresql,postgresql,analyze t,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set enable_incremental_sort = off,incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select a,b,sum(c) from t group by 1,2 order by 1,2,3 limit 1",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Sort',), ('        Sort Key: a, b, (sum(c))',), ('        ->  Finalize HashAggregate',), ('              Group Key: a, b',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Partial HashAggregate',), ('                          Group Key: a, b',), ('                          ->  Parallel Seq Scan on t',)]"
postgresql,postgresql,set enable_incremental_sort = on,incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select a,b,sum(c) from t group by 1,2 order by 1,2,3 limit 1",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Incremental Sort',), ('        Sort Key: a, b, (sum(c))',), ('        Presorted Key: a, b',), ('        ->  GroupAggregate',), ('              Group Key: a, b',), ('              ->  Gather Merge',), ('                    Workers Planned: 2',), ('                    ->  Incremental Sort',), ('                          Sort Key: a, b',), ('                          Presorted Key: a',), ('                          ->  Parallel Index Scan using t_a_idx on t',)]"
postgresql,postgresql,set enable_hashagg to off,incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from t union select * from t order by 1,3",incremental_sort.sql,SAME,,"[('Incremental Sort',), ('  Sort Key: t.a, t.c',), ('  Presorted Key: t.a',), ('  ->  Unique',), ('        ->  Sort',), ('              Sort Key: t.a, t.b, t.c',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Append',), ('                          ->  Parallel Seq Scan on t',), ('                          ->  Parallel Seq Scan on t t_1',)]"
postgresql,postgresql,"explain (costs off) select distinct a,b from t",incremental_sort.sql,SAME,,"[('Unique',), ('  ->  Gather Merge',), ('        Workers Planned: 2',), ('        ->  Unique',), ('              ->  Sort',), ('                    Sort Key: a, b',), ('                    ->  Parallel Seq Scan on t',)]"
postgresql,postgresql,set enable_hashagg=off,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan=off,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set enable_incremental_sort = off,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost=0,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost=0,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size = 0,incremental_sort.sql,SAME,,[]
postgresql,postgresql,set min_parallel_index_scan_size = 0,incremental_sort.sql,SAME,,[]
postgresql,postgresql,reset enable_hashagg,incremental_sort.sql,SAME,,[]
postgresql,postgresql,reset enable_seqscan,incremental_sort.sql,SAME,,[]
postgresql,postgresql,reset enable_incremental_sort,incremental_sort.sql,SAME,,[]
postgresql,postgresql,reset parallel_tuple_cost,incremental_sort.sql,SAME,,[]
postgresql,postgresql,reset parallel_setup_cost,incremental_sort.sql,SAME,,[]
postgresql,postgresql,reset min_parallel_table_scan_size,incremental_sort.sql,SAME,,[]
postgresql,postgresql,reset min_parallel_index_scan_size,incremental_sort.sql,SAME,,[]
postgresql,postgresql,create index point_table_a_idx on point_table using gist(a),incremental_sort.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select a, b, a <-> point(5, 5) dist from point_table order by dist, b limit 1",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Sort',), (""        Sort Key: ((a <-> '(5,5)'::point)), b"",), ('        ->  Seq Scan on point_table',)]"
postgresql,postgresql,"explain (costs off) select a, b, a <-> point(5, 5) dist from point_table order by dist, b desc limit 1",incremental_sort.sql,SAME,,"[('Limit',), ('  ->  Sort',), (""        Sort Key: ((a <-> '(5,5)'::point)), b DESC"",), ('        ->  Seq Scan on point_table',)]"
postgresql,postgresql,"CREATE INDEX tbl_include_reg_idx ON tbl_include_reg (c1, c2) INCLUDE (c3, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX ON tbl_include_reg (c1, c2) INCLUDE (c1, c3)",index_including.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef(i.indexrelid) FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid WHERE i.indrelid = 'tbl_include_reg'::regclass ORDER BY c.relname,index_including.sql,SAME,,"[('CREATE INDEX tbl_include_reg_c1_c2_c11_c3_idx ON public.tbl_include_reg USING btree (c1, c2) INCLUDE (c1, c3)',), ('CREATE INDEX tbl_include_reg_idx ON public.tbl_include_reg USING btree (c1, c2) INCLUDE (c3, c4)',)]"
postgresql,postgresql,"CREATE UNIQUE INDEX tbl_include_unique1_idx_unique ON tbl_include_unique1 using btree (c1, c2) INCLUDE (c3, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tbl_include_unique1 add UNIQUE USING INDEX tbl_include_unique1_idx_unique,index_including.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE tbl_include_unique1 add UNIQUE (c1, c2) INCLUDE (c3, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef(i.indexrelid) FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid WHERE i.indrelid = 'tbl_include_unique1'::regclass ORDER BY c.relname,index_including.sql,SAME,,"[('CREATE UNIQUE INDEX tbl_include_unique1_c1_c2_c3_c4_key ON public.tbl_include_unique1 USING btree (c1, c2) INCLUDE (c3, c4)',), ('CREATE UNIQUE INDEX tbl_include_unique1_idx_unique ON public.tbl_include_unique1 USING btree (c1, c2) INCLUDE (c3, c4)',)]"
postgresql,postgresql,"ALTER TABLE tbl_include_pk add PRIMARY KEY (c1, c2) INCLUDE (c3, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef(i.indexrelid) FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid WHERE i.indrelid = 'tbl_include_pk'::regclass ORDER BY c.relname,index_including.sql,SAME,,"[('CREATE UNIQUE INDEX tbl_include_pk_pkey ON public.tbl_include_pk USING btree (c1, c2) INCLUDE (c3, c4)',)]"
postgresql,postgresql,"CREATE UNIQUE INDEX tbl_include_box_idx_unique ON tbl_include_box using btree (c1, c2) INCLUDE (c3, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tbl_include_box add PRIMARY KEY USING INDEX tbl_include_box_idx_unique,index_including.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef(i.indexrelid) FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid WHERE i.indrelid = 'tbl_include_box'::regclass ORDER BY c.relname,index_including.sql,SAME,,"[('CREATE UNIQUE INDEX tbl_include_box_idx_unique ON public.tbl_include_box USING btree (c1, c2) INCLUDE (c3, c4)',)]"
postgresql,postgresql,"SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('covering', 4, 2, True, False, '1 2 3 4', '1978 1978')]"
postgresql,postgresql,"SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('UNIQUE (c1, c2) INCLUDE (c3, c4)', 'covering', [1, 2])]"
postgresql,postgresql,"SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('covering', 4, 2, True, True, '1 2 3 4', '1978 1978')]"
postgresql,postgresql,"SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('PRIMARY KEY (c1, c2) INCLUDE (c3, c4)', 'covering', [1, 2])]"
postgresql,postgresql,"explain (costs off) select * from tbl where (c1,c2,c3) < (2,5,1)",index_including.sql,SAME,,"[('Bitmap Heap Scan on tbl',), ('  Filter: (ROW(c1, c2, c3) < ROW(2, 5, 1))',), ('  ->  Bitmap Index Scan on covering',), ('        Index Cond: (ROW(c1, c2) <= ROW(2, 5))',)]"
postgresql,postgresql,"select * from tbl where (c1,c2,c3) < (2,5,1)",index_including.sql,SAME,,"[(1, 2, None, None), (2, 4, None, None)]"
postgresql,postgresql,SET enable_seqscan = off,index_including.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from tbl where (c1,c2,c3) < (262,1,1) limit 1",index_including.sql,SAME,,"[('Limit',), ('  ->  Index Only Scan using covering on tbl',), ('        Index Cond: (ROW(c1, c2) <= ROW(262, 1))',), ('        Filter: (ROW(c1, c2, c3) < ROW(262, 1, 1))',)]"
postgresql,postgresql,"select * from tbl where (c1,c2,c3) < (262,1,1) limit 1",index_including.sql,SAME,,"[(1, 2, None, None)]"
postgresql,postgresql,RESET enable_seqscan,index_including.sql,SAME,,[]
postgresql,postgresql,"SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('tbl_c1_c2_c3_c4_key', 4, 2, True, False, '1 2 3 4', '1978 1978')]"
postgresql,postgresql,"SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('UNIQUE (c1, c2) INCLUDE (c3, c4)', 'tbl_c1_c2_c3_c4_key', [1, 2])]"
postgresql,postgresql,"SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('tbl_pkey', 4, 2, True, True, '1 2 3 4', '1978 1978')]"
postgresql,postgresql,"SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('PRIMARY KEY (c1, c2) INCLUDE (c3, c4)', 'tbl_pkey', [1, 2])]"
postgresql,postgresql,"SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('tbl_c1_c3_c4_excl', 3, 1, False, False, '1 3 4', '1978')]"
postgresql,postgresql,"SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid",index_including.sql,SAME,,"[('EXCLUDE USING btree (c1 WITH =) INCLUDE (c3, c4)', 'tbl_c1_c3_c4_excl', [1])]"
postgresql,postgresql,"CREATE UNIQUE INDEX tbl_idx ON tbl using btree(c1, c2, c3, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,"[('CREATE UNIQUE INDEX tbl_idx ON public.tbl USING btree (c1, c2, c3, c4)',)]"
postgresql,postgresql,ALTER TABLE tbl DROP COLUMN c3,index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX tbl_idx ON tbl using btree(c1, c2) INCLUDE(c3,c4)",index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,"[('CREATE UNIQUE INDEX tbl_idx ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',)]"
postgresql,postgresql,ALTER TABLE tbl DROP COLUMN c3,index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,"[('CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',)]"
postgresql,postgresql,ALTER TABLE tbl DROP COLUMN c3,index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tbl DROP COLUMN c1,index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX tbl_idx ON tbl (c1, (c1+0)) INCLUDE (c2)",index_including.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX tbl_idx ALTER COLUMN 2 SET STATISTICS 1000,index_including.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX CONCURRENTLY on tbl (c1, c2) INCLUDE (c3, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,"[('CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_idx ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',), ('CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',)]"
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,"[('CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',)]"
postgresql,postgresql,ALTER TABLE tbl DROP COLUMN c3,index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tbl DROP COLUMN c1,index_including.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname,index_including.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX on tbl USING gist(c3) INCLUDE (c1, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX on tbl USING spgist(c3) INCLUDE (c4),index_including.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX on tbl USING rtree(c3) INCLUDE (c1, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX on tbl USING btree(c1, c2) INCLUDE (c3, c4)",index_including.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX tbl_idx_unique ON tbl using btree(c1, c2) INCLUDE (c3,c4)",index_including.sql,SAME,,[]
postgresql,postgresql,UPDATE tbl SET c1 = 100 WHERE c1 = 2,index_including.sql,SAME,,[]
postgresql,postgresql,UPDATE tbl SET c1 = 1 WHERE c1 = 3,index_including.sql,SAME,,[]
postgresql,postgresql,UPDATE tbl SET c3 = 1,index_including.sql,SAME,,[]
postgresql,postgresql,DELETE FROM tbl WHERE c1 = 5 OR c3 = 12,index_including.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tbl ALTER c1 TYPE bigint,index_including.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tbl ALTER c3 TYPE bigint,index_including.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX tbl_gist_idx ON tbl_gist using gist (c4) INCLUDE (c1,c2,c3)",index_including_gist.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef(i.indexrelid) FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid WHERE i.indrelid = 'tbl_gist'::regclass ORDER BY c.relname,index_including_gist.sql,SAME,,"[('CREATE INDEX tbl_gist_idx ON public.tbl_gist USING gist (c4) INCLUDE (c1, c2, c3)',)]"
postgresql,postgresql,"SELECT * FROM tbl_gist where c4 <@ box(point(1,1),point(10,10))",index_including_gist.sql,SAME,,"[(1, 2, 3, '(2,3),(1,2)'), (2, 4, 6, '(4,5),(2,3)'), (3, 6, 9, '(6,7),(3,4)'), (4, 8, 12, '(8,9),(4,5)')]"
postgresql,postgresql,SET enable_bitmapscan TO off,index_including_gist.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN  (costs off) SELECT * FROM tbl_gist where c4 <@ box(point(1,1),point(10,10))",index_including_gist.sql,SAME,,"[('Index Only Scan using tbl_gist_idx on tbl_gist',), (""  Index Cond: (c4 <@ '(10,10),(1,1)'::box)"",)]"
postgresql,postgresql,SET enable_bitmapscan TO default,index_including_gist.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX tbl_gist_idx ON tbl_gist using gist (c4) INCLUDE (c1,c2,c3)",index_including_gist.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_indexdef(i.indexrelid) FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid WHERE i.indrelid = 'tbl_gist'::regclass ORDER BY c.relname,index_including_gist.sql,SAME,,"[('CREATE INDEX tbl_gist_idx ON public.tbl_gist USING gist (c4) INCLUDE (c1, c2, c3)',)]"
postgresql,postgresql,"SELECT * FROM tbl_gist where c4 <@ box(point(1,1),point(10,10))",index_including_gist.sql,SAME,,"[(1, 2, 3, '(2,3),(1,2)'), (2, 4, 6, '(4,5),(2,3)'), (3, 6, 9, '(6,7),(3,4)'), (4, 8, 12, '(8,9),(4,5)')]"
postgresql,postgresql,SET enable_bitmapscan TO off,index_including_gist.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN  (costs off) SELECT * FROM tbl_gist where c4 <@ box(point(1,1),point(10,10))",index_including_gist.sql,SAME,,"[('Index Only Scan using tbl_gist_idx on tbl_gist',), (""  Index Cond: (c4 <@ '(10,10),(1,1)'::box)"",)]"
postgresql,postgresql,SET enable_bitmapscan TO default,index_including_gist.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX CONCURRENTLY tbl_gist_idx ON tbl_gist using gist (c4) INCLUDE (c1,c2,c3)",index_including_gist.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl_gist' ORDER BY indexname,index_including_gist.sql,SAME,,"[('CREATE INDEX tbl_gist_idx ON public.tbl_gist USING gist (c4) INCLUDE (c1, c2, c3)',)]"
postgresql,postgresql,"CREATE INDEX tbl_gist_idx ON tbl_gist using gist (c4) INCLUDE (c1,c3)",index_including_gist.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl_gist' ORDER BY indexname,index_including_gist.sql,SAME,,"[('CREATE INDEX tbl_gist_idx ON public.tbl_gist USING gist (c4) INCLUDE (c1, c3)',)]"
postgresql,postgresql,REINDEX INDEX tbl_gist_idx,index_including_gist.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl_gist' ORDER BY indexname,index_including_gist.sql,SAME,,"[('CREATE INDEX tbl_gist_idx ON public.tbl_gist USING gist (c4) INCLUDE (c1, c3)',)]"
postgresql,postgresql,ALTER TABLE tbl_gist DROP COLUMN c1,index_including_gist.sql,SAME,,[]
postgresql,postgresql,SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl_gist' ORDER BY indexname,index_including_gist.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX tbl_gist_idx ON tbl_gist using gist (c4) INCLUDE (c1,c3)",index_including_gist.sql,SAME,,[]
postgresql,postgresql,UPDATE tbl_gist SET c1 = 100 WHERE c1 = 2,index_including_gist.sql,SAME,,[]
postgresql,postgresql,UPDATE tbl_gist SET c1 = 1 WHERE c1 = 3,index_including_gist.sql,SAME,,[]
postgresql,postgresql,DELETE FROM tbl_gist WHERE c1 = 5 OR c3 = 12,index_including_gist.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX tbl_gist_idx ON tbl_gist using gist (c4) INCLUDE (c1,c3)",index_including_gist.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tbl_gist ALTER c1 TYPE bigint,index_including_gist.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tbl_gist ALTER c3 TYPE bigint,index_including_gist.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN  (costs off) SELECT * FROM tbl_gist where c4 <@ box(point(1,1),point(10,10))",index_including_gist.sql,SAME,,"[('Index Only Scan using tbl_gist_c4_c1_c2_c3_excl on tbl_gist',), (""  Index Cond: (c4 <@ '(10,10),(1,1)'::box)"",)]"
postgresql,postgresql,create index idxpart_idx on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,select relhassubclass from pg_class where relname = 'idxpart_idx',indexing.sql,SAME,,"[(False,)]"
postgresql,postgresql,select indexdef from pg_indexes where indexname like 'idxpart_idx%',indexing.sql,SAME,,"[('CREATE INDEX idxpart_idx ON ONLY public.idxpart USING btree (a)',)]"
postgresql,postgresql,drop index idxpart_idx,indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart_idx on only idxpart(a),indexing.sql,SAME,,[]
postgresql,postgresql,select relhassubclass from pg_class where relname = 'idxpart_idx',indexing.sql,SAME,,"[(False,)]"
postgresql,postgresql,drop index idxpart_idx,indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind, relhassubclass, inhparent::regclass     from pg_class left join pg_index ix on (indexrelid = oid) 	left join pg_inherits on (ix.indexrelid = inhrelid) 	where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p', True, None), ('idxpart1', 'r', False, None), ('idxpart1_a_idx', 'i', False, 'idxpart_a_idx'), ('idxpart2', 'p', True, None), ('idxpart21', 'r', False, None), ('idxpart21_a_idx', 'i', False, 'idxpart2_a_idx'), ('idxpart2_a_idx', 'I', True, 'idxpart_a_idx'), ('idxpart_a_idx', 'I', True, None)]"
postgresql,postgresql,CREATE INDEX ON idxpart (col1),indexing.sql,SAME,,[]
postgresql,postgresql,SELECT col2 FROM idxpart_two fk LEFT OUTER JOIN idxpart pk ON (col1 = col2),indexing.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX partidx_abc_idx ON idxpart (a, b, c)",indexing.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE idxpart ALTER COLUMN c TYPE numeric,indexing.sql,SAME,,[]
postgresql,postgresql,create index idxparti on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,"create index idxparti2 on idxpart (b, c)",indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0) to (10),indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart_c on only idxpart (c),indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart1_c on idxpart1 (c),indexing.sql,SAME,,[]
postgresql,postgresql,alter index idxpart_c attach partition idxpart1_c,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relpartbound from pg_class   where relname in ('idxpart_c', 'idxpart1_c')   order by relname",indexing.sql,SAME,,"[('idxpart1_c', None), ('idxpart_c', None)]"
postgresql,postgresql,"create index on idxpart1 (a, b)",indexing.sql,SAME,,[]
postgresql,postgresql,"create index on idxpart (a, b)",indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind, relhassubclass, inhparent::regclass     from pg_class left join pg_index ix on (indexrelid = oid) 	left join pg_inherits on (ix.indexrelid = inhrelid) 	where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p', True, None), ('idxpart1', 'r', False, None), ('idxpart1_a_b_idx', 'i', False, 'idxpart_a_b_idx'), ('idxpart_a_b_idx', 'I', True, None)]"
postgresql,postgresql,create index on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,drop index idxpart_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind from pg_class   where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p'), ('idxpart1', 'r')]"
postgresql,postgresql,create index on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind from pg_class   where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p'), ('idxpart_a_idx', 'I')]"
postgresql,postgresql,create temp table idxpart_temp (a int) partition by range (a),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart_temp(a),indexing.sql,SAME,,[]
postgresql,postgresql,create temp table idxpart1_temp partition of idxpart_temp   for values from (0) to (10),indexing.sql,SAME,,[]
postgresql,postgresql,drop index concurrently idxpart_temp_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind from pg_class   where relname like 'idxpart_temp%' order by relname",indexing.sql,SAME,,"[('idxpart_temp', 'p')]"
postgresql,postgresql,"create index idxpart_a_b_idx on only idxpart (a, b)",indexing.sql,SAME,,[]
postgresql,postgresql,"create index idxpart1_a_b_idx on idxpart1 (a, b)",indexing.sql,SAME,,[]
postgresql,postgresql,"create index idxpart1_tst1 on idxpart1 (b, a)",indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart1_tst2 on idxpart1 using hash (a),indexing.sql,SAME,,[]
postgresql,postgresql,"create index idxpart1_tst3 on idxpart1 (a, b) where a > 10",indexing.sql,SAME,,[]
postgresql,postgresql,alter index idxpart_a_b_idx attach partition idxpart1_a_b_idx,indexing.sql,SAME,,[]
postgresql,postgresql,alter index idxpart_a_b_idx attach partition idxpart1_a_b_idx,indexing.sql,SAME,,[]
postgresql,postgresql,"create index idxpart1_2_a_b on idxpart1 (a, b)",indexing.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indrelid::regclass   from pg_index where indexrelid::regclass::text like 'idxpart%'",indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart1 using hash (a),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart1 (a) where b > 1,indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart1 ((a + 0)),indexing.sql,SAME,,[]
postgresql,postgresql,"create index on idxpart1 (a, a)",indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart22 (a),indexing.sql,SAME,,[]
postgresql,postgresql,create index on only idxpart2 (a),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indrelid::regclass, inhparent::regclass   from pg_index idx left join pg_inherits inh on (idx.indexrelid = inh.inhrelid) where indexrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('idxpart1_a_idx', 'idxpart1', 'idxpart_a_idx'), ('idxpart22_a_idx', 'idxpart22', None), ('idxpart2_a_idx', 'idxpart2', 'idxpart_a_idx'), ('idxpart_a_idx', 'idxpart', None)]"
postgresql,postgresql,alter index idxpart2_a_idx attach partition idxpart22_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indrelid::regclass, inhparent::regclass   from pg_index idx left join pg_inherits inh on (idx.indexrelid = inh.inhrelid) where indexrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('idxpart1_a_idx', 'idxpart1', 'idxpart_a_idx'), ('idxpart22_a_idx', 'idxpart22', 'idxpart2_a_idx'), ('idxpart2_a_idx', 'idxpart2', 'idxpart_a_idx'), ('idxpart_a_idx', 'idxpart', None)]"
postgresql,postgresql,alter index idxpart2_a_idx attach partition idxpart22_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart21 (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter index idxpart2_a_idx attach partition idxpart21_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,create index idxparti on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,"create index idxparti2 on idxpart (b, c)",indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind, inhparent::regclass     from pg_class left join pg_index ix on (indexrelid = oid) 	left join pg_inherits on (ix.indexrelid = inhrelid) 	where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p', None), ('idxpart1', 'r', None), ('idxpart1_a_idx', 'i', None), ('idxpart1_b_c_idx', 'i', None), ('idxparti', 'I', None), ('idxparti2', 'I', None)]"
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0) to (10),indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind, inhparent::regclass     from pg_class left join pg_index ix on (indexrelid = oid) 	left join pg_inherits on (ix.indexrelid = inhrelid) 	where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p', None), ('idxpart1', 'r', None), ('idxpart1_a_idx', 'i', 'idxparti'), ('idxpart1_b_c_idx', 'i', 'idxparti2'), ('idxparti', 'I', None), ('idxparti2', 'I', None)]"
postgresql,postgresql,create index on idxpart1 ((a+b)) where d = true,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind, inhparent::regclass     from pg_class left join pg_index ix on (indexrelid = oid) 	left join pg_inherits on (ix.indexrelid = inhrelid) 	where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p', None), ('idxpart1', 'r', None), ('idxpart1_a_idx', 'i', 'idxparti'), ('idxpart1_b_c_idx', 'i', 'idxparti2'), ('idxpart1_expr_idx', 'i', None), ('idxparti', 'I', None), ('idxparti2', 'I', None)]"
postgresql,postgresql,create index idxparti3 on idxpart ((a+b)) where d = true,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind, inhparent::regclass     from pg_class left join pg_index ix on (indexrelid = oid) 	left join pg_inherits on (ix.indexrelid = inhrelid) 	where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p', None), ('idxpart1', 'r', None), ('idxpart1_a_idx', 'i', 'idxparti'), ('idxpart1_b_c_idx', 'i', 'idxparti2'), ('idxpart1_expr_idx', 'i', 'idxparti3'), ('idxparti', 'I', None), ('idxparti2', 'I', None), ('idxparti3', 'I', None)]"
postgresql,postgresql,create index on only idxpart1 (a),indexing.sql,SAME,,[]
postgresql,postgresql,create index on only idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, indisvalid from pg_class join pg_index on indexrelid = oid    where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart1_a_idx', False), ('idxpart_a_idx', False)]"
postgresql,postgresql,alter index idxpart_a_idx attach partition idxpart1_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, indisvalid from pg_class join pg_index on indexrelid = oid    where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart1_a_idx', False), ('idxpart_a_idx', False)]"
postgresql,postgresql,create index on idxpart11 (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter index idxpart1_a_idx attach partition idxpart11_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, indisvalid from pg_class join pg_index on indexrelid = oid    where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart11_a_idx', True), ('idxpart1_a_idx', True), ('idxpart_a_idx', True)]"
postgresql,postgresql,create index on idxpart1 (a),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0000) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart2 for values from (1000) to (2000),indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind from pg_class where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p'), ('idxpart1', 'r'), ('idxpart1_a_idx', 'i'), ('idxpart2', 'r'), ('idxpart2_a_idx', 'i'), ('idxpart3', 'r'), ('idxpart3_a_idx', 'i'), ('idxpart_a_idx', 'I')]"
postgresql,postgresql,alter table idxpart detach partition idxpart1,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart detach partition idxpart2,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart detach partition idxpart3,indexing.sql,SAME,,[]
postgresql,postgresql,drop index idxpart1_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,drop index idxpart2_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,drop index idxpart3_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind from pg_class where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p'), ('idxpart1', 'r'), ('idxpart2', 'r'), ('idxpart3', 'r'), ('idxpart_a_idx', 'I')]"
postgresql,postgresql,"select relname, relkind from pg_class where relname like 'idxpart%' order by relname",indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart1 (a),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0000) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart2 for values from (1000) to (2000),indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind from pg_class where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p'), ('idxpart1', 'r'), ('idxpart1_a_idx', 'i'), ('idxpart2', 'r'), ('idxpart2_a_idx', 'i'), ('idxpart3', 'r'), ('idxpart3_a_idx', 'i'), ('idxpart_a_idx', 'I')]"
postgresql,postgresql,alter table idxpart detach partition idxpart1,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart detach partition idxpart2,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart detach partition idxpart3,indexing.sql,SAME,,[]
postgresql,postgresql,drop index idxpart_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname, relkind from pg_class where relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart', 'p'), ('idxpart1', 'r'), ('idxpart1_a_idx', 'i'), ('idxpart2', 'r'), ('idxpart2_a_idx', 'i'), ('idxpart3', 'r'), ('idxpart3_a_idx', 'i')]"
postgresql,postgresql,"select relname, relkind from pg_class where relname like 'idxpart%' order by relname",indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart(c),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart detach partition idxpart2,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart2 drop column c,indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart1 ((a + b)),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart ((a + b)),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0000) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart2 for values from (1000) to (2000),indexing.sql,SAME,,[]
postgresql,postgresql,"select relname as child, inhparent::regclass as parent, pg_get_indexdef as childdef   from pg_class join pg_inherits on inhrelid = oid,   lateral pg_get_indexdef(pg_class.oid)   where relkind in ('i', 'I') and relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart1_expr_idx', 'idxpart_expr_idx', 'CREATE INDEX idxpart1_expr_idx ON public.idxpart1 USING btree (((a + b)))'), ('idxpart2_expr_idx', 'idxpart_expr_idx', 'CREATE INDEX idxpart2_expr_idx ON public.idxpart2 USING btree (((a + b)))'), ('idxpart3_expr_idx', 'idxpart_expr_idx', 'CREATE INDEX idxpart3_expr_idx ON public.idxpart3 USING btree (((a + b)))')]"
postgresql,postgresql,"create index on idxpart2 (a collate ""POSIX"")",indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart2 (a),indexing.sql,SAME,,[]
postgresql,postgresql,"create index on idxpart2 (a collate ""C"")",indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from ('aaa') to ('bbb'),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart2 for values from ('bbb') to ('ccc'),indexing.sql,SAME,,[]
postgresql,postgresql,"create index on idxpart (a collate ""C"")",indexing.sql,SAME,,[]
postgresql,postgresql,"select relname as child, inhparent::regclass as parent, pg_get_indexdef as childdef   from pg_class left join pg_inherits on inhrelid = oid,   lateral pg_get_indexdef(pg_class.oid)   where relkind in ('i', 'I') and relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart1_a_idx', 'idxpart_a_idx', 'CREATE INDEX idxpart1_a_idx ON public.idxpart1 USING btree (a COLLATE ""C"")'), ('idxpart2_a_idx', None, 'CREATE INDEX idxpart2_a_idx ON public.idxpart2 USING btree (a COLLATE ""POSIX"")'), ('idxpart2_a_idx1', None, 'CREATE INDEX idxpart2_a_idx1 ON public.idxpart2 USING btree (a)'), ('idxpart2_a_idx2', 'idxpart_a_idx', 'CREATE INDEX idxpart2_a_idx2 ON public.idxpart2 USING btree (a COLLATE ""C"")'), ('idxpart3_a_idx', 'idxpart_a_idx', 'CREATE INDEX idxpart3_a_idx ON public.idxpart3 USING btree (a COLLATE ""C"")'), ('idxpart4_a_idx', 'idxpart_a_idx', 'CREATE INDEX idxpart4_a_idx ON public.idxpart4 USING btree (a COLLATE ""C"")'), ('idxpart_a_idx', None, 'CREATE INDEX idxpart_a_idx ON ONLY public.idxpart USING btree (a COLLATE ""C"")')]"
postgresql,postgresql,create index on idxpart2 (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from ('aaa') to ('bbb'),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart2 for values from ('bbb') to ('ccc'),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (a text_pattern_ops),indexing.sql,SAME,,[]
postgresql,postgresql,"select relname as child, inhparent::regclass as parent, pg_get_indexdef as childdef   from pg_class left join pg_inherits on inhrelid = oid,   lateral pg_get_indexdef(pg_class.oid)   where relkind in ('i', 'I') and relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart1_a_idx', 'idxpart_a_idx', 'CREATE INDEX idxpart1_a_idx ON public.idxpart1 USING btree (a text_pattern_ops)'), ('idxpart2_a_idx', None, 'CREATE INDEX idxpart2_a_idx ON public.idxpart2 USING btree (a)'), ('idxpart2_a_idx1', 'idxpart_a_idx', 'CREATE INDEX idxpart2_a_idx1 ON public.idxpart2 USING btree (a text_pattern_ops)'), ('idxpart3_a_idx', 'idxpart_a_idx', 'CREATE INDEX idxpart3_a_idx ON public.idxpart3 USING btree (a text_pattern_ops)'), ('idxpart4_a_idx', 'idxpart_a_idx', 'CREATE INDEX idxpart4_a_idx ON public.idxpart4 USING btree (a text_pattern_ops)'), ('idxpart_a_idx', None, 'CREATE INDEX idxpart_a_idx ON ONLY public.idxpart USING btree (a text_pattern_ops)')]"
postgresql,postgresql,drop index idxpart_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,create index on only idxpart (a text_pattern_ops),indexing.sql,SAME,,[]
postgresql,postgresql,"alter table idxpart drop column col1, drop column col2",indexing.sql,SAME,,[]
postgresql,postgresql,"alter table idxpart1 drop column col1, drop column col2, drop column col3",indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,"create index idxpart_1_idx on only idxpart (b, a)",indexing.sql,SAME,,[]
postgresql,postgresql,"create index idxpart1_1_idx on idxpart1 (b, a)",indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart1_1b_idx on idxpart1 (b),indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart_2_idx on only idxpart ((b + a)) where a > 1,indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart1_2_idx on idxpart1 ((b + a)) where a > 1,indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart1_2b_idx on idxpart1 ((a + b)) where a > 1,indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart1_2c_idx on idxpart1 ((b + a)) where b > 1,indexing.sql,SAME,,[]
postgresql,postgresql,alter index idxpart_1_idx attach partition idxpart1_1_idx,indexing.sql,SAME,,[]
postgresql,postgresql,alter index idxpart_2_idx attach partition idxpart1_2_idx,indexing.sql,SAME,,[]
postgresql,postgresql,"select relname as child, inhparent::regclass as parent, pg_get_indexdef as childdef   from pg_class left join pg_inherits on inhrelid = oid,   lateral pg_get_indexdef(pg_class.oid)   where relkind in ('i', 'I') and relname like 'idxpart%' order by relname",indexing.sql,SAME,,"[('idxpart1_1_idx', 'idxpart_1_idx', 'CREATE INDEX idxpart1_1_idx ON public.idxpart1 USING btree (b, a)'), ('idxpart1_1b_idx', None, 'CREATE INDEX idxpart1_1b_idx ON public.idxpart1 USING btree (b)'), ('idxpart1_2_idx', 'idxpart_2_idx', 'CREATE INDEX idxpart1_2_idx ON public.idxpart1 USING btree (((b + a))) WHERE (a > 1)'), ('idxpart1_2b_idx', None, 'CREATE INDEX idxpart1_2b_idx ON public.idxpart1 USING btree (((a + b))) WHERE (a > 1)'), ('idxpart1_2c_idx', None, 'CREATE INDEX idxpart1_2c_idx ON public.idxpart1 USING btree (((b + a))) WHERE (b > 1)'), ('idxpart_1_idx', None, 'CREATE INDEX idxpart_1_idx ON ONLY public.idxpart USING btree (b, a)'), ('idxpart_2_idx', None, 'CREATE INDEX idxpart_2_idx ON ONLY public.idxpart USING btree (((b + a))) WHERE (a > 1)')]"
postgresql,postgresql,create index idxparti on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,"create index idxparti2 on idxpart (c, b)",indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0) to (10),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart2 (a),indexing.sql,SAME,,[]
postgresql,postgresql,"create index on idxpart2 (c, b)",indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart2 for values from (10) to (20),indexing.sql,SAME,,[]
postgresql,postgresql,"select c.relname, pg_get_indexdef(indexrelid)   from pg_class c join pg_index i on c.oid = i.indexrelid   where indrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('idxpart1_a_idx', 'CREATE INDEX idxpart1_a_idx ON public.idxpart1 USING btree (a)'), ('idxpart1_c_b_idx', 'CREATE INDEX idxpart1_c_b_idx ON public.idxpart1 USING btree (c, b)'), ('idxpart2_a_idx', 'CREATE INDEX idxpart2_a_idx ON public.idxpart2 USING btree (a)'), ('idxpart2_c_b_idx', 'CREATE INDEX idxpart2_c_b_idx ON public.idxpart2 USING btree (c, b)'), ('idxparti', 'CREATE INDEX idxparti ON ONLY public.idxpart USING btree (a)'), ('idxparti2', 'CREATE INDEX idxparti2 ON ONLY public.idxpart USING btree (c, b)')]"
postgresql,postgresql,"alter table idxpart drop column col1, drop column col2",indexing.sql,SAME,,[]
postgresql,postgresql,"alter table idxpart1 drop column col1, drop column col2",indexing.sql,SAME,,[]
postgresql,postgresql,"alter table idxpart2 drop column col1, drop column col2",indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart2 (abs(b)),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart2 for values from (0) to (1),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (abs(b)),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart ((b + 1)),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (1) to (2),indexing.sql,SAME,,[]
postgresql,postgresql,"select c.relname, pg_get_indexdef(indexrelid)   from pg_class c join pg_index i on c.oid = i.indexrelid   where indrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('idxpart1_abs_idx', 'CREATE INDEX idxpart1_abs_idx ON public.idxpart1 USING btree (abs(b))'), ('idxpart1_expr_idx', 'CREATE INDEX idxpart1_expr_idx ON public.idxpart1 USING btree (((b + 1)))'), ('idxpart2_abs_idx', 'CREATE INDEX idxpart2_abs_idx ON public.idxpart2 USING btree (abs(b))'), ('idxpart2_expr_idx', 'CREATE INDEX idxpart2_expr_idx ON public.idxpart2 USING btree (((b + 1)))'), ('idxpart_abs_idx', 'CREATE INDEX idxpart_abs_idx ON ONLY public.idxpart USING btree (abs(b))'), ('idxpart_expr_idx', 'CREATE INDEX idxpart_expr_idx ON ONLY public.idxpart USING btree (((b + 1)))')]"
postgresql,postgresql,"alter table idxpart drop column col1, drop column col3",indexing.sql,SAME,,[]
postgresql,postgresql,"alter table idxpart1 drop column col1, drop column col2, drop column col3, drop column col4",indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart2 (a) where b > 1000,indexing.sql,SAME,,[]
postgresql,postgresql,"alter table idxpart2 drop column col1, drop column col2",indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart2 for values from (1000) to (2000),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (a) where b > 1000,indexing.sql,SAME,,[]
postgresql,postgresql,"select c.relname, pg_get_indexdef(indexrelid)   from pg_class c join pg_index i on c.oid = i.indexrelid   where indrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('idxpart1_a_idx', 'CREATE INDEX idxpart1_a_idx ON public.idxpart1 USING btree (a) WHERE (b > 1000)'), ('idxpart2_a_idx', 'CREATE INDEX idxpart2_a_idx ON public.idxpart2 USING btree (a) WHERE (b > 1000)'), ('idxpart_a_idx', 'CREATE INDEX idxpart_a_idx ON ONLY public.idxpart USING btree (a) WHERE (b > 1000)')]"
postgresql,postgresql,alter table idxpart1 drop column drop_1,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart1 drop column drop_2,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart1 drop column drop_3,indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart1 (col_keep),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (col_keep),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,"select attrelid::regclass, attname, attnum from pg_attribute   where attrelid::regclass::text like 'idxpart%' and attnum > 0   order by attrelid::regclass, attnum",indexing.sql,SAME,,"[('idxpart1', '........pg.dropped.1........', 1), ('idxpart1', '........pg.dropped.2........', 2), ('idxpart1', 'col_keep', 3), ('idxpart1', '........pg.dropped.4........', 4), ('idxpart1_col_keep_idx', 'col_keep', 1), ('idxpart', 'col_keep', 1), ('idxpart_col_keep_idx', 'col_keep', 1)]"
postgresql,postgresql,alter table idxpart drop column drop_1,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart drop column drop_2,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart drop column drop_3,indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart1 (col_keep),indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (col_keep),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (0) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,"select attrelid::regclass, attname, attnum from pg_attribute   where attrelid::regclass::text like 'idxpart%' and attnum > 0   order by attrelid::regclass, attnum",indexing.sql,SAME,,"[('idxpart', '........pg.dropped.1........', 1), ('idxpart', '........pg.dropped.2........', 2), ('idxpart', 'col_keep', 3), ('idxpart', '........pg.dropped.4........', 4), ('idxpart1', 'col_keep', 1), ('idxpart1_col_keep_idx', 'col_keep', 1), ('idxpart_col_keep_idx', 'col_keep', 1)]"
postgresql,postgresql,"alter table idxpart add primary key (a, b)",indexing.sql,SAME,,[]
postgresql,postgresql,"alter table idxpart add unique (b, a)",indexing.sql,SAME,,[]
postgresql,postgresql,"alter table idxpart attach partition idxpart3 for values from (20, 20) to (30, 30)",indexing.sql,SAME,,[]
postgresql,postgresql,"select conname, contype, conrelid::regclass, conindid::regclass, conkey   from pg_constraint where conrelid::regclass::text like 'idxpart%'   order by conrelid::regclass::text, conname",indexing.sql,SAME,,"[('idxpart_pkey', 'p', 'idxpart', 'idxpart_pkey', [1, 2]), ('idxpart1_pkey', 'p', 'idxpart1', 'idxpart1_pkey', [1, 2]), ('idxpart2_pkey', 'p', 'idxpart2', 'idxpart2_pkey', [1, 2]), ('idxpart21_pkey', 'p', 'idxpart21', 'idxpart21_pkey', [1, 2]), ('idxpart22_pkey', 'p', 'idxpart22', 'idxpart22_pkey', [1, 2]), ('idxpart3_pkey', 'p', 'idxpart3', 'idxpart3_pkey', [2, 1])]"
postgresql,postgresql,"select conname, contype, conrelid::regclass, conindid::regclass, conkey   from pg_constraint where conrelid::regclass::text like 'idxpart%'   order by conname",indexing.sql,SAME,,"[('idxpart21_pkey', 'p', 'idxpart21', 'idxpart21_pkey', [1, 2]), ('idxpart2_pkey', 'p', 'idxpart2', 'idxpart2_pkey', [1, 2]), ('idxpart_pkey', 'p', 'idxpart', 'idxpart_pkey', [1, 2])]"
postgresql,postgresql,alter table idxpart0 add primary key(i),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart add primary key(i),indexing.sql,SAME,,[]
postgresql,postgresql,"select indrelid::regclass, indexrelid::regclass, inhparent::regclass, indisvalid,   conname, conislocal, coninhcount, connoinherit, convalidated   from pg_index idx left join pg_inherits inh on (idx.indexrelid = inh.inhrelid)   left join pg_constraint con on (idx.indexrelid = con.conindid)   where indrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('idxpart0', 'idxpart0_pkey', 'idxpart_pkey', True, 'idxpart0_pkey', False, 1, True, True), ('idxpart1', 'idxpart1_pkey', 'idxpart_pkey', True, 'idxpart1_pkey', False, 1, False, True), ('idxpart', 'idxpart_pkey', None, True, 'idxpart_pkey', True, 0, True, True)]"
postgresql,postgresql,alter table idxpart drop constraint idxpart_pkey,indexing.sql,SAME,,[]
postgresql,postgresql,"select indrelid::regclass, indexrelid::regclass, inhparent::regclass, indisvalid,   conname, conislocal, coninhcount, connoinherit, convalidated   from pg_index idx left join pg_inherits inh on (idx.indexrelid = inh.inhrelid)   left join pg_constraint con on (idx.indexrelid = con.conindid)   where indrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE idxpart1 ADD PRIMARY KEY (c1, c2)",indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart1 attach partition idxpart11 for values from (0) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart0 add primary key (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart0 for values from (0) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,alter table only idxpart add primary key (a),indexing.sql,SAME,,[]
postgresql,postgresql,"select indrelid::regclass, indexrelid::regclass, inhparent::regclass, indisvalid,   conname, conislocal, coninhcount, connoinherit, convalidated   from pg_index idx left join pg_inherits inh on (idx.indexrelid = inh.inhrelid)   left join pg_constraint con on (idx.indexrelid = con.conindid)   where indrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('idxpart0', 'idxpart0_pkey', None, True, 'idxpart0_pkey', True, 0, True, True), ('idxpart', 'idxpart_pkey', None, False, 'idxpart_pkey', True, 0, True, True)]"
postgresql,postgresql,alter index idxpart_pkey attach partition idxpart0_pkey,indexing.sql,SAME,,[]
postgresql,postgresql,"select indrelid::regclass, indexrelid::regclass, inhparent::regclass, indisvalid,   conname, conislocal, coninhcount, connoinherit, convalidated   from pg_index idx left join pg_inherits inh on (idx.indexrelid = inh.inhrelid)   left join pg_constraint con on (idx.indexrelid = con.conindid)   where indrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('idxpart0', 'idxpart0_pkey', 'idxpart_pkey', True, 'idxpart0_pkey', False, 1, True, True), ('idxpart', 'idxpart_pkey', None, True, 'idxpart_pkey', True, 0, True, True)]"
postgresql,postgresql,alter table idxpart0 add unique (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart0 default,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart0 alter column a set not null,indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart0 alter column a drop not null,indexing.sql,SAME,,[]
postgresql,postgresql,create unique index on idxpart1 (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart add primary key (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (1) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,"select indrelid::regclass, indexrelid::regclass, inhparent::regclass, indisvalid,   conname, conislocal, coninhcount, connoinherit, convalidated   from pg_index idx left join pg_inherits inh on (idx.indexrelid = inh.inhrelid)   left join pg_constraint con on (idx.indexrelid = con.conindid)   where indrelid::regclass::text like 'idxpart%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('idxpart1', 'idxpart1_a_idx', None, True, None, None, None, None, None), ('idxpart1', 'idxpart1_pkey', 'idxpart_pkey', True, 'idxpart1_pkey', False, 1, False, True), ('idxpart', 'idxpart_pkey', None, True, 'idxpart_pkey', True, 0, True, True)]"
postgresql,postgresql,create unique index on idxpart1 (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart1 for values from (1) to (1000),indexing.sql,SAME,,[]
postgresql,postgresql,alter table only idxpart add primary key (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart2 drop column c,indexing.sql,SAME,,[]
postgresql,postgresql,create unique index on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart2 for values from (100000) to (1000000),indexing.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from idxpart order by a",indexing.sql,SAME,,"[('idxpart1', 0, 'zero'), ('idxpart1', 16, 'sixteen'), ('idxpart1', 42, 'life'), ('idxpart1', 65536, 'sixteen'), ('idxpart2', 142857, 'one'), ('idxpart2', 285714, 'two'), ('idxpart2', 572814, 'inserted first'), ('idxpart2', 857142, 'six')]"
postgresql,postgresql,set enable_seqscan to off,indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart_brin on idxpart using brin(b),indexing.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from idxpart where b = 'abcd',indexing.sql,SAME,,"[('Bitmap Heap Scan on idxpart1 idxpart',), (""  Recheck Cond: (b = 'abcd'::text)"",), ('  ->  Bitmap Index Scan on idxpart1_b_idx',), (""        Index Cond: (b = 'abcd'::text)"",)]"
postgresql,postgresql,drop index idxpart_brin,indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart_spgist on idxpart using spgist(b),indexing.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from idxpart where b = 'abcd',indexing.sql,SAME,,"[('Bitmap Heap Scan on idxpart1 idxpart',), (""  Recheck Cond: (b = 'abcd'::text)"",), ('  ->  Bitmap Index Scan on idxpart1_b_idx',), (""        Index Cond: (b = 'abcd'::text)"",)]"
postgresql,postgresql,drop index idxpart_spgist,indexing.sql,SAME,,[]
postgresql,postgresql,create index idxpart_gin on idxpart using gin(c),indexing.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from idxpart where c @> array[42],indexing.sql,SAME,,"[('Bitmap Heap Scan on idxpart1 idxpart',), (""  Recheck Cond: (c @> '{42}'::integer[])"",), ('  ->  Bitmap Index Scan on idxpart1_c_idx',), (""        Index Cond: (c @> '{42}'::integer[])"",)]"
postgresql,postgresql,drop index idxpart_gin,indexing.sql,SAME,,[]
postgresql,postgresql,reset enable_seqscan,indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart22 (a),indexing.sql,SAME,,[]
postgresql,postgresql,create index on only idxpart2 (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter index idxpart2_a_idx attach partition idxpart22_a_idx,indexing.sql,SAME,,[]
postgresql,postgresql,create index on idxpart (a),indexing.sql,SAME,,[]
postgresql,postgresql,"alter table idxpart3 drop column b, drop column c",indexing.sql,SAME,,[]
postgresql,postgresql,alter table idxpart attach partition idxpart3 for values from (1000) to (2000),indexing.sql,SAME,,[]
postgresql,postgresql,create schema regress_indexing,indexing.sql,SAME,,[]
postgresql,postgresql,set search_path to regress_indexing,indexing.sql,SAME,,[]
postgresql,postgresql,alter table pk2 drop column b,indexing.sql,SAME,,[]
postgresql,postgresql,alter table pk2 alter a set not null,indexing.sql,SAME,,[]
postgresql,postgresql,alter table pk attach partition pk2 for values from (1000) to (2000),indexing.sql,SAME,,[]
postgresql,postgresql,alter table pk attach partition pk4 for values from (3000) to (4000),indexing.sql,SAME,,[]
postgresql,postgresql,alter table pk attach partition pk5 for values from (4000) to (5000),indexing.sql,SAME,,[]
postgresql,postgresql,reset search_path,indexing.sql,SAME,,[]
postgresql,postgresql,create unique index on covidxpart (a) include (b),indexing.sql,SAME,,[]
postgresql,postgresql,alter table covidxpart3 drop c,indexing.sql,SAME,,[]
postgresql,postgresql,alter table covidxpart attach partition covidxpart3 for values in (3),indexing.sql,SAME,,[]
postgresql,postgresql,create unique index on covidxpart4 (a) include (b),indexing.sql,SAME,,[]
postgresql,postgresql,create unique index on covidxpart4 (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table covidxpart attach partition covidxpart4 for values in (4),indexing.sql,SAME,,[]
postgresql,postgresql,alter table parted_pk_detach_test detach partition parted_pk_detach_test1,indexing.sql,SAME,,[]
postgresql,postgresql,alter table parted_pk_detach_test1 drop constraint parted_pk_detach_test1_pkey,indexing.sql,SAME,,[]
postgresql,postgresql,alter table parted_uniq_detach_test detach partition parted_uniq_detach_test1,indexing.sql,SAME,,[]
postgresql,postgresql,alter table parted_uniq_detach_test1 drop constraint parted_uniq_detach_test1_a_key,indexing.sql,SAME,,[]
postgresql,postgresql,create index on parted_index_col_drop (b),indexing.sql,SAME,,[]
postgresql,postgresql,create index on parted_index_col_drop (c),indexing.sql,SAME,,[]
postgresql,postgresql,"create index on parted_index_col_drop (b, c)",indexing.sql,SAME,,[]
postgresql,postgresql,alter table parted_index_col_drop drop column c,indexing.sql,SAME,,[]
postgresql,postgresql,create index parted_inval_idx on parted_inval_tab (a),indexing.sql,SAME,,[]
postgresql,postgresql,create index parted_inval_ixd_1 on only parted_inval_tab_1 (a),indexing.sql,SAME,,[]
postgresql,postgresql,alter table parted_inval_tab attach partition parted_inval_tab_1   for values from (1) to (100),indexing.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indisvalid,        indrelid::regclass, inhparent::regclass   from pg_index idx left join        pg_inherits inh on (idx.indexrelid = inh.inhrelid)   where indexrelid::regclass::text like 'parted_inval%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('parted_inval_idx', True, 'parted_inval_tab', None), ('parted_inval_ixd_1', False, 'parted_inval_tab_1', None), ('parted_inval_tab_1_1_a_idx', True, 'parted_inval_tab_1_1', 'parted_inval_tab_1_a_idx'), ('parted_inval_tab_1_2_a_idx', True, 'parted_inval_tab_1_2', 'parted_inval_tab_1_a_idx'), ('parted_inval_tab_1_a_idx', True, 'parted_inval_tab_1', 'parted_inval_idx')]"
postgresql,postgresql,"select indexrelid::regclass, indisvalid,        indrelid::regclass, inhparent::regclass   from pg_index idx left join        pg_inherits inh on (idx.indexrelid = inh.inhrelid)   where indexrelid::regclass::text like 'parted_isvalid%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,[]
postgresql,postgresql,begin,indexing.sql,SAME,,[]
postgresql,postgresql,create unique index parted_replica_idx   on only parted_replica_tab using btree (id),indexing.sql,SAME,,[]
postgresql,postgresql,create unique index parted_replica_idx_1   on only parted_replica_tab_1 using btree (id),indexing.sql,SAME,,[]
postgresql,postgresql,alter table only parted_replica_tab_1 replica identity   using index parted_replica_idx_1,indexing.sql,SAME,,[]
postgresql,postgresql,create unique index parted_replica_idx_11 on parted_replica_tab_11 USING btree (id),indexing.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indisvalid, indisreplident,        indrelid::regclass, inhparent::regclass   from pg_index idx left join        pg_inherits inh on (idx.indexrelid = inh.inhrelid)   where indexrelid::regclass::text like 'parted_replica%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('parted_replica_idx', False, False, 'parted_replica_tab', None), ('parted_replica_idx_1', False, True, 'parted_replica_tab_1', None), ('parted_replica_idx_11', True, False, 'parted_replica_tab_11', None)]"
postgresql,postgresql,alter index parted_replica_idx ATTACH PARTITION parted_replica_idx_1,indexing.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indisvalid, indisreplident,        indrelid::regclass, inhparent::regclass   from pg_index idx left join        pg_inherits inh on (idx.indexrelid = inh.inhrelid)   where indexrelid::regclass::text like 'parted_replica%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('parted_replica_idx', False, False, 'parted_replica_tab', None), ('parted_replica_idx_1', False, True, 'parted_replica_tab_1', 'parted_replica_idx'), ('parted_replica_idx_11', True, False, 'parted_replica_tab_11', None)]"
postgresql,postgresql,alter index parted_replica_idx_1 ATTACH PARTITION parted_replica_idx_11,indexing.sql,SAME,,[]
postgresql,postgresql,alter table only parted_replica_tab_1 replica identity   using index parted_replica_idx_1,indexing.sql,SAME,,[]
postgresql,postgresql,commit,indexing.sql,SAME,,[]
postgresql,postgresql,"select indexrelid::regclass, indisvalid, indisreplident,        indrelid::regclass, inhparent::regclass   from pg_index idx left join        pg_inherits inh on (idx.indexrelid = inh.inhrelid)   where indexrelid::regclass::text like 'parted_replica%'   order by indexrelid::regclass::text collate ""C""",indexing.sql,SAME,,"[('parted_replica_idx', True, False, 'parted_replica_tab', None), ('parted_replica_idx_1', True, True, 'parted_replica_tab_1', 'parted_replica_idx'), ('parted_replica_idx_11', True, False, 'parted_replica_tab_11', 'parted_replica_idx_1')]"
postgresql,postgresql,SET default_toast_compression = 'pglz',indirect_toast.sql,SAME,,[]
postgresql,postgresql,"UPDATE indtoasttest SET cnt = cnt +1 RETURNING substring(indtoasttest::text, 1, 200)",indirect_toast.sql,SAME,,"[('(two-compressed,1,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012',), ('(two-toasted,1,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345',), ('(""one-compressed,one-null"",1,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',), ('(""one-toasted,one-null"",1,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123',)]"
postgresql,postgresql,"UPDATE indtoasttest SET cnt = cnt +1, f1 = f1 RETURNING substring(indtoasttest::text, 1, 200)",indirect_toast.sql,SAME,,"[('(two-compressed,2,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012',), ('(two-toasted,2,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345',), ('(""one-compressed,one-null"",2,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',), ('(""one-toasted,one-null"",2,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123',)]"
postgresql,postgresql,"UPDATE indtoasttest SET cnt = cnt +1, f1 = f1||'' RETURNING substring(indtoasttest::text, 1, 200)",indirect_toast.sql,SAME,,"[('(two-compressed,3,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012',), ('(two-toasted,3,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345',), ('(""one-compressed,one-null"",3,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',), ('(""one-toasted,one-null"",3,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123',)]"
postgresql,postgresql,"UPDATE indtoasttest SET cnt = cnt +1, f1 = '-'||f1||'-' RETURNING substring(indtoasttest::text, 1, 200)",indirect_toast.sql,SAME,,"[('(two-compressed,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901',), ('(two-toasted,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234',), ('(""one-compressed,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',), ('(""one-toasted,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123',)]"
postgresql,postgresql,"SELECT substring(indtoasttest::text, 1, 200) FROM indtoasttest",indirect_toast.sql,SAME,,"[('(two-compressed,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901',), ('(two-toasted,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234',), ('(""one-compressed,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',), ('(""one-toasted,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123',)]"
postgresql,postgresql,VACUUM FREEZE indtoasttest,indirect_toast.sql,SAME,,[]
postgresql,postgresql,"SELECT substring(indtoasttest::text, 1, 200) FROM indtoasttest",indirect_toast.sql,SAME,,"[('(two-compressed,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901',), ('(two-toasted,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234',), ('(""one-compressed,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',), ('(""one-toasted,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123',)]"
postgresql,postgresql,CREATE FUNCTION update_using_indirect()         RETURNS trigger         LANGUAGE plpgsql AS $$ BEGIN     NEW := make_tuple_indirect(NEW);     RETURN NEW; END$$,indirect_toast.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER indtoasttest_update_indirect         BEFORE INSERT OR UPDATE         ON indtoasttest         FOR EACH ROW         EXECUTE PROCEDURE update_using_indirect(),indirect_toast.sql,SAME,,[]
postgresql,postgresql,"SELECT substring(indtoasttest::text, 1, 200) FROM indtoasttest",indirect_toast.sql,SAME,,"[('(two-compressed,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901',), ('(two-toasted,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234',), ('(""one-compressed,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',), ('(""one-toasted,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123',)]"
postgresql,postgresql,VACUUM FREEZE indtoasttest,indirect_toast.sql,SAME,,[]
postgresql,postgresql,"SELECT substring(indtoasttest::text, 1, 200) FROM indtoasttest",indirect_toast.sql,SAME,,"[('(two-compressed,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901',), ('(two-toasted,4,-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234',), ('(""one-compressed,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',), ('(""one-toasted,one-null"",4,,12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123',)]"
postgresql,postgresql,DROP FUNCTION update_using_indirect(),indirect_toast.sql,SAME,,[]
postgresql,postgresql,RESET default_toast_compression,indirect_toast.sql,SAME,,[]
postgresql,postgresql,"SELECT c AS cidr, i AS inet FROM INET_TBL",inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/26', '192.168.1.226'), ('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.255/25'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.0.0.0/32', '10.1.2.3/8'), ('10.1.2.3/32', '10.1.2.3'), ('10.1.2.0/24', '10.1.2.3/24'), ('10.1.0.0/16', '10.1.2.3/16'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.0.0.0/8', '11.1.2.3/8'), ('10.0.0.0/8', '9.1.2.3/8'), ('10:23::f1/128', '10:23::f1/64'), ('10:23::8000/113', '10:23::ffff'), ('::ffff:1.2.3.4/128', '::4.3.2.1/24')]"
postgresql,postgresql,"SELECT i AS inet, host(i), text(i), family(i) FROM INET_TBL",inet.sql,SAME,,"[('192.168.1.226/24', '192.168.1.226', '192.168.1.226/24', 4), ('192.168.1.226', '192.168.1.226', '192.168.1.226/32', 4), ('192.168.1.0/24', '192.168.1.0', '192.168.1.0/24', 4), ('192.168.1.0/25', '192.168.1.0', '192.168.1.0/25', 4), ('192.168.1.255/24', '192.168.1.255', '192.168.1.255/24', 4), ('192.168.1.255/25', '192.168.1.255', '192.168.1.255/25', 4), ('10.1.2.3/8', '10.1.2.3', '10.1.2.3/8', 4), ('10.1.2.3/8', '10.1.2.3', '10.1.2.3/8', 4), ('10.1.2.3', '10.1.2.3', '10.1.2.3/32', 4), ('10.1.2.3/24', '10.1.2.3', '10.1.2.3/24', 4), ('10.1.2.3/16', '10.1.2.3', '10.1.2.3/16', 4), ('10.1.2.3/8', '10.1.2.3', '10.1.2.3/8', 4), ('11.1.2.3/8', '11.1.2.3', '11.1.2.3/8', 4), ('9.1.2.3/8', '9.1.2.3', '9.1.2.3/8', 4), ('10:23::f1/64', '10:23::f1', '10:23::f1/64', 6), ('10:23::ffff', '10:23::ffff', '10:23::ffff/128', 6), ('::4.3.2.1/24', '::4.3.2.1', '::4.3.2.1/24', 6)]"
postgresql,postgresql,"SELECT c AS cidr, abbrev(c) FROM INET_TBL",inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1/24'), ('192.168.1.0/26', '192.168.1.0/26'), ('192.168.1.0/24', '192.168.1/24'), ('192.168.1.0/24', '192.168.1/24'), ('192.168.1.0/24', '192.168.1/24'), ('192.168.1.0/24', '192.168.1/24'), ('10.0.0.0/8', '10/8'), ('10.0.0.0/32', '10.0.0.0/32'), ('10.1.2.3/32', '10.1.2.3/32'), ('10.1.2.0/24', '10.1.2/24'), ('10.1.0.0/16', '10.1/16'), ('10.0.0.0/8', '10/8'), ('10.0.0.0/8', '10/8'), ('10.0.0.0/8', '10/8'), ('10:23::f1/128', '10:23::f1/128'), ('10:23::8000/113', '10:23::8000/113'), ('::ffff:1.2.3.4/128', '::ffff:1.2.3.4/128')]"
postgresql,postgresql,"SELECT c AS cidr, broadcast(c),   i AS inet, broadcast(i) FROM INET_TBL",inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.255/24', '192.168.1.226/24', '192.168.1.255/24'), ('192.168.1.0/26', '192.168.1.63/26', '192.168.1.226', '192.168.1.226'), ('192.168.1.0/24', '192.168.1.255/24', '192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.255/24', '192.168.1.0/25', '192.168.1.127/25'), ('192.168.1.0/24', '192.168.1.255/24', '192.168.1.255/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.255/24', '192.168.1.255/25', '192.168.1.255/25'), ('10.0.0.0/8', '10.255.255.255/8', '10.1.2.3/8', '10.255.255.255/8'), ('10.0.0.0/32', '10.0.0.0', '10.1.2.3/8', '10.255.255.255/8'), ('10.1.2.3/32', '10.1.2.3', '10.1.2.3', '10.1.2.3'), ('10.1.2.0/24', '10.1.2.255/24', '10.1.2.3/24', '10.1.2.255/24'), ('10.1.0.0/16', '10.1.255.255/16', '10.1.2.3/16', '10.1.255.255/16'), ('10.0.0.0/8', '10.255.255.255/8', '10.1.2.3/8', '10.255.255.255/8'), ('10.0.0.0/8', '10.255.255.255/8', '11.1.2.3/8', '11.255.255.255/8'), ('10.0.0.0/8', '10.255.255.255/8', '9.1.2.3/8', '9.255.255.255/8'), ('10:23::f1/128', '10:23::f1', '10:23::f1/64', '10:23::ffff:ffff:ffff:ffff/64'), ('10:23::8000/113', '10:23::ffff/113', '10:23::ffff', '10:23::ffff'), ('::ffff:1.2.3.4/128', '::ffff:1.2.3.4', '::4.3.2.1/24', '0:ff:ffff:ffff:ffff:ffff:ffff:ffff/24')]"
postgresql,postgresql,"SELECT c AS cidr, network(c) AS ""network(cidr)"",   i AS inet, network(i) AS ""network(inet)"" FROM INET_TBL",inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24', '192.168.1.226/24', '192.168.1.0/24'), ('192.168.1.0/26', '192.168.1.0/26', '192.168.1.226', '192.168.1.226/32'), ('192.168.1.0/24', '192.168.1.0/24', '192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.0/24', '192.168.1.0/25', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.0/24', '192.168.1.255/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.0/24', '192.168.1.255/25', '192.168.1.128/25'), ('10.0.0.0/8', '10.0.0.0/8', '10.1.2.3/8', '10.0.0.0/8'), ('10.0.0.0/32', '10.0.0.0/32', '10.1.2.3/8', '10.0.0.0/8'), ('10.1.2.3/32', '10.1.2.3/32', '10.1.2.3', '10.1.2.3/32'), ('10.1.2.0/24', '10.1.2.0/24', '10.1.2.3/24', '10.1.2.0/24'), ('10.1.0.0/16', '10.1.0.0/16', '10.1.2.3/16', '10.1.0.0/16'), ('10.0.0.0/8', '10.0.0.0/8', '10.1.2.3/8', '10.0.0.0/8'), ('10.0.0.0/8', '10.0.0.0/8', '11.1.2.3/8', '11.0.0.0/8'), ('10.0.0.0/8', '10.0.0.0/8', '9.1.2.3/8', '9.0.0.0/8'), ('10:23::f1/128', '10:23::f1/128', '10:23::f1/64', '10:23::/64'), ('10:23::8000/113', '10:23::8000/113', '10:23::ffff', '10:23::ffff/128'), ('::ffff:1.2.3.4/128', '::ffff:1.2.3.4/128', '::4.3.2.1/24', '::/24')]"
postgresql,postgresql,"SELECT c AS cidr, masklen(c) AS ""masklen(cidr)"",   i AS inet, masklen(i) AS ""masklen(inet)"" FROM INET_TBL",inet.sql,SAME,,"[('192.168.1.0/24', 24, '192.168.1.226/24', 24), ('192.168.1.0/26', 26, '192.168.1.226', 32), ('192.168.1.0/24', 24, '192.168.1.0/24', 24), ('192.168.1.0/24', 24, '192.168.1.0/25', 25), ('192.168.1.0/24', 24, '192.168.1.255/24', 24), ('192.168.1.0/24', 24, '192.168.1.255/25', 25), ('10.0.0.0/8', 8, '10.1.2.3/8', 8), ('10.0.0.0/32', 32, '10.1.2.3/8', 8), ('10.1.2.3/32', 32, '10.1.2.3', 32), ('10.1.2.0/24', 24, '10.1.2.3/24', 24), ('10.1.0.0/16', 16, '10.1.2.3/16', 16), ('10.0.0.0/8', 8, '10.1.2.3/8', 8), ('10.0.0.0/8', 8, '11.1.2.3/8', 8), ('10.0.0.0/8', 8, '9.1.2.3/8', 8), ('10:23::f1/128', 128, '10:23::f1/64', 64), ('10:23::8000/113', 113, '10:23::ffff', 128), ('::ffff:1.2.3.4/128', 128, '::4.3.2.1/24', 24)]"
postgresql,postgresql,"SELECT c AS cidr, masklen(c) AS ""masklen(cidr)"",   i AS inet, masklen(i) AS ""masklen(inet)"" FROM INET_TBL   WHERE masklen(c) <= 8",inet.sql,SAME,,"[('10.0.0.0/8', 8, '10.1.2.3/8', 8), ('10.0.0.0/8', 8, '10.1.2.3/8', 8), ('10.0.0.0/8', 8, '11.1.2.3/8', 8), ('10.0.0.0/8', 8, '9.1.2.3/8', 8)]"
postgresql,postgresql,"SELECT c AS cidr, i AS inet FROM INET_TBL   WHERE c = i",inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('10.1.2.3/32', '10.1.2.3')]"
postgresql,postgresql,"SELECT i, c,   i < c AS lt, i <= c AS le, i = c AS eq,   i >= c AS ge, i > c AS gt, i <> c AS ne,   i << c AS sb, i <<= c AS sbe,   i >> c AS sup, i >>= c AS spe,   i && c AS ovr   FROM INET_TBL",inet.sql,SAME,,"[('192.168.1.226/24', '192.168.1.0/24', False, False, False, True, True, True, False, True, False, True, True), ('192.168.1.226', '192.168.1.0/26', False, False, False, True, True, True, False, False, False, False, False), ('192.168.1.0/24', '192.168.1.0/24', False, True, True, True, False, False, False, True, False, True, True), ('192.168.1.0/25', '192.168.1.0/24', False, False, False, True, True, True, True, True, False, False, True), ('192.168.1.255/24', '192.168.1.0/24', False, False, False, True, True, True, False, True, False, True, True), ('192.168.1.255/25', '192.168.1.0/24', False, False, False, True, True, True, True, True, False, False, True), ('10.1.2.3/8', '10.0.0.0/8', False, False, False, True, True, True, False, True, False, True, True), ('10.1.2.3/8', '10.0.0.0/32', True, True, False, False, False, True, False, False, True, True, True), ('10.1.2.3', '10.1.2.3/32', False, True, True, True, False, False, False, True, False, True, True), ('10.1.2.3/24', '10.1.2.0/24', False, False, False, True, True, True, False, True, False, True, True), ('10.1.2.3/16', '10.1.0.0/16', False, False, False, True, True, True, False, True, False, True, True), ('10.1.2.3/8', '10.0.0.0/8', False, False, False, True, True, True, False, True, False, True, True), ('11.1.2.3/8', '10.0.0.0/8', False, False, False, True, True, True, False, False, False, False, False), ('9.1.2.3/8', '10.0.0.0/8', True, True, False, False, False, True, False, False, False, False, False), ('10:23::f1/64', '10:23::f1/128', True, True, False, False, False, True, False, False, True, True, True), ('10:23::ffff', '10:23::8000/113', False, False, False, True, True, True, True, True, False, False, True), ('::4.3.2.1/24', '::ffff:1.2.3.4/128', True, True, False, False, False, True, False, False, True, True, True)]"
postgresql,postgresql,"SELECT max(i) AS max, min(i) AS min FROM INET_TBL",inet.sql,SAME,,"[('10:23::ffff', '9.1.2.3/8')]"
postgresql,postgresql,"SELECT max(c) AS max, min(c) AS min FROM INET_TBL",inet.sql,SAME,,"[('10:23::8000/113', '10.0.0.0/8')]"
postgresql,postgresql,"SELECT set_masklen(inet(text(i)), 24) FROM INET_TBL",inet.sql,SAME,,"[('192.168.1.226/24',), ('192.168.1.226/24',), ('192.168.1.0/24',), ('192.168.1.0/24',), ('192.168.1.255/24',), ('192.168.1.255/24',), ('10.1.2.3/24',), ('10.1.2.3/24',), ('10.1.2.3/24',), ('10.1.2.3/24',), ('10.1.2.3/24',), ('10.1.2.3/24',), ('11.1.2.3/24',), ('9.1.2.3/24',), ('10:23::f1/24',), ('10:23::ffff/24',), ('::4.3.2.1/24',)]"
postgresql,postgresql,CREATE INDEX inet_idx1 ON inet_tbl(i),inet.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO off,inet.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM inet_tbl WHERE i<<'192.168.1.0/24'::cidr,inet.sql,SAME,,"[('Index Scan using inet_idx1 on inet_tbl',), (""  Index Cond: ((i > '192.168.1.0/24'::inet) AND (i <= '192.168.1.255'::inet))"",), (""  Filter: (i << '192.168.1.0/24'::inet)"",)]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i<<'192.168.1.0/24'::cidr,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM inet_tbl WHERE i<<='192.168.1.0/24'::cidr,inet.sql,SAME,,"[('Index Scan using inet_idx1 on inet_tbl',), (""  Index Cond: ((i >= '192.168.1.0/24'::inet) AND (i <= '192.168.1.255'::inet))"",), (""  Filter: (i <<= '192.168.1.0/24'::inet)"",)]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i<<='192.168.1.0/24'::cidr,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM inet_tbl WHERE '192.168.1.0/24'::cidr >>= i,inet.sql,SAME,,"[('Index Scan using inet_idx1 on inet_tbl',), (""  Index Cond: ((i >= '192.168.1.0/24'::inet) AND (i <= '192.168.1.255'::inet))"",), (""  Filter: ('192.168.1.0/24'::inet >>= i)"",)]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE '192.168.1.0/24'::cidr >>= i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM inet_tbl WHERE '192.168.1.0/24'::cidr >> i,inet.sql,SAME,,"[('Index Scan using inet_idx1 on inet_tbl',), (""  Index Cond: ((i > '192.168.1.0/24'::inet) AND (i <= '192.168.1.255'::inet))"",), (""  Filter: ('192.168.1.0/24'::inet >> i)"",)]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE '192.168.1.0/24'::cidr >> i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,SET enable_seqscan TO on,inet.sql,SAME,,[]
postgresql,postgresql,DROP INDEX inet_idx1,inet.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX inet_idx2 ON inet_tbl using gist (i inet_ops),inet.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO off,inet.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i << '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i <<= '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i && '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i >>= '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i >> '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i < '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('10.0.0.0/8', '9.1.2.3/8'), ('10.0.0.0/32', '10.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.1.0.0/16', '10.1.2.3/16'), ('10.1.2.0/24', '10.1.2.3/24'), ('10.1.2.3/32', '10.1.2.3'), ('10.0.0.0/8', '11.1.2.3/8')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i <= '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('10.0.0.0/8', '9.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.0.0.0/32', '10.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.1.0.0/16', '10.1.2.3/16'), ('10.1.2.0/24', '10.1.2.3/24'), ('10.1.2.3/32', '10.1.2.3'), ('10.0.0.0/8', '11.1.2.3/8'), ('192.168.1.0/24', '192.168.1.0/24')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i = '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i >= '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226'), ('::ffff:1.2.3.4/128', '::4.3.2.1/24'), ('10:23::f1/128', '10:23::f1/64'), ('10:23::8000/113', '10:23::ffff')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i > '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226'), ('::ffff:1.2.3.4/128', '::4.3.2.1/24'), ('10:23::f1/128', '10:23::f1/64'), ('10:23::8000/113', '10:23::ffff')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i <> '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('10.0.0.0/8', '9.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.0.0.0/32', '10.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.1.0.0/16', '10.1.2.3/16'), ('10.1.2.0/24', '10.1.2.3/24'), ('10.1.2.3/32', '10.1.2.3'), ('10.0.0.0/8', '11.1.2.3/8'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226'), ('::ffff:1.2.3.4/128', '::4.3.2.1/24'), ('10:23::f1/128', '10:23::f1/64'), ('10:23::8000/113', '10:23::ffff')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT i FROM inet_tbl WHERE i << '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('Sort',), ('  Sort Key: i',), ('  ->  Index Only Scan using inet_idx2 on inet_tbl',), (""        Index Cond: (i << '192.168.1.0/24'::inet)"",)]"
postgresql,postgresql,SELECT i FROM inet_tbl WHERE i << '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/25',), ('192.168.1.255/25',), ('192.168.1.226',)]"
postgresql,postgresql,SET enable_seqscan TO on,inet.sql,SAME,,[]
postgresql,postgresql,DROP INDEX inet_idx2,inet.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX inet_idx3 ON inet_tbl using spgist (i),inet.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO off,inet.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i << '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i <<= '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i && '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i >>= '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i >> '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i < '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('10.0.0.0/8', '9.1.2.3/8'), ('10.0.0.0/32', '10.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.1.0.0/16', '10.1.2.3/16'), ('10.1.2.0/24', '10.1.2.3/24'), ('10.1.2.3/32', '10.1.2.3'), ('10.0.0.0/8', '11.1.2.3/8')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i <= '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('10.0.0.0/8', '9.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.0.0.0/32', '10.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.1.0.0/16', '10.1.2.3/16'), ('10.1.2.0/24', '10.1.2.3/24'), ('10.1.2.3/32', '10.1.2.3'), ('10.0.0.0/8', '11.1.2.3/8'), ('192.168.1.0/24', '192.168.1.0/24')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i = '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i >= '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226'), ('::ffff:1.2.3.4/128', '::4.3.2.1/24'), ('10:23::f1/128', '10:23::f1/64'), ('10:23::8000/113', '10:23::ffff')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i > '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226'), ('::ffff:1.2.3.4/128', '::4.3.2.1/24'), ('10:23::f1/128', '10:23::f1/64'), ('10:23::8000/113', '10:23::ffff')]"
postgresql,postgresql,SELECT * FROM inet_tbl WHERE i <> '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('10.0.0.0/8', '9.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.0.0.0/32', '10.1.2.3/8'), ('10.0.0.0/8', '10.1.2.3/8'), ('10.1.0.0/16', '10.1.2.3/16'), ('10.1.2.0/24', '10.1.2.3/24'), ('10.1.2.3/32', '10.1.2.3'), ('10.0.0.0/8', '11.1.2.3/8'), ('192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.0/24', '192.168.1.255/25'), ('192.168.1.0/26', '192.168.1.226'), ('::ffff:1.2.3.4/128', '::4.3.2.1/24'), ('10:23::f1/128', '10:23::f1/64'), ('10:23::8000/113', '10:23::ffff')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT i FROM inet_tbl WHERE i << '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('Sort',), ('  Sort Key: i',), ('  ->  Index Only Scan using inet_idx3 on inet_tbl',), (""        Index Cond: (i << '192.168.1.0/24'::inet)"",)]"
postgresql,postgresql,SELECT i FROM inet_tbl WHERE i << '192.168.1.0/24'::cidr ORDER BY i,inet.sql,SAME,,"[('192.168.1.0/25',), ('192.168.1.255/25',), ('192.168.1.226',)]"
postgresql,postgresql,SET enable_seqscan TO on,inet.sql,SAME,,[]
postgresql,postgresql,DROP INDEX inet_idx3,inet.sql,SAME,,[]
postgresql,postgresql,"SELECT i, ~i AS ""~i"" FROM inet_tbl",inet.sql,SAME,,"[('192.168.1.226/24', '63.87.254.29/24'), ('192.168.1.226', '63.87.254.29'), ('192.168.1.0/24', '63.87.254.255/24'), ('192.168.1.0/25', '63.87.254.255/25'), ('192.168.1.255/24', '63.87.254.0/24'), ('192.168.1.255/25', '63.87.254.0/25'), ('10.1.2.3/8', '245.254.253.252/8'), ('10.1.2.3/8', '245.254.253.252/8'), ('10.1.2.3', '245.254.253.252'), ('10.1.2.3/24', '245.254.253.252/24'), ('10.1.2.3/16', '245.254.253.252/16'), ('10.1.2.3/8', '245.254.253.252/8'), ('11.1.2.3/8', '244.254.253.252/8'), ('9.1.2.3/8', '246.254.253.252/8'), ('10:23::f1/64', 'ffef:ffdc:ffff:ffff:ffff:ffff:ffff:ff0e/64'), ('10:23::ffff', 'ffef:ffdc:ffff:ffff:ffff:ffff:ffff:0'), ('::4.3.2.1/24', 'ffff:ffff:ffff:ffff:ffff:ffff:fbfc:fdfe/24')]"
postgresql,postgresql,"SELECT i, c, i & c AS ""and"" FROM inet_tbl",inet.sql,SAME,,"[('192.168.1.226/24', '192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.226', '192.168.1.0/26', '192.168.1.0'), ('192.168.1.0/24', '192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/25', '192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.255/24', '192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.255/25', '192.168.1.0/24', '192.168.1.0/25'), ('10.1.2.3/8', '10.0.0.0/8', '10.0.0.0/8'), ('10.1.2.3/8', '10.0.0.0/32', '10.0.0.0'), ('10.1.2.3', '10.1.2.3/32', '10.1.2.3'), ('10.1.2.3/24', '10.1.2.0/24', '10.1.2.0/24'), ('10.1.2.3/16', '10.1.0.0/16', '10.1.0.0/16'), ('10.1.2.3/8', '10.0.0.0/8', '10.0.0.0/8'), ('11.1.2.3/8', '10.0.0.0/8', '10.0.0.0/8'), ('9.1.2.3/8', '10.0.0.0/8', '8.0.0.0/8'), ('10:23::f1/64', '10:23::f1/128', '10:23::f1'), ('10:23::ffff', '10:23::8000/113', '10:23::8000'), ('::4.3.2.1/24', '::ffff:1.2.3.4/128', '::0.2.2.0')]"
postgresql,postgresql,"SELECT i, c, i | c AS ""or"" FROM inet_tbl",inet.sql,SAME,,"[('192.168.1.226/24', '192.168.1.0/24', '192.168.1.226/24'), ('192.168.1.226', '192.168.1.0/26', '192.168.1.226'), ('192.168.1.0/24', '192.168.1.0/24', '192.168.1.0/24'), ('192.168.1.0/25', '192.168.1.0/24', '192.168.1.0/25'), ('192.168.1.255/24', '192.168.1.0/24', '192.168.1.255/24'), ('192.168.1.255/25', '192.168.1.0/24', '192.168.1.255/25'), ('10.1.2.3/8', '10.0.0.0/8', '10.1.2.3/8'), ('10.1.2.3/8', '10.0.0.0/32', '10.1.2.3'), ('10.1.2.3', '10.1.2.3/32', '10.1.2.3'), ('10.1.2.3/24', '10.1.2.0/24', '10.1.2.3/24'), ('10.1.2.3/16', '10.1.0.0/16', '10.1.2.3/16'), ('10.1.2.3/8', '10.0.0.0/8', '10.1.2.3/8'), ('11.1.2.3/8', '10.0.0.0/8', '11.1.2.3/8'), ('9.1.2.3/8', '10.0.0.0/8', '11.1.2.3/8'), ('10:23::f1/64', '10:23::f1/128', '10:23::f1'), ('10:23::ffff', '10:23::8000/113', '10:23::ffff'), ('::4.3.2.1/24', '::ffff:1.2.3.4/128', '::ffff:5.3.3.5')]"
postgresql,postgresql,"SELECT i, i + 500 AS ""i+500"" FROM inet_tbl",inet.sql,SAME,,"[('192.168.1.226/24', '192.168.3.214/24'), ('192.168.1.226', '192.168.3.214'), ('192.168.1.0/24', '192.168.2.244/24'), ('192.168.1.0/25', '192.168.2.244/25'), ('192.168.1.255/24', '192.168.3.243/24'), ('192.168.1.255/25', '192.168.3.243/25'), ('10.1.2.3/8', '10.1.3.247/8'), ('10.1.2.3/8', '10.1.3.247/8'), ('10.1.2.3', '10.1.3.247'), ('10.1.2.3/24', '10.1.3.247/24'), ('10.1.2.3/16', '10.1.3.247/16'), ('10.1.2.3/8', '10.1.3.247/8'), ('11.1.2.3/8', '11.1.3.247/8'), ('9.1.2.3/8', '9.1.3.247/8'), ('10:23::f1/64', '10:23::2e5/64'), ('10:23::ffff', '10:23::1:1f3'), ('::4.3.2.1/24', '::4.3.3.245/24')]"
postgresql,postgresql,"SELECT i, i - 500 AS ""i-500"" FROM inet_tbl",inet.sql,SAME,,"[('192.168.1.226/24', '192.167.255.238/24'), ('192.168.1.226', '192.167.255.238'), ('192.168.1.0/24', '192.167.255.12/24'), ('192.168.1.0/25', '192.167.255.12/25'), ('192.168.1.255/24', '192.168.0.11/24'), ('192.168.1.255/25', '192.168.0.11/25'), ('10.1.2.3/8', '10.1.0.15/8'), ('10.1.2.3/8', '10.1.0.15/8'), ('10.1.2.3', '10.1.0.15'), ('10.1.2.3/24', '10.1.0.15/24'), ('10.1.2.3/16', '10.1.0.15/16'), ('10.1.2.3/8', '10.1.0.15/8'), ('11.1.2.3/8', '11.1.0.15/8'), ('9.1.2.3/8', '9.1.0.15/8'), ('10:23::f1/64', '10:22:ffff:ffff:ffff:ffff:ffff:fefd/64'), ('10:23::ffff', '10:23::fe0b'), ('::4.3.2.1/24', '::4.3.0.13/24')]"
postgresql,postgresql,"SELECT i, c, i - c AS ""minus"" FROM inet_tbl",inet.sql,SAME,,"[('192.168.1.226/24', '192.168.1.0/24', 226), ('192.168.1.226', '192.168.1.0/26', 226), ('192.168.1.0/24', '192.168.1.0/24', 0), ('192.168.1.0/25', '192.168.1.0/24', 0), ('192.168.1.255/24', '192.168.1.0/24', 255), ('192.168.1.255/25', '192.168.1.0/24', 255), ('10.1.2.3/8', '10.0.0.0/8', 66051), ('10.1.2.3/8', '10.0.0.0/32', 66051), ('10.1.2.3', '10.1.2.3/32', 0), ('10.1.2.3/24', '10.1.2.0/24', 3), ('10.1.2.3/16', '10.1.0.0/16', 515), ('10.1.2.3/8', '10.0.0.0/8', 66051), ('11.1.2.3/8', '10.0.0.0/8', 16843267), ('9.1.2.3/8', '10.0.0.0/8', -16711165), ('10:23::f1/64', '10:23::f1/128', 0), ('10:23::ffff', '10:23::8000/113', 32767), ('::4.3.2.1/24', '::ffff:1.2.3.4/128', -281470631346435)]"
postgresql,postgresql,SELECT '127.0.0.1'::inet + 257,inet.sql,SAME,,"[('127.0.1.2',)]"
postgresql,postgresql,SELECT ('127.0.0.1'::inet + 257) - 257,inet.sql,SAME,,"[('127.0.0.1',)]"
postgresql,postgresql,SELECT '127::1'::inet + 257,inet.sql,SAME,,"[('127::102',)]"
postgresql,postgresql,SELECT ('127::1'::inet + 257) - 257,inet.sql,SAME,,"[('127::1',)]"
postgresql,postgresql,SELECT '127.0.0.2'::inet  - ('127.0.0.2'::inet + 500),inet.sql,SAME,,"[(-500,)]"
postgresql,postgresql,SELECT '127.0.0.2'::inet  - ('127.0.0.2'::inet - 500),inet.sql,SAME,,"[(500,)]"
postgresql,postgresql,SELECT '127::2'::inet  - ('127::2'::inet + 500),inet.sql,SAME,,"[(-500,)]"
postgresql,postgresql,SELECT '127::2'::inet  - ('127::2'::inet - 500),inet.sql,SAME,,"[(500,)]"
postgresql,postgresql,SELECT '127::1'::inet + 10000000000,inet.sql,SAME,,"[('127::2:540b:e401',)]"
postgresql,postgresql,SELECT '127::1'::inet - '127::2'::inet,inet.sql,SAME,,"[(-1,)]"
postgresql,postgresql,"SELECT inet_merge(c, i) FROM INET_TBL WHERE inet_same_family(c, i)",inet.sql,SAME,,"[('192.168.1.0/24',), ('192.168.1.0/24',), ('192.168.1.0/24',), ('192.168.1.0/24',), ('192.168.1.0/24',), ('192.168.1.0/24',), ('10.0.0.0/8',), ('10.0.0.0/8',), ('10.1.2.3/32',), ('10.1.2.0/24',), ('10.1.0.0/16',), ('10.0.0.0/8',), ('10.0.0.0/7',), ('8.0.0.0/6',), ('10:23::/64',), ('10:23::8000/113',), ('::/24',)]"
postgresql,postgresql,"SELECT a FROM (VALUES   ('0.0.0.0/0'::inet),   ('0.0.0.0/1'::inet),   ('0.0.0.0/32'::inet),   ('0.0.0.1/0'::inet),   ('0.0.0.1/1'::inet),   ('127.126.127.127/0'::inet),   ('127.127.127.127/0'::inet),   ('127.128.127.127/0'::inet),   ('192.168.1.0/24'::inet),   ('192.168.1.0/25'::inet),   ('192.168.1.1/23'::inet),   ('192.168.1.1/5'::inet),   ('192.168.1.1/6'::inet),   ('192.168.1.1/25'::inet),   ('192.168.1.2/25'::inet),   ('192.168.1.1/26'::inet),   ('192.168.1.2/26'::inet),   ('192.168.1.2/23'::inet),   ('192.168.1.255/5'::inet),   ('192.168.1.255/6'::inet),   ('192.168.1.3/1'::inet),   ('192.168.1.3/23'::inet),   ('192.168.1.4/0'::inet),   ('192.168.1.5/0'::inet),   ('255.0.0.0/0'::inet),   ('255.1.0.0/0'::inet),   ('255.2.0.0/0'::inet),   ('255.255.000.000/0'::inet),   ('255.255.000.000/0'::inet),   ('255.255.000.000/15'::inet),   ('255.255.000.000/16'::inet),   ('255.255.255.254/32'::inet),   ('255.255.255.000/32'::inet),   ('255.255.255.001/31'::inet),   ('255.255.255.002/31'::inet),   ('255.255.255.003/31'::inet),   ('255.255.255.003/32'::inet),   ('255.255.255.001/32'::inet),   ('255.255.255.255/0'::inet),   ('255.255.255.255/0'::inet),   ('255.255.255.255/0'::inet),   ('255.255.255.255/1'::inet),   ('255.255.255.255/16'::inet),   ('255.255.255.255/16'::inet),   ('255.255.255.255/31'::inet),   ('255.255.255.255/32'::inet),   ('255.255.255.253/32'::inet),   ('255.255.255.252/32'::inet),   ('255.3.0.0/0'::inet),   ('0000:0000:0000:0000:0000:0000:0000:0000/0'::inet),   ('0000:0000:0000:0000:0000:0000:0000:0000/128'::inet),   ('0000:0000:0000:0000:0000:0000:0000:0001/128'::inet),   ('10:23::f1/64'::inet),   ('10:23::f1/65'::inet),   ('10:23::ffff'::inet),   ('127::1'::inet),   ('127::2'::inet),   ('8000:0000:0000:0000:0000:0000:0000:0000/1'::inet),   ('::1:ffff:ffff:ffff:ffff/128'::inet),   ('::2:ffff:ffff:ffff:ffff/128'::inet),   ('::4:3:2:0/24'::inet),   ('::4:3:2:1/24'::inet),   ('::4:3:2:2/24'::inet),   ('ffff:83e7:f118:57dc:6093:6d92:689d:58cf/70'::inet),   ('ffff:84b0:4775:536e:c3ed:7116:a6d6:34f0/44'::inet),   ('ffff:8566:f84:5867:47f1:7867:d2ba:8a1a/69'::inet),   ('ffff:8883:f028:7d2:4d68:d510:7d6b:ac43/73'::inet),   ('ffff:8ae8:7c14:65b3:196:8e4a:89ae:fb30/89'::inet),   ('ffff:8dd0:646:694c:7c16:7e35:6a26:171/104'::inet),   ('ffff:8eef:cbf:700:eda3:ae32:f4b4:318b/121'::inet),   ('ffff:90e7:e744:664:a93:8efe:1f25:7663/122'::inet),   ('ffff:9597:c69c:8b24:57a:8639:ec78:6026/111'::inet),   ('ffff:9e86:79ea:f16e:df31:8e4d:7783:532e/88'::inet),   ('ffff:a0c7:82d3:24de:f762:6e1f:316d:3fb2/23'::inet),   ('ffff:fffa:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:fffb:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:fffc:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:fffd:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:fffe:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffa:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffb:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffc:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffd::/128'::inet),   ('ffff:ffff:ffff:fffd:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:fffe::/128'::inet),   ('ffff:ffff:ffff:fffe:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:ffff:4:3:2:0/24'::inet),   ('ffff:ffff:ffff:ffff:4:3:2:1/24'::inet),   ('ffff:ffff:ffff:ffff:4:3:2:2/24'::inet),   ('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/0'::inet),   ('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128'::inet) ) AS i(a) ORDER BY a",inet.sql,SAME,,"[('0.0.0.0/0',), ('0.0.0.1/0',), ('127.126.127.127/0',), ('127.127.127.127/0',), ('127.128.127.127/0',), ('192.168.1.4/0',), ('192.168.1.5/0',), ('255.0.0.0/0',), ('255.1.0.0/0',), ('255.2.0.0/0',), ('255.3.0.0/0',), ('255.255.0.0/0',), ('255.255.0.0/0',), ('255.255.255.255/0',), ('255.255.255.255/0',), ('255.255.255.255/0',), ('0.0.0.0/1',), ('0.0.0.1/1',), ('0.0.0.0',), ('192.168.1.3/1',), ('255.255.255.255/1',), ('192.168.1.1/5',), ('192.168.1.255/5',), ('192.168.1.1/6',), ('192.168.1.255/6',), ('192.168.1.1/23',), ('192.168.1.2/23',), ('192.168.1.3/23',), ('192.168.1.0/24',), ('192.168.1.0/25',), ('192.168.1.1/25',), ('192.168.1.2/25',), ('192.168.1.1/26',), ('192.168.1.2/26',), ('255.255.0.0/15',), ('255.255.0.0/16',), ('255.255.255.255/16',), ('255.255.255.255/16',), ('255.255.255.1/31',), ('255.255.255.0',), ('255.255.255.1',), ('255.255.255.2/31',), ('255.255.255.3/31',), ('255.255.255.3',), ('255.255.255.252',), ('255.255.255.253',), ('255.255.255.255/31',), ('255.255.255.254',), ('255.255.255.255',), ('::/0',), ('ffff:fffa:ffff:ffff:ffff:ffff:ffff:ffff/0',), ('ffff:fffb:ffff:ffff:ffff:ffff:ffff:ffff/0',), ('ffff:fffc:ffff:ffff:ffff:ffff:ffff:ffff/0',), ('ffff:fffd:ffff:ffff:ffff:ffff:ffff:ffff/0',), ('ffff:fffe:ffff:ffff:ffff:ffff:ffff:ffff/0',), ('ffff:ffff:ffff:fffa:ffff:ffff:ffff:ffff/0',), ('ffff:ffff:ffff:fffb:ffff:ffff:ffff:ffff/0',), ('ffff:ffff:ffff:fffc:ffff:ffff:ffff:ffff/0',), ('ffff:ffff:ffff:fffd:ffff:ffff:ffff:ffff/0',), ('ffff:ffff:ffff:fffe:ffff:ffff:ffff:ffff/0',), ('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/0',), ('::4:3:2:0/24',), ('::4:3:2:1/24',), ('::4:3:2:2/24',), ('::',), ('::1',), ('::1:ffff:ffff:ffff:ffff',), ('::2:ffff:ffff:ffff:ffff',), ('10:23::f1/64',), ('10:23::f1/65',), ('10:23::ffff',), ('127::1',), ('127::2',), ('8000::/1',), ('ffff:83e7:f118:57dc:6093:6d92:689d:58cf/70',), ('ffff:84b0:4775:536e:c3ed:7116:a6d6:34f0/44',), ('ffff:8566:f84:5867:47f1:7867:d2ba:8a1a/69',), ('ffff:8883:f028:7d2:4d68:d510:7d6b:ac43/73',), ('ffff:8ae8:7c14:65b3:196:8e4a:89ae:fb30/89',), ('ffff:8dd0:646:694c:7c16:7e35:6a26:171/104',), ('ffff:8eef:cbf:700:eda3:ae32:f4b4:318b/121',), ('ffff:90e7:e744:664:a93:8efe:1f25:7663/122',), ('ffff:9597:c69c:8b24:57a:8639:ec78:6026/111',), ('ffff:9e86:79ea:f16e:df31:8e4d:7783:532e/88',), ('ffff:a0c7:82d3:24de:f762:6e1f:316d:3fb2/23',), ('ffff:ffff:ffff:ffff:4:3:2:0/24',), ('ffff:ffff:ffff:ffff:4:3:2:1/24',), ('ffff:ffff:ffff:ffff:4:3:2:2/24',), ('ffff:ffff:ffff:fffd::',), ('ffff:ffff:ffff:fffe::',), ('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('1234', 'cidr')",inet.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1234', 'cidr')",inet.sql,SAME,,"[('invalid input syntax for type cidr: ""1234""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('192.168.198.200/24', 'cidr')",inet.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('192.168.198.200/24', 'cidr')",inet.sql,SAME,,"[('invalid cidr value: ""192.168.198.200/24""', 'Value has bits set to right of mask.', None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('1234', 'inet')",inet.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1234', 'inet')",inet.sql,SAME,,"[('invalid input syntax for type inet: ""1234""', None, None, '22P02')]"
postgresql,postgresql,create function infinite_recurse() returns int as 'select infinite_recurse()' language sql,infinite_recurse.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,"[('a', 'aaa'), ('a', 'aaaa'), ('a', 'aaaaa'), ('a', 'aaaaaa'), ('a', 'aaaaaaa'), ('a', 'aaaaaaaa'), ('b', 'bbb'), ('b', 'bbbb'), ('b', 'bbbbb'), ('b', 'bbbbbb'), ('b', 'bbbbbbb'), ('b', 'bbbbbbbb'), ('c', 'ccc'), ('c', 'cccc'), ('c', 'ccccc'), ('c', 'cccccc'), ('c', 'ccccccc'), ('c', 'cccccccc'), ('d', 'ddd'), ('d', 'dddd'), ('d', 'ddddd'), ('d', 'dddddd'), ('d', 'ddddddd'), ('d', 'dddddddd')]"
postgresql,postgresql,"SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,"[('b', 'bbb', None), ('b', 'bbbb', None), ('b', 'bbbbb', None), ('b', 'bbbbbb', None), ('b', 'bbbbbbb', None), ('b', 'bbbbbbbb', None), ('d', 'ddd', None), ('d', 'dddd', None), ('d', 'ddddd', None), ('d', 'dddddd', None), ('d', 'ddddddd', None), ('d', 'dddddddd', None)]"
postgresql,postgresql,"SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,"[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None), ('d', 'ddd', None), ('d', 'dddd', None), ('d', 'ddddd', None), ('d', 'dddddd', None), ('d', 'ddddddd', None), ('d', 'dddddddd', None)]"
postgresql,postgresql,"SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,"[('d', 'ddd', None, None, None), ('d', 'dddd', None, None, None), ('d', 'ddddd', None, None, None), ('d', 'dddddd', None, None, None), ('d', 'ddddddd', None, None, None), ('d', 'dddddddd', None, None, None)]"
postgresql,postgresql,"SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,"[('a', 'aaa'), ('a', 'aaaa'), ('a', 'aaaaa'), ('a', 'aaaaaa'), ('a', 'aaaaaaa'), ('a', 'aaaaaaaa')]"
postgresql,postgresql,"SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,"[('b', 'bbb', None), ('b', 'bbbb', None), ('b', 'bbbbb', None), ('b', 'bbbbbb', None), ('b', 'bbbbbbb', None), ('b', 'bbbbbbbb', None)]"
postgresql,postgresql,"SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,"[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None)]"
postgresql,postgresql,"SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,"[('d', 'ddd', None, None, None), ('d', 'dddd', None, None, None), ('d', 'ddddd', None, None, None), ('d', 'dddddd', None, None, None), ('d', 'ddddddd', None, None, None), ('d', 'dddddddd', None, None, None)]"
postgresql,postgresql,UPDATE a SET aa='zzzz' WHERE aa='aaaa',inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE ONLY a SET aa='zzzzz' WHERE aa='aaaaa',inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE b SET aa='zzz' WHERE aa='aaa',inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE ONLY b SET aa='zzz' WHERE aa='aaa',inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE a SET aa='zzzzzz' WHERE aa LIKE 'aaa%',inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,"[('a', 'zzzz'), ('a', 'zzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('b', 'bbb'), ('b', 'bbbb'), ('b', 'bbbbb'), ('b', 'bbbbbb'), ('b', 'bbbbbbb'), ('b', 'bbbbbbbb'), ('c', 'ccc'), ('c', 'cccc'), ('c', 'ccccc'), ('c', 'cccccc'), ('c', 'ccccccc'), ('c', 'cccccccc'), ('d', 'ddd'), ('d', 'dddd'), ('d', 'ddddd'), ('d', 'dddddd'), ('d', 'ddddddd'), ('d', 'dddddddd')]"
postgresql,postgresql,"SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,"[('b', 'bbb', None), ('b', 'bbbb', None), ('b', 'bbbbb', None), ('b', 'bbbbbb', None), ('b', 'bbbbbbb', None), ('b', 'bbbbbbbb', None), ('d', 'ddd', None), ('d', 'dddd', None), ('d', 'ddddd', None), ('d', 'dddddd', None), ('d', 'ddddddd', None), ('d', 'dddddddd', None)]"
postgresql,postgresql,"SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,"[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None), ('d', 'ddd', None), ('d', 'dddd', None), ('d', 'ddddd', None), ('d', 'dddddd', None), ('d', 'ddddddd', None), ('d', 'dddddddd', None)]"
postgresql,postgresql,"SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,"[('d', 'ddd', None, None, None), ('d', 'dddd', None, None, None), ('d', 'ddddd', None, None, None), ('d', 'dddddd', None, None, None), ('d', 'ddddddd', None, None, None), ('d', 'dddddddd', None, None, None)]"
postgresql,postgresql,"SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,"[('a', 'zzzz'), ('a', 'zzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz')]"
postgresql,postgresql,"SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,"[('b', 'bbb', None), ('b', 'bbbb', None), ('b', 'bbbbb', None), ('b', 'bbbbbb', None), ('b', 'bbbbbbb', None), ('b', 'bbbbbbbb', None)]"
postgresql,postgresql,"SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,"[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None)]"
postgresql,postgresql,"SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,"[('d', 'ddd', None, None, None), ('d', 'dddd', None, None, None), ('d', 'ddddd', None, None, None), ('d', 'dddddd', None, None, None), ('d', 'ddddddd', None, None, None), ('d', 'dddddddd', None, None, None)]"
postgresql,postgresql,UPDATE b SET aa='new',inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,"[('a', 'zzzz'), ('a', 'zzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('c', 'ccc'), ('c', 'cccc'), ('c', 'ccccc'), ('c', 'cccccc'), ('c', 'ccccccc'), ('c', 'cccccccc'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new')]"
postgresql,postgresql,"SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,"[('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None)]"
postgresql,postgresql,"SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,"[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None)]"
postgresql,postgresql,"SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,"[('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None)]"
postgresql,postgresql,"SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,"[('a', 'zzzz'), ('a', 'zzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz'), ('a', 'zzzzzz')]"
postgresql,postgresql,"SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,"[('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None)]"
postgresql,postgresql,"SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,"[('c', 'ccc', None), ('c', 'cccc', None), ('c', 'ccccc', None), ('c', 'cccccc', None), ('c', 'ccccccc', None), ('c', 'cccccccc', None)]"
postgresql,postgresql,"SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,"[('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None)]"
postgresql,postgresql,UPDATE a SET aa='new',inherit.sql,SAME,,[]
postgresql,postgresql,DELETE FROM ONLY c WHERE aa='new',inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,"[('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('b', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new'), ('d', 'new')]"
postgresql,postgresql,"SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,"[('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None)]"
postgresql,postgresql,"SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,"[('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None), ('d', 'new', None)]"
postgresql,postgresql,"SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,"[('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None)]"
postgresql,postgresql,"SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,"[('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new'), ('a', 'new')]"
postgresql,postgresql,"SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,"[('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None), ('b', 'new', None)]"
postgresql,postgresql,"SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,"[('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None), ('d', 'new', None, None, None)]"
postgresql,postgresql,DELETE FROM a,inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, a.* FROM a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, b.* FROM b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, c.* FROM c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, d.* FROM d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, a.* FROM ONLY a, pg_class where a.tableoid = pg_class.oid",inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, b.* FROM ONLY b, pg_class where b.tableoid = pg_class.oid",inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, c.* FROM ONLY c, pg_class where c.tableoid = pg_class.oid",inherit.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, d.* FROM ONLY d, pg_class where d.tableoid = pg_class.oid",inherit.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE z (b TEXT, PRIMARY KEY(aa, b)) inherits (a)",inherit.sql,SAME,,[]
postgresql,postgresql,"create index on some_tab_child(f1, f2)",inherit.sql,SAME,,[]
postgresql,postgresql,create function some_tab_stmt_trig_func() returns trigger as $$begin raise notice 'updating some_tab'; return NULL; end;$$ language plpgsql,inherit.sql,SAME,,[]
postgresql,postgresql,create trigger some_tab_stmt_trig   before update on some_tab execute function some_tab_stmt_trig_func(),inherit.sql,SAME,,[]
postgresql,postgresql,explain (costs off) update some_tab set f3 = 11 where f1 = 12 and f2 = 13,inherit.sql,SAME,,"[('Update on some_tab',), ('  Update on some_tab_child some_tab_1',), ('  ->  Result',), ('        ->  Index Scan using some_tab_child_f1_f2_idx on some_tab_child some_tab_1',), ('              Index Cond: ((f1 = 12) AND (f2 = 13))',)]"
postgresql,postgresql,update some_tab set f3 = 11 where f1 = 12 and f2 = 13,inherit.sql,SAME,,[]
postgresql,postgresql,drop function some_tab_stmt_trig_func(),inherit.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) update some_tab set a = a + 1 where false",inherit.sql,SAME,,"[('Update on public.some_tab',), ('  ->  Result',), ('        Output: (some_tab.a + 1), NULL::oid, NULL::tid',), ('        One-Time Filter: false',)]"
postgresql,postgresql,update some_tab set a = a + 1 where false,inherit.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) update some_tab set a = a + 1 where false returning b, a",inherit.sql,SAME,,"[('Update on public.some_tab',), ('  Output: some_tab.b, some_tab.a',), ('  ->  Result',), ('        Output: (some_tab.a + 1), NULL::oid, NULL::tid',), ('        One-Time Filter: false',)]"
postgresql,postgresql,"update some_tab set a = a + 1 where false returning b, a",inherit.sql,SAME,,[]
postgresql,postgresql,table some_tab,inherit.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,"create temp table foo(f1 int, f2 int)",inherit.sql,SAME,,[]
postgresql,postgresql,create temp table foo2(f3 int) inherits (foo),inherit.sql,SAME,,[]
postgresql,postgresql,"create temp table bar(f1 int, f2 int)",inherit.sql,SAME,,[]
postgresql,postgresql,create temp table bar2(f3 int) inherits (bar),inherit.sql,SAME,,[]
postgresql,postgresql,update bar set f2 = f2 + 100 where f1 in (select f1 from foo),inherit.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass::text as relname, bar.* from bar order by 1,2",inherit.sql,SAME,,"[('bar', 1, 101), ('bar', 2, 102), ('bar', 3, 103), ('bar', 4, 4), ('bar2', 1, 101), ('bar2', 2, 102), ('bar2', 3, 103), ('bar2', 4, 4)]"
postgresql,postgresql,update bar set f2 = f2 + 100 from   ( select f1 from foo union all select f1+3 from foo ) ss where bar.f1 = ss.f1,inherit.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass::text as relname, bar.* from bar order by 1,2",inherit.sql,SAME,,"[('bar', 1, 201), ('bar', 2, 202), ('bar', 3, 203), ('bar', 4, 104), ('bar2', 1, 201), ('bar2', 2, 202), ('bar2', 3, 203), ('bar2', 4, 104)]"
postgresql,postgresql,update parted_tab set b = 'b' from   (select a from some_tab union all select a+1 from some_tab) ss (a) where parted_tab.a = ss.a,inherit.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass::text as relname, parted_tab.* from parted_tab order by 1,2",inherit.sql,SAME,,"[('parted_tab_part1', 1, 'b'), ('parted_tab_part2', 2, 'b'), ('parted_tab_part3', 3, 'a')]"
postgresql,postgresql,truncate parted_tab,inherit.sql,SAME,,[]
postgresql,postgresql,update parted_tab set b = 'b' from   (select 0 from parted_tab union all select 1 from parted_tab) ss (a) where parted_tab.a = ss.a,inherit.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass::text as relname, parted_tab.* from parted_tab order by 1,2",inherit.sql,SAME,,"[('parted_tab_part1', 1, 'b'), ('parted_tab_part2', 2, 'a'), ('parted_tab_part3', 3, 'a')]"
postgresql,postgresql,explain update parted_tab set a = 2 where false,inherit.sql,SAME,,"[('Update on parted_tab  (cost=0.00..0.00 rows=0 width=0)',), ('  ->  Result  (cost=0.00..0.00 rows=0 width=10)',), ('        One-Time Filter: false',)]"
postgresql,postgresql,update mlparted_tab mlp set c = 'xxx' from   (select a from some_tab union all select a+1 from some_tab) ss (a) where (mlp.a = ss.a and mlp.b = 'b') or mlp.a = 3,inherit.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass::text as relname, mlparted_tab.* from mlparted_tab order by 1,2",inherit.sql,SAME,,"[('mlparted_tab_part1', 1, 'a', None), ('mlparted_tab_part2a', 2, 'a', None), ('mlparted_tab_part2b', 2, 'b', 'xxx'), ('mlparted_tab_part3', 3, 'a', 'xxx')]"
postgresql,postgresql,alter table a alter column aa type integer using bit_length(aa),inherit.sql,SAME,,[]
postgresql,postgresql,select * from d,inherit.sql,SAME,,"[(32, 'one', 'two', 'three')]"
postgresql,postgresql,"create temp table parent1(f1 int, f2 int)",inherit.sql,SAME,,[]
postgresql,postgresql,"create temp table parent2(f1 int, f3 bigint)",inherit.sql,SAME,,[]
postgresql,postgresql,"create temp table childtab(f4 int) inherits(parent1, parent2)",inherit.sql,SAME,,[]
postgresql,postgresql,alter table parent1 alter column f2 type bigint,inherit.sql,SAME,,[]
postgresql,postgresql,alter table p1 add constraint p1chk check (ff1 > 0) no inherit,inherit.sql,SAME,,[]
postgresql,postgresql,alter table p1 add constraint p2chk check (ff1 > 10),inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pgc.connoinherit from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname = 'p1' order by 1,2",inherit.sql,SAME,,"[('p1', 'p1chk', 'c', True, 0, True), ('p1', 'p2chk', 'c', True, 0, False)]"
postgresql,postgresql,select derived::base from derived,inherit.sql,SAME,,"[('(0)',)]"
postgresql,postgresql,select NULL::derived::base,inherit.sql,SAME,,"[(None,)]"
postgresql,postgresql,"explain (verbose on, costs off) select row(i, b)::more_derived::derived::base from more_derived",inherit.sql,SAME,,"[('Seq Scan on public.more_derived',), ('  Output: (ROW(i, b)::more_derived)::base',)]"
postgresql,postgresql,"explain (verbose on, costs off) select (1, 2)::more_derived::derived::base",inherit.sql,SAME,,"[('Result',), (""  Output: '(1)'::base"",)]"
postgresql,postgresql,create function p2text(p2) returns text as 'select $1.f1' language sql,inherit.sql,SAME,,[]
postgresql,postgresql,select p2text(c1.*) from c1,inherit.sql,SAME,,"[('hi',)]"
postgresql,postgresql,drop function p2text(p2),inherit.sql,SAME,,[]
postgresql,postgresql,alter table ac add constraint ac_check check (aa is not null),inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2",inherit.sql,SAME,,"[('ac', 'ac_check', 'c', True, 0, '(aa IS NOT NULL)'), ('bc', 'ac_check', 'c', False, 1, '(aa IS NOT NULL)')]"
postgresql,postgresql,alter table ac drop constraint ac_check,inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2",inherit.sql,SAME,,[]
postgresql,postgresql,alter table ac add check (aa is not null),inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2",inherit.sql,SAME,,"[('ac', 'ac_aa_check', 'c', True, 0, '(aa IS NOT NULL)'), ('bc', 'ac_aa_check', 'c', False, 1, '(aa IS NOT NULL)')]"
postgresql,postgresql,alter table ac drop constraint ac_aa_check,inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2",inherit.sql,SAME,,[]
postgresql,postgresql,alter table ac add constraint ac_check check (aa is not null),inherit.sql,SAME,,[]
postgresql,postgresql,alter table bc no inherit ac,inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2",inherit.sql,SAME,,"[('ac', 'ac_check', 'c', True, 0, '(aa IS NOT NULL)'), ('bc', 'ac_check', 'c', True, 0, '(aa IS NOT NULL)')]"
postgresql,postgresql,alter table bc drop constraint ac_check,inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2",inherit.sql,SAME,,"[('ac', 'ac_check', 'c', True, 0, '(aa IS NOT NULL)')]"
postgresql,postgresql,alter table ac drop constraint ac_check,inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2",inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc') order by 1,2",inherit.sql,SAME,,"[('ac', 'check_a', 'c', True, 0, '(a <> 0)'), ('bc', 'check_a', 'c', True, 1, '(a <> 0)'), ('bc', 'check_b', 'c', True, 0, '(b <> 0)')]"
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc', 'cc') order by 1,2",inherit.sql,SAME,,"[('ac', 'check_a', 'c', True, 0, '(a <> 0)'), ('bc', 'check_b', 'c', True, 0, '(b <> 0)'), ('cc', 'check_a', 'c', False, 1, '(a <> 0)'), ('cc', 'check_b', 'c', False, 1, '(b <> 0)'), ('cc', 'check_c', 'c', True, 0, '(c <> 0)')]"
postgresql,postgresql,alter table cc no inherit bc,inherit.sql,SAME,,[]
postgresql,postgresql,"select pc.relname, pgc.conname, pgc.contype, pgc.conislocal, pgc.coninhcount, pg_get_expr(pgc.conbin, pc.oid) as consrc from pg_class as pc inner join pg_constraint as pgc on (pgc.conrelid = pc.oid) where pc.relname in ('ac', 'bc', 'cc') order by 1,2",inherit.sql,SAME,,"[('ac', 'check_a', 'c', True, 0, '(a <> 0)'), ('bc', 'check_b', 'c', True, 0, '(b <> 0)'), ('cc', 'check_a', 'c', False, 1, '(a <> 0)'), ('cc', 'check_b', 'c', True, 0, '(b <> 0)'), ('cc', 'check_c', 'c', True, 0, '(c <> 0)')]"
postgresql,postgresql,delete from c1,inherit.sql,SAME,,[]
postgresql,postgresql,alter table p2 add check (f2>0),inherit.sql,SAME,,[]
postgresql,postgresql,alter table pp1 add column a1 int check (a1 > 0),inherit.sql,SAME,,[]
postgresql,postgresql,alter table pp1 add column a2 int check (a2 > 0),inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE inht1 RENAME a TO aa,inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE inhts RENAME d TO dd,inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE inhta ADD COLUMN i int,inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE inht1 RENAME aa TO aaa,inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE inht1 RENAME aaa TO aaaa,inherit.sql,SAME,,[]
postgresql,postgresql,"WITH RECURSIVE r AS (   SELECT 'inht1'::regclass AS inhrelid UNION ALL   SELECT c.inhrelid FROM pg_inherits c, r WHERE r.inhrelid = c.inhparent ) SELECT a.attrelid::regclass, a.attname, a.attinhcount, e.expected   FROM (SELECT inhrelid, count(*) AS expected FROM pg_inherits         WHERE inhparent IN (SELECT inhrelid FROM r) GROUP BY inhrelid) e   JOIN pg_attribute a ON e.inhrelid = a.attrelid WHERE NOT attislocal   ORDER BY a.attrelid::regclass::name, a.attnum",inherit.sql,SAME,,"[('inht2', 'aaaa', 1, 1), ('inht2', 'b', 1, 1), ('inht3', 'aaaa', 1, 1), ('inht3', 'b', 1, 1), ('inht4', 'aaaa', 2, 2), ('inht4', 'b', 2, 2), ('inht4', 'x', 1, 2), ('inht4', 'y', 1, 2), ('inhts', 'aaaa', 1, 1), ('inhts', 'b', 2, 1), ('inhts', 'x', 1, 1), ('inhts', 'c', 1, 1)]"
postgresql,postgresql,ALTER TABLE ONLY test_constraints DROP CONSTRAINT test_constraints_val1_val2_key,inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_ex_constraints DROP CONSTRAINT test_ex_constraints_c_excl,inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_foreign_constraints DROP CONSTRAINT test_foreign_constraints_id1_fkey,inherit.sql,SAME,,[]
postgresql,postgresql,delete from inh_fk_1 where a = 1,inherit.sql,SAME,,[]
postgresql,postgresql,select * from inh_fk_1 order by 1,inherit.sql,SAME,,"[(2,), (3,)]"
postgresql,postgresql,"select * from inh_fk_2 order by 1, 2",inherit.sql,SAME,,"[(22, 2), (33, 3), (111, 1), (222, 2)]"
postgresql,postgresql,alter table p1 add constraint inh_check_constraint1 check (f1 > 0),inherit.sql,SAME,,[]
postgresql,postgresql,alter table p1_c1 add constraint inh_check_constraint1 check (f1 > 0),inherit.sql,SAME,,[]
postgresql,postgresql,alter table p1_c1 add constraint inh_check_constraint2 check (f1 < 10),inherit.sql,SAME,,[]
postgresql,postgresql,alter table p1 add constraint inh_check_constraint2 check (f1 < 10),inherit.sql,SAME,,[]
postgresql,postgresql,"select conrelid::regclass::text as relname, conname, conislocal, coninhcount from pg_constraint where conname like 'inh\_check\_constraint%' order by 1, 2",inherit.sql,SAME,,"[('p1', 'inh_check_constraint1', True, 0), ('p1', 'inh_check_constraint2', True, 0), ('p1_c1', 'inh_check_constraint1', True, 1), ('p1_c1', 'inh_check_constraint2', True, 1)]"
postgresql,postgresql,alter table p1 drop constraint f1_pos,inherit.sql,SAME,,[]
postgresql,postgresql,alter table p2 drop constraint f1_pos,inherit.sql,SAME,,[]
postgresql,postgresql,alter table p1 drop constraint f1_pos,inherit.sql,SAME,,[]
postgresql,postgresql,alter table p1 drop constraint f1_pos,inherit.sql,SAME,,[]
postgresql,postgresql,alter table p1 drop constraint f1_pos,inherit.sql,SAME,,[]
postgresql,postgresql,alter table p1_c2 drop constraint f1_pos,inherit.sql,SAME,,[]
postgresql,postgresql,alter table invalid_check_con_child add constraint inh_check_constraint check(f1 > 0) not valid,inherit.sql,SAME,,[]
postgresql,postgresql,alter table invalid_check_con_child drop constraint inh_check_constraint,inherit.sql,SAME,,[]
postgresql,postgresql,alter table invalid_check_con_child add constraint inh_check_constraint check(f1 > 0),inherit.sql,SAME,,[]
postgresql,postgresql,alter table invalid_check_con add constraint inh_check_constraint check(f1 > 0) not valid,inherit.sql,SAME,,[]
postgresql,postgresql,"select conrelid::regclass::text as relname, conname,        convalidated, conislocal, coninhcount, connoinherit from pg_constraint where conname like 'inh\_check\_constraint%' order by 1, 2",inherit.sql,SAME,,"[('invalid_check_con', 'inh_check_constraint', False, True, 0, False), ('invalid_check_con_child', 'inh_check_constraint', True, True, 1, False)]"
postgresql,postgresql,"create temp table patest0 (id, x) as   select x, x from generate_series(0,1000) x",inherit.sql,SAME,,[]
postgresql,postgresql,create temp table patest1() inherits (patest0),inherit.sql,SAME,,[]
postgresql,postgresql,create temp table patest2() inherits (patest0),inherit.sql,SAME,,[]
postgresql,postgresql,create index patest0i on patest0(id),inherit.sql,SAME,,[]
postgresql,postgresql,create index patest1i on patest1(id),inherit.sql,SAME,,[]
postgresql,postgresql,create index patest2i on patest2(id),inherit.sql,SAME,,[]
postgresql,postgresql,analyze patest0,inherit.sql,SAME,,[]
postgresql,postgresql,analyze patest1,inherit.sql,SAME,,[]
postgresql,postgresql,analyze patest2,inherit.sql,SAME,,[]
postgresql,postgresql,drop index patest2i,inherit.sql,SAME,,[]
postgresql,postgresql,create index matest0i on matest0 ((1-id)),inherit.sql,SAME,,[]
postgresql,postgresql,create index matest1i on matest1 ((1-id)),inherit.sql,SAME,,[]
postgresql,postgresql,create index matest3i on matest3 ((1-id)),inherit.sql,SAME,,[]
postgresql,postgresql,set enable_indexscan = off,inherit.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from matest0 order by 1-id",inherit.sql,SAME,,"[('Sort',), ('  Output: matest0.id, matest0.name, ((1 - matest0.id))',), ('  Sort Key: ((1 - matest0.id))',), ('  ->  Result',), ('        Output: matest0.id, matest0.name, (1 - matest0.id)',), ('        ->  Append',), ('              ->  Seq Scan on public.matest0 matest0_1',), ('                    Output: matest0_1.id, matest0_1.name',), ('              ->  Seq Scan on public.matest1 matest0_2',), ('                    Output: matest0_2.id, matest0_2.name',), ('              ->  Seq Scan on public.matest2 matest0_3',), ('                    Output: matest0_3.id, matest0_3.name',), ('              ->  Seq Scan on public.matest3 matest0_4',), ('                    Output: matest0_4.id, matest0_4.name',)]"
postgresql,postgresql,select * from matest0 order by 1-id,inherit.sql,SAME,,"[(6, 'Test 6'), (5, 'Test 5'), (4, 'Test 4'), (3, 'Test 3'), (2, 'Test 2'), (1, 'Test 1')]"
postgresql,postgresql,"explain (verbose, costs off) select min(1-id) from matest0",inherit.sql,SAME,,"[('Aggregate',), ('  Output: min((1 - matest0.id))',), ('  ->  Append',), ('        ->  Seq Scan on public.matest0 matest0_1',), ('              Output: matest0_1.id',), ('        ->  Seq Scan on public.matest1 matest0_2',), ('              Output: matest0_2.id',), ('        ->  Seq Scan on public.matest2 matest0_3',), ('              Output: matest0_3.id',), ('        ->  Seq Scan on public.matest3 matest0_4',), ('              Output: matest0_4.id',)]"
postgresql,postgresql,select min(1-id) from matest0,inherit.sql,SAME,,"[(-5,)]"
postgresql,postgresql,reset enable_indexscan,inherit.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan = off,inherit.sql,SAME,,[]
postgresql,postgresql,set enable_parallel_append = off,inherit.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from matest0 order by 1-id",inherit.sql,SAME,,"[('Merge Append',), ('  Sort Key: ((1 - matest0.id))',), ('  ->  Index Scan using matest0i on public.matest0 matest0_1',), ('        Output: matest0_1.id, matest0_1.name, (1 - matest0_1.id)',), ('  ->  Index Scan using matest1i on public.matest1 matest0_2',), ('        Output: matest0_2.id, matest0_2.name, (1 - matest0_2.id)',), ('  ->  Sort',), ('        Output: matest0_3.id, matest0_3.name, ((1 - matest0_3.id))',), ('        Sort Key: ((1 - matest0_3.id))',), ('        ->  Seq Scan on public.matest2 matest0_3',), ('              Output: matest0_3.id, matest0_3.name, (1 - matest0_3.id)',), ('  ->  Index Scan using matest3i on public.matest3 matest0_4',), ('        Output: matest0_4.id, matest0_4.name, (1 - matest0_4.id)',)]"
postgresql,postgresql,select * from matest0 order by 1-id,inherit.sql,SAME,,"[(6, 'Test 6'), (5, 'Test 5'), (4, 'Test 4'), (3, 'Test 3'), (2, 'Test 2'), (1, 'Test 1')]"
postgresql,postgresql,"explain (verbose, costs off) select min(1-id) from matest0",inherit.sql,SAME,,"[('Result',), ('  Output: $0',), ('  InitPlan 1 (returns $0)',), ('    ->  Limit',), ('          Output: ((1 - matest0.id))',), ('          ->  Result',), ('                Output: ((1 - matest0.id))',), ('                ->  Merge Append',), ('                      Sort Key: ((1 - matest0.id))',), ('                      ->  Index Scan using matest0i on public.matest0 matest0_1',), ('                            Output: matest0_1.id, (1 - matest0_1.id)',), ('                            Index Cond: ((1 - matest0_1.id) IS NOT NULL)',), ('                      ->  Index Scan using matest1i on public.matest1 matest0_2',), ('                            Output: matest0_2.id, (1 - matest0_2.id)',), ('                            Index Cond: ((1 - matest0_2.id) IS NOT NULL)',), ('                      ->  Sort',), ('                            Output: matest0_3.id, ((1 - matest0_3.id))',), ('                            Sort Key: ((1 - matest0_3.id))',), ('                            ->  Bitmap Heap Scan on public.matest2 matest0_3',), ('                                  Output: matest0_3.id, (1 - matest0_3.id)',), ('                                  Filter: ((1 - matest0_3.id) IS NOT NULL)',), ('                                  ->  Bitmap Index Scan on matest2_pkey',), ('                      ->  Index Scan using matest3i on public.matest3 matest0_4',), ('                            Output: matest0_4.id, (1 - matest0_4.id)',), ('                            Index Cond: ((1 - matest0_4.id) IS NOT NULL)',)]"
postgresql,postgresql,select min(1-id) from matest0,inherit.sql,SAME,,"[(-5,)]"
postgresql,postgresql,reset enable_seqscan,inherit.sql,SAME,,[]
postgresql,postgresql,reset enable_parallel_append,inherit.sql,SAME,,[]
postgresql,postgresql,"create index matest0i on matest0 (b, c)",inherit.sql,SAME,,[]
postgresql,postgresql,"create index matest1i on matest1 (b, c)",inherit.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop = off,inherit.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select t1.* from matest0 t1, matest0 t2 where t1.b = t2.b and t2.c = t2.d order by t1.b limit 10",inherit.sql,SAME,,"[('Limit',), ('  ->  Merge Join',), ('        Merge Cond: (t1.b = t2.b)',), ('        ->  Merge Append',), ('              Sort Key: t1.b',), ('              ->  Index Scan using matest0i on matest0 t1_1',), ('              ->  Index Scan using matest1i on matest1 t1_2',), ('        ->  Materialize',), ('              ->  Merge Append',), ('                    Sort Key: t2.b',), ('                    ->  Index Scan using matest0i on matest0 t2_1',), ('                          Filter: (c = d)',), ('                    ->  Index Scan using matest1i on matest1 t2_2',), ('                          Filter: (c = d)',)]"
postgresql,postgresql,reset enable_nestloop,inherit.sql,SAME,,[]
postgresql,postgresql,analyze matest0,inherit.sql,SAME,,[]
postgresql,postgresql,analyze matest1,inherit.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from matest0 where a < 100 order by a,inherit.sql,SAME,,"[('Sort',), ('  Sort Key: matest0.a',), ('  ->  Append',), ('        ->  Seq Scan on matest0 matest0_1',), ('              Filter: (a < 100)',), ('        ->  Seq Scan on matest1 matest0_2',), ('              Filter: (a < 100)',)]"
postgresql,postgresql,set enable_seqscan = off,inherit.sql,SAME,,[]
postgresql,postgresql,set enable_indexscan = on,inherit.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan = off,inherit.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) SELECT     ARRAY(SELECT f.i FROM (         (SELECT d + g.i FROM generate_series(4, 30, 3) d ORDER BY 1)         UNION ALL         (SELECT d + g.i FROM generate_series(0, 30, 5) d ORDER BY 1)     ) f(i)     ORDER BY f.i LIMIT 10) FROM generate_series(1, 3) g(i)",inherit.sql,SAME,,"[('Function Scan on generate_series g',), ('  SubPlan 1',), ('    ->  Limit',), ('          ->  Merge Append',), ('                Sort Key: ((d.d + g.i))',), ('                ->  Sort',), ('                      Sort Key: ((d.d + g.i))',), ('                      ->  Function Scan on generate_series d',), ('                ->  Sort',), ('                      Sort Key: ((d_1.d + g.i))',), ('                      ->  Function Scan on generate_series d_1',)]"
postgresql,postgresql,"SELECT     ARRAY(SELECT f.i FROM (         (SELECT d + g.i FROM generate_series(4, 30, 3) d ORDER BY 1)         UNION ALL         (SELECT d + g.i FROM generate_series(0, 30, 5) d ORDER BY 1)     ) f(i)     ORDER BY f.i LIMIT 10) FROM generate_series(1, 3) g(i)",inherit.sql,SAME,,"[([1, 5, 6, 8, 11, 11, 14, 16, 17, 20],), ([2, 6, 7, 9, 12, 12, 15, 17, 18, 21],), ([3, 7, 8, 10, 13, 13, 16, 18, 19, 22],)]"
postgresql,postgresql,reset enable_seqscan,inherit.sql,SAME,,[]
postgresql,postgresql,reset enable_indexscan,inherit.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,inherit.sql,SAME,,[]
postgresql,postgresql,alter table inhcld inherit inhpar,inherit.sql,SAME,,[]
postgresql,postgresql,select * from inhpar,inherit.sql,SAME,,"[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')]"
postgresql,postgresql,alter table inhpar attach partition inhcld1 for values from (1) to (5),inherit.sql,SAME,,[]
postgresql,postgresql,alter table inhpar attach partition inhcld2 for values from (5) to (100),inherit.sql,SAME,,[]
postgresql,postgresql,select * from inhpar,inherit.sql,SAME,,"[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')]"
postgresql,postgresql,select * from inhpar order by f1,inherit.sql,SAME,,"[(1, '1'), (2, '2'), (3, '3+'), (4, '4'), (5, '5'), (6, '6'), (7, '7+'), (8, '8'), (9, '9'), (10, '10')]"
postgresql,postgresql,select * from cnullparent,inherit.sql,SAME,,"[(1,), (2,), (None,)]"
postgresql,postgresql,select * from cnullparent where f1 = 2,inherit.sql,SAME,,"[(2,)]"
postgresql,postgresql,alter table cc1 add column a2 int constraint nn not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table pp1 alter column f1 set not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table cc2 alter column a2 drop not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table cc1 alter column a2 drop not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table cc2 alter column f1 drop not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table cc1 alter column f1 drop not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table pp1 alter column f1 drop not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table pp1 add primary key (f1),inherit.sql,SAME,,[]
postgresql,postgresql,"select conrelid::regclass, conname, contype, conkey,  coninhcount, conislocal, connoinherit  from pg_constraint where contype in ('n','p') and  conrelid::regclass::text in ('inh_child', 'inh_parent1', 'inh_parent2')  order by 1, 2",inherit.sql,SAME,,"[('inh_parent1', 'inh_parent1_pkey', 'p', [1, 2], 0, True, True), ('inh_parent2', 'inh_parent2_pkey', 'p', [1, 3], 0, True, True)]"
postgresql,postgresql,"select conrelid::regclass, conname, contype, conkey,  (select attname from pg_attribute where attrelid = conrelid and attnum = conkey[1]),  coninhcount, conislocal, connoinherit  from pg_constraint where contype = 'n' and  conrelid::regclass::text like 'inh\_nn\_%'  order by 2, 1",inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_child1 inherit inh_parent,inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_child2 alter column f1 set not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_child2 inherit inh_child1,inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_parent alter column f1 set not null,inherit.sql,SAME,,[]
postgresql,postgresql,"select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid in ('inh_parent'::regclass, 'inh_child1'::regclass, 'inh_child2'::regclass)  order by 2, 1",inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_child1 no inherit inh_parent,inherit.sql,SAME,,[]
postgresql,postgresql,"select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid::regclass::text in ('inh_parent', 'inh_child1', 'inh_child2', 'inh_child3')  order by 2, 1",inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_child inherit inh_parent,inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_child alter a set not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_parent add constraint inh_parent_excl exclude ((1) with =),inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_parent add constraint inh_parent_uq unique (a),inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_parent add constraint inh_parent_fk foreign key (a) references inh_parent (a),inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_child3 inherit inh_parent,inherit.sql,SAME,,[]
postgresql,postgresql,"select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint  where conrelid::regclass::text in ('inh_parent', 'inh_child', 'inh_child2', 'inh_child3')  order by 2, 1",inherit.sql,SAME,,"[('inh_child', 'inh_child_pkey', 'p', 0, True), ('inh_parent', 'inh_parent_excl', 'x', 0, True), ('inh_parent', 'inh_parent_fk', 'f', 0, True), ('inh_parent', 'inh_parent_pkey', 'p', 0, True), ('inh_parent', 'inh_parent_uq', 'u', 0, True)]"
postgresql,postgresql,"select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid in ('inh_parent'::regclass, 'inh_child1'::regclass, 'inh_child2'::regclass, 'inh_child3'::regclass)  order by 2, conrelid::regclass::text",inherit.sql,SAME,,[]
postgresql,postgresql,"select conrelid::regclass, conname, contype, coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid in ('inh_parent_1'::regclass, 'inh_parent_2'::regclass, 'inh_child'::regclass)  order by 2, conrelid::regclass::text",inherit.sql,SAME,,[]
postgresql,postgresql,"select conrelid::regclass, contype, conname,   (select attname from pg_attribute where attrelid = conrelid and attnum = conkey[1]),   coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid::regclass in ('inh_p1', 'inh_p2', 'inh_p3', 'inh_p4', 	'inh_multiparent')  order by conrelid::regclass::text, conname",inherit.sql,SAME,,[]
postgresql,postgresql,"select conrelid::regclass, contype, conname,   (select attname from pg_attribute where attrelid = conrelid and attnum = conkey[1]),   coninhcount, conislocal  from pg_constraint where contype = 'n' and  conrelid::regclass in ('inh_p3', 'inh_multiparent', 'inh_multiparent2')  order by conrelid::regclass::text, conname",inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_parent alter a drop not null,inherit.sql,SAME,,[]
postgresql,postgresql,alter table inh_parent alter a drop not null,inherit.sql,SAME,,[]
postgresql,postgresql,reset session authorization,inherit.sql,SAME,,[]
postgresql,postgresql,create temp table inh_temp_parent (a1 int),inherit.sql,SAME,,[]
postgresql,postgresql,create temp table inh_temp_child () inherits (inh_perm_parent),inherit.sql,SAME,,[]
postgresql,postgresql,create temp table inh_temp_child_2 () inherits (inh_temp_parent),inherit.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, a1 from inh_perm_parent",inherit.sql,SAME,,"[('inh_perm_parent', 1), ('inh_temp_child', 3)]"
postgresql,postgresql,"select tableoid::regclass, a1 from inh_temp_parent",inherit.sql,SAME,,"[('inh_temp_parent', 2), ('inh_temp_child_2', 4)]"
postgresql,postgresql,explain (costs off) select * from list_parted,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on part_ab_cd list_parted_1',), ('  ->  Seq Scan on part_ef_gh list_parted_2',), ('  ->  Seq Scan on part_null_xy list_parted_3',)]"
postgresql,postgresql,explain (costs off) select * from list_parted where a is null,inherit.sql,SAME,,"[('Seq Scan on part_null_xy list_parted',), ('  Filter: (a IS NULL)',)]"
postgresql,postgresql,explain (costs off) select * from list_parted where a is not null,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on part_ab_cd list_parted_1',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on part_ef_gh list_parted_2',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on part_null_xy list_parted_3',), ('        Filter: (a IS NOT NULL)',)]"
postgresql,postgresql,"explain (costs off) select * from list_parted where a in ('ab', 'cd', 'ef')",inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on part_ab_cd list_parted_1',), (""        Filter: ((a)::text = ANY ('{ab,cd,ef}'::text[]))"",), ('  ->  Seq Scan on part_ef_gh list_parted_2',), (""        Filter: ((a)::text = ANY ('{ab,cd,ef}'::text[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from list_parted where a = 'ab' or a in (null, 'cd')",inherit.sql,SAME,,"[('Seq Scan on part_ab_cd list_parted',), (""  Filter: (((a)::text = 'ab'::text) OR ((a)::text = ANY ('{NULL,cd}'::text[])))"",)]"
postgresql,postgresql,explain (costs off) select * from list_parted where a = 'ab',inherit.sql,SAME,,"[('Seq Scan on part_ab_cd list_parted',), (""  Filter: ((a)::text = 'ab'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from range_list_parted,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), ('  ->  Seq Scan on part_1_10_cd range_list_parted_2',), ('  ->  Seq Scan on part_10_20_ab range_list_parted_3',), ('  ->  Seq Scan on part_10_20_cd range_list_parted_4',), ('  ->  Seq Scan on part_21_30_ab range_list_parted_5',), ('  ->  Seq Scan on part_21_30_cd range_list_parted_6',), ('  ->  Seq Scan on part_40_inf_ab range_list_parted_7',), ('  ->  Seq Scan on part_40_inf_cd range_list_parted_8',), ('  ->  Seq Scan on part_40_inf_null range_list_parted_9',)]"
postgresql,postgresql,explain (costs off) select * from range_list_parted where a = 5,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), ('        Filter: (a = 5)',), ('  ->  Seq Scan on part_1_10_cd range_list_parted_2',), ('        Filter: (a = 5)',)]"
postgresql,postgresql,explain (costs off) select * from range_list_parted where b = 'ab',inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), (""        Filter: (b = 'ab'::bpchar)"",), ('  ->  Seq Scan on part_10_20_ab range_list_parted_2',), (""        Filter: (b = 'ab'::bpchar)"",), ('  ->  Seq Scan on part_21_30_ab range_list_parted_3',), (""        Filter: (b = 'ab'::bpchar)"",), ('  ->  Seq Scan on part_40_inf_ab range_list_parted_4',), (""        Filter: (b = 'ab'::bpchar)"",)]"
postgresql,postgresql,explain (costs off) select * from range_list_parted where a between 3 and 23 and b in ('ab'),inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), (""        Filter: ((a >= 3) AND (a <= 23) AND (b = 'ab'::bpchar))"",), ('  ->  Seq Scan on part_10_20_ab range_list_parted_2',), (""        Filter: ((a >= 3) AND (a <= 23) AND (b = 'ab'::bpchar))"",), ('  ->  Seq Scan on part_21_30_ab range_list_parted_3',), (""        Filter: ((a >= 3) AND (a <= 23) AND (b = 'ab'::bpchar))"",)]"
postgresql,postgresql,/* Should select no rows because range partition key cannot be null */ explain (costs off) select * from range_list_parted where a is null,inherit.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,/* Should only select rows from the null-accepting partition */ explain (costs off) select * from range_list_parted where b is null,inherit.sql,SAME,,"[('Seq Scan on part_40_inf_null range_list_parted',), ('  Filter: (b IS NULL)',)]"
postgresql,postgresql,explain (costs off) select * from range_list_parted where a is not null and a < 67,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on part_1_10_ab range_list_parted_1',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_1_10_cd range_list_parted_2',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_10_20_ab range_list_parted_3',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_10_20_cd range_list_parted_4',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_21_30_ab range_list_parted_5',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_21_30_cd range_list_parted_6',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_40_inf_ab range_list_parted_7',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_40_inf_cd range_list_parted_8',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',), ('  ->  Seq Scan on part_40_inf_null range_list_parted_9',), ('        Filter: ((a IS NOT NULL) AND (a < 67))',)]"
postgresql,postgresql,explain (costs off) select * from range_list_parted where a >= 30,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on part_40_inf_ab range_list_parted_1',), ('        Filter: (a >= 30)',), ('  ->  Seq Scan on part_40_inf_cd range_list_parted_2',), ('        Filter: (a >= 30)',), ('  ->  Seq Scan on part_40_inf_null range_list_parted_3',), ('        Filter: (a >= 30)',)]"
postgresql,postgresql,explain (costs off) select * from mcrparted where a = 0,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mcrparted0 mcrparted_1',), ('        Filter: (a = 0)',), ('  ->  Seq Scan on mcrparted_def mcrparted_2',), ('        Filter: (a = 0)',)]"
postgresql,postgresql,explain (costs off) select * from mcrparted where a = 10 and abs(b) < 5,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mcrparted1 mcrparted_1',), ('        Filter: ((a = 10) AND (abs(b) < 5))',), ('  ->  Seq Scan on mcrparted_def mcrparted_2',), ('        Filter: ((a = 10) AND (abs(b) < 5))',)]"
postgresql,postgresql,explain (costs off) select * from mcrparted where a = 10 and abs(b) = 5,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mcrparted1 mcrparted_1',), ('        Filter: ((a = 10) AND (abs(b) = 5))',), ('  ->  Seq Scan on mcrparted2 mcrparted_2',), ('        Filter: ((a = 10) AND (abs(b) = 5))',), ('  ->  Seq Scan on mcrparted_def mcrparted_3',), ('        Filter: ((a = 10) AND (abs(b) = 5))',)]"
postgresql,postgresql,explain (costs off) select * from mcrparted where abs(b) = 5,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mcrparted0 mcrparted_1',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted1 mcrparted_2',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted2 mcrparted_3',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted3 mcrparted_4',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted4 mcrparted_5',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted5 mcrparted_6',), ('        Filter: (abs(b) = 5)',), ('  ->  Seq Scan on mcrparted_def mcrparted_7',), ('        Filter: (abs(b) = 5)',)]"
postgresql,postgresql,explain (costs off) select * from mcrparted where a > -1,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mcrparted0 mcrparted_1',), (""        Filter: (a > '-1'::integer)"",), ('  ->  Seq Scan on mcrparted1 mcrparted_2',), (""        Filter: (a > '-1'::integer)"",), ('  ->  Seq Scan on mcrparted2 mcrparted_3',), (""        Filter: (a > '-1'::integer)"",), ('  ->  Seq Scan on mcrparted3 mcrparted_4',), (""        Filter: (a > '-1'::integer)"",), ('  ->  Seq Scan on mcrparted4 mcrparted_5',), (""        Filter: (a > '-1'::integer)"",), ('  ->  Seq Scan on mcrparted5 mcrparted_6',), (""        Filter: (a > '-1'::integer)"",), ('  ->  Seq Scan on mcrparted_def mcrparted_7',), (""        Filter: (a > '-1'::integer)"",)]"
postgresql,postgresql,explain (costs off) select * from mcrparted where a = 20 and abs(b) = 10 and c > 10,inherit.sql,SAME,,"[('Seq Scan on mcrparted4 mcrparted',), ('  Filter: ((c > 10) AND (a = 20) AND (abs(b) = 10))',)]"
postgresql,postgresql,explain (costs off) select * from mcrparted where a = 20 and c > 20,inherit.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mcrparted3 mcrparted_1',), ('        Filter: ((c > 20) AND (a = 20))',), ('  ->  Seq Scan on mcrparted4 mcrparted_2',), ('        Filter: ((c > 20) AND (a = 20))',), ('  ->  Seq Scan on mcrparted5 mcrparted_3',), ('        Filter: ((c > 20) AND (a = 20))',), ('  ->  Seq Scan on mcrparted_def mcrparted_4',), ('        Filter: ((c > 20) AND (a = 20))',)]"
postgresql,postgresql,"create index parted_minmax1i on parted_minmax1 (a, b)",inherit.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select min(a), max(a) from parted_minmax where b = '12345'",inherit.sql,SAME,,"[('Result',), ('  InitPlan 1 (returns $0)',), ('    ->  Limit',), ('          ->  Index Only Scan using parted_minmax1i on parted_minmax1 parted_minmax',), (""                Index Cond: ((a IS NOT NULL) AND (b = '12345'::text))"",), ('  InitPlan 2 (returns $1)',), ('    ->  Limit',), ('          ->  Index Only Scan Backward using parted_minmax1i on parted_minmax1 parted_minmax_1',), (""                Index Cond: ((a IS NOT NULL) AND (b = '12345'::text))"",)]"
postgresql,postgresql,"select min(a), max(a) from parted_minmax where b = '12345'",inherit.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"create index mcrparted_a_abs_c_idx on mcrparted (a, abs(b), c)",inherit.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from mcrparted order by a, abs(b), c",inherit.sql,SAME,,"[('Merge Append',), ('  Sort Key: mcrparted.a, (abs(mcrparted.b)), mcrparted.c',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Index Scan using mcrparted5_a_abs_c_idx on mcrparted5 mcrparted_6',), ('  ->  Index Scan using mcrparted_def_a_abs_c_idx on mcrparted_def mcrparted_7',)]"
postgresql,postgresql,"explain (costs off) select * from mcrparted order by a, abs(b), c",inherit.sql,SAME,,"[('Append',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Index Scan using mcrparted5_a_abs_c_idx on mcrparted5 mcrparted_6',)]"
postgresql,postgresql,"explain (costs off) select * from mcrparted order by a desc, abs(b) desc, c desc",inherit.sql,SAME,,"[('Append',), ('  ->  Index Scan Backward using mcrparted5_a_abs_c_idx on mcrparted5 mcrparted_6',), ('  ->  Index Scan Backward using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Index Scan Backward using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan Backward using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan Backward using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan Backward using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',)]"
postgresql,postgresql,"explain (costs off) select * from mcrparted order by a, abs(b), c",inherit.sql,SAME,,"[('Append',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Merge Append',), ('        Sort Key: mcrparted_7.a, (abs(mcrparted_7.b)), mcrparted_7.c',), ('        ->  Index Scan using mcrparted5a_a_abs_c_idx on mcrparted5a mcrparted_7',), ('        ->  Index Scan using mcrparted5_def_a_abs_c_idx on mcrparted5_def mcrparted_8',)]"
postgresql,postgresql,"explain (costs off) select a, abs(b) from mcrparted order by a, abs(b), c",inherit.sql,SAME,,"[('Append',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('  ->  Index Scan using mcrparted4_a_abs_c_idx on mcrparted4 mcrparted_5',), ('  ->  Index Scan using mcrparted5a_a_abs_c_idx on mcrparted5a mcrparted_6',)]"
postgresql,postgresql,"explain (costs off) select * from mcrparted where a < 20 order by a, abs(b), c",inherit.sql,SAME,,"[('Append',), ('  ->  Index Scan using mcrparted0_a_abs_c_idx on mcrparted0 mcrparted_1',), ('        Index Cond: (a < 20)',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('        Index Cond: (a < 20)',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('        Index Cond: (a < 20)',), ('  ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('        Index Cond: (a < 20)',)]"
postgresql,postgresql,set enable_bitmapscan to off,inherit.sql,SAME,,[]
postgresql,postgresql,set enable_sort to off,inherit.sql,SAME,,[]
postgresql,postgresql,create index on mclparted (a),inherit.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from mclparted order by a,inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',)]"
postgresql,postgresql,explain (costs off) select * from mclparted order by a,inherit.sql,SAME,,"[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), ('  ->  Index Only Scan using mclparted3_5_a_idx on mclparted3_5 mclparted_3',), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_4',)]"
postgresql,postgresql,"explain (costs off) select * from mclparted where a in(3,4,5) order by a",inherit.sql,SAME,,"[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted3_5_a_idx on mclparted3_5 mclparted_1',), (""        Index Cond: (a = ANY ('{3,4,5}'::integer[]))"",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_2',), (""        Index Cond: (a = ANY ('{3,4,5}'::integer[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from mclparted where a in(1,2,4) order by a",inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), (""        Index Cond: (a = ANY ('{1,2,4}'::integer[]))"",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), (""        Index Cond: (a = ANY ('{1,2,4}'::integer[]))"",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_3',), (""        Index Cond: (a = ANY ('{1,2,4}'::integer[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from mclparted where a in(1,2,4) or a is null order by a",inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), (""        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))"",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), (""        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))"",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_3',), (""        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))"",), ('  ->  Index Only Scan using mclparted_null_a_idx on mclparted_null mclparted_4',), (""        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))"",)]"
postgresql,postgresql,"explain (costs off) select * from mclparted where a in(1,2,4) or a is null order by a",inherit.sql,SAME,,"[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted_0_null_a_idx on mclparted_0_null mclparted_1',), (""        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))"",), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_2',), (""        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))"",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_3',), (""        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))"",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_4',), (""        Filter: ((a = ANY ('{1,2,4}'::integer[])) OR (a IS NULL))"",)]"
postgresql,postgresql,"explain (costs off) select * from mclparted where a in(0,1,2,4) order by a",inherit.sql,SAME,,"[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted_0_null_a_idx on mclparted_0_null mclparted_1',), (""        Index Cond: (a = ANY ('{0,1,2,4}'::integer[]))"",), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_2',), (""        Index Cond: (a = ANY ('{0,1,2,4}'::integer[]))"",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_3',), (""        Index Cond: (a = ANY ('{0,1,2,4}'::integer[]))"",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_4',), (""        Index Cond: (a = ANY ('{0,1,2,4}'::integer[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from mclparted where a in(1,2,4) order by a",inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), (""        Index Cond: (a = ANY ('{1,2,4}'::integer[]))"",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), (""        Index Cond: (a = ANY ('{1,2,4}'::integer[]))"",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_3',), (""        Index Cond: (a = ANY ('{1,2,4}'::integer[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from mclparted where a in(1,2,4,100) order by a",inherit.sql,SAME,,"[('Merge Append',), ('  Sort Key: mclparted.a',), ('  ->  Index Only Scan using mclparted1_a_idx on mclparted1 mclparted_1',), (""        Index Cond: (a = ANY ('{1,2,4,100}'::integer[]))"",), ('  ->  Index Only Scan using mclparted2_a_idx on mclparted2 mclparted_2',), (""        Index Cond: (a = ANY ('{1,2,4,100}'::integer[]))"",), ('  ->  Index Only Scan using mclparted4_a_idx on mclparted4 mclparted_3',), (""        Index Cond: (a = ANY ('{1,2,4,100}'::integer[]))"",), ('  ->  Index Only Scan using mclparted_def_a_idx on mclparted_def mclparted_4',), (""        Index Cond: (a = ANY ('{1,2,4,100}'::integer[]))"",)]"
postgresql,postgresql,reset enable_sort,inherit.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,inherit.sql,SAME,,[]
postgresql,postgresql,drop index mcrparted_a_abs_c_idx,inherit.sql,SAME,,[]
postgresql,postgresql,"create index on mcrparted1 (a, abs(b), c)",inherit.sql,SAME,,[]
postgresql,postgresql,"create index on mcrparted2 (a, abs(b), c)",inherit.sql,SAME,,[]
postgresql,postgresql,"create index on mcrparted3 (a, abs(b), c)",inherit.sql,SAME,,[]
postgresql,postgresql,"create index on mcrparted4 (a, abs(b), c)",inherit.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from mcrparted where a < 20 order by a, abs(b), c limit 1",inherit.sql,SAME,,"[('Limit',), ('  ->  Append',), ('        ->  Sort',), ('              Sort Key: mcrparted_1.a, (abs(mcrparted_1.b)), mcrparted_1.c',), ('              ->  Seq Scan on mcrparted0 mcrparted_1',), ('                    Filter: (a < 20)',), ('        ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_2',), ('              Index Cond: (a < 20)',), ('        ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_3',), ('              Index Cond: (a < 20)',), ('        ->  Index Scan using mcrparted3_a_abs_c_idx on mcrparted3 mcrparted_4',), ('              Index Cond: (a < 20)',)]"
postgresql,postgresql,set enable_bitmapscan = 0,inherit.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from mcrparted where a = 10 order by a, abs(b), c",inherit.sql,SAME,,"[('Append',), ('  ->  Index Scan using mcrparted1_a_abs_c_idx on mcrparted1 mcrparted_1',), ('        Index Cond: (a = 10)',), ('  ->  Index Scan using mcrparted2_a_abs_c_idx on mcrparted2 mcrparted_2',), ('        Index Cond: (a = 10)',)]"
postgresql,postgresql,reset enable_bitmapscan,inherit.sql,SAME,,[]
postgresql,postgresql,create index on bool_lp (b),inherit.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from bool_lp order by b,inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using bool_lp_false_b_idx on bool_lp_false bool_lp_1',), ('  ->  Index Only Scan using bool_lp_true_b_idx on bool_lp_true bool_lp_2',)]"
postgresql,postgresql,"create index on bool_rp (b,a)",inherit.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from bool_rp where b = true order by b,a",inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using bool_rp_true_1k_b_a_idx on bool_rp_true_1k bool_rp_1',), ('        Index Cond: (b = true)',), ('  ->  Index Only Scan using bool_rp_true_2k_b_a_idx on bool_rp_true_2k bool_rp_2',), ('        Index Cond: (b = true)',)]"
postgresql,postgresql,"explain (costs off) select * from bool_rp where b = false order by b,a",inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using bool_rp_false_1k_b_a_idx on bool_rp_false_1k bool_rp_1',), ('        Index Cond: (b = false)',), ('  ->  Index Only Scan using bool_rp_false_2k_b_a_idx on bool_rp_false_2k bool_rp_2',), ('        Index Cond: (b = false)',)]"
postgresql,postgresql,explain (costs off) select * from bool_rp where b = true order by a,inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using bool_rp_true_1k_b_a_idx on bool_rp_true_1k bool_rp_1',), ('        Index Cond: (b = true)',), ('  ->  Index Only Scan using bool_rp_true_2k_b_a_idx on bool_rp_true_2k bool_rp_2',), ('        Index Cond: (b = true)',)]"
postgresql,postgresql,explain (costs off) select * from bool_rp where b = false order by a,inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using bool_rp_false_1k_b_a_idx on bool_rp_false_1k bool_rp_1',), ('        Index Cond: (b = false)',), ('  ->  Index Only Scan using bool_rp_false_2k_b_a_idx on bool_rp_false_2k bool_rp_2',), ('        Index Cond: (b = false)',)]"
postgresql,postgresql,"create index on range_parted (a,b,c)",inherit.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from range_parted order by a,b,c",inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan using range_parted1_a_b_c_idx on range_parted1 range_parted_1',), ('  ->  Index Only Scan using range_parted2_a_b_c_idx on range_parted2 range_parted_2',)]"
postgresql,postgresql,"explain (costs off) select * from range_parted order by a desc,b desc,c desc",inherit.sql,SAME,,"[('Append',), ('  ->  Index Only Scan Backward using range_parted2_a_b_c_idx on range_parted2 range_parted_2',), ('  ->  Index Only Scan Backward using range_parted1_a_b_c_idx on range_parted1 range_parted_1',)]"
postgresql,postgresql,alter table permtest_child attach partition permtest_grandchild for values in ('a'),inherit.sql,SAME,,[]
postgresql,postgresql,alter table permtest_parent attach partition permtest_child for values in (1),inherit.sql,SAME,,[]
postgresql,postgresql,"create index on permtest_parent (left(c, 3))",inherit.sql,SAME,,[]
postgresql,postgresql,analyze permtest_parent,inherit.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select * from permtest_parent p1 inner join permtest_parent p2   on p1.a = p2.a and p1.c ~ 'a1$',inherit.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (p1.a = p2.a)',), ('  ->  Seq Scan on permtest_grandchild p1',), (""        Filter: (c ~ 'a1$'::text)"",), ('  ->  Seq Scan on permtest_grandchild p2',)]"
postgresql,postgresql,"explain (costs off)   select * from permtest_parent p1 inner join permtest_parent p2   on p1.a = p2.a and left(p1.c, 3) ~ 'a1$'",inherit.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (p1.a = p2.a)',), ('  ->  Seq Scan on permtest_grandchild p1',), ('        Filter: (""left""(c, 3) ~ \'a1$\'::text)',), ('  ->  Seq Scan on permtest_grandchild p2',)]"
postgresql,postgresql,reset session authorization,inherit.sql,SAME,,[]
postgresql,postgresql,"explain (costs off)   select p2.a, p1.c from permtest_parent p1 inner join permtest_parent p2   on p1.a = p2.a and p1.c ~ 'a1$'",inherit.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (p1.a = p2.a)',), ('  ->  Seq Scan on permtest_grandchild p1',), (""        Filter: (c ~ 'a1$'::text)"",), ('  ->  Seq Scan on permtest_grandchild p2',)]"
postgresql,postgresql,"explain (costs off)   select p2.a, p1.c from permtest_parent p1 inner join permtest_parent p2   on p1.a = p2.a and left(p1.c, 3) ~ 'a1$'",inherit.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (p1.a = p2.a)',), ('  ->  Seq Scan on permtest_grandchild p1',), ('        Filter: (""left""(c, 3) ~ \'a1$\'::text)',), ('  ->  Seq Scan on permtest_grandchild p2',)]"
postgresql,postgresql,reset session authorization,inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE errtst_child_fastdef ADD COLUMN data int NOT NULL DEFAULT 0,inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE errtst_child_fastdef ADD CONSTRAINT errtest_child_fastdef_data_check CHECK (data < 10),inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE errtst_parent ATTACH PARTITION errtst_child_fastdef FOR VALUES FROM (0) TO (10),inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE errtst_parent ATTACH PARTITION errtst_child_plaindef FOR VALUES FROM (10) TO (20),inherit.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE errtst_parent ATTACH PARTITION errtst_child_reorder FOR VALUES FROM (20) TO (30),inherit.sql,SAME,,[]
postgresql,postgresql,BEGIN,inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE errtst_parent SET data = data + 1 WHERE partid = 0,inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE errtst_parent SET data = data + 1 WHERE partid = 10,inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE errtst_parent SET data = data + 1 WHERE partid = 20,inherit.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,inherit.sql,SAME,,[]
postgresql,postgresql,BEGIN,inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE errtst_child_fastdef SET partid = 1 WHERE partid = 0,inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE errtst_child_plaindef SET partid = 11 WHERE partid = 10,inherit.sql,SAME,,[]
postgresql,postgresql,UPDATE errtst_child_reorder SET partid = 21 WHERE partid = 20,inherit.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,inherit.sql,SAME,,[]
postgresql,postgresql,BEGIN,inherit.sql,SAME,,[]
postgresql,postgresql,"UPDATE errtst_parent SET partid = 10, data = data + 1 WHERE partid = 0",inherit.sql,SAME,,[]
postgresql,postgresql,"UPDATE errtst_parent SET partid = 20, data = data + 1 WHERE partid = 10",inherit.sql,SAME,,[]
postgresql,postgresql,"UPDATE errtst_parent SET partid = 0, data = data + 1 WHERE partid = 20",inherit.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,inherit.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) > 0 FROM pg_init_privs,init_privs.sql,SAME,,"[(True,)]"
postgresql,postgresql,GRANT SELECT ON pg_proc TO CURRENT_USER,init_privs.sql,SAME,,[]
postgresql,postgresql,GRANT SELECT (prosrc) ON pg_proc TO CURRENT_USER,init_privs.sql,SAME,,[]
postgresql,postgresql,select * from inserttest,insert.sql,SAME,,"[(None, 3, 'testing'), (None, 5, 'testing'), (None, 5, 'test'), (None, 7, 'testing')]"
postgresql,postgresql,select * from inserttest,insert.sql,SAME,,"[(None, 3, 'testing'), (None, 5, 'testing'), (None, 5, 'test'), (None, 7, 'testing')]"
postgresql,postgresql,select * from inserttest,insert.sql,SAME,,"[(None, 3, 'testing'), (None, 5, 'testing'), (None, 5, 'test'), (None, 7, 'testing'), (10, 20, '40'), (-1, 2, 'testing'), (2, 3, 'values are fun!')]"
postgresql,postgresql,"select col1, col2, char_length(col3) from inserttest",insert.sql,SAME,,"[(None, 3, 7), (None, 5, 7), (None, 5, 4), (None, 7, 7), (10, 20, 2), (-1, 2, 7), (2, 3, 15), (30, 50, 10000)]"
postgresql,postgresql,ALTER TABLE large_tuple_test ALTER COLUMN b SET STORAGE plain,insert.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_size_pretty(pg_relation_size('large_tuple_test'::regclass, 'main'))",insert.sql,SAME,,"[('8192 bytes',)]"
postgresql,postgresql,"create type insert_test_type as (if1 int, if2 text[])",insert.sql,SAME,,[]
postgresql,postgresql,select * from inserttest,insert.sql,SAME,,"[(None, [1, 2], None, None), (None, [3, 4], None, None), (None, [5, 6], None, None), (None, [7, 8], None, None), (None, None, '(1,{foo})', None), (None, None, '(1,{foo})', None), (None, None, '(2,{bar})', None), (None, None, '(3,""{baz,quux}"")', None), (None, None, '(,""{foo,bar}"")', None), (None, None, '(,""{foo,bar}"")', None), (None, None, '(,""{baz,quux}"")', None), (None, None, '(,""{bear,beer}"")', None), (None, None, None, '{""(,\\""{foo,bar}\\"")""}'), (None, None, None, '{""(,\\""{foo,bar}\\"")""}'), (None, None, None, '{""(,\\""{baz,quux}\\"")""}'), (None, None, None, '{""(,\\""{bear,beer}\\"")""}')]"
postgresql,postgresql,create domain insert_pos_ints as int[] check (value[1] > 0),insert.sql,SAME,,[]
postgresql,postgresql,create domain insert_test_domain as insert_test_type   check ((value).if2[1] is not null),insert.sql,SAME,,[]
postgresql,postgresql,select * from inserttesta,insert.sql,SAME,,"[(None, [1, 2]), (None, [3, 4]), (None, [5, 6]), (None, [7, 8])]"
postgresql,postgresql,select * from inserttestb,insert.sql,SAME,,"[('(1,{foo})', None), ('(1,{foo})', None), ('(2,{bar})', None), ('(3,""{baz,quux}"")', None), ('(,""{foo,bar}"")', None), ('(,""{foo,bar}"")', None), ('(,""{baz,quux}"")', None), ('(,""{bear,beer}"")', None), ('(1,{x})', '{""(,\\""{foo,bar}\\"")""}'), ('(1,{x})', '{""(,\\""{foo,bar}\\"")""}'), ('(2,{y})', '{""(,\\""{baz,quux}\\"")""}'), ('(1,{x})', '{""(,\\""{bear,beer}\\"")""}')]"
postgresql,postgresql,drop domain insert_pos_ints,insert.sql,SAME,,[]
postgresql,postgresql,drop domain insert_test_domain,insert.sql,SAME,,[]
postgresql,postgresql,create domain insert_nnarray as int[]   check (value[1] is not null and value[2] is not null),insert.sql,SAME,,[]
postgresql,postgresql,create domain insert_test_domain as insert_test_type   check ((value).if1 is not null and (value).if2 is not null),insert.sql,SAME,,[]
postgresql,postgresql,drop domain insert_nnarray,insert.sql,SAME,,[]
postgresql,postgresql,drop type insert_test_type cascade,insert.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from list_parted",insert.sql,SAME,,"[('part_cc_dd', 'cC', 1), ('part_ee_ff1', 'ff', 1), ('part_ee_ff2', 'ff', 11), ('part_xx_yy_p1', 'xx', 1), ('part_xx_yy_defpart', 'yy', 2), ('part_null', None, 0), ('part_default_p1', 'cd', 25), ('part_default_p1', 'ab', 21), ('part_default_p2', 'de', 35)]"
postgresql,postgresql,"select tableoid::regclass, * from range_parted",insert.sql,SAME,,"[('part1', 'a', 1), ('part1', 'a', 1), ('part2', 'a', 10), ('part3', 'b', 1), ('part4', 'b', 10), ('part4', 'b', 10), ('part_def', 'c', 10), ('part_def', None, None), ('part_def', 'a', None), ('part_def', None, 19), ('part_def', 'b', 20)]"
postgresql,postgresql,"select tableoid::regclass, * from list_parted",insert.sql,SAME,,"[('part_aa_bb', 'aA', None), ('part_cc_dd', 'cC', 1), ('part_ee_ff1', 'ff', 1), ('part_ee_ff1', 'EE', 1), ('part_ee_ff2', 'ff', 11), ('part_ee_ff2', 'EE', 10), ('part_xx_yy_p1', 'xx', 1), ('part_xx_yy_defpart', 'yy', 2), ('part_null', None, 0), ('part_null', None, 1), ('part_default_p1', 'cd', 25), ('part_default_p1', 'ab', 21), ('part_default_p2', 'de', 35)]"
postgresql,postgresql,truncate list_parted,insert.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass::text, a, min(b) as min_b, max(b) as max_b from list_parted group by 1, 2 order by 1",insert.sql,SAME,,"[('part_aa_bb', 'aa', None, None), ('part_cc_dd', 'cc', None, None), ('part_ee_ff1', 'Ff', 1, 9), ('part_ee_ff2', 'Ff', 10, 19), ('part_ee_ff3_1', 'Ff', 20, 24), ('part_ee_ff3_2', 'Ff', 25, 29), ('part_gg2_1', 'gg', 1, 4), ('part_gg2_2', 'gg', 5, 9), ('part_null', None, 1, 1)]"
postgresql,postgresql,"select tableoid::regclass, a from list_parted",insert.sql,SAME,,"[('part_default', None), ('part_default', 1), ('part_default', -1)]"
postgresql,postgresql,alter table mlparted11 drop a,insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted11 add a int,insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted11 drop a,insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted11 add a int not null,insert.sql,SAME,,[]
postgresql,postgresql,"select attrelid::regclass, attname, attnum from pg_attribute where attname = 'a'  and (attrelid = 'mlparted'::regclass    or attrelid = 'mlparted1'::regclass    or attrelid = 'mlparted11'::regclass) order by attrelid::regclass::text",insert.sql,SAME,,"[('mlparted', 'a', 1), ('mlparted1', 'a', 2), ('mlparted11', 'a', 4)]"
postgresql,postgresql,alter table mlparted1 attach partition mlparted11 for values from (2) to (5),insert.sql,SAME,,[]
postgresql,postgresql,"alter table mlparted attach partition mlparted1 for values from (1, 2) to (1, 10)",insert.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from mlparted",insert.sql,SAME,,"[('mlparted11', 1, 2)]"
postgresql,postgresql,truncate mlparted,insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted add constraint check_b check (b = 3),insert.sql,SAME,,[]
postgresql,postgresql,end,insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted drop constraint check_b,insert.sql,SAME,,[]
postgresql,postgresql,"alter table mlparted attach partition mlparted2 for values from (1, 10) to (1, 20)",insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted4 drop a,insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted4 add a int not null,insert.sql,SAME,,[]
postgresql,postgresql,"alter table mlparted attach partition mlparted4 for values from (1, 30) to (1, 40)",insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted add c text,insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted5 attach partition mlparted5a for values in ('a'),insert.sql,SAME,,[]
postgresql,postgresql,"alter table mlparted attach partition mlparted5 for values from (1, 40) to (1, 50)",insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted add constraint check_b check (a = 1 and b < 45),insert.sql,SAME,,[]
postgresql,postgresql,end,insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted drop constraint check_b,insert.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from mlparted_def",insert.sql,SAME,,"[('mlparted_def1', 40, 100, None), ('mlparted_def1', 42, 100, None), ('mlparted_def2', 54, 50, None), ('mlparted_defd', 70, 100, None)]"
postgresql,postgresql,"alter table mlparted add d int, add e int",insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted drop e,insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted5_ab attach partition mlparted5_b for values in ('b'),insert.sql,SAME,,[]
postgresql,postgresql,truncate mlparted,insert.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from mlparted order by a, b, c, d",insert.sql,SAME,,"[('mlparted11', 1, 2, 'a', 1), ('mlparted5_a', 1, 40, 'a', 1), ('mlparted5_b', 1, 45, 'b', 1)]"
postgresql,postgresql,alter table mlparted drop d,insert.sql,SAME,,[]
postgresql,postgresql,truncate mlparted,insert.sql,SAME,,[]
postgresql,postgresql,"alter table mlparted add e int, add d int",insert.sql,SAME,,[]
postgresql,postgresql,alter table mlparted drop e,insert.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from mlparted order by a, b, c, d",insert.sql,SAME,,"[('mlparted11', 1, 2, 'a', 1), ('mlparted5_a', 1, 40, 'a', 1), ('mlparted5_b', 1, 45, 'b', 1)]"
postgresql,postgresql,alter table mlparted drop d,insert.sql,SAME,,[]
postgresql,postgresql,reset role,insert.sql,SAME,,[]
postgresql,postgresql,reset role,insert.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass::text, * from mcrparted order by 1",insert.sql,SAME,,"[('mcrparted0', 0, 1, 1), ('mcrparted0', 0, 1, 1), ('mcrparted1', 9, 1000, 1), ('mcrparted1', 9, 1000, 1), ('mcrparted1', 10, 5, -1), ('mcrparted1', 10, 5, -1), ('mcrparted1', 2, 1, 0), ('mcrparted1', 2, 1, 0), ('mcrparted2', 10, 6, 1000), ('mcrparted2', 10, 6, 1000), ('mcrparted2', 10, 1000, 1000), ('mcrparted2', 10, 1000, 1000), ('mcrparted5', 30, 21, 20), ('mcrparted5', 30, 21, 20)]"
postgresql,postgresql,reset role,insert.sql,SAME,,[]
postgresql,postgresql,alter table donothingbrtrig_test2 drop column c,insert.sql,SAME,,[]
postgresql,postgresql,"create or replace function donothingbrtrig_func() returns trigger as $$begin raise notice 'b: %', new.b; return NULL; end$$ language plpgsql",insert.sql,SAME,,[]
postgresql,postgresql,create trigger donothingbrtrig1 before insert on donothingbrtrig_test1 for each row execute procedure donothingbrtrig_func(),insert.sql,SAME,,[]
postgresql,postgresql,create trigger donothingbrtrig2 before insert on donothingbrtrig_test2 for each row execute procedure donothingbrtrig_func(),insert.sql,SAME,,[]
postgresql,postgresql,alter table donothingbrtrig_test attach partition donothingbrtrig_test1 for values in (1),insert.sql,SAME,,[]
postgresql,postgresql,alter table donothingbrtrig_test attach partition donothingbrtrig_test2 for values in (2),insert.sql,SAME,,[]
postgresql,postgresql,drop function donothingbrtrig_func(),insert.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from mcrparted order by a, b",insert.sql,SAME,,"[('mcrparted1_lt_b', 'aaa', 0), ('mcrparted2_b', 'b', 0), ('mcrparted2_b', 'bz', 10), ('mcrparted3_c_to_common', 'c', -10), ('mcrparted3_c_to_common', 'comm', -10), ('mcrparted4_common_lt_0', 'common', -10), ('mcrparted5_common_0_to_10', 'common', 0), ('mcrparted6_common_ge_10', 'common', 10), ('mcrparted7_gt_common_lt_d', 'commons', 0), ('mcrparted8_ge_d', 'd', -10), ('mcrparted8_ge_d', 'e', 0)]"
postgresql,postgresql,alter table returningwrtest add b text,insert.sql,SAME,,[]
postgresql,postgresql,alter table returningwrtest2 drop c,insert.sql,SAME,,[]
postgresql,postgresql,alter table returningwrtest attach partition returningwrtest2 for values in (2),insert.sql,SAME,,[]
postgresql,postgresql,"create unique index op_index_key on insertconflicttest(key, fruit text_pattern_ops)",insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index collation_index_key on insertconflicttest(key, fruit collate ""C"")",insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index both_index_key on insertconflicttest(key, fruit collate ""C"" text_pattern_ops)",insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index both_index_expr_key on insertconflicttest(key, lower(fruit) collate ""C"" text_pattern_ops)",insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index op_index_key,insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index collation_index_key,insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index both_index_key,insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index both_index_expr_key,insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index cross_match on insertconflicttest(lower(fruit) collate ""C"", upper(fruit) text_pattern_ops)",insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index cross_match,insert_conflict.sql,SAME,,[]
postgresql,postgresql,create unique index key_index on insertconflicttest(key),insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index key_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index comp_key_index on insertconflicttest(key, fruit)",insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index comp_key_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index part_comp_key_index on insertconflicttest(key, fruit) where key < 5",insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index expr_part_comp_key_index on insertconflicttest(key, lower(fruit)) where key < 5",insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index part_comp_key_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index expr_part_comp_key_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,create unique index expr_key_index on insertconflicttest(lower(fruit)),insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index expr_key_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index expr_comp_key_index on insertconflicttest(key, lower(fruit))",insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index tricky_expr_comp_key_index on insertconflicttest(key, lower(fruit), upper(fruit))",insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index expr_comp_key_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index tricky_expr_comp_key_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,create unique index key_index on insertconflicttest(key),insert_conflict.sql,SAME,,[]
postgresql,postgresql,create unique index fruit_index on insertconflicttest(fruit),insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index key_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index fruit_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,create unique index partial_key_index on insertconflicttest(key) where fruit like '%berry',insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index partial_key_index,insert_conflict.sql,SAME,,[]
postgresql,postgresql,create unique index plain on insertconflicttest(key),insert_conflict.sql,SAME,,[]
postgresql,postgresql,drop index plain,insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index insertconflicti1 on insertconflict(coalesce(a, 0))",insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index insertconflicti2 on insertconflict(b)   where coalesce(a, 1) > 0",insert_conflict.sql,SAME,,[]
postgresql,postgresql,create view insertconflictv as   select * from insertconflict with cascaded check option,insert_conflict.sql,SAME,,[]
postgresql,postgresql,select * from insertconflict,insert_conflict.sql,SAME,,"[(1, 'foo')]"
postgresql,postgresql,select * from insertconflict,insert_conflict.sql,SAME,,"[(1, 'bar')]"
postgresql,postgresql,drop view insertconflictv,insert_conflict.sql,SAME,,[]
postgresql,postgresql,create unique index cities_names_unique on cities (name),insert_conflict.sql,SAME,,[]
postgresql,postgresql,create unique index capitals_names_unique on capitals (name),insert_conflict.sql,SAME,,[]
postgresql,postgresql,select * from capitals,insert_conflict.sql,SAME,,"[('Sacramento', 369400.0, 30, 'CA'), ('Madison', 191300.0, 845, 'WI')]"
postgresql,postgresql,select * from capitals,insert_conflict.sql,SAME,,"[('Madison', 191300.0, 845, 'WI'), ('Sacramento', 466400000.0, 30, 'CA')]"
postgresql,postgresql,"select tableoid::regclass, * from cities",insert_conflict.sql,SAME,,"[('cities', 'San Francisco', 724000.0, 63), ('cities', 'Mariposa', 1200.0, 1953), ('cities', 'Las Vegas', 583000.0, 2001), ('capitals', 'Madison', 191300.0, 845), ('capitals', 'Sacramento', 466400000.0, 30)]"
postgresql,postgresql,select * from capitals,insert_conflict.sql,SAME,,"[('Madison', 191300.0, 845, 'WI'), ('Sacramento', 466400000.0, 30, 'CA'), ('Las Vegas', 583000.0, 2222, 'NV')]"
postgresql,postgresql,"select tableoid::regclass, * from cities",insert_conflict.sql,SAME,,"[('cities', 'San Francisco', 724000.0, 63), ('cities', 'Mariposa', 1200.0, 1953), ('cities', 'Las Vegas', 583000.0, 2001), ('capitals', 'Madison', 191300.0, 845), ('capitals', 'Sacramento', 466400000.0, 30), ('capitals', 'Las Vegas', 583000.0, 2222)]"
postgresql,postgresql,"select tableoid::regclass, * from cities",insert_conflict.sql,SAME,,"[('cities', 'San Francisco', 724000.0, 63), ('cities', 'Mariposa', 1200.0, 1953), ('cities', 'Las Vegas', 586000.0, 2223), ('capitals', 'Madison', 191300.0, 845), ('capitals', 'Sacramento', 466400000.0, 30), ('capitals', 'Las Vegas', 583000.0, 2222)]"
postgresql,postgresql,"alter table dropcol drop column drop1, drop column drop2",insert_conflict.sql,SAME,,[]
postgresql,postgresql,select * from twoconstraints,insert_conflict.sql,SAME,,"[(1, '(1,1),(0,0)')]"
postgresql,postgresql,begin transaction isolation level read committed,insert_conflict.sql,SAME,,[]
postgresql,postgresql,commit,insert_conflict.sql,SAME,,[]
postgresql,postgresql,begin transaction isolation level repeatable read,insert_conflict.sql,SAME,,[]
postgresql,postgresql,commit,insert_conflict.sql,SAME,,[]
postgresql,postgresql,begin transaction isolation level serializable,insert_conflict.sql,SAME,,[]
postgresql,postgresql,commit,insert_conflict.sql,SAME,,[]
postgresql,postgresql,begin transaction isolation level read committed,insert_conflict.sql,SAME,,[]
postgresql,postgresql,commit,insert_conflict.sql,SAME,,[]
postgresql,postgresql,begin transaction isolation level repeatable read,insert_conflict.sql,SAME,,[]
postgresql,postgresql,commit,insert_conflict.sql,SAME,,[]
postgresql,postgresql,begin transaction isolation level serializable,insert_conflict.sql,SAME,,[]
postgresql,postgresql,commit,insert_conflict.sql,SAME,,[]
postgresql,postgresql,select * from selfconflict,insert_conflict.sql,SAME,,"[(1, 1), (2, 1), (3, 1)]"
postgresql,postgresql,select * from parted_conflict_test order by a,insert_conflict.sql,SAME,,"[(2, 'b')]"
postgresql,postgresql,alter table parted_conflict_test attach partition parted_conflict_test_2 for values in (3),insert_conflict.sql,SAME,,[]
postgresql,postgresql,truncate parted_conflict_test,insert_conflict.sql,SAME,,[]
postgresql,postgresql,select * from parted_conflict_test order by a,insert_conflict.sql,SAME,,"[(3, 'b')]"
postgresql,postgresql,"alter table parted_conflict_test drop b, add b char",insert_conflict.sql,SAME,,[]
postgresql,postgresql,truncate parted_conflict_test,insert_conflict.sql,SAME,,[]
postgresql,postgresql,select * from parted_conflict_test order by a,insert_conflict.sql,SAME,,"[(4, 'b')]"
postgresql,postgresql,truncate parted_conflict_test,insert_conflict.sql,SAME,,[]
postgresql,postgresql,select * from parted_conflict_test order by a,insert_conflict.sql,SAME,,"[(5, 'b')]"
postgresql,postgresql,truncate parted_conflict_test,insert_conflict.sql,SAME,,[]
postgresql,postgresql,select * from parted_conflict_test order by a,insert_conflict.sql,SAME,,"[(1, 'b'), (2, 'a'), (4, 'b')]"
postgresql,postgresql,create unique index on only parted_conflict_1 (a),insert_conflict.sql,SAME,,[]
postgresql,postgresql,create unique index on only parted_conflict (a),insert_conflict.sql,SAME,,[]
postgresql,postgresql,alter index parted_conflict_a_idx attach partition parted_conflict_1_a_idx,insert_conflict.sql,SAME,,[]
postgresql,postgresql,alter table parted_conflict_1 drop column drp,insert_conflict.sql,SAME,,[]
postgresql,postgresql,"create unique index on parted_conflict (a, b)",insert_conflict.sql,SAME,,[]
postgresql,postgresql,alter table parted_conflict attach partition parted_conflict_1 for values from (0) to (1000),insert_conflict.sql,SAME,,[]
postgresql,postgresql,truncate parted_conflict,insert_conflict.sql,SAME,,[]
postgresql,postgresql,select * from parted_conflict order by a,insert_conflict.sql,SAME,,"[(50, 'cincuenta', 2)]"
postgresql,postgresql,truncate parted_conflict,insert_conflict.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_input_is_valid('34', 'int2')",int2.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('asdf', 'int2')",int2.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('50000', 'int2')",int2.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('50000', 'int2')",int2.sql,SAME,,"[('value ""50000"" is out of range for type smallint', None, None, '22003')]"
postgresql,postgresql,"SELECT pg_input_is_valid(' 1 3  5 ', 'int2vector')",int2.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1 asdf', 'int2vector')",int2.sql,SAME,,"[('invalid input syntax for type smallint: ""asdf""', None, None, '22P02')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('50000', 'int2vector')",int2.sql,SAME,,"[('value ""50000"" is out of range for type smallint', None, None, '22003')]"
postgresql,postgresql,SELECT (-1::int2<<15)::text,int2.sql,SAME,,"[('-32768',)]"
postgresql,postgresql,SELECT ((-1::int2<<15)+1::int2)::text,int2.sql,SAME,,"[('-32767',)]"
postgresql,postgresql,SELECT (-32768)::int2 % (-1)::int2,int2.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT x, x::int2 AS int2_value FROM (VALUES (-2.5::float8),              (-1.5::float8),              (-0.5::float8),              (0.0::float8),              (0.5::float8),              (1.5::float8),              (2.5::float8)) t(x)",int2.sql,SAME,,"[(-2.5, -2), (-1.5, -2), (-0.5, 0), (0.0, 0), (0.5, 0), (1.5, 2), (2.5, 2)]"
postgresql,postgresql,"SELECT x, x::int2 AS int2_value FROM (VALUES (-2.5::numeric),              (-1.5::numeric),              (-0.5::numeric),              (0.0::numeric),              (0.5::numeric),              (1.5::numeric),              (2.5::numeric)) t(x)",int2.sql,SAME,,"[(Decimal('-2.5'), -3), (Decimal('-1.5'), -2), (Decimal('-0.5'), -1), (Decimal('0.0'), 0), (Decimal('0.5'), 1), (Decimal('1.5'), 2), (Decimal('2.5'), 3)]"
postgresql,postgresql,SELECT int2 '0b100101',int2.sql,SAME,,"[(37,)]"
postgresql,postgresql,SELECT int2 '0o273',int2.sql,SAME,,"[(187,)]"
postgresql,postgresql,SELECT int2 '0x42F',int2.sql,SAME,,"[(1071,)]"
postgresql,postgresql,SELECT int2 '0b111111111111111',int2.sql,SAME,,"[(32767,)]"
postgresql,postgresql,SELECT int2 '0o77777',int2.sql,SAME,,"[(32767,)]"
postgresql,postgresql,SELECT int2 '0x7FFF',int2.sql,SAME,,"[(32767,)]"
postgresql,postgresql,SELECT int2 '-0b1000000000000000',int2.sql,SAME,,"[(-32768,)]"
postgresql,postgresql,SELECT int2 '-0o100000',int2.sql,SAME,,"[(-32768,)]"
postgresql,postgresql,SELECT int2 '-0x8000',int2.sql,SAME,,"[(-32768,)]"
postgresql,postgresql,SELECT int2 '1_000',int2.sql,SAME,,"[(1000,)]"
postgresql,postgresql,SELECT int2 '1_2_3',int2.sql,SAME,,"[(123,)]"
postgresql,postgresql,SELECT int2 '0xE_FF',int2.sql,SAME,,"[(3839,)]"
postgresql,postgresql,SELECT int2 '0o2_73',int2.sql,SAME,,"[(187,)]"
postgresql,postgresql,SELECT int2 '0b_10_0101',int2.sql,SAME,,"[(37,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('34', 'int4')",int4.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('asdf', 'int4')",int4.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('1000000000000', 'int4')",int4.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1000000000000', 'int4')",int4.sql,SAME,,"[('value ""1000000000000"" is out of range for type integer', None, None, '22003')]"
postgresql,postgresql,SELECT -2+3 AS one,int4.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT 4-2 AS two,int4.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT 2- -1 AS three,int4.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT 2 - -2 AS four,int4.sql,SAME,,"[(4,)]"
postgresql,postgresql,SELECT int2 '2' * int2 '2' = int2 '16' / int2 '4' AS true,int4.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT int4 '2' * int2 '2' = int2 '16' / int4 '4' AS true,int4.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT int2 '2' * int4 '2' = int4 '16' / int2 '4' AS true,int4.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT int4 '1000' < int4 '999' AS false,int4.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 AS ten,int4.sql,SAME,,"[(10,)]"
postgresql,postgresql,SELECT 2 + 2 / 2 AS three,int4.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT (2 + 2) / 2 AS two,int4.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT (-1::int4<<31)::text,int4.sql,SAME,,"[('-2147483648',)]"
postgresql,postgresql,SELECT ((-1::int4<<31)+1)::text,int4.sql,SAME,,"[('-2147483647',)]"
postgresql,postgresql,SELECT (-2147483648)::int4 % (-1)::int4,int4.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT (-2147483648)::int4 % (-1)::int2,int4.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT x, x::int4 AS int4_value FROM (VALUES (-2.5::float8),              (-1.5::float8),              (-0.5::float8),              (0.0::float8),              (0.5::float8),              (1.5::float8),              (2.5::float8)) t(x)",int4.sql,SAME,,"[(-2.5, -2), (-1.5, -2), (-0.5, 0), (0.0, 0), (0.5, 0), (1.5, 2), (2.5, 2)]"
postgresql,postgresql,"SELECT x, x::int4 AS int4_value FROM (VALUES (-2.5::numeric),              (-1.5::numeric),              (-0.5::numeric),              (0.0::numeric),              (0.5::numeric),              (1.5::numeric),              (2.5::numeric)) t(x)",int4.sql,SAME,,"[(Decimal('-2.5'), -3), (Decimal('-1.5'), -2), (Decimal('-0.5'), -1), (Decimal('0.0'), 0), (Decimal('0.5'), 1), (Decimal('1.5'), 2), (Decimal('2.5'), 3)]"
postgresql,postgresql,"SELECT a, b, gcd(a, b), gcd(a, -b), gcd(b, a), gcd(-b, a) FROM (VALUES (0::int4, 0::int4),              (0::int4, 6410818::int4),              (61866666::int4, 6410818::int4),              (-61866666::int4, 6410818::int4),              ((-2147483648)::int4, 1::int4),              ((-2147483648)::int4, 2147483647::int4),              ((-2147483648)::int4, 1073741824::int4)) AS v(a, b)",int4.sql,SAME,,"[(0, 0, 0, 0, 0, 0), (0, 6410818, 6410818, 6410818, 6410818, 6410818), (61866666, 6410818, 1466, 1466, 1466, 1466), (-61866666, 6410818, 1466, 1466, 1466, 1466), (-2147483648, 1, 1, 1, 1, 1), (-2147483648, 2147483647, 1, 1, 1, 1), (-2147483648, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824)]"
postgresql,postgresql,"SELECT a, b, lcm(a, b), lcm(a, -b), lcm(b, a), lcm(-b, a) FROM (VALUES (0::int4, 0::int4),              (0::int4, 42::int4),              (42::int4, 42::int4),              (330::int4, 462::int4),              (-330::int4, 462::int4),              ((-2147483648)::int4, 0::int4)) AS v(a, b)",int4.sql,SAME,,"[(0, 0, 0, 0, 0, 0), (0, 42, 0, 0, 0, 0), (42, 42, 42, 42, 42, 42), (330, 462, 2310, 2310, 2310, 2310), (-330, 462, 2310, 2310, 2310, 2310), (-2147483648, 0, 0, 0, 0, 0)]"
postgresql,postgresql,SELECT int4 '0b100101',int4.sql,SAME,,"[(37,)]"
postgresql,postgresql,SELECT int4 '0o273',int4.sql,SAME,,"[(187,)]"
postgresql,postgresql,SELECT int4 '0x42F',int4.sql,SAME,,"[(1071,)]"
postgresql,postgresql,SELECT int4 '0b1111111111111111111111111111111',int4.sql,SAME,,"[(2147483647,)]"
postgresql,postgresql,SELECT int4 '0o17777777777',int4.sql,SAME,,"[(2147483647,)]"
postgresql,postgresql,SELECT int4 '0x7FFFFFFF',int4.sql,SAME,,"[(2147483647,)]"
postgresql,postgresql,SELECT int4 '-0b10000000000000000000000000000000',int4.sql,SAME,,"[(-2147483648,)]"
postgresql,postgresql,SELECT int4 '-0o20000000000',int4.sql,SAME,,"[(-2147483648,)]"
postgresql,postgresql,SELECT int4 '-0x80000000',int4.sql,SAME,,"[(-2147483648,)]"
postgresql,postgresql,SELECT int4 '1_000_000',int4.sql,SAME,,"[(1000000,)]"
postgresql,postgresql,SELECT int4 '1_2_3',int4.sql,SAME,,"[(123,)]"
postgresql,postgresql,SELECT int4 '0x1EEE_FFFF',int4.sql,SAME,,"[(518979583,)]"
postgresql,postgresql,SELECT int4 '0o2_73',int4.sql,SAME,,"[(187,)]"
postgresql,postgresql,SELECT int4 '0b_10_0101',int4.sql,SAME,,"[(37,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('34', 'int8')",int8.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('asdf', 'int8')",int8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('10000000000000000000', 'int8')",int8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('10000000000000000000', 'int8')",int8.sql,SAME,,"[('value ""10000000000000000000"" is out of range for type bigint', None, None, '22003')]"
postgresql,postgresql,select '-9223372036854775808'::int8,int8.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,select '9223372036854775807'::int8,int8.sql,SAME,,"[(9223372036854775807,)]"
postgresql,postgresql,select -('-9223372036854775807'::int8),int8.sql,SAME,,"[(9223372036854775807,)]"
postgresql,postgresql,"SELECT CAST('42'::int2 AS int8), CAST('-37'::int2 AS int8)",int8.sql,SAME,,"[(42, -37)]"
postgresql,postgresql,SELECT CAST('36854775807.0'::float4 AS int8),int8.sql,SAME,,"[(36854775808,)]"
postgresql,postgresql,SELECT oid::int8 FROM pg_class WHERE relname = 'pg_class',int8.sql,SAME,,"[(1259,)]"
postgresql,postgresql,"SELECT * FROM generate_series('+4567890123456789'::int8, '+4567890123456799'::int8)",int8.sql,SAME,,"[(4567890123456789,), (4567890123456790,), (4567890123456791,), (4567890123456792,), (4567890123456793,), (4567890123456794,), (4567890123456795,), (4567890123456796,), (4567890123456797,), (4567890123456798,), (4567890123456799,)]"
postgresql,postgresql,"SELECT * FROM generate_series('+4567890123456789'::int8, '+4567890123456799'::int8, 2)",int8.sql,SAME,,"[(4567890123456789,), (4567890123456791,), (4567890123456793,), (4567890123456795,), (4567890123456797,), (4567890123456799,)]"
postgresql,postgresql,SELECT (-1::int8<<63)::text,int8.sql,SAME,,"[('-9223372036854775808',)]"
postgresql,postgresql,SELECT ((-1::int8<<63)+1)::text,int8.sql,SAME,,"[('-9223372036854775807',)]"
postgresql,postgresql,SELECT (-9223372036854775808)::int8 % (-1)::int8,int8.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT (-9223372036854775808)::int8 % (-1)::int4,int8.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT (-9223372036854775808)::int8 % (-1)::int2,int8.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT x, x::int8 AS int8_value FROM (VALUES (-2.5::float8),              (-1.5::float8),              (-0.5::float8),              (0.0::float8),              (0.5::float8),              (1.5::float8),              (2.5::float8)) t(x)",int8.sql,SAME,,"[(-2.5, -2), (-1.5, -2), (-0.5, 0), (0.0, 0), (0.5, 0), (1.5, 2), (2.5, 2)]"
postgresql,postgresql,"SELECT x, x::int8 AS int8_value FROM (VALUES (-2.5::numeric),              (-1.5::numeric),              (-0.5::numeric),              (0.0::numeric),              (0.5::numeric),              (1.5::numeric),              (2.5::numeric)) t(x)",int8.sql,SAME,,"[(Decimal('-2.5'), -3), (Decimal('-1.5'), -2), (Decimal('-0.5'), -1), (Decimal('0.0'), 0), (Decimal('0.5'), 1), (Decimal('1.5'), 2), (Decimal('2.5'), 3)]"
postgresql,postgresql,"SELECT a, b, gcd(a, b), gcd(a, -b), gcd(b, a), gcd(-b, a) FROM (VALUES (0::int8, 0::int8),              (0::int8, 29893644334::int8),              (288484263558::int8, 29893644334::int8),              (-288484263558::int8, 29893644334::int8),              ((-9223372036854775808)::int8, 1::int8),              ((-9223372036854775808)::int8, 9223372036854775807::int8),              ((-9223372036854775808)::int8, 4611686018427387904::int8)) AS v(a, b)",int8.sql,SAME,,"[(0, 0, 0, 0, 0, 0), (0, 29893644334, 29893644334, 29893644334, 29893644334, 29893644334), (288484263558, 29893644334, 6835958, 6835958, 6835958, 6835958), (-288484263558, 29893644334, 6835958, 6835958, 6835958, 6835958), (-9223372036854775808, 1, 1, 1, 1, 1), (-9223372036854775808, 9223372036854775807, 1, 1, 1, 1), (-9223372036854775808, 4611686018427387904, 4611686018427387904, 4611686018427387904, 4611686018427387904, 4611686018427387904)]"
postgresql,postgresql,"SELECT a, b, lcm(a, b), lcm(a, -b), lcm(b, a), lcm(-b, a) FROM (VALUES (0::int8, 0::int8),              (0::int8, 29893644334::int8),              (29893644334::int8, 29893644334::int8),              (288484263558::int8, 29893644334::int8),              (-288484263558::int8, 29893644334::int8),              ((-9223372036854775808)::int8, 0::int8)) AS v(a, b)",int8.sql,SAME,,"[(0, 0, 0, 0, 0, 0), (0, 29893644334, 0, 0, 0, 0), (29893644334, 29893644334, 29893644334, 29893644334, 29893644334, 29893644334), (288484263558, 29893644334, 1261541684539134, 1261541684539134, 1261541684539134, 1261541684539134), (-288484263558, 29893644334, 1261541684539134, 1261541684539134, 1261541684539134, 1261541684539134), (-9223372036854775808, 0, 0, 0, 0, 0)]"
postgresql,postgresql,SELECT int8 '0b100101',int8.sql,SAME,,"[(37,)]"
postgresql,postgresql,SELECT int8 '0o273',int8.sql,SAME,,"[(187,)]"
postgresql,postgresql,SELECT int8 '0x42F',int8.sql,SAME,,"[(1071,)]"
postgresql,postgresql,SELECT int8 '0b111111111111111111111111111111111111111111111111111111111111111',int8.sql,SAME,,"[(9223372036854775807,)]"
postgresql,postgresql,SELECT int8 '0o777777777777777777777',int8.sql,SAME,,"[(9223372036854775807,)]"
postgresql,postgresql,SELECT int8 '0x7FFFFFFFFFFFFFFF',int8.sql,SAME,,"[(9223372036854775807,)]"
postgresql,postgresql,SELECT int8 '-0b1000000000000000000000000000000000000000000000000000000000000000',int8.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,SELECT int8 '-0o1000000000000000000000',int8.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,SELECT int8 '-0x8000000000000000',int8.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,SELECT int8 '1_000_000',int8.sql,SAME,,"[(1000000,)]"
postgresql,postgresql,SELECT int8 '1_2_3',int8.sql,SAME,,"[(123,)]"
postgresql,postgresql,SELECT int8 '0x1EEE_FFFF',int8.sql,SAME,,"[(518979583,)]"
postgresql,postgresql,SELECT int8 '0o2_73',int8.sql,SAME,,"[(187,)]"
postgresql,postgresql,SELECT int8 '0b_10_0101',int8.sql,SAME,,"[(37,)]"
postgresql,postgresql,SET DATESTYLE = 'ISO',interval.sql,SAME,,[]
postgresql,postgresql,SET IntervalStyle to postgres,interval.sql,SAME,,[]
postgresql,postgresql,"SELECT INTERVAL '01:00' AS ""One hour""",interval.sql,SAME,,"[(datetime.timedelta(seconds=3600),)]"
postgresql,postgresql,"SELECT INTERVAL '+02:00' AS ""Two hours""",interval.sql,SAME,,"[(datetime.timedelta(seconds=7200),)]"
postgresql,postgresql,"SELECT INTERVAL '-08:00' AS ""Eight hours""",interval.sql,SAME,,"[(datetime.timedelta(days=-1, seconds=57600),)]"
postgresql,postgresql,"SELECT INTERVAL '-1 +02:03' AS ""22 hours ago...""",interval.sql,SAME,,"[(datetime.timedelta(days=-1, seconds=7380),)]"
postgresql,postgresql,"SELECT INTERVAL '-1 days +02:03' AS ""22 hours ago...""",interval.sql,SAME,,"[(datetime.timedelta(days=-1, seconds=7380),)]"
postgresql,postgresql,"SELECT INTERVAL '1.5 weeks' AS ""Ten days twelve hours""",interval.sql,SAME,,"[(datetime.timedelta(days=10, seconds=43200),)]"
postgresql,postgresql,"SELECT INTERVAL '1.5 months' AS ""One month 15 days""",interval.sql,SAME,,"[(datetime.timedelta(days=45),)]"
postgresql,postgresql,"SELECT INTERVAL '10 years -11 month -12 days +13:14' AS ""9 years...""",interval.sql,SAME,,"[(datetime.timedelta(days=3303, seconds=47640),)]"
postgresql,postgresql,"SELECT pg_input_is_valid('1.5 weeks', 'interval')",interval.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('garbage', 'interval')",interval.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('@ 30 eons ago', 'interval')",interval.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('garbage', 'interval')",interval.sql,SAME,,"[('invalid input syntax for type interval: ""garbage""', None, None, '22007')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('@ 30 eons ago', 'interval')",interval.sql,SAME,,"[('invalid input syntax for type interval: ""@ 30 eons ago""', None, None, '22007')]"
postgresql,postgresql,SELECT * FROM INTERVAL_TBL,interval.sql,SAME,,"[(datetime.timedelta(seconds=60),), (datetime.timedelta(seconds=18000),), (datetime.timedelta(days=10),), (datetime.timedelta(days=12410),), (datetime.timedelta(days=90),), (datetime.timedelta(days=-1, seconds=86386),), (datetime.timedelta(days=1, seconds=7384),), (datetime.timedelta(days=2190),), (datetime.timedelta(days=150),), (datetime.timedelta(days=150, seconds=43200),)]"
postgresql,postgresql,SELECT * FROM INTERVAL_TBL    WHERE INTERVAL_TBL.f1 <> interval '@ 10 days',interval.sql,SAME,,"[(datetime.timedelta(seconds=60),), (datetime.timedelta(seconds=18000),), (datetime.timedelta(days=12410),), (datetime.timedelta(days=90),), (datetime.timedelta(days=-1, seconds=86386),), (datetime.timedelta(days=1, seconds=7384),), (datetime.timedelta(days=2190),), (datetime.timedelta(days=150),), (datetime.timedelta(days=150, seconds=43200),)]"
postgresql,postgresql,SELECT * FROM INTERVAL_TBL    WHERE INTERVAL_TBL.f1 <= interval '@ 5 hours',interval.sql,SAME,,"[(datetime.timedelta(seconds=60),), (datetime.timedelta(seconds=18000),), (datetime.timedelta(days=-1, seconds=86386),)]"
postgresql,postgresql,SELECT * FROM INTERVAL_TBL    WHERE INTERVAL_TBL.f1 < interval '@ 1 day',interval.sql,SAME,,"[(datetime.timedelta(seconds=60),), (datetime.timedelta(seconds=18000),), (datetime.timedelta(days=-1, seconds=86386),)]"
postgresql,postgresql,SELECT * FROM INTERVAL_TBL    WHERE INTERVAL_TBL.f1 = interval '@ 34 years',interval.sql,SAME,,"[(datetime.timedelta(days=12410),)]"
postgresql,postgresql,SELECT * FROM INTERVAL_TBL    WHERE INTERVAL_TBL.f1 >= interval '@ 1 month',interval.sql,SAME,,"[(datetime.timedelta(days=12410),), (datetime.timedelta(days=90),), (datetime.timedelta(days=2190),), (datetime.timedelta(days=150),), (datetime.timedelta(days=150, seconds=43200),)]"
postgresql,postgresql,SELECT * FROM INTERVAL_TBL    WHERE INTERVAL_TBL.f1 > interval '@ 3 seconds ago',interval.sql,SAME,,"[(datetime.timedelta(seconds=60),), (datetime.timedelta(seconds=18000),), (datetime.timedelta(days=10),), (datetime.timedelta(days=12410),), (datetime.timedelta(days=90),), (datetime.timedelta(days=1, seconds=7384),), (datetime.timedelta(days=2190),), (datetime.timedelta(days=150),), (datetime.timedelta(days=150, seconds=43200),)]"
postgresql,postgresql,"SELECT r1.*, r2.*    FROM INTERVAL_TBL r1, INTERVAL_TBL r2    WHERE r1.f1 > r2.f1    ORDER BY r1.f1, r2.f1",interval.sql,SAME,,"[(datetime.timedelta(seconds=60), datetime.timedelta(days=-1, seconds=86386)), (datetime.timedelta(seconds=18000), datetime.timedelta(days=-1, seconds=86386)), (datetime.timedelta(seconds=18000), datetime.timedelta(seconds=60)), (datetime.timedelta(days=1, seconds=7384), datetime.timedelta(days=-1, seconds=86386)), (datetime.timedelta(days=1, seconds=7384), datetime.timedelta(seconds=60)), (datetime.timedelta(days=1, seconds=7384), datetime.timedelta(seconds=18000)), (datetime.timedelta(days=10), datetime.timedelta(days=-1, seconds=86386)), (datetime.timedelta(days=10), datetime.timedelta(seconds=60)), (datetime.timedelta(days=10), datetime.timedelta(seconds=18000)), (datetime.timedelta(days=10), datetime.timedelta(days=1, seconds=7384)), (datetime.timedelta(days=90), datetime.timedelta(days=-1, seconds=86386)), (datetime.timedelta(days=90), datetime.timedelta(seconds=60)), (datetime.timedelta(days=90), datetime.timedelta(seconds=18000)), (datetime.timedelta(days=90), datetime.timedelta(days=1, seconds=7384)), (datetime.timedelta(days=90), datetime.timedelta(days=10)), (datetime.timedelta(days=150), datetime.timedelta(days=-1, seconds=86386)), (datetime.timedelta(days=150), datetime.timedelta(seconds=60)), (datetime.timedelta(days=150), datetime.timedelta(seconds=18000)), (datetime.timedelta(days=150), datetime.timedelta(days=1, seconds=7384)), (datetime.timedelta(days=150), datetime.timedelta(days=10)), (datetime.timedelta(days=150), datetime.timedelta(days=90)), (datetime.timedelta(days=150, seconds=43200), datetime.timedelta(days=-1, seconds=86386)), (datetime.timedelta(days=150, seconds=43200), datetime.timedelta(seconds=60)), (datetime.timedelta(days=150, seconds=43200), datetime.timedelta(seconds=18000)), (datetime.timedelta(days=150, seconds=43200), datetime.timedelta(days=1, seconds=7384)), (datetime.timedelta(days=150, seconds=43200), datetime.timedelta(days=10)), (datetime.timedelta(days=150, seconds=43200), datetime.timedelta(days=90)), (datetime.timedelta(days=150, seconds=43200), datetime.timedelta(days=150)), (datetime.timedelta(days=2190), datetime.timedelta(days=-1, seconds=86386)), (datetime.timedelta(days=2190), datetime.timedelta(seconds=60)), (datetime.timedelta(days=2190), datetime.timedelta(seconds=18000)), (datetime.timedelta(days=2190), datetime.timedelta(days=1, seconds=7384)), (datetime.timedelta(days=2190), datetime.timedelta(days=10)), (datetime.timedelta(days=2190), datetime.timedelta(days=90)), (datetime.timedelta(days=2190), datetime.timedelta(days=150)), (datetime.timedelta(days=2190), datetime.timedelta(days=150, seconds=43200)), (datetime.timedelta(days=12410), datetime.timedelta(days=-1, seconds=86386)), (datetime.timedelta(days=12410), datetime.timedelta(seconds=60)), (datetime.timedelta(days=12410), datetime.timedelta(seconds=18000)), (datetime.timedelta(days=12410), datetime.timedelta(days=1, seconds=7384)), (datetime.timedelta(days=12410), datetime.timedelta(days=10)), (datetime.timedelta(days=12410), datetime.timedelta(days=90)), (datetime.timedelta(days=12410), datetime.timedelta(days=150)), (datetime.timedelta(days=12410), datetime.timedelta(days=150, seconds=43200)), (datetime.timedelta(days=12410), datetime.timedelta(days=2190))]"
postgresql,postgresql,"SELECT f1, -f1 FROM INTERVAL_TBL",interval.sql,SAME,,"[(datetime.timedelta(seconds=60), datetime.timedelta(days=-1, seconds=86340)), (datetime.timedelta(seconds=18000), datetime.timedelta(days=-1, seconds=68400)), (datetime.timedelta(days=10), datetime.timedelta(days=-10)), (datetime.timedelta(days=12410), datetime.timedelta(days=-12410)), (datetime.timedelta(days=90), datetime.timedelta(days=-90)), (datetime.timedelta(days=-1, seconds=86386), datetime.timedelta(seconds=14)), (datetime.timedelta(days=1, seconds=7384), datetime.timedelta(days=-2, seconds=79016)), (datetime.timedelta(days=2190), datetime.timedelta(days=-2190)), (datetime.timedelta(days=150), datetime.timedelta(days=-150)), (datetime.timedelta(days=150, seconds=43200), datetime.timedelta(days=-151, seconds=43200))]"
postgresql,postgresql,CREATE TEMP TABLE INTERVAL_TBL_OF (f1 interval),interval.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON INTERVAL_TBL_OF USING btree (f1),interval.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO false,interval.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT f1 FROM INTERVAL_TBL_OF r1 ORDER BY f1,interval.sql,SAME,,"[('Index Only Scan using interval_tbl_of_f1_idx on interval_tbl_of r1',)]"
postgresql,postgresql,RESET enable_seqscan,interval.sql,SAME,,[]
postgresql,postgresql,SELECT f1 - f1 FROM INTERVAL_TBL_OF,interval.sql,SAME,,"[(datetime.timedelta(0),), (datetime.timedelta(0),), (datetime.timedelta(0),), (datetime.timedelta(0),), (datetime.timedelta(0),)]"
postgresql,postgresql,SELECT span * 8.2 AS product FROM INTERVAL_MULDIV_TBL,interval.sql,SAME,,[]
postgresql,postgresql,SELECT span / 10 AS quotient FROM INTERVAL_MULDIV_TBL,interval.sql,SAME,,[]
postgresql,postgresql,SELECT span / 100 AS quotient FROM INTERVAL_MULDIV_TBL,interval.sql,SAME,,[]
postgresql,postgresql,SET DATESTYLE = 'postgres',interval.sql,SAME,,[]
postgresql,postgresql,SET IntervalStyle to postgres_verbose,interval.sql,SAME,,[]
postgresql,postgresql,select avg(f1) from interval_tbl where isfinite(f1),interval.sql,SAME,,"[(datetime.timedelta(days=1500),)]"
postgresql,postgresql,select '4 millenniums 5 centuries 4 decades 1 year 4 months 4 days 17 minutes 31 seconds'::interval,interval.sql,SAME,,"[(datetime.timedelta(days=1657589),)]"
postgresql,postgresql,"SELECT justify_hours(interval '6 months 3 days 52 hours 3 minutes 2 seconds') as ""6 mons 5 days 4 hours 3 mins 2 seconds""",interval.sql,SAME,,"[(datetime.timedelta(days=185),)]"
postgresql,postgresql,"SELECT justify_days(interval '6 months 36 days 5 hours 4 minutes 3 seconds') as ""7 mons 6 days 5 hours 4 mins 3 seconds""",interval.sql,SAME,,"[(datetime.timedelta(days=216),)]"
postgresql,postgresql,"SELECT justify_interval(interval '1 month -1 hour') as ""1 month -1 hour""",interval.sql,SAME,,"[(datetime.timedelta(days=29),)]"
postgresql,postgresql,SET DATESTYLE = 'ISO',interval.sql,SAME,,[]
postgresql,postgresql,SET IntervalStyle TO postgres,interval.sql,SAME,,[]
postgresql,postgresql,"SELECT '1 millisecond'::interval, '1 microsecond'::interval,        '500 seconds 99 milliseconds 51 microseconds'::interval",interval.sql,SAME,,"[(datetime.timedelta(microseconds=1000), datetime.timedelta(microseconds=1), datetime.timedelta(seconds=500, microseconds=99051))]"
postgresql,postgresql,SELECT '3 days 5 milliseconds'::interval,interval.sql,SAME,,"[(datetime.timedelta(days=3, microseconds=5000),)]"
postgresql,postgresql,SELECT interval '1-2',interval.sql,SAME,,"[(datetime.timedelta(days=425),)]"
postgresql,postgresql,SELECT interval '999' second,interval.sql,SAME,,"[(datetime.timedelta(seconds=999),)]"
postgresql,postgresql,SELECT interval '999' minute,interval.sql,SAME,,"[(datetime.timedelta(seconds=59940),)]"
postgresql,postgresql,SELECT interval '999' hour,interval.sql,SAME,,"[(datetime.timedelta(days=41, seconds=54000),)]"
postgresql,postgresql,SELECT interval '999' day,interval.sql,SAME,,"[(datetime.timedelta(days=999),)]"
postgresql,postgresql,SELECT interval '999' month,interval.sql,SAME,,"[(datetime.timedelta(days=30385),)]"
postgresql,postgresql,SELECT interval '1' year,interval.sql,SAME,,"[(datetime.timedelta(days=365),)]"
postgresql,postgresql,SELECT interval '2' month,interval.sql,SAME,,"[(datetime.timedelta(days=60),)]"
postgresql,postgresql,SELECT interval '3' day,interval.sql,SAME,,"[(datetime.timedelta(days=3),)]"
postgresql,postgresql,SELECT interval '4' hour,interval.sql,SAME,,"[(datetime.timedelta(seconds=14400),)]"
postgresql,postgresql,SELECT interval '5' minute,interval.sql,SAME,,"[(datetime.timedelta(seconds=300),)]"
postgresql,postgresql,SELECT interval '6' second,interval.sql,SAME,,"[(datetime.timedelta(seconds=6),)]"
postgresql,postgresql,SELECT interval '1' year to month,interval.sql,SAME,,"[(datetime.timedelta(days=30),)]"
postgresql,postgresql,SELECT interval '1-2' year to month,interval.sql,SAME,,"[(datetime.timedelta(days=425),)]"
postgresql,postgresql,SELECT interval '1 2' day to hour,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7200),)]"
postgresql,postgresql,SELECT interval '1 2:03' day to hour,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7200),)]"
postgresql,postgresql,SELECT interval '1 2:03:04' day to hour,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7200),)]"
postgresql,postgresql,SELECT interval '1 2:03' day to minute,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7380),)]"
postgresql,postgresql,SELECT interval '1 2:03:04' day to minute,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7380),)]"
postgresql,postgresql,SELECT interval '1 2:03' day to second,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7380),)]"
postgresql,postgresql,SELECT interval '1 2:03:04' day to second,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7384),)]"
postgresql,postgresql,SELECT interval '1 2:03' hour to minute,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7380),)]"
postgresql,postgresql,SELECT interval '1 2:03:04' hour to minute,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7380),)]"
postgresql,postgresql,SELECT interval '1 2:03' hour to second,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7380),)]"
postgresql,postgresql,SELECT interval '1 2:03:04' hour to second,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7384),)]"
postgresql,postgresql,SELECT interval '1 2:03' minute to second,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=123),)]"
postgresql,postgresql,SELECT interval '1 2:03:04' minute to second,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7384),)]"
postgresql,postgresql,SELECT interval '1 +2:03' minute to second,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=123),)]"
postgresql,postgresql,SELECT interval '1 +2:03:04' minute to second,interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7384),)]"
postgresql,postgresql,SELECT interval '1 -2:03' minute to second,interval.sql,SAME,,"[(datetime.timedelta(seconds=86277),)]"
postgresql,postgresql,SELECT interval '1 -2:03:04' minute to second,interval.sql,SAME,,"[(datetime.timedelta(seconds=79016),)]"
postgresql,postgresql,SELECT interval '123 11' day to hour,interval.sql,SAME,,"[(datetime.timedelta(days=123, seconds=39600),)]"
postgresql,postgresql,SELECT interval(0) '1 day 01:23:45.6789',interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=5026),)]"
postgresql,postgresql,SELECT interval(2) '1 day 01:23:45.6789',interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=5025, microseconds=680000),)]"
postgresql,postgresql,SELECT interval '12:34.5678' minute to second(2),interval.sql,SAME,,"[(datetime.timedelta(seconds=754, microseconds=570000),)]"
postgresql,postgresql,SELECT interval '1.234' second,interval.sql,SAME,,"[(datetime.timedelta(seconds=1, microseconds=234000),)]"
postgresql,postgresql,SELECT interval '1.234' second(2),interval.sql,SAME,,"[(datetime.timedelta(seconds=1, microseconds=230000),)]"
postgresql,postgresql,SELECT interval '1 2:03' day to second(2),interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7380),)]"
postgresql,postgresql,SELECT interval '1 2:03.4567' day to second(2),interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=123, microseconds=460000),)]"
postgresql,postgresql,SELECT interval '1 2:03:04.5678' day to second(2),interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7384, microseconds=570000),)]"
postgresql,postgresql,SELECT interval '1 2:03.45678' hour to second(2),interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=123, microseconds=460000),)]"
postgresql,postgresql,SELECT interval '1 2:03:04.5678' hour to second(2),interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7384, microseconds=570000),)]"
postgresql,postgresql,SELECT interval '1 2:03.5678' minute to second(2),interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=123, microseconds=570000),)]"
postgresql,postgresql,SELECT interval '1 2:03:04.5678' minute to second(2),interval.sql,SAME,,"[(datetime.timedelta(days=1, seconds=7384, microseconds=570000),)]"
postgresql,postgresql,"SELECT f1, f1::INTERVAL DAY TO MINUTE AS ""minutes"",   (f1 + INTERVAL '1 month')::INTERVAL MONTH::INTERVAL YEAR AS ""years""   FROM interval_tbl",interval.sql,SAME,,"[(datetime.timedelta(seconds=60), datetime.timedelta(seconds=60), datetime.timedelta(0)), (datetime.timedelta(seconds=18000), datetime.timedelta(seconds=18000), datetime.timedelta(0)), (datetime.timedelta(days=10), datetime.timedelta(days=10), datetime.timedelta(0)), (datetime.timedelta(days=12410), datetime.timedelta(days=12410), datetime.timedelta(days=12410)), (datetime.timedelta(days=90), datetime.timedelta(days=90), datetime.timedelta(0)), (datetime.timedelta(days=-1, seconds=86386), datetime.timedelta(0), datetime.timedelta(0)), (datetime.timedelta(days=1, seconds=7384), datetime.timedelta(days=1, seconds=7380), datetime.timedelta(0)), (datetime.timedelta(days=2190), datetime.timedelta(days=2190), datetime.timedelta(days=2190)), (datetime.timedelta(days=150), datetime.timedelta(days=150), datetime.timedelta(0)), (datetime.timedelta(days=150, seconds=43200), datetime.timedelta(days=150, seconds=43200), datetime.timedelta(0))]"
postgresql,postgresql,SET IntervalStyle TO sql_standard,interval.sql,SAME,,[]
postgresql,postgresql,SET IntervalStyle TO postgres,interval.sql,SAME,,[]
postgresql,postgresql,"SELECT  interval '+1 -1:00:00',         interval '-1 +1:00:00',         interval '+1-2 -3 +4:05:06.789',         interval '-1-2 +3 -4:05:06.789'",interval.sql,SAME,,"[(datetime.timedelta(seconds=82800), datetime.timedelta(days=-1, seconds=3600), datetime.timedelta(days=422, seconds=14706, microseconds=789000), datetime.timedelta(days=-423, seconds=71693, microseconds=211000))]"
postgresql,postgresql,"SELECT  interval '-23 hours 45 min 12.34 sec',         interval '-1 day 23 hours 45 min 12.34 sec',         interval '-1 year 2 months 1 day 23 hours 45 min 12.34 sec',         interval '-1 year 2 months 1 day 23 hours 45 min +12.34 sec'",interval.sql,SAME,,"[(datetime.timedelta(days=-1, seconds=6312, microseconds=340000), datetime.timedelta(days=-1, seconds=85512, microseconds=340000), datetime.timedelta(days=-299, seconds=85512, microseconds=340000), datetime.timedelta(days=-299, seconds=85512, microseconds=340000))]"
postgresql,postgresql,SET IntervalStyle TO sql_standard,interval.sql,SAME,,[]
postgresql,postgresql,"SELECT  interval '1 day -1 hours',         interval '-1 days +1 hours',         interval '1 years 2 months -3 days 4 hours 5 minutes 6.789 seconds',         - interval '1 years 2 months -3 days 4 hours 5 minutes 6.789 seconds'",interval.sql,SAME,,"[(datetime.timedelta(days=-1, seconds=46800), datetime.timedelta(days=-1, seconds=46800), datetime.timedelta(days=-52, seconds=50093, microseconds=211000), datetime.timedelta(days=-52, seconds=50093, microseconds=211000))]"
postgresql,postgresql,"SELECT  interval '-23 hours 45 min 12.34 sec',         interval '-1 day 23 hours 45 min 12.34 sec',         interval '-1 year 2 months 1 day 23 hours 45 min 12.34 sec',         interval '-1 year 2 months 1 day 23 hours 45 min +12.34 sec'",interval.sql,SAME,,"[(datetime.timedelta(days=-1, seconds=887, microseconds=660000), datetime.timedelta(days=-6, seconds=72887, microseconds=660000), datetime.timedelta(days=-506, seconds=72887, microseconds=660000), datetime.timedelta(days=-422, seconds=15287, microseconds=660000))]"
postgresql,postgresql,SET IntervalStyle to iso_8601,interval.sql,SAME,,[]
postgresql,postgresql,SET IntervalStyle to sql_standard,interval.sql,SAME,,[]
postgresql,postgresql,SET IntervalStyle to postgres,interval.sql,SAME,,[]
postgresql,postgresql,"select  interval 'P00021015T103020'       AS ""ISO8601 Basic Format"",         interval 'P0002-10-15T10:30:20'   AS ""ISO8601 Extended Format""",interval.sql,SAME,,"[(datetime.timedelta(days=1045, seconds=37820), datetime.timedelta(days=1045, seconds=37820))]"
postgresql,postgresql,"select  interval 'P0002'                  AS ""year only"",         interval 'P0002-10'               AS ""year month"",         interval 'P0002-10-15'            AS ""year month day"",         interval 'P0002T1S'               AS ""year only plus time"",         interval 'P0002-10T1S'            AS ""year month plus time"",         interval 'P0002-10-15T1S'         AS ""year month day plus time"",         interval 'PT10'                   AS ""hour only"",         interval 'PT10:30'                AS ""hour minute""",interval.sql,SAME,,"[(datetime.timedelta(days=730), datetime.timedelta(days=1030), datetime.timedelta(days=1045), datetime.timedelta(days=730, seconds=1), datetime.timedelta(days=1030, seconds=1), datetime.timedelta(days=1045, seconds=1), datetime.timedelta(seconds=36000), datetime.timedelta(seconds=37800))]"
postgresql,postgresql,select interval 'P1Y0M3DT4H5M6S',interval.sql,SAME,,"[(datetime.timedelta(days=368, seconds=14706),)]"
postgresql,postgresql,select interval 'P1.0Y0M3DT4H5M6S',interval.sql,SAME,,"[(datetime.timedelta(days=368, seconds=14706),)]"
postgresql,postgresql,select interval 'P1.1Y0M3DT4H5M6S',interval.sql,SAME,,"[(datetime.timedelta(days=398, seconds=14706),)]"
postgresql,postgresql,select interval 'P1.Y0M3DT4H5M6S',interval.sql,SAME,,"[(datetime.timedelta(days=368, seconds=14706),)]"
postgresql,postgresql,select interval 'P.1Y0M3DT4H5M6S',interval.sql,SAME,,"[(datetime.timedelta(days=33, seconds=14706),)]"
postgresql,postgresql,select interval 'P10.5e4Y',interval.sql,SAME,,"[(datetime.timedelta(days=38325000),)]"
postgresql,postgresql,SET IntervalStyle to postgres_verbose,interval.sql,SAME,,[]
postgresql,postgresql,select interval '-10 mons -3 days +03:55:06.70',interval.sql,SAME,,"[(datetime.timedelta(days=303),)]"
postgresql,postgresql,select interval '1 year 2 mons 3 days 04:05:06.699999',interval.sql,SAME,,"[(datetime.timedelta(days=428),)]"
postgresql,postgresql,SET IntervalStyle to postgres,interval.sql,SAME,,[]
postgresql,postgresql,SET IntervalStyle to sql_standard,interval.sql,SAME,,[]
postgresql,postgresql,SET IntervalStyle to iso_8601,interval.sql,SAME,,[]
postgresql,postgresql,SET IntervalStyle to postgres_verbose,interval.sql,SAME,,[]
postgresql,postgresql,select '30 days'::interval = '1 month'::interval as t,interval.sql,SAME,,"[(True,)]"
postgresql,postgresql,select interval_hash('30 days'::interval) = interval_hash('1 month'::interval) as t,interval.sql,SAME,,"[(True,)]"
postgresql,postgresql,select make_interval(years := 2),interval.sql,SAME,,"[(datetime.timedelta(days=730),)]"
postgresql,postgresql,"select make_interval(years := 1, months := 6)",interval.sql,SAME,,"[(datetime.timedelta(days=545),)]"
postgresql,postgresql,"select make_interval(years := 1, months := -1, weeks := 5, days := -7, hours := 25, mins := -180)",interval.sql,SAME,,"[(datetime.timedelta(days=358),)]"
postgresql,postgresql,"select make_interval() = make_interval(years := 0, months := 0, weeks := 0, days := 0, mins := 0, secs := 0.0)",interval.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select make_interval(hours := -2, mins := -10, secs := -25.3)",interval.sql,SAME,,"[(datetime.timedelta(days=6300),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM INTERVAL '100 y'),interval.sql,SAME,,"[(Decimal('10'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM INTERVAL '99 y'),interval.sql,SAME,,"[(Decimal('9'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM INTERVAL '-99 y'),interval.sql,SAME,,"[(Decimal('-9'),)]"
postgresql,postgresql,SELECT EXTRACT(DECADE FROM INTERVAL '-100 y'),interval.sql,SAME,,"[(Decimal('-10'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM INTERVAL '100 y'),interval.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM INTERVAL '99 y'),interval.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM INTERVAL '-99 y'),interval.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,SELECT EXTRACT(CENTURY FROM INTERVAL '-100 y'),interval.sql,SAME,,"[(Decimal('-1'),)]"
postgresql,postgresql,SELECT extract(epoch from interval '1000000000 days'),interval.sql,SAME,,"[(Decimal('86400000000000.000000'),)]"
postgresql,postgresql,"SELECT i, isfinite(i) FROM INFINITE_INTERVAL_TBL",interval.sql,SAME,,[]
postgresql,postgresql,"SELECT lhst.i lhs,     rhst.i rhs,     lhst.i < rhst.i AS lt,     lhst.i <= rhst.i AS le,     lhst.i = rhst.i AS eq,     lhst.i > rhst.i AS gt,     lhst.i >= rhst.i AS ge,     lhst.i <> rhst.i AS ne     FROM INFINITE_INTERVAL_TBL lhst CROSS JOIN INFINITE_INTERVAL_TBL rhst     WHERE NOT isfinite(lhst.i)",interval.sql,SAME,,[]
postgresql,postgresql,"SELECT i AS interval,     -i AS um,     i * 2.0 AS mul,     i * -2.0 AS mul_neg,     i * 'infinity' AS mul_inf,     i * '-infinity' AS mul_inf_neg,     i / 3.0 AS div,     i / -3.0 AS div_neg     FROM INFINITE_INTERVAL_TBL     WHERE NOT isfinite(i)",interval.sql,SAME,,[]
postgresql,postgresql,"SELECT i AS interval, date_trunc('hour', i)     FROM INFINITE_INTERVAL_TBL     WHERE NOT isfinite(i)",interval.sql,SAME,,[]
postgresql,postgresql,"SELECT i AS interval, justify_days(i), justify_hours(i), justify_interval(i)     FROM INFINITE_INTERVAL_TBL     WHERE NOT isfinite(i)",interval.sql,SAME,,[]
postgresql,postgresql,SELECT INTERVAL '42 days 2 seconds ago ago',interval.sql,SAME,,"[(datetime.timedelta(days=42),)]"
postgresql,postgresql,SELECT INTERVAL '2 minutes ago 5 days',interval.sql,SAME,,"[(datetime.timedelta(days=5),)]"
postgresql,postgresql,SELECT INTERVAL 'hour 5 months',interval.sql,SAME,,"[(datetime.timedelta(days=150),)]"
postgresql,postgresql,SELECT INTERVAL '1 year months days 5 hours',interval.sql,SAME,,"[(datetime.timedelta(days=365),)]"
postgresql,postgresql,create temp table onerow(),join.sql,SAME,,[]
postgresql,postgresql,analyze onerow,join.sql,SAME,,[]
postgresql,postgresql,SELECT *   FROM J1_TBL AS tx,join.sql,SAME,,"[(1, 4, 'one'), (2, 3, 'two'), (3, 2, 'three'), (4, 1, 'four'), (5, 0, 'five'), (6, 6, 'six'), (7, 7, 'seven'), (8, 8, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, 0, 'zero')]"
postgresql,postgresql,SELECT *   FROM J1_TBL tx,join.sql,SAME,,"[(1, 4, 'one'), (2, 3, 'two'), (3, 2, 'three'), (4, 1, 'four'), (5, 0, 'five'), (6, 6, 'six'), (7, 7, 'seven'), (8, 8, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, 0, 'zero')]"
postgresql,postgresql,"SELECT *   FROM J1_TBL AS t1 (a, b, c)",join.sql,SAME,,"[(1, 4, 'one'), (2, 3, 'two'), (3, 2, 'three'), (4, 1, 'four'), (5, 0, 'five'), (6, 6, 'six'), (7, 7, 'seven'), (8, 8, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, 0, 'zero')]"
postgresql,postgresql,"SELECT *   FROM J1_TBL t1 (a, b, c)",join.sql,SAME,,"[(1, 4, 'one'), (2, 3, 'two'), (3, 2, 'three'), (4, 1, 'four'), (5, 0, 'five'), (6, 6, 'six'), (7, 7, 'seven'), (8, 8, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, 0, 'zero')]"
postgresql,postgresql,"SELECT *   FROM J1_TBL t1 (a, b, c), J2_TBL t2 (d, e)",join.sql,SAME,,"[(1, 4, 'one', 1, -1), (2, 3, 'two', 1, -1), (3, 2, 'three', 1, -1), (4, 1, 'four', 1, -1), (5, 0, 'five', 1, -1), (6, 6, 'six', 1, -1), (7, 7, 'seven', 1, -1), (8, 8, 'eight', 1, -1), (0, None, 'zero', 1, -1), (None, None, 'null', 1, -1), (None, 0, 'zero', 1, -1), (1, 4, 'one', 2, 2), (2, 3, 'two', 2, 2), (3, 2, 'three', 2, 2), (4, 1, 'four', 2, 2), (5, 0, 'five', 2, 2), (6, 6, 'six', 2, 2), (7, 7, 'seven', 2, 2), (8, 8, 'eight', 2, 2), (0, None, 'zero', 2, 2), (None, None, 'null', 2, 2), (None, 0, 'zero', 2, 2), (1, 4, 'one', 3, -3), (2, 3, 'two', 3, -3), (3, 2, 'three', 3, -3), (4, 1, 'four', 3, -3), (5, 0, 'five', 3, -3), (6, 6, 'six', 3, -3), (7, 7, 'seven', 3, -3), (8, 8, 'eight', 3, -3), (0, None, 'zero', 3, -3), (None, None, 'null', 3, -3), (None, 0, 'zero', 3, -3), (1, 4, 'one', 2, 4), (2, 3, 'two', 2, 4), (3, 2, 'three', 2, 4), (4, 1, 'four', 2, 4), (5, 0, 'five', 2, 4), (6, 6, 'six', 2, 4), (7, 7, 'seven', 2, 4), (8, 8, 'eight', 2, 4), (0, None, 'zero', 2, 4), (None, None, 'null', 2, 4), (None, 0, 'zero', 2, 4), (1, 4, 'one', 5, -5), (2, 3, 'two', 5, -5), (3, 2, 'three', 5, -5), (4, 1, 'four', 5, -5), (5, 0, 'five', 5, -5), (6, 6, 'six', 5, -5), (7, 7, 'seven', 5, -5), (8, 8, 'eight', 5, -5), (0, None, 'zero', 5, -5), (None, None, 'null', 5, -5), (None, 0, 'zero', 5, -5), (1, 4, 'one', 5, -5), (2, 3, 'two', 5, -5), (3, 2, 'three', 5, -5), (4, 1, 'four', 5, -5), (5, 0, 'five', 5, -5), (6, 6, 'six', 5, -5), (7, 7, 'seven', 5, -5), (8, 8, 'eight', 5, -5), (0, None, 'zero', 5, -5), (None, None, 'null', 5, -5), (None, 0, 'zero', 5, -5), (1, 4, 'one', 0, None), (2, 3, 'two', 0, None), (3, 2, 'three', 0, None), (4, 1, 'four', 0, None), (5, 0, 'five', 0, None), (6, 6, 'six', 0, None), (7, 7, 'seven', 0, None), (8, 8, 'eight', 0, None), (0, None, 'zero', 0, None), (None, None, 'null', 0, None), (None, 0, 'zero', 0, None), (1, 4, 'one', None, None), (2, 3, 'two', None, None), (3, 2, 'three', None, None), (4, 1, 'four', None, None), (5, 0, 'five', None, None), (6, 6, 'six', None, None), (7, 7, 'seven', None, None), (8, 8, 'eight', None, None), (0, None, 'zero', None, None), (None, None, 'null', None, None), (None, 0, 'zero', None, None), (1, 4, 'one', None, 0), (2, 3, 'two', None, 0), (3, 2, 'three', None, 0), (4, 1, 'four', None, 0), (5, 0, 'five', None, 0), (6, 6, 'six', None, 0), (7, 7, 'seven', None, 0), (8, 8, 'eight', None, 0), (0, None, 'zero', None, 0), (None, None, 'null', None, 0), (None, 0, 'zero', None, 0)]"
postgresql,postgresql,"SELECT t1.a, t2.e   FROM J1_TBL t1 (a, b, c), J2_TBL t2 (d, e)   WHERE t1.a = t2.d",join.sql,SAME,,"[(0, None), (1, -1), (2, 2), (2, 4), (3, -3), (5, -5), (5, -5)]"
postgresql,postgresql,SELECT *   FROM J1_TBL CROSS JOIN J2_TBL,join.sql,SAME,,"[(1, 4, 'one', 1, -1), (2, 3, 'two', 1, -1), (3, 2, 'three', 1, -1), (4, 1, 'four', 1, -1), (5, 0, 'five', 1, -1), (6, 6, 'six', 1, -1), (7, 7, 'seven', 1, -1), (8, 8, 'eight', 1, -1), (0, None, 'zero', 1, -1), (None, None, 'null', 1, -1), (None, 0, 'zero', 1, -1), (1, 4, 'one', 2, 2), (2, 3, 'two', 2, 2), (3, 2, 'three', 2, 2), (4, 1, 'four', 2, 2), (5, 0, 'five', 2, 2), (6, 6, 'six', 2, 2), (7, 7, 'seven', 2, 2), (8, 8, 'eight', 2, 2), (0, None, 'zero', 2, 2), (None, None, 'null', 2, 2), (None, 0, 'zero', 2, 2), (1, 4, 'one', 3, -3), (2, 3, 'two', 3, -3), (3, 2, 'three', 3, -3), (4, 1, 'four', 3, -3), (5, 0, 'five', 3, -3), (6, 6, 'six', 3, -3), (7, 7, 'seven', 3, -3), (8, 8, 'eight', 3, -3), (0, None, 'zero', 3, -3), (None, None, 'null', 3, -3), (None, 0, 'zero', 3, -3), (1, 4, 'one', 2, 4), (2, 3, 'two', 2, 4), (3, 2, 'three', 2, 4), (4, 1, 'four', 2, 4), (5, 0, 'five', 2, 4), (6, 6, 'six', 2, 4), (7, 7, 'seven', 2, 4), (8, 8, 'eight', 2, 4), (0, None, 'zero', 2, 4), (None, None, 'null', 2, 4), (None, 0, 'zero', 2, 4), (1, 4, 'one', 5, -5), (2, 3, 'two', 5, -5), (3, 2, 'three', 5, -5), (4, 1, 'four', 5, -5), (5, 0, 'five', 5, -5), (6, 6, 'six', 5, -5), (7, 7, 'seven', 5, -5), (8, 8, 'eight', 5, -5), (0, None, 'zero', 5, -5), (None, None, 'null', 5, -5), (None, 0, 'zero', 5, -5), (1, 4, 'one', 5, -5), (2, 3, 'two', 5, -5), (3, 2, 'three', 5, -5), (4, 1, 'four', 5, -5), (5, 0, 'five', 5, -5), (6, 6, 'six', 5, -5), (7, 7, 'seven', 5, -5), (8, 8, 'eight', 5, -5), (0, None, 'zero', 5, -5), (None, None, 'null', 5, -5), (None, 0, 'zero', 5, -5), (1, 4, 'one', 0, None), (2, 3, 'two', 0, None), (3, 2, 'three', 0, None), (4, 1, 'four', 0, None), (5, 0, 'five', 0, None), (6, 6, 'six', 0, None), (7, 7, 'seven', 0, None), (8, 8, 'eight', 0, None), (0, None, 'zero', 0, None), (None, None, 'null', 0, None), (None, 0, 'zero', 0, None), (1, 4, 'one', None, None), (2, 3, 'two', None, None), (3, 2, 'three', None, None), (4, 1, 'four', None, None), (5, 0, 'five', None, None), (6, 6, 'six', None, None), (7, 7, 'seven', None, None), (8, 8, 'eight', None, None), (0, None, 'zero', None, None), (None, None, 'null', None, None), (None, 0, 'zero', None, None), (1, 4, 'one', None, 0), (2, 3, 'two', None, 0), (3, 2, 'three', None, 0), (4, 1, 'four', None, 0), (5, 0, 'five', None, 0), (6, 6, 'six', None, 0), (7, 7, 'seven', None, 0), (8, 8, 'eight', None, 0), (0, None, 'zero', None, 0), (None, None, 'null', None, 0), (None, 0, 'zero', None, 0)]"
postgresql,postgresql,"SELECT t1.i, k, t   FROM J1_TBL t1 CROSS JOIN J2_TBL t2",join.sql,SAME,,"[(1, -1, 'one'), (2, -1, 'two'), (3, -1, 'three'), (4, -1, 'four'), (5, -1, 'five'), (6, -1, 'six'), (7, -1, 'seven'), (8, -1, 'eight'), (0, -1, 'zero'), (None, -1, 'null'), (None, -1, 'zero'), (1, 2, 'one'), (2, 2, 'two'), (3, 2, 'three'), (4, 2, 'four'), (5, 2, 'five'), (6, 2, 'six'), (7, 2, 'seven'), (8, 2, 'eight'), (0, 2, 'zero'), (None, 2, 'null'), (None, 2, 'zero'), (1, -3, 'one'), (2, -3, 'two'), (3, -3, 'three'), (4, -3, 'four'), (5, -3, 'five'), (6, -3, 'six'), (7, -3, 'seven'), (8, -3, 'eight'), (0, -3, 'zero'), (None, -3, 'null'), (None, -3, 'zero'), (1, 4, 'one'), (2, 4, 'two'), (3, 4, 'three'), (4, 4, 'four'), (5, 4, 'five'), (6, 4, 'six'), (7, 4, 'seven'), (8, 4, 'eight'), (0, 4, 'zero'), (None, 4, 'null'), (None, 4, 'zero'), (1, -5, 'one'), (2, -5, 'two'), (3, -5, 'three'), (4, -5, 'four'), (5, -5, 'five'), (6, -5, 'six'), (7, -5, 'seven'), (8, -5, 'eight'), (0, -5, 'zero'), (None, -5, 'null'), (None, -5, 'zero'), (1, -5, 'one'), (2, -5, 'two'), (3, -5, 'three'), (4, -5, 'four'), (5, -5, 'five'), (6, -5, 'six'), (7, -5, 'seven'), (8, -5, 'eight'), (0, -5, 'zero'), (None, -5, 'null'), (None, -5, 'zero'), (1, None, 'one'), (2, None, 'two'), (3, None, 'three'), (4, None, 'four'), (5, None, 'five'), (6, None, 'six'), (7, None, 'seven'), (8, None, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, None, 'zero'), (1, None, 'one'), (2, None, 'two'), (3, None, 'three'), (4, None, 'four'), (5, None, 'five'), (6, None, 'six'), (7, None, 'seven'), (8, None, 'eight'), (0, None, 'zero'), (None, None, 'null'), (None, None, 'zero'), (1, 0, 'one'), (2, 0, 'two'), (3, 0, 'three'), (4, 0, 'four'), (5, 0, 'five'), (6, 0, 'six'), (7, 0, 'seven'), (8, 0, 'eight'), (0, 0, 'zero'), (None, 0, 'null'), (None, 0, 'zero')]"
postgresql,postgresql,"SELECT ii, tt, kk   FROM (J1_TBL CROSS JOIN J2_TBL)     AS tx (ii, jj, tt, ii2, kk)",join.sql,SAME,,"[(1, 'one', -1), (2, 'two', -1), (3, 'three', -1), (4, 'four', -1), (5, 'five', -1), (6, 'six', -1), (7, 'seven', -1), (8, 'eight', -1), (0, 'zero', -1), (None, 'null', -1), (None, 'zero', -1), (1, 'one', 2), (2, 'two', 2), (3, 'three', 2), (4, 'four', 2), (5, 'five', 2), (6, 'six', 2), (7, 'seven', 2), (8, 'eight', 2), (0, 'zero', 2), (None, 'null', 2), (None, 'zero', 2), (1, 'one', -3), (2, 'two', -3), (3, 'three', -3), (4, 'four', -3), (5, 'five', -3), (6, 'six', -3), (7, 'seven', -3), (8, 'eight', -3), (0, 'zero', -3), (None, 'null', -3), (None, 'zero', -3), (1, 'one', 4), (2, 'two', 4), (3, 'three', 4), (4, 'four', 4), (5, 'five', 4), (6, 'six', 4), (7, 'seven', 4), (8, 'eight', 4), (0, 'zero', 4), (None, 'null', 4), (None, 'zero', 4), (1, 'one', -5), (2, 'two', -5), (3, 'three', -5), (4, 'four', -5), (5, 'five', -5), (6, 'six', -5), (7, 'seven', -5), (8, 'eight', -5), (0, 'zero', -5), (None, 'null', -5), (None, 'zero', -5), (1, 'one', -5), (2, 'two', -5), (3, 'three', -5), (4, 'four', -5), (5, 'five', -5), (6, 'six', -5), (7, 'seven', -5), (8, 'eight', -5), (0, 'zero', -5), (None, 'null', -5), (None, 'zero', -5), (1, 'one', None), (2, 'two', None), (3, 'three', None), (4, 'four', None), (5, 'five', None), (6, 'six', None), (7, 'seven', None), (8, 'eight', None), (0, 'zero', None), (None, 'null', None), (None, 'zero', None), (1, 'one', None), (2, 'two', None), (3, 'three', None), (4, 'four', None), (5, 'five', None), (6, 'six', None), (7, 'seven', None), (8, 'eight', None), (0, 'zero', None), (None, 'null', None), (None, 'zero', None), (1, 'one', 0), (2, 'two', 0), (3, 'three', 0), (4, 'four', 0), (5, 'five', 0), (6, 'six', 0), (7, 'seven', 0), (8, 'eight', 0), (0, 'zero', 0), (None, 'null', 0), (None, 'zero', 0)]"
postgresql,postgresql,"SELECT tx.ii, tx.jj, tx.kk   FROM (J1_TBL t1 (a, b, c) CROSS JOIN J2_TBL t2 (d, e))     AS tx (ii, jj, tt, ii2, kk)",join.sql,SAME,,"[(1, 4, -1), (2, 3, -1), (3, 2, -1), (4, 1, -1), (5, 0, -1), (6, 6, -1), (7, 7, -1), (8, 8, -1), (0, None, -1), (None, None, -1), (None, 0, -1), (1, 4, 2), (2, 3, 2), (3, 2, 2), (4, 1, 2), (5, 0, 2), (6, 6, 2), (7, 7, 2), (8, 8, 2), (0, None, 2), (None, None, 2), (None, 0, 2), (1, 4, -3), (2, 3, -3), (3, 2, -3), (4, 1, -3), (5, 0, -3), (6, 6, -3), (7, 7, -3), (8, 8, -3), (0, None, -3), (None, None, -3), (None, 0, -3), (1, 4, 4), (2, 3, 4), (3, 2, 4), (4, 1, 4), (5, 0, 4), (6, 6, 4), (7, 7, 4), (8, 8, 4), (0, None, 4), (None, None, 4), (None, 0, 4), (1, 4, -5), (2, 3, -5), (3, 2, -5), (4, 1, -5), (5, 0, -5), (6, 6, -5), (7, 7, -5), (8, 8, -5), (0, None, -5), (None, None, -5), (None, 0, -5), (1, 4, -5), (2, 3, -5), (3, 2, -5), (4, 1, -5), (5, 0, -5), (6, 6, -5), (7, 7, -5), (8, 8, -5), (0, None, -5), (None, None, -5), (None, 0, -5), (1, 4, None), (2, 3, None), (3, 2, None), (4, 1, None), (5, 0, None), (6, 6, None), (7, 7, None), (8, 8, None), (0, None, None), (None, None, None), (None, 0, None), (1, 4, None), (2, 3, None), (3, 2, None), (4, 1, None), (5, 0, None), (6, 6, None), (7, 7, None), (8, 8, None), (0, None, None), (None, None, None), (None, 0, None), (1, 4, 0), (2, 3, 0), (3, 2, 0), (4, 1, 0), (5, 0, 0), (6, 6, 0), (7, 7, 0), (8, 8, 0), (0, None, 0), (None, None, 0), (None, 0, 0)]"
postgresql,postgresql,SELECT *   FROM J1_TBL CROSS JOIN J2_TBL a CROSS JOIN J2_TBL b,join.sql,SAME,,"[(1, 4, 'one', 1, -1, 1, -1), (1, 4, 'one', 1, -1, 2, 2), (1, 4, 'one', 1, -1, 3, -3), (1, 4, 'one', 1, -1, 2, 4), (1, 4, 'one', 1, -1, 5, -5), (1, 4, 'one', 1, -1, 5, -5), (1, 4, 'one', 1, -1, 0, None), (1, 4, 'one', 1, -1, None, None), (1, 4, 'one', 1, -1, None, 0), (2, 3, 'two', 1, -1, 1, -1), (2, 3, 'two', 1, -1, 2, 2), (2, 3, 'two', 1, -1, 3, -3), (2, 3, 'two', 1, -1, 2, 4), (2, 3, 'two', 1, -1, 5, -5), (2, 3, 'two', 1, -1, 5, -5), (2, 3, 'two', 1, -1, 0, None), (2, 3, 'two', 1, -1, None, None), (2, 3, 'two', 1, -1, None, 0), (3, 2, 'three', 1, -1, 1, -1), (3, 2, 'three', 1, -1, 2, 2), (3, 2, 'three', 1, -1, 3, -3), (3, 2, 'three', 1, -1, 2, 4), (3, 2, 'three', 1, -1, 5, -5), (3, 2, 'three', 1, -1, 5, -5), (3, 2, 'three', 1, -1, 0, None), (3, 2, 'three', 1, -1, None, None), (3, 2, 'three', 1, -1, None, 0), (4, 1, 'four', 1, -1, 1, -1), (4, 1, 'four', 1, -1, 2, 2), (4, 1, 'four', 1, -1, 3, -3), (4, 1, 'four', 1, -1, 2, 4), (4, 1, 'four', 1, -1, 5, -5), (4, 1, 'four', 1, -1, 5, -5), (4, 1, 'four', 1, -1, 0, None), (4, 1, 'four', 1, -1, None, None), (4, 1, 'four', 1, -1, None, 0), (5, 0, 'five', 1, -1, 1, -1), (5, 0, 'five', 1, -1, 2, 2), (5, 0, 'five', 1, -1, 3, -3), (5, 0, 'five', 1, -1, 2, 4), (5, 0, 'five', 1, -1, 5, -5), (5, 0, 'five', 1, -1, 5, -5), (5, 0, 'five', 1, -1, 0, None), (5, 0, 'five', 1, -1, None, None), (5, 0, 'five', 1, -1, None, 0), (6, 6, 'six', 1, -1, 1, -1), (6, 6, 'six', 1, -1, 2, 2), (6, 6, 'six', 1, -1, 3, -3), (6, 6, 'six', 1, -1, 2, 4), (6, 6, 'six', 1, -1, 5, -5), (6, 6, 'six', 1, -1, 5, -5), (6, 6, 'six', 1, -1, 0, None), (6, 6, 'six', 1, -1, None, None), (6, 6, 'six', 1, -1, None, 0), (7, 7, 'seven', 1, -1, 1, -1), (7, 7, 'seven', 1, -1, 2, 2), (7, 7, 'seven', 1, -1, 3, -3), (7, 7, 'seven', 1, -1, 2, 4), (7, 7, 'seven', 1, -1, 5, -5), (7, 7, 'seven', 1, -1, 5, -5), (7, 7, 'seven', 1, -1, 0, None), (7, 7, 'seven', 1, -1, None, None), (7, 7, 'seven', 1, -1, None, 0), (8, 8, 'eight', 1, -1, 1, -1), (8, 8, 'eight', 1, -1, 2, 2), (8, 8, 'eight', 1, -1, 3, -3), (8, 8, 'eight', 1, -1, 2, 4), (8, 8, 'eight', 1, -1, 5, -5), (8, 8, 'eight', 1, -1, 5, -5), (8, 8, 'eight', 1, -1, 0, None), (8, 8, 'eight', 1, -1, None, None), (8, 8, 'eight', 1, -1, None, 0), (0, None, 'zero', 1, -1, 1, -1), (0, None, 'zero', 1, -1, 2, 2), (0, None, 'zero', 1, -1, 3, -3), (0, None, 'zero', 1, -1, 2, 4), (0, None, 'zero', 1, -1, 5, -5), (0, None, 'zero', 1, -1, 5, -5), (0, None, 'zero', 1, -1, 0, None), (0, None, 'zero', 1, -1, None, None), (0, None, 'zero', 1, -1, None, 0), (None, None, 'null', 1, -1, 1, -1), (None, None, 'null', 1, -1, 2, 2), (None, None, 'null', 1, -1, 3, -3), (None, None, 'null', 1, -1, 2, 4), (None, None, 'null', 1, -1, 5, -5), (None, None, 'null', 1, -1, 5, -5), (None, None, 'null', 1, -1, 0, None), (None, None, 'null', 1, -1, None, None), (None, None, 'null', 1, -1, None, 0), (None, 0, 'zero', 1, -1, 1, -1), (None, 0, 'zero', 1, -1, 2, 2), (None, 0, 'zero', 1, -1, 3, -3), (None, 0, 'zero', 1, -1, 2, 4), (None, 0, 'zero', 1, -1, 5, -5), (None, 0, 'zero', 1, -1, 5, -5), (None, 0, 'zero', 1, -1, 0, None), (None, 0, 'zero', 1, -1, None, None), (None, 0, 'zero', 1, -1, None, 0), (1, 4, 'one', 2, 2, 1, -1), (1, 4, 'one', 2, 2, 2, 2), (1, 4, 'one', 2, 2, 3, -3), (1, 4, 'one', 2, 2, 2, 4), (1, 4, 'one', 2, 2, 5, -5), (1, 4, 'one', 2, 2, 5, -5), (1, 4, 'one', 2, 2, 0, None), (1, 4, 'one', 2, 2, None, None), (1, 4, 'one', 2, 2, None, 0), (2, 3, 'two', 2, 2, 1, -1), (2, 3, 'two', 2, 2, 2, 2), (2, 3, 'two', 2, 2, 3, -3), (2, 3, 'two', 2, 2, 2, 4), (2, 3, 'two', 2, 2, 5, -5), (2, 3, 'two', 2, 2, 5, -5), (2, 3, 'two', 2, 2, 0, None), (2, 3, 'two', 2, 2, None, None), (2, 3, 'two', 2, 2, None, 0), (3, 2, 'three', 2, 2, 1, -1), (3, 2, 'three', 2, 2, 2, 2), (3, 2, 'three', 2, 2, 3, -3), (3, 2, 'three', 2, 2, 2, 4), (3, 2, 'three', 2, 2, 5, -5), (3, 2, 'three', 2, 2, 5, -5), (3, 2, 'three', 2, 2, 0, None), (3, 2, 'three', 2, 2, None, None), (3, 2, 'three', 2, 2, None, 0), (4, 1, 'four', 2, 2, 1, -1), (4, 1, 'four', 2, 2, 2, 2), (4, 1, 'four', 2, 2, 3, -3), (4, 1, 'four', 2, 2, 2, 4), (4, 1, 'four', 2, 2, 5, -5), (4, 1, 'four', 2, 2, 5, -5), (4, 1, 'four', 2, 2, 0, None), (4, 1, 'four', 2, 2, None, None), (4, 1, 'four', 2, 2, None, 0), (5, 0, 'five', 2, 2, 1, -1), (5, 0, 'five', 2, 2, 2, 2), (5, 0, 'five', 2, 2, 3, -3), (5, 0, 'five', 2, 2, 2, 4), (5, 0, 'five', 2, 2, 5, -5), (5, 0, 'five', 2, 2, 5, -5), (5, 0, 'five', 2, 2, 0, None), (5, 0, 'five', 2, 2, None, None), (5, 0, 'five', 2, 2, None, 0), (6, 6, 'six', 2, 2, 1, -1), (6, 6, 'six', 2, 2, 2, 2), (6, 6, 'six', 2, 2, 3, -3), (6, 6, 'six', 2, 2, 2, 4), (6, 6, 'six', 2, 2, 5, -5), (6, 6, 'six', 2, 2, 5, -5), (6, 6, 'six', 2, 2, 0, None), (6, 6, 'six', 2, 2, None, None), (6, 6, 'six', 2, 2, None, 0), (7, 7, 'seven', 2, 2, 1, -1), (7, 7, 'seven', 2, 2, 2, 2), (7, 7, 'seven', 2, 2, 3, -3), (7, 7, 'seven', 2, 2, 2, 4), (7, 7, 'seven', 2, 2, 5, -5), (7, 7, 'seven', 2, 2, 5, -5), (7, 7, 'seven', 2, 2, 0, None), (7, 7, 'seven', 2, 2, None, None), (7, 7, 'seven', 2, 2, None, 0), (8, 8, 'eight', 2, 2, 1, -1), (8, 8, 'eight', 2, 2, 2, 2), (8, 8, 'eight', 2, 2, 3, -3), (8, 8, 'eight', 2, 2, 2, 4), (8, 8, 'eight', 2, 2, 5, -5), (8, 8, 'eight', 2, 2, 5, -5), (8, 8, 'eight', 2, 2, 0, None), (8, 8, 'eight', 2, 2, None, None), (8, 8, 'eight', 2, 2, None, 0), (0, None, 'zero', 2, 2, 1, -1), (0, None, 'zero', 2, 2, 2, 2), (0, None, 'zero', 2, 2, 3, -3), (0, None, 'zero', 2, 2, 2, 4), (0, None, 'zero', 2, 2, 5, -5), (0, None, 'zero', 2, 2, 5, -5), (0, None, 'zero', 2, 2, 0, None), (0, None, 'zero', 2, 2, None, None), (0, None, 'zero', 2, 2, None, 0), (None, None, 'null', 2, 2, 1, -1), (None, None, 'null', 2, 2, 2, 2), (None, None, 'null', 2, 2, 3, -3), (None, None, 'null', 2, 2, 2, 4), (None, None, 'null', 2, 2, 5, -5), (None, None, 'null', 2, 2, 5, -5), (None, None, 'null', 2, 2, 0, None), (None, None, 'null', 2, 2, None, None), (None, None, 'null', 2, 2, None, 0), (None, 0, 'zero', 2, 2, 1, -1), (None, 0, 'zero', 2, 2, 2, 2), (None, 0, 'zero', 2, 2, 3, -3), (None, 0, 'zero', 2, 2, 2, 4), (None, 0, 'zero', 2, 2, 5, -5), (None, 0, 'zero', 2, 2, 5, -5), (None, 0, 'zero', 2, 2, 0, None), (None, 0, 'zero', 2, 2, None, None), (None, 0, 'zero', 2, 2, None, 0), (1, 4, 'one', 3, -3, 1, -1), (1, 4, 'one', 3, -3, 2, 2), (1, 4, 'one', 3, -3, 3, -3), (1, 4, 'one', 3, -3, 2, 4), (1, 4, 'one', 3, -3, 5, -5), (1, 4, 'one', 3, -3, 5, -5), (1, 4, 'one', 3, -3, 0, None), (1, 4, 'one', 3, -3, None, None), (1, 4, 'one', 3, -3, None, 0), (2, 3, 'two', 3, -3, 1, -1), (2, 3, 'two', 3, -3, 2, 2), (2, 3, 'two', 3, -3, 3, -3), (2, 3, 'two', 3, -3, 2, 4), (2, 3, 'two', 3, -3, 5, -5), (2, 3, 'two', 3, -3, 5, -5), (2, 3, 'two', 3, -3, 0, None), (2, 3, 'two', 3, -3, None, None), (2, 3, 'two', 3, -3, None, 0), (3, 2, 'three', 3, -3, 1, -1), (3, 2, 'three', 3, -3, 2, 2), (3, 2, 'three', 3, -3, 3, -3), (3, 2, 'three', 3, -3, 2, 4), (3, 2, 'three', 3, -3, 5, -5), (3, 2, 'three', 3, -3, 5, -5), (3, 2, 'three', 3, -3, 0, None), (3, 2, 'three', 3, -3, None, None), (3, 2, 'three', 3, -3, None, 0), (4, 1, 'four', 3, -3, 1, -1), (4, 1, 'four', 3, -3, 2, 2), (4, 1, 'four', 3, -3, 3, -3), (4, 1, 'four', 3, -3, 2, 4), (4, 1, 'four', 3, -3, 5, -5), (4, 1, 'four', 3, -3, 5, -5), (4, 1, 'four', 3, -3, 0, None), (4, 1, 'four', 3, -3, None, None), (4, 1, 'four', 3, -3, None, 0), (5, 0, 'five', 3, -3, 1, -1), (5, 0, 'five', 3, -3, 2, 2), (5, 0, 'five', 3, -3, 3, -3), (5, 0, 'five', 3, -3, 2, 4), (5, 0, 'five', 3, -3, 5, -5), (5, 0, 'five', 3, -3, 5, -5), (5, 0, 'five', 3, -3, 0, None), (5, 0, 'five', 3, -3, None, None), (5, 0, 'five', 3, -3, None, 0), (6, 6, 'six', 3, -3, 1, -1), (6, 6, 'six', 3, -3, 2, 2), (6, 6, 'six', 3, -3, 3, -3), (6, 6, 'six', 3, -3, 2, 4), (6, 6, 'six', 3, -3, 5, -5), (6, 6, 'six', 3, -3, 5, -5), (6, 6, 'six', 3, -3, 0, None), (6, 6, 'six', 3, -3, None, None), (6, 6, 'six', 3, -3, None, 0), (7, 7, 'seven', 3, -3, 1, -1), (7, 7, 'seven', 3, -3, 2, 2), (7, 7, 'seven', 3, -3, 3, -3), (7, 7, 'seven', 3, -3, 2, 4), (7, 7, 'seven', 3, -3, 5, -5), (7, 7, 'seven', 3, -3, 5, -5), (7, 7, 'seven', 3, -3, 0, None), (7, 7, 'seven', 3, -3, None, None), (7, 7, 'seven', 3, -3, None, 0), (8, 8, 'eight', 3, -3, 1, -1), (8, 8, 'eight', 3, -3, 2, 2), (8, 8, 'eight', 3, -3, 3, -3), (8, 8, 'eight', 3, -3, 2, 4), (8, 8, 'eight', 3, -3, 5, -5), (8, 8, 'eight', 3, -3, 5, -5), (8, 8, 'eight', 3, -3, 0, None), (8, 8, 'eight', 3, -3, None, None), (8, 8, 'eight', 3, -3, None, 0), (0, None, 'zero', 3, -3, 1, -1), (0, None, 'zero', 3, -3, 2, 2), (0, None, 'zero', 3, -3, 3, -3), (0, None, 'zero', 3, -3, 2, 4), (0, None, 'zero', 3, -3, 5, -5), (0, None, 'zero', 3, -3, 5, -5), (0, None, 'zero', 3, -3, 0, None), (0, None, 'zero', 3, -3, None, None), (0, None, 'zero', 3, -3, None, 0), (None, None, 'null', 3, -3, 1, -1), (None, None, 'null', 3, -3, 2, 2), (None, None, 'null', 3, -3, 3, -3), (None, None, 'null', 3, -3, 2, 4), (None, None, 'null', 3, -3, 5, -5), (None, None, 'null', 3, -3, 5, -5), (None, None, 'null', 3, -3, 0, None), (None, None, 'null', 3, -3, None, None), (None, None, 'null', 3, -3, None, 0), (None, 0, 'zero', 3, -3, 1, -1), (None, 0, 'zero', 3, -3, 2, 2), (None, 0, 'zero', 3, -3, 3, -3), (None, 0, 'zero', 3, -3, 2, 4), (None, 0, 'zero', 3, -3, 5, -5), (None, 0, 'zero', 3, -3, 5, -5), (None, 0, 'zero', 3, -3, 0, None), (None, 0, 'zero', 3, -3, None, None), (None, 0, 'zero', 3, -3, None, 0), (1, 4, 'one', 2, 4, 1, -1), (1, 4, 'one', 2, 4, 2, 2), (1, 4, 'one', 2, 4, 3, -3), (1, 4, 'one', 2, 4, 2, 4), (1, 4, 'one', 2, 4, 5, -5), (1, 4, 'one', 2, 4, 5, -5), (1, 4, 'one', 2, 4, 0, None), (1, 4, 'one', 2, 4, None, None), (1, 4, 'one', 2, 4, None, 0), (2, 3, 'two', 2, 4, 1, -1), (2, 3, 'two', 2, 4, 2, 2), (2, 3, 'two', 2, 4, 3, -3), (2, 3, 'two', 2, 4, 2, 4), (2, 3, 'two', 2, 4, 5, -5), (2, 3, 'two', 2, 4, 5, -5), (2, 3, 'two', 2, 4, 0, None), (2, 3, 'two', 2, 4, None, None), (2, 3, 'two', 2, 4, None, 0), (3, 2, 'three', 2, 4, 1, -1), (3, 2, 'three', 2, 4, 2, 2), (3, 2, 'three', 2, 4, 3, -3), (3, 2, 'three', 2, 4, 2, 4), (3, 2, 'three', 2, 4, 5, -5), (3, 2, 'three', 2, 4, 5, -5), (3, 2, 'three', 2, 4, 0, None), (3, 2, 'three', 2, 4, None, None), (3, 2, 'three', 2, 4, None, 0), (4, 1, 'four', 2, 4, 1, -1), (4, 1, 'four', 2, 4, 2, 2), (4, 1, 'four', 2, 4, 3, -3), (4, 1, 'four', 2, 4, 2, 4), (4, 1, 'four', 2, 4, 5, -5), (4, 1, 'four', 2, 4, 5, -5), (4, 1, 'four', 2, 4, 0, None), (4, 1, 'four', 2, 4, None, None), (4, 1, 'four', 2, 4, None, 0), (5, 0, 'five', 2, 4, 1, -1), (5, 0, 'five', 2, 4, 2, 2), (5, 0, 'five', 2, 4, 3, -3), (5, 0, 'five', 2, 4, 2, 4), (5, 0, 'five', 2, 4, 5, -5), (5, 0, 'five', 2, 4, 5, -5), (5, 0, 'five', 2, 4, 0, None), (5, 0, 'five', 2, 4, None, None), (5, 0, 'five', 2, 4, None, 0), (6, 6, 'six', 2, 4, 1, -1), (6, 6, 'six', 2, 4, 2, 2), (6, 6, 'six', 2, 4, 3, -3), (6, 6, 'six', 2, 4, 2, 4), (6, 6, 'six', 2, 4, 5, -5), (6, 6, 'six', 2, 4, 5, -5), (6, 6, 'six', 2, 4, 0, None), (6, 6, 'six', 2, 4, None, None), (6, 6, 'six', 2, 4, None, 0), (7, 7, 'seven', 2, 4, 1, -1), (7, 7, 'seven', 2, 4, 2, 2), (7, 7, 'seven', 2, 4, 3, -3), (7, 7, 'seven', 2, 4, 2, 4), (7, 7, 'seven', 2, 4, 5, -5), (7, 7, 'seven', 2, 4, 5, -5), (7, 7, 'seven', 2, 4, 0, None), (7, 7, 'seven', 2, 4, None, None), (7, 7, 'seven', 2, 4, None, 0), (8, 8, 'eight', 2, 4, 1, -1), (8, 8, 'eight', 2, 4, 2, 2), (8, 8, 'eight', 2, 4, 3, -3), (8, 8, 'eight', 2, 4, 2, 4), (8, 8, 'eight', 2, 4, 5, -5), (8, 8, 'eight', 2, 4, 5, -5), (8, 8, 'eight', 2, 4, 0, None), (8, 8, 'eight', 2, 4, None, None), (8, 8, 'eight', 2, 4, None, 0), (0, None, 'zero', 2, 4, 1, -1), (0, None, 'zero', 2, 4, 2, 2), (0, None, 'zero', 2, 4, 3, -3), (0, None, 'zero', 2, 4, 2, 4), (0, None, 'zero', 2, 4, 5, -5), (0, None, 'zero', 2, 4, 5, -5), (0, None, 'zero', 2, 4, 0, None), (0, None, 'zero', 2, 4, None, None), (0, None, 'zero', 2, 4, None, 0), (None, None, 'null', 2, 4, 1, -1), (None, None, 'null', 2, 4, 2, 2), (None, None, 'null', 2, 4, 3, -3), (None, None, 'null', 2, 4, 2, 4), (None, None, 'null', 2, 4, 5, -5), (None, None, 'null', 2, 4, 5, -5), (None, None, 'null', 2, 4, 0, None), (None, None, 'null', 2, 4, None, None), (None, None, 'null', 2, 4, None, 0), (None, 0, 'zero', 2, 4, 1, -1), (None, 0, 'zero', 2, 4, 2, 2), (None, 0, 'zero', 2, 4, 3, -3), (None, 0, 'zero', 2, 4, 2, 4), (None, 0, 'zero', 2, 4, 5, -5), (None, 0, 'zero', 2, 4, 5, -5), (None, 0, 'zero', 2, 4, 0, None), (None, 0, 'zero', 2, 4, None, None), (None, 0, 'zero', 2, 4, None, 0), (1, 4, 'one', 5, -5, 1, -1), (1, 4, 'one', 5, -5, 2, 2), (1, 4, 'one', 5, -5, 3, -3), (1, 4, 'one', 5, -5, 2, 4), (1, 4, 'one', 5, -5, 5, -5), (1, 4, 'one', 5, -5, 5, -5), (1, 4, 'one', 5, -5, 0, None), (1, 4, 'one', 5, -5, None, None), (1, 4, 'one', 5, -5, None, 0), (2, 3, 'two', 5, -5, 1, -1), (2, 3, 'two', 5, -5, 2, 2), (2, 3, 'two', 5, -5, 3, -3), (2, 3, 'two', 5, -5, 2, 4), (2, 3, 'two', 5, -5, 5, -5), (2, 3, 'two', 5, -5, 5, -5), (2, 3, 'two', 5, -5, 0, None), (2, 3, 'two', 5, -5, None, None), (2, 3, 'two', 5, -5, None, 0), (3, 2, 'three', 5, -5, 1, -1), (3, 2, 'three', 5, -5, 2, 2), (3, 2, 'three', 5, -5, 3, -3), (3, 2, 'three', 5, -5, 2, 4), (3, 2, 'three', 5, -5, 5, -5), (3, 2, 'three', 5, -5, 5, -5), (3, 2, 'three', 5, -5, 0, None), (3, 2, 'three', 5, -5, None, None), (3, 2, 'three', 5, -5, None, 0), (4, 1, 'four', 5, -5, 1, -1), (4, 1, 'four', 5, -5, 2, 2), (4, 1, 'four', 5, -5, 3, -3), (4, 1, 'four', 5, -5, 2, 4), (4, 1, 'four', 5, -5, 5, -5), (4, 1, 'four', 5, -5, 5, -5), (4, 1, 'four', 5, -5, 0, None), (4, 1, 'four', 5, -5, None, None), (4, 1, 'four', 5, -5, None, 0), (5, 0, 'five', 5, -5, 1, -1), (5, 0, 'five', 5, -5, 2, 2), (5, 0, 'five', 5, -5, 3, -3), (5, 0, 'five', 5, -5, 2, 4), (5, 0, 'five', 5, -5, 5, -5), (5, 0, 'five', 5, -5, 5, -5), (5, 0, 'five', 5, -5, 0, None), (5, 0, 'five', 5, -5, None, None), (5, 0, 'five', 5, -5, None, 0), (6, 6, 'six', 5, -5, 1, -1), (6, 6, 'six', 5, -5, 2, 2), (6, 6, 'six', 5, -5, 3, -3), (6, 6, 'six', 5, -5, 2, 4), (6, 6, 'six', 5, -5, 5, -5), (6, 6, 'six', 5, -5, 5, -5), (6, 6, 'six', 5, -5, 0, None), (6, 6, 'six', 5, -5, None, None), (6, 6, 'six', 5, -5, None, 0), (7, 7, 'seven', 5, -5, 1, -1), (7, 7, 'seven', 5, -5, 2, 2), (7, 7, 'seven', 5, -5, 3, -3), (7, 7, 'seven', 5, -5, 2, 4), (7, 7, 'seven', 5, -5, 5, -5), (7, 7, 'seven', 5, -5, 5, -5), (7, 7, 'seven', 5, -5, 0, None), (7, 7, 'seven', 5, -5, None, None), (7, 7, 'seven', 5, -5, None, 0), (8, 8, 'eight', 5, -5, 1, -1), (8, 8, 'eight', 5, -5, 2, 2), (8, 8, 'eight', 5, -5, 3, -3), (8, 8, 'eight', 5, -5, 2, 4), (8, 8, 'eight', 5, -5, 5, -5), (8, 8, 'eight', 5, -5, 5, -5), (8, 8, 'eight', 5, -5, 0, None), (8, 8, 'eight', 5, -5, None, None), (8, 8, 'eight', 5, -5, None, 0), (0, None, 'zero', 5, -5, 1, -1), (0, None, 'zero', 5, -5, 2, 2), (0, None, 'zero', 5, -5, 3, -3), (0, None, 'zero', 5, -5, 2, 4), (0, None, 'zero', 5, -5, 5, -5), (0, None, 'zero', 5, -5, 5, -5), (0, None, 'zero', 5, -5, 0, None), (0, None, 'zero', 5, -5, None, None), (0, None, 'zero', 5, -5, None, 0), (None, None, 'null', 5, -5, 1, -1), (None, None, 'null', 5, -5, 2, 2), (None, None, 'null', 5, -5, 3, -3), (None, None, 'null', 5, -5, 2, 4), (None, None, 'null', 5, -5, 5, -5), (None, None, 'null', 5, -5, 5, -5), (None, None, 'null', 5, -5, 0, None), (None, None, 'null', 5, -5, None, None), (None, None, 'null', 5, -5, None, 0), (None, 0, 'zero', 5, -5, 1, -1), (None, 0, 'zero', 5, -5, 2, 2), (None, 0, 'zero', 5, -5, 3, -3), (None, 0, 'zero', 5, -5, 2, 4), (None, 0, 'zero', 5, -5, 5, -5), (None, 0, 'zero', 5, -5, 5, -5), (None, 0, 'zero', 5, -5, 0, None), (None, 0, 'zero', 5, -5, None, None), (None, 0, 'zero', 5, -5, None, 0), (1, 4, 'one', 5, -5, 1, -1), (1, 4, 'one', 5, -5, 2, 2), (1, 4, 'one', 5, -5, 3, -3), (1, 4, 'one', 5, -5, 2, 4), (1, 4, 'one', 5, -5, 5, -5), (1, 4, 'one', 5, -5, 5, -5), (1, 4, 'one', 5, -5, 0, None), (1, 4, 'one', 5, -5, None, None), (1, 4, 'one', 5, -5, None, 0), (2, 3, 'two', 5, -5, 1, -1), (2, 3, 'two', 5, -5, 2, 2), (2, 3, 'two', 5, -5, 3, -3), (2, 3, 'two', 5, -5, 2, 4), (2, 3, 'two', 5, -5, 5, -5), (2, 3, 'two', 5, -5, 5, -5), (2, 3, 'two', 5, -5, 0, None), (2, 3, 'two', 5, -5, None, None), (2, 3, 'two', 5, -5, None, 0), (3, 2, 'three', 5, -5, 1, -1), (3, 2, 'three', 5, -5, 2, 2), (3, 2, 'three', 5, -5, 3, -3), (3, 2, 'three', 5, -5, 2, 4), (3, 2, 'three', 5, -5, 5, -5), (3, 2, 'three', 5, -5, 5, -5), (3, 2, 'three', 5, -5, 0, None), (3, 2, 'three', 5, -5, None, None), (3, 2, 'three', 5, -5, None, 0), (4, 1, 'four', 5, -5, 1, -1), (4, 1, 'four', 5, -5, 2, 2), (4, 1, 'four', 5, -5, 3, -3), (4, 1, 'four', 5, -5, 2, 4), (4, 1, 'four', 5, -5, 5, -5), (4, 1, 'four', 5, -5, 5, -5), (4, 1, 'four', 5, -5, 0, None), (4, 1, 'four', 5, -5, None, None), (4, 1, 'four', 5, -5, None, 0), (5, 0, 'five', 5, -5, 1, -1), (5, 0, 'five', 5, -5, 2, 2), (5, 0, 'five', 5, -5, 3, -3), (5, 0, 'five', 5, -5, 2, 4), (5, 0, 'five', 5, -5, 5, -5), (5, 0, 'five', 5, -5, 5, -5), (5, 0, 'five', 5, -5, 0, None), (5, 0, 'five', 5, -5, None, None), (5, 0, 'five', 5, -5, None, 0), (6, 6, 'six', 5, -5, 1, -1), (6, 6, 'six', 5, -5, 2, 2), (6, 6, 'six', 5, -5, 3, -3), (6, 6, 'six', 5, -5, 2, 4), (6, 6, 'six', 5, -5, 5, -5), (6, 6, 'six', 5, -5, 5, -5), (6, 6, 'six', 5, -5, 0, None), (6, 6, 'six', 5, -5, None, None), (6, 6, 'six', 5, -5, None, 0), (7, 7, 'seven', 5, -5, 1, -1), (7, 7, 'seven', 5, -5, 2, 2), (7, 7, 'seven', 5, -5, 3, -3), (7, 7, 'seven', 5, -5, 2, 4), (7, 7, 'seven', 5, -5, 5, -5), (7, 7, 'seven', 5, -5, 5, -5), (7, 7, 'seven', 5, -5, 0, None), (7, 7, 'seven', 5, -5, None, None), (7, 7, 'seven', 5, -5, None, 0), (8, 8, 'eight', 5, -5, 1, -1), (8, 8, 'eight', 5, -5, 2, 2), (8, 8, 'eight', 5, -5, 3, -3), (8, 8, 'eight', 5, -5, 2, 4), (8, 8, 'eight', 5, -5, 5, -5), (8, 8, 'eight', 5, -5, 5, -5), (8, 8, 'eight', 5, -5, 0, None), (8, 8, 'eight', 5, -5, None, None), (8, 8, 'eight', 5, -5, None, 0), (0, None, 'zero', 5, -5, 1, -1), (0, None, 'zero', 5, -5, 2, 2), (0, None, 'zero', 5, -5, 3, -3), (0, None, 'zero', 5, -5, 2, 4), (0, None, 'zero', 5, -5, 5, -5), (0, None, 'zero', 5, -5, 5, -5), (0, None, 'zero', 5, -5, 0, None), (0, None, 'zero', 5, -5, None, None), (0, None, 'zero', 5, -5, None, 0), (None, None, 'null', 5, -5, 1, -1), (None, None, 'null', 5, -5, 2, 2), (None, None, 'null', 5, -5, 3, -3), (None, None, 'null', 5, -5, 2, 4), (None, None, 'null', 5, -5, 5, -5), (None, None, 'null', 5, -5, 5, -5), (None, None, 'null', 5, -5, 0, None), (None, None, 'null', 5, -5, None, None), (None, None, 'null', 5, -5, None, 0), (None, 0, 'zero', 5, -5, 1, -1), (None, 0, 'zero', 5, -5, 2, 2), (None, 0, 'zero', 5, -5, 3, -3), (None, 0, 'zero', 5, -5, 2, 4), (None, 0, 'zero', 5, -5, 5, -5), (None, 0, 'zero', 5, -5, 5, -5), (None, 0, 'zero', 5, -5, 0, None), (None, 0, 'zero', 5, -5, None, None), (None, 0, 'zero', 5, -5, None, 0), (1, 4, 'one', 0, None, 1, -1), (1, 4, 'one', 0, None, 2, 2), (1, 4, 'one', 0, None, 3, -3), (1, 4, 'one', 0, None, 2, 4), (1, 4, 'one', 0, None, 5, -5), (1, 4, 'one', 0, None, 5, -5), (1, 4, 'one', 0, None, 0, None), (1, 4, 'one', 0, None, None, None), (1, 4, 'one', 0, None, None, 0), (2, 3, 'two', 0, None, 1, -1), (2, 3, 'two', 0, None, 2, 2), (2, 3, 'two', 0, None, 3, -3), (2, 3, 'two', 0, None, 2, 4), (2, 3, 'two', 0, None, 5, -5), (2, 3, 'two', 0, None, 5, -5), (2, 3, 'two', 0, None, 0, None), (2, 3, 'two', 0, None, None, None), (2, 3, 'two', 0, None, None, 0), (3, 2, 'three', 0, None, 1, -1), (3, 2, 'three', 0, None, 2, 2), (3, 2, 'three', 0, None, 3, -3), (3, 2, 'three', 0, None, 2, 4), (3, 2, 'three', 0, None, 5, -5), (3, 2, 'three', 0, None, 5, -5), (3, 2, 'three', 0, None, 0, None), (3, 2, 'three', 0, None, None, None), (3, 2, 'three', 0, None, None, 0), (4, 1, 'four', 0, None, 1, -1), (4, 1, 'four', 0, None, 2, 2), (4, 1, 'four', 0, None, 3, -3), (4, 1, 'four', 0, None, 2, 4), (4, 1, 'four', 0, None, 5, -5), (4, 1, 'four', 0, None, 5, -5), (4, 1, 'four', 0, None, 0, None), (4, 1, 'four', 0, None, None, None), (4, 1, 'four', 0, None, None, 0), (5, 0, 'five', 0, None, 1, -1), (5, 0, 'five', 0, None, 2, 2), (5, 0, 'five', 0, None, 3, -3), (5, 0, 'five', 0, None, 2, 4), (5, 0, 'five', 0, None, 5, -5), (5, 0, 'five', 0, None, 5, -5), (5, 0, 'five', 0, None, 0, None), (5, 0, 'five', 0, None, None, None), (5, 0, 'five', 0, None, None, 0), (6, 6, 'six', 0, None, 1, -1), (6, 6, 'six', 0, None, 2, 2), (6, 6, 'six', 0, None, 3, -3), (6, 6, 'six', 0, None, 2, 4), (6, 6, 'six', 0, None, 5, -5), (6, 6, 'six', 0, None, 5, -5), (6, 6, 'six', 0, None, 0, None), (6, 6, 'six', 0, None, None, None), (6, 6, 'six', 0, None, None, 0), (7, 7, 'seven', 0, None, 1, -1), (7, 7, 'seven', 0, None, 2, 2), (7, 7, 'seven', 0, None, 3, -3), (7, 7, 'seven', 0, None, 2, 4), (7, 7, 'seven', 0, None, 5, -5), (7, 7, 'seven', 0, None, 5, -5), (7, 7, 'seven', 0, None, 0, None), (7, 7, 'seven', 0, None, None, None), (7, 7, 'seven', 0, None, None, 0), (8, 8, 'eight', 0, None, 1, -1), (8, 8, 'eight', 0, None, 2, 2), (8, 8, 'eight', 0, None, 3, -3), (8, 8, 'eight', 0, None, 2, 4), (8, 8, 'eight', 0, None, 5, -5), (8, 8, 'eight', 0, None, 5, -5), (8, 8, 'eight', 0, None, 0, None), (8, 8, 'eight', 0, None, None, None), (8, 8, 'eight', 0, None, None, 0), (0, None, 'zero', 0, None, 1, -1), (0, None, 'zero', 0, None, 2, 2), (0, None, 'zero', 0, None, 3, -3), (0, None, 'zero', 0, None, 2, 4), (0, None, 'zero', 0, None, 5, -5), (0, None, 'zero', 0, None, 5, -5), (0, None, 'zero', 0, None, 0, None), (0, None, 'zero', 0, None, None, None), (0, None, 'zero', 0, None, None, 0), (None, None, 'null', 0, None, 1, -1), (None, None, 'null', 0, None, 2, 2), (None, None, 'null', 0, None, 3, -3), (None, None, 'null', 0, None, 2, 4), (None, None, 'null', 0, None, 5, -5), (None, None, 'null', 0, None, 5, -5), (None, None, 'null', 0, None, 0, None), (None, None, 'null', 0, None, None, None), (None, None, 'null', 0, None, None, 0), (None, 0, 'zero', 0, None, 1, -1), (None, 0, 'zero', 0, None, 2, 2), (None, 0, 'zero', 0, None, 3, -3), (None, 0, 'zero', 0, None, 2, 4), (None, 0, 'zero', 0, None, 5, -5), (None, 0, 'zero', 0, None, 5, -5), (None, 0, 'zero', 0, None, 0, None), (None, 0, 'zero', 0, None, None, None), (None, 0, 'zero', 0, None, None, 0), (1, 4, 'one', None, None, 1, -1), (1, 4, 'one', None, None, 2, 2), (1, 4, 'one', None, None, 3, -3), (1, 4, 'one', None, None, 2, 4), (1, 4, 'one', None, None, 5, -5), (1, 4, 'one', None, None, 5, -5), (1, 4, 'one', None, None, 0, None), (1, 4, 'one', None, None, None, None), (1, 4, 'one', None, None, None, 0), (2, 3, 'two', None, None, 1, -1), (2, 3, 'two', None, None, 2, 2), (2, 3, 'two', None, None, 3, -3), (2, 3, 'two', None, None, 2, 4), (2, 3, 'two', None, None, 5, -5), (2, 3, 'two', None, None, 5, -5), (2, 3, 'two', None, None, 0, None), (2, 3, 'two', None, None, None, None), (2, 3, 'two', None, None, None, 0), (3, 2, 'three', None, None, 1, -1), (3, 2, 'three', None, None, 2, 2), (3, 2, 'three', None, None, 3, -3), (3, 2, 'three', None, None, 2, 4), (3, 2, 'three', None, None, 5, -5), (3, 2, 'three', None, None, 5, -5), (3, 2, 'three', None, None, 0, None), (3, 2, 'three', None, None, None, None), (3, 2, 'three', None, None, None, 0), (4, 1, 'four', None, None, 1, -1), (4, 1, 'four', None, None, 2, 2), (4, 1, 'four', None, None, 3, -3), (4, 1, 'four', None, None, 2, 4), (4, 1, 'four', None, None, 5, -5), (4, 1, 'four', None, None, 5, -5), (4, 1, 'four', None, None, 0, None), (4, 1, 'four', None, None, None, None), (4, 1, 'four', None, None, None, 0), (5, 0, 'five', None, None, 1, -1), (5, 0, 'five', None, None, 2, 2), (5, 0, 'five', None, None, 3, -3), (5, 0, 'five', None, None, 2, 4), (5, 0, 'five', None, None, 5, -5), (5, 0, 'five', None, None, 5, -5), (5, 0, 'five', None, None, 0, None), (5, 0, 'five', None, None, None, None), (5, 0, 'five', None, None, None, 0), (6, 6, 'six', None, None, 1, -1), (6, 6, 'six', None, None, 2, 2), (6, 6, 'six', None, None, 3, -3), (6, 6, 'six', None, None, 2, 4), (6, 6, 'six', None, None, 5, -5), (6, 6, 'six', None, None, 5, -5), (6, 6, 'six', None, None, 0, None), (6, 6, 'six', None, None, None, None), (6, 6, 'six', None, None, None, 0), (7, 7, 'seven', None, None, 1, -1), (7, 7, 'seven', None, None, 2, 2), (7, 7, 'seven', None, None, 3, -3), (7, 7, 'seven', None, None, 2, 4), (7, 7, 'seven', None, None, 5, -5), (7, 7, 'seven', None, None, 5, -5), (7, 7, 'seven', None, None, 0, None), (7, 7, 'seven', None, None, None, None), (7, 7, 'seven', None, None, None, 0), (8, 8, 'eight', None, None, 1, -1), (8, 8, 'eight', None, None, 2, 2), (8, 8, 'eight', None, None, 3, -3), (8, 8, 'eight', None, None, 2, 4), (8, 8, 'eight', None, None, 5, -5), (8, 8, 'eight', None, None, 5, -5), (8, 8, 'eight', None, None, 0, None), (8, 8, 'eight', None, None, None, None), (8, 8, 'eight', None, None, None, 0), (0, None, 'zero', None, None, 1, -1), (0, None, 'zero', None, None, 2, 2), (0, None, 'zero', None, None, 3, -3), (0, None, 'zero', None, None, 2, 4), (0, None, 'zero', None, None, 5, -5), (0, None, 'zero', None, None, 5, -5), (0, None, 'zero', None, None, 0, None), (0, None, 'zero', None, None, None, None), (0, None, 'zero', None, None, None, 0), (None, None, 'null', None, None, 1, -1), (None, None, 'null', None, None, 2, 2), (None, None, 'null', None, None, 3, -3), (None, None, 'null', None, None, 2, 4), (None, None, 'null', None, None, 5, -5), (None, None, 'null', None, None, 5, -5), (None, None, 'null', None, None, 0, None), (None, None, 'null', None, None, None, None), (None, None, 'null', None, None, None, 0), (None, 0, 'zero', None, None, 1, -1), (None, 0, 'zero', None, None, 2, 2), (None, 0, 'zero', None, None, 3, -3), (None, 0, 'zero', None, None, 2, 4), (None, 0, 'zero', None, None, 5, -5), (None, 0, 'zero', None, None, 5, -5), (None, 0, 'zero', None, None, 0, None), (None, 0, 'zero', None, None, None, None), (None, 0, 'zero', None, None, None, 0), (1, 4, 'one', None, 0, 1, -1), (1, 4, 'one', None, 0, 2, 2), (1, 4, 'one', None, 0, 3, -3), (1, 4, 'one', None, 0, 2, 4), (1, 4, 'one', None, 0, 5, -5), (1, 4, 'one', None, 0, 5, -5), (1, 4, 'one', None, 0, 0, None), (1, 4, 'one', None, 0, None, None), (1, 4, 'one', None, 0, None, 0), (2, 3, 'two', None, 0, 1, -1), (2, 3, 'two', None, 0, 2, 2), (2, 3, 'two', None, 0, 3, -3), (2, 3, 'two', None, 0, 2, 4), (2, 3, 'two', None, 0, 5, -5), (2, 3, 'two', None, 0, 5, -5), (2, 3, 'two', None, 0, 0, None), (2, 3, 'two', None, 0, None, None), (2, 3, 'two', None, 0, None, 0), (3, 2, 'three', None, 0, 1, -1), (3, 2, 'three', None, 0, 2, 2), (3, 2, 'three', None, 0, 3, -3), (3, 2, 'three', None, 0, 2, 4), (3, 2, 'three', None, 0, 5, -5), (3, 2, 'three', None, 0, 5, -5), (3, 2, 'three', None, 0, 0, None), (3, 2, 'three', None, 0, None, None), (3, 2, 'three', None, 0, None, 0), (4, 1, 'four', None, 0, 1, -1), (4, 1, 'four', None, 0, 2, 2), (4, 1, 'four', None, 0, 3, -3), (4, 1, 'four', None, 0, 2, 4), (4, 1, 'four', None, 0, 5, -5), (4, 1, 'four', None, 0, 5, -5), (4, 1, 'four', None, 0, 0, None), (4, 1, 'four', None, 0, None, None), (4, 1, 'four', None, 0, None, 0), (5, 0, 'five', None, 0, 1, -1), (5, 0, 'five', None, 0, 2, 2), (5, 0, 'five', None, 0, 3, -3), (5, 0, 'five', None, 0, 2, 4), (5, 0, 'five', None, 0, 5, -5), (5, 0, 'five', None, 0, 5, -5), (5, 0, 'five', None, 0, 0, None), (5, 0, 'five', None, 0, None, None), (5, 0, 'five', None, 0, None, 0), (6, 6, 'six', None, 0, 1, -1), (6, 6, 'six', None, 0, 2, 2), (6, 6, 'six', None, 0, 3, -3), (6, 6, 'six', None, 0, 2, 4), (6, 6, 'six', None, 0, 5, -5), (6, 6, 'six', None, 0, 5, -5), (6, 6, 'six', None, 0, 0, None), (6, 6, 'six', None, 0, None, None), (6, 6, 'six', None, 0, None, 0), (7, 7, 'seven', None, 0, 1, -1), (7, 7, 'seven', None, 0, 2, 2), (7, 7, 'seven', None, 0, 3, -3), (7, 7, 'seven', None, 0, 2, 4), (7, 7, 'seven', None, 0, 5, -5), (7, 7, 'seven', None, 0, 5, -5), (7, 7, 'seven', None, 0, 0, None), (7, 7, 'seven', None, 0, None, None), (7, 7, 'seven', None, 0, None, 0), (8, 8, 'eight', None, 0, 1, -1), (8, 8, 'eight', None, 0, 2, 2), (8, 8, 'eight', None, 0, 3, -3), (8, 8, 'eight', None, 0, 2, 4), (8, 8, 'eight', None, 0, 5, -5), (8, 8, 'eight', None, 0, 5, -5), (8, 8, 'eight', None, 0, 0, None), (8, 8, 'eight', None, 0, None, None), (8, 8, 'eight', None, 0, None, 0), (0, None, 'zero', None, 0, 1, -1), (0, None, 'zero', None, 0, 2, 2), (0, None, 'zero', None, 0, 3, -3), (0, None, 'zero', None, 0, 2, 4), (0, None, 'zero', None, 0, 5, -5), (0, None, 'zero', None, 0, 5, -5), (0, None, 'zero', None, 0, 0, None), (0, None, 'zero', None, 0, None, None), (0, None, 'zero', None, 0, None, 0), (None, None, 'null', None, 0, 1, -1), (None, None, 'null', None, 0, 2, 2), (None, None, 'null', None, 0, 3, -3), (None, None, 'null', None, 0, 2, 4), (None, None, 'null', None, 0, 5, -5), (None, None, 'null', None, 0, 5, -5), (None, None, 'null', None, 0, 0, None), (None, None, 'null', None, 0, None, None), (None, None, 'null', None, 0, None, 0), (None, 0, 'zero', None, 0, 1, -1), (None, 0, 'zero', None, 0, 2, 2), (None, 0, 'zero', None, 0, 3, -3), (None, 0, 'zero', None, 0, 2, 4), (None, 0, 'zero', None, 0, 5, -5), (None, 0, 'zero', None, 0, 5, -5), (None, 0, 'zero', None, 0, 0, None), (None, 0, 'zero', None, 0, None, None), (None, 0, 'zero', None, 0, None, 0)]"
postgresql,postgresql,SELECT *   FROM J1_TBL INNER JOIN J2_TBL USING (i),join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5)]"
postgresql,postgresql,SELECT *   FROM J1_TBL JOIN J2_TBL USING (i),join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5)]"
postgresql,postgresql,"SELECT *   FROM J1_TBL t1 (a, b, c) JOIN J2_TBL t2 (a, d) USING (a)   ORDER BY a, d",join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5)]"
postgresql,postgresql,"SELECT *   FROM J1_TBL t1 (a, b, c) JOIN J2_TBL t2 (a, b) USING (b)   ORDER BY b, t1.a",join.sql,SAME,,"[(0, 5, 'five', None), (0, None, 'zero', None), (2, 3, 'three', 2), (4, 1, 'one', 2)]"
postgresql,postgresql,SELECT * FROM J1_TBL JOIN J2_TBL USING (i) WHERE J1_TBL.t = 'one',join.sql,SAME,,"[(1, 4, 'one', -1)]"
postgresql,postgresql,SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one',join.sql,SAME,,"[(1, 4, 'one', -1)]"
postgresql,postgresql,SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE x.i = 1,join.sql,SAME,,"[(1, 4, 'one', -1)]"
postgresql,postgresql,SELECT x.* FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one',join.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT ROW(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one',join.sql,SAME,,"[('(1)',)]"
postgresql,postgresql,SELECT row_to_json(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one',join.sql,SAME,,"[({'i': 1},)]"
postgresql,postgresql,SELECT *   FROM J1_TBL NATURAL JOIN J2_TBL,join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5)]"
postgresql,postgresql,"SELECT *   FROM J1_TBL t1 (a, b, c) NATURAL JOIN J2_TBL t2 (a, d)",join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5)]"
postgresql,postgresql,"SELECT *   FROM J1_TBL t1 (a, b, c) NATURAL JOIN J2_TBL t2 (d, a)",join.sql,SAME,,"[(0, None, 'zero', None), (2, 3, 'two', 2), (4, 1, 'four', 2)]"
postgresql,postgresql,"SELECT *   FROM J1_TBL t1 (a, b) NATURAL JOIN J2_TBL t2 (a)",join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5)]"
postgresql,postgresql,SELECT *   FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.i),join.sql,SAME,,"[(0, None, 'zero', 0, None), (1, 4, 'one', 1, -1), (2, 3, 'two', 2, 2), (2, 3, 'two', 2, 4), (3, 2, 'three', 3, -3), (5, 0, 'five', 5, -5), (5, 0, 'five', 5, -5)]"
postgresql,postgresql,SELECT *   FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.k),join.sql,SAME,,"[(0, None, 'zero', None, 0), (2, 3, 'two', 2, 2), (4, 1, 'four', 2, 4)]"
postgresql,postgresql,SELECT *   FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i <= J2_TBL.k),join.sql,SAME,,"[(1, 4, 'one', 2, 2), (2, 3, 'two', 2, 2), (0, None, 'zero', 2, 2), (1, 4, 'one', 2, 4), (2, 3, 'two', 2, 4), (3, 2, 'three', 2, 4), (4, 1, 'four', 2, 4), (0, None, 'zero', 2, 4), (0, None, 'zero', None, 0)]"
postgresql,postgresql,"SELECT *   FROM J1_TBL LEFT OUTER JOIN J2_TBL USING (i)   ORDER BY i, k, t",join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (4, 1, 'four', None), (5, 0, 'five', -5), (5, 0, 'five', -5), (6, 6, 'six', None), (7, 7, 'seven', None), (8, 8, 'eight', None), (None, None, 'null', None), (None, 0, 'zero', None)]"
postgresql,postgresql,"SELECT *   FROM J1_TBL LEFT JOIN J2_TBL USING (i)   ORDER BY i, k, t",join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (4, 1, 'four', None), (5, 0, 'five', -5), (5, 0, 'five', -5), (6, 6, 'six', None), (7, 7, 'seven', None), (8, 8, 'eight', None), (None, None, 'null', None), (None, 0, 'zero', None)]"
postgresql,postgresql,SELECT *   FROM J1_TBL RIGHT OUTER JOIN J2_TBL USING (i),join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5), (None, None, None, None), (None, None, None, 0)]"
postgresql,postgresql,SELECT *   FROM J1_TBL RIGHT JOIN J2_TBL USING (i),join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (5, 0, 'five', -5), (5, 0, 'five', -5), (None, None, None, None), (None, None, None, 0)]"
postgresql,postgresql,"SELECT *   FROM J1_TBL FULL OUTER JOIN J2_TBL USING (i)   ORDER BY i, k, t",join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (4, 1, 'four', None), (5, 0, 'five', -5), (5, 0, 'five', -5), (6, 6, 'six', None), (7, 7, 'seven', None), (8, 8, 'eight', None), (None, None, None, 0), (None, None, 'null', None), (None, 0, 'zero', None), (None, None, None, None)]"
postgresql,postgresql,"SELECT *   FROM J1_TBL FULL JOIN J2_TBL USING (i)   ORDER BY i, k, t",join.sql,SAME,,"[(0, None, 'zero', None), (1, 4, 'one', -1), (2, 3, 'two', 2), (2, 3, 'two', 4), (3, 2, 'three', -3), (4, 1, 'four', None), (5, 0, 'five', -5), (5, 0, 'five', -5), (6, 6, 'six', None), (7, 7, 'seven', None), (8, 8, 'eight', None), (None, None, None, 0), (None, None, 'null', None), (None, 0, 'zero', None), (None, None, None, None)]"
postgresql,postgresql,SELECT *   FROM J1_TBL LEFT JOIN J2_TBL USING (i) WHERE (k = 1),join.sql,SAME,,[]
postgresql,postgresql,SELECT *   FROM J1_TBL LEFT JOIN J2_TBL USING (i) WHERE (i = 1),join.sql,SAME,,"[(1, 4, 'one', -1)]"
postgresql,postgresql,SELECT * FROM t1 FULL JOIN t2 USING (name) FULL JOIN t3 USING (name),join.sql,SAME,,"[('bb', 11, 12, 13), ('cc', None, 22, 23), ('dd', None, None, 33), ('ee', None, 42, None)]"
postgresql,postgresql,SELECT * FROM (SELECT * FROM t2) as s2 INNER JOIN (SELECT * FROM t3) s3 USING (name),join.sql,SAME,,"[('bb', 12, 13), ('cc', 22, 23)]"
postgresql,postgresql,SELECT * FROM (SELECT * FROM t2) as s2 LEFT JOIN (SELECT * FROM t3) s3 USING (name),join.sql,SAME,,"[('bb', 12, 13), ('cc', 22, 23), ('ee', 42, None)]"
postgresql,postgresql,SELECT * FROM (SELECT * FROM t2) as s2 FULL JOIN (SELECT * FROM t3) s3 USING (name),join.sql,SAME,,"[('bb', 12, 13), ('cc', 22, 23), ('dd', None, 33), ('ee', 42, None)]"
postgresql,postgresql,"SELECT * FROM (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL INNER JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3",join.sql,SAME,,"[('bb', 12, 2, 13, 3), ('cc', 22, 2, 23, 3)]"
postgresql,postgresql,"SELECT * FROM (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL LEFT JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3",join.sql,SAME,,"[('bb', 12, 2, 13, 3), ('cc', 22, 2, 23, 3), ('ee', 42, 2, None, None)]"
postgresql,postgresql,"SELECT * FROM (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL FULL JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3",join.sql,SAME,,"[('bb', 12, 2, 13, 3), ('cc', 22, 2, 23, 3), ('dd', None, None, 33, 3), ('ee', 42, 2, None, None)]"
postgresql,postgresql,"SELECT * FROM (SELECT name, n as s1_n, 1 as s1_1 FROM t1) as s1 NATURAL INNER JOIN (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL INNER JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3",join.sql,SAME,,"[('bb', 11, 1, 12, 2, 13, 3)]"
postgresql,postgresql,"SELECT * FROM (SELECT name, n as s1_n, 1 as s1_1 FROM t1) as s1 NATURAL FULL JOIN (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 NATURAL FULL JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3",join.sql,SAME,,"[('bb', 11, 1, 12, 2, 13, 3), ('cc', None, None, 22, 2, 23, 3), ('dd', None, None, None, None, 33, 3), ('ee', None, None, 42, 2, None, None)]"
postgresql,postgresql,"SELECT * FROM (SELECT name, n as s1_n FROM t1) as s1 NATURAL FULL JOIN   (SELECT * FROM     (SELECT name, n as s2_n FROM t2) as s2     NATURAL FULL JOIN     (SELECT name, n as s3_n FROM t3) as s3   ) ss2",join.sql,SAME,,"[('bb', 11, 12, 13), ('cc', None, 22, 23), ('dd', None, None, 33), ('ee', None, 42, None)]"
postgresql,postgresql,"SELECT * FROM (SELECT name, n as s1_n FROM t1) as s1 NATURAL FULL JOIN   (SELECT * FROM     (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2     NATURAL FULL JOIN     (SELECT name, n as s3_n FROM t3) as s3   ) ss2",join.sql,SAME,,"[('bb', 11, 12, 2, 13), ('cc', None, 22, 2, 23), ('dd', None, None, None, 33), ('ee', None, 42, 2, None)]"
postgresql,postgresql,"SELECT * FROM   (SELECT name, n as s1_n FROM t1) as s1 FULL JOIN   (SELECT name, 2 as s2_n FROM t2) as s2 ON (s1_n = s2_n)",join.sql,SAME,,"[(None, None, 'bb', 2), (None, None, 'cc', 2), (None, None, 'ee', 2), ('bb', 11, None, None)]"
postgresql,postgresql,"create temp table x (x1 int, x2 int)",join.sql,SAME,,[]
postgresql,postgresql,"create temp table y (y1 int, y2 int)",join.sql,SAME,,[]
postgresql,postgresql,select * from x,join.sql,SAME,,"[(1, 11), (2, 22), (3, None), (4, 44), (5, None)]"
postgresql,postgresql,select * from y,join.sql,SAME,,"[(1, 111), (2, 222), (3, 333), (4, None)]"
postgresql,postgresql,select * from x left join y on (x1 = y1 and x2 is not null),join.sql,SAME,,"[(1, 11, 1, 111), (2, 22, 2, 222), (3, None, None, None), (4, 44, 4, None), (5, None, None, None)]"
postgresql,postgresql,select * from x left join y on (x1 = y1 and y2 is not null),join.sql,SAME,,"[(1, 11, 1, 111), (2, 22, 2, 222), (3, None, 3, 333), (4, 44, None, None), (5, None, None, None)]"
postgresql,postgresql,"select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2) on (x1 = xx1)",join.sql,SAME,,"[(1, 11, 1, 111, 1, 11), (2, 22, 2, 222, 2, 22), (3, None, 3, 333, 3, None), (4, 44, 4, None, 4, 44), (5, None, None, None, 5, None)]"
postgresql,postgresql,"select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2) on (x1 = xx1 and x2 is not null)",join.sql,SAME,,"[(1, 11, 1, 111, 1, 11), (2, 22, 2, 222, 2, 22), (3, None, 3, 333, None, None), (4, 44, 4, None, 4, 44), (5, None, None, None, None, None)]"
postgresql,postgresql,"select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2) on (x1 = xx1 and y2 is not null)",join.sql,SAME,,"[(1, 11, 1, 111, 1, 11), (2, 22, 2, 222, 2, 22), (3, None, 3, 333, 3, None), (4, 44, 4, None, None, None), (5, None, None, None, None, None)]"
postgresql,postgresql,"select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2) on (x1 = xx1 and xx2 is not null)",join.sql,SAME,,"[(1, 11, 1, 111, 1, 11), (2, 22, 2, 222, 2, 22), (3, None, 3, 333, None, None), (4, 44, 4, None, 4, 44), (5, None, None, None, None, None)]"
postgresql,postgresql,"select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2) on (x1 = xx1) where (x2 is not null)",join.sql,SAME,,"[(1, 11, 1, 111, 1, 11), (2, 22, 2, 222, 2, 22), (4, 44, 4, None, 4, 44)]"
postgresql,postgresql,"select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2) on (x1 = xx1) where (y2 is not null)",join.sql,SAME,,"[(1, 11, 1, 111, 1, 11), (2, 22, 2, 222, 2, 22), (3, None, 3, 333, 3, None)]"
postgresql,postgresql,"select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2) on (x1 = xx1) where (xx2 is not null)",join.sql,SAME,,"[(1, 11, 1, 111, 1, 11), (2, 22, 2, 222, 2, 22), (4, 44, 4, None, 4, 44)]"
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,set geqo = on,join.sql,SAME,,[]
postgresql,postgresql,set geqo_threshold = 2,join.sql,SAME,,[]
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from   j1_tbl full join   (select * from j2_tbl order by j2_tbl.i desc, j2_tbl.k asc) j2_tbl   on j1_tbl.i = j2_tbl.i and j1_tbl.i = j2_tbl.k",join.sql,SAME,,"[('Merge Full Join',), ('  Merge Cond: ((j2_tbl.i = j1_tbl.i) AND (j2_tbl.k = j1_tbl.i))',), ('  ->  Sort',), ('        Sort Key: j2_tbl.i DESC, j2_tbl.k',), ('        ->  Seq Scan on j2_tbl',), ('  ->  Sort',), ('        Sort Key: j1_tbl.i DESC',), ('        ->  Seq Scan on j1_tbl',)]"
postgresql,postgresql,"select * from   j1_tbl full join   (select * from j2_tbl order by j2_tbl.i desc, j2_tbl.k asc) j2_tbl   on j1_tbl.i = j2_tbl.i and j1_tbl.i = j2_tbl.k",join.sql,SAME,,"[(None, None, None, None, 0), (None, None, None, None, None), (None, 0, 'zero', None, None), (None, None, 'null', None, None), (8, 8, 'eight', None, None), (7, 7, 'seven', None, None), (6, 6, 'six', None, None), (None, None, None, 5, -5), (None, None, None, 5, -5), (5, 0, 'five', None, None), (4, 1, 'four', None, None), (None, None, None, 3, -3), (3, 2, 'three', None, None), (2, 3, 'two', 2, 2), (None, None, None, 2, 4), (None, None, None, 1, -1), (None, None, None, 0, None), (1, 4, 'one', None, None), (0, None, 'zero', None, None)]"
postgresql,postgresql,set enable_hashjoin = 0,join.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop = 0,join.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg = 0,join.sql,SAME,,[]
postgresql,postgresql,reset enable_hashagg,join.sql,SAME,,[]
postgresql,postgresql,reset enable_nestloop,join.sql,SAME,,[]
postgresql,postgresql,reset enable_hashjoin,join.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE t1 (a int, b int)",join.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE t2 (a int, b int)",join.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE t3 (x int, y int)",join.sql,SAME,,[]
postgresql,postgresql,DELETE FROM t3 USING t1 table1 WHERE t3.x = table1.a,join.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t3,join.sql,SAME,,"[(6, 7), (7, 8), (500, 100)]"
postgresql,postgresql,DELETE FROM t3 USING t1 JOIN t2 USING (a) WHERE t3.x > t1.a,join.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t3,join.sql,SAME,,"[(6, 7), (7, 8)]"
postgresql,postgresql,DELETE FROM t3 USING t3 t3_other WHERE t3.x = t3_other.x AND t3.y = t3_other.y,join.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t3,join.sql,SAME,,[]
postgresql,postgresql,create temp table t2a () inherits (t2),join.sql,SAME,,[]
postgresql,postgresql,select * from t1 left join t2 on (t1.a = t2.a),join.sql,SAME,,"[(5, 10, None, None), (15, 20, None, None), (100, 100, None, None), (200, 1000, 200, 2000), (200, 1000, 200, 2001)]"
postgresql,postgresql,"select t1.*, t2.*, unnamed_join.* from   t1 join t2 on (t1.a = t2.a), t3 as unnamed_join   for update of unnamed_join",join.sql,SAME,,[]
postgresql,postgresql,"select foo.*, unnamed_join.* from   t1 join t2 using (a) as foo, t3 as unnamed_join   for update of unnamed_join",join.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE tt1 ( tt1_id int4, joincol int4 )",join.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE tt2 ( tt2_id int4, joincol int4 )",join.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin to off,join.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop to off,join.sql,SAME,,[]
postgresql,postgresql,"select tt1.*, tt2.* from tt1 left join tt2 on tt1.joincol = tt2.joincol",join.sql,SAME,,"[(1, 11, 21, 11), (1, 11, 22, 11), (2, None, None, None)]"
postgresql,postgresql,"select tt1.*, tt2.* from tt2 right join tt1 on tt1.joincol = tt2.joincol",join.sql,SAME,,"[(1, 11, 21, 11), (1, 11, 22, 11), (2, None, None, None)]"
postgresql,postgresql,reset enable_hashjoin,join.sql,SAME,,[]
postgresql,postgresql,reset enable_nestloop,join.sql,SAME,,[]
postgresql,postgresql,set work_mem to '64kB',join.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin to off,join.sql,SAME,,[]
postgresql,postgresql,set enable_memoize to off,join.sql,SAME,,[]
postgresql,postgresql,reset work_mem,join.sql,SAME,,[]
postgresql,postgresql,reset enable_mergejoin,join.sql,SAME,,[]
postgresql,postgresql,reset enable_memoize,join.sql,SAME,,[]
postgresql,postgresql,"create temp table tt3(f1 int, f2 text)",join.sql,SAME,,[]
postgresql,postgresql,analyze tt3,join.sql,SAME,,[]
postgresql,postgresql,create temp table tt4(f1 int),join.sql,SAME,,[]
postgresql,postgresql,analyze tt4,join.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop to off,join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a.f1 FROM tt4 a LEFT JOIN (         SELECT b.f1         FROM tt3 b LEFT JOIN tt3 c ON (b.f1 = c.f1)         WHERE COALESCE(c.f1, 0) = 0 ) AS d ON (a.f1 = d.f1) WHERE COALESCE(d.f1, 0) = 0 ORDER BY 1",join.sql,SAME,,"[('Sort',), ('  Sort Key: a.f1',), ('  ->  Hash Right Join',), ('        Hash Cond: (b.f1 = a.f1)',), ('        Filter: (COALESCE(b.f1, 0) = 0)',), ('        ->  Hash Left Join',), ('              Hash Cond: (b.f1 = c.f1)',), ('              Filter: (COALESCE(c.f1, 0) = 0)',), ('              ->  Seq Scan on tt3 b',), ('              ->  Hash',), ('                    ->  Seq Scan on tt3 c',), ('        ->  Hash',), ('              ->  Seq Scan on tt4 a',)]"
postgresql,postgresql,"SELECT a.f1 FROM tt4 a LEFT JOIN (         SELECT b.f1         FROM tt3 b LEFT JOIN tt3 c ON (b.f1 = c.f1)         WHERE COALESCE(c.f1, 0) = 0 ) AS d ON (a.f1 = d.f1) WHERE COALESCE(d.f1, 0) = 0 ORDER BY 1",join.sql,SAME,,"[(0,), (1,), (9999,)]"
postgresql,postgresql,reset enable_nestloop,join.sql,SAME,,[]
postgresql,postgresql,"create temp table tt4x(c1 int, c2 int, c3 int)",join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from tt4x t1 where not exists (   select 1 from tt4x t2     left join tt4x t3 on t2.c3 = t3.c1     left join ( select t5.c1 as c1                 from tt4x t4 left join tt4x t5 on t4.c2 = t5.c1               ) a1 on t3.c2 = a1.c1   where t1.c1 = t2.c2 ),join.sql,SAME,,"[('Hash Anti Join',), ('  Hash Cond: (t1.c1 = t2.c2)',), ('  ->  Seq Scan on tt4x t1',), ('  ->  Hash',), ('        ->  Merge Right Join',), ('              Merge Cond: (t5.c1 = t3.c2)',), ('              ->  Merge Join',), ('                    Merge Cond: (t4.c2 = t5.c1)',), ('                    ->  Sort',), ('                          Sort Key: t4.c2',), ('                          ->  Seq Scan on tt4x t4',), ('                    ->  Sort',), ('                          Sort Key: t5.c1',), ('                          ->  Seq Scan on tt4x t5',), ('              ->  Sort',), ('                    Sort Key: t3.c2',), ('                    ->  Merge Left Join',), ('                          Merge Cond: (t2.c3 = t3.c1)',), ('                          ->  Sort',), ('                                Sort Key: t2.c3',), ('                                ->  Seq Scan on tt4x t2',), ('                          ->  Sort',), ('                                Sort Key: t3.c1',), ('                                ->  Seq Scan on tt4x t3',)]"
postgresql,postgresql,"create temp table tt5(f1 int, f2 int)",join.sql,SAME,,[]
postgresql,postgresql,"create temp table tt6(f1 int, f2 int)",join.sql,SAME,,[]
postgresql,postgresql,"select * from tt5,tt6 where tt5.f1 = tt6.f1 and tt5.f1 = tt5.f2 - tt6.f2",join.sql,SAME,,"[(1, 10, 1, 9)]"
postgresql,postgresql,create temp table xx (pkxx int),join.sql,SAME,,[]
postgresql,postgresql,"create temp table yy (pkyy int, pkxx int)",join.sql,SAME,,[]
postgresql,postgresql,"select yy.pkyy as yy_pkyy, yy.pkxx as yy_pkxx, yya.pkyy as yya_pkyy,        xxa.pkxx as xxa_pkxx, xxb.pkxx as xxb_pkxx from yy      left join (SELECT * FROM yy where pkyy = 101) as yya ON yy.pkyy = yya.pkyy      left join xx xxa on yya.pkxx = xxa.pkxx      left join xx xxb on coalesce (xxa.pkxx, 1) = xxb.pkxx",join.sql,SAME,,"[(101, 1, 101, 1, 1), (201, 2, None, None, 1), (301, None, None, None, 1)]"
postgresql,postgresql,create temp table zt1 (f1 int primary key),join.sql,SAME,,[]
postgresql,postgresql,create temp table zt2 (f2 int primary key),join.sql,SAME,,[]
postgresql,postgresql,create temp table zt3 (f3 int primary key),join.sql,SAME,,[]
postgresql,postgresql,select * from   zt2 left join zt3 on (f2 = f3)       left join zt1 on (f3 = f1) where f2 = 53,join.sql,SAME,,"[(53, None, None)]"
postgresql,postgresql,"create temp view zv1 as select *,'dummy'::text AS junk from zt1",join.sql,SAME,,[]
postgresql,postgresql,select * from   zt2 left join zt3 on (f2 = f3)       left join zv1 on (f3 = f1) where f2 = 53,join.sql,SAME,,"[(53, None, None, None)]"
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = 1,join.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin = 0,join.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop = 0,join.sql,SAME,,[]
postgresql,postgresql,create temp table a (i integer),join.sql,SAME,,[]
postgresql,postgresql,"create temp table b (x integer, y integer)",join.sql,SAME,,[]
postgresql,postgresql,select * from a left join b on i = x and i = y and x = i,join.sql,SAME,,[]
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,"create type mycomptype as (id int, v bigint)",join.sql,SAME,,[]
postgresql,postgresql,create temp table tidv (idv mycomptype),join.sql,SAME,,[]
postgresql,postgresql,create index on tidv (idv),join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select a.idv, b.idv from tidv a, tidv b where a.idv = b.idv",join.sql,SAME,,"[('Merge Join',), ('  Merge Cond: (a.idv = b.idv)',), ('  ->  Index Only Scan using tidv_idv_idx on tidv a',), ('  ->  Materialize',), ('        ->  Index Only Scan using tidv_idv_idx on tidv b',)]"
postgresql,postgresql,set enable_mergejoin = 0,join.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin = 0,join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select a.idv, b.idv from tidv a, tidv b where a.idv = b.idv",join.sql,SAME,,"[('Nested Loop',), ('  ->  Seq Scan on tidv a',), ('  ->  Index Only Scan using tidv_idv_idx on tidv b',), ('        Index Cond: (idv = a.idv)',)]"
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,"create temp table a (      code char not null,      constraint a_pk primary key (code) )",join.sql,SAME,,[]
postgresql,postgresql,"create temp table b (      a char not null,      num integer not null,      constraint b_pk primary key (a, num) )",join.sql,SAME,,[]
postgresql,postgresql,"create temp table c (      name char not null,      a char,      constraint c_pk primary key (name) )",join.sql,SAME,,[]
postgresql,postgresql,"select c.name, ss.code, ss.b_cnt, ss.const from c left join   (select a.code, coalesce(b_grp.cnt, 0) as b_cnt, -1 as const    from a left join      (select count(1) as cnt, b.a from b group by b.a) as b_grp      on a.code = b_grp.a   ) as ss   on (c.a = ss.code) order by c.name",join.sql,SAME,,"[('A', 'p', 2, -1), ('B', 'q', 0, -1), ('C', None, None, None)]"
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM ( SELECT 1 as key1 ) sub1 LEFT JOIN ( SELECT sub3.key3, sub4.value2, COALESCE(sub4.value2, 66) as value3 FROM     ( SELECT 1 as key3 ) sub3     LEFT JOIN     ( SELECT sub5.key5, COALESCE(sub6.value1, 1) as value2 FROM         ( SELECT 1 as key5 ) sub5         LEFT JOIN         ( SELECT 2 as key6, 42 as value1 ) sub6         ON sub5.key5 = sub6.key6     ) sub4     ON sub4.key5 = sub3.key3 ) sub2 ON sub1.key1 = sub2.key3",join.sql,SAME,,"[(1, 1, 1, 1)]"
postgresql,postgresql,"SELECT * FROM ( SELECT 1 as key1 ) sub1 LEFT JOIN ( SELECT sub3.key3, value2, COALESCE(value2, 66) as value3 FROM     ( SELECT 1 as key3 ) sub3     LEFT JOIN     ( SELECT sub5.key5, COALESCE(sub6.value1, 1) as value2 FROM         ( SELECT 1 as key5 ) sub5         LEFT JOIN         ( SELECT 2 as key6, 42 as value1 ) sub6         ON sub5.key5 = sub6.key6     ) sub4     ON sub4.key5 = sub3.key3 ) sub2 ON sub1.key1 = sub2.key3",join.sql,SAME,,"[(1, 1, 1, 1)]"
postgresql,postgresql,"create temp table nt1 (   id int primary key,   a1 boolean,   a2 boolean )",join.sql,SAME,,[]
postgresql,postgresql,"create temp table nt2 (   id int primary key,   nt1_id int,   b1 boolean,   b2 boolean,   foreign key (nt1_id) references nt1(id) )",join.sql,SAME,,[]
postgresql,postgresql,"create temp table nt3 (   id int primary key,   nt2_id int,   c1 boolean,   foreign key (nt2_id) references nt2(id) )",join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select nt3.id from nt3 as nt3   left join     (select nt2.*, (nt2.b1 and ss1.a3) AS b3      from nt2 as nt2        left join          (select nt1.*, (nt1.id is not null) as a3 from nt1) as ss1          on ss1.id = nt2.nt1_id     ) as ss2     on ss2.id = nt3.nt2_id where nt3.id = 1 and ss2.b3",join.sql,SAME,,"[('Nested Loop',), ('  ->  Nested Loop',), ('        ->  Index Scan using nt3_pkey on nt3',), ('              Index Cond: (id = 1)',), ('        ->  Index Scan using nt2_pkey on nt2',), ('              Index Cond: (id = nt3.nt2_id)',), ('  ->  Index Only Scan using nt1_pkey on nt1',), ('        Index Cond: (id = nt2.nt1_id)',), ('        Filter: (nt2.b1 AND (id IS NOT NULL))',)]"
postgresql,postgresql,"select nt3.id from nt3 as nt3   left join     (select nt2.*, (nt2.b1 and ss1.a3) AS b3      from nt2 as nt2        left join          (select nt1.*, (nt1.id is not null) as a3 from nt1) as ss1          on ss1.id = nt2.nt1_id     ) as ss2     on ss2.id = nt3.nt2_id where nt3.id = 1 and ss2.b3",join.sql,SAME,,"[(1,)]"
postgresql,postgresql,create temp table q1 as select 1 as q1,join.sql,SAME,,[]
postgresql,postgresql,create temp table q2 as select 0 as q2,join.sql,SAME,,[]
postgresql,postgresql,analyze q1,join.sql,SAME,,[]
postgresql,postgresql,analyze q2,join.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from   (select 1 as x) ss1 left join (select 2 as y) ss2 on (true),   lateral (select ss2.y as z limit 1) ss3",join.sql,SAME,,"[('Nested Loop',), ('  Output: 1, (2), ((2))',), ('  ->  Result',), ('        Output: 2',), ('  ->  Limit',), ('        Output: ((2))',), ('        ->  Result',), ('              Output: (2)',)]"
postgresql,postgresql,"select * from   (select 1 as x) ss1 left join (select 2 as y) ss2 on (true),   lateral (select ss2.y as z limit 1) ss3",join.sql,SAME,,"[(1, 2, 2)]"
postgresql,postgresql,"explain (costs off) select * from   (select 0 as z) as t1   left join   (select true as a) as t2   on true,   lateral (select true as b            union all            select a as b) as t3 where b",join.sql,SAME,,"[('Nested Loop',), ('  ->  Result',), ('  ->  Append',), ('        ->  Result',), ('        ->  Result',), ('              One-Time Filter: (true)',)]"
postgresql,postgresql,"select * from   (select 0 as z) as t1   left join   (select true as a) as t2   on true,   lateral (select true as b            union all            select a as b) as t3 where b",join.sql,SAME,,"[(0, True, True), (0, True, True)]"
postgresql,postgresql,"explain (verbose, costs off) with ctetable as not materialized ( select 1 as f1 ) select * from ctetable c1 where f1 in ( select c3.f1 from ctetable c2 full join ctetable c3 on true )",join.sql,SAME,,"[('Result',), ('  Output: 1',), ('  One-Time Filter: (1 = 1)',)]"
postgresql,postgresql,with ctetable as not materialized ( select 1 as f1 ) select * from ctetable c1 where f1 in ( select c3.f1 from ctetable c2 full join ctetable c3 on true ),join.sql,SAME,,"[(1,)]"
postgresql,postgresql,create function f_immutable_int4(i integer) returns integer as $$ begin return i; end; $$ language plpgsql immutable,join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select nt3.id from nt3 as nt3   left join     (select nt2.*, (nt2.b1 or i4 = 42) AS b3      from nt2 as nt2        left join          f_immutable_int4(0) i4          on i4 = nt2.nt1_id     ) as ss2     on ss2.id = nt3.nt2_id where nt3.id = 1 and ss2.b3",join.sql,SAME,,"[('Nested Loop Left Join',), ('  Filter: ((nt2.b1 OR ((0) = 42)))',), ('  ->  Index Scan using nt3_pkey on nt3',), ('        Index Cond: (id = 1)',), ('  ->  Nested Loop Left Join',), ('        Join Filter: (0 = nt2.nt1_id)',), ('        ->  Index Scan using nt2_pkey on nt2',), ('              Index Cond: (id = nt3.nt2_id)',), ('        ->  Result',)]"
postgresql,postgresql,drop function f_immutable_int4(int),join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from (values (1, array[10,20]), (2, array[20,30])) as v1(v1x,v1ys) left join (values (1, 10), (2, 20)) as v2(v2x,v2y) on v2x = v1x left join unnest(v1ys) as u1(u1y) on u1y = v2y",join.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Values Scan on ""*VALUES*""',), ('  ->  Hash Right Join',), ('        Hash Cond: (u1.u1y = ""*VALUES*_1"".column2)',), ('        Filter: (""*VALUES*_1"".column1 = ""*VALUES*"".column1)',), ('        ->  Function Scan on unnest u1',), ('        ->  Hash',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select * from (values (1, array[10,20]), (2, array[20,30])) as v1(v1x,v1ys) left join (values (1, 10), (2, 20)) as v2(v2x,v2y) on v2x = v1x left join unnest(v1ys) as u1(u1y) on u1y = v2y",join.sql,SAME,,"[(1, [10, 20], 1, 10, 10), (2, [20, 30], 2, 20, 20)]"
postgresql,postgresql,"explain (costs off) select nspname from (select 1 as x) ss1 left join ( select n.nspname, c.relname   from pg_class c left join pg_namespace n on n.oid = c.relnamespace   where c.relkind = 'r' ) ss2 on false",join.sql,SAME,,"[('Nested Loop Left Join',), ('  Join Filter: false',), ('  ->  Result',), ('  ->  Result',), ('        One-Time Filter: false',)]"
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,create temp table t (a int unique),join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select 1 from t t1   join lateral (select t1.a from (select 1) foo offset 0) as s1 on true   join     (select 1 from t t2        inner join (t t3                    left join (t t4 left join t t5 on t4.a = 1)                    on t3.a = t4.a)        on false      where t3.a = coalesce(t5.a,1)) as s2   on true",join.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin to off,join.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop to off,join.sql,SAME,,[]
postgresql,postgresql,reset enable_hashjoin,join.sql,SAME,,[]
postgresql,postgresql,reset enable_nestloop,join.sql,SAME,,[]
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE a (id int PRIMARY KEY, b_id int)",join.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE b (id int PRIMARY KEY, c_id int)",join.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE c (id int PRIMARY KEY),join.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE d (a int, b int)",join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) SELECT a.* FROM a LEFT JOIN b ON a.b_id = b.id,join.sql,SAME,,"[('Seq Scan on a',)]"
postgresql,postgresql,explain (costs off) SELECT b.* FROM b LEFT JOIN c ON b.c_id = c.id,join.sql,SAME,,"[('Seq Scan on b',)]"
postgresql,postgresql,explain (costs off)   SELECT a.* FROM a LEFT JOIN (b left join c on b.c_id = c.id)   ON (a.b_id = b.id),join.sql,SAME,,"[('Seq Scan on a',)]"
postgresql,postgresql,explain (costs off) select id from a where id in ( 	select b.id from b left join c on b.id = c.id ),join.sql,SAME,,"[('Hash Join',), ('  Hash Cond: (a.id = b.id)',), ('  ->  Seq Scan on a',), ('  ->  Hash',), ('        ->  Seq Scan on b',)]"
postgresql,postgresql,explain (costs off) select a1.id from   (a a1 left join a a2 on true)   left join   (a a3 left join a a4 on a3.id = a4.id)   on a2.id = a3.id,join.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Seq Scan on a a1',), ('  ->  Materialize',), ('        ->  Seq Scan on a a2',)]"
postgresql,postgresql,explain (costs off) select a1.id from   (a a1 left join a a2 on a1.id = a2.id)   left join   (a a3 left join a a4 on a3.id = a4.id)   on a2.id = a3.id,join.sql,SAME,,"[('Seq Scan on a a1',)]"
postgresql,postgresql,explain (costs off) select 1 from a t1     left join a t2 on true    inner join a t3 on true     left join a t4 on t2.id = t4.id and t2.id = t3.id,join.sql,SAME,,"[('Nested Loop',), ('  ->  Nested Loop Left Join',), ('        ->  Seq Scan on a t1',), ('        ->  Materialize',), ('              ->  Seq Scan on a t2',), ('  ->  Materialize',), ('        ->  Seq Scan on a t3',)]"
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,"create temp table parent (k int primary key, pd int)",join.sql,SAME,,[]
postgresql,postgresql,"create temp table child (k int unique, cd int)",join.sql,SAME,,[]
postgresql,postgresql,select p.* from parent p left join child c on (p.k = c.k),join.sql,SAME,,"[(1, 10), (2, 20), (3, 30)]"
postgresql,postgresql,explain (costs off)   select p.* from parent p left join child c on (p.k = c.k),join.sql,SAME,,"[('Seq Scan on parent p',)]"
postgresql,postgresql,"select p.*, linked from parent p   left join (select c.*, true as linked from child c) as ss   on (p.k = ss.k)",join.sql,SAME,,"[(1, 10, True), (2, 20, None), (3, 30, None)]"
postgresql,postgresql,"explain (costs off)   select p.*, linked from parent p     left join (select c.*, true as linked from child c) as ss     on (p.k = ss.k)",join.sql,SAME,,"[('Hash Left Join',), ('  Hash Cond: (p.k = c.k)',), ('  ->  Seq Scan on parent p',), ('  ->  Hash',), ('        ->  Seq Scan on child c',)]"
postgresql,postgresql,select p.* from   parent p left join child c on (p.k = c.k)   where p.k = 1 and p.k = 2,join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select p.* from   parent p left join child c on (p.k = c.k)   where p.k = 1 and p.k = 2,join.sql,SAME,,"[('Result',), ('  One-Time Filter: false',), ('  ->  Index Scan using parent_pkey on parent p',), ('        Index Cond: (k = 1)',)]"
postgresql,postgresql,select p.* from   (parent p left join child c on (p.k = c.k)) join parent x on p.k = x.k   where p.k = 1 and p.k = 2,join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select p.* from   (parent p left join child c on (p.k = c.k)) join parent x on p.k = x.k   where p.k = 1 and p.k = 2,join.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE a (id int PRIMARY KEY),join.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE b (id int PRIMARY KEY, a_id int)",join.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM b LEFT JOIN a ON (b.a_id = a.id) WHERE (a.id IS NULL OR a.id > 0),join.sql,SAME,,"[(1, None, None)]"
postgresql,postgresql,SELECT b.* FROM b LEFT JOIN a ON (b.a_id = a.id) WHERE (a.id IS NULL OR a.id > 0),join.sql,SAME,,"[(1, None)]"
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,"create temp table innertab (id int8 primary key, dat1 int8)",join.sql,SAME,,[]
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,create temp table uniquetbl (f1 text unique),join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select t1.* from   uniquetbl as t1   left join (select *, '***'::text as d1 from uniquetbl) t2   on t1.f1 = t2.f1   left join uniquetbl t3   on t2.d1 = t3.f1",join.sql,SAME,,"[('Seq Scan on uniquetbl t1',)]"
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,create temp table t (a int unique),join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select 1 from t t1   left join (select 2 as c              from t t2 left join t t3 on t2.a = t3.a) s     on true where t1.a = s.c,join.sql,SAME,,"[('Nested Loop Left Join',), ('  Filter: (t1.a = (2))',), ('  ->  Seq Scan on t t1',), ('  ->  Materialize',), ('        ->  Seq Scan on t t2',)]"
postgresql,postgresql,select 1 from t t1   left join (select 2 as c              from t t2 left join t t3 on t2.a = t3.a) s     on true where t1.a = s.c,join.sql,SAME,,[]
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,"create temp table t (a int unique, b int)",join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select 1 from t t1   left join (select t2.a, 1 as c              from t t2 left join t t3 on t2.a = t3.a) s   on true   left join t t4 on true where s.a < s.c",join.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Nested Loop',), ('        ->  Seq Scan on t t1',), ('        ->  Materialize',), ('              ->  Seq Scan on t t2',), ('                    Filter: (a < 1)',), ('  ->  Materialize',), ('        ->  Seq Scan on t t4',)]"
postgresql,postgresql,"explain (costs off) select t1.a, s.* from t t1   left join lateral (select t2.a, coalesce(t1.a, 1) as c                      from t t2 left join t t3 on t2.a = t3.a) s   on true   left join t t4 on true where s.a < s.c",join.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Nested Loop',), ('        ->  Seq Scan on t t1',), ('        ->  Seq Scan on t t2',), ('              Filter: (a < COALESCE(t1.a, 1))',), ('  ->  Materialize',), ('        ->  Seq Scan on t t4',)]"
postgresql,postgresql,"select t1.a, s.* from t t1   left join lateral (select t2.a, coalesce(t1.a, 1) as c                      from t t2 left join t t3 on t2.a = t3.a) s   on true   left join t t4 on true where s.a < s.c",join.sql,SAME,,"[(2, 1, 2), (2, 1, 2)]"
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,create temp table parttbl (a integer primary key) partition by range (a),join.sql,SAME,,[]
postgresql,postgresql,create temp table parttbl1 partition of parttbl for values from (1) to (100),join.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin to off,join.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin to off,join.sql,SAME,,[]
postgresql,postgresql,analyze sj,join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select p.* from sj p, sj q where q.a = p.a and q.b = q.a - 1",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (p.a = q.a)',), ('  ->  Seq Scan on sj q',), ('        Filter: (b = (a - 1))',), ('  ->  Seq Scan on sj p',)]"
postgresql,postgresql,"select p.* from sj p, sj q where q.a = p.a and q.b = q.a - 1",join.sql,SAME,,"[(2, 1, 1)]"
postgresql,postgresql,explain (costs off) select * from sj p where exists (select * from sj q               where q.a = p.a and q.b < 10),join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (p.a = q.a)',), ('  ->  Seq Scan on sj p',), ('  ->  Materialize',), ('        ->  Seq Scan on sj q',), ('              Filter: (b < 10)',)]"
postgresql,postgresql,select * from sj p where exists (select * from sj q               where q.a = p.a and q.b < 10),join.sql,SAME,,"[(2, 1, 1)]"
postgresql,postgresql,"explain (costs off) select * from sj t1, sj t2 where t1.a = t2.c and t1.b is not null",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (t1.a = t2.c)',), ('  ->  Seq Scan on sj t2',), ('  ->  Materialize',), ('        ->  Seq Scan on sj t1',), ('              Filter: (b IS NOT NULL)',)]"
postgresql,postgresql,"explain (costs off) select * from   (select a as x from sj where false) as q1,   (select a as y from sj where false) as q2 where q1.x = q2.y",join.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,"explain (costs off) select * from sj t1, sj t2 where t1.a = t1.b and t1.b = t2.b and t2.b = t2.a",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (t1.a = t2.b)',), ('  ->  Seq Scan on sj t1',), ('        Filter: (a = b)',), ('  ->  Seq Scan on sj t2',), ('        Filter: (b = a)',)]"
postgresql,postgresql,"explain (costs off) select * from sj t1, sj t2, sj t3 where t1.a = t1.b and t1.b = t2.b and t2.b = t2.a and       t1.b = t3.b and t3.b = t3.a",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (t1.a = t3.b)',), ('  ->  Nested Loop',), ('        Join Filter: (t1.a = t2.b)',), ('        ->  Seq Scan on sj t1',), ('              Filter: (a = b)',), ('        ->  Seq Scan on sj t2',), ('              Filter: (b = a)',), ('  ->  Seq Scan on sj t3',), ('        Filter: (b = a)',)]"
postgresql,postgresql,explain (costs off) select * from  sj t1       join sj t2 on t1.a = t2.a and t1.b = t2.b 	  join sj t3 on t2.a = t3.a and t2.b + 1 = t3.b + 1,join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: ((t1.a = t3.a) AND ((t3.b + 1) = (t2.b + 1)))',), ('  ->  Nested Loop',), ('        Join Filter: ((t1.a = t2.a) AND (t2.b = t1.b))',), ('        ->  Seq Scan on sj t1',), ('        ->  Materialize',), ('              ->  Seq Scan on sj t2',), ('  ->  Seq Scan on sj t3',)]"
postgresql,postgresql,"explain (costs off) select t1.a, (select a from sj where a = t2.a and a = t1.a) from sj t1, sj t2 where t1.a = t2.a",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (t1.a = t2.a)',), ('  ->  Seq Scan on sj t1',), ('  ->  Materialize',), ('        ->  Seq Scan on sj t2',), ('  SubPlan 1',), ('    ->  Result',), ('          One-Time Filter: (t2.a = t1.a)',), ('          ->  Seq Scan on sj',), ('                Filter: (a = t1.a)',)]"
postgresql,postgresql,"explain (costs off) select * from (   select t1.*, t2.a as ax from sj t1 join sj t2   on (t1.a = t2.a and t1.c * t1.c = t2.c + 2 and t2.b is null) ) as q1 left join   (select t3.* from sj t3, sj t4 where t3.c = t4.c) as q2 on q1.ax = q2.a",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: ((t1.a = t2.a) AND ((t2.c + 2) = (t1.c * t1.c)))',), ('  ->  Nested Loop Left Join',), ('        Join Filter: (t2.a = t3.a)',), ('        ->  Seq Scan on sj t2',), ('              Filter: (b IS NULL)',), ('        ->  Nested Loop',), ('              Join Filter: (t3.c = t4.c)',), ('              ->  Seq Scan on sj t3',), ('              ->  Materialize',), ('                    ->  Seq Scan on sj t4',), ('  ->  Seq Scan on sj t1',)]"
postgresql,postgresql,"explain (verbose, costs off) select t3.a from sj t1 	join sj t2 on t1.a = t2.a 	join lateral (select t1.a offset 0) t3 on true",join.sql,SAME,,"[('Nested Loop',), ('  Output: (t1.a)',), ('  ->  Nested Loop',), ('        Output: t1.a',), ('        Inner Unique: true',), ('        Join Filter: (t1.a = t2.a)',), ('        ->  Seq Scan on public.sj t1',), ('              Output: t1.a, t1.b, t1.c',), ('        ->  Materialize',), ('              Output: t2.a',), ('              ->  Seq Scan on public.sj t2',), ('                    Output: t2.a',), ('  ->  Result',), ('        Output: t1.a',)]"
postgresql,postgresql,"explain (verbose, costs off) select t3.a from sj t1 	join sj t2 on t1.a = t2.a 	join lateral (select * from (select t1.a offset 0) offset 0) t3 on true",join.sql,SAME,,"[('Nested Loop',), ('  Output: (t1.a)',), ('  ->  Nested Loop',), ('        Output: t1.a',), ('        Inner Unique: true',), ('        Join Filter: (t1.a = t2.a)',), ('        ->  Seq Scan on public.sj t1',), ('              Output: t1.a, t1.b, t1.c',), ('        ->  Materialize',), ('              Output: t2.a',), ('              ->  Seq Scan on public.sj t2',), ('                    Output: t2.a',), ('  ->  Result',), ('        Output: t1.a',)]"
postgresql,postgresql,"explain (verbose, costs off) select t4.a from sj t1 	join sj t2 on t1.a = t2.a 	join lateral (select t3.a from sj t3, (select t1.a) offset 0) t4 on true",join.sql,SAME,,"[('Nested Loop',), ('  Output: t3.a',), ('  ->  Nested Loop',), ('        Output: t1.a',), ('        Inner Unique: true',), ('        Join Filter: (t1.a = t2.a)',), ('        ->  Seq Scan on public.sj t1',), ('              Output: t1.a, t1.b, t1.c',), ('        ->  Materialize',), ('              Output: t2.a',), ('              ->  Seq Scan on public.sj t2',), ('                    Output: t2.a',), ('  ->  Seq Scan on public.sj t3',), ('        Output: t3.a',)]"
postgresql,postgresql,explain (COSTS OFF) SELECT * FROM pg_am am WHERE am.amname IN (   SELECT c1.relname AS relname   FROM pg_class c1     JOIN pg_class c2     ON c1.oid=c2.oid AND c1.oid < 10 ),join.sql,SAME,,"[('Nested Loop Semi Join',), ('  Join Filter: (am.amname = c1.relname)',), ('  ->  Seq Scan on pg_am am',), ('  ->  Materialize',), ('        ->  Nested Loop',), ('              ->  Index Scan using pg_class_oid_index on pg_class c1',), (""                    Index Cond: (oid < '10'::oid)"",), ('              ->  Index Only Scan using pg_class_oid_index on pg_class c2',), ('                    Index Cond: (oid = c1.oid)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2 AND j2.a = 3",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 2)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (a = 3)',)]"
postgresql,postgresql,"SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2 AND j2.a = 3",join.sql,SAME,,"[(2, 1, 1, 3, 1, 3)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2 AND j2.a = 2",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 2)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (a = 2)',)]"
postgresql,postgresql,"SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2 AND j2.a = 2",join.sql,SAME,,"[(2, 1, 1, 2, 1, 1)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND j1.a = (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int   AND (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int = j2.a",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), (""        Filter: (a = (((EXTRACT(dow FROM CURRENT_TIMESTAMP(0)) / '15'::numeric) + '3'::numeric))::integer)"",), ('  ->  Seq Scan on sj j2',), (""        Filter: (a = (((EXTRACT(dow FROM CURRENT_TIMESTAMP(0)) / '15'::numeric) + '3'::numeric))::integer)"",)]"
postgresql,postgresql,"SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND j1.a = (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int   AND (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int = j2.a",join.sql,SAME,,"[(3, 1, 3, 3, 1, 3)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 1 AND j2.a = 1",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (a = 1)',)]"
postgresql,postgresql,"SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 1 AND j2.a = 1",join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND 1 = j1.a AND j2.a = 1",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (a = 1)',)]"
postgresql,postgresql,"SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND 1 = j1.a AND j2.a = 1",join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t4.* FROM (SELECT t1.*, t2.a AS a1 FROM sj t1, sj t2 WHERE t1.b = t2.b) AS t3 JOIN sj t4 ON (t4.a = t3.a) WHERE t3.a1 = 42",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (t4.a = t1.a)',), ('  ->  Nested Loop',), ('        Join Filter: (t1.b = t2.b)',), ('        ->  Seq Scan on sj t2',), ('              Filter: (a = 42)',), ('        ->  Seq Scan on sj t1',), ('  ->  Seq Scan on sj t4',)]"
postgresql,postgresql,"SELECT t4.* FROM (SELECT t1.*, t2.a AS a1 FROM sj t1, sj t2 WHERE t1.b = t2.b) AS t3 JOIN sj t4 ON (t4.a = t3.a) WHERE t3.a1 = 42",join.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX sj_fn_idx ON sj((a * a)),join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 	WHERE j1.b = j2.b AND j1.a*j1.a = 1 AND j2.a*j2.a = 1",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: ((a * a) = 1)',), ('  ->  Seq Scan on sj j2',), ('        Filter: ((a * a) = 1)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 	WHERE j1.b = j2.b AND j1.a*j1.a = 1 AND j2.a*j2.a = 2",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: ((a * a) = 1)',), ('  ->  Seq Scan on sj j2',), ('        Filter: ((a * a) = 2)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND (j1.a*j1.a) = (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int   AND (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int = (j2.a*j2.a)",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), (""        Filter: ((a * a) = (((EXTRACT(dow FROM CURRENT_TIMESTAMP(0)) / '15'::numeric) + '3'::numeric))::integer)"",), ('  ->  Seq Scan on sj j2',), (""        Filter: ((a * a) = (((EXTRACT(dow FROM CURRENT_TIMESTAMP(0)) / '15'::numeric) + '3'::numeric))::integer)"",)]"
postgresql,postgresql,"SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND (j1.a*j1.a) = (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int   AND (EXTRACT(DOW FROM current_timestamp(0))/15 + 3)::int = (j2.a*j2.a)",join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND (j1.a*j1.c/3) = (random()/3 + 3)::int   AND (random()/3 + 3)::int = (j2.a*j2.c/3)",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), (""        Filter: (((a * c) / 3) = (((random() / '3'::double precision) + '3'::double precision))::integer)"",), ('  ->  Seq Scan on sj j2',), (""        Filter: ((((random() / '3'::double precision) + '3'::double precision))::integer = ((a * c) / 3))"",)]"
postgresql,postgresql,"SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b   AND (j1.a*j1.c/3) = (random()/3 + 3)::int   AND (random()/3 + 3)::int = (j2.a*j2.c/3)",join.sql,SAME,,"[(3, 1, 3, 3, 1, 3)]"
postgresql,postgresql,"CREATE UNIQUE INDEX sj_temp_idx1 ON sj(a,b,c)",join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 	WHERE j1.b = j2.b AND j1.a = 2 AND j1.c = 3 AND j2.a = 2 AND 3 = j2.c",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: ((a = 2) AND (c = 3))',), ('  ->  Seq Scan on sj j2',), ('        Filter: ((a = 2) AND (c = 3))',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) 	SELECT * FROM sj j1, sj j2 	WHERE j1.b = j2.b AND 2 = j1.a AND j1.c = 3 AND j2.a = 1 AND 3 = j2.c",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: ((2 = a) AND (c = 3))',), ('  ->  Seq Scan on sj j2',), ('        Filter: ((c = 3) AND (a = 1))',)]"
postgresql,postgresql,"CREATE UNIQUE INDEX sj_temp_idx ON sj(a,b)",join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND j1.a = 2",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j1',), ('        Filter: (a = 2)',), ('  ->  Seq Scan on sj j2',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND 2 = j2.a",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (j1.b = j2.b)',), ('  ->  Seq Scan on sj j2',), ('        Filter: (2 = a)',), ('  ->  Seq Scan on sj j1',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj j1, sj j2 WHERE j1.b = j2.b AND (j1.a = 1 OR j2.a = 1)",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: ((j1.b = j2.b) AND ((j1.a = 1) OR (j2.a = 1)))',), ('  ->  Seq Scan on sj j1',), ('  ->  Materialize',), ('        ->  Seq Scan on sj j2',)]"
postgresql,postgresql,"DROP INDEX sj_fn_idx, sj_temp_idx1, sj_temp_idx",join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX idx_test_is_flag ON tab_with_flag (is_flag),join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT COUNT(*) FROM tab_with_flag WHERE 	(is_flag IS NULL OR is_flag = 0) 	AND id IN (SELECT id FROM tab_with_flag WHERE id IN (2, 3))",join.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop',), ('        ->  Bitmap Heap Scan on tab_with_flag tab_with_flag_1',), (""              Recheck Cond: (id = ANY ('{2,3}'::integer[]))"",), ('              ->  Bitmap Index Scan on tab_with_flag_pkey',), (""                    Index Cond: (id = ANY ('{2,3}'::integer[]))"",), ('        ->  Memoize',), ('              Cache Key: tab_with_flag_1.id',), ('              Cache Mode: logical',), ('              ->  Index Scan using tab_with_flag_pkey on tab_with_flag',), ('                    Index Cond: (id = tab_with_flag_1.id)',), ('                    Filter: ((is_flag IS NULL) OR (is_flag = 0))',)]"
postgresql,postgresql,explain (costs off) select p.b from sj p join sj q on p.a = q.a group by p.b having sum(p.a) = 1,join.sql,SAME,,"[('GroupAggregate',), ('  Group Key: p.b',), ('  Filter: (sum(p.a) = 1)',), ('  ->  Sort',), ('        Sort Key: p.b',), ('        ->  Nested Loop',), ('              Join Filter: (p.a = q.a)',), ('              ->  Seq Scan on sj p',), ('              ->  Materialize',), ('                    ->  Seq Scan on sj q',)]"
postgresql,postgresql,"explain (verbose, costs off) select 1 from (select x.* from sj x, sj y where x.a = y.a) q,   lateral generate_series(1, q.a) gs(i)",join.sql,SAME,,"[('Nested Loop',), ('  Output: 1',), ('  ->  Nested Loop',), ('        Output: x.a',), ('        Inner Unique: true',), ('        Join Filter: (x.a = y.a)',), ('        ->  Seq Scan on public.sj x',), ('              Output: x.a, x.b, x.c',), ('        ->  Materialize',), ('              Output: y.a',), ('              ->  Seq Scan on public.sj y',), ('                    Output: y.a',), ('  ->  Function Scan on pg_catalog.generate_series gs',), ('        Output: gs.i',), ('        Function Call: generate_series(1, x.a)',)]"
postgresql,postgresql,"explain (verbose, costs off) select 1 from (select y.* from sj x, sj y where x.a = y.a) q,   lateral generate_series(1, q.a) gs(i)",join.sql,SAME,,"[('Nested Loop',), ('  Output: 1',), ('  ->  Nested Loop',), ('        Output: y.a',), ('        Inner Unique: true',), ('        Join Filter: (x.a = y.a)',), ('        ->  Seq Scan on public.sj x',), ('              Output: x.a, x.b, x.c',), ('        ->  Materialize',), ('              Output: y.a',), ('              ->  Seq Scan on public.sj y',), ('                    Output: y.a',), ('  ->  Function Scan on pg_catalog.generate_series gs',), ('        Output: gs.i',), ('        Function Call: generate_series(1, y.a)',)]"
postgresql,postgresql,explain (costs off) select * from sj p join sj q on p.a = q.a   left join sj r on p.a + q.a = r.a,join.sql,SAME,,"[('Nested Loop Left Join',), ('  Join Filter: ((p.a + q.a) = r.a)',), ('  ->  Nested Loop',), ('        Join Filter: (p.a = q.a)',), ('        ->  Seq Scan on sj p',), ('        ->  Materialize',), ('              ->  Seq Scan on sj q',), ('  ->  Materialize',), ('        ->  Seq Scan on sj r',)]"
postgresql,postgresql,"explain (costs off) select * from sj p, sj q where p.a = q.a and p.b = 1 and q.b = 2",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (p.a = q.a)',), ('  ->  Seq Scan on sj p',), ('        Filter: (b = 1)',), ('  ->  Seq Scan on sj q',), ('        Filter: (b = 2)',)]"
postgresql,postgresql,create index on sk(a),join.sql,SAME,,[]
postgresql,postgresql,set join_collapse_limit to 1,join.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan to off,join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select 1 from 	(sk k1 join sk k2 on k1.a = k2.a) 	join (sj j1 join sj j2 on j1.a = j2.a) on j1.b = k1.b,join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (k1.b = j1.b)',), ('  ->  Nested Loop',), ('        ->  Index Scan using sk_a_idx on sk k1',), ('        ->  Index Only Scan using sk_a_idx on sk k2',), ('              Index Cond: (a = k1.a)',), ('  ->  Materialize',), ('        ->  Nested Loop',), ('              ->  Index Scan using sj_a_key on sj j1',), ('              ->  Memoize',), ('                    Cache Key: j1.a',), ('                    Cache Mode: logical',), ('                    ->  Index Only Scan using sj_a_key on sj j2',), ('                          Index Cond: (a = j1.a)',)]"
postgresql,postgresql,explain (costs off) select 1 from 	(sk k1 join sk k2 on k1.a = k2.a) 	join (sj j1 join sj j2 on j1.a = j2.a) on j2.b = k1.b,join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (k1.b = j2.b)',), ('  ->  Nested Loop',), ('        ->  Index Scan using sk_a_idx on sk k1',), ('        ->  Index Only Scan using sk_a_idx on sk k2',), ('              Index Cond: (a = k1.a)',), ('  ->  Materialize',), ('        ->  Nested Loop',), ('              ->  Index Only Scan using sj_a_key on sj j1',), ('              ->  Memoize',), ('                    Cache Key: j1.a',), ('                    Cache Mode: logical',), ('                    ->  Index Scan using sj_a_key on sj j2',), ('                          Index Cond: (a = j1.a)',)]"
postgresql,postgresql,reset join_collapse_limit,join.sql,SAME,,[]
postgresql,postgresql,reset enable_seqscan,join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM emp1 e1, emp1 e2 WHERE e1.id = e2.id AND e2.code <> e1.code",join.sql,SAME,,"[('Nested Loop',), ('  Output: e1.id, e1.code, e2.id, e2.code',), ('  Inner Unique: true',), ('  ->  Seq Scan on public.emp1 e1',), ('        Output: e1.id, e1.code',), ('  ->  Index Scan using emp1_pkey on public.emp1 e2',), ('        Output: e2.id, e2.code',), ('        Index Cond: (e2.id = e1.id)',), ('        Filter: (e2.code <> e1.code)',)]"
postgresql,postgresql,CREATE UNIQUE INDEX ON emp1((id*id)),join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM emp1 c1, emp1 c2, emp1 c3 WHERE c1.id=c2.id AND c1.id*c2.id=c3.id*c3.id",join.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop',), ('        ->  Nested Loop',), ('              ->  Seq Scan on emp1 c1',), ('              ->  Index Only Scan using emp1_pkey on emp1 c2',), ('                    Index Cond: (id = c1.id)',), ('        ->  Index Scan using emp1_expr_idx on emp1 c3',), ('              Index Cond: ((id * id) = (c1.id * c2.id))',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM emp1 c1, emp1 c2, emp1 c3 WHERE c1.id=c3.id AND c1.id*c3.id=c2.id*c2.id",join.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop',), ('        ->  Nested Loop',), ('              ->  Seq Scan on emp1 c1',), ('              ->  Index Only Scan using emp1_pkey on emp1 c3',), ('                    Index Cond: (id = c1.id)',), ('        ->  Index Scan using emp1_expr_idx on emp1 c2',), ('              Index Cond: ((id * id) = (c1.id * c3.id))',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM emp1 c1, emp1 c2, emp1 c3 WHERE c3.id=c2.id AND c3.id*c2.id=c1.id*c1.id",join.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop',), ('        ->  Nested Loop',), ('              ->  Seq Scan on emp1 c2',), ('              ->  Index Only Scan using emp1_pkey on emp1 c3',), ('                    Index Cond: (id = c2.id)',), ('        ->  Index Scan using emp1_expr_idx on emp1 c1',), ('              Index Cond: ((id * id) = (c3.id * c2.id))',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT c1.code FROM emp1 c1 LEFT JOIN emp1 c2 ON c1.id = c2.id WHERE c2.id IS NOT NULL EXCEPT ALL SELECT c3.code FROM emp1 c3,join.sql,SAME,,"[('HashSetOp Except All',), ('  ->  Append',), ('        ->  Subquery Scan on ""*SELECT* 1""',), ('              ->  Nested Loop',), ('                    ->  Seq Scan on emp1 c2',), ('                          Filter: (id IS NOT NULL)',), ('                    ->  Index Scan using emp1_pkey on emp1 c1',), ('                          Index Cond: (id = c2.id)',), ('        ->  Subquery Scan on ""*SELECT* 2""',), ('              ->  Seq Scan on emp1 c3',)]"
postgresql,postgresql,"explain (costs off) select * from emp1 t1 left join     (select coalesce(t3.code, 1) from emp1 t2         left join (emp1 t3 join emp1 t4 on t3.id = t4.id)         on true) on true",join.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Seq Scan on emp1 t1',), ('  ->  Materialize',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on emp1 t2',), ('              ->  Materialize',), ('                    ->  Nested Loop',), ('                          ->  Seq Scan on emp1 t3',), ('                          ->  Index Only Scan using emp1_pkey on emp1 t4',), ('                                Index Cond: (id = t3.id)',)]"
postgresql,postgresql,"explain (verbose, costs off) select 1 from emp1 t1 left join     ((select 1 as x, * from emp1 t2) s1 inner join         (select * from emp1 t3) s2 on s1.id = s2.id)     on true where s1.x = 1",join.sql,SAME,,"[('Nested Loop',), ('  Output: 1',), ('  ->  Seq Scan on public.emp1 t1',), ('        Output: t1.id, t1.code',), ('  ->  Materialize',), ('        ->  Nested Loop',), ('              Inner Unique: true',), ('              ->  Seq Scan on public.emp1 t2',), ('                    Output: t2.id, t2.code',), ('                    Filter: (1 = 1)',), ('              ->  Index Only Scan using emp1_pkey on public.emp1 t3',), ('                    Output: t3.id',), ('                    Index Cond: (t3.id = t2.id)',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from emp1 t1 join emp1 t2 on t1.id = t2.id left join     lateral (select t1.id as t1id, * from generate_series(1,1) t3) s on true",join.sql,SAME,,"[('Nested Loop Left Join',), ('  Output: t1.id, t1.code, t2.id, t2.code, (t1.id), t3.t3',), ('  ->  Nested Loop',), ('        Output: t1.id, t1.code, t2.id, t2.code',), ('        Inner Unique: true',), ('        ->  Seq Scan on public.emp1 t1',), ('              Output: t1.id, t1.code',), ('        ->  Index Scan using emp1_pkey on public.emp1 t2',), ('              Output: t2.id, t2.code',), ('              Index Cond: (t2.id = t1.id)',), ('  ->  Function Scan on pg_catalog.generate_series t3',), ('        Output: t3.t3, t1.id',), ('        Function Call: generate_series(1, 1)',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from generate_series(1,10) t1(id) left join     lateral (select t1.id as t1id, t2.id from emp1 t2 join emp1 t3 on t2.id = t3.id) on true",join.sql,SAME,,"[('Nested Loop Left Join',), ('  Output: t1.id, (t1.id), t2.id',), ('  ->  Function Scan on pg_catalog.generate_series t1',), ('        Output: t1.id',), ('        Function Call: generate_series(1, 10)',), ('  ->  Nested Loop',), ('        Output: t2.id, t1.id',), ('        Inner Unique: true',), ('        ->  Seq Scan on public.emp1 t2',), ('              Output: t2.id, t2.code',), ('        ->  Index Only Scan using emp1_pkey on public.emp1 t3',), ('              Output: t3.id',), ('              Index Cond: (t3.id = t2.id)',)]"
postgresql,postgresql,explain (costs off) select * from emp1 t1    inner join emp1 t2 on t1.id = t2.id     left join emp1 t3 on t1.id > 1 and t1.id < 2,join.sql,SAME,,"[('Nested Loop Left Join',), ('  Join Filter: ((t1.id > 1) AND (t1.id < 2))',), ('  ->  Nested Loop',), ('        ->  Seq Scan on emp1 t1',), ('        ->  Index Scan using emp1_pkey on emp1 t2',), ('              Index Cond: (id = t1.id)',), ('  ->  Materialize',), ('        ->  Seq Scan on emp1 t3',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) WITH t1 AS (SELECT * FROM emp1) UPDATE emp1 SET code = t1.code + 1 FROM t1 WHERE t1.id = emp1.id RETURNING emp1.id, emp1.code, t1.code",join.sql,SAME,,"[('Update on emp1',), ('  ->  Nested Loop',), ('        ->  Seq Scan on emp1',), ('        ->  Index Scan using emp1_pkey on emp1 emp1_1',), ('              Index Cond: (id = emp1.id)',)]"
postgresql,postgresql,"WITH t1 AS (SELECT * FROM emp1) UPDATE emp1 SET code = t1.code + 1 FROM t1 WHERE t1.id = emp1.id RETURNING emp1.id, emp1.code, t1.code",join.sql,SAME,,"[(1, 2, 1), (2, 2, 1)]"
postgresql,postgresql,TRUNCATE emp1,join.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) UPDATE sj sq SET b = 1 FROM sj as sz WHERE sq.a = sz.a,join.sql,SAME,,"[('Update on sj sq',), ('  ->  Nested Loop',), ('        Join Filter: (sq.a = sz.a)',), ('        ->  Seq Scan on sj sq',), ('        ->  Materialize',), ('              ->  Seq Scan on sj sz',)]"
postgresql,postgresql,CREATE RULE sj_del_rule AS ON DELETE TO sj   DO INSTEAD     UPDATE sj SET a = 1 WHERE a = old.a,join.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) DELETE FROM sj,join.sql,SAME,,"[('Update on sj sj_1',), ('  ->  Nested Loop',), ('        Join Filter: (sj.a = sj_1.a)',), ('        ->  Seq Scan on sj sj_1',), ('        ->  Materialize',), ('              ->  Seq Scan on sj',)]"
postgresql,postgresql,DROP RULE sj_del_rule ON sj CASCADE,join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select 1 from emp1 full join     (select * from emp1 t1 join         emp1 t2 join emp1 t3 on t2.id = t3.id         on true     where false) s on true where false,join.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,select 1 from emp1 full join     (select * from emp1 t1 join         emp1 t2 join emp1 t3 on t2.id = t3.id         on true     where false) s on true where false,join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from emp1 t1 where exists (select * from emp1 t2                                     where t2.id = t1.code and t2.code > 0),join.sql,SAME,,"[('Nested Loop',), ('  ->  Seq Scan on emp1 t1',), ('  ->  Index Scan using emp1_pkey on emp1 t2',), ('        Index Cond: (id = t1.code)',), ('        Filter: (code > 0)',)]"
postgresql,postgresql,select * from emp1 t1 where exists (select * from emp1 t2                                     where t2.id = t1.code and t2.code > 0),join.sql,SAME,,"[(1, 1), (2, 1)]"
postgresql,postgresql,"create unique index on sl(a, b)",join.sql,SAME,,[]
postgresql,postgresql,vacuum analyze sl,join.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from sl t1, sl t2 where t1.a = t2.a and t1.b = 1 and t2.b = 2",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (t1.a = t2.a)',), ('  ->  Seq Scan on sl t1',), ('        Filter: (b = 1)',), ('  ->  Seq Scan on sl t2',), ('        Filter: (b = 2)',)]"
postgresql,postgresql,"explain (costs off) select * from sl t1, sl t2 where t1.a = t2.a and t1.b = 1 and t2.b = 2   and t1.c IS NOT NULL and t2.c IS NOT NULL   and t2.b IS NOT NULL and t1.b IS NOT NULL   and t1.a IS NOT NULL and t2.a IS NOT NULL",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (t1.a = t2.a)',), ('  ->  Seq Scan on sl t1',), ('        Filter: ((c IS NOT NULL) AND (b IS NOT NULL) AND (a IS NOT NULL) AND (b = 1))',), ('  ->  Seq Scan on sl t2',), ('        Filter: ((c IS NOT NULL) AND (b IS NOT NULL) AND (a IS NOT NULL) AND (b = 2))',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from sl t1, sl t2 where t1.b = t2.b and t2.a = 3 and t1.a = 3   and t1.c IS NOT NULL and t2.c IS NOT NULL   and t2.b IS NOT NULL and t1.b IS NOT NULL   and t1.a IS NOT NULL and t2.a IS NOT NULL",join.sql,SAME,,"[('Nested Loop',), ('  Output: t1.a, t1.b, t1.c, t2.a, t2.b, t2.c',), ('  Inner Unique: true',), ('  Join Filter: (t1.b = t2.b)',), ('  ->  Seq Scan on public.sl t1',), ('        Output: t1.a, t1.b, t1.c',), ('        Filter: ((t1.c IS NOT NULL) AND (t1.b IS NOT NULL) AND (t1.a IS NOT NULL) AND (t1.a = 3))',), ('  ->  Seq Scan on public.sl t2',), ('        Output: t2.a, t2.b, t2.c',), ('        Filter: ((t2.c IS NOT NULL) AND (t2.b IS NOT NULL) AND (t2.a IS NOT NULL) AND (t2.a = 3))',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT n2.a FROM sj n1, sj n2 WHERE n1.a <> n2.a AND n2.a = 1",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (n1.a <> n2.a)',), ('  ->  Seq Scan on sj n2',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on sj n1',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM (SELECT n2.a FROM sj n1, sj n2 WHERE n1.a <> n2.a) q0, sl WHERE q0.a = 1",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (n1.a <> n2.a)',), ('  ->  Nested Loop',), ('        ->  Seq Scan on sl',), ('        ->  Seq Scan on sj n2',), ('              Filter: (a = 1)',), ('  ->  Seq Scan on sj n1',)]"
postgresql,postgresql,"CREATE UNIQUE INDEX ON sj_t3 USING btree (a,id)",join.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ON sj_t2 USING btree (id),join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM sj_t1 JOIN ( 	SELECT sj_t2.id AS id FROM sj_t2 	WHERE EXISTS 		( 		SELECT TRUE FROM sj_t3,sj_t4 WHERE sj_t3.a = 1 AND sj_t3.id = sj_t2.id 		) 	) t2t3t4 ON sj_t1.id = t2t3t4.id JOIN ( 	SELECT sj_t2.id AS id FROM sj_t2 	WHERE EXISTS 		( 		SELECT TRUE FROM sj_t3,sj_t4 WHERE sj_t3.a = 1 AND sj_t3.id = sj_t2.id 		) 	) _t2t3t4 ON sj_t1.id = _t2t3t4.id",join.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (sj_t3.id = sj_t1.id)',), ('  ->  Nested Loop',), ('        Join Filter: (sj_t2.id = sj_t3.id)',), ('        ->  Nested Loop Semi Join',), ('              ->  Nested Loop',), ('                    ->  HashAggregate',), ('                          Group Key: sj_t3.id',), ('                          ->  Nested Loop',), ('                                ->  Seq Scan on sj_t4',), ('                                ->  Materialize',), ('                                      ->  Bitmap Heap Scan on sj_t3',), ('                                            Recheck Cond: (a = 1)',), ('                                            ->  Bitmap Index Scan on sj_t3_a_id_idx',), ('                                                  Index Cond: (a = 1)',), ('                    ->  Index Only Scan using sj_t2_id_idx on sj_t2 sj_t2_1',), ('                          Index Cond: (id = sj_t3.id)',), ('              ->  Nested Loop',), ('                    ->  Index Only Scan using sj_t3_a_id_idx on sj_t3 sj_t3_1',), ('                          Index Cond: ((a = 1) AND (id = sj_t3.id))',), ('                    ->  Seq Scan on sj_t4 sj_t4_1',), ('        ->  Index Only Scan using sj_t2_id_idx on sj_t2',), ('              Index Cond: (id = sj_t2_1.id)',), ('  ->  Seq Scan on sj_t1',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a1.a FROM sj a1,sj a2 WHERE (a1.a=a2.a) FOR UPDATE",join.sql,SAME,,"[('LockRows',), ('  ->  Nested Loop',), ('        Join Filter: (a1.a = a2.a)',), ('        ->  Seq Scan on sj a1',), ('        ->  Materialize',), ('              ->  Seq Scan on sj a2',)]"
postgresql,postgresql,reset enable_hashjoin,join.sql,SAME,,[]
postgresql,postgresql,reset enable_mergejoin,join.sql,SAME,,[]
postgresql,postgresql,"select * from (values(1)) x(lb),   lateral generate_series(lb,4) x4",join.sql,SAME,,"[(1, 1), (1, 2), (1, 3), (1, 4)]"
postgresql,postgresql,"select * from (values(1)) x(lb),   lateral (values(lb)) y(lbcopy)",join.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"explain (verbose, costs off) select * from   (select 0 as val0) as ss0   left join (select 1 as val) as ss1 on true   left join lateral (select ss1.val as val_filtered where false) as ss2 on true",join.sql,SAME,,"[('Nested Loop Left Join',), ('  Output: 0, (1), ((1))',), ('  Join Filter: false',), ('  ->  Result',), ('        Output: 1',), ('  ->  Result',), ('        Output: (1)',), ('        One-Time Filter: false',)]"
postgresql,postgresql,select * from   (select 0 as val0) as ss0   left join (select 1 as val) as ss1 on true   left join lateral (select ss1.val as val_filtered where false) as ss2 on true,join.sql,SAME,,"[(0, 1, None)]"
postgresql,postgresql,"explain (verbose, costs off) select * from   (select 1 as x offset 0) x cross join (select 2 as y offset 0) y   left join lateral (     select * from (select 3 as z offset 0) z where z.z = x.x   ) zz on zz.z = y.y",join.sql,SAME,,"[('Nested Loop Left Join',), ('  Output: (1), (2), (3)',), ('  Join Filter: (((3) = (1)) AND ((3) = (2)))',), ('  ->  Nested Loop',), ('        Output: (1), (2)',), ('        ->  Result',), ('              Output: 1',), ('        ->  Result',), ('              Output: 2',), ('  ->  Result',), ('        Output: 3',)]"
postgresql,postgresql,select * from   ((select 2 as v) union all (select 3 as v)) as q1   cross join lateral   ((select * from       ((select 4 as v) union all (select 5 as v)) as q3)    union all    (select q1.v)   ) as q2,join.sql,SAME,,"[(2, 4), (2, 5), (2, 2), (3, 4), (3, 5), (3, 3)]"
postgresql,postgresql,"explain (verbose, costs off) select t1.b, ss.phv from join_ut1 t1 left join lateral               (select t2.a as t2a, t3.a t3a, least(t1.a, t2.a, t3.a) phv 					  from join_pt1 t2 join join_ut1 t3 on t2.a = t3.b) ss               on t1.a = ss.t2a order by t1.a",join.sql,SAME,,"[('Sort',), ('  Output: t1.b, (LEAST(t1.a, t2.a, t3.a)), t1.a',), ('  Sort Key: t1.a',), ('  ->  Nested Loop Left Join',), ('        Output: t1.b, (LEAST(t1.a, t2.a, t3.a)), t1.a',), ('        ->  Seq Scan on public.join_ut1 t1',), ('              Output: t1.a, t1.b, t1.c',), ('        ->  Hash Join',), ('              Output: t2.a, LEAST(t1.a, t2.a, t3.a)',), ('              Hash Cond: (t3.b = t2.a)',), ('              ->  Seq Scan on public.join_ut1 t3',), ('                    Output: t3.a, t3.b, t3.c',), ('              ->  Hash',), ('                    Output: t2.a',), ('                    ->  Append',), ('                          ->  Seq Scan on public.join_pt1p1p1 t2_1',), ('                                Output: t2_1.a',), ('                                Filter: (t1.a = t2_1.a)',), ('                          ->  Seq Scan on public.join_pt1p2 t2_2',), ('                                Output: t2_2.a',), ('                                Filter: (t1.a = t2_2.a)',)]"
postgresql,postgresql,"select t1.b, ss.phv from join_ut1 t1 left join lateral               (select t2.a as t2a, t3.a t3a, least(t1.a, t2.a, t3.a) phv 					  from join_pt1 t2 join join_ut1 t3 on t2.a = t3.b) ss               on t1.a = ss.t2a order by t1.a",join.sql,SAME,,"[(2, None), (101, 101)]"
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,"create unique index on fkest(x, x10, x100)",join.sql,SAME,,[]
postgresql,postgresql,analyze fkest,join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from fkest f1   join fkest f2 on (f1.x = f2.x and f1.x10 = f2.x10b and f1.x100 = f2.x100)   join fkest f3 on f1.x = f3.x   where f1.x100 = 2,join.sql,SAME,,"[('Nested Loop',), ('  ->  Hash Join',), ('        Hash Cond: ((f2.x = f1.x) AND (f2.x10b = f1.x10))',), ('        ->  Seq Scan on fkest f2',), ('              Filter: (x100 = 2)',), ('        ->  Hash',), ('              ->  Seq Scan on fkest f1',), ('                    Filter: (x100 = 2)',), ('  ->  Index Scan using fkest_x_x10_x100_idx on fkest f3',), ('        Index Cond: (x = f1.x)',)]"
postgresql,postgresql,"alter table fkest add constraint fk   foreign key (x, x10b, x100) references fkest (x, x10, x100)",join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from fkest f1   join fkest f2 on (f1.x = f2.x and f1.x10 = f2.x10b and f1.x100 = f2.x100)   join fkest f3 on f1.x = f3.x   where f1.x100 = 2,join.sql,SAME,,"[('Hash Join',), ('  Hash Cond: ((f2.x = f1.x) AND (f2.x10b = f1.x10))',), ('  ->  Hash Join',), ('        Hash Cond: (f3.x = f2.x)',), ('        ->  Seq Scan on fkest f3',), ('        ->  Hash',), ('              ->  Seq Scan on fkest f2',), ('                    Filter: (x100 = 2)',), ('  ->  Hash',), ('        ->  Seq Scan on fkest f1',), ('              Filter: (x100 = 2)',)]"
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,begin,join.sql,SAME,,[]
postgresql,postgresql,"alter table fkest1   add constraint fkest1_a_b_fkey foreign key (a,b) references fkest",join.sql,SAME,,[]
postgresql,postgresql,analyze fkest,join.sql,SAME,,[]
postgresql,postgresql,analyze fkest1,join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from fkest f   left join fkest1 f1 on f.a = f1.a and f.b = f1.b   left join fkest1 f2 on f.a = f2.a and f.b = f2.b   left join fkest1 f3 on f.a = f3.a and f.b = f3.b where f.c = 1,join.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Nested Loop Left Join',), ('        ->  Nested Loop Left Join',), ('              ->  Index Scan using fkest_c_key on fkest f',), ('                    Index Cond: (c = 1)',), ('              ->  Index Only Scan using fkest1_pkey on fkest1 f1',), ('                    Index Cond: ((a = f.a) AND (b = f.b))',), ('        ->  Index Only Scan using fkest1_pkey on fkest1 f2',), ('              Index Cond: ((a = f.a) AND (b = f.b))',), ('  ->  Index Only Scan using fkest1_pkey on fkest1 f3',), ('        Index Cond: ((a = f.a) AND (b = f.b))',)]"
postgresql,postgresql,rollback,join.sql,SAME,,[]
postgresql,postgresql,analyze j1,join.sql,SAME,,[]
postgresql,postgresql,analyze j2,join.sql,SAME,,[]
postgresql,postgresql,analyze j3,join.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from j1 inner join j2 on j1.id = j2.id",join.sql,SAME,,"[('Hash Join',), ('  Output: j1.id, j2.id',), ('  Inner Unique: true',), ('  Hash Cond: (j1.id = j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Hash',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 inner join j2 on j1.id > j2.id",join.sql,SAME,,"[('Nested Loop',), ('  Output: j1.id, j2.id',), ('  Join Filter: (j1.id > j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Materialize',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 inner join j3 on j1.id = j3.id",join.sql,SAME,,"[('Hash Join',), ('  Output: j1.id, j3.id',), ('  Inner Unique: true',), ('  Hash Cond: (j3.id = j1.id)',), ('  ->  Seq Scan on public.j3',), ('        Output: j3.id',), ('  ->  Hash',), ('        Output: j1.id',), ('        ->  Seq Scan on public.j1',), ('              Output: j1.id',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 left join j2 on j1.id = j2.id",join.sql,SAME,,"[('Hash Left Join',), ('  Output: j1.id, j2.id',), ('  Inner Unique: true',), ('  Hash Cond: (j1.id = j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Hash',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 right join j2 on j1.id = j2.id",join.sql,SAME,,"[('Hash Left Join',), ('  Output: j1.id, j2.id',), ('  Inner Unique: true',), ('  Hash Cond: (j2.id = j1.id)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id',), ('  ->  Hash',), ('        Output: j1.id',), ('        ->  Seq Scan on public.j1',), ('              Output: j1.id',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 full join j2 on j1.id = j2.id",join.sql,SAME,,"[('Hash Full Join',), ('  Output: j1.id, j2.id',), ('  Inner Unique: true',), ('  Hash Cond: (j1.id = j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Hash',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 cross join j2",join.sql,SAME,,"[('Nested Loop',), ('  Output: j1.id, j2.id',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Materialize',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 natural join j2",join.sql,SAME,,"[('Hash Join',), ('  Output: j1.id',), ('  Inner Unique: true',), ('  Hash Cond: (j1.id = j2.id)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',), ('  ->  Hash',), ('        Output: j2.id',), ('        ->  Seq Scan on public.j2',), ('              Output: j2.id',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 inner join (select distinct id from j3) j3 on j1.id = j3.id",join.sql,SAME,,"[('Nested Loop',), ('  Output: j1.id, j3.id',), ('  Inner Unique: true',), ('  Join Filter: (j1.id = j3.id)',), ('  ->  Unique',), ('        Output: j3.id',), ('        ->  Sort',), ('              Output: j3.id',), ('              Sort Key: j3.id',), ('              ->  Seq Scan on public.j3',), ('                    Output: j3.id',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 inner join (select id from j3 group by id) j3 on j1.id = j3.id",join.sql,SAME,,"[('Nested Loop',), ('  Output: j1.id, j3.id',), ('  Inner Unique: true',), ('  Join Filter: (j1.id = j3.id)',), ('  ->  Group',), ('        Output: j3.id',), ('        Group Key: j3.id',), ('        ->  Sort',), ('              Output: j3.id',), ('              Sort Key: j3.id',), ('              ->  Seq Scan on public.j3',), ('                    Output: j3.id',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id',)]"
postgresql,postgresql,analyze j1,join.sql,SAME,,[]
postgresql,postgresql,analyze j2,join.sql,SAME,,[]
postgresql,postgresql,analyze j3,join.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from j1 inner join j2 on j1.id1 = j2.id1",join.sql,SAME,,"[('Nested Loop',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Join Filter: (j1.id1 = j2.id1)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2",join.sql,SAME,,"[('Nested Loop',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Inner Unique: true',), ('  Join Filter: ((j1.id1 = j2.id1) AND (j1.id2 = j2.id2))',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 where j1.id2 = 1",join.sql,SAME,,"[('Nested Loop',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Join Filter: (j1.id1 = j2.id1)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',), ('        Filter: (j1.id2 = 1)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from j1 left join j2 on j1.id1 = j2.id1 where j1.id2 = 1",join.sql,SAME,,"[('Nested Loop Left Join',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Join Filter: (j1.id1 = j2.id1)',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',), ('        Filter: (j1.id2 = 1)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',)]"
postgresql,postgresql,create unique index j1_id2_idx on j1(id2) where id2 is not null,join.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from j1 inner join j2 on j1.id2 = j2.id2",join.sql,SAME,,"[('Nested Loop',), ('  Output: j1.id1, j1.id2, j2.id1, j2.id2',), ('  Join Filter: (j2.id2 = j1.id2)',), ('  ->  Seq Scan on public.j2',), ('        Output: j2.id1, j2.id2',), ('  ->  Seq Scan on public.j1',), ('        Output: j1.id1, j1.id2',)]"
postgresql,postgresql,drop index j1_id2_idx,join.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop to 0,join.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin to 0,join.sql,SAME,,[]
postgresql,postgresql,set enable_sort to 0,join.sql,SAME,,[]
postgresql,postgresql,create index j1_id1_idx on j1 (id1) where id1 % 1000 = 1,join.sql,SAME,,[]
postgresql,postgresql,create index j2_id1_idx on j2 (id1) where id1 % 1000 = 1,join.sql,SAME,,[]
postgresql,postgresql,analyze j2,join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1,join.sql,SAME,,"[('Merge Join',), ('  Merge Cond: (j1.id1 = j2.id1)',), ('  Join Filter: (j2.id2 = j1.id2)',), ('  ->  Index Scan using j1_id1_idx on j1',), ('  ->  Index Scan using j2_id1_idx on j2',)]"
postgresql,postgresql,select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1,join.sql,SAME,,"[(1, 1, 1, 1), (1, 2, 1, 2)]"
postgresql,postgresql,explain (costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 = any (array[1]),join.sql,SAME,,"[('Merge Join',), ('  Merge Cond: (j1.id1 = j2.id1)',), ('  Join Filter: (j2.id2 = j1.id2)',), ('  ->  Index Scan using j1_id1_idx on j1',), ('  ->  Index Scan using j2_id1_idx on j2',), (""        Index Cond: (id1 = ANY ('{1}'::integer[]))"",)]"
postgresql,postgresql,select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 = any (array[1]),join.sql,SAME,,"[(1, 1, 1, 1), (1, 2, 1, 2)]"
postgresql,postgresql,"explain (costs off) select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 >= any (array[1,5])",join.sql,SAME,,"[('Merge Join',), ('  Merge Cond: (j1.id1 = j2.id1)',), ('  Join Filter: (j2.id2 = j1.id2)',), ('  ->  Index Scan using j1_id1_idx on j1',), ('  ->  Index Only Scan using j2_pkey on j2',), (""        Index Cond: (id1 >= ANY ('{1,5}'::integer[]))"",), ('        Filter: ((id1 % 1000) = 1)',)]"
postgresql,postgresql,"select * from j1 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 >= any (array[1,5])",join.sql,SAME,,"[(1, 1, 1, 1), (1, 2, 1, 2)]"
postgresql,postgresql,reset enable_nestloop,join.sql,SAME,,[]
postgresql,postgresql,reset enable_hashjoin,join.sql,SAME,,[]
postgresql,postgresql,reset enable_sort,join.sql,SAME,,[]
postgresql,postgresql,begin,join_hash.sql,SAME,,[]
postgresql,postgresql,set local min_parallel_table_scan_size = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local parallel_setup_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_hashjoin = on,join_hash.sql,SAME,,[]
postgresql,postgresql,end,join_hash.sql,SAME,,[]
postgresql,postgresql,end,join_hash.sql,SAME,,[]
postgresql,postgresql,alter table simple set (parallel_workers = 2),join_hash.sql,SAME,,[]
postgresql,postgresql,analyze simple,join_hash.sql,SAME,,[]
postgresql,postgresql,alter table bigger_than_it_looks set (autovacuum_enabled = 'false'),join_hash.sql,SAME,,[]
postgresql,postgresql,alter table bigger_than_it_looks set (parallel_workers = 2),join_hash.sql,SAME,,[]
postgresql,postgresql,analyze bigger_than_it_looks,join_hash.sql,SAME,,[]
postgresql,postgresql,alter table extremely_skewed set (autovacuum_enabled = 'false'),join_hash.sql,SAME,,[]
postgresql,postgresql,alter table extremely_skewed set (parallel_workers = 2),join_hash.sql,SAME,,[]
postgresql,postgresql,analyze extremely_skewed,join_hash.sql,SAME,,[]
postgresql,postgresql,alter table wide set (parallel_workers = 2),join_hash.sql,SAME,,[]
postgresql,postgresql,set local max_parallel_workers_per_gather = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '4MB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]"
postgresql,postgresql,select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '4MB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_parallel_hash = off,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]"
postgresql,postgresql,select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '4MB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_parallel_hash = on,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]"
postgresql,postgresql,select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '128kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]"
postgresql,postgresql,select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '128kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_parallel_hash = off,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]"
postgresql,postgresql,select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '192kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_parallel_hash = on,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on simple s',)]"
postgresql,postgresql,select count(*) from simple r join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,select count(*) from simple r full outer join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '128kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) FROM simple r JOIN bigger_than_it_looks s USING (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on bigger_than_it_looks s',)]"
postgresql,postgresql,select count(*) FROM simple r JOIN bigger_than_it_looks s USING (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '128kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_parallel_hash = off,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join bigger_than_it_looks s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on bigger_than_it_looks s',)]"
postgresql,postgresql,select count(*) from simple r join bigger_than_it_looks s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 1,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '192kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_parallel_hash = on,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join bigger_than_it_looks s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Seq Scan on bigger_than_it_looks s',)]"
postgresql,postgresql,select count(*) from simple r join bigger_than_it_looks s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '128kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join extremely_skewed s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (s.id = r.id)',), ('        ->  Seq Scan on extremely_skewed s',), ('        ->  Hash',), ('              ->  Seq Scan on simple r',)]"
postgresql,postgresql,select count(*) from simple r join extremely_skewed s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '128kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_parallel_hash = off,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join extremely_skewed s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (s.id = r.id)',), ('        ->  Seq Scan on extremely_skewed s',), ('        ->  Hash',), ('              ->  Seq Scan on simple r',)]"
postgresql,postgresql,select count(*) from simple r join extremely_skewed s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 1,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '128kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_parallel_hash = on,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   select count(*) from simple r join extremely_skewed s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Join',), ('        Hash Cond: (s.id = r.id)',), ('        ->  Seq Scan on extremely_skewed s',), ('        ->  Hash',), ('              ->  Seq Scan on simple r',)]"
postgresql,postgresql,select count(*) from simple r join extremely_skewed s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set local work_mem = '4MB',join_hash.sql,SAME,,[]
postgresql,postgresql,set local hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,set local parallel_leader_participation = off,join_hash.sql,SAME,,[]
postgresql,postgresql,alter table join_foo set (parallel_workers = 0),join_hash.sql,SAME,,[]
postgresql,postgresql,alter table join_bar set (parallel_workers = 2),join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_parallel_hash = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_leader_participation = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_material = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set work_mem = '64kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,"explain (costs off)   select count(*) from join_foo     left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss     on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1",join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop Left Join',), ('        Join Filter: ((join_foo.id < (b1.id + 1)) AND (join_foo.id > (b1.id - 1)))',), ('        ->  Seq Scan on join_foo',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Hash Join',), ('                    Hash Cond: (b1.id = b2.id)',), ('                    ->  Parallel Seq Scan on join_bar b1',), ('                    ->  Hash',), ('                          ->  Seq Scan on join_bar b2',)]"
postgresql,postgresql,"select count(*) from join_foo   left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss   on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1",join_hash.sql,SAME,,"[(3,)]"
postgresql,postgresql,set enable_parallel_hash = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_leader_participation = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_material = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set work_mem = '4MB',join_hash.sql,SAME,,[]
postgresql,postgresql,set hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,"explain (costs off)   select count(*) from join_foo     left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss     on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1",join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop Left Join',), ('        Join Filter: ((join_foo.id < (b1.id + 1)) AND (join_foo.id > (b1.id - 1)))',), ('        ->  Seq Scan on join_foo',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Hash Join',), ('                    Hash Cond: (b1.id = b2.id)',), ('                    ->  Parallel Seq Scan on join_bar b1',), ('                    ->  Hash',), ('                          ->  Seq Scan on join_bar b2',)]"
postgresql,postgresql,"select count(*) from join_foo   left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss   on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1",join_hash.sql,SAME,,"[(3,)]"
postgresql,postgresql,set enable_parallel_hash = on,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_leader_participation = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_material = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set work_mem = '64kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,"explain (costs off)   select count(*) from join_foo     left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss     on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1",join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop Left Join',), ('        Join Filter: ((join_foo.id < (b1.id + 1)) AND (join_foo.id > (b1.id - 1)))',), ('        ->  Seq Scan on join_foo',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Hash Join',), ('                    Hash Cond: (b1.id = b2.id)',), ('                    ->  Parallel Seq Scan on join_bar b1',), ('                    ->  Parallel Hash',), ('                          ->  Parallel Seq Scan on join_bar b2',)]"
postgresql,postgresql,"select count(*) from join_foo   left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss   on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1",join_hash.sql,SAME,,"[(3,)]"
postgresql,postgresql,set enable_parallel_hash = on,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_leader_participation = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_material = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set work_mem = '4MB',join_hash.sql,SAME,,[]
postgresql,postgresql,set hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,"explain (costs off)   select count(*) from join_foo     left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss     on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1",join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop Left Join',), ('        Join Filter: ((join_foo.id < (b1.id + 1)) AND (join_foo.id > (b1.id - 1)))',), ('        ->  Seq Scan on join_foo',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Hash Join',), ('                    Hash Cond: (b1.id = b2.id)',), ('                    ->  Parallel Seq Scan on join_bar b1',), ('                    ->  Parallel Hash',), ('                          ->  Parallel Seq Scan on join_bar b2',)]"
postgresql,postgresql,"select count(*) from join_foo   left join (select b1.id, b1.t from join_bar b1 join join_bar b2 using (id)) ss   on join_foo.id < ss.id + 1 and join_foo.id > ss.id - 1",join_hash.sql,SAME,,"[(3,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)      select  count(*) from simple r full outer join simple s using (id),join_hash.sql,SAME,,"[('Finalize Aggregate',), ('  ->  Gather',), ('        Workers Planned: 2',), ('        ->  Partial Aggregate',), ('              ->  Parallel Hash Full Join',), ('                    Hash Cond: (r.id = s.id)',), ('                    ->  Parallel Seq Scan on simple r',), ('                    ->  Parallel Hash',), ('                          ->  Parallel Seq Scan on simple s',)]"
postgresql,postgresql,select  count(*) from simple r full outer join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set enable_parallel_hash = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)      select  count(*) from simple r full outer join simple s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple s',)]"
postgresql,postgresql,select  count(*) from simple r full outer join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)      select  count(*) from simple r full outer join simple s using (id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: (r.id = s.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple r',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple s',)]"
postgresql,postgresql,select  count(*) from simple r full outer join simple s using (id),join_hash.sql,SAME,,"[(20000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)      select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: ((0 - s.id) = r.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple s',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple r',)]"
postgresql,postgresql,select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id),join_hash.sql,SAME,,"[(40000,)]"
postgresql,postgresql,set enable_parallel_hash = off,join_hash.sql,SAME,,[]
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)      select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: ((0 - s.id) = r.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple s',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple r',)]"
postgresql,postgresql,select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id),join_hash.sql,SAME,,"[(40000,)]"
postgresql,postgresql,set local max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,explain (costs off)      select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id),join_hash.sql,SAME,,"[('Aggregate',), ('  ->  Hash Full Join',), ('        Hash Cond: ((0 - s.id) = r.id)',), ('        ->  Gather',), ('              Workers Planned: 2',), ('              ->  Parallel Seq Scan on simple s',), ('        ->  Hash',), ('              ->  Gather',), ('                    Workers Planned: 2',), ('                    ->  Parallel Seq Scan on simple r',)]"
postgresql,postgresql,select  count(*) from simple r full outer join simple s on (r.id = 0 - s.id),join_hash.sql,SAME,,"[(40000,)]"
postgresql,postgresql,set max_parallel_workers_per_gather = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,set enable_parallel_hash = on,join_hash.sql,SAME,,[]
postgresql,postgresql,set work_mem = '128kB',join_hash.sql,SAME,,[]
postgresql,postgresql,set hash_mem_multiplier = 1.0,join_hash.sql,SAME,,[]
postgresql,postgresql,"explain (costs off)   select length(max(s.t))   from wide left join (select id, coalesce(t, '') || '' as t from wide) s using (id)",join_hash.sql,SAME,,"[('Finalize Aggregate',), ('  ->  Gather',), ('        Workers Planned: 2',), ('        ->  Partial Aggregate',), ('              ->  Parallel Hash Left Join',), ('                    Hash Cond: (wide.id = wide_1.id)',), ('                    ->  Parallel Seq Scan on wide',), ('                    ->  Parallel Hash',), ('                          ->  Parallel Seq Scan on wide wide_1',)]"
postgresql,postgresql,"select length(max(s.t)) from wide left join (select id, coalesce(t, '') || '' as t from wide) s using (id)",join_hash.sql,SAME,,"[(320000,)]"
postgresql,postgresql,SET enable_parallel_hash = on,join_hash.sql,SAME,,[]
postgresql,postgresql,SET min_parallel_table_scan_size = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,SET parallel_setup_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,SET parallel_tuple_cost = 0,join_hash.sql,SAME,,[]
postgresql,postgresql,UPDATE hjtest_matchbits_t2 set id = 2,join_hash.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hjtest_matchbits_t1 t1 FULL JOIN hjtest_matchbits_t2 t2 ON t1.id = t2.id   ORDER BY t1.id,join_hash.sql,SAME,,"[(1, None), (None, 2)]"
postgresql,postgresql,RESET parallel_setup_cost,join_hash.sql,SAME,,[]
postgresql,postgresql,SET enable_parallel_hash = off,join_hash.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM hjtest_matchbits_t1 t1 FULL JOIN hjtest_matchbits_t2 t2 ON t1.id = t2.id,join_hash.sql,SAME,,"[(1, None), (None, 2)]"
postgresql,postgresql,rollback,join_hash.sql,SAME,,[]
postgresql,postgresql,BEGIN,join_hash.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_sort = OFF,join_hash.sql,SAME,,[]
postgresql,postgresql,SET LOCAL from_collapse_limit = 1,join_hash.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF, VERBOSE) SELECT hjtest_1.a a1, hjtest_2.a a2,hjtest_1.tableoid::regclass t1, hjtest_2.tableoid::regclass t2 FROM hjtest_1, hjtest_2 WHERE     hjtest_1.id = (SELECT 1 WHERE hjtest_2.id = 1)     AND (SELECT hjtest_1.b * 5) = (SELECT hjtest_2.c*5)     AND (SELECT hjtest_1.b * 5) < 50     AND (SELECT hjtest_2.c * 5) < 55     AND hjtest_1.a <> hjtest_2.b",join_hash.sql,SAME,,"[('Hash Join',), ('  Output: hjtest_1.a, hjtest_2.a, (hjtest_1.tableoid)::regclass, (hjtest_2.tableoid)::regclass',), ('  Hash Cond: ((hjtest_1.id = (SubPlan 1)) AND ((SubPlan 2) = (SubPlan 3)))',), ('  Join Filter: (hjtest_1.a <> hjtest_2.b)',), ('  ->  Seq Scan on public.hjtest_1',), ('        Output: hjtest_1.a, hjtest_1.tableoid, hjtest_1.id, hjtest_1.b',), ('        Filter: ((SubPlan 4) < 50)',), ('        SubPlan 4',), ('          ->  Result',), ('                Output: (hjtest_1.b * 5)',), ('  ->  Hash',), ('        Output: hjtest_2.a, hjtest_2.tableoid, hjtest_2.id, hjtest_2.c, hjtest_2.b',), ('        ->  Seq Scan on public.hjtest_2',), ('              Output: hjtest_2.a, hjtest_2.tableoid, hjtest_2.id, hjtest_2.c, hjtest_2.b',), ('              Filter: ((SubPlan 5) < 55)',), ('              SubPlan 5',), ('                ->  Result',), ('                      Output: (hjtest_2.c * 5)',), ('        SubPlan 1',), ('          ->  Result',), ('                Output: 1',), ('                One-Time Filter: (hjtest_2.id = 1)',), ('        SubPlan 3',), ('          ->  Result',), ('                Output: (hjtest_2.c * 5)',), ('  SubPlan 2',), ('    ->  Result',), ('          Output: (hjtest_1.b * 5)',)]"
postgresql,postgresql,"SELECT hjtest_1.a a1, hjtest_2.a a2,hjtest_1.tableoid::regclass t1, hjtest_2.tableoid::regclass t2 FROM hjtest_1, hjtest_2 WHERE     hjtest_1.id = (SELECT 1 WHERE hjtest_2.id = 1)     AND (SELECT hjtest_1.b * 5) = (SELECT hjtest_2.c*5)     AND (SELECT hjtest_1.b * 5) < 50     AND (SELECT hjtest_2.c * 5) < 55     AND hjtest_1.a <> hjtest_2.b",join_hash.sql,SAME,,"[('text', True, 'hjtest_1', 'hjtest_2')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF, VERBOSE) SELECT hjtest_1.a a1, hjtest_2.a a2,hjtest_1.tableoid::regclass t1, hjtest_2.tableoid::regclass t2 FROM hjtest_2, hjtest_1 WHERE     hjtest_1.id = (SELECT 1 WHERE hjtest_2.id = 1)     AND (SELECT hjtest_1.b * 5) = (SELECT hjtest_2.c*5)     AND (SELECT hjtest_1.b * 5) < 50     AND (SELECT hjtest_2.c * 5) < 55     AND hjtest_1.a <> hjtest_2.b",join_hash.sql,SAME,,"[('Hash Join',), ('  Output: hjtest_1.a, hjtest_2.a, (hjtest_1.tableoid)::regclass, (hjtest_2.tableoid)::regclass',), ('  Hash Cond: (((SubPlan 1) = hjtest_1.id) AND ((SubPlan 3) = (SubPlan 2)))',), ('  Join Filter: (hjtest_1.a <> hjtest_2.b)',), ('  ->  Seq Scan on public.hjtest_2',), ('        Output: hjtest_2.a, hjtest_2.tableoid, hjtest_2.id, hjtest_2.c, hjtest_2.b',), ('        Filter: ((SubPlan 5) < 55)',), ('        SubPlan 5',), ('          ->  Result',), ('                Output: (hjtest_2.c * 5)',), ('  ->  Hash',), ('        Output: hjtest_1.a, hjtest_1.tableoid, hjtest_1.id, hjtest_1.b',), ('        ->  Seq Scan on public.hjtest_1',), ('              Output: hjtest_1.a, hjtest_1.tableoid, hjtest_1.id, hjtest_1.b',), ('              Filter: ((SubPlan 4) < 50)',), ('              SubPlan 4',), ('                ->  Result',), ('                      Output: (hjtest_1.b * 5)',), ('        SubPlan 2',), ('          ->  Result',), ('                Output: (hjtest_1.b * 5)',), ('  SubPlan 1',), ('    ->  Result',), ('          Output: 1',), ('          One-Time Filter: (hjtest_2.id = 1)',), ('  SubPlan 3',), ('    ->  Result',), ('          Output: (hjtest_2.c * 5)',)]"
postgresql,postgresql,"SELECT hjtest_1.a a1, hjtest_2.a a2,hjtest_1.tableoid::regclass t1, hjtest_2.tableoid::regclass t2 FROM hjtest_2, hjtest_1 WHERE     hjtest_1.id = (SELECT 1 WHERE hjtest_2.id = 1)     AND (SELECT hjtest_1.b * 5) = (SELECT hjtest_2.c*5)     AND (SELECT hjtest_1.b * 5) < 50     AND (SELECT hjtest_2.c * 5) < 55     AND hjtest_1.a <> hjtest_2.b",join_hash.sql,SAME,,"[('text', True, 'hjtest_1', 'hjtest_2')]"
postgresql,postgresql,ROLLBACK,join_hash.sql,SAME,,[]
postgresql,postgresql,begin,join_hash.sql,SAME,,[]
postgresql,postgresql,set local enable_hashjoin = on,join_hash.sql,SAME,,[]
postgresql,postgresql,rollback,join_hash.sql,SAME,,[]
postgresql,postgresql,"SELECT '""""'::json",json.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT '""abc""'::json",json.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT '""\n\""\\""'::json",json.sql,SAME,,"[('\n""\\',)]"
postgresql,postgresql,"SELECT ('""'||repeat('.', 12)||'abc""')::json",json.sql,SAME,,"[('............abc',)]"
postgresql,postgresql,"SELECT ('""'||repeat('.', 12)||'abc\n""')::json",json.sql,SAME,,"[('............abc\n',)]"
postgresql,postgresql,SELECT '1'::json,json.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT '0'::json,json.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT '0.1'::json,json.sql,SAME,,"[(0.1,)]"
postgresql,postgresql,SELECT '9223372036854775808'::json,json.sql,SAME,,"[(9223372036854775808,)]"
postgresql,postgresql,SELECT '1e100'::json,json.sql,SAME,,"[(1e+100,)]"
postgresql,postgresql,SELECT '1.3e100'::json,json.sql,SAME,,"[(1.3e+100,)]"
postgresql,postgresql,SELECT '[]'::json,json.sql,SAME,,"[([],)]"
postgresql,postgresql,SELECT '[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'::json,json.sql,SAME,,"[([[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],)]"
postgresql,postgresql,"SELECT '[1,2]'::json",json.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,SELECT '{}'::json,json.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT '{""abc"":1}'::json",json.sql,SAME,,"[({'abc': 1},)]"
postgresql,postgresql,"SELECT '{""abc"":1,""def"":2,""ghi"":[3,4],""hij"":{""klm"":5,""nop"":[6]}}'::json",json.sql,SAME,,"[({'abc': 1, 'def': 2, 'ghi': [3, 4], 'hij': {'klm': 5, 'nop': [6]}},)]"
postgresql,postgresql,SELECT 'true'::json,json.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT 'false'::json,json.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 'null'::json,json.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT ' true '::json,json.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{ 		""one"": 1, 		""two"":""two"", 		""three"": 		true}'::json",json.sql,SAME,,"[({'one': 1, 'two': 'two', 'three': True},)]"
postgresql,postgresql,"select pg_input_is_valid('{""a"":true}', 'json')",json.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_input_is_valid('{""a"":true', 'json')",json.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('{""a"":true', 'json')",json.sql,SAME,,"[('invalid input syntax for type json', 'The input string ended unexpectedly.', None, '22P02')]"
postgresql,postgresql,SELECT array_to_json(array(select 1 as a)),json.sql,SAME,,"[([1],)]"
postgresql,postgresql,"SELECT array_to_json(array_agg(q),false) from (select x as b, x * 2 as c from generate_series(1,3) x) q",json.sql,SAME,,"[([{'b': 1, 'c': 2}, {'b': 2, 'c': 4}, {'b': 3, 'c': 6}],)]"
postgresql,postgresql,"SELECT array_to_json(array_agg(q),true) from (select x as b, x * 2 as c from generate_series(1,3) x) q",json.sql,SAME,,"[([{'b': 1, 'c': 2}, {'b': 2, 'c': 4}, {'b': 3, 'c': 6}],)]"
postgresql,postgresql,"SELECT array_to_json(array_agg(q),false)   FROM ( SELECT $$a$$ || x AS b, y AS c,                ARRAY[ROW(x.*,ARRAY[1,2,3]),                ROW(y.*,ARRAY[4,5,6])] AS z          FROM generate_series(1,2) x,               generate_series(4,5) y) q",json.sql,SAME,,"[([{'b': 'a1', 'c': 4, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]}, {'b': 'a1', 'c': 5, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]}, {'b': 'a2', 'c': 4, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]}, {'b': 'a2', 'c': 5, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]}],)]"
postgresql,postgresql,"SELECT array_to_json(array_agg(x),false) from generate_series(5,10) x",json.sql,SAME,,"[([5, 6, 7, 8, 9, 10],)]"
postgresql,postgresql,"SELECT array_to_json('{{1,5},{99,100}}'::int[])",json.sql,SAME,,"[([[1, 5], [99, 100]],)]"
postgresql,postgresql,"SELECT row_to_json(row(1,'foo'))",json.sql,SAME,,"[({'f1': 1, 'f2': 'foo'},)]"
postgresql,postgresql,"SELECT row_to_json(q) FROM (SELECT $$a$$ || x AS b,          y AS c,          ARRAY[ROW(x.*,ARRAY[1,2,3]),                ROW(y.*,ARRAY[4,5,6])] AS z       FROM generate_series(1,2) x,            generate_series(4,5) y) q",json.sql,SAME,,"[({'b': 'a1', 'c': 4, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]},), ({'b': 'a1', 'c': 5, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]},), ({'b': 'a2', 'c': 4, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]},), ({'b': 'a2', 'c': 5, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]},)]"
postgresql,postgresql,"SELECT row_to_json(q,true) FROM (SELECT $$a$$ || x AS b,          y AS c,          ARRAY[ROW(x.*,ARRAY[1,2,3]),                ROW(y.*,ARRAY[4,5,6])] AS z       FROM generate_series(1,2) x,            generate_series(4,5) y) q",json.sql,SAME,,"[({'b': 'a1', 'c': 4, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]},), ({'b': 'a1', 'c': 5, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]},), ({'b': 'a2', 'c': 4, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]},), ({'b': 'a2', 'c': 5, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]},)]"
postgresql,postgresql,"CREATE TEMP TABLE rows AS SELECT x, 'txt' || x as y FROM generate_series(1,3) AS x",json.sql,SAME,,[]
postgresql,postgresql,"SELECT row_to_json(q,true) FROM rows q",json.sql,SAME,,"[({'x': 1, 'y': 'txt1'},), ({'x': 2, 'y': 'txt2'},), ({'x': 3, 'y': 'txt3'},)]"
postgresql,postgresql,"SELECT row_to_json(row((select array_agg(x) as d from generate_series(5,10) x)),false)",json.sql,SAME,,"[({'f1': [5, 6, 7, 8, 9, 10]},)]"
postgresql,postgresql,analyze rows,json.sql,SAME,,[]
postgresql,postgresql,"select attname, to_json(histogram_bounds) histogram_bounds from pg_stats where tablename = 'rows' and       schemaname = pg_my_temp_schema()::regnamespace::text order by 1",json.sql,SAME,,"[('x', [1, 2, 3]), ('y', ['txt1', 'txt2', 'txt3'])]"
postgresql,postgresql,select to_json(timestamp '2014-05-28 12:22:35.614298'),json.sql,SAME,,"[('2014-05-28T12:22:35.614298',)]"
postgresql,postgresql,BEGIN,json.sql,SAME,,[]
postgresql,postgresql,SET LOCAL TIME ZONE 10.5,json.sql,SAME,,[]
postgresql,postgresql,select to_json(timestamptz '2014-05-28 12:22:35.614298-04'),json.sql,SAME,,"[('2014-05-29T02:52:35.614298+10:30',)]"
postgresql,postgresql,SET LOCAL TIME ZONE -8,json.sql,SAME,,[]
postgresql,postgresql,select to_json(timestamptz '2014-05-28 12:22:35.614298-04'),json.sql,SAME,,"[('2014-05-28T08:22:35.614298-08:00',)]"
postgresql,postgresql,COMMIT,json.sql,SAME,,[]
postgresql,postgresql,select to_json(date '2014-05-28'),json.sql,SAME,,"[('2014-05-28',)]"
postgresql,postgresql,select to_json(date 'Infinity'),json.sql,SAME,,"[('infinity',)]"
postgresql,postgresql,select to_json(date '-Infinity'),json.sql,SAME,,"[('-infinity',)]"
postgresql,postgresql,select to_json(timestamp 'Infinity'),json.sql,SAME,,"[('infinity',)]"
postgresql,postgresql,select to_json(timestamp '-Infinity'),json.sql,SAME,,"[('-infinity',)]"
postgresql,postgresql,select to_json(timestamptz 'Infinity'),json.sql,SAME,,"[('infinity',)]"
postgresql,postgresql,select to_json(timestamptz '-Infinity'),json.sql,SAME,,"[('-infinity',)]"
postgresql,postgresql,"SELECT json_agg(q)   FROM ( SELECT $$a$$ || x AS b, y AS c,                ARRAY[ROW(x.*,ARRAY[1,2,3]),                ROW(y.*,ARRAY[4,5,6])] AS z          FROM generate_series(1,2) x,               generate_series(4,5) y) q",json.sql,SAME,,"[([{'b': 'a1', 'c': 4, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]}, {'b': 'a1', 'c': 5, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]}, {'b': 'a2', 'c': 4, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]}, {'b': 'a2', 'c': 5, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]}],)]"
postgresql,postgresql,"SELECT json_agg(q ORDER BY x, y)   FROM rows q",json.sql,SAME,,"[([{'x': 1, 'y': 'txt1'}, {'x': 2, 'y': 'txt2'}, {'x': 3, 'y': 'txt3'}],)]"
postgresql,postgresql,UPDATE rows SET x = NULL WHERE x = 1,json.sql,SAME,,[]
postgresql,postgresql,"SELECT json_agg(q ORDER BY x NULLS FIRST, y)   FROM rows q",json.sql,SAME,,"[([{'x': None, 'y': 'txt1'}, {'x': 2, 'y': 'txt2'}, {'x': 3, 'y': 'txt3'}],)]"
postgresql,postgresql,"SELECT row_to_json(q) FROM (SELECT 'NaN'::float8 AS ""float8field"") q",json.sql,SAME,,"[({'float8field': 'NaN'},)]"
postgresql,postgresql,"SELECT row_to_json(q) FROM (SELECT 'Infinity'::float8 AS ""float8field"") q",json.sql,SAME,,"[({'float8field': 'Infinity'},)]"
postgresql,postgresql,"SELECT row_to_json(q) FROM (SELECT '-Infinity'::float8 AS ""float8field"") q",json.sql,SAME,,"[({'float8field': '-Infinity'},)]"
postgresql,postgresql,"SELECT row_to_json(q) FROM (SELECT '{""a"":1,""b"": [2,3,4,""d"",""e"",""f""],""c"":{""p"":1,""q"":2}}'::json AS ""jsonfield"") q",json.sql,SAME,,"[({'jsonfield': {'a': 1, 'b': [2, 3, 4, 'd', 'e', 'f'], 'c': {'p': 1, 'q': 2}}},)]"
postgresql,postgresql,"CREATE TEMP TABLE test_json (        json_type text,        test_json json )",json.sql,SAME,,[]
postgresql,postgresql,SELECT test_json -> 'x' FROM test_json WHERE json_type = 'scalar',json.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json -> 'x' FROM test_json WHERE json_type = 'array',json.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json -> 'x' FROM test_json WHERE json_type = 'object',json.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json->'field2' FROM test_json WHERE json_type = 'object',json.sql,SAME,,"[('val2',)]"
postgresql,postgresql,SELECT test_json->>'field2' FROM test_json WHERE json_type = 'object',json.sql,SAME,,"[('val2',)]"
postgresql,postgresql,SELECT test_json -> 2 FROM test_json WHERE json_type = 'scalar',json.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json -> 2 FROM test_json WHERE json_type = 'array',json.sql,SAME,,"[('two',)]"
postgresql,postgresql,SELECT test_json -> -1 FROM test_json WHERE json_type = 'array',json.sql,SAME,,"[({'f1': 9},)]"
postgresql,postgresql,SELECT test_json -> 2 FROM test_json WHERE json_type = 'object',json.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json->>2 FROM test_json WHERE json_type = 'array',json.sql,SAME,,"[('two',)]"
postgresql,postgresql,SELECT test_json ->> 6 FROM test_json WHERE json_type = 'array',json.sql,SAME,,"[('[1,2,3]',)]"
postgresql,postgresql,SELECT test_json ->> 7 FROM test_json WHERE json_type = 'array',json.sql,SAME,,"[('{""f1"":9}',)]"
postgresql,postgresql,SELECT test_json ->> 'field4' FROM test_json WHERE json_type = 'object',json.sql,SAME,,"[('4',)]"
postgresql,postgresql,SELECT test_json ->> 'field5' FROM test_json WHERE json_type = 'object',json.sql,SAME,,"[('[1,2,3]',)]"
postgresql,postgresql,SELECT test_json ->> 'field6' FROM test_json WHERE json_type = 'object',json.sql,SAME,,"[('{""f1"":9}',)]"
postgresql,postgresql,SELECT json_object_keys(test_json) FROM test_json WHERE json_type = 'object',json.sql,SAME,,"[('field1',), ('field2',), ('field3',), ('field4',), ('field5',), ('field6',)]"
postgresql,postgresql,"select count(*) from     (select json_object_keys(json_object(array_agg(g)))      from (select unnest(array['f'||n,n::text])as g            from generate_series(1,300) as n) x ) y",json.sql,SAME,,"[(300,)]"
postgresql,postgresql,select (test_json->'field3') is null as expect_false from test_json where json_type = 'object',json.sql,SAME,,"[(False,)]"
postgresql,postgresql,select (test_json->>'field3') is null as expect_true from test_json where json_type = 'object',json.sql,SAME,,"[(True,)]"
postgresql,postgresql,select (test_json->3) is null as expect_false from test_json where json_type = 'array',json.sql,SAME,,"[(False,)]"
postgresql,postgresql,select (test_json->>3) is null as expect_true from test_json where json_type = 'array',json.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json -> null::text",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json -> null::int",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json -> 1",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json -> -1",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json -> 'z'",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json -> ''",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json -> 1",json.sql,SAME,,"[({'b': 'cc'},)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json -> 3",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json -> 'z'",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": ""c"", ""b"": null}'::json -> 'b'",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::json -> 1",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::json -> 'z'",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json ->> null::text",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json ->> null::int",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json ->> 1",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json ->> 'z'",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json ->> ''",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json ->> 1",json.sql,SAME,,"[('{""b"": ""cc""}',)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json ->> 3",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json ->> 'z'",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": ""c"", ""b"": null}'::json ->> 'b'",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::json ->> 1",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::json ->> 'z'",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT json_array_length('[1,2,3,{""f1"":1,""f2"":[5,6]},4]')",json.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT json_array_length('[]'),json.sql,SAME,,"[(0,)]"
postgresql,postgresql,"select json_each('{""f1"":[1,2,3],""f2"":{""f3"":1},""f4"":null}')",json.sql,SAME,,"[('(f1,""[1,2,3]"")',), ('(f2,""{""""f3"""":1}"")',), ('(f4,null)',)]"
postgresql,postgresql,"select * from json_each('{""f1"":[1,2,3],""f2"":{""f3"":1},""f4"":null,""f5"":99,""f6"":""stringy""}') q",json.sql,SAME,,"[('f1', [1, 2, 3]), ('f2', {'f3': 1}), ('f4', None), ('f5', 99), ('f6', 'stringy')]"
postgresql,postgresql,"select json_each_text('{""f1"":[1,2,3],""f2"":{""f3"":1},""f4"":null,""f5"":""null""}')",json.sql,SAME,,"[('(f1,""[1,2,3]"")',), ('(f2,""{""""f3"""":1}"")',), ('(f4,)',), ('(f5,null)',)]"
postgresql,postgresql,"select * from json_each_text('{""f1"":[1,2,3],""f2"":{""f3"":1},""f4"":null,""f5"":99,""f6"":""stringy""}') q",json.sql,SAME,,"[('f1', '[1,2,3]'), ('f2', '{""f3"":1}'), ('f4', None), ('f5', '99'), ('f6', 'stringy')]"
postgresql,postgresql,"select json_extract_path('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}','f4','f6')",json.sql,SAME,,"[('stringy',)]"
postgresql,postgresql,"select json_extract_path('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}','f2')",json.sql,SAME,,"[({'f3': 1},)]"
postgresql,postgresql,"select json_extract_path('{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}','f2',0::text)",json.sql,SAME,,"[('f3',)]"
postgresql,postgresql,"select json_extract_path('{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}','f2',1::text)",json.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select json_extract_path_text('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}','f4','f6')",json.sql,SAME,,"[('stringy',)]"
postgresql,postgresql,"select json_extract_path_text('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}','f2')",json.sql,SAME,,"[('{""f3"":1}',)]"
postgresql,postgresql,"select json_extract_path_text('{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}','f2',0::text)",json.sql,SAME,,"[('f3',)]"
postgresql,postgresql,"select json_extract_path_text('{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}','f2',1::text)",json.sql,SAME,,"[('1',)]"
postgresql,postgresql,"select json_extract_path('{""f2"":{""f3"":1},""f4"":{""f5"":null,""f6"":""stringy""}}','f4','f5') is null as expect_false",json.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select json_extract_path_text('{""f2"":{""f3"":1},""f4"":{""f5"":null,""f6"":""stringy""}}','f4','f5') is null as expect_true",json.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select json_extract_path('{""f2"":{""f3"":1},""f4"":[0,1,2,null]}','f4','3') is null as expect_false",json.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select json_extract_path_text('{""f2"":{""f3"":1},""f4"":[0,1,2,null]}','f4','3') is null as expect_true",json.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select '{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}'::json#>array['f4','f6']",json.sql,SAME,,"[('stringy',)]"
postgresql,postgresql,"select '{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}'::json#>array['f2']",json.sql,SAME,,"[({'f3': 1},)]"
postgresql,postgresql,"select '{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}'::json#>array['f2','0']",json.sql,SAME,,"[('f3',)]"
postgresql,postgresql,"select '{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}'::json#>array['f2','1']",json.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select '{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}'::json#>>array['f4','f6']",json.sql,SAME,,"[('stringy',)]"
postgresql,postgresql,"select '{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}'::json#>>array['f2']",json.sql,SAME,,"[('{""f3"":1}',)]"
postgresql,postgresql,"select '{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}'::json#>>array['f2','0']",json.sql,SAME,,"[('f3',)]"
postgresql,postgresql,"select '{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}'::json#>>array['f2','1']",json.sql,SAME,,"[('1',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #> '{}'",json.sql,SAME,,"[({'a': {'b': {'c': 'foo'}}},)]"
postgresql,postgresql,"select '[1,2,3]'::json #> '{}'",json.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"select '""foo""'::json #> '{}'",json.sql,SAME,,"[('foo',)]"
postgresql,postgresql,select '42'::json #> '{}',json.sql,SAME,,"[(42,)]"
postgresql,postgresql,select 'null'::json #> '{}',json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #> array['a']",json.sql,SAME,,"[({'b': {'c': 'foo'}},)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #> array['a', null]",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #> array['a', '']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #> array['a','b']",json.sql,SAME,,"[({'c': 'foo'},)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #> array['a','b','c']",json.sql,SAME,,"[('foo',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #> array['a','b','c','d']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #> array['a','z','c']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json #> array['a','1','b']",json.sql,SAME,,"[('cc',)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json #> array['a','z','b']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json #> array['1','b']",json.sql,SAME,,"[('cc',)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json #> array['z','b']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": null}]'::json #> array['1','b']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::json #> array['z']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,select '42'::json #> array['f2'],json.sql,SAME,,"[(None,)]"
postgresql,postgresql,select '42'::json #> array['0'],json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #>> '{}'",json.sql,SAME,,"[('{""a"": {""b"":{""c"": ""foo""}}}',)]"
postgresql,postgresql,"select '[1,2,3]'::json #>> '{}'",json.sql,SAME,,"[('[1,2,3]',)]"
postgresql,postgresql,"select '""foo""'::json #>> '{}'",json.sql,SAME,,"[('foo',)]"
postgresql,postgresql,select '42'::json #>> '{}',json.sql,SAME,,"[('42',)]"
postgresql,postgresql,select 'null'::json #>> '{}',json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #>> array['a']",json.sql,SAME,,"[('{""b"":{""c"": ""foo""}}',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #>> array['a', null]",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #>> array['a', '']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #>> array['a','b']",json.sql,SAME,,"[('{""c"": ""foo""}',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #>> array['a','b','c']",json.sql,SAME,,"[('foo',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #>> array['a','b','c','d']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::json #>> array['a','z','c']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json #>> array['a','1','b']",json.sql,SAME,,"[('cc',)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::json #>> array['a','z','b']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json #>> array['1','b']",json.sql,SAME,,"[('cc',)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::json #>> array['z','b']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": null}]'::json #>> array['1','b']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::json #>> array['z']",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,select '42'::json #>> array['f2'],json.sql,SAME,,"[(None,)]"
postgresql,postgresql,select '42'::json #>> array['0'],json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select json_array_elements('[1,true,[1,[2,3]],null,{""f1"":1,""f2"":[7,8,9]},false,""stringy""]')",json.sql,SAME,,"[(1,), (True,), ([1, [2, 3]],), (None,), ({'f1': 1, 'f2': [7, 8, 9]},), (False,), ('stringy',)]"
postgresql,postgresql,"select * from json_array_elements('[1,true,[1,[2,3]],null,{""f1"":1,""f2"":[7,8,9]},false,""stringy""]') q",json.sql,SAME,,"[(1,), (True,), ([1, [2, 3]],), (None,), ({'f1': 1, 'f2': [7, 8, 9]},), (False,), ('stringy',)]"
postgresql,postgresql,"select json_array_elements_text('[1,true,[1,[2,3]],null,{""f1"":1,""f2"":[7,8,9]},false,""stringy""]')",json.sql,SAME,,"[('1',), ('true',), ('[1,[2,3]]',), (None,), ('{""f1"":1,""f2"":[7,8,9]}',), ('false',), ('stringy',)]"
postgresql,postgresql,"select * from json_array_elements_text('[1,true,[1,[2,3]],null,{""f1"":1,""f2"":[7,8,9]},false,""stringy""]') q",json.sql,SAME,,"[('1',), ('true',), ('[1,[2,3]]',), (None,), ('{""f1"":1,""f2"":[7,8,9]}',), ('false',), ('stringy',)]"
postgresql,postgresql,"create type jpop as (a text, b int, c timestamp)",json.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN js_int_not_null  AS int     NOT NULL,json.sql,SAME,,[]
postgresql,postgresql,"CREATE DOMAIN js_int_array_1d  AS int[]   CHECK(array_length(VALUE, 1) = 3)",json.sql,SAME,,[]
postgresql,postgresql,"CREATE DOMAIN js_int_array_2d  AS int[][] CHECK(array_length(VALUE, 2) = 3)",json.sql,SAME,,[]
postgresql,postgresql,"create type j_unordered_pair as (x int, y int)",json.sql,SAME,,[]
postgresql,postgresql,create domain j_ordered_pair as j_unordered_pair check((value).x <= (value).y),json.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE jsrec AS ( 	i	int, 	ia	_int4, 	ia1	int[], 	ia2	int[][], 	ia3	int[][][], 	ia1d	js_int_array_1d, 	ia2d	js_int_array_2d, 	t	text, 	ta	text[], 	c	char(10), 	ca	char(10)[], 	ts	timestamp, 	js	json, 	jsb	jsonb, 	jsa	json[], 	rec	jpop, 	reca	jpop[] )",json.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE jsrec_i_not_null AS ( 	i	js_int_not_null ),json.sql,SAME,,[]
postgresql,postgresql,"select * from json_populate_record(null::jpop,'{""a"":""blurfl"",""x"":43.2}') q",json.sql,SAME,,"[('blurfl', None, None)]"
postgresql,postgresql,"select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{""a"":""blurfl"",""x"":43.2}') q",json.sql,SAME,,"[('blurfl', 3, datetime.datetime(2012, 12, 31, 15, 30, 56))]"
postgresql,postgresql,"select * from json_populate_record(null::jpop,'{""a"":""blurfl"",""x"":43.2}') q",json.sql,SAME,,"[('blurfl', None, None)]"
postgresql,postgresql,"select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{""a"":""blurfl"",""x"":43.2}') q",json.sql,SAME,,"[('blurfl', 3, datetime.datetime(2012, 12, 31, 15, 30, 56))]"
postgresql,postgresql,"select * from json_populate_record(null::jpop,'{""a"":[100,200,false],""x"":43.2}') q",json.sql,SAME,,"[('[100,200,false]', None, None)]"
postgresql,postgresql,"select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{""a"":[100,200,false],""x"":43.2}') q",json.sql,SAME,,"[('[100,200,false]', 3, datetime.datetime(2012, 12, 31, 15, 30, 56))]"
postgresql,postgresql,"select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{}') q",json.sql,SAME,,"[('x', 3, datetime.datetime(2012, 12, 31, 15, 30, 56))]"
postgresql,postgresql,"SELECT i FROM json_populate_record(NULL::jsrec_i_not_null, '{""i"": 12345}') q",json.sql,SAME,,"[(12345,)]"
postgresql,postgresql,"SELECT ia FROM json_populate_record(NULL::jsrec, '{""ia"": null}') q",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ia FROM json_populate_record(NULL::jsrec, '{""ia"": [1, ""2"", null, 4]}') q",json.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"SELECT ia FROM json_populate_record(NULL::jsrec, '{""ia"": [[1, 2], [3, 4]]}') q",json.sql,SAME,,"[([[1, 2], [3, 4]],)]"
postgresql,postgresql,"SELECT ia FROM json_populate_record(NULL::jsrec, '{""ia"": ""{1,2,3}""}') q",json.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"SELECT ia1 FROM json_populate_record(NULL::jsrec, '{""ia1"": null}') q",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ia1 FROM json_populate_record(NULL::jsrec, '{""ia1"": [1, ""2"", null, 4]}') q",json.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"SELECT ia1 FROM json_populate_record(NULL::jsrec, '{""ia1"": [[1, 2, 3]]}') q",json.sql,SAME,,"[([[1, 2, 3]],)]"
postgresql,postgresql,"SELECT ia1d FROM json_populate_record(NULL::jsrec, '{""ia1d"": null}') q",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ia1d FROM json_populate_record(NULL::jsrec, '{""ia1d"": [1, ""2"", null]}') q",json.sql,SAME,,"[([1, 2, None],)]"
postgresql,postgresql,"SELECT ia2 FROM json_populate_record(NULL::jsrec, '{""ia2"": [1, ""2"", null, 4]}') q",json.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"SELECT ia2 FROM json_populate_record(NULL::jsrec, '{""ia2"": [[1, 2], [null, 4]]}') q",json.sql,SAME,,"[([[1, 2], [None, 4]],)]"
postgresql,postgresql,"SELECT ia2 FROM json_populate_record(NULL::jsrec, '{""ia2"": [[], []]}') q",json.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT ia2d FROM json_populate_record(NULL::jsrec, '{""ia2d"": [[1, ""2"", 3], [null, 5, 6]]}') q",json.sql,SAME,,"[([[1, 2, 3], [None, 5, 6]],)]"
postgresql,postgresql,"SELECT ia3 FROM json_populate_record(NULL::jsrec, '{""ia3"": [1, ""2"", null, 4]}') q",json.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"SELECT ia3 FROM json_populate_record(NULL::jsrec, '{""ia3"": [[1, 2], [null, 4]]}') q",json.sql,SAME,,"[([[1, 2], [None, 4]],)]"
postgresql,postgresql,"SELECT ia3 FROM json_populate_record(NULL::jsrec, '{""ia3"": [ [[], []], [[], []], [[], []] ]}') q",json.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT ia3 FROM json_populate_record(NULL::jsrec, '{""ia3"": [ [[1, 2]], [[3, 4]] ]}') q",json.sql,SAME,,"[([[[1, 2]], [[3, 4]]],)]"
postgresql,postgresql,"SELECT ia3 FROM json_populate_record(NULL::jsrec, '{""ia3"": [ [[1, 2], [3, 4]], [[5, 6], [7, 8]] ]}') q",json.sql,SAME,,"[([[[1, 2], [3, 4]], [[5, 6], [7, 8]]],)]"
postgresql,postgresql,"SELECT ta FROM json_populate_record(NULL::jsrec, '{""ta"": null}') q",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ta FROM json_populate_record(NULL::jsrec, '{""ta"": [1, ""2"", null, 4]}') q",json.sql,SAME,,"[(['1', '2', None, '4'],)]"
postgresql,postgresql,"SELECT c FROM json_populate_record(NULL::jsrec, '{""c"": null}') q",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT c FROM json_populate_record(NULL::jsrec, '{""c"": ""aaa""}') q",json.sql,SAME,,"[('aaa       ',)]"
postgresql,postgresql,"SELECT c FROM json_populate_record(NULL::jsrec, '{""c"": ""aaaaaaaaaa""}') q",json.sql,SAME,,"[('aaaaaaaaaa',)]"
postgresql,postgresql,"SELECT ca FROM json_populate_record(NULL::jsrec, '{""ca"": null}') q",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ca FROM json_populate_record(NULL::jsrec, '{""ca"": [1, ""2"", null, 4]}') q",json.sql,SAME,,"[(['1         ', '2         ', None, '4         '],)]"
postgresql,postgresql,"SELECT js FROM json_populate_record(NULL::jsrec, '{""js"": null}') q",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT js FROM json_populate_record(NULL::jsrec, '{""js"": true}') q",json.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT js FROM json_populate_record(NULL::jsrec, '{""js"": 123.45}') q",json.sql,SAME,,"[(123.45,)]"
postgresql,postgresql,"SELECT js FROM json_populate_record(NULL::jsrec, '{""js"": ""123.45""}') q",json.sql,SAME,,"[('123.45',)]"
postgresql,postgresql,"SELECT js FROM json_populate_record(NULL::jsrec, '{""js"": ""abc""}') q",json.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT js FROM json_populate_record(NULL::jsrec, '{""js"": [123, ""123"", null, {""key"": ""value""}]}') q",json.sql,SAME,,"[([123, '123', None, {'key': 'value'}],)]"
postgresql,postgresql,"SELECT js FROM json_populate_record(NULL::jsrec, '{""js"": {""a"": ""bbb"", ""b"": null, ""c"": 123.45}}') q",json.sql,SAME,,"[({'a': 'bbb', 'b': None, 'c': 123.45},)]"
postgresql,postgresql,"SELECT jsb FROM json_populate_record(NULL::jsrec, '{""jsb"": null}') q",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsb FROM json_populate_record(NULL::jsrec, '{""jsb"": true}') q",json.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsb FROM json_populate_record(NULL::jsrec, '{""jsb"": 123.45}') q",json.sql,SAME,,"[(123.45,)]"
postgresql,postgresql,"SELECT jsb FROM json_populate_record(NULL::jsrec, '{""jsb"": ""123.45""}') q",json.sql,SAME,,"[('123.45',)]"
postgresql,postgresql,"SELECT jsb FROM json_populate_record(NULL::jsrec, '{""jsb"": ""abc""}') q",json.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT jsb FROM json_populate_record(NULL::jsrec, '{""jsb"": [123, ""123"", null, {""key"": ""value""}]}') q",json.sql,SAME,,"[([123, '123', None, {'key': 'value'}],)]"
postgresql,postgresql,"SELECT jsb FROM json_populate_record(NULL::jsrec, '{""jsb"": {""a"": ""bbb"", ""b"": null, ""c"": 123.45}}') q",json.sql,SAME,,"[({'a': 'bbb', 'b': None, 'c': 123.45},)]"
postgresql,postgresql,"SELECT jsa FROM json_populate_record(NULL::jsrec, '{""jsa"": null}') q",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsa FROM json_populate_record(NULL::jsrec, '{""jsa"": [1, ""2"", null, 4]}') q",json.sql,SAME,,"[([1, '2', None, 4],)]"
postgresql,postgresql,"SELECT jsa FROM json_populate_record(NULL::jsrec, '{""jsa"": [""aaa"", null, [1, 2, ""3"", {}], { ""k"" : ""v"" }]}') q",json.sql,SAME,,"[(['aaa', None, [1, 2, '3', {}], {'k': 'v'}],)]"
postgresql,postgresql,"SELECT rec FROM json_populate_record(NULL::jsrec, '{""rec"": {""a"": ""abc"", ""c"": ""01.02.2003"", ""x"": 43.2}}') q",json.sql,SAME,,"[('(abc,,""2003-01-02 00:00:00"")',)]"
postgresql,postgresql,"SELECT rec FROM json_populate_record(NULL::jsrec, '{""rec"": ""(abc,42,01.02.2003)""}') q",json.sql,SAME,,"[('(abc,42,""2003-01-02 00:00:00"")',)]"
postgresql,postgresql,"SELECT reca FROM json_populate_record(NULL::jsrec, '{""reca"": [{""a"": ""abc"", ""b"": 456}, null, {""c"": ""01.02.2003"", ""x"": 43.2}]}') q",json.sql,SAME,,"[('{""(abc,456,)"",NULL,""(,,\\""2003-01-02 00:00:00\\"")""}',)]"
postgresql,postgresql,"SELECT reca FROM json_populate_record(NULL::jsrec, '{""reca"": [""(abc,42,01.02.2003)""]}') q",json.sql,SAME,,"[('{""(abc,42,\\""2003-01-02 00:00:00\\"")""}',)]"
postgresql,postgresql,"SELECT reca FROM json_populate_record(NULL::jsrec, '{""reca"": ""{\""(abc,42,01.02.2003)\""}""}') q",json.sql,SAME,,"[('{""(abc,42,\\""2003-01-02 00:00:00\\"")""}',)]"
postgresql,postgresql,"SELECT rec FROM json_populate_record( 	row(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 		row('x',3,'2012-12-31 15:30:56')::jpop,NULL)::jsrec, 	'{""rec"": {""a"": ""abc"", ""c"": ""01.02.2003"", ""x"": 43.2}}' ) q",json.sql,SAME,,"[('(abc,3,""2003-01-02 00:00:00"")',)]"
postgresql,postgresql,"SELECT json_populate_record(row(1,2), '{""f1"": 0, ""f2"": 1}')",json.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,"SELECT * FROM   json_populate_record(null::record, '{""x"": 776}') AS (x int, y int)",json.sql,SAME,,"[(776, None)]"
postgresql,postgresql,"SELECT json_populate_record(null::j_ordered_pair, '{""x"": 0, ""y"": 1}')",json.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,"SELECT json_populate_record(row(1,2)::j_ordered_pair, '{""x"": 0}')",json.sql,SAME,,"[('(0,2)',)]"
postgresql,postgresql,"select * from json_populate_recordset(null::jpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",json.sql,SAME,,"[('blurfl', None, None), (None, 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"select * from json_populate_recordset(row('def',99,null)::jpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",json.sql,SAME,,"[('blurfl', 99, None), ('def', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"select * from json_populate_recordset(null::jpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",json.sql,SAME,,"[('blurfl', None, None), (None, 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"select * from json_populate_recordset(row('def',99,null)::jpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",json.sql,SAME,,"[('blurfl', 99, None), ('def', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"select * from json_populate_recordset(row('def',99,null)::jpop,'[{""a"":[100,200,300],""x"":43.2},{""a"":{""z"":true},""b"":3,""c"":""2012-01-20 10:42:53""}]') q",json.sql,SAME,,"[('[100,200,300]', 99, None), ('{""z"":true}', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"create type jpop2 as (a int, b json, c int, d int)",json.sql,SAME,,[]
postgresql,postgresql,"select * from json_populate_recordset(null::jpop2, '[{""a"":2,""c"":3,""b"":{""z"":4},""d"":6}]') q",json.sql,SAME,,"[(2, {'z': 4}, 3, 6)]"
postgresql,postgresql,"select * from json_populate_recordset(null::jpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",json.sql,SAME,,"[('blurfl', None, None), (None, 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"select * from json_populate_recordset(row('def',99,null)::jpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",json.sql,SAME,,"[('blurfl', 99, None), ('def', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"select * from json_populate_recordset(row('def',99,null)::jpop,'[{""a"":[100,200,300],""x"":43.2},{""a"":{""z"":true},""b"":3,""c"":""2012-01-20 10:42:53""}]') q",json.sql,SAME,,"[('[100,200,300]', 99, None), ('{""z"":true}', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"SELECT json_populate_recordset(row(1,2), '[{""f1"": 0, ""f2"": 1}]')",json.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,"SELECT i, json_populate_recordset(row(i,50), '[{""f1"":""42""},{""f2"":""43""}]') FROM (VALUES (1),(2)) v(i)",json.sql,SAME,,"[(1, '(42,50)'), (1, '(1,43)'), (2, '(42,50)'), (2, '(2,43)')]"
postgresql,postgresql,"SELECT * FROM   json_populate_recordset(null::record, '[{""x"": 776}]') AS (x int, y int)",json.sql,SAME,,"[(776, None)]"
postgresql,postgresql,"SELECT json_populate_recordset(row(1,2), '[]')",json.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM json_populate_recordset(NULL::jpop,'[]') q",json.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM   json_populate_recordset(null::record, '[]') AS (x int, y int)",json.sql,SAME,,[]
postgresql,postgresql,"SELECT json_populate_recordset(null::j_ordered_pair, '[{""x"": 0, ""y"": 1}]')",json.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,"SELECT json_populate_recordset(row(1,2)::j_ordered_pair, '[{""x"": 0}, {""y"": 3}]')",json.sql,SAME,,"[('(0,2)',), ('(1,3)',)]"
postgresql,postgresql,CREATE TEMP TABLE jspoptest (js json),json.sql,SAME,,[]
postgresql,postgresql,"SELECT (json_populate_record(NULL::jsrec, js)).* FROM jspoptest",json.sql,SAME,,"[(None, None, None, None, None, None, None, None, None, None, None, None, None, None, [1, '2', None, 4], '(abc,,""2003-01-02 00:00:00"")', '{""(abc,456,)"",NULL,""(,,\\""2003-01-02 00:00:00\\"")""}'), (None, None, None, None, None, None, None, None, None, None, None, None, None, None, [1, '2', None, 4], '(abc,,""2003-01-02 00:00:00"")', '{""(abc,456,)"",NULL,""(,,\\""2003-01-02 00:00:00\\"")""}'), (None, None, None, None, None, None, None, None, None, None, None, None, None, None, [1, '2', None, 4], '(abc,,""2003-01-02 00:00:00"")', '{""(abc,456,)"",NULL,""(,,\\""2003-01-02 00:00:00\\"")""}')]"
postgresql,postgresql,DROP TYPE jsrec,json.sql,SAME,,[]
postgresql,postgresql,DROP TYPE jsrec_i_not_null,json.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN js_int_not_null,json.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN js_int_array_1d,json.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN js_int_array_2d,json.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN j_ordered_pair,json.sql,SAME,,[]
postgresql,postgresql,DROP TYPE j_unordered_pair,json.sql,SAME,,[]
postgresql,postgresql,"select value, json_typeof(value)   from (values (json '123.4'),                (json '-1'),                (json '""foo""'),                (json 'true'),                (json 'false'),                (json 'null'),                (json '[1, 2, 3]'),                (json '[]'),                (json '{""x"":""foo"", ""y"":123}'),                (json '{}'),                (NULL::json))       as data(value)",json.sql,SAME,,"[(123.4, 'number'), (-1, 'number'), ('foo', 'string'), (True, 'boolean'), (False, 'boolean'), (None, 'null'), ([1, 2, 3], 'array'), ([], 'array'), ({'x': 'foo', 'y': 123}, 'object'), ({}, 'object'), (None, None)]"
postgresql,postgresql,"SELECT json_build_array('a',1,'b',1.2,'c',true,'d',null,'e',json '{""x"": 3, ""y"": [1,2,3]}')",json.sql,SAME,,"[(['a', 1, 'b', 1.2, 'c', True, 'd', None, 'e', {'x': 3, 'y': [1, 2, 3]}],)]"
postgresql,postgresql,"SELECT json_build_array('a', NULL)",json.sql,SAME,,"[(['a', None],)]"
postgresql,postgresql,SELECT json_build_array(VARIADIC NULL::text[]),json.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT json_build_array(VARIADIC '{}'::text[]),json.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT json_build_array(VARIADIC '{a,b,c}'::text[])",json.sql,SAME,,"[(['a', 'b', 'c'],)]"
postgresql,postgresql,"SELECT json_build_array(VARIADIC ARRAY['a', NULL]::text[])",json.sql,SAME,,"[(['a', None],)]"
postgresql,postgresql,"SELECT json_build_array(VARIADIC '{1,2,3,4}'::text[])",json.sql,SAME,,"[(['1', '2', '3', '4'],)]"
postgresql,postgresql,"SELECT json_build_array(VARIADIC '{1,2,3,4}'::int[])",json.sql,SAME,,"[([1, 2, 3, 4],)]"
postgresql,postgresql,"SELECT json_build_array(VARIADIC '{{1,4},{2,5},{3,6}}'::int[][])",json.sql,SAME,,"[([1, 4, 2, 5, 3, 6],)]"
postgresql,postgresql,"SELECT json_build_object('a',1,'b',1.2,'c',true,'d',null,'e',json '{""x"": 3, ""y"": [1,2,3]}')",json.sql,SAME,,"[({'a': 1, 'b': 1.2, 'c': True, 'd': None, 'e': {'x': 3, 'y': [1, 2, 3]}},)]"
postgresql,postgresql,"SELECT json_build_object(        'a', json_build_object('b',false,'c',99),        'd', json_build_object('e',array[9,8,7]::int[],            'f', (select row_to_json(r) from ( select relkind, oid::regclass as name from pg_class where relname = 'pg_class') r)))",json.sql,SAME,,"[({'a': {'b': False, 'c': 99}, 'd': {'e': [9, 8, 7], 'f': {'relkind': 'r', 'name': 'pg_class'}}},)]"
postgresql,postgresql,"SELECT json_build_object('a', NULL)",json.sql,SAME,,"[({'a': None},)]"
postgresql,postgresql,SELECT json_build_object(VARIADIC NULL::text[]),json.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT json_build_object(VARIADIC '{}'::text[]),json.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT json_build_object(VARIADIC ARRAY['a', NULL]::text[])",json.sql,SAME,,"[({'a': None},)]"
postgresql,postgresql,"SELECT json_build_object(VARIADIC '{1,2,3,4}'::text[])",json.sql,SAME,,"[({'1': '2', '3': '4'},)]"
postgresql,postgresql,"SELECT json_build_object(VARIADIC '{1,2,3,4}'::int[])",json.sql,SAME,,"[({'1': 2, '3': 4},)]"
postgresql,postgresql,"SELECT json_build_object(VARIADIC '{{1,4},{2,5},{3,6}}'::int[][])",json.sql,SAME,,"[({'1': 4, '2': 5, '3': 6},)]"
postgresql,postgresql,SELECT json_build_array(),json.sql,SAME,,"[([],)]"
postgresql,postgresql,SELECT json_build_object(),json.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT json_build_object(1,2)",json.sql,SAME,,"[({'1': 2},)]"
postgresql,postgresql,"CREATE TEMP TABLE foo (serial_num int, name text, type text)",json.sql,SAME,,[]
postgresql,postgresql,"SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type))) FROM foo",json.sql,SAME,,"[({'turbines': {'847001': {'name': 't15', 'type': 'GE1043'}, '847002': {'name': 't16', 'type': 'GE1043'}, '847003': {'name': 'sub-alpha', 'type': 'GESS90'}}},)]"
postgresql,postgresql,"SELECT json_object_agg(name, type) FROM foo",json.sql,SAME,,"[({'t15': 'GE1043', 't16': 'GE1043', 'sub-alpha': 'GESS90'},)]"
postgresql,postgresql,SELECT json_object('{}'),json.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT json_object('{}', '{}')",json.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT json_object('{a,1,b,2,3,NULL,""d e f"",""a b c""}')",json.sql,SAME,,"[({'a': '1', 'b': '2', '3': None, 'd e f': 'a b c'},)]"
postgresql,postgresql,"SELECT json_object('{{a,1},{b,2},{3,NULL},{""d e f"",""a b c""}}')",json.sql,SAME,,"[({'a': '1', 'b': '2', '3': None, 'd e f': 'a b c'},)]"
postgresql,postgresql,"select json_object('{a,b,c,""d e f""}','{1,2,3,""a b c""}')",json.sql,SAME,,"[({'a': '1', 'b': '2', 'c': '3', 'd e f': 'a b c'},)]"
postgresql,postgresql,"select json_object('{a,b,"""",""d e f""}','{1,2,3,""a b c""}')",json.sql,SAME,,"[({'a': '1', 'b': '2', '': '3', 'd e f': 'a b c'},)]"
postgresql,postgresql,"select * from json_to_record('{""a"":1,""b"":""foo"",""c"":""bar""}')     as x(a int, b text, d text)",json.sql,SAME,,"[(1, 'foo', None)]"
postgresql,postgresql,"select * from json_to_recordset('[{""a"":1,""b"":""foo"",""d"":false},{""a"":2,""b"":""bar"",""c"":true}]')     as x(a int, b text, c boolean)",json.sql,SAME,,"[(1, 'foo', None), (2, 'bar', True)]"
postgresql,postgresql,"select * from json_to_recordset('[{""a"":1,""b"":{""d"":""foo""},""c"":true},{""a"":2,""c"":false,""b"":{""d"":""bar""}}]')     as x(a int, b json, c boolean)",json.sql,SAME,,"[(1, {'d': 'foo'}, True), (2, {'d': 'bar'}, False)]"
postgresql,postgresql,"select *, c is null as c_is_null from json_to_record('{""a"":1, ""b"":{""c"":16, ""d"":2}, ""x"":8, ""ca"": [""1 2"", 3], ""ia"": [[1,2],[3,4]], ""r"": {""a"": ""aaa"", ""b"": 123}}'::json)     as t(a int, b json, c text, x int, ca char(5)[], ia int[][], r jpop)",json.sql,SAME,,"[(1, {'c': 16, 'd': 2}, None, 8, ['1 2  ', '3    '], [[1, 2], [3, 4]], '(aaa,123,)', True)]"
postgresql,postgresql,"select *, c is null as c_is_null from json_to_recordset('[{""a"":1, ""b"":{""c"":16, ""d"":2}, ""x"":8}]'::json)     as t(a int, b json, c text, x int)",json.sql,SAME,,"[(1, {'c': 16, 'd': 2}, None, 8, True)]"
postgresql,postgresql,"select * from json_to_record('{""ia"": null}') as x(ia _int4)",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select * from json_to_record('{""ia"": [1, ""2"", null, 4]}') as x(ia _int4)",json.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"select * from json_to_record('{""ia"": [[1, 2], [3, 4]]}') as x(ia _int4)",json.sql,SAME,,"[([[1, 2], [3, 4]],)]"
postgresql,postgresql,"select * from json_to_record('{""ia2"": [1, 2, 3]}') as x(ia2 int[][])",json.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"select * from json_to_record('{""ia2"": [[1, 2], [3, 4]]}') as x(ia2 int4[][])",json.sql,SAME,,"[([[1, 2], [3, 4]],)]"
postgresql,postgresql,"select * from json_to_record('{""ia2"": [[[1], [2], [3]]]}') as x(ia2 int4[][])",json.sql,SAME,,"[([[[1], [2], [3]]],)]"
postgresql,postgresql,"select * from json_to_record('{""out"": {""key"": 1}}') as x(out json)",json.sql,SAME,,"[({'key': 1},)]"
postgresql,postgresql,"select * from json_to_record('{""out"": [{""key"": 1}]}') as x(out json)",json.sql,SAME,,"[([{'key': 1}],)]"
postgresql,postgresql,"select * from json_to_record('{""out"": ""{\""key\"": 1}""}') as x(out json)",json.sql,SAME,,"[('{""key"": 1}',)]"
postgresql,postgresql,"select * from json_to_record('{""out"": {""key"": 1}}') as x(out jsonb)",json.sql,SAME,,"[({'key': 1},)]"
postgresql,postgresql,"select * from json_to_record('{""out"": [{""key"": 1}]}') as x(out jsonb)",json.sql,SAME,,"[([{'key': 1}],)]"
postgresql,postgresql,"select * from json_to_record('{""out"": ""{\""key\"": 1}""}') as x(out jsonb)",json.sql,SAME,,"[('{""key"": 1}',)]"
postgresql,postgresql,select json_strip_nulls(null),json.sql,SAME,,"[(None,)]"
postgresql,postgresql,select json_strip_nulls('1'),json.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select json_strip_nulls('""a string""')",json.sql,SAME,,"[('a string',)]"
postgresql,postgresql,select json_strip_nulls('null'),json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select json_strip_nulls('[1,2,null,3,4]')",json.sql,SAME,,"[([1, 2, None, 3, 4],)]"
postgresql,postgresql,"select json_strip_nulls('{""a"":1,""b"":null,""c"":[2,null,3],""d"":{""e"":4,""f"":null}}')",json.sql,SAME,,"[({'a': 1, 'c': [2, None, 3], 'd': {'e': 4}},)]"
postgresql,postgresql,"select json_strip_nulls('[1,{""a"":1,""b"":null,""c"":2},3]')",json.sql,SAME,,"[([1, {'a': 1, 'c': 2}, 3],)]"
postgresql,postgresql,"select json_strip_nulls('{""a"": {""b"": null, ""c"": null}, ""d"": {} }')",json.sql,SAME,,"[({'a': {}, 'd': {}},)]"
postgresql,postgresql,"select to_tsvector('{""a"": ""aaa bbb ddd ccc"", ""b"": [""eee fff ggg""], ""c"": {""d"": ""hhh iii""}}'::json)",json.sql,SAME,,"[(""'aaa':1 'bbb':2 'ccc':4 'ddd':3 'eee':6 'fff':7 'ggg':8 'hhh':10 'iii':11"",)]"
postgresql,postgresql,"select to_tsvector('simple', '{""a"": ""aaa bbb ddd ccc"", ""b"": [""eee fff ggg""], ""c"": {""d"": ""hhh iii""}}'::json)",json.sql,SAME,,"[(""'aaa':1 'bbb':2 'ccc':4 'ddd':3 'eee':6 'fff':7 'ggg':8 'hhh':10 'iii':11"",)]"
postgresql,postgresql,"select to_tsvector('english', '{""a"": ""aaa in bbb ddd ccc"", ""b"": [""the eee fff ggg""], ""c"": {""d"": ""hhh. iii""}}'::json)",json.sql,SAME,,"[(""'aaa':1 'bbb':3 'ccc':5 'ddd':4 'eee':8 'fff':9 'ggg':10 'hhh':12 'iii':13"",)]"
postgresql,postgresql,"select to_tsvector('english', '{""a"": ""aaa in bbb ddd ccc"", ""b"": 123, ""c"": 456}'::json)",json.sql,SAME,,"[(""'aaa':1 'bbb':3 'ccc':5 'ddd':4"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""all""')",json.sql,SAME,,"[(""'123':8 '456':12 'aaa':2 'b':6 'bbb':4 'c':10 'd':14 'f':18 'fals':20 'g':22 'true':16"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""key""')",json.sql,SAME,,"[(""'b':2 'c':4 'd':6 'f':8 'g':10"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""string""')",json.sql,SAME,,"[(""'aaa':1 'bbb':3"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""numeric""')",json.sql,SAME,,"[(""'123':1 '456':3"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""boolean""')",json.sql,SAME,,"[(""'fals':3 'true':1"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '[""string"", ""numeric""]')",json.sql,SAME,,"[(""'123':5 '456':7 'aaa':1 'bbb':3"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""all""')",json.sql,SAME,,"[(""'123':8 '456':12 'aaa':2 'b':6 'bbb':4 'c':10 'd':14 'f':18 'fals':20 'g':22 'true':16"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""key""')",json.sql,SAME,,"[(""'b':2 'c':4 'd':6 'f':8 'g':10"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""string""')",json.sql,SAME,,"[(""'aaa':1 'bbb':3"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""numeric""')",json.sql,SAME,,"[(""'123':1 '456':3"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '""boolean""')",json.sql,SAME,,"[(""'fals':3 'true':1"",)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '[""string"", ""numeric""]')",json.sql,SAME,,"[(""'123':5 '456':7 'aaa':1 'bbb':3"",)]"
postgresql,postgresql,"select to_tsvector('""""'::json)",json.sql,SAME,,"[('',)]"
postgresql,postgresql,select to_tsvector('{}'::json),json.sql,SAME,,"[('',)]"
postgresql,postgresql,select to_tsvector('[]'::json),json.sql,SAME,,"[('',)]"
postgresql,postgresql,select to_tsvector('null'::json),json.sql,SAME,,"[('',)]"
postgresql,postgresql,"select json_to_tsvector('""""'::json, '""all""')",json.sql,SAME,,"[('',)]"
postgresql,postgresql,"select json_to_tsvector('{}'::json, '""all""')",json.sql,SAME,,"[('',)]"
postgresql,postgresql,"select json_to_tsvector('[]'::json, '""all""')",json.sql,SAME,,"[('',)]"
postgresql,postgresql,"select json_to_tsvector('null'::json, '""all""')",json.sql,SAME,,"[('',)]"
postgresql,postgresql,"select json_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::json, '[]')",json.sql,SAME,,"[('',)]"
postgresql,postgresql,"select ts_headline('{""a"": ""aaa bbb"", ""b"": {""c"": ""ccc ddd fff"", ""c1"": ""ccc1 ddd1""}, ""d"": [""ggg hhh"", ""iii jjj""]}'::json, tsquery('bbb & ddd & hhh'))",json.sql,SAME,,"[({'a': 'aaa <b>bbb</b>', 'b': {'c': 'ccc <b>ddd</b> fff', 'c1': 'ccc1 ddd1'}, 'd': ['ggg <b>hhh</b>', 'iii jjj']},)]"
postgresql,postgresql,"select ts_headline('english', '{""a"": ""aaa bbb"", ""b"": {""c"": ""ccc ddd fff""}, ""d"": [""ggg hhh"", ""iii jjj""]}'::json, tsquery('bbb & ddd & hhh'))",json.sql,SAME,,"[({'a': 'aaa <b>bbb</b>', 'b': {'c': 'ccc <b>ddd</b> fff'}, 'd': ['ggg <b>hhh</b>', 'iii jjj']},)]"
postgresql,postgresql,"select ts_headline('{""a"": ""aaa bbb"", ""b"": {""c"": ""ccc ddd fff"", ""c1"": ""ccc1 ddd1""}, ""d"": [""ggg hhh"", ""iii jjj""]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >')",json.sql,SAME,,"[({'a': 'aaa <bbb>', 'b': {'c': 'ccc <ddd> fff', 'c1': 'ccc1 ddd1'}, 'd': ['ggg <hhh>', 'iii jjj']},)]"
postgresql,postgresql,"select ts_headline('english', '{""a"": ""aaa bbb"", ""b"": {""c"": ""ccc ddd fff"", ""c1"": ""ccc1 ddd1""}, ""d"": [""ggg hhh"", ""iii jjj""]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >')",json.sql,SAME,,"[({'a': 'aaa <bbb>', 'b': {'c': 'ccc <ddd> fff', 'c1': 'ccc1 ddd1'}, 'd': ['ggg <hhh>', 'iii jjj']},)]"
postgresql,postgresql,"select ts_headline('null'::json, tsquery('aaa & bbb'))",json.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ts_headline('{}'::json, tsquery('aaa & bbb'))",json.sql,SAME,,"[({},)]"
postgresql,postgresql,"select ts_headline('[]'::json, tsquery('aaa & bbb'))",json.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT '""\u0000""'::json",json_encoding.sql,SAME,,"[('\x00',)]"
postgresql,postgresql,"SELECT '""\uaBcD""'::json",json_encoding.sql,SAME,,"[('ꯍ',)]"
postgresql,postgresql,"select json '{ ""a"":  ""\ud83d\ude04\ud83d\udc36"" }' -> 'a' as correct_in_utf8",json_encoding.sql,SAME,,"[('😄🐶',)]"
postgresql,postgresql,"select json '{ ""a"":  ""the Copyright \u00a9 sign"" }' as correct_in_utf8",json_encoding.sql,SAME,,"[({'a': 'the Copyright © sign'},)]"
postgresql,postgresql,"select json '{ ""a"":  ""dollar \u0024 character"" }' as correct_everywhere",json_encoding.sql,SAME,,"[({'a': 'dollar $ character'},)]"
postgresql,postgresql,"select json '{ ""a"":  ""dollar \\u0024 character"" }' as not_an_escape",json_encoding.sql,SAME,,"[({'a': 'dollar \\u0024 character'},)]"
postgresql,postgresql,"select json '{ ""a"":  ""null \u0000 escape"" }' as not_unescaped",json_encoding.sql,SAME,,"[({'a': 'null \x00 escape'},)]"
postgresql,postgresql,"select json '{ ""a"":  ""null \\u0000 escape"" }' as not_an_escape",json_encoding.sql,SAME,,"[({'a': 'null \\u0000 escape'},)]"
postgresql,postgresql,"select json '{ ""a"":  ""the Copyright \u00a9 sign"" }' ->> 'a' as correct_in_utf8",json_encoding.sql,SAME,,"[('the Copyright © sign',)]"
postgresql,postgresql,"select json '{ ""a"":  ""dollar \u0024 character"" }' ->> 'a' as correct_everywhere",json_encoding.sql,SAME,,"[('dollar $ character',)]"
postgresql,postgresql,"select json '{ ""a"":  ""dollar \\u0024 character"" }' ->> 'a' as not_an_escape",json_encoding.sql,SAME,,"[('dollar \\u0024 character',)]"
postgresql,postgresql,"select json '{ ""a"":  ""null \\u0000 escape"" }' ->> 'a' as not_an_escape",json_encoding.sql,SAME,,"[('null \\u0000 escape',)]"
postgresql,postgresql,"SELECT '""\u0045""'::jsonb",json_encoding.sql,SAME,,"[('E',)]"
postgresql,postgresql,"SELECT octet_length('""\uaBcD""'::jsonb::text)",json_encoding.sql,SAME,,"[(5,)]"
postgresql,postgresql,"SELECT octet_length((jsonb '{ ""a"":  ""\ud83d\ude04\ud83d\udc36"" }' -> 'a')::text) AS correct_in_utf8",json_encoding.sql,SAME,,"[(10,)]"
postgresql,postgresql,"SELECT jsonb '{ ""a"":  ""the Copyright \u00a9 sign"" }' as correct_in_utf8",json_encoding.sql,SAME,,"[({'a': 'the Copyright © sign'},)]"
postgresql,postgresql,"SELECT jsonb '{ ""a"":  ""dollar \u0024 character"" }' as correct_everywhere",json_encoding.sql,SAME,,"[({'a': 'dollar $ character'},)]"
postgresql,postgresql,"SELECT jsonb '{ ""a"":  ""dollar \\u0024 character"" }' as not_an_escape",json_encoding.sql,SAME,,"[({'a': 'dollar \\u0024 character'},)]"
postgresql,postgresql,"SELECT jsonb '{ ""a"":  ""null \\u0000 escape"" }' as not_an_escape",json_encoding.sql,SAME,,"[({'a': 'null \\u0000 escape'},)]"
postgresql,postgresql,"SELECT jsonb '{ ""a"":  ""the Copyright \u00a9 sign"" }' ->> 'a' as correct_in_utf8",json_encoding.sql,SAME,,"[('the Copyright © sign',)]"
postgresql,postgresql,"SELECT jsonb '{ ""a"":  ""dollar \u0024 character"" }' ->> 'a' as correct_everywhere",json_encoding.sql,SAME,,"[('dollar $ character',)]"
postgresql,postgresql,"SELECT jsonb '{ ""a"":  ""dollar \\u0024 character"" }' ->> 'a' as not_an_escape",json_encoding.sql,SAME,,"[('dollar \\u0024 character',)]"
postgresql,postgresql,"SELECT jsonb '{ ""a"":  ""null \\u0000 escape"" }' ->> 'a' as not_an_escape",json_encoding.sql,SAME,,"[('null \\u0000 escape',)]"
postgresql,postgresql,"select * from pg_input_error_info('{ ""a"":  ""\ud83d\ude04\ud83d\udc36"" }', 'jsonb')",json_encoding.sql,SAME,,"[(None, None, None, None)]"
postgresql,postgresql,"SELECT '""""'::jsonb",jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT '""abc""'::jsonb",jsonb.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT '""\n\""\\""'::jsonb",jsonb.sql,SAME,,"[('\n""\\',)]"
postgresql,postgresql,SELECT '1'::jsonb,jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT '0'::jsonb,jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT '0.1'::jsonb,jsonb.sql,SAME,,"[(0.1,)]"
postgresql,postgresql,SELECT '9223372036854775808'::jsonb,jsonb.sql,SAME,,"[(9223372036854775808,)]"
postgresql,postgresql,SELECT '1e100'::jsonb,jsonb.sql,SAME,,"[(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,)]"
postgresql,postgresql,SELECT '1.3e100'::jsonb,jsonb.sql,SAME,,"[(13000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,)]"
postgresql,postgresql,SELECT '[]'::jsonb,jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,SELECT '[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'::jsonb,jsonb.sql,SAME,,"[([[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],)]"
postgresql,postgresql,"SELECT '[1,2]'::jsonb",jsonb.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,SELECT '{}'::jsonb,jsonb.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT '{""abc"":1}'::jsonb",jsonb.sql,SAME,,"[({'abc': 1},)]"
postgresql,postgresql,"SELECT '{""abc"":1,""def"":2,""ghi"":[3,4],""hij"":{""klm"":5,""nop"":[6]}}'::jsonb",jsonb.sql,SAME,,"[({'abc': 1, 'def': 2, 'ghi': [3, 4], 'hij': {'klm': 5, 'nop': [6]}},)]"
postgresql,postgresql,SELECT 'true'::jsonb,jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT 'false'::jsonb,jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 'null'::jsonb,jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT ' true '::jsonb,jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{ 		""one"": 1, 		""two"":""two"", 		""three"": 		true}'::jsonb",jsonb.sql,SAME,,"[({'one': 1, 'two': 'two', 'three': True},)]"
postgresql,postgresql,"select pg_input_is_valid('{""a"":true}', 'jsonb')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_input_is_valid('{""a"":true', 'jsonb')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('{""a"":true', 'jsonb')",jsonb.sql,SAME,,"[('invalid input syntax for type json', 'The input string ended unexpectedly.', None, '22P02')]"
postgresql,postgresql,"select * from pg_input_error_info('{""a"":1e1000000}', 'jsonb')",jsonb.sql,SAME,,"[('value overflows numeric format', None, None, '22003')]"
postgresql,postgresql,"SELECT array_to_json(ARRAY [jsonb '{""a"":1}', jsonb '{""b"":[2,3]}'])",jsonb.sql,SAME,,"[([{'a': 1}, {'b': [2, 3]}],)]"
postgresql,postgresql,"CREATE TEMP TABLE rows AS SELECT x, 'txt' || x as y FROM generate_series(1,3) AS x",jsonb.sql,SAME,,[]
postgresql,postgresql,analyze rows,jsonb.sql,SAME,,[]
postgresql,postgresql,"select attname, to_jsonb(histogram_bounds) histogram_bounds from pg_stats where tablename = 'rows' and       schemaname = pg_my_temp_schema()::regnamespace::text order by 1",jsonb.sql,SAME,,"[('x', [1, 2, 3]), ('y', ['txt1', 'txt2', 'txt3'])]"
postgresql,postgresql,select to_jsonb(timestamp '2014-05-28 12:22:35.614298'),jsonb.sql,SAME,,"[('2014-05-28T12:22:35.614298',)]"
postgresql,postgresql,BEGIN,jsonb.sql,SAME,,[]
postgresql,postgresql,SET LOCAL TIME ZONE 10.5,jsonb.sql,SAME,,[]
postgresql,postgresql,select to_jsonb(timestamptz '2014-05-28 12:22:35.614298-04'),jsonb.sql,SAME,,"[('2014-05-29T02:52:35.614298+10:30',)]"
postgresql,postgresql,SET LOCAL TIME ZONE -8,jsonb.sql,SAME,,[]
postgresql,postgresql,select to_jsonb(timestamptz '2014-05-28 12:22:35.614298-04'),jsonb.sql,SAME,,"[('2014-05-28T08:22:35.614298-08:00',)]"
postgresql,postgresql,COMMIT,jsonb.sql,SAME,,[]
postgresql,postgresql,select to_jsonb(date '2014-05-28'),jsonb.sql,SAME,,"[('2014-05-28',)]"
postgresql,postgresql,select to_jsonb(date 'Infinity'),jsonb.sql,SAME,,"[('infinity',)]"
postgresql,postgresql,select to_jsonb(date '-Infinity'),jsonb.sql,SAME,,"[('-infinity',)]"
postgresql,postgresql,select to_jsonb(timestamp 'Infinity'),jsonb.sql,SAME,,"[('infinity',)]"
postgresql,postgresql,select to_jsonb(timestamp '-Infinity'),jsonb.sql,SAME,,"[('-infinity',)]"
postgresql,postgresql,select to_jsonb(timestamptz 'Infinity'),jsonb.sql,SAME,,"[('infinity',)]"
postgresql,postgresql,select to_jsonb(timestamptz '-Infinity'),jsonb.sql,SAME,,"[('-infinity',)]"
postgresql,postgresql,"SELECT jsonb_agg(q)   FROM ( SELECT $$a$$ || x AS b, y AS c,                ARRAY[ROW(x.*,ARRAY[1,2,3]),                ROW(y.*,ARRAY[4,5,6])] AS z          FROM generate_series(1,2) x,               generate_series(4,5) y) q",jsonb.sql,SAME,,"[([{'b': 'a1', 'c': 4, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]}, {'b': 'a1', 'c': 5, 'z': [{'f1': 1, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]}, {'b': 'a2', 'c': 4, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 4, 'f2': [4, 5, 6]}]}, {'b': 'a2', 'c': 5, 'z': [{'f1': 2, 'f2': [1, 2, 3]}, {'f1': 5, 'f2': [4, 5, 6]}]}],)]"
postgresql,postgresql,"SELECT jsonb_agg(q ORDER BY x, y)   FROM rows q",jsonb.sql,SAME,,"[([{'x': 1, 'y': 'txt1'}, {'x': 2, 'y': 'txt2'}, {'x': 3, 'y': 'txt3'}],)]"
postgresql,postgresql,UPDATE rows SET x = NULL WHERE x = 1,jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT jsonb_agg(q ORDER BY x NULLS FIRST, y)   FROM rows q",jsonb.sql,SAME,,"[([{'x': None, 'y': 'txt1'}, {'x': 2, 'y': 'txt2'}, {'x': 3, 'y': 'txt3'}],)]"
postgresql,postgresql,"CREATE TEMP TABLE test_jsonb (        json_type text,        test_json jsonb )",jsonb.sql,SAME,,[]
postgresql,postgresql,SELECT test_json -> 'x' FROM test_jsonb WHERE json_type = 'scalar',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json -> 'x' FROM test_jsonb WHERE json_type = 'array',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json -> 'x' FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json -> 'field2' FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[('val2',)]"
postgresql,postgresql,SELECT test_json ->> 'field2' FROM test_jsonb WHERE json_type = 'scalar',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json ->> 'field2' FROM test_jsonb WHERE json_type = 'array',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json ->> 'field2' FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[('val2',)]"
postgresql,postgresql,SELECT test_json -> 2 FROM test_jsonb WHERE json_type = 'scalar',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json -> 2 FROM test_jsonb WHERE json_type = 'array',jsonb.sql,SAME,,"[('two',)]"
postgresql,postgresql,SELECT test_json -> 9 FROM test_jsonb WHERE json_type = 'array',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json -> 2 FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json ->> 6 FROM test_jsonb WHERE json_type = 'array',jsonb.sql,SAME,,"[('[1, 2, 3]',)]"
postgresql,postgresql,SELECT test_json ->> 7 FROM test_jsonb WHERE json_type = 'array',jsonb.sql,SAME,,"[('{""f1"": 9}',)]"
postgresql,postgresql,SELECT test_json ->> 'field4' FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[('4',)]"
postgresql,postgresql,SELECT test_json ->> 'field5' FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[('[1, 2, 3]',)]"
postgresql,postgresql,SELECT test_json ->> 'field6' FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[('{""f1"": 9}',)]"
postgresql,postgresql,SELECT test_json ->> 2 FROM test_jsonb WHERE json_type = 'scalar',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT test_json ->> 2 FROM test_jsonb WHERE json_type = 'array',jsonb.sql,SAME,,"[('two',)]"
postgresql,postgresql,SELECT test_json ->> 2 FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT jsonb_object_keys(test_json) FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[('field1',), ('field2',), ('field3',), ('field4',), ('field5',), ('field6',)]"
postgresql,postgresql,SELECT (test_json->'field3') IS NULL AS expect_false FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT (test_json->>'field3') IS NULL AS expect_true FROM test_jsonb WHERE json_type = 'object',jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT (test_json->3) IS NULL AS expect_false FROM test_jsonb WHERE json_type = 'array',jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT (test_json->>3) IS NULL AS expect_true FROM test_jsonb WHERE json_type = 'array',jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb -> null::text",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb -> null::int",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb -> 1",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb -> 'z'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb -> ''",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb -> 1",jsonb.sql,SAME,,"[({'b': 'cc'},)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb -> 3",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb -> 'z'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": ""c"", ""b"": null}'::jsonb -> 'b'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::jsonb -> 1",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::jsonb -> 'z'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb ->> null::text",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb ->> null::int",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb ->> 1",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb ->> 'z'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb ->> ''",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb ->> 1",jsonb.sql,SAME,,"[('{""b"": ""cc""}',)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb ->> 3",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb ->> 'z'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": ""c"", ""b"": null}'::jsonb ->> 'b'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::jsonb ->> 1",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::jsonb ->> 'z'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '{""x"":""y""}'::jsonb = '{""x"":""y""}'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""x"":""y""}'::jsonb = '{""x"":""z""}'::jsonb",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""x"":""y""}'::jsonb <> '{""x"":""y""}'::jsonb",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""x"":""y""}'::jsonb <> '{""x"":""z""}'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_contains('{""a"":""b"", ""b"":1, ""c"":null}', '{""a"":""b""}')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_contains('{""a"":""b"", ""b"":1, ""c"":null}', '{""a"":""b"", ""c"":null}')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_contains('{""a"":""b"", ""b"":1, ""c"":null}', '{""a"":""b"", ""g"":null}')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_contains('{""a"":""b"", ""b"":1, ""c"":null}', '{""g"":null}')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_contains('{""a"":""b"", ""b"":1, ""c"":null}', '{""a"":""c""}')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_contains('{""a"":""b"", ""b"":1, ""c"":null}', '{""a"":""b""}')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_contains('{""a"":""b"", ""b"":1, ""c"":null}', '{""a"":""b"", ""c"":""q""}')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""b"":1, ""c"":null}'::jsonb @> '{""a"":""b""}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""b"":1, ""c"":null}'::jsonb @> '{""a"":""b"", ""c"":null}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""b"":1, ""c"":null}'::jsonb @> '{""a"":""b"", ""g"":null}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""b"":1, ""c"":null}'::jsonb @> '{""g"":null}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""b"":1, ""c"":null}'::jsonb @> '{""a"":""c""}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""b"":1, ""c"":null}'::jsonb @> '{""a"":""b""}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""b"":1, ""c"":null}'::jsonb @> '{""a"":""b"", ""c"":""q""}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '[1,2]'::jsonb @> '[1,2,2]'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '[1,1,2]'::jsonb @> '[1,2,2]'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '[[1,2]]'::jsonb @> '[[1,2,2]]'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '[1,2,2]'::jsonb <@ '[1,2]'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '[1,2,2]'::jsonb <@ '[1,1,2]'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '[[1,2,2]]'::jsonb <@ '[[1,2]]'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_contained('{""a"":""b""}', '{""a"":""b"", ""b"":1, ""c"":null}')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_contained('{""a"":""b"", ""c"":null}', '{""a"":""b"", ""b"":1, ""c"":null}')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_contained('{""a"":""b"", ""g"":null}', '{""a"":""b"", ""b"":1, ""c"":null}')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_contained('{""g"":null}', '{""a"":""b"", ""b"":1, ""c"":null}')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_contained('{""a"":""c""}', '{""a"":""b"", ""b"":1, ""c"":null}')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_contained('{""a"":""b""}', '{""a"":""b"", ""b"":1, ""c"":null}')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_contained('{""a"":""b"", ""c"":""q""}', '{""a"":""b"", ""b"":1, ""c"":null}')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":""b""}'::jsonb <@ '{""a"":""b"", ""b"":1, ""c"":null}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""c"":null}'::jsonb <@ '{""a"":""b"", ""b"":1, ""c"":null}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""g"":null}'::jsonb <@ '{""a"":""b"", ""b"":1, ""c"":null}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""g"":null}'::jsonb <@ '{""a"":""b"", ""b"":1, ""c"":null}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":""c""}'::jsonb <@ '{""a"":""b"", ""b"":1, ""c"":null}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":""b""}'::jsonb <@ '{""a"":""b"", ""b"":1, ""c"":null}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":""b"", ""c"":""q""}'::jsonb <@ '{""a"":""b"", ""b"":1, ""c"":null}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT '[5]'::jsonb @> '[5]',jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '5'::jsonb @> '5',jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '[5]'::jsonb @> '5',jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '5'::jsonb @> '[5]',jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '[""9"", [""7"", ""3""], 1]'::jsonb @> '[""9"", [""7"", ""3""], 1]'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '[""9"", [""7"", ""3""], [""1""]]'::jsonb @> '[""9"", [""7"", ""3""], [""1""]]'::jsonb",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{ ""name"": ""Bob"", ""tags"": [ ""enim"", ""qui""]}'::jsonb @> '{""tags"":[""qu""]}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_array_length('[1,2,3,{""f1"":1,""f2"":[5,6]},4]')",jsonb.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT jsonb_array_length('[]'),jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT jsonb_each('{""f1"":[1,2,3],""f2"":{""f3"":1},""f4"":null}')",jsonb.sql,SAME,,"[('(f1,""[1, 2, 3]"")',), ('(f2,""{""""f3"""": 1}"")',), ('(f4,null)',)]"
postgresql,postgresql,"SELECT jsonb_each('{""a"":{""b"":""c"",""c"":""b"",""1"":""first""},""b"":[1,2],""c"":""cc"",""1"":""first"",""n"":null}'::jsonb) AS q",jsonb.sql,SAME,,"[('(1,""""""first"""""")',), ('(a,""{""""1"""": """"first"""", """"b"""": """"c"""", """"c"""": """"b""""}"")',), ('(b,""[1, 2]"")',), ('(c,""""""cc"""""")',), ('(n,null)',)]"
postgresql,postgresql,"SELECT * FROM jsonb_each('{""f1"":[1,2,3],""f2"":{""f3"":1},""f4"":null,""f5"":99,""f6"":""stringy""}') q",jsonb.sql,SAME,,"[('f1', [1, 2, 3]), ('f2', {'f3': 1}), ('f4', None), ('f5', 99), ('f6', 'stringy')]"
postgresql,postgresql,"SELECT * FROM jsonb_each('{""a"":{""b"":""c"",""c"":""b"",""1"":""first""},""b"":[1,2],""c"":""cc"",""1"":""first"",""n"":null}'::jsonb) AS q",jsonb.sql,SAME,,"[('1', 'first'), ('a', {'1': 'first', 'b': 'c', 'c': 'b'}), ('b', [1, 2]), ('c', 'cc'), ('n', None)]"
postgresql,postgresql,"SELECT jsonb_each_text('{""f1"":[1,2,3],""f2"":{""f3"":1},""f4"":null,""f5"":""null""}')",jsonb.sql,SAME,,"[('(f1,""[1, 2, 3]"")',), ('(f2,""{""""f3"""": 1}"")',), ('(f4,)',), ('(f5,null)',)]"
postgresql,postgresql,"SELECT jsonb_each_text('{""a"":{""b"":""c"",""c"":""b"",""1"":""first""},""b"":[1,2],""c"":""cc"",""1"":""first"",""n"":null}'::jsonb) AS q",jsonb.sql,SAME,,"[('(1,first)',), ('(a,""{""""1"""": """"first"""", """"b"""": """"c"""", """"c"""": """"b""""}"")',), ('(b,""[1, 2]"")',), ('(c,cc)',), ('(n,)',)]"
postgresql,postgresql,"SELECT * FROM jsonb_each_text('{""f1"":[1,2,3],""f2"":{""f3"":1},""f4"":null,""f5"":99,""f6"":""stringy""}') q",jsonb.sql,SAME,,"[('f1', '[1, 2, 3]'), ('f2', '{""f3"": 1}'), ('f4', None), ('f5', '99'), ('f6', 'stringy')]"
postgresql,postgresql,"SELECT * FROM jsonb_each_text('{""a"":{""b"":""c"",""c"":""b"",""1"":""first""},""b"":[1,2],""c"":""cc"",""1"":""first"",""n"":null}'::jsonb) AS q",jsonb.sql,SAME,,"[('1', 'first'), ('a', '{""1"": ""first"", ""b"": ""c"", ""c"": ""b""}'), ('b', '[1, 2]'), ('c', 'cc'), ('n', None)]"
postgresql,postgresql,"SELECT jsonb_exists('{""a"":null, ""b"":""qq""}', 'a')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_exists('{""a"":null, ""b"":""qq""}', 'b')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_exists('{""a"":null, ""b"":""qq""}', 'c')",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_exists('{""a"":""null"", ""b"":""qq""}', 'a')",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ? 'a'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ? 'b'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ? 'c'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":""null"", ""b"":""qq""}' ? 'a'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT count(*) from testjsonb  WHERE j->'array' ? 'bar',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) from testjsonb  WHERE j->'array' ? '5'::text,jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) from testjsonb  WHERE j->'array' @> '5'::jsonb,jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT jsonb_exists_any('{""a"":null, ""b"":""qq""}', ARRAY['a','b'])",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_exists_any('{""a"":null, ""b"":""qq""}', ARRAY['b','a'])",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_exists_any('{""a"":null, ""b"":""qq""}', ARRAY['c','a'])",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_exists_any('{""a"":null, ""b"":""qq""}', ARRAY['c','d'])",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_exists_any('{""a"":null, ""b"":""qq""}', '{}'::text[])",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?| ARRAY['a','b']",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?| ARRAY['b','a']",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?| ARRAY['c','a']",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?| ARRAY['c','d']",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?| '{}'::text[]",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_exists_all('{""a"":null, ""b"":""qq""}', ARRAY['a','b'])",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_exists_all('{""a"":null, ""b"":""qq""}', ARRAY['b','a'])",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_exists_all('{""a"":null, ""b"":""qq""}', ARRAY['c','a'])",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_exists_all('{""a"":null, ""b"":""qq""}', ARRAY['c','d'])",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_exists_all('{""a"":null, ""b"":""qq""}', '{}'::text[])",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?& ARRAY['a','b']",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?& ARRAY['b','a']",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?& ARRAY['c','a']",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?& ARRAY['c','d']",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?& ARRAY['a','a', 'b', 'b', 'b']",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '{""a"":null, ""b"":""qq""}' ?& '{}'::text[]",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT jsonb_typeof('{}') AS object,jsonb.sql,SAME,,"[('object',)]"
postgresql,postgresql,"SELECT jsonb_typeof('{""c"":3,""p"":""o""}') AS object",jsonb.sql,SAME,,"[('object',)]"
postgresql,postgresql,SELECT jsonb_typeof('[]') AS array,jsonb.sql,SAME,,"[('array',)]"
postgresql,postgresql,"SELECT jsonb_typeof('[""a"", 1]') AS array",jsonb.sql,SAME,,"[('array',)]"
postgresql,postgresql,"SELECT jsonb_typeof('null') AS ""null""",jsonb.sql,SAME,,"[('null',)]"
postgresql,postgresql,SELECT jsonb_typeof('1') AS number,jsonb.sql,SAME,,"[('number',)]"
postgresql,postgresql,SELECT jsonb_typeof('-1') AS number,jsonb.sql,SAME,,"[('number',)]"
postgresql,postgresql,SELECT jsonb_typeof('1.0') AS number,jsonb.sql,SAME,,"[('number',)]"
postgresql,postgresql,SELECT jsonb_typeof('1e2') AS number,jsonb.sql,SAME,,"[('number',)]"
postgresql,postgresql,SELECT jsonb_typeof('-1.0') AS number,jsonb.sql,SAME,,"[('number',)]"
postgresql,postgresql,SELECT jsonb_typeof('true') AS boolean,jsonb.sql,SAME,,"[('boolean',)]"
postgresql,postgresql,SELECT jsonb_typeof('false') AS boolean,jsonb.sql,SAME,,"[('boolean',)]"
postgresql,postgresql,"SELECT jsonb_typeof('""hello""') AS string",jsonb.sql,SAME,,"[('string',)]"
postgresql,postgresql,"SELECT jsonb_typeof('""true""') AS string",jsonb.sql,SAME,,"[('string',)]"
postgresql,postgresql,"SELECT jsonb_typeof('""1.0""') AS string",jsonb.sql,SAME,,"[('string',)]"
postgresql,postgresql,"SELECT jsonb_build_array('a',1,'b',1.2,'c',true,'d',null,'e',json '{""x"": 3, ""y"": [1,2,3]}')",jsonb.sql,SAME,,"[(['a', 1, 'b', 1.2, 'c', True, 'd', None, 'e', {'x': 3, 'y': [1, 2, 3]}],)]"
postgresql,postgresql,"SELECT jsonb_build_array('a', NULL)",jsonb.sql,SAME,,"[(['a', None],)]"
postgresql,postgresql,SELECT jsonb_build_array(VARIADIC NULL::text[]),jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT jsonb_build_array(VARIADIC '{}'::text[]),jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT jsonb_build_array(VARIADIC '{a,b,c}'::text[])",jsonb.sql,SAME,,"[(['a', 'b', 'c'],)]"
postgresql,postgresql,"SELECT jsonb_build_array(VARIADIC ARRAY['a', NULL]::text[])",jsonb.sql,SAME,,"[(['a', None],)]"
postgresql,postgresql,"SELECT jsonb_build_array(VARIADIC '{1,2,3,4}'::text[])",jsonb.sql,SAME,,"[(['1', '2', '3', '4'],)]"
postgresql,postgresql,"SELECT jsonb_build_array(VARIADIC '{1,2,3,4}'::int[])",jsonb.sql,SAME,,"[([1, 2, 3, 4],)]"
postgresql,postgresql,"SELECT jsonb_build_array(VARIADIC '{{1,4},{2,5},{3,6}}'::int[][])",jsonb.sql,SAME,,"[([1, 4, 2, 5, 3, 6],)]"
postgresql,postgresql,"SELECT jsonb_build_object('a',1,'b',1.2,'c',true,'d',null,'e',json '{""x"": 3, ""y"": [1,2,3]}')",jsonb.sql,SAME,,"[({'a': 1, 'b': 1.2, 'c': True, 'd': None, 'e': {'x': 3, 'y': [1, 2, 3]}},)]"
postgresql,postgresql,"SELECT jsonb_build_object(        'a', jsonb_build_object('b',false,'c',99),        'd', jsonb_build_object('e',array[9,8,7]::int[],            'f', (select row_to_json(r) from ( select relkind, oid::regclass as name from pg_class where relname = 'pg_class') r)))",jsonb.sql,SAME,,"[({'a': {'b': False, 'c': 99}, 'd': {'e': [9, 8, 7], 'f': {'name': 'pg_class', 'relkind': 'r'}}},)]"
postgresql,postgresql,"SELECT jsonb_build_object('a', NULL)",jsonb.sql,SAME,,"[({'a': None},)]"
postgresql,postgresql,SELECT jsonb_build_object(VARIADIC NULL::text[]),jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT jsonb_build_object(VARIADIC '{}'::text[]),jsonb.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT jsonb_build_object(VARIADIC ARRAY['a', NULL]::text[])",jsonb.sql,SAME,,"[({'a': None},)]"
postgresql,postgresql,"SELECT jsonb_build_object(VARIADIC '{1,2,3,4}'::text[])",jsonb.sql,SAME,,"[({'1': '2', '3': '4'},)]"
postgresql,postgresql,"SELECT jsonb_build_object(VARIADIC '{1,2,3,4}'::int[])",jsonb.sql,SAME,,"[({'1': 2, '3': 4},)]"
postgresql,postgresql,"SELECT jsonb_build_object(VARIADIC '{{1,4},{2,5},{3,6}}'::int[][])",jsonb.sql,SAME,,"[({'1': 4, '2': 5, '3': 6},)]"
postgresql,postgresql,SELECT jsonb_build_array(),jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,SELECT jsonb_build_object(),jsonb.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT jsonb_build_object(1,2)",jsonb.sql,SAME,,"[({'1': 2},)]"
postgresql,postgresql,"SELECT jsonb_object_agg(1, NULL::jsonb)",jsonb.sql,SAME,,"[({'1': None},)]"
postgresql,postgresql,"CREATE TEMP TABLE foo (serial_num int, name text, type text)",jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT jsonb_build_object('turbines',jsonb_object_agg(serial_num,jsonb_build_object('name',name,'type',type))) FROM foo",jsonb.sql,SAME,,"[({'turbines': {'847001': {'name': 't15', 'type': 'GE1043'}, '847002': {'name': 't16', 'type': 'GE1043'}, '847003': {'name': 'sub-alpha', 'type': 'GESS90'}}},)]"
postgresql,postgresql,"SELECT jsonb_object_agg(name, type) FROM foo",jsonb.sql,SAME,,"[({'t15': 'GE1043', 't16': 'GE1043', 'sub-alpha': 'GESS90'},)]"
postgresql,postgresql,"SELECT jsonb_object_agg(DISTINCT 'a', 'abc')",jsonb.sql,SAME,,"[({'a': 'abc'},)]"
postgresql,postgresql,SELECT jsonb_object('{}'),jsonb.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT jsonb_object('{}', '{}')",jsonb.sql,SAME,,"[({},)]"
postgresql,postgresql,"SELECT jsonb_object('{a,1,b,2,3,NULL,""d e f"",""a b c""}')",jsonb.sql,SAME,,"[({'3': None, 'a': '1', 'b': '2', 'd e f': 'a b c'},)]"
postgresql,postgresql,"SELECT jsonb_object('{{a,1},{b,2},{3,NULL},{""d e f"",""a b c""}}')",jsonb.sql,SAME,,"[({'3': None, 'a': '1', 'b': '2', 'd e f': 'a b c'},)]"
postgresql,postgresql,"select jsonb_object('{a,b,c,""d e f""}','{1,2,3,""a b c""}')",jsonb.sql,SAME,,"[({'a': '1', 'b': '2', 'c': '3', 'd e f': 'a b c'},)]"
postgresql,postgresql,"select jsonb_object('{a,b,"""",""d e f""}','{1,2,3,""a b c""}')",jsonb.sql,SAME,,"[({'': '3', 'a': '1', 'b': '2', 'd e f': 'a b c'},)]"
postgresql,postgresql,"SELECT jsonb_extract_path('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}','f4','f6')",jsonb.sql,SAME,,"[('stringy',)]"
postgresql,postgresql,"SELECT jsonb_extract_path('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}','f2')",jsonb.sql,SAME,,"[({'f3': 1},)]"
postgresql,postgresql,"SELECT jsonb_extract_path('{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}','f2',0::text)",jsonb.sql,SAME,,"[('f3',)]"
postgresql,postgresql,"SELECT jsonb_extract_path('{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}','f2',1::text)",jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT jsonb_extract_path_text('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}','f4','f6')",jsonb.sql,SAME,,"[('stringy',)]"
postgresql,postgresql,"SELECT jsonb_extract_path_text('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}','f2')",jsonb.sql,SAME,,"[('{""f3"": 1}',)]"
postgresql,postgresql,"SELECT jsonb_extract_path_text('{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}','f2',0::text)",jsonb.sql,SAME,,"[('f3',)]"
postgresql,postgresql,"SELECT jsonb_extract_path_text('{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}','f2',1::text)",jsonb.sql,SAME,,"[('1',)]"
postgresql,postgresql,"SELECT jsonb_extract_path('{""f2"":{""f3"":1},""f4"":{""f5"":null,""f6"":""stringy""}}','f4','f5') IS NULL AS expect_false",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_extract_path_text('{""f2"":{""f3"":1},""f4"":{""f5"":null,""f6"":""stringy""}}','f4','f5') IS NULL AS expect_true",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_extract_path('{""f2"":{""f3"":1},""f4"":[0,1,2,null]}','f4','3') IS NULL AS expect_false",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_extract_path_text('{""f2"":{""f3"":1},""f4"":[0,1,2,null]}','f4','3') IS NULL AS expect_true",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}'::jsonb#>array['f4','f6']",jsonb.sql,SAME,,"[('stringy',)]"
postgresql,postgresql,"SELECT '{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}'::jsonb#>array['f2']",jsonb.sql,SAME,,"[({'f3': 1},)]"
postgresql,postgresql,"SELECT '{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}'::jsonb#>array['f2','0']",jsonb.sql,SAME,,"[('f3',)]"
postgresql,postgresql,"SELECT '{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}'::jsonb#>array['f2','1']",jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT '{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}'::jsonb#>>array['f4','f6']",jsonb.sql,SAME,,"[('stringy',)]"
postgresql,postgresql,"SELECT '{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""stringy""}}'::jsonb#>>array['f2']",jsonb.sql,SAME,,"[('{""f3"": 1}',)]"
postgresql,postgresql,"SELECT '{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}'::jsonb#>>array['f2','0']",jsonb.sql,SAME,,"[('f3',)]"
postgresql,postgresql,"SELECT '{""f2"":[""f3"",1],""f4"":{""f5"":99,""f6"":""stringy""}}'::jsonb#>>array['f2','1']",jsonb.sql,SAME,,"[('1',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #> '{}'",jsonb.sql,SAME,,"[({'a': {'b': {'c': 'foo'}}},)]"
postgresql,postgresql,"select '[1,2,3]'::jsonb #> '{}'",jsonb.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"select '""foo""'::jsonb #> '{}'",jsonb.sql,SAME,,"[('foo',)]"
postgresql,postgresql,select '42'::jsonb #> '{}',jsonb.sql,SAME,,"[(42,)]"
postgresql,postgresql,select 'null'::jsonb #> '{}',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #> array['a']",jsonb.sql,SAME,,"[({'b': {'c': 'foo'}},)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #> array['a', null]",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #> array['a', '']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #> array['a','b']",jsonb.sql,SAME,,"[({'c': 'foo'},)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #> array['a','b','c']",jsonb.sql,SAME,,"[('foo',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #> array['a','b','c','d']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #> array['a','z','c']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb #> array['a','1','b']",jsonb.sql,SAME,,"[('cc',)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb #> array['a','z','b']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb #> array['1','b']",jsonb.sql,SAME,,"[('cc',)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb #> array['z','b']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": null}]'::jsonb #> array['1','b']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::jsonb #> array['z']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,select '42'::jsonb #> array['f2'],jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,select '42'::jsonb #> array['0'],jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #>> '{}'",jsonb.sql,SAME,,"[('{""a"": {""b"": {""c"": ""foo""}}}',)]"
postgresql,postgresql,"select '[1,2,3]'::jsonb #>> '{}'",jsonb.sql,SAME,,"[('[1, 2, 3]',)]"
postgresql,postgresql,"select '""foo""'::jsonb #>> '{}'",jsonb.sql,SAME,,"[('foo',)]"
postgresql,postgresql,select '42'::jsonb #>> '{}',jsonb.sql,SAME,,"[('42',)]"
postgresql,postgresql,select 'null'::jsonb #>> '{}',jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #>> array['a']",jsonb.sql,SAME,,"[('{""b"": {""c"": ""foo""}}',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #>> array['a', null]",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #>> array['a', '']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #>> array['a','b']",jsonb.sql,SAME,,"[('{""c"": ""foo""}',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #>> array['a','b','c']",jsonb.sql,SAME,,"[('foo',)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #>> array['a','b','c','d']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": {""b"":{""c"": ""foo""}}}'::jsonb #>> array['a','z','c']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb #>> array['a','1','b']",jsonb.sql,SAME,,"[('cc',)]"
postgresql,postgresql,"select '{""a"": [{""b"": ""c""}, {""b"": ""cc""}]}'::jsonb #>> array['a','z','b']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb #>> array['1','b']",jsonb.sql,SAME,,"[('cc',)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": ""cc""}]'::jsonb #>> array['z','b']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '[{""b"": ""c""}, {""b"": null}]'::jsonb #>> array['1','b']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select '""foo""'::jsonb #>> array['z']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,select '42'::jsonb #>> array['f2'],jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,select '42'::jsonb #>> array['0'],jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsonb_array_elements('[1,true,[1,[2,3]],null,{""f1"":1,""f2"":[7,8,9]},false]')",jsonb.sql,SAME,,"[(1,), (True,), ([1, [2, 3]],), (None,), ({'f1': 1, 'f2': [7, 8, 9]},), (False,)]"
postgresql,postgresql,"SELECT * FROM jsonb_array_elements('[1,true,[1,[2,3]],null,{""f1"":1,""f2"":[7,8,9]},false]') q",jsonb.sql,SAME,,"[(1,), (True,), ([1, [2, 3]],), (None,), ({'f1': 1, 'f2': [7, 8, 9]},), (False,)]"
postgresql,postgresql,"SELECT jsonb_array_elements_text('[1,true,[1,[2,3]],null,{""f1"":1,""f2"":[7,8,9]},false,""stringy""]')",jsonb.sql,SAME,,"[('1',), ('true',), ('[1, [2, 3]]',), (None,), ('{""f1"": 1, ""f2"": [7, 8, 9]}',), ('false',), ('stringy',)]"
postgresql,postgresql,"SELECT * FROM jsonb_array_elements_text('[1,true,[1,[2,3]],null,{""f1"":1,""f2"":[7,8,9]},false,""stringy""]') q",jsonb.sql,SAME,,"[('1',), ('true',), ('[1, [2, 3]]',), (None,), ('{""f1"": 1, ""f2"": [7, 8, 9]}',), ('false',), ('stringy',)]"
postgresql,postgresql,"CREATE TYPE jbpop AS (a text, b int, c timestamp)",jsonb.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN jsb_int_not_null  AS int     NOT NULL,jsonb.sql,SAME,,[]
postgresql,postgresql,"CREATE DOMAIN jsb_int_array_1d  AS int[]   CHECK(array_length(VALUE, 1) = 3)",jsonb.sql,SAME,,[]
postgresql,postgresql,"CREATE DOMAIN jsb_int_array_2d  AS int[][] CHECK(array_length(VALUE, 2) = 3)",jsonb.sql,SAME,,[]
postgresql,postgresql,"create type jb_unordered_pair as (x int, y int)",jsonb.sql,SAME,,[]
postgresql,postgresql,create domain jb_ordered_pair as jb_unordered_pair check((value).x <= (value).y),jsonb.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE jsbrec AS ( 	i	int, 	ia	_int4, 	ia1	int[], 	ia2	int[][], 	ia3	int[][][], 	ia1d	jsb_int_array_1d, 	ia2d	jsb_int_array_2d, 	t	text, 	ta	text[], 	c	char(10), 	ca	char(10)[], 	ts	timestamp, 	js	json, 	jsb	jsonb, 	jsa	json[], 	rec	jbpop, 	reca	jbpop[] )",jsonb.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE jsbrec_i_not_null AS ( 	i	jsb_int_not_null ),jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM jsonb_populate_record(NULL::jbpop,'{""a"":""blurfl"",""x"":43.2}') q",jsonb.sql,SAME,,"[('blurfl', None, None)]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_record(row('x',3,'2012-12-31 15:30:56')::jbpop,'{""a"":""blurfl"",""x"":43.2}') q",jsonb.sql,SAME,,"[('blurfl', 3, datetime.datetime(2012, 12, 31, 15, 30, 56))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_record(NULL::jbpop,'{""a"":""blurfl"",""x"":43.2}') q",jsonb.sql,SAME,,"[('blurfl', None, None)]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_record(row('x',3,'2012-12-31 15:30:56')::jbpop,'{""a"":""blurfl"",""x"":43.2}') q",jsonb.sql,SAME,,"[('blurfl', 3, datetime.datetime(2012, 12, 31, 15, 30, 56))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_record(NULL::jbpop,'{""a"":[100,200,false],""x"":43.2}') q",jsonb.sql,SAME,,"[('[100, 200, false]', None, None)]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_record(row('x',3,'2012-12-31 15:30:56')::jbpop,'{""a"":[100,200,false],""x"":43.2}') q",jsonb.sql,SAME,,"[('[100, 200, false]', 3, datetime.datetime(2012, 12, 31, 15, 30, 56))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_record(row('x',3,'2012-12-31 15:30:56')::jbpop, '{}') q",jsonb.sql,SAME,,"[('x', 3, datetime.datetime(2012, 12, 31, 15, 30, 56))]"
postgresql,postgresql,"SELECT i FROM jsonb_populate_record(NULL::jsbrec_i_not_null, '{""i"": 12345}') q",jsonb.sql,SAME,,"[(12345,)]"
postgresql,postgresql,"SELECT ia FROM jsonb_populate_record(NULL::jsbrec, '{""ia"": null}') q",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ia FROM jsonb_populate_record(NULL::jsbrec, '{""ia"": [1, ""2"", null, 4]}') q",jsonb.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"SELECT ia FROM jsonb_populate_record(NULL::jsbrec, '{""ia"": [[1, 2], [3, 4]]}') q",jsonb.sql,SAME,,"[([[1, 2], [3, 4]],)]"
postgresql,postgresql,"SELECT ia FROM jsonb_populate_record(NULL::jsbrec, '{""ia"": ""{1,2,3}""}') q",jsonb.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"SELECT ia1 FROM jsonb_populate_record(NULL::jsbrec, '{""ia1"": null}') q",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ia1 FROM jsonb_populate_record(NULL::jsbrec, '{""ia1"": [1, ""2"", null, 4]}') q",jsonb.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"SELECT ia1 FROM jsonb_populate_record(NULL::jsbrec, '{""ia1"": [[1, 2, 3]]}') q",jsonb.sql,SAME,,"[([[1, 2, 3]],)]"
postgresql,postgresql,"SELECT ia1d FROM jsonb_populate_record(NULL::jsbrec, '{""ia1d"": null}') q",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ia1d FROM jsonb_populate_record(NULL::jsbrec, '{""ia1d"": [1, ""2"", null]}') q",jsonb.sql,SAME,,"[([1, 2, None],)]"
postgresql,postgresql,"SELECT ia2 FROM jsonb_populate_record(NULL::jsbrec, '{""ia2"": [1, ""2"", null, 4]}') q",jsonb.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"SELECT ia2 FROM jsonb_populate_record(NULL::jsbrec, '{""ia2"": [[1, 2], [null, 4]]}') q",jsonb.sql,SAME,,"[([[1, 2], [None, 4]],)]"
postgresql,postgresql,"SELECT ia2 FROM jsonb_populate_record(NULL::jsbrec, '{""ia2"": [[], []]}') q",jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT ia2d FROM jsonb_populate_record(NULL::jsbrec, '{""ia2d"": [[1, ""2"", 3], [null, 5, 6]]}') q",jsonb.sql,SAME,,"[([[1, 2, 3], [None, 5, 6]],)]"
postgresql,postgresql,"SELECT ia3 FROM jsonb_populate_record(NULL::jsbrec, '{""ia3"": [1, ""2"", null, 4]}') q",jsonb.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"SELECT ia3 FROM jsonb_populate_record(NULL::jsbrec, '{""ia3"": [[1, 2], [null, 4]]}') q",jsonb.sql,SAME,,"[([[1, 2], [None, 4]],)]"
postgresql,postgresql,"SELECT ia3 FROM jsonb_populate_record(NULL::jsbrec, '{""ia3"": [ [[], []], [[], []], [[], []] ]}') q",jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT ia3 FROM jsonb_populate_record(NULL::jsbrec, '{""ia3"": [ [[1, 2]], [[3, 4]] ]}') q",jsonb.sql,SAME,,"[([[[1, 2]], [[3, 4]]],)]"
postgresql,postgresql,"SELECT ia3 FROM jsonb_populate_record(NULL::jsbrec, '{""ia3"": [ [[1, 2], [3, 4]], [[5, 6], [7, 8]] ]}') q",jsonb.sql,SAME,,"[([[[1, 2], [3, 4]], [[5, 6], [7, 8]]],)]"
postgresql,postgresql,"SELECT ta FROM jsonb_populate_record(NULL::jsbrec, '{""ta"": null}') q",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ta FROM jsonb_populate_record(NULL::jsbrec, '{""ta"": [1, ""2"", null, 4]}') q",jsonb.sql,SAME,,"[(['1', '2', None, '4'],)]"
postgresql,postgresql,"SELECT c FROM jsonb_populate_record(NULL::jsbrec, '{""c"": null}') q",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT c FROM jsonb_populate_record(NULL::jsbrec, '{""c"": ""aaa""}') q",jsonb.sql,SAME,,"[('aaa       ',)]"
postgresql,postgresql,"SELECT c FROM jsonb_populate_record(NULL::jsbrec, '{""c"": ""aaaaaaaaaa""}') q",jsonb.sql,SAME,,"[('aaaaaaaaaa',)]"
postgresql,postgresql,"SELECT ca FROM jsonb_populate_record(NULL::jsbrec, '{""ca"": null}') q",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ca FROM jsonb_populate_record(NULL::jsbrec, '{""ca"": [1, ""2"", null, 4]}') q",jsonb.sql,SAME,,"[(['1         ', '2         ', None, '4         '],)]"
postgresql,postgresql,"SELECT js FROM jsonb_populate_record(NULL::jsbrec, '{""js"": null}') q",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT js FROM jsonb_populate_record(NULL::jsbrec, '{""js"": true}') q",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT js FROM jsonb_populate_record(NULL::jsbrec, '{""js"": 123.45}') q",jsonb.sql,SAME,,"[(123.45,)]"
postgresql,postgresql,"SELECT js FROM jsonb_populate_record(NULL::jsbrec, '{""js"": ""123.45""}') q",jsonb.sql,SAME,,"[('123.45',)]"
postgresql,postgresql,"SELECT js FROM jsonb_populate_record(NULL::jsbrec, '{""js"": ""abc""}') q",jsonb.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT js FROM jsonb_populate_record(NULL::jsbrec, '{""js"": [123, ""123"", null, {""key"": ""value""}]}') q",jsonb.sql,SAME,,"[([123, '123', None, {'key': 'value'}],)]"
postgresql,postgresql,"SELECT js FROM jsonb_populate_record(NULL::jsbrec, '{""js"": {""a"": ""bbb"", ""b"": null, ""c"": 123.45}}') q",jsonb.sql,SAME,,"[({'a': 'bbb', 'b': None, 'c': 123.45},)]"
postgresql,postgresql,"SELECT jsb FROM jsonb_populate_record(NULL::jsbrec, '{""jsb"": null}') q",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsb FROM jsonb_populate_record(NULL::jsbrec, '{""jsb"": true}') q",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsb FROM jsonb_populate_record(NULL::jsbrec, '{""jsb"": 123.45}') q",jsonb.sql,SAME,,"[(123.45,)]"
postgresql,postgresql,"SELECT jsb FROM jsonb_populate_record(NULL::jsbrec, '{""jsb"": ""123.45""}') q",jsonb.sql,SAME,,"[('123.45',)]"
postgresql,postgresql,"SELECT jsb FROM jsonb_populate_record(NULL::jsbrec, '{""jsb"": ""abc""}') q",jsonb.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT jsb FROM jsonb_populate_record(NULL::jsbrec, '{""jsb"": [123, ""123"", null, {""key"": ""value""}]}') q",jsonb.sql,SAME,,"[([123, '123', None, {'key': 'value'}],)]"
postgresql,postgresql,"SELECT jsb FROM jsonb_populate_record(NULL::jsbrec, '{""jsb"": {""a"": ""bbb"", ""b"": null, ""c"": 123.45}}') q",jsonb.sql,SAME,,"[({'a': 'bbb', 'b': None, 'c': 123.45},)]"
postgresql,postgresql,"SELECT jsa FROM jsonb_populate_record(NULL::jsbrec, '{""jsa"": null}') q",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsa FROM jsonb_populate_record(NULL::jsbrec, '{""jsa"": [1, ""2"", null, 4]}') q",jsonb.sql,SAME,,"[([1, '2', None, 4],)]"
postgresql,postgresql,"SELECT jsa FROM jsonb_populate_record(NULL::jsbrec, '{""jsa"": [""aaa"", null, [1, 2, ""3"", {}], { ""k"" : ""v"" }]}') q",jsonb.sql,SAME,,"[(['aaa', None, [1, 2, '3', {}], {'k': 'v'}],)]"
postgresql,postgresql,"SELECT rec FROM jsonb_populate_record(NULL::jsbrec, '{""rec"": {""a"": ""abc"", ""c"": ""01.02.2003"", ""x"": 43.2}}') q",jsonb.sql,SAME,,"[('(abc,,""2003-01-02 00:00:00"")',)]"
postgresql,postgresql,"SELECT rec FROM jsonb_populate_record(NULL::jsbrec, '{""rec"": ""(abc,42,01.02.2003)""}') q",jsonb.sql,SAME,,"[('(abc,42,""2003-01-02 00:00:00"")',)]"
postgresql,postgresql,"SELECT reca FROM jsonb_populate_record(NULL::jsbrec, '{""reca"": [{""a"": ""abc"", ""b"": 456}, null, {""c"": ""01.02.2003"", ""x"": 43.2}]}') q",jsonb.sql,SAME,,"[('{""(abc,456,)"",NULL,""(,,\\""2003-01-02 00:00:00\\"")""}',)]"
postgresql,postgresql,"SELECT reca FROM jsonb_populate_record(NULL::jsbrec, '{""reca"": [""(abc,42,01.02.2003)""]}') q",jsonb.sql,SAME,,"[('{""(abc,42,\\""2003-01-02 00:00:00\\"")""}',)]"
postgresql,postgresql,"SELECT reca FROM jsonb_populate_record(NULL::jsbrec, '{""reca"": ""{\""(abc,42,01.02.2003)\""}""}') q",jsonb.sql,SAME,,"[('{""(abc,42,\\""2003-01-02 00:00:00\\"")""}',)]"
postgresql,postgresql,"SELECT rec FROM jsonb_populate_record( 	row(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 		row('x',3,'2012-12-31 15:30:56')::jbpop,NULL)::jsbrec, 	'{""rec"": {""a"": ""abc"", ""c"": ""01.02.2003"", ""x"": 43.2}}' ) q",jsonb.sql,SAME,,"[('(abc,3,""2003-01-02 00:00:00"")',)]"
postgresql,postgresql,create type jsb_char2 as (a char(2)),jsonb.sql,SAME,,[]
postgresql,postgresql,"select * from jsonb_populate_record(NULL::jsb_char2, '{""a"": ""aa""}') q",jsonb.sql,SAME,,"[('aa',)]"
postgresql,postgresql,create type jsb_ia as (a int[]),jsonb.sql,SAME,,[]
postgresql,postgresql,create type jsb_ia2 as (a int[][]),jsonb.sql,SAME,,[]
postgresql,postgresql,"select * from jsonb_populate_record(NULL::jsb_ia, '{""a"": [1, 2]}') q",jsonb.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,"select * from jsonb_populate_record(NULL::jsb_ia2, '{""a"": [[1, 0], [2, 3]]}') q",jsonb.sql,SAME,,"[([[1, 0], [2, 3]],)]"
postgresql,postgresql,create domain jsb_i_not_null as int not null,jsonb.sql,SAME,,[]
postgresql,postgresql,create domain jsb_i_gt_1 as int check (value > 1),jsonb.sql,SAME,,[]
postgresql,postgresql,create type jsb_i_not_null_rec as (a jsb_i_not_null),jsonb.sql,SAME,,[]
postgresql,postgresql,create type jsb_i_gt_1_rec as (a jsb_i_gt_1),jsonb.sql,SAME,,[]
postgresql,postgresql,"select * from jsonb_populate_record(NULL::jsb_i_not_null_rec, '{""a"": 1}') q",jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select * from jsonb_populate_record(NULL::jsb_i_gt_1_rec, '{""a"": 2}') q",jsonb.sql,SAME,,"[(2,)]"
postgresql,postgresql,"drop type jsb_ia, jsb_ia2, jsb_char2, jsb_i_not_null_rec, jsb_i_gt_1_rec",jsonb.sql,SAME,,[]
postgresql,postgresql,"drop domain jsb_i_not_null, jsb_i_gt_1",jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT jsonb_populate_record(row(1,2), '{""f1"": 0, ""f2"": 1}')",jsonb.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,"SELECT * FROM   jsonb_populate_record(null::record, '{""x"": 776}') AS (x int, y int)",jsonb.sql,SAME,,"[(776, None)]"
postgresql,postgresql,"SELECT jsonb_populate_record(null::jb_ordered_pair, '{""x"": 0, ""y"": 1}')",jsonb.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,"SELECT jsonb_populate_record(row(1,2)::jb_ordered_pair, '{""x"": 0}')",jsonb.sql,SAME,,"[('(0,2)',)]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_recordset(NULL::jbpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",jsonb.sql,SAME,,"[('blurfl', None, None), (None, 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_recordset(row('def',99,NULL)::jbpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",jsonb.sql,SAME,,"[('blurfl', 99, None), ('def', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_recordset(NULL::jbpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",jsonb.sql,SAME,,"[('blurfl', None, None), (None, 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_recordset(row('def',99,NULL)::jbpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",jsonb.sql,SAME,,"[('blurfl', 99, None), ('def', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_recordset(row('def',99,NULL)::jbpop,'[{""a"":[100,200,300],""x"":43.2},{""a"":{""z"":true},""b"":3,""c"":""2012-01-20 10:42:53""}]') q",jsonb.sql,SAME,,"[('[100, 200, 300]', 99, None), ('{""z"": true}', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_recordset(NULL::jbpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",jsonb.sql,SAME,,"[('blurfl', None, None), (None, 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_recordset(row('def',99,NULL)::jbpop,'[{""a"":""blurfl"",""x"":43.2},{""b"":3,""c"":""2012-01-20 10:42:53""}]') q",jsonb.sql,SAME,,"[('blurfl', 99, None), ('def', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"SELECT * FROM jsonb_populate_recordset(row('def',99,NULL)::jbpop,'[{""a"":[100,200,300],""x"":43.2},{""a"":{""z"":true},""b"":3,""c"":""2012-01-20 10:42:53""}]') q",jsonb.sql,SAME,,"[('[100, 200, 300]', 99, None), ('{""z"": true}', 3, datetime.datetime(2012, 1, 20, 10, 42, 53))]"
postgresql,postgresql,"SELECT jsonb_populate_recordset(row(1,2), '[{""f1"": 0, ""f2"": 1}]')",jsonb.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,"SELECT i, jsonb_populate_recordset(row(i,50), '[{""f1"":""42""},{""f2"":""43""}]') FROM (VALUES (1),(2)) v(i)",jsonb.sql,SAME,,"[(1, '(42,50)'), (1, '(1,43)'), (2, '(42,50)'), (2, '(2,43)')]"
postgresql,postgresql,"SELECT * FROM   jsonb_populate_recordset(null::record, '[{""x"": 776}]') AS (x int, y int)",jsonb.sql,SAME,,"[(776, None)]"
postgresql,postgresql,"SELECT jsonb_populate_recordset(row(1,2), '[]')",jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM jsonb_populate_recordset(NULL::jbpop,'[]') q",jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM   jsonb_populate_recordset(null::record, '[]') AS (x int, y int)",jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT jsonb_populate_recordset(null::jb_ordered_pair, '[{""x"": 0, ""y"": 1}]')",jsonb.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,"SELECT jsonb_populate_recordset(row(1,2)::jb_ordered_pair, '[{""x"": 0}, {""y"": 3}]')",jsonb.sql,SAME,,"[('(0,2)',), ('(1,3)',)]"
postgresql,postgresql,"select * from jsonb_to_record('{""a"":1,""b"":""foo"",""c"":""bar""}')     as x(a int, b text, d text)",jsonb.sql,SAME,,"[(1, 'foo', None)]"
postgresql,postgresql,"select * from jsonb_to_recordset('[{""a"":1,""b"":""foo"",""d"":false},{""a"":2,""b"":""bar"",""c"":true}]')     as x(a int, b text, c boolean)",jsonb.sql,SAME,,"[(1, 'foo', None), (2, 'bar', True)]"
postgresql,postgresql,"select *, c is null as c_is_null from jsonb_to_record('{""a"":1, ""b"":{""c"":16, ""d"":2}, ""x"":8, ""ca"": [""1 2"", 3], ""ia"": [[1,2],[3,4]], ""r"": {""a"": ""aaa"", ""b"": 123}}'::jsonb)     as t(a int, b jsonb, c text, x int, ca char(5)[], ia int[][], r jbpop)",jsonb.sql,SAME,,"[(1, {'c': 16, 'd': 2}, None, 8, ['1 2  ', '3    '], [[1, 2], [3, 4]], '(aaa,123,)', True)]"
postgresql,postgresql,"select *, c is null as c_is_null from jsonb_to_recordset('[{""a"":1, ""b"":{""c"":16, ""d"":2}, ""x"":8}]'::jsonb)     as t(a int, b jsonb, c text, x int)",jsonb.sql,SAME,,"[(1, {'c': 16, 'd': 2}, None, 8, True)]"
postgresql,postgresql,"select * from jsonb_to_record('{""ia"": null}') as x(ia _int4)",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select * from jsonb_to_record('{""ia"": [1, ""2"", null, 4]}') as x(ia _int4)",jsonb.sql,SAME,,"[([1, 2, None, 4],)]"
postgresql,postgresql,"select * from jsonb_to_record('{""ia"": [[1, 2], [3, 4]]}') as x(ia _int4)",jsonb.sql,SAME,,"[([[1, 2], [3, 4]],)]"
postgresql,postgresql,"select * from jsonb_to_record('{""ia2"": [1, 2, 3]}') as x(ia2 int[][])",jsonb.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"select * from jsonb_to_record('{""ia2"": [[1, 2], [3, 4]]}') as x(ia2 int4[][])",jsonb.sql,SAME,,"[([[1, 2], [3, 4]],)]"
postgresql,postgresql,"select * from jsonb_to_record('{""ia2"": [[[1], [2], [3]]]}') as x(ia2 int4[][])",jsonb.sql,SAME,,"[([[[1], [2], [3]]],)]"
postgresql,postgresql,"select * from jsonb_to_record('{""out"": {""key"": 1}}') as x(out json)",jsonb.sql,SAME,,"[({'key': 1},)]"
postgresql,postgresql,"select * from jsonb_to_record('{""out"": [{""key"": 1}]}') as x(out json)",jsonb.sql,SAME,,"[([{'key': 1}],)]"
postgresql,postgresql,"select * from jsonb_to_record('{""out"": ""{\""key\"": 1}""}') as x(out json)",jsonb.sql,SAME,,"[('{""key"": 1}',)]"
postgresql,postgresql,"select * from jsonb_to_record('{""out"": {""key"": 1}}') as x(out jsonb)",jsonb.sql,SAME,,"[({'key': 1},)]"
postgresql,postgresql,"select * from jsonb_to_record('{""out"": [{""key"": 1}]}') as x(out jsonb)",jsonb.sql,SAME,,"[([{'key': 1}],)]"
postgresql,postgresql,"select * from jsonb_to_record('{""out"": ""{\""key\"": 1}""}') as x(out jsonb)",jsonb.sql,SAME,,"[('{""key"": 1}',)]"
postgresql,postgresql,CREATE TEMP TABLE jsbpoptest (js jsonb),jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT (jsonb_populate_record(NULL::jsbrec, js)).* FROM jsbpoptest",jsonb.sql,SAME,,"[(None, None, None, None, None, None, None, None, None, None, None, None, None, None, [1, '2', None, 4], '(abc,,""2003-01-02 00:00:00"")', '{""(abc,456,)"",NULL,""(,,\\""2003-01-02 00:00:00\\"")""}'), (None, None, None, None, None, None, None, None, None, None, None, None, None, None, [1, '2', None, 4], '(abc,,""2003-01-02 00:00:00"")', '{""(abc,456,)"",NULL,""(,,\\""2003-01-02 00:00:00\\"")""}'), (None, None, None, None, None, None, None, None, None, None, None, None, None, None, [1, '2', None, 4], '(abc,,""2003-01-02 00:00:00"")', '{""(abc,456,)"",NULL,""(,,\\""2003-01-02 00:00:00\\"")""}')]"
postgresql,postgresql,DROP TYPE jsbrec,jsonb.sql,SAME,,[]
postgresql,postgresql,DROP TYPE jsbrec_i_not_null,jsonb.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN jsb_int_not_null,jsonb.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN jsb_int_array_1d,jsonb.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN jsb_int_array_2d,jsonb.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN jb_ordered_pair,jsonb.sql,SAME,,[]
postgresql,postgresql,DROP TYPE jb_unordered_pair,jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""wait"":null}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""wait"":""CC""}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""wait"":""CC"", ""public"":true}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""age"":25}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""age"":25.0}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j ? 'public',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j ? 'bar',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j ?| ARRAY['public','disabled']",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j ?& ARRAY['public','disabled']",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '""CC"" == $.wait'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == ""CC"" && true == $.public'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25.0',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.bar)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) || exists($.disabled)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) && exists($.disabled)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (""CC"" == @)'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.wait == ""CC"" && true == @.public)'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.age ? (@ == 25)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.age == 25.0)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.public',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.bar',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE INDEX jidx ON testjsonb USING gin (j),jsonb.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""wait"":null}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""wait"":""CC""}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""wait"":""CC"", ""public"":true}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""age"":25}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""age"":25.0}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""array"":[""foo""]}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""array"":[""bar""]}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @> '{}',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j ? 'public',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j ? 'bar',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j ?| ARRAY['public','disabled']",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j ?& ARRAY['public','disabled']",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null',jsonb.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on testjsonb',), ('        Recheck Cond: (j @@ \'($.""wait"" == null)\'::jsonpath)',), ('        ->  Bitmap Index Scan on jidx',), ('              Index Cond: (j @@ \'($.""wait"" == null)\'::jsonpath)',)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.wait == null))',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.wait ? (@ == null))',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '""CC"" == $.wait'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == ""CC"" && true == $.public'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25.0',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == ""foo""'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == ""bar""'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.array[*] == ""bar""))'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array ? (@[*] == ""bar""))'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array[*] ? (@ == ""bar""))'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.bar)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) || exists($.disabled)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.public) && exists($.disabled)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)',jsonb.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on testjsonb',), ('        Recheck Cond: (j @? \'$.""wait""?(@ == null)\'::jsonpath)',), ('        ->  Bitmap Index Scan on jidx',), ('              Index Cond: (j @? \'$.""wait""?(@ == null)\'::jsonpath)',)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (""CC"" == @)'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.wait == ""CC"" && true == @.public)'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.age ? (@ == 25)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.age == 25.0)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.array[*] == ""bar"")'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$.array ? (@[*] == ""bar"")'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$.array[*] ? (@ == ""bar"")'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.public',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.bar',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE INDEX jidx_array ON testjsonb USING gin((j->'array')),jsonb.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) from testjsonb  WHERE j->'array' ? 'bar',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) from testjsonb  WHERE j->'array' ? '5'::text,jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) from testjsonb  WHERE j->'array' @> '5'::jsonb,jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,RESET enable_seqscan,jsonb.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM (SELECT (jsonb_each(j)).key FROM testjsonb) AS wow,jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT key, count(*) FROM (SELECT (jsonb_each(j)).key FROM testjsonb) AS wow GROUP BY key ORDER BY count DESC, key",jsonb.sql,SAME,,[]
postgresql,postgresql,SELECT count(distinct j) FROM testjsonb,jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SET enable_hashagg = off,jsonb.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM (SELECT j FROM (SELECT * FROM testjsonb UNION ALL SELECT * FROM testjsonb) js GROUP BY j) js2,jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SET enable_hashagg = on,jsonb.sql,SAME,,[]
postgresql,postgresql,SET enable_sort = off,jsonb.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM (SELECT j FROM (SELECT * FROM testjsonb UNION ALL SELECT * FROM testjsonb) js GROUP BY j) js2,jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT distinct * FROM (values (jsonb '{}' || ''::text),('{}')) v(j)",jsonb.sql,SAME,,"[('{}',)]"
postgresql,postgresql,SET enable_sort = on,jsonb.sql,SAME,,[]
postgresql,postgresql,RESET enable_hashagg,jsonb.sql,SAME,,[]
postgresql,postgresql,RESET enable_sort,jsonb.sql,SAME,,[]
postgresql,postgresql,DROP INDEX jidx,jsonb.sql,SAME,,[]
postgresql,postgresql,DROP INDEX jidx_array,jsonb.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX jidx ON testjsonb USING btree (j),jsonb.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j > '{""p"":1}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j = '{""pos"":98, ""line"":371, ""node"":""CBA"", ""indexed"":true}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,DROP INDEX jidx,jsonb.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX jidx ON testjsonb USING gin (j jsonb_path_ops),jsonb.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = off,jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""wait"":null}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""wait"":""CC""}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""wait"":""CC"", ""public"":true}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""age"":25}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @> '{""age"":25.0}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @> '{}',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == null',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.wait == null))',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.wait ? (@ == null))',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '""CC"" == $.wait'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '$.wait == ""CC"" && true == $.public'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ '$.age == 25.0',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == ""foo""'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ '$.array[*] == ""bar""'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ 'exists($ ? (@.array[*] == ""bar""))'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array ? (@[*] == ""bar""))'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @@ 'exists($.array[*] ? (@ == ""bar""))'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @@ 'exists($)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)',jsonb.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on testjsonb',), ('        Recheck Cond: (j @? \'$.""wait""?(@ == null)\'::jsonpath)',), ('        ->  Bitmap Index Scan on jidx',), ('              Index Cond: (j @? \'$.""wait""?(@ == null)\'::jsonpath)',)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (@ == null)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$.wait ? (""CC"" == @)'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.wait == ""CC"" && true == @.public)'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.age ? (@ == 25)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.age == 25.0)',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$ ? (@.array[*] == ""bar"")'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$.array ? (@[*] == ""bar"")'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM testjsonb WHERE j @? '$.array[*] ? (@ == ""bar"")'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.public',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM testjsonb WHERE j @? '$.bar',jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,RESET enable_seqscan,jsonb.sql,SAME,,[]
postgresql,postgresql,DROP INDEX jidx,jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT '{""ff"":{""a"":12,""b"":16}}'::jsonb",jsonb.sql,SAME,,"[({'ff': {'a': 12, 'b': 16}},)]"
postgresql,postgresql,"SELECT '{""ff"":{""a"":12,""b"":16},""qq"":123}'::jsonb",jsonb.sql,SAME,,"[({'ff': {'a': 12, 'b': 16}, 'qq': 123},)]"
postgresql,postgresql,"SELECT '{""aa"":[""a"",""aaa""],""qq"":{""a"":12,""b"":16,""c"":[""c1"",""c2""],""d"":{""d1"":""d1"",""d2"":""d2"",""d1"":""d3""}}}'::jsonb",jsonb.sql,SAME,,"[({'aa': ['a', 'aaa'], 'qq': {'a': 12, 'b': 16, 'c': ['c1', 'c2'], 'd': {'d1': 'd3', 'd2': 'd2'}}},)]"
postgresql,postgresql,"SELECT '{""aa"":[""a"",""aaa""],""qq"":{""a"":""12"",""b"":""16"",""c"":[""c1"",""c2""],""d"":{""d1"":""d1"",""d2"":""d2""}}}'::jsonb",jsonb.sql,SAME,,"[({'aa': ['a', 'aaa'], 'qq': {'a': '12', 'b': '16', 'c': ['c1', 'c2'], 'd': {'d1': 'd1', 'd2': 'd2'}}},)]"
postgresql,postgresql,"SELECT '{""aa"":[""a"",""aaa""],""qq"":{""a"":""12"",""b"":""16"",""c"":[""c1"",""c2"",[""c3""],{""c4"":4}],""d"":{""d1"":""d1"",""d2"":""d2""}}}'::jsonb",jsonb.sql,SAME,,"[({'aa': ['a', 'aaa'], 'qq': {'a': '12', 'b': '16', 'c': ['c1', 'c2', ['c3'], {'c4': 4}], 'd': {'d1': 'd1', 'd2': 'd2'}}},)]"
postgresql,postgresql,"SELECT '{""ff"":[""a"",""aaa""]}'::jsonb",jsonb.sql,SAME,,"[({'ff': ['a', 'aaa']},)]"
postgresql,postgresql,"SELECT   '{""ff"":{""a"":12,""b"":16},""qq"":123,""x"":[1,2],""Y"":null}'::jsonb -> 'ff',   '{""ff"":{""a"":12,""b"":16},""qq"":123,""x"":[1,2],""Y"":null}'::jsonb -> 'qq',   ('{""ff"":{""a"":12,""b"":16},""qq"":123,""x"":[1,2],""Y"":null}'::jsonb -> 'Y') IS NULL AS f,   ('{""ff"":{""a"":12,""b"":16},""qq"":123,""x"":[1,2],""Y"":null}'::jsonb ->> 'Y') IS NULL AS t,    '{""ff"":{""a"":12,""b"":16},""qq"":123,""x"":[1,2],""Y"":null}'::jsonb -> 'x'",jsonb.sql,SAME,,"[({'a': 12, 'b': 16}, 123, False, True, [1, 2])]"
postgresql,postgresql,"SELECT '{""a"":[1,2],""c"":""b""}'::jsonb @> '{""a"":[1,2]}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":[2,1],""c"":""b""}'::jsonb @> '{""a"":[1,2]}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":{""1"":2},""c"":""b""}'::jsonb @> '{""a"":[1,2]}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":{""2"":1},""c"":""b""}'::jsonb @> '{""a"":[1,2]}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":{""1"":2},""c"":""b""}'::jsonb @> '{""a"":{""1"":2}}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":{""2"":1},""c"":""b""}'::jsonb @> '{""a"":{""1"":2}}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '[""a"",""b""]'::jsonb @> '[""a"",""b"",""c"",""b""]'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",""b""]'::jsonb @> '[""a"",""b""]'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2]]'::jsonb @> '[""a"",[1,2]]'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2]]'::jsonb @> '[""b"",[1,2]]'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":[1,2],""c"":""b""}'::jsonb @> '{""a"":[1]}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":[1,2],""c"":""b""}'::jsonb @> '{""a"":[2]}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":[1,2],""c"":""b""}'::jsonb @> '{""a"":[3]}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":[1,2,{""c"":3,""x"":4}],""c"":""b""}'::jsonb @> '{""a"":[{""c"":3}]}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":[1,2,{""c"":3,""x"":4}],""c"":""b""}'::jsonb @> '{""a"":[{""x"":4}]}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""a"":[1,2,{""c"":3,""x"":4}],""c"":""b""}'::jsonb @> '{""a"":[{""x"":4},3]}'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{""a"":[1,2,{""c"":3,""x"":4}],""c"":""b""}'::jsonb @> '{""a"":[{""x"":4},1]}'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,create temp table nestjsonb (j jsonb),jsonb.sql,SAME,,[]
postgresql,postgresql,create index on nestjsonb using gin(j jsonb_path_ops),jsonb.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan = on,jsonb.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan = off,jsonb.sql,SAME,,[]
postgresql,postgresql,"select * from nestjsonb where j @> '{""a"":[[{""x"":2}]]}'::jsonb",jsonb.sql,SAME,,"[({'a': [['b', {'x': 1}], ['b', {'x': 2}]], 'c': 3},)]"
postgresql,postgresql,"select * from nestjsonb where j @> '{""c"":3}'",jsonb.sql,SAME,,"[({'a': [['b', {'x': 1}], ['b', {'x': 2}]], 'c': 3},)]"
postgresql,postgresql,select * from nestjsonb where j @> '[[14]]',jsonb.sql,SAME,,"[([[14, 2, 3]],), ([1, [14, 2, 3]],)]"
postgresql,postgresql,set enable_seqscan = off,jsonb.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan = on,jsonb.sql,SAME,,[]
postgresql,postgresql,"select * from nestjsonb where j @> '{""a"":[[{""x"":2}]]}'::jsonb",jsonb.sql,SAME,,"[({'a': [['b', {'x': 1}], ['b', {'x': 2}]], 'c': 3},)]"
postgresql,postgresql,"select * from nestjsonb where j @> '{""c"":3}'",jsonb.sql,SAME,,"[({'a': [['b', {'x': 1}], ['b', {'x': 2}]], 'c': 3},)]"
postgresql,postgresql,select * from nestjsonb where j @> '[[14]]',jsonb.sql,SAME,,"[([[14, 2, 3]],), ([1, [14, 2, 3]],)]"
postgresql,postgresql,reset enable_seqscan,jsonb.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,jsonb.sql,SAME,,[]
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb -> 'n'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb -> 'a'",jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb -> 'b'",jsonb.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb -> 'c'",jsonb.sql,SAME,,"[({'1': 2},)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb -> 'd'",jsonb.sql,SAME,,"[({'1': [2, 3]},)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb -> 'd' -> '1'",jsonb.sql,SAME,,"[([2, 3],)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb -> 'e'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb -> 0",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> 0",jsonb.sql,SAME,,"[('a',)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> 1",jsonb.sql,SAME,,"[('b',)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> 2",jsonb.sql,SAME,,"[('c',)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> 3",jsonb.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> 3 -> 1",jsonb.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> 4",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> 5",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> -1",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> -5",jsonb.sql,SAME,,"[('a',)]"
postgresql,postgresql,"SELECT '[""a"",""b"",""c"",[1,2],null]'::jsonb -> -6",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{0}'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{a}'",jsonb.sql,SAME,,"[('b',)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{c}'",jsonb.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{c,0}'",jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{c,1}'",jsonb.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{c,2}'",jsonb.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{c,3}'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{c,-1}'",jsonb.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{c,-3}'",jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT '{""a"":""b"",""c"":[1,2,3]}'::jsonb #> '{c,-4}'",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT '[0,1,2,[3,4],{""5"":""five""}]'::jsonb #> '{0}'",jsonb.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT '[0,1,2,[3,4],{""5"":""five""}]'::jsonb #> '{3}'",jsonb.sql,SAME,,"[([3, 4],)]"
postgresql,postgresql,"SELECT '[0,1,2,[3,4],{""5"":""five""}]'::jsonb #> '{4}'",jsonb.sql,SAME,,"[({'5': 'five'},)]"
postgresql,postgresql,"SELECT '[0,1,2,[3,4],{""5"":""five""}]'::jsonb #> '{4,5}'",jsonb.sql,SAME,,"[('five',)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb ? 'n'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb ? 'a'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb ? 'b'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb ? 'c'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb ? 'd'",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{""n"":null,""a"":1,""b"":[1,2],""c"":{""1"":2},""d"":{""1"":[2,3]}}'::jsonb ? 'e'",jsonb.sql,SAME,,"[(False,)]"
postgresql,postgresql,select jsonb_strip_nulls(null),jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,select jsonb_strip_nulls('1'),jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_strip_nulls('""a string""')",jsonb.sql,SAME,,"[('a string',)]"
postgresql,postgresql,select jsonb_strip_nulls('null'),jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb_strip_nulls('[1,2,null,3,4]')",jsonb.sql,SAME,,"[([1, 2, None, 3, 4],)]"
postgresql,postgresql,"select jsonb_strip_nulls('{""a"":1,""b"":null,""c"":[2,null,3],""d"":{""e"":4,""f"":null}}')",jsonb.sql,SAME,,"[({'a': 1, 'c': [2, None, 3], 'd': {'e': 4}},)]"
postgresql,postgresql,"select jsonb_strip_nulls('[1,{""a"":1,""b"":null,""c"":2},3]')",jsonb.sql,SAME,,"[([1, {'a': 1, 'c': 2}, 3],)]"
postgresql,postgresql,"select jsonb_strip_nulls('{""a"": {""b"": null, ""c"": null}, ""d"": {} }')",jsonb.sql,SAME,,"[({'a': {}, 'd': {}},)]"
postgresql,postgresql,"select jsonb_pretty('{""a"": ""test"", ""b"": [1, 2, 3], ""c"": ""test3"", ""d"":{""dd"": ""test4"", ""dd2"":{""ddd"": ""test5""}}}')",jsonb.sql,SAME,,"[('{\n    ""a"": ""test"",\n    ""b"": [\n        1,\n        2,\n        3\n    ],\n    ""c"": ""test3"",\n    ""d"": {\n        ""dd"": ""test4"",\n        ""dd2"": {\n            ""ddd"": ""test5""\n        }\n    }\n}',)]"
postgresql,postgresql,"select jsonb_pretty('[{""f1"":1,""f2"":null},2,null,[[{""x"":true},6,7],8],3]')",jsonb.sql,SAME,,"[('[\n    {\n        ""f1"": 1,\n        ""f2"": null\n    },\n    2,\n    null,\n    [\n        [\n            {\n                ""x"": true\n            },\n            6,\n            7\n        ],\n        8\n    ],\n    3\n]',)]"
postgresql,postgresql,"select jsonb_pretty('{""a"":[""b"", ""c""], ""d"": {""e"":""f""}}')",jsonb.sql,SAME,,"[('{\n    ""a"": [\n        ""b"",\n        ""c""\n    ],\n    ""d"": {\n        ""e"": ""f""\n    }\n}',)]"
postgresql,postgresql,"select jsonb_concat('{""d"": ""test"", ""a"": [1, 2]}', '{""g"": ""test2"", ""c"": {""c1"":1, ""c2"":2}}')",jsonb.sql,SAME,,"[({'a': [1, 2], 'c': {'c1': 1, 'c2': 2}, 'd': 'test', 'g': 'test2'},)]"
postgresql,postgresql,"select '{""aa"":1 , ""b"":2, ""cq"":3}'::jsonb || '{""cq"":""l"", ""b"":""g"", ""fg"":false}'",jsonb.sql,SAME,,"[({'b': 'g', 'aa': 1, 'cq': 'l', 'fg': False},)]"
postgresql,postgresql,"select '{""aa"":1 , ""b"":2, ""cq"":3}'::jsonb || '{""aq"":""l""}'",jsonb.sql,SAME,,"[({'b': 2, 'aa': 1, 'aq': 'l', 'cq': 3},)]"
postgresql,postgresql,"select '{""aa"":1 , ""b"":2, ""cq"":3}'::jsonb || '{""aa"":""l""}'",jsonb.sql,SAME,,"[({'b': 2, 'aa': 'l', 'cq': 3},)]"
postgresql,postgresql,"select '{""aa"":1 , ""b"":2, ""cq"":3}'::jsonb || '{}'",jsonb.sql,SAME,,"[({'b': 2, 'aa': 1, 'cq': 3},)]"
postgresql,postgresql,"select '[""a"", ""b""]'::jsonb || '[""c""]'",jsonb.sql,SAME,,"[(['a', 'b', 'c'],)]"
postgresql,postgresql,"select '[""a"", ""b""]'::jsonb || '[""c"", ""d""]'",jsonb.sql,SAME,,"[(['a', 'b', 'c', 'd'],)]"
postgresql,postgresql,"select '[""c""]' || '[""a"", ""b""]'::jsonb",jsonb.sql,SAME,,"[(['c', 'a', 'b'],)]"
postgresql,postgresql,"select '[""a"", ""b""]'::jsonb || '""c""'",jsonb.sql,SAME,,"[(['a', 'b', 'c'],)]"
postgresql,postgresql,"select '""c""' || '[""a"", ""b""]'::jsonb",jsonb.sql,SAME,,"[(['c', 'a', 'b'],)]"
postgresql,postgresql,"select '[]'::jsonb || '[""a""]'::jsonb",jsonb.sql,SAME,,"[(['a'],)]"
postgresql,postgresql,"select '[]'::jsonb || '""a""'::jsonb",jsonb.sql,SAME,,"[(['a'],)]"
postgresql,postgresql,"select '""b""'::jsonb || '""a""'::jsonb",jsonb.sql,SAME,,"[(['b', 'a'],)]"
postgresql,postgresql,"select '{}'::jsonb || '{""a"":""b""}'::jsonb",jsonb.sql,SAME,,"[({'a': 'b'},)]"
postgresql,postgresql,"select '[]'::jsonb || '{""a"":""b""}'::jsonb",jsonb.sql,SAME,,"[([{'a': 'b'}],)]"
postgresql,postgresql,"select '{""a"":""b""}'::jsonb || '[]'::jsonb",jsonb.sql,SAME,,"[([{'a': 'b'}],)]"
postgresql,postgresql,"select '""a""'::jsonb || '{""a"":1}'",jsonb.sql,SAME,,"[(['a', {'a': 1}],)]"
postgresql,postgresql,"select '{""a"":1}' || '""a""'::jsonb",jsonb.sql,SAME,,"[([{'a': 1}, 'a'],)]"
postgresql,postgresql,select '[3]'::jsonb || '{}'::jsonb,jsonb.sql,SAME,,"[([3, {}],)]"
postgresql,postgresql,select '3'::jsonb || '[]'::jsonb,jsonb.sql,SAME,,"[([3],)]"
postgresql,postgresql,select '3'::jsonb || '4'::jsonb,jsonb.sql,SAME,,"[([3, 4],)]"
postgresql,postgresql,select '3'::jsonb || '{}'::jsonb,jsonb.sql,SAME,,"[([3, {}],)]"
postgresql,postgresql,"select '[""a"", ""b""]'::jsonb || '{""c"":1}'",jsonb.sql,SAME,,"[(['a', 'b', {'c': 1}],)]"
postgresql,postgresql,"select '{""c"": 1}'::jsonb || '[""a"", ""b""]'",jsonb.sql,SAME,,"[([{'c': 1}, 'a', 'b'],)]"
postgresql,postgresql,"select '{}'::jsonb || '{""cq"":""l"", ""b"":""g"", ""fg"":false}'",jsonb.sql,SAME,,"[({'b': 'g', 'cq': 'l', 'fg': False},)]"
postgresql,postgresql,select pg_column_size('{}'::jsonb || '{}'::jsonb) = pg_column_size('{}'::jsonb),jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_column_size('{""aa"":1}'::jsonb || '{""b"":2}'::jsonb) = pg_column_size('{""aa"":1, ""b"":2}'::jsonb)",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_column_size('{""aa"":1, ""b"":2}'::jsonb || '{}'::jsonb) = pg_column_size('{""aa"":1, ""b"":2}'::jsonb)",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_column_size('{}'::jsonb || '{""aa"":1, ""b"":2}'::jsonb) = pg_column_size('{""aa"":1, ""b"":2}'::jsonb)",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_delete('{""a"":1 , ""b"":2, ""c"":3}'::jsonb, 'a')",jsonb.sql,SAME,,"[({'b': 2, 'c': 3},)]"
postgresql,postgresql,"select jsonb_delete('{""a"":null , ""b"":2, ""c"":3}'::jsonb, 'a')",jsonb.sql,SAME,,"[({'b': 2, 'c': 3},)]"
postgresql,postgresql,"select jsonb_delete('{""a"":1 , ""b"":2, ""c"":3}'::jsonb, 'b')",jsonb.sql,SAME,,"[({'a': 1, 'c': 3},)]"
postgresql,postgresql,"select jsonb_delete('{""a"":1 , ""b"":2, ""c"":3}'::jsonb, 'c')",jsonb.sql,SAME,,"[({'a': 1, 'b': 2},)]"
postgresql,postgresql,"select jsonb_delete('{""a"":1 , ""b"":2, ""c"":3}'::jsonb, 'd')",jsonb.sql,SAME,,"[({'a': 1, 'b': 2, 'c': 3},)]"
postgresql,postgresql,"select '{""a"":1 , ""b"":2, ""c"":3}'::jsonb - 'a'",jsonb.sql,SAME,,"[({'b': 2, 'c': 3},)]"
postgresql,postgresql,"select '{""a"":null , ""b"":2, ""c"":3}'::jsonb - 'a'",jsonb.sql,SAME,,"[({'b': 2, 'c': 3},)]"
postgresql,postgresql,"select '{""a"":1 , ""b"":2, ""c"":3}'::jsonb - 'b'",jsonb.sql,SAME,,"[({'a': 1, 'c': 3},)]"
postgresql,postgresql,"select '{""a"":1 , ""b"":2, ""c"":3}'::jsonb - 'c'",jsonb.sql,SAME,,"[({'a': 1, 'b': 2},)]"
postgresql,postgresql,"select '{""a"":1 , ""b"":2, ""c"":3}'::jsonb - 'd'",jsonb.sql,SAME,,"[({'a': 1, 'b': 2, 'c': 3},)]"
postgresql,postgresql,"select pg_column_size('{""a"":1 , ""b"":2, ""c"":3}'::jsonb - 'b') = pg_column_size('{""a"":1, ""b"":2}'::jsonb)",jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select '[""a"",""b"",""c""]'::jsonb - 3",jsonb.sql,SAME,,"[(['a', 'b', 'c'],)]"
postgresql,postgresql,"select '[""a"",""b"",""c""]'::jsonb - 2",jsonb.sql,SAME,,"[(['a', 'b'],)]"
postgresql,postgresql,"select '[""a"",""b"",""c""]'::jsonb - 1",jsonb.sql,SAME,,"[(['a', 'c'],)]"
postgresql,postgresql,"select '[""a"",""b"",""c""]'::jsonb - 0",jsonb.sql,SAME,,"[(['b', 'c'],)]"
postgresql,postgresql,"select '[""a"",""b"",""c""]'::jsonb - -1",jsonb.sql,SAME,,"[(['a', 'b'],)]"
postgresql,postgresql,"select '[""a"",""b"",""c""]'::jsonb - -2",jsonb.sql,SAME,,"[(['a', 'c'],)]"
postgresql,postgresql,"select '[""a"",""b"",""c""]'::jsonb - -3",jsonb.sql,SAME,,"[(['b', 'c'],)]"
postgresql,postgresql,"select '[""a"",""b"",""c""]'::jsonb - -4",jsonb.sql,SAME,,"[(['a', 'b', 'c'],)]"
postgresql,postgresql,"select '{""a"":1 , ""b"":2, ""c"":3}'::jsonb - '{b}'::text[]",jsonb.sql,SAME,,"[({'a': 1, 'c': 3},)]"
postgresql,postgresql,"select '{""a"":1 , ""b"":2, ""c"":3}'::jsonb - '{c,b}'::text[]",jsonb.sql,SAME,,"[({'a': 1},)]"
postgresql,postgresql,"select '{""a"":1 , ""b"":2, ""c"":3}'::jsonb - '{}'::text[]",jsonb.sql,SAME,,"[({'a': 1, 'b': 2, 'c': 3},)]"
postgresql,postgresql,"select jsonb_set('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb, '{n}', '[1,2,3]')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, 2], 'c': {'1': 2}, 'd': {'1': [2, 3]}, 'n': [1, 2, 3]},)]"
postgresql,postgresql,"select jsonb_set('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb, '{b,-1}', '[1,2,3]')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, [1, 2, 3]], 'c': {'1': 2}, 'd': {'1': [2, 3]}, 'n': None},)]"
postgresql,postgresql,"select jsonb_set('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb, '{d,1,0}', '[1,2,3]')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, 2], 'c': {'1': 2}, 'd': {'1': [[1, 2, 3], 3]}, 'n': None},)]"
postgresql,postgresql,"select jsonb_set('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb, '{n}', '{""1"": 2}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, 2], 'c': {'1': 2}, 'd': {'1': [2, 3]}, 'n': {'1': 2}},)]"
postgresql,postgresql,"select jsonb_set('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb, '{b,-1}', '{""1"": 2}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, {'1': 2}], 'c': {'1': 2}, 'd': {'1': [2, 3]}, 'n': None},)]"
postgresql,postgresql,"select jsonb_set('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb, '{d,1,0}', '{""1"": 2}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, 2], 'c': {'1': 2}, 'd': {'1': [{'1': 2}, 3]}, 'n': None},)]"
postgresql,postgresql,"select jsonb_set('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb, '{b,-1}', '""test""')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, 'test'], 'c': {'1': 2}, 'd': {'1': [2, 3]}, 'n': None},)]"
postgresql,postgresql,"select jsonb_set('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb, '{b,-1}', '{""f"": ""test""}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, {'f': 'test'}], 'c': {'1': 2}, 'd': {'1': [2, 3]}, 'n': None},)]"
postgresql,postgresql,"select jsonb_delete_path('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}', '{n}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, 2], 'c': {'1': 2}, 'd': {'1': [2, 3]}},)]"
postgresql,postgresql,"select jsonb_delete_path('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}', '{b,-1}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1], 'c': {'1': 2}, 'd': {'1': [2, 3]}, 'n': None},)]"
postgresql,postgresql,"select jsonb_delete_path('{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}', '{d,1,0}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, 2], 'c': {'1': 2}, 'd': {'1': [3]}, 'n': None},)]"
postgresql,postgresql,"select '{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb #- '{n}'",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, 2], 'c': {'1': 2}, 'd': {'1': [2, 3]}},)]"
postgresql,postgresql,"select '{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb #- '{b,-1}'",jsonb.sql,SAME,,"[({'a': 1, 'b': [1], 'c': {'1': 2}, 'd': {'1': [2, 3]}, 'n': None},)]"
postgresql,postgresql,"select '{""n"":null, ""a"":1, ""b"":[1,2], ""c"":{""1"":2}, ""d"":{""1"":[2,3]}}'::jsonb #- '{d,1,0}'",jsonb.sql,SAME,,"[({'a': 1, 'b': [1, 2], 'c': {'1': 2}, 'd': {'1': [3]}, 'n': None},)]"
postgresql,postgresql,select '{}'::jsonb - 'a',jsonb.sql,SAME,,"[({},)]"
postgresql,postgresql,select '[]'::jsonb - 'a',jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,select '[]'::jsonb - 1,jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,select '{}'::jsonb #- '{a}',jsonb.sql,SAME,,"[({},)]"
postgresql,postgresql,select '[]'::jsonb #- '{a}',jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,"select jsonb_set('{}','{a}','""b""', false)",jsonb.sql,SAME,,"[({},)]"
postgresql,postgresql,"select jsonb_set('[]','{1}','""b""', false)",jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,"select jsonb_set('[{""f1"":1,""f2"":null},2,null,3]', '{0}','[2,3,4]', false)",jsonb.sql,SAME,,"[([[2, 3, 4], 2, None, 3],)]"
postgresql,postgresql,"select jsonb_set('{""a"":1,""b"":[0,1,2],""c"":{""d"":4}}','{b,-33}','{""foo"":123}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [{'foo': 123}, 0, 1, 2], 'c': {'d': 4}},)]"
postgresql,postgresql,"select jsonb_set('{""a"":1,""b"":[0,1,2],""c"":{""d"":4}}','{b,33}','{""foo"":123}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [0, 1, 2, {'foo': 123}], 'c': {'d': 4}},)]"
postgresql,postgresql,"select jsonb_set('{""a"":1,""b"":[4,5,[0,1,2],6,7],""c"":{""d"":4}}','{b,2,33}','{""foo"":123}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [4, 5, [0, 1, 2, {'foo': 123}], 6, 7], 'c': {'d': 4}},)]"
postgresql,postgresql,"select jsonb_set('{""a"":1,""b"":[0,1,2],""c"":{""d"":4}}','{c,e}','{""foo"":123}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [0, 1, 2], 'c': {'d': 4, 'e': {'foo': 123}}},)]"
postgresql,postgresql,"select jsonb_set('{""a"":1,""b"":[0,1,2],""c"":{""d"":4}}','{x,-33}','{""foo"":123}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [0, 1, 2], 'c': {'d': 4}},)]"
postgresql,postgresql,"select jsonb_set('{""a"":1,""b"":[0,1,2],""c"":{""d"":4}}','{x,y}','{""foo"":123}')",jsonb.sql,SAME,,"[({'a': 1, 'b': [0, 1, 2], 'c': {'d': 4}},)]"
postgresql,postgresql,"select jsonb_set('{}','{x}','{""foo"":123}')",jsonb.sql,SAME,,"[({'x': {'foo': 123}},)]"
postgresql,postgresql,"select jsonb_set('[]','{0}','{""foo"":123}')",jsonb.sql,SAME,,"[([{'foo': 123}],)]"
postgresql,postgresql,"select jsonb_set('[]','{99}','{""foo"":123}')",jsonb.sql,SAME,,"[([{'foo': 123}],)]"
postgresql,postgresql,"select jsonb_set('[]','{-99}','{""foo"":123}')",jsonb.sql,SAME,,"[([{'foo': 123}],)]"
postgresql,postgresql,"select jsonb_set_lax('{""a"":1,""b"":2}','{b}','5')",jsonb.sql,SAME,,"[({'a': 1, 'b': 5},)]"
postgresql,postgresql,"select jsonb_set_lax('{""a"":1,""b"":2}','{d}','6', true)",jsonb.sql,SAME,,"[({'a': 1, 'b': 2, 'd': 6},)]"
postgresql,postgresql,"select jsonb_set_lax('{""a"":1,""b"":2}','{b}',null)",jsonb.sql,SAME,,"[({'a': 1, 'b': None},)]"
postgresql,postgresql,"select jsonb_set_lax('{""a"":1,""b"":2}','{d}',null,true)",jsonb.sql,SAME,,"[({'a': 1, 'b': 2, 'd': None},)]"
postgresql,postgresql,"select jsonb_set_lax('{""a"":1,""b"":2}', '{b}', null, null_value_treatment => 'return_target') as return_target",jsonb.sql,SAME,,"[({'a': 1, 'b': 2},)]"
postgresql,postgresql,"select jsonb_set_lax('{""a"":1,""b"":2}', '{b}', null, null_value_treatment => 'delete_key') as delete_key",jsonb.sql,SAME,,"[({'a': 1},)]"
postgresql,postgresql,"select jsonb_set_lax('{""a"":1,""b"":2}', '{b}', null, null_value_treatment => 'use_json_null') as use_json_null",jsonb.sql,SAME,,"[({'a': 1, 'b': None},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, 1}', '""new_value""')",jsonb.sql,SAME,,"[({'a': [0, 'new_value', 1, 2]},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, 1}', '""new_value""', true)",jsonb.sql,SAME,,"[({'a': [0, 1, 'new_value', 2]},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": {""b"": {""c"": [0, 1, ""test1"", ""test2""]}}}', '{a, b, c, 2}', '""new_value""')",jsonb.sql,SAME,,"[({'a': {'b': {'c': [0, 1, 'new_value', 'test1', 'test2']}}},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": {""b"": {""c"": [0, 1, ""test1"", ""test2""]}}}', '{a, b, c, 2}', '""new_value""', true)",jsonb.sql,SAME,,"[({'a': {'b': {'c': [0, 1, 'test1', 'new_value', 'test2']}}},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, 1}', '{""b"": ""value""}')",jsonb.sql,SAME,,"[({'a': [0, {'b': 'value'}, 1, 2]},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, 1}', '[""value1"", ""value2""]')",jsonb.sql,SAME,,"[({'a': [0, ['value1', 'value2'], 1, 2]},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, 0}', '""new_value""')",jsonb.sql,SAME,,"[({'a': ['new_value', 0, 1, 2]},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, 0}', '""new_value""', true)",jsonb.sql,SAME,,"[({'a': [0, 'new_value', 1, 2]},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, 2}', '""new_value""')",jsonb.sql,SAME,,"[({'a': [0, 1, 'new_value', 2]},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, 2}', '""new_value""', true)",jsonb.sql,SAME,,"[({'a': [0, 1, 2, 'new_value']},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, -1}', '""new_value""')",jsonb.sql,SAME,,"[({'a': [0, 1, 'new_value', 2]},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, -1}', '""new_value""', true)",jsonb.sql,SAME,,"[({'a': [0, 1, 2, 'new_value']},)]"
postgresql,postgresql,"select jsonb_insert('[]', '{1}', '""new_value""')",jsonb.sql,SAME,,"[(['new_value'],)]"
postgresql,postgresql,"select jsonb_insert('[]', '{1}', '""new_value""', true)",jsonb.sql,SAME,,"[(['new_value'],)]"
postgresql,postgresql,"select jsonb_insert('{""a"": []}', '{a, 1}', '""new_value""')",jsonb.sql,SAME,,"[({'a': ['new_value']},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": []}', '{a, 1}', '""new_value""', true)",jsonb.sql,SAME,,"[({'a': ['new_value']},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, 10}', '""new_value""')",jsonb.sql,SAME,,"[({'a': [0, 1, 2, 'new_value']},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": [0,1,2]}', '{a, -10}', '""new_value""')",jsonb.sql,SAME,,"[({'a': ['new_value', 0, 1, 2]},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": {""b"": ""value""}}', '{a, c}', '""new_value""')",jsonb.sql,SAME,,"[({'a': {'b': 'value', 'c': 'new_value'}},)]"
postgresql,postgresql,"select jsonb_insert('{""a"": {""b"": ""value""}}', '{a, c}', '""new_value""', true)",jsonb.sql,SAME,,"[({'a': {'b': 'value', 'c': 'new_value'}},)]"
postgresql,postgresql,select ('123'::jsonb)['a'],jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,select ('123'::jsonb)[0],jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,select ('123'::jsonb)[NULL],jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('{""a"": 1}'::jsonb)['a']",jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select ('{""a"": 1}'::jsonb)[0]",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('{""a"": 1}'::jsonb)['not_exist']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('{""a"": 1}'::jsonb)[NULL]",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('[1, ""2"", null]'::jsonb)['a']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('[1, ""2"", null]'::jsonb)[0]",jsonb.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select ('[1, ""2"", null]'::jsonb)['1']",jsonb.sql,SAME,,"[('2',)]"
postgresql,postgresql,"select ('[1, ""2"", null]'::jsonb)[2]",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('[1, ""2"", null]'::jsonb)[3]",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('[1, ""2"", null]'::jsonb)[-2]",jsonb.sql,SAME,,"[('2',)]"
postgresql,postgresql,"select ('[1, ""2"", null]'::jsonb)[1]['a']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('[1, ""2"", null]'::jsonb)[1][0]",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('{""a"": 1, ""b"": ""c"", ""d"": [1, 2, 3]}'::jsonb)['b']",jsonb.sql,SAME,,"[('c',)]"
postgresql,postgresql,"select ('{""a"": 1, ""b"": ""c"", ""d"": [1, 2, 3]}'::jsonb)['d']",jsonb.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"select ('{""a"": 1, ""b"": ""c"", ""d"": [1, 2, 3]}'::jsonb)['d'][1]",jsonb.sql,SAME,,"[(2,)]"
postgresql,postgresql,"select ('{""a"": 1, ""b"": ""c"", ""d"": [1, 2, 3]}'::jsonb)['d']['a']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('{""a"": {""a1"": {""a2"": ""aaa""}}, ""b"": ""bbb"", ""c"": ""ccc""}'::jsonb)['a']['a1']",jsonb.sql,SAME,,"[({'a2': 'aaa'},)]"
postgresql,postgresql,"select ('{""a"": {""a1"": {""a2"": ""aaa""}}, ""b"": ""bbb"", ""c"": ""ccc""}'::jsonb)['a']['a1']['a2']",jsonb.sql,SAME,,"[('aaa',)]"
postgresql,postgresql,"select ('{""a"": {""a1"": {""a2"": ""aaa""}}, ""b"": ""bbb"", ""c"": ""ccc""}'::jsonb)['a']['a1']['a2']['a3']",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ('{""a"": [""a1"", {""b1"": [""aaa"", ""bbb"", ""ccc""]}], ""b"": ""bb""}'::jsonb)['a'][1]['b1']",jsonb.sql,SAME,,"[(['aaa', 'bbb', 'ccc'],)]"
postgresql,postgresql,"select ('{""a"": [""a1"", {""b1"": [""aaa"", ""bbb"", ""ccc""]}], ""b"": ""bb""}'::jsonb)['a'][1]['b1'][2]",jsonb.sql,SAME,,"[('ccc',)]"
postgresql,postgresql,"create TEMP TABLE test_jsonb_subscript (        id int,        test_json jsonb )",jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a'] = '1' where id = 1,jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(2, {'key': 'value'}), (1, {'a': 1})]"
postgresql,postgresql,update test_jsonb_subscript set test_json['a'] = '1' where id = 2,jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': 1}), (2, {'a': 1, 'key': 'value'})]"
postgresql,postgresql,"update test_jsonb_subscript set test_json['a'] = '""test""'",jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': 'test'}), (2, {'a': 'test', 'key': 'value'})]"
postgresql,postgresql,"update test_jsonb_subscript set test_json['a'] = '{""b"": 1}'::jsonb",jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': {'b': 1}}), (2, {'a': {'b': 1}, 'key': 'value'})]"
postgresql,postgresql,"update test_jsonb_subscript set test_json['a'] = '[1, 2, 3]'::jsonb",jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': [1, 2, 3]}), (2, {'a': [1, 2, 3], 'key': 'value'})]"
postgresql,postgresql,"select * from test_jsonb_subscript where test_json['key'] = '""value""'",jsonb.sql,SAME,,"[(2, {'a': [1, 2, 3], 'key': 'value'})]"
postgresql,postgresql,"select * from test_jsonb_subscript where test_json['key_doesnt_exists'] = '""value""'",jsonb.sql,SAME,,[]
postgresql,postgresql,"select * from test_jsonb_subscript where test_json['key'] = '""wrong_value""'",jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['another_key'] = NULL,jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': [1, 2, 3], 'another_key': None}), (2, {'a': [1, 2, 3], 'key': 'value', 'another_key': None})]"
postgresql,postgresql,update test_jsonb_subscript set test_json['a'] = '1' where id = 3,jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': [1, 2, 3], 'another_key': None}), (2, {'a': [1, 2, 3], 'key': 'value', 'another_key': None}), (3, {'a': 1})]"
postgresql,postgresql,update test_jsonb_subscript set test_json = NULL where id = 3,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json[0] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'0': 1, 'a': [1, 2, 3], 'another_key': None}), (2, {'0': 1, 'a': [1, 2, 3], 'key': 'value', 'another_key': None}), (3, [1])]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json[5] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, [0, None, None, None, None, 1])]"
postgresql,postgresql,update test_jsonb_subscript set test_json[-4] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, [0, None, 1, None, None, 1])]"
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, [0, None, 1, None, None, 1])]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json[5] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, [None, None, None, None, None, 1])]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a'][0]['b'][0]['c'] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': [{'b': [{'c': 1}]}]})]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a'][2]['b'][2]['c'][2] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': [None, None, {'b': [None, None, {'c': [None, None, 1]}]}]})]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a'][0] = '2',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': [2], 'b': 1})]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json[0]['a'] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'0': {'a': 1}})]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json[0]['a'] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json[2]['b'] = '2',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, [{'a': 1}, None, {'b': 2}])]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a']['b'][1] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a']['b'][10] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': {'b': [None, 1, None, None, None, None, None, None, None, None, 1]}})]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json[0][0][0] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json[0][0][1] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, [[[1, 1]]])]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a']['b'][10] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a'][10][10] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': {'b': [None, None, None, None, None, None, None, None, None, None, 1], '10': [None, None, None, None, None, None, None, None, None, None, 1]}})]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a']['b']['c'][2] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': {'b': {'c': [None, None, 1]}}})]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,update test_jsonb_subscript set test_json['a'][1]['c'][2] = '1',jsonb.sql,SAME,,[]
postgresql,postgresql,select * from test_jsonb_subscript,jsonb.sql,SAME,,"[(1, {'a': [None, {'c': [None, None, 1]}]})]"
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,delete from test_jsonb_subscript,jsonb.sql,SAME,,[]
postgresql,postgresql,"create temp table test_jsonb_subscript (        id text,        test_json jsonb )",jsonb.sql,SAME,,[]
postgresql,postgresql,"select length(id), test_json[id] from test_jsonb_subscript",jsonb.sql,SAME,,"[(3, 'bar'), (2500, 'bar')]"
postgresql,postgresql,"update test_jsonb_subscript set test_json[id] = '""baz""'",jsonb.sql,SAME,,[]
postgresql,postgresql,"select length(id), test_json[id] from test_jsonb_subscript",jsonb.sql,SAME,,"[(3, 'baz'), (2500, 'baz')]"
postgresql,postgresql,table test_jsonb_subscript,jsonb.sql,SAME,,"[('foo', {'foo': 'baz'}), ('xyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzy', {'xyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzyxyzzy': 'baz'})]"
postgresql,postgresql,"select to_tsvector('{""a"": ""aaa bbb ddd ccc"", ""b"": [""eee fff ggg""], ""c"": {""d"": ""hhh iii""}}'::jsonb)",jsonb.sql,SAME,,"[(""'aaa':1 'bbb':2 'ccc':4 'ddd':3 'eee':6 'fff':7 'ggg':8 'hhh':10 'iii':11"",)]"
postgresql,postgresql,"select to_tsvector('simple', '{""a"": ""aaa bbb ddd ccc"", ""b"": [""eee fff ggg""], ""c"": {""d"": ""hhh iii""}}'::jsonb)",jsonb.sql,SAME,,"[(""'aaa':1 'bbb':2 'ccc':4 'ddd':3 'eee':6 'fff':7 'ggg':8 'hhh':10 'iii':11"",)]"
postgresql,postgresql,"select to_tsvector('english', '{""a"": ""aaa in bbb ddd ccc"", ""b"": [""the eee fff ggg""], ""c"": {""d"": ""hhh. iii""}}'::jsonb)",jsonb.sql,SAME,,"[(""'aaa':1 'bbb':3 'ccc':5 'ddd':4 'eee':8 'fff':9 'ggg':10 'hhh':12 'iii':13"",)]"
postgresql,postgresql,"select to_tsvector('english', '{""a"": ""aaa in bbb ddd ccc"", ""b"": 123, ""c"": 456}'::jsonb)",jsonb.sql,SAME,,"[(""'aaa':1 'bbb':3 'ccc':5 'ddd':4"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""all""')",jsonb.sql,SAME,,"[(""'123':8 '456':12 'aaa':2 'b':6 'bbb':4 'c':10 'd':14 'f':18 'fals':20 'g':22 'true':16"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""key""')",jsonb.sql,SAME,,"[(""'b':2 'c':4 'd':6 'f':8 'g':10"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""string""')",jsonb.sql,SAME,,"[(""'aaa':1 'bbb':3"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""numeric""')",jsonb.sql,SAME,,"[(""'123':1 '456':3"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""boolean""')",jsonb.sql,SAME,,"[(""'fals':3 'true':1"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '[""string"", ""numeric""]')",jsonb.sql,SAME,,"[(""'123':5 '456':7 'aaa':1 'bbb':3"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""all""')",jsonb.sql,SAME,,"[(""'123':8 '456':12 'aaa':2 'b':6 'bbb':4 'c':10 'd':14 'f':18 'fals':20 'g':22 'true':16"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""key""')",jsonb.sql,SAME,,"[(""'b':2 'c':4 'd':6 'f':8 'g':10"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""string""')",jsonb.sql,SAME,,"[(""'aaa':1 'bbb':3"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""numeric""')",jsonb.sql,SAME,,"[(""'123':1 '456':3"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '""boolean""')",jsonb.sql,SAME,,"[(""'fals':3 'true':1"",)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '[""string"", ""numeric""]')",jsonb.sql,SAME,,"[(""'123':5 '456':7 'aaa':1 'bbb':3"",)]"
postgresql,postgresql,"select to_tsvector('""""'::jsonb)",jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,select to_tsvector('{}'::jsonb),jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,select to_tsvector('[]'::jsonb),jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,select to_tsvector('null'::jsonb),jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,"select jsonb_to_tsvector('""""'::jsonb, '""all""')",jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,"select jsonb_to_tsvector('{}'::jsonb, '""all""')",jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,"select jsonb_to_tsvector('[]'::jsonb, '""all""')",jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,"select jsonb_to_tsvector('null'::jsonb, '""all""')",jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,"select jsonb_to_tsvector('english', '{""a"": ""aaa in bbb"", ""b"": 123, ""c"": 456, ""d"": true, ""f"": false, ""g"": null}'::jsonb, '[]')",jsonb.sql,SAME,,"[('',)]"
postgresql,postgresql,"select ts_headline('{""a"": ""aaa bbb"", ""b"": {""c"": ""ccc ddd fff"", ""c1"": ""ccc1 ddd1""}, ""d"": [""ggg hhh"", ""iii jjj""]}'::jsonb, tsquery('bbb & ddd & hhh'))",jsonb.sql,SAME,,"[({'a': 'aaa <b>bbb</b>', 'b': {'c': 'ccc <b>ddd</b> fff', 'c1': 'ccc1 ddd1'}, 'd': ['ggg <b>hhh</b>', 'iii jjj']},)]"
postgresql,postgresql,"select ts_headline('english', '{""a"": ""aaa bbb"", ""b"": {""c"": ""ccc ddd fff""}, ""d"": [""ggg hhh"", ""iii jjj""]}'::jsonb, tsquery('bbb & ddd & hhh'))",jsonb.sql,SAME,,"[({'a': 'aaa <b>bbb</b>', 'b': {'c': 'ccc <b>ddd</b> fff'}, 'd': ['ggg <b>hhh</b>', 'iii jjj']},)]"
postgresql,postgresql,"select ts_headline('{""a"": ""aaa bbb"", ""b"": {""c"": ""ccc ddd fff"", ""c1"": ""ccc1 ddd1""}, ""d"": [""ggg hhh"", ""iii jjj""]}'::jsonb, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >')",jsonb.sql,SAME,,"[({'a': 'aaa <bbb>', 'b': {'c': 'ccc <ddd> fff', 'c1': 'ccc1 ddd1'}, 'd': ['ggg <hhh>', 'iii jjj']},)]"
postgresql,postgresql,"select ts_headline('english', '{""a"": ""aaa bbb"", ""b"": {""c"": ""ccc ddd fff"", ""c1"": ""ccc1 ddd1""}, ""d"": [""ggg hhh"", ""iii jjj""]}'::jsonb, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >')",jsonb.sql,SAME,,"[({'a': 'aaa <bbb>', 'b': {'c': 'ccc <ddd> fff', 'c1': 'ccc1 ddd1'}, 'd': ['ggg <hhh>', 'iii jjj']},)]"
postgresql,postgresql,"select ts_headline('null'::jsonb, tsquery('aaa & bbb'))",jsonb.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ts_headline('{}'::jsonb, tsquery('aaa & bbb'))",jsonb.sql,SAME,,"[({},)]"
postgresql,postgresql,"select ts_headline('[]'::jsonb, tsquery('aaa & bbb'))",jsonb.sql,SAME,,"[([],)]"
postgresql,postgresql,select 'true'::jsonb::bool,jsonb.sql,SAME,,"[(True,)]"
postgresql,postgresql,select '1.0'::jsonb::float,jsonb.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,select '12345'::jsonb::int4,jsonb.sql,SAME,,"[(12345,)]"
postgresql,postgresql,select '12345'::jsonb::numeric,jsonb.sql,SAME,,"[(Decimal('12345'),)]"
postgresql,postgresql,select '12345.05'::jsonb::numeric,jsonb.sql,SAME,,"[(Decimal('12345.05'),)]"
postgresql,postgresql,select '12345.05'::jsonb::float4,jsonb.sql,SAME,,"[(12345.05,)]"
postgresql,postgresql,select '12345.05'::jsonb::float8,jsonb.sql,SAME,,"[(12345.05,)]"
postgresql,postgresql,select '12345.05'::jsonb::int2,jsonb.sql,SAME,,"[(12345,)]"
postgresql,postgresql,select '12345.05'::jsonb::int4,jsonb.sql,SAME,,"[(12345,)]"
postgresql,postgresql,select '12345.05'::jsonb::int8,jsonb.sql,SAME,,"[(12345,)]"
postgresql,postgresql,select '12345.0000000000000000000000000000000000000000000005'::jsonb::numeric,jsonb.sql,SAME,,"[(Decimal('12345.0000000000000000000000000000000000000000000005'),)]"
postgresql,postgresql,select '12345.0000000000000000000000000000000000000000000005'::jsonb::float4,jsonb.sql,SAME,,"[(12345.0,)]"
postgresql,postgresql,select '12345.0000000000000000000000000000000000000000000005'::jsonb::float8,jsonb.sql,SAME,,"[(12345.0,)]"
postgresql,postgresql,select '12345.0000000000000000000000000000000000000000000005'::jsonb::int2,jsonb.sql,SAME,,"[(12345,)]"
postgresql,postgresql,select '12345.0000000000000000000000000000000000000000000005'::jsonb::int4,jsonb.sql,SAME,,"[(12345,)]"
postgresql,postgresql,select '12345.0000000000000000000000000000000000000000000005'::jsonb::int8,jsonb.sql,SAME,,"[(12345,)]"
postgresql,postgresql,"select jsonb '{""a"": 12}' @? '$'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": 12}' @? '1'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": 12}' @? '$.a.b'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""a"": 12}' @? '$.b'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""a"": 12}' @? '$.a + 2'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": 12}' @? '$.b + 2'",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb '{""a"": {""a"": 12}}' @? '$.a.a'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""a"": 12}}' @? '$.*.a'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""b"": {""a"": 12}}' @? '$.*.a'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""b"": {""a"": 12}}' @? '$.*.b'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""b"": {""a"": 12}}' @? 'strict $.*.b'",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,select jsonb '{}' @? '$.*',jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""a"": 1}' @? '$.*'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""b"": 1}}' @? 'lax $.**{1}'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""b"": 1}}' @? 'lax $.**{2}'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""b"": 1}}' @? 'lax $.**{3}'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,select jsonb '[]' @? '$[*]',jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,select jsonb '[1]' @? '$[*]',jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,select jsonb '[1]' @? '$[1]',jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,select jsonb '[1]' @? 'strict $[1]',jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb_path_query('[1]', 'strict $[1]', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,select jsonb '[1]' @? 'lax $[10000000000000000]',jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,select jsonb '[1]' @? 'strict $[10000000000000000]',jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,select jsonb '[1]' @? '$[0]',jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,select jsonb '[1]' @? '$[0.3]',jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,select jsonb '[1]' @? '$[0.5]',jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,select jsonb '[1]' @? '$[0.9]',jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,select jsonb '[1]' @? '$[1.2]',jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,select jsonb '[1]' @? 'strict $[1.2]',jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb '{""a"": [1,2,3], ""b"": [3,4,5]}' @? '$ ? (@.a[*] >  @.b[*])'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""a"": [1,2,3], ""b"": [3,4,5]}' @? '$ ? (@.a[*] >= @.b[*])'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": [1,2,3], ""b"": [3,4,""5""]}' @? '$ ? (@.a[*] >= @.b[*])'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": [1,2,3], ""b"": [3,4,""5""]}' @? 'strict $ ? (@.a[*] >= @.b[*])'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""a"": [1,2,3], ""b"": [3,4,null]}' @? '$ ? (@.a[*] >= @.b[*])'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '1' @? '$ ? ((@ == ""1"") is unknown)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,select jsonb '1' @? '$ ? ((@ == 1) is unknown)',jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '[{""a"": 1}, {""a"": 2}]' @? '$[0 to 1] ? (@.a > 1)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_exists('[{""a"": 1}, {""a"": 2}, 3]', 'lax $[*].a', silent => false)",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_exists('[{""a"": 1}, {""a"": 2}, 3]', 'lax $[*].a', silent => true)",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_exists('[{""a"": 1}, {""a"": 2}, 3]', 'strict $[*].a', silent => true)",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb_path_query('1', 'lax $.a')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('1', 'strict $.a', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('1', 'strict $.*', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[]', 'lax $.a')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[]', 'strict $.a', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{}', 'lax $.a')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{}', 'strict $.a', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('1', 'strict $[1]', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('1', 'strict $[*]', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[]', 'strict $[1]', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[]', 'strict $[""a""]', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""a"": 12, ""b"": {""a"": 13}}', '$.a')",jsonb_jsonpath.sql,SAME,,"[(12,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": 12, ""b"": {""a"": 13}}', '$.b')",jsonb_jsonpath.sql,SAME,,"[({'a': 13},)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": 12, ""b"": {""a"": 13}}', '$.*')",jsonb_jsonpath.sql,SAME,,"[(12,), ({'a': 13},)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": 12, ""b"": {""a"": 13}}', 'lax $.*.a')",jsonb_jsonpath.sql,SAME,,"[(13,)]"
postgresql,postgresql,"select jsonb_path_query('[12, {""a"": 13}, {""b"": 14}]', 'lax $[*].a')",jsonb_jsonpath.sql,SAME,,"[(13,)]"
postgresql,postgresql,"select jsonb_path_query('[12, {""a"": 13}, {""b"": 14}]', 'lax $[*].*')",jsonb_jsonpath.sql,SAME,,"[(13,), (14,)]"
postgresql,postgresql,"select jsonb_path_query('[12, {""a"": 13}, {""b"": 14}]', 'lax $[0].a')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[12, {""a"": 13}, {""b"": 14}]', 'lax $[1].a')",jsonb_jsonpath.sql,SAME,,"[(13,)]"
postgresql,postgresql,"select jsonb_path_query('[12, {""a"": 13}, {""b"": 14}]', 'lax $[2].a')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[12, {""a"": 13}, {""b"": 14}]', 'lax $[0,1].a')",jsonb_jsonpath.sql,SAME,,"[(13,)]"
postgresql,postgresql,"select jsonb_path_query('[12, {""a"": 13}, {""b"": 14}]', 'lax $[0 to 10].a')",jsonb_jsonpath.sql,SAME,,"[(13,)]"
postgresql,postgresql,"select jsonb_path_query('[12, {""a"": 13}, {""b"": 14}, ""ccc"", true]', '$[2.5 - 1 to $.size() - 2]')",jsonb_jsonpath.sql,SAME,,"[({'a': 13},), ({'b': 14},), ('ccc',)]"
postgresql,postgresql,"select jsonb_path_query('1', 'lax $[0]')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('1', 'lax $[*]')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('[1]', 'lax $[0]')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('[1]', 'lax $[*]')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('[1,2,3]', 'lax $[*]')",jsonb_jsonpath.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,"select jsonb_path_query('[1,2,3]', 'strict $[*].a', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[]', '$[last]')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[]', '$[last ? (exists(last))]')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[]', 'strict $[last]', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[1]', '$[last]')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('[1,2,3]', '$[last]')",jsonb_jsonpath.sql,SAME,,"[(3,)]"
postgresql,postgresql,"select jsonb_path_query('[1,2,3]', '$[last - 1]')",jsonb_jsonpath.sql,SAME,,"[(2,)]"
postgresql,postgresql,"select jsonb_path_query('[1,2,3]', '$[last ? (@.type() == ""number"")]')",jsonb_jsonpath.sql,SAME,,"[(3,)]"
postgresql,postgresql,"select jsonb_path_query('[1,2,3]', '$[last ? (@.type() == ""string"")]', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select * from jsonb_path_query('{""a"": 10}', '$')",jsonb_jsonpath.sql,SAME,,"[({'a': 10},)]"
postgresql,postgresql,"select * from jsonb_path_query('{""a"": 10}', '$ ? (@.a < $value)', '{""value"" : 13}')",jsonb_jsonpath.sql,SAME,,"[({'a': 10},)]"
postgresql,postgresql,"select * from jsonb_path_query('{""a"": 10}', '$ ? (@.a < $value)', '{""value"" : 8}')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select * from jsonb_path_query('{""a"": 10}', '$.a ? (@ < $value)', '{""value"" : 13}')",jsonb_jsonpath.sql,SAME,,"[(10,)]"
postgresql,postgresql,"select * from jsonb_path_query('[10,11,12,13,14,15]', '$[*] ? (@ < $value)', '{""value"" : 13}')",jsonb_jsonpath.sql,SAME,,"[(10,), (11,), (12,)]"
postgresql,postgresql,"select * from jsonb_path_query('[10,11,12,13,14,15]', '$[0,1] ? (@ < $x.value)', '{""x"": {""value"" : 13}}')",jsonb_jsonpath.sql,SAME,,"[(10,), (11,)]"
postgresql,postgresql,"select * from jsonb_path_query('[10,11,12,13,14,15]', '$[0 to 2] ? (@ < $value)', '{""value"" : 15}')",jsonb_jsonpath.sql,SAME,,"[(10,), (11,), (12,)]"
postgresql,postgresql,"select * from jsonb_path_query('[1,""1"",2,""2"",null]', '$[*] ? (@ == ""1"")')",jsonb_jsonpath.sql,SAME,,"[('1',)]"
postgresql,postgresql,"select * from jsonb_path_query('[1,""1"",2,""2"",null]', '$[*] ? (@ == $value)', '{""value"" : ""1""}')",jsonb_jsonpath.sql,SAME,,"[('1',)]"
postgresql,postgresql,"select * from jsonb_path_query('[1,""1"",2,""2"",null]', '$[*] ? (@ == $value)', '{""value"" : null}')",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select * from jsonb_path_query('[1, ""2"", null]', '$[*] ? (@ != null)')",jsonb_jsonpath.sql,SAME,,"[(1,), ('2',)]"
postgresql,postgresql,"select * from jsonb_path_query('[1, ""2"", null]', '$[*] ? (@ == null)')",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select * from jsonb_path_query('{}', '$ ? (@ == @)')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select * from jsonb_path_query('[]', 'strict $ ? (@ == @)')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**')",jsonb_jsonpath.sql,SAME,,"[({'a': {'b': 1}},), ({'b': 1},), (1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{0}')",jsonb_jsonpath.sql,SAME,,"[({'a': {'b': 1}},)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{0 to last}')",jsonb_jsonpath.sql,SAME,,"[({'a': {'b': 1}},), ({'b': 1},), (1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{1}')",jsonb_jsonpath.sql,SAME,,"[({'b': 1},)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{1 to last}')",jsonb_jsonpath.sql,SAME,,"[({'b': 1},), (1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{2}')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{2 to last}')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{3 to last}')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{last}')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{0}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{1}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{0 to last}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{1 to last}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""b"": 1}}', 'lax $.**{1 to 2}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""c"": {""b"": 1}}}', 'lax $.**.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""c"": {""b"": 1}}}', 'lax $.**{0}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""a"": {""c"": {""b"": 1}}}', 'lax $.**{1}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""a"": {""c"": {""b"": 1}}}', 'lax $.**{0 to last}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""c"": {""b"": 1}}}', 'lax $.**{1 to last}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""c"": {""b"": 1}}}', 'lax $.**{1 to 2}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": {""c"": {""b"": 1}}}', 'lax $.**{2 to 3}.b ? (@ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb '{""a"": {""b"": 1}}' @? '$.**.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""b"": 1}}' @? '$.**{0}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""a"": {""b"": 1}}' @? '$.**{1}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""b"": 1}}' @? '$.**{0 to last}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""b"": 1}}' @? '$.**{1 to last}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""b"": 1}}' @? '$.**{1 to 2}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""c"": {""b"": 1}}}' @? '$.**.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""c"": {""b"": 1}}}' @? '$.**{0}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""a"": {""c"": {""b"": 1}}}' @? '$.**{1}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""a"": {""c"": {""b"": 1}}}' @? '$.**{0 to last}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""c"": {""b"": 1}}}' @? '$.**{1 to last}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""c"": {""b"": 1}}}' @? '$.**{1 to 2}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": {""c"": {""b"": 1}}}' @? '$.**{2 to 3}.b ? ( @ > 0)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_query('{""g"": {""x"": 2}}', '$.g ? (exists (@.x))')",jsonb_jsonpath.sql,SAME,,"[({'x': 2},)]"
postgresql,postgresql,"select jsonb_path_query('{""g"": {""x"": 2}}', '$.g ? (exists (@.y))')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""g"": {""x"": 2}}', '$.g ? (exists (@.x ? (@ >= 2) ))')",jsonb_jsonpath.sql,SAME,,"[({'x': 2},)]"
postgresql,postgresql,"select jsonb_path_query('{""g"": [{""x"": 2}, {""y"": 3}]}', 'lax $.g ? (exists (@.x))')",jsonb_jsonpath.sql,SAME,,"[({'x': 2},)]"
postgresql,postgresql,"select jsonb_path_query('{""g"": [{""x"": 2}, {""y"": 3}]}', 'lax $.g ? (exists (@.x + ""3""))')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""g"": [{""x"": 2}, {""y"": 3}]}', 'lax $.g ? ((exists (@.x + ""3"")) is unknown)')",jsonb_jsonpath.sql,SAME,,"[({'x': 2},), ({'y': 3},)]"
postgresql,postgresql,"select jsonb_path_query('{""g"": [{""x"": 2}, {""y"": 3}]}', 'strict $.g[*] ? (exists (@.x))')",jsonb_jsonpath.sql,SAME,,"[({'x': 2},)]"
postgresql,postgresql,"select jsonb_path_query('{""g"": [{""x"": 2}, {""y"": 3}]}', 'strict $.g[*] ? ((exists (@.x)) is unknown)')",jsonb_jsonpath.sql,SAME,,"[({'y': 3},)]"
postgresql,postgresql,"select jsonb_path_query('{""g"": [{""x"": 2}, {""y"": 3}]}', 'strict $.g ? (exists (@[*].x))')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""g"": [{""x"": 2}, {""y"": 3}]}', 'strict $.g ? ((exists (@[*].x)) is unknown)')",jsonb_jsonpath.sql,SAME,,"[([{'x': 2}, {'y': 3}],)]"
postgresql,postgresql,"select 	x, y, 	jsonb_path_query( 		'[true, false, null]', 		'$[*] ? (@ == true  &&  ($x == true && $y == true) || 				 @ == false && !($x == true && $y == true) || 				 @ == null  &&  ($x == true && $y == true) is unknown)', 		jsonb_build_object('x', x, 'y', y) 	) as ""x && y"" from 	(values (jsonb 'true'), ('false'), ('""null""')) x(x), 	(values (jsonb 'true'), ('false'), ('""null""')) y(y)",jsonb_jsonpath.sql,SAME,,"[(True, True, True), (True, False, False), (True, 'null', None), (False, True, False), (False, False, False), (False, 'null', False), ('null', True, None), ('null', False, False), ('null', 'null', None)]"
postgresql,postgresql,"select 	x, y, 	jsonb_path_query( 		'[true, false, null]', 		'$[*] ? (@ == true  &&  ($x == true || $y == true) || 				 @ == false && !($x == true || $y == true) || 				 @ == null  &&  ($x == true || $y == true) is unknown)', 		jsonb_build_object('x', x, 'y', y) 	) as ""x || y"" from 	(values (jsonb 'true'), ('false'), ('""null""')) x(x), 	(values (jsonb 'true'), ('false'), ('""null""')) y(y)",jsonb_jsonpath.sql,SAME,,"[(True, True, True), (True, False, True), (True, 'null', True), (False, True, True), (False, False, False), (False, 'null', None), ('null', True, True), ('null', False, None), ('null', 'null', None)]"
postgresql,postgresql,"select jsonb '{""a"": 1, ""b"":1}' @? '$ ? (@.a == @.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": 1, ""b"":1}}' @? '$ ? (@.a == @.b)'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": 1, ""b"":1}}' @? '$.c ? (@.a == @.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": 1, ""b"":1}}' @? '$.c ? ($.c.a == @.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": 1, ""b"":1}}' @? '$.* ? (@.a == @.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": 1, ""b"":1}' @? '$.** ? (@.a == @.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": 1, ""b"":1}}' @? '$.** ? (@.a == @.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_query('{""c"": {""a"": 2, ""b"":1}}', '$.** ? (@.a == 1 + 1)')",jsonb_jsonpath.sql,SAME,,"[({'a': 2, 'b': 1},)]"
postgresql,postgresql,"select jsonb_path_query('{""c"": {""a"": 2, ""b"":1}}', '$.** ? (@.a == (1 + 1))')",jsonb_jsonpath.sql,SAME,,"[({'a': 2, 'b': 1},)]"
postgresql,postgresql,"select jsonb_path_query('{""c"": {""a"": 2, ""b"":1}}', '$.** ? (@.a == @.b + 1)')",jsonb_jsonpath.sql,SAME,,"[({'a': 2, 'b': 1},)]"
postgresql,postgresql,"select jsonb_path_query('{""c"": {""a"": 2, ""b"":1}}', '$.** ? (@.a == (@.b + 1))')",jsonb_jsonpath.sql,SAME,,"[({'a': 2, 'b': 1},)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": -1, ""b"":1}}' @? '$.** ? (@.a == - 1)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": -1, ""b"":1}}' @? '$.** ? (@.a == -1)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": -1, ""b"":1}}' @? '$.** ? (@.a == -@.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": -1, ""b"":1}}' @? '$.** ? (@.a == - @.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": 0, ""b"":1}}' @? '$.** ? (@.a == 1 - @.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": 2, ""b"":1}}' @? '$.** ? (@.a == 1 - - @.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""c"": {""a"": 0, ""b"":1}}' @? '$.** ? (@.a == 1 - +@.b)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '[1,2,3]' @? '$ ? (+@[*] > +2)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '[1,2,3]' @? '$ ? (+@[*] > +3)'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '[1,2,3]' @? '$ ? (-@[*] < -2)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '[1,2,3]' @? '$ ? (-@[*] < -3)'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,select jsonb '1' @? '$ ? ($ > 0)',jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_query('[1,2,0,3]', '$[*] ? (2 / @ > 0)')",jsonb_jsonpath.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,"select jsonb_path_query('[1,2,0,3]', '$[*] ? ((2 / @ > 0) is unknown)')",jsonb_jsonpath.sql,SAME,,"[(0,)]"
postgresql,postgresql,"select jsonb_path_query('1', '$ + ""2""', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[1, 2]', '3 * $', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('""a""', '-$', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[1,""2"",3]', '+$', silent => true)",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select jsonb '[""1"",2,0,3]' @? '-$[*]'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '[1,""2"",0,3]' @? '-$[*]'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '[""1"",2,0,3]' @? 'strict -$[*]'",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb '[1,""2"",0,3]' @? 'strict -$[*]'",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": [2]}', 'lax $.a * 3')",jsonb_jsonpath.sql,SAME,,"[(6,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": [2]}', 'lax $.a + 3')",jsonb_jsonpath.sql,SAME,,"[(5,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": [2, 3, 4]}', 'lax -$.a')",jsonb_jsonpath.sql,SAME,,"[(-2,), (-3,), (-4,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": [1, 2]}', 'lax $.a * 3', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('2', '$ > 1')",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_query('2', '$ <= 1')",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb_path_query('2', '$ == ""2""')",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb '2' @? '$ == ""2""'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,select jsonb '2' @@ '$ > 1',jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,select jsonb '2' @@ '$ <= 1',jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb '2' @@ '$ == ""2""'",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,select jsonb '2' @@ '1',jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,select jsonb '{}' @@ '$',jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,select jsonb '[]' @@ '$',jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb '[1,2,3]' @@ '$[*]'",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,select jsonb '[]' @@ '$[*]',jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb_path_match('[[1, true], [2, false]]', 'strict $[*] ? (@[0] > $x) [1]', '{""x"": 1}')",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select jsonb_path_match('[[1, true], [2, false]]', 'strict $[*] ? (@[0] < $x) [1]', '{""x"": 2}')",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_match('[{""a"": 1}, {""a"": 2}, 3]', 'lax exists($[*].a)', silent => false)",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_match('[{""a"": 1}, {""a"": 2}, 3]', 'lax exists($[*].a)', silent => true)",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_match('[{""a"": 1}, {""a"": 2}, 3]', 'strict exists($[*].a)', silent => false)",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb_path_match('[{""a"": 1}, {""a"": 2}, 3]', 'strict exists($[*].a)', silent => true)",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select jsonb_path_query('[null,1,true,""a"",[],{}]', '$.type()')",jsonb_jsonpath.sql,SAME,,"[('array',)]"
postgresql,postgresql,"select jsonb_path_query('[null,1,true,""a"",[],{}]', 'lax $.type()')",jsonb_jsonpath.sql,SAME,,"[('array',)]"
postgresql,postgresql,"select jsonb_path_query('[null,1,true,""a"",[],{}]', '$[*].type()')",jsonb_jsonpath.sql,SAME,,"[('null',), ('number',), ('boolean',), ('string',), ('array',), ('object',)]"
postgresql,postgresql,"select jsonb_path_query('null', 'null.type()')",jsonb_jsonpath.sql,SAME,,"[('null',)]"
postgresql,postgresql,"select jsonb_path_query('null', 'true.type()')",jsonb_jsonpath.sql,SAME,,"[('boolean',)]"
postgresql,postgresql,"select jsonb_path_query('null', '(123).type()')",jsonb_jsonpath.sql,SAME,,"[('number',)]"
postgresql,postgresql,"select jsonb_path_query('null', '""123"".type()')",jsonb_jsonpath.sql,SAME,,"[('string',)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": 2}', '($.a - 5).abs() + 10')",jsonb_jsonpath.sql,SAME,,"[(13,)]"
postgresql,postgresql,"select jsonb_path_query('{""a"": 2.5}', '-($.a * $.a).floor() % 4.3')",jsonb_jsonpath.sql,SAME,,"[(-1.7,)]"
postgresql,postgresql,"select jsonb_path_query('[1, 2, 3]', '($[*] > 2) ? (@ == true)')",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_query('[1, 2, 3]', '($[*] > 3).type()')",jsonb_jsonpath.sql,SAME,,"[('boolean',)]"
postgresql,postgresql,"select jsonb_path_query('[1, 2, 3]', '($[*].a > 3).type()')",jsonb_jsonpath.sql,SAME,,"[('boolean',)]"
postgresql,postgresql,"select jsonb_path_query('[1, 2, 3]', 'strict ($[*].a > 3).type()')",jsonb_jsonpath.sql,SAME,,"[('null',)]"
postgresql,postgresql,"select jsonb_path_query('[1,null,true,""11"",[],[1],[1,2,3],{},{""a"":1,""b"":2}]', 'strict $[*].size()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[1,null,true,""11"",[],[1],[1,2,3],{},{""a"":1,""b"":2}]', 'lax $[*].size()')",jsonb_jsonpath.sql,SAME,,"[(1,), (1,), (1,), (1,), (0,), (1,), (3,), (1,), (1,)]"
postgresql,postgresql,"select jsonb_path_query('[0, 1, -2, -3.4, 5.6]', '$[*].abs()')",jsonb_jsonpath.sql,SAME,,"[(0,), (1,), (2,), (3.4,), (5.6,)]"
postgresql,postgresql,"select jsonb_path_query('[0, 1, -2, -3.4, 5.6]', '$[*].floor()')",jsonb_jsonpath.sql,SAME,,"[(0,), (1,), (-2,), (-4,), (5,)]"
postgresql,postgresql,"select jsonb_path_query('[0, 1, -2, -3.4, 5.6]', '$[*].ceiling()')",jsonb_jsonpath.sql,SAME,,"[(0,), (1,), (-2,), (-3,), (6,)]"
postgresql,postgresql,"select jsonb_path_query('[0, 1, -2, -3.4, 5.6]', '$[*].ceiling().abs()')",jsonb_jsonpath.sql,SAME,,"[(0,), (1,), (2,), (3,), (6,)]"
postgresql,postgresql,"select jsonb_path_query('[0, 1, -2, -3.4, 5.6]', '$[*].ceiling().abs().type()')",jsonb_jsonpath.sql,SAME,,"[('number',), ('number',), ('number',), ('number',), ('number',)]"
postgresql,postgresql,"select jsonb_path_query('[{},1]', '$[*].keyvalue()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{}', '$.keyvalue()')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{""a"": 1, ""b"": [1, 2], ""c"": {""a"": ""bbb""}}', '$.keyvalue()')",jsonb_jsonpath.sql,SAME,,"[({'id': 0, 'key': 'a', 'value': 1},), ({'id': 0, 'key': 'b', 'value': [1, 2]},), ({'id': 0, 'key': 'c', 'value': {'a': 'bbb'}},)]"
postgresql,postgresql,"select jsonb_path_query('[{""a"": 1, ""b"": [1, 2]}, {""c"": {""a"": ""bbb""}}]', '$[*].keyvalue()')",jsonb_jsonpath.sql,SAME,,"[({'id': 12, 'key': 'a', 'value': 1},), ({'id': 12, 'key': 'b', 'value': [1, 2]},), ({'id': 72, 'key': 'c', 'value': {'a': 'bbb'}},)]"
postgresql,postgresql,"select jsonb_path_query('[{""a"": 1, ""b"": [1, 2]}, {""c"": {""a"": ""bbb""}}]', 'lax $.keyvalue()')",jsonb_jsonpath.sql,SAME,,"[({'id': 12, 'key': 'a', 'value': 1},), ({'id': 12, 'key': 'b', 'value': [1, 2]},), ({'id': 72, 'key': 'c', 'value': {'a': 'bbb'}},)]"
postgresql,postgresql,"select jsonb '{""a"": 1, ""b"": [1, 2]}' @? 'lax $.keyvalue()'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb '{""a"": 1, ""b"": [1, 2]}' @? 'lax $.keyvalue().key'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_query('null', '$.double()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('true', '$.double()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[]', '$.double()')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[]', 'strict $.double()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{}', '$.double()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('1.23', '$.double()')",jsonb_jsonpath.sql,SAME,,"[(1.23,)]"
postgresql,postgresql,"select jsonb_path_query('""1.23""', '$.double()')",jsonb_jsonpath.sql,SAME,,"[(1.23,)]"
postgresql,postgresql,"select jsonb_path_query('""inf""', '$.double()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('""-inf""', '$.double()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('{}', '$.abs()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('true', '$.floor()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('""1.2""', '$.ceiling()', silent => true)",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('["""", ""a"", ""abc"", ""abcabc""]', '$[*] ? (@ starts with ""abc"")')",jsonb_jsonpath.sql,SAME,,"[('abc',), ('abcabc',)]"
postgresql,postgresql,"select jsonb_path_query('["""", ""a"", ""abc"", ""abcabc""]', 'strict $ ? (@[*] starts with ""abc"")')",jsonb_jsonpath.sql,SAME,,"[(['', 'a', 'abc', 'abcabc'],)]"
postgresql,postgresql,"select jsonb_path_query('["""", ""a"", ""abd"", ""abdabc""]', 'strict $ ? (@[*] starts with ""abc"")')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[""abc"", ""abcabc"", null, 1]', 'strict $ ? (@[*] starts with ""abc"")')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[""abc"", ""abcabc"", null, 1]', 'strict $ ? ((@[*] starts with ""abc"") is unknown)')",jsonb_jsonpath.sql,SAME,,"[(['abc', 'abcabc', None, 1],)]"
postgresql,postgresql,"select jsonb_path_query('[[null, 1, ""abc"", ""abcabc""]]', 'lax $ ? (@[*] starts with ""abc"")')",jsonb_jsonpath.sql,SAME,,"[([None, 1, 'abc', 'abcabc'],)]"
postgresql,postgresql,"select jsonb_path_query('[[null, 1, ""abd"", ""abdabc""]]', 'lax $ ? ((@[*] starts with ""abc"") is unknown)')",jsonb_jsonpath.sql,SAME,,"[([None, 1, 'abd', 'abdabc'],)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""abd"", ""abdabc""]', 'lax $[*] ? ((@ starts with ""abc"") is unknown)')",jsonb_jsonpath.sql,SAME,,"[(None,), (1,)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""abc"", ""abd"", ""aBdC"", ""abdacb"", ""babc"", ""adc\nabc"", ""ab\nadc""]', 'lax $[*] ? (@ like_regex ""^ab.*c"")')",jsonb_jsonpath.sql,SAME,,"[('abc',), ('abdacb',)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""abc"", ""abd"", ""aBdC"", ""abdacb"", ""babc"", ""adc\nabc"", ""ab\nadc""]', 'lax $[*] ? (@ like_regex ""^ab.*c"" flag ""i"")')",jsonb_jsonpath.sql,SAME,,"[('abc',), ('aBdC',), ('abdacb',)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""abc"", ""abd"", ""aBdC"", ""abdacb"", ""babc"", ""adc\nabc"", ""ab\nadc""]', 'lax $[*] ? (@ like_regex ""^ab.*c"" flag ""m"")')",jsonb_jsonpath.sql,SAME,,"[('abc',), ('abdacb',), ('adc\nabc',)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""abc"", ""abd"", ""aBdC"", ""abdacb"", ""babc"", ""adc\nabc"", ""ab\nadc""]', 'lax $[*] ? (@ like_regex ""^ab.*c"" flag ""s"")')",jsonb_jsonpath.sql,SAME,,"[('abc',), ('abdacb',), ('ab\nadc',)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""a\b"", ""a\\b"", ""^a\\b$""]', 'lax $[*] ? (@ like_regex ""a\\b"" flag ""q"")')",jsonb_jsonpath.sql,SAME,,"[('a\\b',), ('^a\\b$',)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""a\b"", ""a\\b"", ""^a\\b$""]', 'lax $[*] ? (@ like_regex ""a\\b"" flag """")')",jsonb_jsonpath.sql,SAME,,"[('a\x08',)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""a\b"", ""a\\b"", ""^a\\b$""]', 'lax $[*] ? (@ like_regex ""^a\\b$"" flag ""q"")')",jsonb_jsonpath.sql,SAME,,"[('^a\\b$',)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""a\b"", ""a\\b"", ""^a\\b$""]', 'lax $[*] ? (@ like_regex ""^a\\B$"" flag ""q"")')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""a\b"", ""a\\b"", ""^a\\b$""]', 'lax $[*] ? (@ like_regex ""^a\\B$"" flag ""iq"")')",jsonb_jsonpath.sql,SAME,,"[('^a\\b$',)]"
postgresql,postgresql,"select jsonb_path_query('[null, 1, ""a\b"", ""a\\b"", ""^a\\b$""]', 'lax $[*] ? (@ like_regex ""^a\\b$"" flag """")')",jsonb_jsonpath.sql,SAME,,"[('a\x08',)]"
postgresql,postgresql,"select jsonb_path_query('[]', '$.datetime()')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb '""10-03-2017""' @? '$.datetime(""dd-mm-yyyy"")'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017""', '$.datetime(""dd-mm-yyyy"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017""', '$.datetime(""dd-mm-yyyy"").type()')",jsonb_jsonpath.sql,SAME,,"[('date',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34""', '       $.datetime(""dd-mm-yyyy HH24:MI"").type()')",jsonb_jsonpath.sql,SAME,,"[('timestamp without time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34 +05:20""', '$.datetime(""dd-mm-yyyy HH24:MI TZH:TZM"").type()')",jsonb_jsonpath.sql,SAME,,"[('timestamp with time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34:56""', '$.datetime(""HH24:MI:SS"").type()')",jsonb_jsonpath.sql,SAME,,"[('time without time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34:56 +05:20""', '$.datetime(""HH24:MI:SS TZH:TZM"").type()')",jsonb_jsonpath.sql,SAME,,"[('time with time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017T12:34:56""', '$.datetime(""dd-mm-yyyy\""T\""HH24:MI:SS"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:56',)]"
postgresql,postgresql,set time zone '+00',jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34""', '$.datetime(""dd-mm-yyyy HH24:MI"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34 +05""', '$.datetime(""dd-mm-yyyy HH24:MI TZH"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00+05:00',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34 -05""', '$.datetime(""dd-mm-yyyy HH24:MI TZH"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00-05:00',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34 +05:20""', '$.datetime(""dd-mm-yyyy HH24:MI TZH:TZM"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00+05:20',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34 -05:20""', '$.datetime(""dd-mm-yyyy HH24:MI TZH:TZM"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00-05:20',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34""', '$.datetime(""HH24:MI"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34 +05""', '$.datetime(""HH24:MI TZH"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00+05:00',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34 -05""', '$.datetime(""HH24:MI TZH"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00-05:00',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34 +05:20""', '$.datetime(""HH24:MI TZH:TZM"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00+05:20',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34 -05:20""', '$.datetime(""HH24:MI TZH:TZM"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00-05:20',)]"
postgresql,postgresql,set time zone '+10',jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34""', '$.datetime(""dd-mm-yyyy HH24:MI"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34 +05""', '$.datetime(""dd-mm-yyyy HH24:MI TZH"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00+05:00',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34 -05""', '$.datetime(""dd-mm-yyyy HH24:MI TZH"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00-05:00',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34 +05:20""', '$.datetime(""dd-mm-yyyy HH24:MI TZH:TZM"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00+05:20',)]"
postgresql,postgresql,"select jsonb_path_query('""10-03-2017 12:34 -05:20""', '$.datetime(""dd-mm-yyyy HH24:MI TZH:TZM"")')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00-05:20',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34""', '$.datetime(""HH24:MI"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34 +05""', '$.datetime(""HH24:MI TZH"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00+05:00',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34 -05""', '$.datetime(""HH24:MI TZH"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00-05:00',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34 +05:20""', '$.datetime(""HH24:MI TZH:TZM"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00+05:20',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34 -05:20""', '$.datetime(""HH24:MI TZH:TZM"")')",jsonb_jsonpath.sql,SAME,,"[('12:34:00-05:20',)]"
postgresql,postgresql,set time zone default,jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query('""2017-03-10""', '$.datetime().type()')",jsonb_jsonpath.sql,SAME,,"[('date',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10 12:34:56""', '$.datetime().type()')",jsonb_jsonpath.sql,SAME,,"[('timestamp without time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10 12:34:56""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:56',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10 12:34:56+3""', '$.datetime().type()')",jsonb_jsonpath.sql,SAME,,"[('timestamp with time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10 12:34:56+3""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:56+03:00',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10 12:34:56+3:10""', '$.datetime().type()')",jsonb_jsonpath.sql,SAME,,"[('timestamp with time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10 12:34:56+3:10""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:56+03:10',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10T12:34:56+3:10""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:56+03:10',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10 12:34:56.789+3:10""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:56.789+03:10',)]"
postgresql,postgresql,"select jsonb_path_query('""2017-03-10T12:34:56.789+3:10""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:56.789+03:10',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34:56""', '$.datetime().type()')",jsonb_jsonpath.sql,SAME,,"[('time without time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34:56""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('12:34:56',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34:56+3""', '$.datetime().type()')",jsonb_jsonpath.sql,SAME,,"[('time with time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34:56+3""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('12:34:56+03:00',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34:56+3:10""', '$.datetime().type()')",jsonb_jsonpath.sql,SAME,,"[('time with time zone',)]"
postgresql,postgresql,"select jsonb_path_query('""12:34:56+3:10""', '$.datetime()')",jsonb_jsonpath.sql,SAME,,"[('12:34:56+03:10',)]"
postgresql,postgresql,set time zone '+00',jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""2017-03-10"", ""2017-03-11"", ""2017-03-09"", ""12:34:56"", ""01:02:03+04"", ""2017-03-10 00:00:00"", ""2017-03-10 12:34:56"", ""2017-03-10 01:02:03+04"", ""2017-03-10 03:00:00+03""]', 	'$[*].datetime() ? (@ == ""10.03.2017"".datetime(""dd.mm.yyyy""))')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10',), ('2017-03-10T00:00:00',), ('2017-03-10T03:00:00+03:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""2017-03-10"", ""2017-03-11"", ""2017-03-09"", ""12:34:56"", ""01:02:03+04"", ""2017-03-10 00:00:00"", ""2017-03-10 12:34:56"", ""2017-03-10 01:02:03+04"", ""2017-03-10 03:00:00+03""]', 	'$[*].datetime() ? (@ >= ""10.03.2017"".datetime(""dd.mm.yyyy""))')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10',), ('2017-03-11',), ('2017-03-10T00:00:00',), ('2017-03-10T12:34:56',), ('2017-03-10T03:00:00+03:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""2017-03-10"", ""2017-03-11"", ""2017-03-09"", ""12:34:56"", ""01:02:03+04"", ""2017-03-10 00:00:00"", ""2017-03-10 12:34:56"", ""2017-03-10 01:02:03+04"", ""2017-03-10 03:00:00+03""]', 	'$[*].datetime() ? (@ <  ""10.03.2017"".datetime(""dd.mm.yyyy""))')",jsonb_jsonpath.sql,SAME,,"[('2017-03-09',), ('2017-03-10T01:02:03+04:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""12:34:00"", ""12:35:00"", ""12:36:00"", ""12:35:00+00"", ""12:35:00+01"", ""13:35:00+01"", ""2017-03-10"", ""2017-03-10 12:35:00"", ""2017-03-10 12:35:00+01""]', 	'$[*].datetime() ? (@ == ""12:35"".datetime(""HH24:MI""))')",jsonb_jsonpath.sql,SAME,,"[('12:35:00',), ('12:35:00+00:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""12:34:00"", ""12:35:00"", ""12:36:00"", ""12:35:00+00"", ""12:35:00+01"", ""13:35:00+01"", ""2017-03-10"", ""2017-03-10 12:35:00"", ""2017-03-10 12:35:00+01""]', 	'$[*].datetime() ? (@ >= ""12:35"".datetime(""HH24:MI""))')",jsonb_jsonpath.sql,SAME,,"[('12:35:00',), ('12:36:00',), ('12:35:00+00:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""12:34:00"", ""12:35:00"", ""12:36:00"", ""12:35:00+00"", ""12:35:00+01"", ""13:35:00+01"", ""2017-03-10"", ""2017-03-10 12:35:00"", ""2017-03-10 12:35:00+01""]', 	'$[*].datetime() ? (@ <  ""12:35"".datetime(""HH24:MI""))')",jsonb_jsonpath.sql,SAME,,"[('12:34:00',), ('12:35:00+01:00',), ('13:35:00+01:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""12:34:00+01"", ""12:35:00+01"", ""12:36:00+01"", ""12:35:00+02"", ""12:35:00-02"", ""10:35:00"", ""11:35:00"", ""12:35:00"", ""2017-03-10"", ""2017-03-10 12:35:00"", ""2017-03-10 12:35:00 +1""]', 	'$[*].datetime() ? (@ == ""12:35 +1"".datetime(""HH24:MI TZH""))')",jsonb_jsonpath.sql,SAME,,"[('12:35:00+01:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""12:34:00+01"", ""12:35:00+01"", ""12:36:00+01"", ""12:35:00+02"", ""12:35:00-02"", ""10:35:00"", ""11:35:00"", ""12:35:00"", ""2017-03-10"", ""2017-03-10 12:35:00"", ""2017-03-10 12:35:00 +1""]', 	'$[*].datetime() ? (@ >= ""12:35 +1"".datetime(""HH24:MI TZH""))')",jsonb_jsonpath.sql,SAME,,"[('12:35:00+01:00',), ('12:36:00+01:00',), ('12:35:00-02:00',), ('11:35:00',), ('12:35:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""12:34:00+01"", ""12:35:00+01"", ""12:36:00+01"", ""12:35:00+02"", ""12:35:00-02"", ""10:35:00"", ""11:35:00"", ""12:35:00"", ""2017-03-10"", ""2017-03-10 12:35:00"", ""2017-03-10 12:35:00 +1""]', 	'$[*].datetime() ? (@ <  ""12:35 +1"".datetime(""HH24:MI TZH""))')",jsonb_jsonpath.sql,SAME,,"[('12:34:00+01:00',), ('12:35:00+02:00',), ('10:35:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""2017-03-10 12:34:00"", ""2017-03-10 12:35:00"", ""2017-03-10 12:36:00"", ""2017-03-10 12:35:00+01"", ""2017-03-10 13:35:00+01"", ""2017-03-10 12:35:00-01"", ""2017-03-10"", ""2017-03-11"", ""12:34:56"", ""12:34:56+01""]', 	'$[*].datetime() ? (@ == ""10.03.2017 12:35"".datetime(""dd.mm.yyyy HH24:MI""))')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:35:00',), ('2017-03-10T13:35:00+01:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""2017-03-10 12:34:00"", ""2017-03-10 12:35:00"", ""2017-03-10 12:36:00"", ""2017-03-10 12:35:00+01"", ""2017-03-10 13:35:00+01"", ""2017-03-10 12:35:00-01"", ""2017-03-10"", ""2017-03-11"", ""12:34:56"", ""12:34:56+01""]', 	'$[*].datetime() ? (@ >= ""10.03.2017 12:35"".datetime(""dd.mm.yyyy HH24:MI""))')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:35:00',), ('2017-03-10T12:36:00',), ('2017-03-10T13:35:00+01:00',), ('2017-03-10T12:35:00-01:00',), ('2017-03-11',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""2017-03-10 12:34:00"", ""2017-03-10 12:35:00"", ""2017-03-10 12:36:00"", ""2017-03-10 12:35:00+01"", ""2017-03-10 13:35:00+01"", ""2017-03-10 12:35:00-01"", ""2017-03-10"", ""2017-03-11"", ""12:34:56"", ""12:34:56+01""]', 	'$[*].datetime() ? (@ < ""10.03.2017 12:35"".datetime(""dd.mm.yyyy HH24:MI""))')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00',), ('2017-03-10T12:35:00+01:00',), ('2017-03-10',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""2017-03-10 12:34:00+01"", ""2017-03-10 12:35:00+01"", ""2017-03-10 12:36:00+01"", ""2017-03-10 12:35:00+02"", ""2017-03-10 12:35:00-02"", ""2017-03-10 10:35:00"", ""2017-03-10 11:35:00"", ""2017-03-10 12:35:00"", ""2017-03-10"", ""2017-03-11"", ""12:34:56"", ""12:34:56+01""]', 	'$[*].datetime() ? (@ == ""10.03.2017 12:35 +1"".datetime(""dd.mm.yyyy HH24:MI TZH""))')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:35:00+01:00',), ('2017-03-10T11:35:00',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""2017-03-10 12:34:00+01"", ""2017-03-10 12:35:00+01"", ""2017-03-10 12:36:00+01"", ""2017-03-10 12:35:00+02"", ""2017-03-10 12:35:00-02"", ""2017-03-10 10:35:00"", ""2017-03-10 11:35:00"", ""2017-03-10 12:35:00"", ""2017-03-10"", ""2017-03-11"", ""12:34:56"", ""12:34:56+01""]', 	'$[*].datetime() ? (@ >= ""10.03.2017 12:35 +1"".datetime(""dd.mm.yyyy HH24:MI TZH""))')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:35:00+01:00',), ('2017-03-10T12:36:00+01:00',), ('2017-03-10T12:35:00-02:00',), ('2017-03-10T11:35:00',), ('2017-03-10T12:35:00',), ('2017-03-11',)]"
postgresql,postgresql,"select jsonb_path_query_tz( 	'[""2017-03-10 12:34:00+01"", ""2017-03-10 12:35:00+01"", ""2017-03-10 12:36:00+01"", ""2017-03-10 12:35:00+02"", ""2017-03-10 12:35:00-02"", ""2017-03-10 10:35:00"", ""2017-03-10 11:35:00"", ""2017-03-10 12:35:00"", ""2017-03-10"", ""2017-03-11"", ""12:34:56"", ""12:34:56+01""]', 	'$[*].datetime() ? (@ < ""10.03.2017 12:35 +1"".datetime(""dd.mm.yyyy HH24:MI TZH""))')",jsonb_jsonpath.sql,SAME,,"[('2017-03-10T12:34:00+01:00',), ('2017-03-10T12:35:00+02:00',), ('2017-03-10T10:35:00',), ('2017-03-10',)]"
postgresql,postgresql,"select jsonb_path_query('""1000000-01-01""', '$.datetime() > ""2020-01-01 12:00:00"".datetime()'::jsonpath)",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,set time zone default,jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"SELECT jsonb_path_query('[{""a"": 1}, {""a"": 2}]', '$[*]')",jsonb_jsonpath.sql,SAME,,"[({'a': 1},), ({'a': 2},)]"
postgresql,postgresql,"SELECT jsonb_path_query('[{""a"": 1}, {""a"": 2}]', '$[*] ? (@.a > 10)')",jsonb_jsonpath.sql,SAME,,[]
postgresql,postgresql,"SELECT jsonb_path_query('[{""a"": 1}]', 'false')",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_path_query_array('[{""a"": 1}, {""a"": 2}]', '$[*].a')",jsonb_jsonpath.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,"SELECT jsonb_path_query_array('[{""a"": 1}, {""a"": 2}]', '$[*].a ? (@ == 1)')",jsonb_jsonpath.sql,SAME,,"[([1],)]"
postgresql,postgresql,"SELECT jsonb_path_query_array('[{""a"": 1}, {""a"": 2}]', '$[*].a ? (@ > 10)')",jsonb_jsonpath.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT jsonb_path_query_array('[{""a"": 1}, {""a"": 2}, {""a"": 3}, {""a"": 5}]', '$[*].a ? (@ > $min && @ < $max)', vars => '{""min"": 1, ""max"": 4}')",jsonb_jsonpath.sql,SAME,,"[([2, 3],)]"
postgresql,postgresql,"SELECT jsonb_path_query_array('[{""a"": 1}, {""a"": 2}, {""a"": 3}, {""a"": 5}]', '$[*].a ? (@ > $min && @ < $max)', vars => '{""min"": 3, ""max"": 4}')",jsonb_jsonpath.sql,SAME,,"[([],)]"
postgresql,postgresql,"SELECT jsonb_path_query_first('[{""a"": 1}, {""a"": 2}, {}]', 'strict $[*].a', silent => true)",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT jsonb_path_query_first('[{""a"": 1}, {""a"": 2}]', '$[*].a')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT jsonb_path_query_first('[{""a"": 1}, {""a"": 2}]', '$[*].a ? (@ == 1)')",jsonb_jsonpath.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT jsonb_path_query_first('[{""a"": 1}, {""a"": 2}]', '$[*].a ? (@ > 10)')",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsonb_path_query_first('[{""a"": 1}, {""a"": 2}, {""a"": 3}, {""a"": 5}]', '$[*].a ? (@ > $min && @ < $max)', vars => '{""min"": 1, ""max"": 4}')",jsonb_jsonpath.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT jsonb_path_query_first('[{""a"": 1}, {""a"": 2}, {""a"": 3}, {""a"": 5}]', '$[*].a ? (@ > $min && @ < $max)', vars => '{""min"": 3, ""max"": 4}')",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsonb_path_query_first('[{""a"": 1}]', 'false')",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb '[{""a"": 1}, {""a"": 2}]' @? '$[*].a ? (@ > 1)'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '[{""a"": 1}, {""a"": 2}]' @? '$[*] ? (@.a > 2)'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_path_exists('[{""a"": 1}, {""a"": 2}]', '$[*].a ? (@ > 1)')",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_path_exists('[{""a"": 1}, {""a"": 2}, {""a"": 3}, {""a"": 5}]', '$[*] ? (@.a > $min && @.a < $max)', vars => '{""min"": 1, ""max"": 4}')",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_path_exists('[{""a"": 1}, {""a"": 2}, {""a"": 3}, {""a"": 5}]', '$[*] ? (@.a > $min && @.a < $max)', vars => '{""min"": 3, ""max"": 4}')",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_path_exists('[{""a"": 1}]', 'false')",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_path_match('true', '$', silent => false)",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_path_match('false', '$', silent => false)",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_path_match('null', '$', silent => false)",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsonb_path_match('1', '$', silent => true)",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsonb_path_match('{}', 'strict $.a', silent => true)",jsonb_jsonpath.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT jsonb '[{""a"": 1}, {""a"": 2}]' @@ '$[*].a > 1'",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb '[{""a"": 1}, {""a"": 2}]' @@ '$[*].a > 2'",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT jsonb_path_match('[{""a"": 1}, {""a"": 2}]', '$[*].a > 1')",jsonb_jsonpath.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT jsonb_path_match('[{""a"": 1}]', 'false')",jsonb_jsonpath.sql,SAME,,"[(False,)]"
postgresql,postgresql,"WITH str(j, num) AS ( 	SELECT jsonb_build_object('s', s), num 	FROM unnest('{"""", ""a"", ""ab"", ""abc"", ""abcd"", ""b"", ""A"", ""AB"", ""ABC"", ""ABc"", ""ABcD"", ""B""}'::text[]) WITH ORDINALITY AS a(s, num) ) SELECT 	s1.j, s2.j, 	jsonb_path_query_first(s1.j, '$.s < $s', vars => s2.j) lt, 	jsonb_path_query_first(s1.j, '$.s <= $s', vars => s2.j) le, 	jsonb_path_query_first(s1.j, '$.s == $s', vars => s2.j) eq, 	jsonb_path_query_first(s1.j, '$.s >= $s', vars => s2.j) ge, 	jsonb_path_query_first(s1.j, '$.s > $s', vars => s2.j) gt FROM str s1, str s2 ORDER BY s1.num, s2.num",jsonb_jsonpath.sql,SAME,,"[({'s': ''}, {'s': ''}, False, True, True, True, False), ({'s': ''}, {'s': 'a'}, True, True, False, False, False), ({'s': ''}, {'s': 'ab'}, True, True, False, False, False), ({'s': ''}, {'s': 'abc'}, True, True, False, False, False), ({'s': ''}, {'s': 'abcd'}, True, True, False, False, False), ({'s': ''}, {'s': 'b'}, True, True, False, False, False), ({'s': ''}, {'s': 'A'}, True, True, False, False, False), ({'s': ''}, {'s': 'AB'}, True, True, False, False, False), ({'s': ''}, {'s': 'ABC'}, True, True, False, False, False), ({'s': ''}, {'s': 'ABc'}, True, True, False, False, False), ({'s': ''}, {'s': 'ABcD'}, True, True, False, False, False), ({'s': ''}, {'s': 'B'}, True, True, False, False, False), ({'s': 'a'}, {'s': ''}, False, False, False, True, True), ({'s': 'a'}, {'s': 'a'}, False, True, True, True, False), ({'s': 'a'}, {'s': 'ab'}, True, True, False, False, False), ({'s': 'a'}, {'s': 'abc'}, True, True, False, False, False), ({'s': 'a'}, {'s': 'abcd'}, True, True, False, False, False), ({'s': 'a'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'a'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'a'}, {'s': 'AB'}, False, False, False, True, True), ({'s': 'a'}, {'s': 'ABC'}, False, False, False, True, True), ({'s': 'a'}, {'s': 'ABc'}, False, False, False, True, True), ({'s': 'a'}, {'s': 'ABcD'}, False, False, False, True, True), ({'s': 'a'}, {'s': 'B'}, False, False, False, True, True), ({'s': 'ab'}, {'s': ''}, False, False, False, True, True), ({'s': 'ab'}, {'s': 'a'}, False, False, False, True, True), ({'s': 'ab'}, {'s': 'ab'}, False, True, True, True, False), ({'s': 'ab'}, {'s': 'abc'}, True, True, False, False, False), ({'s': 'ab'}, {'s': 'abcd'}, True, True, False, False, False), ({'s': 'ab'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'ab'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'ab'}, {'s': 'AB'}, False, False, False, True, True), ({'s': 'ab'}, {'s': 'ABC'}, False, False, False, True, True), ({'s': 'ab'}, {'s': 'ABc'}, False, False, False, True, True), ({'s': 'ab'}, {'s': 'ABcD'}, False, False, False, True, True), ({'s': 'ab'}, {'s': 'B'}, False, False, False, True, True), ({'s': 'abc'}, {'s': ''}, False, False, False, True, True), ({'s': 'abc'}, {'s': 'a'}, False, False, False, True, True), ({'s': 'abc'}, {'s': 'ab'}, False, False, False, True, True), ({'s': 'abc'}, {'s': 'abc'}, False, True, True, True, False), ({'s': 'abc'}, {'s': 'abcd'}, True, True, False, False, False), ({'s': 'abc'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'abc'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'abc'}, {'s': 'AB'}, False, False, False, True, True), ({'s': 'abc'}, {'s': 'ABC'}, False, False, False, True, True), ({'s': 'abc'}, {'s': 'ABc'}, False, False, False, True, True), ({'s': 'abc'}, {'s': 'ABcD'}, False, False, False, True, True), ({'s': 'abc'}, {'s': 'B'}, False, False, False, True, True), ({'s': 'abcd'}, {'s': ''}, False, False, False, True, True), ({'s': 'abcd'}, {'s': 'a'}, False, False, False, True, True), ({'s': 'abcd'}, {'s': 'ab'}, False, False, False, True, True), ({'s': 'abcd'}, {'s': 'abc'}, False, False, False, True, True), ({'s': 'abcd'}, {'s': 'abcd'}, False, True, True, True, False), ({'s': 'abcd'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'abcd'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'abcd'}, {'s': 'AB'}, False, False, False, True, True), ({'s': 'abcd'}, {'s': 'ABC'}, False, False, False, True, True), ({'s': 'abcd'}, {'s': 'ABc'}, False, False, False, True, True), ({'s': 'abcd'}, {'s': 'ABcD'}, False, False, False, True, True), ({'s': 'abcd'}, {'s': 'B'}, False, False, False, True, True), ({'s': 'b'}, {'s': ''}, False, False, False, True, True), ({'s': 'b'}, {'s': 'a'}, False, False, False, True, True), ({'s': 'b'}, {'s': 'ab'}, False, False, False, True, True), ({'s': 'b'}, {'s': 'abc'}, False, False, False, True, True), ({'s': 'b'}, {'s': 'abcd'}, False, False, False, True, True), ({'s': 'b'}, {'s': 'b'}, False, True, True, True, False), ({'s': 'b'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'b'}, {'s': 'AB'}, False, False, False, True, True), ({'s': 'b'}, {'s': 'ABC'}, False, False, False, True, True), ({'s': 'b'}, {'s': 'ABc'}, False, False, False, True, True), ({'s': 'b'}, {'s': 'ABcD'}, False, False, False, True, True), ({'s': 'b'}, {'s': 'B'}, False, False, False, True, True), ({'s': 'A'}, {'s': ''}, False, False, False, True, True), ({'s': 'A'}, {'s': 'a'}, True, True, False, False, False), ({'s': 'A'}, {'s': 'ab'}, True, True, False, False, False), ({'s': 'A'}, {'s': 'abc'}, True, True, False, False, False), ({'s': 'A'}, {'s': 'abcd'}, True, True, False, False, False), ({'s': 'A'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'A'}, {'s': 'A'}, False, True, True, True, False), ({'s': 'A'}, {'s': 'AB'}, True, True, False, False, False), ({'s': 'A'}, {'s': 'ABC'}, True, True, False, False, False), ({'s': 'A'}, {'s': 'ABc'}, True, True, False, False, False), ({'s': 'A'}, {'s': 'ABcD'}, True, True, False, False, False), ({'s': 'A'}, {'s': 'B'}, True, True, False, False, False), ({'s': 'AB'}, {'s': ''}, False, False, False, True, True), ({'s': 'AB'}, {'s': 'a'}, True, True, False, False, False), ({'s': 'AB'}, {'s': 'ab'}, True, True, False, False, False), ({'s': 'AB'}, {'s': 'abc'}, True, True, False, False, False), ({'s': 'AB'}, {'s': 'abcd'}, True, True, False, False, False), ({'s': 'AB'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'AB'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'AB'}, {'s': 'AB'}, False, True, True, True, False), ({'s': 'AB'}, {'s': 'ABC'}, True, True, False, False, False), ({'s': 'AB'}, {'s': 'ABc'}, True, True, False, False, False), ({'s': 'AB'}, {'s': 'ABcD'}, True, True, False, False, False), ({'s': 'AB'}, {'s': 'B'}, True, True, False, False, False), ({'s': 'ABC'}, {'s': ''}, False, False, False, True, True), ({'s': 'ABC'}, {'s': 'a'}, True, True, False, False, False), ({'s': 'ABC'}, {'s': 'ab'}, True, True, False, False, False), ({'s': 'ABC'}, {'s': 'abc'}, True, True, False, False, False), ({'s': 'ABC'}, {'s': 'abcd'}, True, True, False, False, False), ({'s': 'ABC'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'ABC'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'ABC'}, {'s': 'AB'}, False, False, False, True, True), ({'s': 'ABC'}, {'s': 'ABC'}, False, True, True, True, False), ({'s': 'ABC'}, {'s': 'ABc'}, True, True, False, False, False), ({'s': 'ABC'}, {'s': 'ABcD'}, True, True, False, False, False), ({'s': 'ABC'}, {'s': 'B'}, True, True, False, False, False), ({'s': 'ABc'}, {'s': ''}, False, False, False, True, True), ({'s': 'ABc'}, {'s': 'a'}, True, True, False, False, False), ({'s': 'ABc'}, {'s': 'ab'}, True, True, False, False, False), ({'s': 'ABc'}, {'s': 'abc'}, True, True, False, False, False), ({'s': 'ABc'}, {'s': 'abcd'}, True, True, False, False, False), ({'s': 'ABc'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'ABc'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'ABc'}, {'s': 'AB'}, False, False, False, True, True), ({'s': 'ABc'}, {'s': 'ABC'}, False, False, False, True, True), ({'s': 'ABc'}, {'s': 'ABc'}, False, True, True, True, False), ({'s': 'ABc'}, {'s': 'ABcD'}, True, True, False, False, False), ({'s': 'ABc'}, {'s': 'B'}, True, True, False, False, False), ({'s': 'ABcD'}, {'s': ''}, False, False, False, True, True), ({'s': 'ABcD'}, {'s': 'a'}, True, True, False, False, False), ({'s': 'ABcD'}, {'s': 'ab'}, True, True, False, False, False), ({'s': 'ABcD'}, {'s': 'abc'}, True, True, False, False, False), ({'s': 'ABcD'}, {'s': 'abcd'}, True, True, False, False, False), ({'s': 'ABcD'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'ABcD'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'ABcD'}, {'s': 'AB'}, False, False, False, True, True), ({'s': 'ABcD'}, {'s': 'ABC'}, False, False, False, True, True), ({'s': 'ABcD'}, {'s': 'ABc'}, False, False, False, True, True), ({'s': 'ABcD'}, {'s': 'ABcD'}, False, True, True, True, False), ({'s': 'ABcD'}, {'s': 'B'}, True, True, False, False, False), ({'s': 'B'}, {'s': ''}, False, False, False, True, True), ({'s': 'B'}, {'s': 'a'}, True, True, False, False, False), ({'s': 'B'}, {'s': 'ab'}, True, True, False, False, False), ({'s': 'B'}, {'s': 'abc'}, True, True, False, False, False), ({'s': 'B'}, {'s': 'abcd'}, True, True, False, False, False), ({'s': 'B'}, {'s': 'b'}, True, True, False, False, False), ({'s': 'B'}, {'s': 'A'}, False, False, False, True, True), ({'s': 'B'}, {'s': 'AB'}, False, False, False, True, True), ({'s': 'B'}, {'s': 'ABC'}, False, False, False, True, True), ({'s': 'B'}, {'s': 'ABc'}, False, False, False, True, True), ({'s': 'B'}, {'s': 'ABcD'}, False, False, False, True, True), ({'s': 'B'}, {'s': 'B'}, False, True, True, True, False)]"
postgresql,postgresql,select '$'::jsonpath,jsonpath.sql,SAME,,"[('$',)]"
postgresql,postgresql,select 'strict $'::jsonpath,jsonpath.sql,SAME,,"[('strict $',)]"
postgresql,postgresql,select 'lax $'::jsonpath,jsonpath.sql,SAME,,"[('$',)]"
postgresql,postgresql,select '$.a'::jsonpath,jsonpath.sql,SAME,,"[('$.""a""',)]"
postgresql,postgresql,select '$.a.v'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".""v""',)]"
postgresql,postgresql,select '$.a.*'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".*',)]"
postgresql,postgresql,select '$.*[*]'::jsonpath,jsonpath.sql,SAME,,"[('$.*[*]',)]"
postgresql,postgresql,select '$.a[*]'::jsonpath,jsonpath.sql,SAME,,"[('$.""a""[*]',)]"
postgresql,postgresql,select '$.a[*][*]'::jsonpath,jsonpath.sql,SAME,,"[('$.""a""[*][*]',)]"
postgresql,postgresql,select '$[*]'::jsonpath,jsonpath.sql,SAME,,"[('$[*]',)]"
postgresql,postgresql,select '$[0]'::jsonpath,jsonpath.sql,SAME,,"[('$[0]',)]"
postgresql,postgresql,select '$[*][0]'::jsonpath,jsonpath.sql,SAME,,"[('$[*][0]',)]"
postgresql,postgresql,select '$[*].a'::jsonpath,jsonpath.sql,SAME,,"[('$[*].""a""',)]"
postgresql,postgresql,select '$[*][0].a.b'::jsonpath,jsonpath.sql,SAME,,"[('$[*][0].""a"".""b""',)]"
postgresql,postgresql,select '$.a.**.b'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".**.""b""',)]"
postgresql,postgresql,select '$.a.**{2}.b'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".**{2}.""b""',)]"
postgresql,postgresql,select '$.a.**{2 to 2}.b'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".**{2}.""b""',)]"
postgresql,postgresql,select '$.a.**{2 to 5}.b'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".**{2 to 5}.""b""',)]"
postgresql,postgresql,select '$.a.**{0 to 5}.b'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".**{0 to 5}.""b""',)]"
postgresql,postgresql,select '$.a.**{5 to last}.b'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".**{5 to last}.""b""',)]"
postgresql,postgresql,select '$.a.**{last}.b'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".**{last}.""b""',)]"
postgresql,postgresql,select '$.a.**{last to 5}.b'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".**{last to 5}.""b""',)]"
postgresql,postgresql,select '$+1'::jsonpath,jsonpath.sql,SAME,,"[('($ + 1)',)]"
postgresql,postgresql,select '$-1'::jsonpath,jsonpath.sql,SAME,,"[('($ - 1)',)]"
postgresql,postgresql,select '1 * 2 + 4 % -3 != false'::jsonpath,jsonpath.sql,SAME,,"[('(1 * 2 + 4 % -3 != false)',)]"
postgresql,postgresql,"select '""\b\f\r\n\t\v\""\''\\""'::jsonpath",jsonpath.sql,SAME,,"[('""\\b\\f\\r\\n\\t\\u000b\\""\'\\\\""',)]"
postgresql,postgresql,"select '""\x50\u0067\u{53}\u{051}\u{00004C}""'::jsonpath",jsonpath.sql,SAME,,"[('""PgSQL""',)]"
postgresql,postgresql,"select '$.foo\x50\u0067\u{53}\u{051}\u{00004C}\t\""bar'::jsonpath",jsonpath.sql,SAME,,"[('$.""fooPgSQL\\t\\""bar""',)]"
postgresql,postgresql,"select '""\z""'::jsonpath",jsonpath.sql,SAME,,"[('""z""',)]"
postgresql,postgresql,select '$.g ? ($.a == 1)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?($.""a"" == 1)',)]"
postgresql,postgresql,select '$.g ? (@ == 1)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(@ == 1)',)]"
postgresql,postgresql,select '$.g ? (@.a == 1)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(@.""a"" == 1)',)]"
postgresql,postgresql,select '$.g ? (@.a == 1 || @.a == 4)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(@.""a"" == 1 || @.""a"" == 4)',)]"
postgresql,postgresql,select '$.g ? (@.a == 1 && @.a == 4)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(@.""a"" == 1 && @.""a"" == 4)',)]"
postgresql,postgresql,select '$.g ? (@.a == 1 || @.a == 4 && @.b == 7)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(@.""a"" == 1 || @.""a"" == 4 && @.""b"" == 7)',)]"
postgresql,postgresql,select '$.g ? (@.a == 1 || !(@.a == 4) && @.b == 7)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(@.""a"" == 1 || !(@.""a"" == 4) && @.""b"" == 7)',)]"
postgresql,postgresql,select '$.g ? (@.a == 1 || !(@.x >= 123 || @.a == 4) && @.b == 7)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(@.""a"" == 1 || !(@.""x"" >= 123 || @.""a"" == 4) && @.""b"" == 7)',)]"
postgresql,postgresql,"select '$.g ? (@.x >= @[*]?(@.a > ""abc""))'::jsonpath",jsonpath.sql,SAME,,"[('$.""g""?(@.""x"" >= @[*]?(@.""a"" > ""abc""))',)]"
postgresql,postgresql,select '$.g ? ((@.x >= 123 || @.a == 4) is unknown)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?((@.""x"" >= 123 || @.""a"" == 4) is unknown)',)]"
postgresql,postgresql,select '$.g ? (exists (@.x))'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(exists (@.""x""))',)]"
postgresql,postgresql,select '$.g ? (exists (@.x ? (@ == 14)))'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(exists (@.""x""?(@ == 14)))',)]"
postgresql,postgresql,select '$.g ? ((@.x >= 123 || @.a == 4) && exists (@.x ? (@ == 14)))'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?((@.""x"" >= 123 || @.""a"" == 4) && exists (@.""x""?(@ == 14)))',)]"
postgresql,postgresql,select '$.g ? (+@.x >= +-(+@.a + 2))'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(+@.""x"" >= +(-(+@.""a"" + 2)))',)]"
postgresql,postgresql,select '$a'::jsonpath,jsonpath.sql,SAME,,"[('$""a""',)]"
postgresql,postgresql,select '$a.b'::jsonpath,jsonpath.sql,SAME,,"[('$""a"".""b""',)]"
postgresql,postgresql,select '$a[*]'::jsonpath,jsonpath.sql,SAME,,"[('$""a""[*]',)]"
postgresql,postgresql,select '$.g ? (@.zip == $zip)'::jsonpath,jsonpath.sql,SAME,,"[('$.""g""?(@.""zip"" == $""zip"")',)]"
postgresql,postgresql,"select '$.a[1,2, 3 to 16]'::jsonpath",jsonpath.sql,SAME,,"[('$.""a""[1,2,3 to 16]',)]"
postgresql,postgresql,"select '$.a[$a + 1, ($b[*]) to -($[0] * 2)]'::jsonpath",jsonpath.sql,SAME,,"[('$.""a""[$""a"" + 1,$""b""[*] to -($[0] * 2)]',)]"
postgresql,postgresql,select '$.a[$.a.size() - 3]'::jsonpath,jsonpath.sql,SAME,,"[('$.""a""[$.""a"".size() - 3]',)]"
postgresql,postgresql,"select '""last""'::jsonpath",jsonpath.sql,SAME,,"[('""last""',)]"
postgresql,postgresql,select '$.last'::jsonpath,jsonpath.sql,SAME,,"[('$.""last""',)]"
postgresql,postgresql,select '$[last]'::jsonpath,jsonpath.sql,SAME,,"[('$[last]',)]"
postgresql,postgresql,select '$[$[0] ? (last > 0)]'::jsonpath,jsonpath.sql,SAME,,"[('$[$[0]?(last > 0)]',)]"
postgresql,postgresql,select 'null.type()'::jsonpath,jsonpath.sql,SAME,,"[('null.type()',)]"
postgresql,postgresql,select '(1).type()'::jsonpath,jsonpath.sql,SAME,,"[('(1).type()',)]"
postgresql,postgresql,select '1.2.type()'::jsonpath,jsonpath.sql,SAME,,"[('(1.2).type()',)]"
postgresql,postgresql,"select '""aaa"".type()'::jsonpath",jsonpath.sql,SAME,,"[('""aaa"".type()',)]"
postgresql,postgresql,select 'true.type()'::jsonpath,jsonpath.sql,SAME,,"[('true.type()',)]"
postgresql,postgresql,select '$.double().floor().ceiling().abs()'::jsonpath,jsonpath.sql,SAME,,"[('$.double().floor().ceiling().abs()',)]"
postgresql,postgresql,select '$.keyvalue().key'::jsonpath,jsonpath.sql,SAME,,"[('$.keyvalue().""key""',)]"
postgresql,postgresql,select '$.datetime()'::jsonpath,jsonpath.sql,SAME,,"[('$.datetime()',)]"
postgresql,postgresql,"select '$.datetime(""datetime template"")'::jsonpath",jsonpath.sql,SAME,,"[('$.datetime(""datetime template"")',)]"
postgresql,postgresql,"select '$ ? (@ starts with ""abc"")'::jsonpath",jsonpath.sql,SAME,,"[('$?(@ starts with ""abc"")',)]"
postgresql,postgresql,select '$ ? (@ starts with $var)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@ starts with $""var"")',)]"
postgresql,postgresql,"select '$ ? (@ like_regex ""pattern"")'::jsonpath",jsonpath.sql,SAME,,"[('$?(@ like_regex ""pattern"")',)]"
postgresql,postgresql,"select '$ ? (@ like_regex ""pattern"" flag """")'::jsonpath",jsonpath.sql,SAME,,"[('$?(@ like_regex ""pattern"")',)]"
postgresql,postgresql,"select '$ ? (@ like_regex ""pattern"" flag ""i"")'::jsonpath",jsonpath.sql,SAME,,"[('$?(@ like_regex ""pattern"" flag ""i"")',)]"
postgresql,postgresql,"select '$ ? (@ like_regex ""pattern"" flag ""is"")'::jsonpath",jsonpath.sql,SAME,,"[('$?(@ like_regex ""pattern"" flag ""is"")',)]"
postgresql,postgresql,"select '$ ? (@ like_regex ""pattern"" flag ""isim"")'::jsonpath",jsonpath.sql,SAME,,"[('$?(@ like_regex ""pattern"" flag ""ism"")',)]"
postgresql,postgresql,"select '$ ? (@ like_regex ""pattern"" flag ""q"")'::jsonpath",jsonpath.sql,SAME,,"[('$?(@ like_regex ""pattern"" flag ""q"")',)]"
postgresql,postgresql,"select '$ ? (@ like_regex ""pattern"" flag ""iq"")'::jsonpath",jsonpath.sql,SAME,,"[('$?(@ like_regex ""pattern"" flag ""iq"")',)]"
postgresql,postgresql,"select '$ ? (@ like_regex ""pattern"" flag ""smixq"")'::jsonpath",jsonpath.sql,SAME,,"[('$?(@ like_regex ""pattern"" flag ""ismxq"")',)]"
postgresql,postgresql,select '$ < 1'::jsonpath,jsonpath.sql,SAME,,"[('($ < 1)',)]"
postgresql,postgresql,select '($ < 1) || $.a.b <= $x'::jsonpath,jsonpath.sql,SAME,,"[('($ < 1 || $.""a"".""b"" <= $""x"")',)]"
postgresql,postgresql,select '($).a.b'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".""b""',)]"
postgresql,postgresql,select '($.a.b).c.d'::jsonpath,jsonpath.sql,SAME,,"[('$.""a"".""b"".""c"".""d""',)]"
postgresql,postgresql,select '($.a.b + -$.x.y).c.d'::jsonpath,jsonpath.sql,SAME,,"[('($.""a"".""b"" + -$.""x"".""y"").""c"".""d""',)]"
postgresql,postgresql,select '(-+$.a.b).c.d'::jsonpath,jsonpath.sql,SAME,,"[('(-(+$.""a"".""b"")).""c"".""d""',)]"
postgresql,postgresql,select '1 + ($.a.b + 2).c.d'::jsonpath,jsonpath.sql,SAME,,"[('(1 + ($.""a"".""b"" + 2).""c"".""d"")',)]"
postgresql,postgresql,select '1 + ($.a.b > 2).c.d'::jsonpath,jsonpath.sql,SAME,,"[('(1 + ($.""a"".""b"" > 2).""c"".""d"")',)]"
postgresql,postgresql,select '($)'::jsonpath,jsonpath.sql,SAME,,"[('$',)]"
postgresql,postgresql,select '(($))'::jsonpath,jsonpath.sql,SAME,,"[('$',)]"
postgresql,postgresql,select '((($ + 1)).a + ((2)).b ? ((((@ > 1)) || (exists(@.c)))))'::jsonpath,jsonpath.sql,SAME,,"[('(($ + 1).""a"" + (2).""b""?(@ > 1 || exists (@.""c"")))',)]"
postgresql,postgresql,select '$ ? (@.a < 1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < -1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -1)',)]"
postgresql,postgresql,select '$ ? (@.a < +1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < .1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.1)',)]"
postgresql,postgresql,select '$ ? (@.a < -.1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -0.1)',)]"
postgresql,postgresql,select '$ ? (@.a < +.1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.1)',)]"
postgresql,postgresql,select '$ ? (@.a < 0.1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.1)',)]"
postgresql,postgresql,select '$ ? (@.a < -0.1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -0.1)',)]"
postgresql,postgresql,select '$ ? (@.a < +0.1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.1)',)]"
postgresql,postgresql,select '$ ? (@.a < 10.1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 10.1)',)]"
postgresql,postgresql,select '$ ? (@.a < -10.1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -10.1)',)]"
postgresql,postgresql,select '$ ? (@.a < +10.1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 10.1)',)]"
postgresql,postgresql,select '$ ? (@.a < 1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 10)',)]"
postgresql,postgresql,select '$ ? (@.a < -1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -10)',)]"
postgresql,postgresql,select '$ ? (@.a < +1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 10)',)]"
postgresql,postgresql,select '$ ? (@.a < .1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < -.1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -1)',)]"
postgresql,postgresql,select '$ ? (@.a < +.1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < 0.1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < -0.1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -1)',)]"
postgresql,postgresql,select '$ ? (@.a < +0.1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < 10.1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 101)',)]"
postgresql,postgresql,select '$ ? (@.a < -10.1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -101)',)]"
postgresql,postgresql,select '$ ? (@.a < +10.1e1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 101)',)]"
postgresql,postgresql,select '$ ? (@.a < 1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.1)',)]"
postgresql,postgresql,select '$ ? (@.a < -1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -0.1)',)]"
postgresql,postgresql,select '$ ? (@.a < +1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.1)',)]"
postgresql,postgresql,select '$ ? (@.a < .1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.01)',)]"
postgresql,postgresql,select '$ ? (@.a < -.1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -0.01)',)]"
postgresql,postgresql,select '$ ? (@.a < +.1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.01)',)]"
postgresql,postgresql,select '$ ? (@.a < 0.1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.01)',)]"
postgresql,postgresql,select '$ ? (@.a < -0.1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -0.01)',)]"
postgresql,postgresql,select '$ ? (@.a < +0.1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 0.01)',)]"
postgresql,postgresql,select '$ ? (@.a < 10.1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1.01)',)]"
postgresql,postgresql,select '$ ? (@.a < -10.1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -1.01)',)]"
postgresql,postgresql,select '$ ? (@.a < +10.1e-1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1.01)',)]"
postgresql,postgresql,select '$ ? (@.a < 1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 10)',)]"
postgresql,postgresql,select '$ ? (@.a < -1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -10)',)]"
postgresql,postgresql,select '$ ? (@.a < +1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 10)',)]"
postgresql,postgresql,select '$ ? (@.a < .1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < -.1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -1)',)]"
postgresql,postgresql,select '$ ? (@.a < +.1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < 0.1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < -0.1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -1)',)]"
postgresql,postgresql,select '$ ? (@.a < +0.1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 1)',)]"
postgresql,postgresql,select '$ ? (@.a < 10.1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 101)',)]"
postgresql,postgresql,select '$ ? (@.a < -10.1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < -101)',)]"
postgresql,postgresql,select '$ ? (@.a < +10.1e+1)'::jsonpath,jsonpath.sql,SAME,,"[('$?(@.""a"" < 101)',)]"
postgresql,postgresql,select '0'::jsonpath,jsonpath.sql,SAME,,"[('0',)]"
postgresql,postgresql,select '0.0'::jsonpath,jsonpath.sql,SAME,,"[('0.0',)]"
postgresql,postgresql,select '0.000'::jsonpath,jsonpath.sql,SAME,,"[('0.000',)]"
postgresql,postgresql,select '0.000e1'::jsonpath,jsonpath.sql,SAME,,"[('0.00',)]"
postgresql,postgresql,select '0.000e2'::jsonpath,jsonpath.sql,SAME,,"[('0.0',)]"
postgresql,postgresql,select '0.000e3'::jsonpath,jsonpath.sql,SAME,,"[('0',)]"
postgresql,postgresql,select '0.0010'::jsonpath,jsonpath.sql,SAME,,"[('0.0010',)]"
postgresql,postgresql,select '0.0010e-1'::jsonpath,jsonpath.sql,SAME,,"[('0.00010',)]"
postgresql,postgresql,select '0.0010e+1'::jsonpath,jsonpath.sql,SAME,,"[('0.010',)]"
postgresql,postgresql,select '0.0010e+2'::jsonpath,jsonpath.sql,SAME,,"[('0.10',)]"
postgresql,postgresql,select '.001'::jsonpath,jsonpath.sql,SAME,,"[('0.001',)]"
postgresql,postgresql,select '.001e1'::jsonpath,jsonpath.sql,SAME,,"[('0.01',)]"
postgresql,postgresql,select '1.'::jsonpath,jsonpath.sql,SAME,,"[('1',)]"
postgresql,postgresql,select '1.e1'::jsonpath,jsonpath.sql,SAME,,"[('10',)]"
postgresql,postgresql,select '1.2.e'::jsonpath,jsonpath.sql,SAME,,"[('(1.2).""e""',)]"
postgresql,postgresql,select '(1.2).e'::jsonpath,jsonpath.sql,SAME,,"[('(1.2).""e""',)]"
postgresql,postgresql,select '1e3'::jsonpath,jsonpath.sql,SAME,,"[('1000',)]"
postgresql,postgresql,select '1.e3'::jsonpath,jsonpath.sql,SAME,,"[('1000',)]"
postgresql,postgresql,select '1.e3.e'::jsonpath,jsonpath.sql,SAME,,"[('(1000).""e""',)]"
postgresql,postgresql,select '1.e3.e4'::jsonpath,jsonpath.sql,SAME,,"[('(1000).""e4""',)]"
postgresql,postgresql,select '1.2e3'::jsonpath,jsonpath.sql,SAME,,"[('1200',)]"
postgresql,postgresql,select '1.2.e3'::jsonpath,jsonpath.sql,SAME,,"[('(1.2).""e3""',)]"
postgresql,postgresql,select '(1.2).e3'::jsonpath,jsonpath.sql,SAME,,"[('(1.2).""e3""',)]"
postgresql,postgresql,select '1..e'::jsonpath,jsonpath.sql,SAME,,"[('(1).""e""',)]"
postgresql,postgresql,select '1..e3'::jsonpath,jsonpath.sql,SAME,,"[('(1).""e3""',)]"
postgresql,postgresql,select '(1.).e'::jsonpath,jsonpath.sql,SAME,,"[('(1).""e""',)]"
postgresql,postgresql,select '(1.).e3'::jsonpath,jsonpath.sql,SAME,,"[('(1).""e3""',)]"
postgresql,postgresql,select '1?(2>3)'::jsonpath,jsonpath.sql,SAME,,"[('(1)?(2 > 3)',)]"
postgresql,postgresql,select '0b100101'::jsonpath,jsonpath.sql,SAME,,"[('37',)]"
postgresql,postgresql,select '0o273'::jsonpath,jsonpath.sql,SAME,,"[('187',)]"
postgresql,postgresql,select '0x42F'::jsonpath,jsonpath.sql,SAME,,"[('1071',)]"
postgresql,postgresql,select '1_000_000'::jsonpath,jsonpath.sql,SAME,,"[('1000000',)]"
postgresql,postgresql,select '1_2_3'::jsonpath,jsonpath.sql,SAME,,"[('123',)]"
postgresql,postgresql,select '0x1EEE_FFFF'::jsonpath,jsonpath.sql,SAME,,"[('518979583',)]"
postgresql,postgresql,select '0o2_73'::jsonpath,jsonpath.sql,SAME,,"[('187',)]"
postgresql,postgresql,select '0b10_0101'::jsonpath,jsonpath.sql,SAME,,"[('37',)]"
postgresql,postgresql,select '1_000.000_005'::jsonpath,jsonpath.sql,SAME,,"[('1000.000005',)]"
postgresql,postgresql,select '1_000.'::jsonpath,jsonpath.sql,SAME,,"[('1000',)]"
postgresql,postgresql,select '.000_005'::jsonpath,jsonpath.sql,SAME,,"[('0.000005',)]"
postgresql,postgresql,select '1_000.5e0_1'::jsonpath,jsonpath.sql,SAME,,"[('10005',)]"
postgresql,postgresql,"SELECT str as jsonpath,        pg_input_is_valid(str,'jsonpath') as ok,        errinfo.sql_error_code,        errinfo.message,        errinfo.detail,        errinfo.hint FROM unnest(ARRAY['$ ? (@ like_regex ""pattern"" flag ""smixq"")'::text,                   '$ ? (@ like_regex ""pattern"" flag ""a"")',                   '@ + 1',                   '00',                   '1a']) str,      LATERAL pg_input_error_info(str, 'jsonpath') as errinfo",jsonpath.sql,SAME,,"[('$ ? (@ like_regex ""pattern"" flag ""smixq"")', True, None, None, None, None), ('$ ? (@ like_regex ""pattern"" flag ""a"")', False, '42601', 'invalid input syntax for type jsonpath', 'Unrecognized flag character ""a"" in LIKE_REGEX predicate.', None), ('@ + 1', False, '42601', '@ is not allowed in root expressions', None, None), ('00', False, '42601', 'trailing junk after numeric literal at or near ""00"" of jsonpath input', None, None), ('1a', False, '42601', 'trailing junk after numeric literal at or near ""1a"" of jsonpath input', None, None)]"
postgresql,postgresql,"SELECT '""\uaBcD""'::jsonpath",jsonpath_encoding.sql,SAME,,"[('""ꯍ""',)]"
postgresql,postgresql,"select '""\ud83d\ude04\ud83d\udc36""'::jsonpath as correct_in_utf8",jsonpath_encoding.sql,SAME,,"[('""😄🐶""',)]"
postgresql,postgresql,"select '""the Copyright \u00a9 sign""'::jsonpath as correct_in_utf8",jsonpath_encoding.sql,SAME,,"[('""the Copyright © sign""',)]"
postgresql,postgresql,"select '""dollar \u0024 character""'::jsonpath as correct_everywhere",jsonpath_encoding.sql,SAME,,"[('""dollar $ character""',)]"
postgresql,postgresql,"select '""dollar \\u0024 character""'::jsonpath as not_an_escape",jsonpath_encoding.sql,SAME,,"[('""dollar \\\\u0024 character""',)]"
postgresql,postgresql,"select '""null \\u0000 escape""'::jsonpath as not_an_escape",jsonpath_encoding.sql,SAME,,"[('""null \\\\u0000 escape""',)]"
postgresql,postgresql,"SELECT '$.""\uaBcD""'::jsonpath",jsonpath_encoding.sql,SAME,,"[('$.""ꯍ""',)]"
postgresql,postgresql,"select '$.""\ud83d\ude04\ud83d\udc36""'::jsonpath as correct_in_utf8",jsonpath_encoding.sql,SAME,,"[('$.""😄🐶""',)]"
postgresql,postgresql,"select '$.""the Copyright \u00a9 sign""'::jsonpath as correct_in_utf8",jsonpath_encoding.sql,SAME,,"[('$.""the Copyright © sign""',)]"
postgresql,postgresql,"select '$.""dollar \u0024 character""'::jsonpath as correct_everywhere",jsonpath_encoding.sql,SAME,,"[('$.""dollar $ character""',)]"
postgresql,postgresql,"select '$.""dollar \\u0024 character""'::jsonpath as not_an_escape",jsonpath_encoding.sql,SAME,,"[('$.""dollar \\\\u0024 character""',)]"
postgresql,postgresql,"select '$.""null \\u0000 escape""'::jsonpath as not_an_escape",jsonpath_encoding.sql,SAME,,"[('$.""null \\\\u0000 escape""',)]"
postgresql,postgresql,SET bytea_output TO escape,largeobject.sql,SAME,,[]
postgresql,postgresql,SELECT lo_create(42),largeobject.sql,SAME,,"[(42,)]"
postgresql,postgresql,GRANT SELECT ON LARGE OBJECT 42 TO public,largeobject.sql,SAME,,[]
postgresql,postgresql,COMMENT ON LARGE OBJECT 42 IS 'the ultimate answer',largeobject.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,largeobject.sql,SAME,,[]
postgresql,postgresql,BEGIN,largeobject.sql,SAME,,[]
postgresql,postgresql,"UPDATE lotest_stash_values SET fd = lo_open(loid, CAST(x'20000' | x'40000' AS integer))",largeobject.sql,SAME,,[]
postgresql,postgresql,END,largeobject.sql,SAME,,[]
postgresql,postgresql,BEGIN,largeobject.sql,SAME,,[]
postgresql,postgresql,"UPDATE lotest_stash_values SET fd=lo_open(loid, CAST(x'20000' | x'40000' AS integer))",largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lo_lseek(fd, 104, 0) FROM lotest_stash_values",largeobject.sql,SAME,,"[(104,)]"
postgresql,postgresql,"SELECT loread(fd, 28) FROM lotest_stash_values",largeobject.sql,SAME,,"[(<memory at 0x126577640>,)]"
postgresql,postgresql,"SELECT lo_lseek(fd, -19, 1) FROM lotest_stash_values",largeobject.sql,SAME,,"[(85,)]"
postgresql,postgresql,"SELECT lowrite(fd, 'n') FROM lotest_stash_values",largeobject.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT lo_tell(fd) FROM lotest_stash_values,largeobject.sql,SAME,,"[(86,)]"
postgresql,postgresql,END,largeobject.sql,SAME,,[]
postgresql,postgresql,BEGIN,largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lo_open(loid, x'40000'::int) from lotest_stash_values",largeobject.sql,SAME,,"[(0,)]"
postgresql,postgresql,ABORT,largeobject.sql,SAME,,[]
postgresql,postgresql,BEGIN,largeobject.sql,SAME,,[]
postgresql,postgresql,"UPDATE lotest_stash_values SET fd=lo_open(loid, CAST(x'20000' | x'40000' AS integer))",largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lo_truncate(fd, 11) FROM lotest_stash_values",largeobject.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT loread(fd, 15) FROM lotest_stash_values",largeobject.sql,SAME,,"[(<memory at 0x126577e80>,)]"
postgresql,postgresql,"SELECT lo_truncate(fd, 10000) FROM lotest_stash_values",largeobject.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT loread(fd, 10) FROM lotest_stash_values",largeobject.sql,SAME,,"[(<memory at 0x126577880>,)]"
postgresql,postgresql,"SELECT lo_lseek(fd, 0, 2) FROM lotest_stash_values",largeobject.sql,SAME,,"[(10000,)]"
postgresql,postgresql,SELECT lo_tell(fd) FROM lotest_stash_values,largeobject.sql,SAME,,"[(10000,)]"
postgresql,postgresql,"SELECT lo_truncate(fd, 5000) FROM lotest_stash_values",largeobject.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT lo_lseek(fd, 0, 2) FROM lotest_stash_values",largeobject.sql,SAME,,"[(5000,)]"
postgresql,postgresql,SELECT lo_tell(fd) FROM lotest_stash_values,largeobject.sql,SAME,,"[(5000,)]"
postgresql,postgresql,SELECT lo_close(fd) FROM lotest_stash_values,largeobject.sql,SAME,,"[(0,)]"
postgresql,postgresql,END,largeobject.sql,SAME,,[]
postgresql,postgresql,BEGIN,largeobject.sql,SAME,,[]
postgresql,postgresql,"UPDATE lotest_stash_values SET fd = lo_open(loid, CAST(x'20000' | x'40000' AS integer))",largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lo_lseek64(fd, 4294967296, 0) FROM lotest_stash_values",largeobject.sql,SAME,,"[(4294967296,)]"
postgresql,postgresql,"SELECT lowrite(fd, 'offset:4GB') FROM lotest_stash_values",largeobject.sql,SAME,,"[(10,)]"
postgresql,postgresql,SELECT lo_tell64(fd) FROM lotest_stash_values,largeobject.sql,SAME,,"[(4294967306,)]"
postgresql,postgresql,"SELECT lo_lseek64(fd, -10, 1) FROM lotest_stash_values",largeobject.sql,SAME,,"[(4294967296,)]"
postgresql,postgresql,SELECT lo_tell64(fd) FROM lotest_stash_values,largeobject.sql,SAME,,"[(4294967296,)]"
postgresql,postgresql,"SELECT loread(fd, 10) FROM lotest_stash_values",largeobject.sql,SAME,,"[(<memory at 0x126577b80>,)]"
postgresql,postgresql,"SELECT lo_truncate64(fd, 5000000000) FROM lotest_stash_values",largeobject.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT lo_lseek64(fd, 0, 2) FROM lotest_stash_values",largeobject.sql,SAME,,"[(5000000000,)]"
postgresql,postgresql,SELECT lo_tell64(fd) FROM lotest_stash_values,largeobject.sql,SAME,,"[(5000000000,)]"
postgresql,postgresql,"SELECT lo_truncate64(fd, 3000000000) FROM lotest_stash_values",largeobject.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT lo_lseek64(fd, 0, 2) FROM lotest_stash_values",largeobject.sql,SAME,,"[(3000000000,)]"
postgresql,postgresql,SELECT lo_tell64(fd) FROM lotest_stash_values,largeobject.sql,SAME,,"[(3000000000,)]"
postgresql,postgresql,SELECT lo_close(fd) FROM lotest_stash_values,largeobject.sql,SAME,,"[(0,)]"
postgresql,postgresql,END,largeobject.sql,SAME,,[]
postgresql,postgresql,SELECT lo_unlink(loid) from lotest_stash_values,largeobject.sql,SAME,,"[(1,)]"
postgresql,postgresql,TRUNCATE lotest_stash_values,largeobject.sql,SAME,,[]
postgresql,postgresql,BEGIN,largeobject.sql,SAME,,[]
postgresql,postgresql,"UPDATE lotest_stash_values SET fd=lo_open(loid, CAST(x'20000' | x'40000' AS integer))",largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lo_lseek(fd, 0, 2) FROM lotest_stash_values",largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lo_lseek(fd, 2030, 0) FROM lotest_stash_values",largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT loread(fd, 36) FROM lotest_stash_values",largeobject.sql,SAME,,[]
postgresql,postgresql,SELECT lo_tell(fd) FROM lotest_stash_values,largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lo_lseek(fd, -26, 1) FROM lotest_stash_values",largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lowrite(fd, 'abcdefghijklmnop') FROM lotest_stash_values",largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lo_lseek(fd, 2030, 0) FROM lotest_stash_values",largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT loread(fd, 36) FROM lotest_stash_values",largeobject.sql,SAME,,[]
postgresql,postgresql,SELECT lo_close(fd) FROM lotest_stash_values,largeobject.sql,SAME,,[]
postgresql,postgresql,END,largeobject.sql,SAME,,[]
postgresql,postgresql,SELECT lo_unlink(loid) FROM lotest_stash_values,largeobject.sql,SAME,,[]
postgresql,postgresql,TRUNCATE lotest_stash_values,largeobject.sql,SAME,,[]
postgresql,postgresql,SELECT lo_create(2121),largeobject.sql,SAME,,"[(2121,)]"
postgresql,postgresql,COMMENT ON LARGE OBJECT 2121 IS 'testing comments',largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,"SELECT lo_open(2121, x'40000'::int)",largeobject.sql,SAME,,"[(0,)]"
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,largeobject.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,largeobject.sql,SAME,,[]
postgresql,postgresql,begin,limit.sql,SAME,,[]
postgresql,postgresql,rollback,limit.sql,SAME,,[]
postgresql,postgresql,"SELECT   (SELECT n      FROM (VALUES (1)) AS x,           (SELECT n FROM generate_series(1,10) AS n              ORDER BY n LIMIT 1 OFFSET s-1) AS y) AS z   FROM generate_series(1,10) AS s",limit.sql,SAME,,"[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,)]"
postgresql,postgresql,create temp sequence testseq,limit.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select generate_series(0,2) as s1, generate_series((random()*.1)::int,2) as s2",limit.sql,SAME,,"[('ProjectSet',), (""  Output: generate_series(0, 2), generate_series(((random() * '0.1'::double precision))::integer, 2)"",), ('  ->  Result',)]"
postgresql,postgresql,"select generate_series(0,2) as s1, generate_series((random()*.1)::int,2) as s2",limit.sql,SAME,,"[(0, 0), (1, 1), (2, 2)]"
postgresql,postgresql,"explain (verbose, costs off) select generate_series(0,2) as s1, generate_series((random()*.1)::int,2) as s2 order by s2 desc",limit.sql,SAME,,"[('Sort',), (""  Output: (generate_series(0, 2)), (generate_series(((random() * '0.1'::double precision))::integer, 2))"",), (""  Sort Key: (generate_series(((random() * '0.1'::double precision))::integer, 2)) DESC"",), ('  ->  ProjectSet',), (""        Output: generate_series(0, 2), generate_series(((random() * '0.1'::double precision))::integer, 2)"",), ('        ->  Result',)]"
postgresql,postgresql,"select generate_series(0,2) as s1, generate_series((random()*.1)::int,2) as s2 order by s2 desc",limit.sql,SAME,,"[(2, 2), (1, 1), (0, 0)]"
postgresql,postgresql,select * from LINE_TBL,line.sql,SAME,,"[('{0,-1,5}',), ('{1,0,5}',), ('{0,3,0}',), ('{1,-1,0}',), ('{-0.4,-1,-6}',), ('{-0.0001846153846153846,-1,15.384615384615387}',), ('{3,NaN,5}',), ('{NaN,NaN,NaN}',), ('{0,-1,3}',), ('{-1,0,3}',)]"
postgresql,postgresql,"select '{nan, 1, nan}'::line = '{nan, 1, nan}'::line as true, 	   '{nan, 1, nan}'::line = '{nan, 2, nan}'::line as false",line.sql,SAME,,"[(True, False)]"
postgresql,postgresql,"SELECT pg_input_is_valid('{1, 1}', 'line')",line.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('{1, 1}', 'line')",line.sql,SAME,,"[('invalid input syntax for type line: ""{1, 1}""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('{0, 0, 0}', 'line')",line.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('{0, 0, 0}', 'line')",line.sql,SAME,,"[('invalid line specification: A and B cannot both be zero', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('{1, 1, a}', 'line')",line.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('{1, 1, a}', 'line')",line.sql,SAME,,"[('invalid input syntax for type line: ""{1, 1, a}""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('{1, 1, 1e400}', 'line')",line.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('{1, 1, 1e400}', 'line')",line.sql,SAME,,"[('""1e400"" is out of range for type double precision', None, None, '22003')]"
postgresql,postgresql,"SELECT pg_input_is_valid('(1, 1), (1, 1e400)', 'line')",line.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('(1, 1), (1, 1e400)', 'line')",line.sql,SAME,,"[('""1e400"" is out of range for type double precision', None, None, '22003')]"
postgresql,postgresql,CREATE SCHEMA lock_schema1,lock.sql,SAME,,[]
postgresql,postgresql,SET search_path = lock_schema1,lock.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW lock_view1 AS SELECT * FROM lock_tbl1,lock.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW lock_view2(a,b) AS SELECT * FROM lock_tbl1, lock_tbl1a",lock.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW lock_view3 AS SELECT * from lock_view2,lock.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW lock_view4 AS SELECT (select a from lock_tbl1a limit 1) from lock_tbl1,lock.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW lock_view5 AS SELECT * from lock_tbl1 where a in (select * from lock_tbl1a),lock.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW lock_view6 AS SELECT * from (select * from lock_tbl1) sub,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN ACCESS SHARE MODE,lock.sql,SAME,,[]
postgresql,postgresql,LOCK lock_tbl1 IN ROW SHARE MODE,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN ROW EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN SHARE UPDATE EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN SHARE MODE,lock.sql,SAME,,[]
postgresql,postgresql,LOCK lock_tbl1 IN SHARE ROW EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN ACCESS EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN ACCESS SHARE MODE NOWAIT,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN ROW SHARE MODE NOWAIT,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN ROW EXCLUSIVE MODE NOWAIT,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN SHARE UPDATE EXCLUSIVE MODE NOWAIT,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN SHARE MODE NOWAIT,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN SHARE ROW EXCLUSIVE MODE NOWAIT,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN EXCLUSIVE MODE NOWAIT,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 IN ACCESS EXCLUSIVE MODE NOWAIT,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view1 IN EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,"select relname from pg_locks l, pg_class c  where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'  order by relname",lock.sql,SAME,,"[('lock_tbl1',), ('lock_view1',)]"
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view2 IN EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,"select relname from pg_locks l, pg_class c  where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'  order by relname",lock.sql,SAME,,"[('lock_tbl1',), ('lock_tbl1a',), ('lock_view2',)]"
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view3 IN EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,"select relname from pg_locks l, pg_class c  where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'  order by relname",lock.sql,SAME,,"[('lock_tbl1',), ('lock_tbl1a',), ('lock_view2',), ('lock_view3',)]"
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view4 IN EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,"select relname from pg_locks l, pg_class c  where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'  order by relname",lock.sql,SAME,,"[('lock_tbl1',), ('lock_tbl1a',), ('lock_view4',)]"
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view5 IN EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,"select relname from pg_locks l, pg_class c  where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'  order by relname",lock.sql,SAME,,"[('lock_tbl1',), ('lock_tbl1a',), ('lock_view5',)]"
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view6 IN EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,"select relname from pg_locks l, pg_class c  where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'  order by relname",lock.sql,SAME,,"[('lock_tbl1',), ('lock_view6',)]"
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE VIEW lock_view2 AS SELECT * from lock_view3,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view2 IN EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW lock_view7 AS SELECT * from lock_view2,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view7 IN EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 * IN ACCESS EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl2,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_tbl1 * IN ACCESS EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE ONLY lock_tbl1,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view1,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view1 IN ACCESS EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,"select relname from pg_locks l, pg_class c  where l.relation = c.oid and relname like '%lock_%' and mode = 'AccessExclusiveLock'  order by relname",lock.sql,SAME,,"[('lock_tbl1',), ('lock_tbl2',), ('lock_tbl3',), ('lock_view1',)]"
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,lock.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW lock_view8 WITH (security_invoker) AS SELECT * FROM lock_tbl1,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view8,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view8,lock.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,lock.sql,SAME,,[]
postgresql,postgresql,BEGIN,lock.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_view8 IN ACCESS EXCLUSIVE MODE,lock.sql,SAME,,[]
postgresql,postgresql,"select relname from pg_locks l, pg_class c  where l.relation = c.oid and relname like '%lock_%' and mode = 'AccessExclusiveLock'  order by relname",lock.sql,SAME,,"[('lock_tbl1',), ('lock_tbl2',), ('lock_tbl3',), ('lock_view8',)]"
postgresql,postgresql,ROLLBACK,lock.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,lock.sql,SAME,,[]
postgresql,postgresql,DROP VIEW lock_view8,lock.sql,SAME,,[]
postgresql,postgresql,DROP VIEW lock_view7,lock.sql,SAME,,[]
postgresql,postgresql,DROP VIEW lock_view6,lock.sql,SAME,,[]
postgresql,postgresql,DROP VIEW lock_view5,lock.sql,SAME,,[]
postgresql,postgresql,DROP VIEW lock_view4,lock.sql,SAME,,[]
postgresql,postgresql,DROP VIEW lock_view3 CASCADE,lock.sql,SAME,,[]
postgresql,postgresql,DROP VIEW lock_view1,lock.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA lock_schema1 CASCADE,lock.sql,SAME,,[]
postgresql,postgresql,RESET search_path,lock.sql,SAME,,[]
postgresql,postgresql,select * from LSEG_TBL,lseg.sql,SAME,,"[('[(1,2),(3,4)]',), ('[(0,0),(6,6)]',), ('[(10,-10),(-3,-4)]',), ('[(-1000000,200),(300000,-40)]',), ('[(11,22),(33,44)]',), ('[(-10,2),(-10,3)]',), ('[(0,-20),(30,-20)]',), ('[(NaN,1),(NaN,90)]',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('[(1,2),(3)]', 'lseg')",lseg.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('[(1,2),(3)]', 'lseg')",lseg.sql,SAME,,"[('invalid input syntax for type lseg: ""[(1,2),(3)]""', None, None, '22P02')]"
postgresql,postgresql,SELECT * FROM macaddr_data,macaddr.sql,SAME,,"[(1, '08:00:2b:01:02:03'), (2, '08:00:2b:01:02:03'), (3, '08:00:2b:01:02:03'), (4, '08:00:2b:01:02:03'), (5, '08:00:2b:01:02:03'), (6, '08:00:2b:01:02:03'), (7, '08:00:2b:01:02:03'), (10, '08:00:2b:01:02:04'), (11, '08:00:2b:01:02:02'), (12, '08:00:2a:01:02:03'), (13, '08:00:2c:01:02:03'), (14, '08:00:2a:01:02:04')]"
postgresql,postgresql,CREATE INDEX macaddr_data_btree ON macaddr_data USING btree (b),macaddr.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX macaddr_data_hash ON macaddr_data USING hash (b),macaddr.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b, trunc(b) FROM macaddr_data ORDER BY 2, 1",macaddr.sql,SAME,,"[(12, '08:00:2a:01:02:03', '08:00:2a:00:00:00'), (14, '08:00:2a:01:02:04', '08:00:2a:00:00:00'), (11, '08:00:2b:01:02:02', '08:00:2b:00:00:00'), (1, '08:00:2b:01:02:03', '08:00:2b:00:00:00'), (2, '08:00:2b:01:02:03', '08:00:2b:00:00:00'), (3, '08:00:2b:01:02:03', '08:00:2b:00:00:00'), (4, '08:00:2b:01:02:03', '08:00:2b:00:00:00'), (5, '08:00:2b:01:02:03', '08:00:2b:00:00:00'), (6, '08:00:2b:01:02:03', '08:00:2b:00:00:00'), (7, '08:00:2b:01:02:03', '08:00:2b:00:00:00'), (10, '08:00:2b:01:02:04', '08:00:2b:00:00:00'), (13, '08:00:2c:01:02:03', '08:00:2c:00:00:00')]"
postgresql,postgresql,SELECT b <  '08:00:2b:01:02:04' FROM macaddr_data WHERE a = 1,macaddr.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b >  '08:00:2b:01:02:04' FROM macaddr_data WHERE a = 1,macaddr.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b >  '08:00:2b:01:02:03' FROM macaddr_data WHERE a = 1,macaddr.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b <= '08:00:2b:01:02:04' FROM macaddr_data WHERE a = 1,macaddr.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b >= '08:00:2b:01:02:04' FROM macaddr_data WHERE a = 1,macaddr.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b =  '08:00:2b:01:02:03' FROM macaddr_data WHERE a = 1,macaddr.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b <> '08:00:2b:01:02:04' FROM macaddr_data WHERE a = 1,macaddr.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b <> '08:00:2b:01:02:03' FROM macaddr_data WHERE a = 1,macaddr.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT ~b                       FROM macaddr_data,macaddr.sql,SAME,,"[('f7:ff:d4:fe:fd:fc',), ('f7:ff:d4:fe:fd:fc',), ('f7:ff:d4:fe:fd:fc',), ('f7:ff:d4:fe:fd:fc',), ('f7:ff:d4:fe:fd:fc',), ('f7:ff:d4:fe:fd:fc',), ('f7:ff:d4:fe:fd:fc',), ('f7:ff:d4:fe:fd:fb',), ('f7:ff:d4:fe:fd:fd',), ('f7:ff:d5:fe:fd:fc',), ('f7:ff:d3:fe:fd:fc',), ('f7:ff:d5:fe:fd:fb',)]"
postgresql,postgresql,SELECT  b & '00:00:00:ff:ff:ff' FROM macaddr_data,macaddr.sql,SAME,,"[('00:00:00:01:02:03',), ('00:00:00:01:02:03',), ('00:00:00:01:02:03',), ('00:00:00:01:02:03',), ('00:00:00:01:02:03',), ('00:00:00:01:02:03',), ('00:00:00:01:02:03',), ('00:00:00:01:02:04',), ('00:00:00:01:02:02',), ('00:00:00:01:02:03',), ('00:00:00:01:02:03',), ('00:00:00:01:02:04',)]"
postgresql,postgresql,SELECT  b | '01:02:03:04:05:06' FROM macaddr_data,macaddr.sql,SAME,,"[('09:02:2b:05:07:07',), ('09:02:2b:05:07:07',), ('09:02:2b:05:07:07',), ('09:02:2b:05:07:07',), ('09:02:2b:05:07:07',), ('09:02:2b:05:07:07',), ('09:02:2b:05:07:07',), ('09:02:2b:05:07:06',), ('09:02:2b:05:07:06',), ('09:02:2b:05:07:07',), ('09:02:2f:05:07:07',), ('09:02:2b:05:07:06',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('08:00:2b:01:02:ZZ', 'macaddr')",macaddr.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('08:00:2b:01:02:ZZ', 'macaddr')",macaddr.sql,SAME,,"[('invalid input syntax for type macaddr: ""08:00:2b:01:02:ZZ""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('08:00:2b:01:02:', 'macaddr')",macaddr.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('08:00:2b:01:02:', 'macaddr')",macaddr.sql,SAME,,"[('invalid input syntax for type macaddr: ""08:00:2b:01:02:""', None, None, '22P02')]"
postgresql,postgresql,SELECT '08:00:2b:01:02:03     '::macaddr8,macaddr8.sql,SAME,,"[('08:00:2b:ff:fe:01:02:03',)]"
postgresql,postgresql,SELECT '    08:00:2b:01:02:03     '::macaddr8,macaddr8.sql,SAME,,"[('08:00:2b:ff:fe:01:02:03',)]"
postgresql,postgresql,SELECT '    08:00:2b:01:02:03'::macaddr8,macaddr8.sql,SAME,,"[('08:00:2b:ff:fe:01:02:03',)]"
postgresql,postgresql,SELECT '08:00:2b:01:02:03:04:05     '::macaddr8,macaddr8.sql,SAME,,"[('08:00:2b:01:02:03:04:05',)]"
postgresql,postgresql,SELECT '    08:00:2b:01:02:03:04:05     '::macaddr8,macaddr8.sql,SAME,,"[('08:00:2b:01:02:03:04:05',)]"
postgresql,postgresql,SELECT '    08:00:2b:01:02:03:04:05'::macaddr8,macaddr8.sql,SAME,,"[('08:00:2b:01:02:03:04:05',)]"
postgresql,postgresql,SELECT macaddr8_set7bit('00:08:2b:01:02:03'::macaddr8),macaddr8.sql,SAME,,"[('02:08:2b:ff:fe:01:02:03',)]"
postgresql,postgresql,SELECT * FROM macaddr8_data ORDER BY 1,macaddr8.sql,SAME,,"[(1, '08:00:2b:ff:fe:01:02:03'), (2, '08:00:2b:ff:fe:01:02:03'), (3, '08:00:2b:ff:fe:01:02:03'), (4, '08:00:2b:ff:fe:01:02:03'), (5, '08:00:2b:ff:fe:01:02:03'), (6, '08:00:2b:ff:fe:01:02:03'), (7, '08:00:2b:ff:fe:01:02:03'), (8, '08:00:2b:ff:fe:01:02:03'), (10, '08:00:2b:ff:fe:01:02:04'), (11, '08:00:2b:ff:fe:01:02:02'), (12, '08:00:2a:ff:fe:01:02:03'), (13, '08:00:2c:ff:fe:01:02:03'), (14, '08:00:2a:ff:fe:01:02:04'), (15, '08:00:2b:01:02:03:04:05'), (16, '08:00:2b:01:02:03:04:05'), (17, '08:00:2b:01:02:03:04:05'), (18, '08:00:2b:01:02:03:04:05'), (19, '08:00:2b:01:02:03:04:05'), (20, '08:00:2b:01:02:03:04:05'), (21, '08:00:2b:01:02:03:04:05')]"
postgresql,postgresql,CREATE INDEX macaddr8_data_btree ON macaddr8_data USING btree (b),macaddr8.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX macaddr8_data_hash ON macaddr8_data USING hash (b),macaddr8.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b, trunc(b) FROM macaddr8_data ORDER BY 2, 1",macaddr8.sql,SAME,,"[(12, '08:00:2a:ff:fe:01:02:03', '08:00:2a:00:00:00:00:00'), (14, '08:00:2a:ff:fe:01:02:04', '08:00:2a:00:00:00:00:00'), (15, '08:00:2b:01:02:03:04:05', '08:00:2b:00:00:00:00:00'), (16, '08:00:2b:01:02:03:04:05', '08:00:2b:00:00:00:00:00'), (17, '08:00:2b:01:02:03:04:05', '08:00:2b:00:00:00:00:00'), (18, '08:00:2b:01:02:03:04:05', '08:00:2b:00:00:00:00:00'), (19, '08:00:2b:01:02:03:04:05', '08:00:2b:00:00:00:00:00'), (20, '08:00:2b:01:02:03:04:05', '08:00:2b:00:00:00:00:00'), (21, '08:00:2b:01:02:03:04:05', '08:00:2b:00:00:00:00:00'), (11, '08:00:2b:ff:fe:01:02:02', '08:00:2b:00:00:00:00:00'), (1, '08:00:2b:ff:fe:01:02:03', '08:00:2b:00:00:00:00:00'), (2, '08:00:2b:ff:fe:01:02:03', '08:00:2b:00:00:00:00:00'), (3, '08:00:2b:ff:fe:01:02:03', '08:00:2b:00:00:00:00:00'), (4, '08:00:2b:ff:fe:01:02:03', '08:00:2b:00:00:00:00:00'), (5, '08:00:2b:ff:fe:01:02:03', '08:00:2b:00:00:00:00:00'), (6, '08:00:2b:ff:fe:01:02:03', '08:00:2b:00:00:00:00:00'), (7, '08:00:2b:ff:fe:01:02:03', '08:00:2b:00:00:00:00:00'), (8, '08:00:2b:ff:fe:01:02:03', '08:00:2b:00:00:00:00:00'), (10, '08:00:2b:ff:fe:01:02:04', '08:00:2b:00:00:00:00:00'), (13, '08:00:2c:ff:fe:01:02:03', '08:00:2c:00:00:00:00:00')]"
postgresql,postgresql,SELECT b <  '08:00:2b:01:02:04' FROM macaddr8_data WHERE a = 1,macaddr8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b >  '08:00:2b:ff:fe:01:02:04' FROM macaddr8_data WHERE a = 1,macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b >  '08:00:2b:ff:fe:01:02:03' FROM macaddr8_data WHERE a = 1,macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b::macaddr <= '08:00:2b:01:02:04' FROM macaddr8_data WHERE a = 1,macaddr8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b::macaddr >= '08:00:2b:01:02:04' FROM macaddr8_data WHERE a = 1,macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b =  '08:00:2b:ff:fe:01:02:03' FROM macaddr8_data WHERE a = 1,macaddr8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b::macaddr <> '08:00:2b:01:02:04'::macaddr FROM macaddr8_data WHERE a = 1,macaddr8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b::macaddr <> '08:00:2b:01:02:03'::macaddr FROM macaddr8_data WHERE a = 1,macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b <  '08:00:2b:01:02:03:04:06' FROM macaddr8_data WHERE a = 15,macaddr8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b >  '08:00:2b:01:02:03:04:06' FROM macaddr8_data WHERE a = 15,macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b >  '08:00:2b:01:02:03:04:05' FROM macaddr8_data WHERE a = 15,macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b <= '08:00:2b:01:02:03:04:06' FROM macaddr8_data WHERE a = 15,macaddr8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b >= '08:00:2b:01:02:03:04:06' FROM macaddr8_data WHERE a = 15,macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT b =  '08:00:2b:01:02:03:04:05' FROM macaddr8_data WHERE a = 15,macaddr8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b <> '08:00:2b:01:02:03:04:06' FROM macaddr8_data WHERE a = 15,macaddr8.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT b <> '08:00:2b:01:02:03:04:05' FROM macaddr8_data WHERE a = 15,macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT ~b                       FROM macaddr8_data,macaddr8.sql,SAME,,"[('f7:ff:d4:00:01:fe:fd:fc',), ('f7:ff:d4:00:01:fe:fd:fc',), ('f7:ff:d4:00:01:fe:fd:fc',), ('f7:ff:d4:00:01:fe:fd:fc',), ('f7:ff:d4:00:01:fe:fd:fc',), ('f7:ff:d4:00:01:fe:fd:fc',), ('f7:ff:d4:00:01:fe:fd:fc',), ('f7:ff:d4:00:01:fe:fd:fc',), ('f7:ff:d4:00:01:fe:fd:fb',), ('f7:ff:d4:00:01:fe:fd:fd',), ('f7:ff:d5:00:01:fe:fd:fc',), ('f7:ff:d3:00:01:fe:fd:fc',), ('f7:ff:d5:00:01:fe:fd:fb',), ('f7:ff:d4:fe:fd:fc:fb:fa',), ('f7:ff:d4:fe:fd:fc:fb:fa',), ('f7:ff:d4:fe:fd:fc:fb:fa',), ('f7:ff:d4:fe:fd:fc:fb:fa',), ('f7:ff:d4:fe:fd:fc:fb:fa',), ('f7:ff:d4:fe:fd:fc:fb:fa',), ('f7:ff:d4:fe:fd:fc:fb:fa',)]"
postgresql,postgresql,SELECT  b & '00:00:00:ff:ff:ff' FROM macaddr8_data,macaddr8.sql,SAME,,"[('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:04',), ('00:00:00:ff:fe:01:02:02',), ('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:03',), ('00:00:00:ff:fe:01:02:04',), ('00:00:00:01:02:03:04:05',), ('00:00:00:01:02:03:04:05',), ('00:00:00:01:02:03:04:05',), ('00:00:00:01:02:03:04:05',), ('00:00:00:01:02:03:04:05',), ('00:00:00:01:02:03:04:05',), ('00:00:00:01:02:03:04:05',)]"
postgresql,postgresql,SELECT  b | '01:02:03:04:05:06' FROM macaddr8_data,macaddr8.sql,SAME,,"[('09:02:2b:ff:fe:05:07:07',), ('09:02:2b:ff:fe:05:07:07',), ('09:02:2b:ff:fe:05:07:07',), ('09:02:2b:ff:fe:05:07:07',), ('09:02:2b:ff:fe:05:07:07',), ('09:02:2b:ff:fe:05:07:07',), ('09:02:2b:ff:fe:05:07:07',), ('09:02:2b:ff:fe:05:07:07',), ('09:02:2b:ff:fe:05:07:06',), ('09:02:2b:ff:fe:05:07:06',), ('09:02:2b:ff:fe:05:07:07',), ('09:02:2f:ff:fe:05:07:07',), ('09:02:2b:ff:fe:05:07:06',), ('09:02:2b:ff:fe:07:05:07',), ('09:02:2b:ff:fe:07:05:07',), ('09:02:2b:ff:fe:07:05:07',), ('09:02:2b:ff:fe:07:05:07',), ('09:02:2b:ff:fe:07:05:07',), ('09:02:2b:ff:fe:07:05:07',), ('09:02:2b:ff:fe:07:05:07',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('08:00:2b:01:02:03:04:ZZ', 'macaddr8')",macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('08:00:2b:01:02:03:04:ZZ', 'macaddr8')",macaddr8.sql,SAME,,"[('invalid input syntax for type macaddr8: ""08:00:2b:01:02:03:04:ZZ""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('08:00:2b:01:02:03:04:', 'macaddr8')",macaddr8.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('08:00:2b:01:02:03:04:', 'macaddr8')",macaddr8.sql,SAME,,"[('invalid input syntax for type macaddr8: ""08:00:2b:01:02:03:04:""', None, None, '22P02')]"
postgresql,postgresql,"CREATE VIEW mvtest_tv AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type",matview.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM mvtest_tv ORDER BY type,matview.sql,SAME,,"[('x', Decimal('5')), ('y', Decimal('12')), ('z', Decimal('11'))]"
postgresql,postgresql,"EXPLAIN (costs off)   CREATE MATERIALIZED VIEW mvtest_tm AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type WITH NO DATA",matview.sql,SAME,,"[('HashAggregate',), ('  Group Key: type',), ('  ->  Seq Scan on mvtest_t',)]"
postgresql,postgresql,"CREATE MATERIALIZED VIEW mvtest_tm AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type WITH NO DATA",matview.sql,SAME,,[]
postgresql,postgresql,SELECT relispopulated FROM pg_class WHERE oid = 'mvtest_tm'::regclass,matview.sql,SAME,,"[(False,)]"
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_tm,matview.sql,SAME,,[]
postgresql,postgresql,SELECT relispopulated FROM pg_class WHERE oid = 'mvtest_tm'::regclass,matview.sql,SAME,,"[(True,)]"
postgresql,postgresql,CREATE UNIQUE INDEX mvtest_tm_type ON mvtest_tm (type),matview.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM mvtest_tm ORDER BY type,matview.sql,SAME,,"[('x', Decimal('5')), ('y', Decimal('12')), ('z', Decimal('11'))]"
postgresql,postgresql,EXPLAIN (costs off)   CREATE MATERIALIZED VIEW mvtest_tvm AS SELECT * FROM mvtest_tv ORDER BY type,matview.sql,SAME,,"[('Sort',), ('  Sort Key: mvtest_t.type',), ('  ->  HashAggregate',), ('        Group Key: mvtest_t.type',), ('        ->  Seq Scan on mvtest_t',)]"
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_tvm AS SELECT * FROM mvtest_tv ORDER BY type,matview.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM mvtest_tvm,matview.sql,SAME,,"[('x', Decimal('5')), ('y', Decimal('12')), ('z', Decimal('11'))]"
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_tmm AS SELECT sum(totamt) AS grandtot FROM mvtest_tm,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_tvmm AS SELECT sum(totamt) AS grandtot FROM mvtest_tvm,matview.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX mvtest_tvmm_expr ON mvtest_tvmm ((grandtot > 0)),matview.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX mvtest_tvmm_pred ON mvtest_tvmm (grandtot) WHERE grandtot < 0,matview.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW mvtest_tvv AS SELECT sum(totamt) AS grandtot FROM mvtest_tv,matview.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off)   CREATE MATERIALIZED VIEW mvtest_tvvm AS SELECT * FROM mvtest_tvv,matview.sql,SAME,,"[('Aggregate',), ('  ->  HashAggregate',), ('        Group Key: mvtest_t.type',), ('        ->  Seq Scan on mvtest_t',)]"
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_tvvm AS SELECT * FROM mvtest_tvv,matview.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW mvtest_tvvmv AS SELECT * FROM mvtest_tvvm,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_bb AS SELECT * FROM mvtest_tvvmv,matview.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX mvtest_aa ON mvtest_bb (grandtot),matview.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA mvtest_mvschema,matview.sql,SAME,,[]
postgresql,postgresql,ALTER MATERIALIZED VIEW mvtest_tvm SET SCHEMA mvtest_mvschema,matview.sql,SAME,,[]
postgresql,postgresql,"SET search_path = mvtest_mvschema, public",matview.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM mvtest_tm ORDER BY type,matview.sql,SAME,,"[('x', Decimal('5')), ('y', Decimal('12')), ('z', Decimal('11'))]"
postgresql,postgresql,SELECT * FROM mvtest_tvm ORDER BY type,matview.sql,SAME,,"[('x', Decimal('5')), ('y', Decimal('12')), ('z', Decimal('11'))]"
postgresql,postgresql,REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_tm,matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_tvm,matview.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM mvtest_tm ORDER BY type,matview.sql,SAME,,"[('x', Decimal('5')), ('y', Decimal('12')), ('z', Decimal('24'))]"
postgresql,postgresql,SELECT * FROM mvtest_tvm ORDER BY type,matview.sql,SAME,,"[('x', Decimal('5')), ('y', Decimal('12')), ('z', Decimal('24'))]"
postgresql,postgresql,RESET search_path,matview.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off)   SELECT * FROM mvtest_tmm,matview.sql,SAME,,"[('Seq Scan on mvtest_tmm',)]"
postgresql,postgresql,EXPLAIN (costs off)   SELECT * FROM mvtest_tvmm,matview.sql,SAME,,"[('Seq Scan on mvtest_tvmm',)]"
postgresql,postgresql,EXPLAIN (costs off)   SELECT * FROM mvtest_tvvm,matview.sql,SAME,,"[('Seq Scan on mvtest_tvvm',)]"
postgresql,postgresql,SELECT * FROM mvtest_tmm,matview.sql,SAME,,"[(Decimal('28'),)]"
postgresql,postgresql,SELECT * FROM mvtest_tvmm,matview.sql,SAME,,"[(Decimal('28'),)]"
postgresql,postgresql,SELECT * FROM mvtest_tvvm,matview.sql,SAME,,"[(Decimal('28'),)]"
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_tmm,matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_tvmm,matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_tvvm,matview.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off)   SELECT * FROM mvtest_tmm,matview.sql,SAME,,"[('Seq Scan on mvtest_tmm',)]"
postgresql,postgresql,EXPLAIN (costs off)   SELECT * FROM mvtest_tvmm,matview.sql,SAME,,"[('Seq Scan on mvtest_tvmm',)]"
postgresql,postgresql,EXPLAIN (costs off)   SELECT * FROM mvtest_tvvm,matview.sql,SAME,,"[('Seq Scan on mvtest_tvvm',)]"
postgresql,postgresql,SELECT * FROM mvtest_tmm,matview.sql,SAME,,"[(Decimal('41'),)]"
postgresql,postgresql,SELECT * FROM mvtest_tvmm,matview.sql,SAME,,"[(Decimal('41'),)]"
postgresql,postgresql,SELECT * FROM mvtest_tvvm,matview.sql,SAME,,"[(Decimal('41'),)]"
postgresql,postgresql,DROP MATERIALIZED VIEW IF EXISTS no_such_mv,matview.sql,SAME,,[]
postgresql,postgresql,"SELECT type, m.totamt AS mtot, v.totamt AS vtot FROM mvtest_tm m LEFT JOIN mvtest_tv v USING (type) ORDER BY type",matview.sql,SAME,,"[('x', Decimal('5'), Decimal('5')), ('y', Decimal('12'), Decimal('12')), ('z', Decimal('24'), Decimal('24'))]"
postgresql,postgresql,BEGIN,matview.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,matview.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW mvtest_vt1 AS SELECT 1 moo,matview.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW mvtest_vt2 AS SELECT moo, 2*moo FROM mvtest_vt1 UNION ALL SELECT moo, 3*moo FROM mvtest_vt1",matview.sql,SAME,,[]
postgresql,postgresql,"CREATE MATERIALIZED VIEW mv_test2 AS SELECT moo, 2*moo FROM mvtest_vt2 UNION ALL SELECT moo, 3*moo FROM mvtest_vt2",matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW mv_test3 AS SELECT * FROM mv_test2 WHERE moo = 12345,matview.sql,SAME,,[]
postgresql,postgresql,SELECT relispopulated FROM pg_class WHERE oid = 'mv_test3'::regclass,matview.sql,SAME,,"[(True,)]"
postgresql,postgresql,DROP VIEW mvtest_vt1 CASCADE,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_mv AS SELECT * FROM mvtest_foo,matview.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ON mvtest_mv(a),matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_mv AS SELECT * FROM mvtest_foo,matview.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ON mvtest_mv (a),matview.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX ON mvtest_mv (b),matview.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX on mvtest_mv (c),matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_mv,matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_mv1 AS SELECT 1 AS col1 WITH NO DATA,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_mv2 AS SELECT * FROM mvtest_mv1   WHERE col1 = (SELECT LEAST(col1) FROM mvtest_mv1) WITH NO DATA,matview.sql,SAME,,[]
postgresql,postgresql,DROP MATERIALIZED VIEW mvtest_mv1 CASCADE,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_boxmv AS SELECT * FROM mvtest_boxes,matview.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX mvtest_boxmv_id ON mvtest_boxmv (id),matview.sql,SAME,,[]
postgresql,postgresql,"UPDATE mvtest_boxes SET b = '(2,2),(1,1)' WHERE id = 2",matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_boxmv,matview.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM mvtest_boxmv ORDER BY id,matview.sql,SAME,,"[(1, '(32,32),(31,31)'), (2, '(2,2),(1,1)'), (3, '(1.9999996,1.9999996),(1,1)')]"
postgresql,postgresql,"CREATE MATERIALIZED VIEW mvtest_mv_v (ii, jj) AS SELECT i, j FROM mvtest_v",matview.sql,SAME,,[]
postgresql,postgresql,"CREATE MATERIALIZED VIEW mvtest_mv_v_2 (ii) AS SELECT i, j FROM mvtest_v",matview.sql,SAME,,[]
postgresql,postgresql,"CREATE MATERIALIZED VIEW mvtest_mv_v_3 (ii, jj) AS SELECT i, j FROM mvtest_v WITH NO DATA",matview.sql,SAME,,[]
postgresql,postgresql,"CREATE MATERIALIZED VIEW mvtest_mv_v_4 (ii) AS SELECT i, j FROM mvtest_v WITH NO DATA",matview.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE mvtest_v RENAME COLUMN i TO x,matview.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX mvtest_mv_v_ii ON mvtest_mv_v (ii),matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_mv_v,matview.sql,SAME,,[]
postgresql,postgresql,UPDATE mvtest_v SET j = 3 WHERE x = 1,matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv_v,matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_mv_v_2,matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_mv_v_3,matview.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW mvtest_mv_v_4,matview.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM mvtest_v,matview.sql,SAME,,"[(1, 3)]"
postgresql,postgresql,SELECT * FROM mvtest_mv_v,matview.sql,SAME,,"[(1, 3)]"
postgresql,postgresql,SELECT * FROM mvtest_mv_v_2,matview.sql,SAME,,"[(1, 3)]"
postgresql,postgresql,SELECT * FROM mvtest_mv_v_3,matview.sql,SAME,,"[(1, 3)]"
postgresql,postgresql,SELECT * FROM mvtest_mv_v_4,matview.sql,SAME,,"[(1, 3)]"
postgresql,postgresql,"CREATE MATERIALIZED VIEW mv_unspecified_types AS   SELECT 42 as i, 42.5 as num, 'foo' as u, 'foo'::unknown as u2, null as n",matview.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM mv_unspecified_types,matview.sql,SAME,,"[(42, Decimal('42.5'), 'foo', 'foo', None)]"
postgresql,postgresql,DROP MATERIALIZED VIEW mv_unspecified_types,matview.sql,SAME,,[]
postgresql,postgresql,create materialized view mvtest_error as select 1/0 as x with no data,matview.sql,SAME,,[]
postgresql,postgresql,drop materialized view mvtest_error,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW mvtest_mv_v AS SELECT a FROM mvtest_v WHERE a <= 5,matview.sql,SAME,,[]
postgresql,postgresql,DELETE FROM mvtest_v WHERE EXISTS ( SELECT * FROM mvtest_mv_v WHERE mvtest_mv_v.a = mvtest_v.a ),matview.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM mvtest_v,matview.sql,SAME,,"[(6,), (7,), (8,), (9,), (10,)]"
postgresql,postgresql,SELECT * FROM mvtest_mv_v,matview.sql,SAME,,"[(1,), (2,), (3,), (4,), (5,)]"
postgresql,postgresql,RESET ROLE,matview.sql,SAME,,[]
postgresql,postgresql,"SET search_path = mvtest_mvschema, public",matview.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE FUNCTION mvtest_drop_the_index()   RETURNS bool AS $$ BEGIN   EXECUTE 'DROP INDEX IF EXISTS mvtest_mvschema.mvtest_drop_idx';   RETURN true; END; $$ LANGUAGE plpgsql,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW drop_idx_matview AS   SELECT 1 as i WHERE mvtest_drop_the_index(),matview.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX mvtest_drop_idx ON drop_idx_matview (i),matview.sql,SAME,,[]
postgresql,postgresql,DROP MATERIALIZED VIEW drop_idx_matview,matview.sql,SAME,,[]
postgresql,postgresql,RESET search_path,matview.sql,SAME,,[]
postgresql,postgresql,BEGIN,matview.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION mvtest_func()   RETURNS void AS $$ BEGIN   CREATE MATERIALIZED VIEW mvtest1 AS SELECT 1 AS x;   CREATE MATERIALIZED VIEW mvtest2 AS SELECT 1 AS x WITH NO DATA; END; $$ LANGUAGE plpgsql,matview.sql,SAME,,[]
postgresql,postgresql,SELECT mvtest_func(),matview.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT * FROM mvtest1,matview.sql,SAME,,"[(1,)]"
postgresql,postgresql,ROLLBACK,matview.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA matview_schema,matview.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON SCHEMA matview_schema TO public,matview.sql,SAME,,[]
postgresql,postgresql,"CREATE MATERIALIZED VIEW matview_schema.mv_withdata1 (a) AS   SELECT generate_series(1, 10) WITH DATA",matview.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE MATERIALIZED VIEW matview_schema.mv_withdata2 (a) AS   SELECT generate_series(1, 10) WITH DATA",matview.sql,SAME,,"[('ProjectSet (actual rows=10 loops=1)',), ('  ->  Result (actual rows=1 loops=1)',)]"
postgresql,postgresql,REFRESH MATERIALIZED VIEW matview_schema.mv_withdata2,matview.sql,SAME,,[]
postgresql,postgresql,"CREATE MATERIALIZED VIEW matview_schema.mv_nodata1 (a) AS   SELECT generate_series(1, 10) WITH NO DATA",matview.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE MATERIALIZED VIEW matview_schema.mv_nodata2 (a) AS   SELECT generate_series(1, 10) WITH NO DATA",matview.sql,SAME,,"[('ProjectSet (never executed)',), ('  ->  Result (never executed)',)]"
postgresql,postgresql,REFRESH MATERIALIZED VIEW matview_schema.mv_nodata2,matview.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,matview.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA matview_schema CASCADE,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW matview_ine_tab AS SELECT 1,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW IF NOT EXISTS matview_ine_tab AS   SELECT 1 / 0,matview.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW IF NOT EXISTS matview_ine_tab AS   SELECT 1 / 0 WITH NO DATA,matview.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE MATERIALIZED VIEW IF NOT EXISTS matview_ine_tab AS     SELECT 1 / 0",matview.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)   CREATE MATERIALIZED VIEW IF NOT EXISTS matview_ine_tab AS     SELECT 1 / 0 WITH NO DATA",matview.sql,SAME,,[]
postgresql,postgresql,DROP MATERIALIZED VIEW matview_ine_tab,matview.sql,SAME,,[]
postgresql,postgresql,"select md5('') = 'd41d8cd98f00b204e9800998ecf8427e' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('a') = '0cc175b9c0f1b6a831c399e269772661' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('abc') = '900150983cd24fb0d6963f7d28e17f72' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('message digest') = 'f96b697d7cb7938d525a2f31aaf161d0' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('abcdefghijklmnopqrstuvwxyz') = 'c3fcd3d76192e4007dfb496cca67e13b' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') = 'd174ab98d277d9f5a5611c2c9f419d9f' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('12345678901234567890123456789012345678901234567890123456789012345678901234567890') = '57edf4a22be3c955ac49da2e2107b67a' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5(''::bytea) = 'd41d8cd98f00b204e9800998ecf8427e' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('a'::bytea) = '0cc175b9c0f1b6a831c399e269772661' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('abc'::bytea) = '900150983cd24fb0d6963f7d28e17f72' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('message digest'::bytea) = 'f96b697d7cb7938d525a2f31aaf161d0' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('abcdefghijklmnopqrstuvwxyz'::bytea) = 'c3fcd3d76192e4007dfb496cca67e13b' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'::bytea) = 'd174ab98d277d9f5a5611c2c9f419d9f' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select md5('12345678901234567890123456789012345678901234567890123456789012345678901234567890'::bytea) = '57edf4a22be3c955ac49da2e2107b67a' AS ""TRUE""",md5.sql,SAME,,"[(True,)]"
postgresql,postgresql,SET enable_hashjoin TO off,memoize.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan TO off,memoize.sql,SAME,,[]
postgresql,postgresql,SET enable_mergejoin TO off,memoize.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX expr_key_idx_x_t ON expr_key (x, t)",memoize.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE expr_key,memoize.sql,SAME,,[]
postgresql,postgresql,SET work_mem TO '64kB',memoize.sql,SAME,,[]
postgresql,postgresql,SET hash_mem_multiplier TO 1.0,memoize.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX flt_f_idx ON flt (f),memoize.sql,SAME,,[]
postgresql,postgresql,ANALYZE flt,memoize.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO off,memoize.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX strtest_n_idx ON strtest (n),memoize.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX strtest_t_idx ON strtest (t),memoize.sql,SAME,,[]
postgresql,postgresql,ANALYZE strtest,memoize.sql,SAME,,[]
postgresql,postgresql,SET enable_partitionwise_join TO on,memoize.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt_p1_a ON prt_p1 (a),memoize.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt_p2_a ON prt_p2 (a),memoize.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt,memoize.sql,SAME,,[]
postgresql,postgresql,SET enable_partitionwise_join TO off,memoize.sql,SAME,,[]
postgresql,postgresql,RESET enable_partitionwise_join,memoize.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,memoize.sql,SAME,,[]
postgresql,postgresql,RESET enable_mergejoin,memoize.sql,SAME,,[]
postgresql,postgresql,RESET work_mem,memoize.sql,SAME,,[]
postgresql,postgresql,RESET hash_mem_multiplier,memoize.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,memoize.sql,SAME,,[]
postgresql,postgresql,RESET enable_hashjoin,memoize.sql,SAME,,[]
postgresql,postgresql,SET min_parallel_table_scan_size TO 0,memoize.sql,SAME,,[]
postgresql,postgresql,SET parallel_setup_cost TO 0,memoize.sql,SAME,,[]
postgresql,postgresql,SET parallel_tuple_cost TO 0,memoize.sql,SAME,,[]
postgresql,postgresql,SET max_parallel_workers_per_gather TO 2,memoize.sql,SAME,,[]
postgresql,postgresql,RESET max_parallel_workers_per_gather,memoize.sql,SAME,,[]
postgresql,postgresql,RESET parallel_tuple_cost,memoize.sql,SAME,,[]
postgresql,postgresql,RESET parallel_setup_cost,memoize.sql,SAME,,[]
postgresql,postgresql,RESET min_parallel_table_scan_size,memoize.sql,SAME,,[]
postgresql,postgresql,"SELECT t.ctid is not null as matched, t.*, s.* FROM source s FULL OUTER JOIN target t ON s.sid = t.tid ORDER BY t.tid, s.sid",merge.sql,SAME,,"[(True, 1, 10, None, None), (True, 2, 20, None, None), (True, 3, 30, None, None)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	DELETE,merge.sql,SAME,,"[('Merge on target t',), ('  ->  Merge Join',), ('        Merge Cond: (t.tid = s.sid)',), ('        ->  Sort',), ('              Sort Key: t.tid',), ('              ->  Seq Scan on target t',), ('        ->  Sort',), ('              Sort Key: s.sid',), ('              ->  Seq Scan on source s',)]"
postgresql,postgresql,CREATE MATERIALIZED VIEW mv AS SELECT * FROM target,merge.sql,SAME,,[]
postgresql,postgresql,DROP MATERIALIZED VIEW mv,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target USING (SELECT 1) ON true WHEN MATCHED THEN 	DO NOTHING,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target USING source2 ON target.tid = source2.sid WHEN MATCHED THEN 	UPDATE SET balance = 0,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target USING source2 ON target.tid = source2.sid WHEN MATCHED THEN 	UPDATE SET balance = 0,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target2 USING source ON target2.tid = source.sid WHEN MATCHED THEN 	DELETE,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target2 USING source ON target2.tid = source.sid WHEN NOT MATCHED THEN 	INSERT DEFAULT VALUES,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target USING source ON target.tid = source.sid WHEN MATCHED THEN 	UPDATE SET balance = 0,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	UPDATE SET balance = 0,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	DELETE,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT DEFAULT VALUES,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM source ORDER BY sid,merge.sql,SAME,,"[(4, 40)]"
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30)]"
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	DO NOTHING,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	UPDATE SET balance = 0,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	DELETE,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT DEFAULT VALUES,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30), (None, None)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE target ADD PRIMARY KEY (tid),merge.sql,SAME,,[]
postgresql,postgresql,ANALYZE target,merge.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	UPDATE SET balance = 0,merge.sql,SAME,,"[('Merge on target t',), ('  ->  Hash Join',), ('        Hash Cond: (s.sid = t.tid)',), ('        ->  Seq Scan on source s',), ('        ->  Hash',), ('              ->  Seq Scan on target t',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	DELETE,merge.sql,SAME,,"[('Merge on target t',), ('  ->  Hash Join',), ('        Hash Cond: (s.sid = t.tid)',), ('        ->  Seq Scan on source s',), ('        ->  Hash',), ('              ->  Seq Scan on target t',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT VALUES (4, NULL)",merge.sql,SAME,,"[('Merge on target t',), ('  ->  Hash Left Join',), ('        Hash Cond: (s.sid = t.tid)',), ('        ->  Seq Scan on source s',), ('        ->  Hash',), ('              ->  Seq Scan on target t',)]"
postgresql,postgresql,DELETE FROM target WHERE tid > 100,merge.sql,SAME,,[]
postgresql,postgresql,ANALYZE target,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM source ORDER BY sid,merge.sql,SAME,,"[(2, 5), (3, 20), (4, 40)]"
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30)]"
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	UPDATE SET balance = 0,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 0), (3, 0)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	DELETE,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	DO NOTHING,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT VALUES (4, NULL)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30), (4, None)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM source ORDER BY sid,merge.sql,SAME,,"[(2, 5), (2, 5), (3, 20), (4, 40)]"
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30)]"
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,DELETE FROM source WHERE sid = 2,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM source ORDER BY sid,merge.sql,SAME,,"[(2, 5), (3, 20), (4, 40)]"
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30)]"
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,DELETE FROM source WHERE sid = 4,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM source ORDER BY sid,merge.sql,SAME,,"[(2, 5), (3, 20), (4, 40)]"
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30)]"
postgresql,postgresql,alter table target drop CONSTRAINT target_pkey,merge.sql,SAME,,[]
postgresql,postgresql,alter table target alter column tid drop not null,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT VALUES (4, 4) WHEN MATCHED THEN 	UPDATE SET balance = 0",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 0), (3, 0), (4, 4)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	UPDATE SET balance = 0 WHEN NOT MATCHED THEN 	INSERT VALUES (4, 4)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 0), (3, 0), (4, 4)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	UPDATE SET balance = t.balance + s.delta,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 25), (3, 50)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT VALUES (s.sid, s.delta)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30), (4, 40)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN NOT MATCHED THEN   INSERT VALUES (s.sid, s.delta)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (5, 50)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,DELETE FROM source WHERE sid = 5,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT (tid, balance) VALUES (s.sid, s.delta)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30), (4, 40)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED THEN 	UPDATE SET balance = t.balance + s.delta WHEN NOT MATCHED THEN 	INSERT VALUES (s.sid, s.delta)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 25), (3, 50), (4, 40)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT (tid) VALUES (s.sid),merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, -1)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN NOT MATCHED AND FALSE THEN 	INSERT (tid) VALUES (s.sid),merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN NOT MATCHED AND s.balance <> 100 THEN 	INSERT (tid) VALUES (s.sid),merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN NOT MATCHED AND s.balance = 100 THEN 	INSERT (tid) VALUES (s.sid),merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, -1)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN NOT MATCHED AND s.balance = 100 THEN 	INSERT (tid) VALUES (s.sid),merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, -1)]"
postgresql,postgresql,SELECT * FROM wq_source,merge.sql,SAME,,"[(100, 1)]"
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN MATCHED AND s.balance = 100 THEN 	UPDATE SET balance = t.balance + s.balance,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, 99)]"
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN MATCHED AND t.balance = 100 THEN 	UPDATE SET balance = t.balance + s.balance,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, 99)]"
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN MATCHED AND t.balance = 99 AND s.balance > 100 THEN 	UPDATE SET balance = t.balance + s.balance,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, 99)]"
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN MATCHED AND t.balance = 99 AND s.balance = 100 THEN 	UPDATE SET balance = t.balance + s.balance,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, 199)]"
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN MATCHED AND t.balance = 99 OR s.balance > 100 THEN 	UPDATE SET balance = t.balance + s.balance,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, 199)]"
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN MATCHED AND t.balance = 199 OR s.balance > 100 THEN 	UPDATE SET balance = t.balance + s.balance,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, 299)]"
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON (t.tid = s.sid) WHEN matched and t = s or t.tid = s.sid THEN 	UPDATE SET balance = t.balance + s.balance,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, 399)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN MATCHED AND t.balance > (SELECT max(balance) FROM target) THEN 	UPDATE SET balance = t.balance + s.balance,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO wq_target t USING wq_source s ON t.tid = s.sid WHEN MATCHED AND t.tableoid >= 0 THEN 	UPDATE SET balance = t.balance + s.balance,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM wq_target,merge.sql,SAME,,"[(1, 499)]"
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,UPDATE target SET balance = 0 WHERE tid = 3,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING source AS s ON t.tid = s.sid WHEN MATCHED AND t.balance > s.delta THEN 	UPDATE SET balance = t.balance - s.delta WHEN MATCHED THEN 	DELETE WHEN NOT MATCHED THEN 	INSERT VALUES (s.sid, s.delta)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 15), (4, 40)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target full outer join source on (sid = tid),merge.sql,SAME,,"[(3, 30, 3, 20), (2, 20, 2, 5), (None, None, 4, 40), (1, 10, None, None)]"
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target FULL OUTER JOIN source ON (sid = tid),merge.sql,SAME,,"[(3, 30, 3, 20), (2, 20, 2, 5), (None, None, 4, 40), (1, 10, None, None)]"
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING (SELECT 9 AS sid, 57 AS delta) AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT (tid, balance) VALUES (s.sid, s.delta)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30), (9, 57)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING (SELECT sid, delta FROM source WHERE delta > 0) AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT (tid, balance) VALUES (s.sid, s.delta)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30), (4, 40)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING (SELECT sid, delta as newname FROM source WHERE delta > 0) AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT (tid, balance) VALUES (s.sid, s.newname)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30), (4, 40)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t1 USING target t2 ON t1.tid = t2.tid WHEN MATCHED THEN 	UPDATE SET balance = t1.balance + t2.balance WHEN NOT MATCHED THEN 	INSERT VALUES (t2.tid, t2.balance)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 20), (2, 40), (3, 60)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING (SELECT tid as sid, balance as delta FROM target WHERE balance > 0) AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT (tid, balance) VALUES (s.sid, s.delta)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO target t USING (SELECT sid, max(delta) AS delta  FROM source  GROUP BY sid  HAVING count(*) = 1  ORDER BY sid ASC) AS s ON t.tid = s.sid WHEN NOT MATCHED THEN 	INSERT (tid, balance) VALUES (s.sid, s.delta)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30), (4, 40)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 10), (2, 20), (3, 30)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,prepare foom as merge into target t using (select 1 as sid) s on (t.tid = s.sid) when matched then update set balance = 1,merge.sql,SAME,,[]
postgresql,postgresql,execute foom,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 1), (2, 20), (3, 30)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"PREPARE foom2 (integer, integer) AS MERGE INTO target t USING (SELECT 1) s ON t.tid = $1 WHEN MATCHED THEN UPDATE SET balance = $2",merge.sql,SAME,,[]
postgresql,postgresql,"execute foom2 (1, 1)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM target ORDER BY tid,merge.sql,SAME,,"[(1, 1), (2, 20), (3, 30)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO sq_target t USING (SELECT * FROM sq_source) s ON tid = sid WHEN MATCHED AND t.balance > delta THEN 	UPDATE SET balance = t.balance + delta,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM sq_target,merge.sql,SAME,,"[(3, 300), (1, 110), (2, 220)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v AS SELECT * FROM sq_source WHERE sid < 2,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO sq_target USING v ON tid = sid WHEN MATCHED THEN     UPDATE SET balance = v.balance + delta,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM sq_target,merge.sql,SAME,,"[(2, 200), (3, 300), (1, 10)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO sq_target t USING v ON tid = sid WHEN MATCHED AND tid >= 2 THEN     UPDATE SET balance = t.balance + delta WHEN NOT MATCHED THEN 	INSERT (balance, tid) VALUES (balance + delta, sid) WHEN MATCHED AND tid < 2 THEN 	DELETE",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM sq_target,merge.sql,SAME,,"[(2, 200), (3, 300), (-1, -11)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"WITH targq AS ( 	SELECT * FROM v ) MERGE INTO sq_target t USING v ON tid = sid WHEN MATCHED AND tid >= 2 THEN     UPDATE SET balance = t.balance + delta WHEN NOT MATCHED THEN 	INSERT (balance, tid) VALUES (balance + delta, sid) WHEN MATCHED AND tid < 2 THEN 	DELETE",merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM sq_source ORDER BY sid,merge.sql,SAME,,"[(10, 1, 0), (20, 2, 0), (40, 4, 0)]"
postgresql,postgresql,SELECT * FROM sq_target ORDER BY tid,merge.sql,SAME,,"[(1, 100), (2, 200), (3, 300)]"
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (verbose, costs off) MERGE INTO tgt t USING (SELECT *, (SELECT count(*) FROM ref r                    WHERE r.ab = s.a + s.b                      AND r.cd = s.c - s.d) cnt          FROM src s) s ON t.a = s.a AND t.b < s.cnt WHEN MATCHED AND t.c > s.cnt THEN   UPDATE SET (b, c) = (SELECT s.b, s.cnt)",merge.sql,SAME,,"[('Merge on public.tgt t',), ('  ->  Hash Join',), ('        Output: t.ctid, s.a, s.b, s.c, s.d, s.ctid',), ('        Hash Cond: (t.a = s.a)',), ('        Join Filter: (t.b < (SubPlan 1))',), ('        ->  Seq Scan on public.tgt t',), ('              Output: t.ctid, t.a, t.b',), ('        ->  Hash',), ('              Output: s.a, s.b, s.c, s.d, s.ctid',), ('              ->  Seq Scan on public.src s',), ('                    Output: s.a, s.b, s.c, s.d, s.ctid',), ('        SubPlan 1',), ('          ->  Aggregate',), ('                Output: count(*)',), ('                ->  Seq Scan on public.ref r',), ('                      Output: r.ab, r.cd',), ('                      Filter: ((r.ab = (s.a + s.b)) AND (r.cd = (s.c - s.d)))',), ('  SubPlan 4',), ('    ->  Aggregate',), ('          Output: count(*)',), ('          ->  Seq Scan on public.ref r_2',), ('                Output: r_2.ab, r_2.cd',), ('                Filter: ((r_2.ab = (s.a + s.b)) AND (r_2.cd = (s.c - s.d)))',), ('  SubPlan 3 (returns $9,$10)',), ('    ->  Result',), ('          Output: s.b, $8',), ('          InitPlan 2 (returns $8)',), ('            ->  Aggregate',), ('                  Output: count(*)',), ('                  ->  Seq Scan on public.ref r_1',), ('                        Output: r_1.ab, r_1.cd',), ('                        Filter: ((r_1.ab = (s.a + s.b)) AND (r_1.cd = (s.c - s.d)))',)]"
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO sq_target t USING v ON tid = sid WHEN MATCHED THEN     UPDATE SET balance = (SELECT count(*) FROM sq_target),merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM sq_target WHERE tid = 1,merge.sql,SAME,,"[(1, 3)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO sq_target t USING v ON tid = sid WHEN MATCHED AND (SELECT count(*) > 0 FROM sq_target) THEN     UPDATE SET balance = 42,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM sq_target WHERE tid = 1,merge.sql,SAME,,"[(1, 42)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO sq_target t USING v ON tid = sid AND (SELECT count(*) > 0 FROM sq_target) WHEN MATCHED THEN     UPDATE SET balance = 42,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM sq_target WHERE tid = 1,merge.sql,SAME,,"[(1, 42)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO pa_target t   USING pa_source s   ON t.tid = s.sid   WHEN MATCHED THEN     UPDATE SET balance = balance + delta, val = val || ' updated by merge'   WHEN NOT MATCHED THEN     INSERT VALUES (sid, delta, 'inserted by merge')",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pa_target ORDER BY tid,merge.sql,SAME,,"[(1, 110.0, 'initial updated by merge'), (2, 20.0, 'inserted by merge'), (3, 330.0, 'initial updated by merge'), (4, 40.0, 'inserted by merge'), (5, 550.0, 'initial updated by merge'), (6, 60.0, 'inserted by merge'), (7, 770.0, 'initial updated by merge'), (8, 80.0, 'inserted by merge'), (9, 990.0, 'initial updated by merge'), (10, 100.0, 'inserted by merge'), (11, 1210.0, 'initial updated by merge'), (12, 120.0, 'inserted by merge'), (13, 1430.0, 'initial updated by merge'), (14, 140.0, 'inserted by merge')]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO pa_target t   USING pa_source s   ON t.tid = s.sid AND tid = 1   WHEN MATCHED THEN     UPDATE SET balance = balance + delta, val = val || ' updated by merge'   WHEN NOT MATCHED THEN     INSERT VALUES (sid, delta, 'inserted by merge')",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pa_target ORDER BY tid,merge.sql,SAME,,"[(1, 110.0, 'initial updated by merge'), (2, 20.0, 'inserted by merge'), (3, 30.0, 'inserted by merge'), (3, 300.0, 'initial'), (4, 40.0, 'inserted by merge'), (5, 500.0, 'initial'), (5, 50.0, 'inserted by merge'), (6, 60.0, 'inserted by merge'), (7, 700.0, 'initial'), (7, 70.0, 'inserted by merge'), (8, 80.0, 'inserted by merge'), (9, 90.0, 'inserted by merge'), (9, 900.0, 'initial'), (10, 100.0, 'inserted by merge'), (11, 1100.0, 'initial'), (11, 110.0, 'inserted by merge'), (12, 120.0, 'inserted by merge'), (13, 1300.0, 'initial'), (13, 130.0, 'inserted by merge'), (14, 140.0, 'inserted by merge')]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pa_target ORDER BY tid,merge.sql,SAME,,"[(1, 100.0, 'initial'), (3, 300.0, 'initial'), (5, 500.0, 'initial'), (7, 700.0, 'initial'), (9, 900.0, 'initial'), (11, 1100.0, 'initial'), (13, 1300.0, 'initial')]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part4 DROP COLUMN extraid,merge.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE pa_target ATTACH PARTITION part1 FOR VALUES IN (1,4)",merge.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE pa_target ATTACH PARTITION part2 FOR VALUES IN (2,5,6)",merge.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE pa_target ATTACH PARTITION part3 FOR VALUES IN (3,8,9)",merge.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pa_target ATTACH PARTITION part4 DEFAULT,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pa_target ORDER BY tid,merge.sql,SAME,,"[(1, 100.0, 'initial'), (3, 300.0, 'initial'), (5, 500.0, 'initial'), (7, 700.0, 'initial'), (9, 900.0, 'initial'), (11, 1100.0, 'initial'), (13, 1300.0, 'initial')]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO pa_target t   USING pa_source s   ON t.tid = s.sid AND tid IN (1, 5)   WHEN MATCHED AND tid % 5 = 0 THEN DELETE   WHEN MATCHED THEN     UPDATE SET balance = balance + delta, val = val || ' updated by merge'   WHEN NOT MATCHED THEN     INSERT VALUES (sid, delta, 'inserted by merge')",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pa_target ORDER BY tid,merge.sql,SAME,,"[(1, 110.0, 'initial updated by merge'), (2, 20.0, 'inserted by merge'), (3, 30.0, 'inserted by merge'), (3, 300.0, 'initial'), (4, 40.0, 'inserted by merge'), (6, 60.0, 'inserted by merge'), (7, 700.0, 'initial'), (7, 70.0, 'inserted by merge'), (8, 80.0, 'inserted by merge'), (9, 900.0, 'initial'), (9, 90.0, 'inserted by merge'), (10, 100.0, 'inserted by merge'), (11, 110.0, 'inserted by merge'), (11, 1100.0, 'initial'), (12, 120.0, 'inserted by merge'), (13, 1300.0, 'initial'), (13, 130.0, 'inserted by merge'), (14, 140.0, 'inserted by merge')]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pa_target ORDER BY tid,merge.sql,SAME,,"[(1, 100.0, 'initial'), (3, 300.0, 'initial'), (5, 500.0, 'initial'), (7, 700.0, 'initial'), (9, 900.0, 'initial'), (11, 1100.0, 'initial'), (13, 1300.0, 'initial')]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pa_target ORDER BY tid,merge.sql,SAME,,"[(1, 100.0, 'initial'), (3, 300.0, 'initial'), (5, 500.0, 'initial'), (7, 700.0, 'initial'), (9, 900.0, 'initial'), (11, 1100.0, 'initial'), (13, 1300.0, 'initial')]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,END,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pa_target ORDER BY tid,merge.sql,SAME,,"[(1, 100.0, 'initial'), (3, 300.0, 'initial'), (5, 500.0, 'initial'), (7, 700.0, 'initial'), (9, 900.0, 'initial'), (11, 1100.0, 'initial'), (13, 1300.0, 'initial')]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pa_target ENABLE ROW LEVEL SECURITY,merge.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pa_target FORCE ROW LEVEL SECURITY,merge.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY pa_target_pol ON pa_target USING (tid != 0),merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) MERGE INTO pa_target t USING pa_source s ON t.tid = s.sid   WHEN NOT MATCHED THEN INSERT VALUES (s.sid)",merge.sql,SAME,,"[('Merge on public.pa_target t',), ('  Merge on public.pa_targetp t_1',), ('  ->  Hash Left Join',), ('        Output: s.sid, s.ctid, t_1.tableoid, t_1.ctid',), ('        Inner Unique: true',), ('        Hash Cond: (s.sid = t_1.tid)',), ('        ->  Seq Scan on public.pa_source s',), ('              Output: s.sid, s.ctid',), ('        ->  Hash',), ('              Output: t_1.tid, t_1.tableoid, t_1.ctid',), ('              ->  Seq Scan on public.pa_targetp t_1',), ('                    Output: t_1.tid, t_1.tableoid, t_1.ctid',)]"
postgresql,postgresql,MERGE INTO pa_target t USING pa_source s ON t.tid = s.sid   WHEN NOT MATCHED THEN INSERT VALUES (s.sid),merge.sql,SAME,,[]
postgresql,postgresql,TABLE pa_target,merge.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) MERGE INTO pa_target t USING pa_source s ON t.tid = s.sid   WHEN NOT MATCHED THEN INSERT VALUES (s.sid)",merge.sql,SAME,,"[('Merge on public.pa_target t',), ('  ->  Hash Left Join',), ('        Output: s.sid, s.ctid, t.ctid',), ('        Inner Unique: true',), ('        Hash Cond: (s.sid = t.tid)',), ('        ->  Seq Scan on public.pa_source s',), ('              Output: s.sid, s.ctid',), ('        ->  Hash',), ('              Output: t.tid, t.ctid',), ('              ->  Result',), ('                    Output: t.tid, t.ctid',), ('                    One-Time Filter: false',)]"
postgresql,postgresql,"MERGE INTO cj_target t USING cj_source1 s1 	INNER JOIN cj_source2 s2 ON sid1 = sid2 ON t.tid = sid1 WHEN NOT MATCHED THEN 	INSERT VALUES (sid1, delta, sval)",merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO cj_target t USING cj_source2 s2 	INNER JOIN cj_source1 s1 ON sid1 = sid2 AND scat = 20 ON t.tid = sid1 WHEN NOT MATCHED THEN 	INSERT VALUES (sid2, delta, sval) WHEN MATCHED THEN 	DELETE",merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO cj_target t USING cj_source2 s2 	INNER JOIN cj_source1 s1 ON sid1 = sid2 ON t.tid = sid1 WHEN NOT MATCHED THEN 	INSERT VALUES (sid2, delta + scat, sval) WHEN MATCHED THEN 	UPDATE SET val = val || ' updated by merge'",merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO cj_target t USING cj_source2 s2 	INNER JOIN cj_source1 s1 ON sid1 = sid2 AND scat = 20 ON t.tid = sid1 WHEN MATCHED THEN 	UPDATE SET val = val || ' ' || delta::text,merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM cj_target,merge.sql,SAME,,"[(3, 400.0, 'initial source2 updated by merge'), (1, 220.0, 'initial source2 200'), (1, 110.0, 'initial source2 200'), (2, 320.0, 'initial source2 300')]"
postgresql,postgresql,"MERGE INTO cj_target t USING (SELECT *, 'join input'::text AS phv FROM cj_source1) fj 	FULL JOIN cj_source2 fj2 ON fj.scat = fj2.sid2 * 10 ON t.tid = fj.scat WHEN NOT MATCHED THEN 	INSERT (tid, balance, val) VALUES (fj.scat, fj.delta, fj.phv)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM cj_target,merge.sql,SAME,,"[(3, 400.0, 'initial source2 updated by merge'), (1, 220.0, 'initial source2 200'), (1, 110.0, 'initial source2 200'), (2, 320.0, 'initial source2 300'), (10, 100.0, 'join input'), (10, 400.0, 'join input'), (20, 200.0, 'join input'), (20, 300.0, 'join input'), (None, None, None)]"
postgresql,postgresql,ALTER TABLE cj_source1 RENAME COLUMN sid1 TO sid,merge.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE cj_source2 RENAME COLUMN sid2 TO sid,merge.sql,SAME,,[]
postgresql,postgresql,TRUNCATE cj_target,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO cj_target t USING cj_source1 s1 	INNER JOIN cj_source2 s2 ON s1.sid = s2.sid ON t.tid = s1.sid WHEN NOT MATCHED THEN 	INSERT VALUES (s2.sid, delta, sval)",merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO fs_target t USING generate_series(1,100,1) AS id ON t.a = id WHEN MATCHED THEN 	UPDATE SET b = b + id WHEN NOT MATCHED THEN 	INSERT VALUES (id, -1)",merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO fs_target t USING generate_series(1,100,2) AS id ON t.a = id WHEN MATCHED THEN 	UPDATE SET b = b + id, c = 'updated '|| id.*::text WHEN NOT MATCHED THEN 	INSERT VALUES (id, -1, 'inserted ' || id.*::text)",merge.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM fs_target,merge.sql,SAME,,"[(100,)]"
postgresql,postgresql,ALTER TABLE measurement_y2007m01 DROP COLUMN filler,merge.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE measurement_y2007m01 INHERIT measurement,merge.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, * FROM measurement ORDER BY city_id, logdate",merge.sql,SAME,,"[('measurement', 0, datetime.date(2005, 7, 21), 5, 15), ('measurement', 1, datetime.date(2006, 2, 10), 35, 10), ('measurement', 1, datetime.date(2006, 2, 16), 45, 20), ('measurement', 1, datetime.date(2006, 3, 17), 25, 10), ('measurement', 1, datetime.date(2006, 3, 27), 15, 40), ('measurement', 1, datetime.date(2007, 1, 15), 10, 10), ('measurement', 1, datetime.date(2007, 1, 17), 10, 10)]"
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO ONLY measurement m  USING new_measurement nm ON       (m.city_id = nm.city_id and m.logdate=nm.logdate) WHEN MATCHED AND nm.peaktemp IS NULL THEN DELETE WHEN MATCHED THEN UPDATE      SET peaktemp = greatest(m.peaktemp, nm.peaktemp),         unitsales = m.unitsales + coalesce(nm.unitsales, 0) WHEN NOT MATCHED THEN INSERT      (city_id, logdate, peaktemp, unitsales)    VALUES (city_id, logdate, peaktemp, unitsales)",merge.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, * FROM measurement ORDER BY city_id, logdate, peaktemp",merge.sql,SAME,,"[('measurement', 0, datetime.date(2005, 7, 21), 25, 35), ('measurement', 1, datetime.date(2006, 2, 10), 35, 10), ('measurement', 1, datetime.date(2006, 2, 16), 50, 30), ('measurement', 1, datetime.date(2006, 3, 1), 20, 10), ('measurement', 1, datetime.date(2006, 3, 17), 25, 10), ('measurement', 1, datetime.date(2007, 1, 15), 10, 10), ('measurement', 1, datetime.date(2007, 1, 16), 10, 10), ('measurement', 2, datetime.date(2006, 2, 10), 20, 20)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,"MERGE into measurement m  USING new_measurement nm ON       (m.city_id = nm.city_id and m.logdate=nm.logdate) WHEN MATCHED AND nm.peaktemp IS NULL THEN DELETE WHEN MATCHED THEN UPDATE      SET peaktemp = greatest(m.peaktemp, nm.peaktemp),         unitsales = m.unitsales + coalesce(nm.unitsales, 0) WHEN NOT MATCHED THEN INSERT      (city_id, logdate, peaktemp, unitsales)    VALUES (city_id, logdate, peaktemp, unitsales)",merge.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass, * FROM measurement ORDER BY city_id, logdate",merge.sql,SAME,,"[('measurement', 0, datetime.date(2005, 7, 21), 25, 35), ('measurement', 1, datetime.date(2006, 2, 10), 35, 10), ('measurement', 1, datetime.date(2006, 2, 16), 50, 30), ('measurement', 1, datetime.date(2006, 3, 1), 20, 10), ('measurement', 1, datetime.date(2006, 3, 17), 25, 10), ('measurement', 1, datetime.date(2007, 1, 15), 10, 10), ('measurement', 1, datetime.date(2007, 1, 16), 10, 10), ('measurement', 2, datetime.date(2006, 2, 10), 20, 20)]"
postgresql,postgresql,BEGIN,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO new_measurement nm  USING ONLY measurement m ON       (nm.city_id = m.city_id and nm.logdate=m.logdate) WHEN MATCHED THEN DELETE,merge.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM new_measurement ORDER BY city_id, logdate",merge.sql,SAME,,"[(1, datetime.date(2006, 3, 27), None, None), (1, datetime.date(2007, 1, 17), None, None)]"
postgresql,postgresql,ROLLBACK,merge.sql,SAME,,[]
postgresql,postgresql,MERGE INTO new_measurement nm  USING measurement m ON       (nm.city_id = m.city_id and nm.logdate=m.logdate) WHEN MATCHED THEN DELETE,merge.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM new_measurement ORDER BY city_id, logdate",merge.sql,SAME,,"[(1, datetime.date(2006, 3, 27), None, None), (1, datetime.date(2007, 1, 17), None, None)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,merge.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION hobby_construct(text, text)    RETURNS hobbies_r    AS 'select $1 as name, $2 as hobby'    LANGUAGE SQL",misc.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION hobby_construct_named(name text, hobby text)    RETURNS hobbies_r    AS 'select name, hobby'    LANGUAGE SQL",misc.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION hobbies_by_name(hobbies_r.name%TYPE)    RETURNS hobbies_r.person%TYPE    AS 'select person from hobbies_r where name = $1'    LANGUAGE SQL,misc.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION equipment(hobbies_r)    RETURNS setof equipment_r    AS 'select * from equipment_r where hobby = $1.name'    LANGUAGE SQL,misc.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION equipment_named(hobby hobbies_r)    RETURNS setof equipment_r    AS 'select * from equipment_r where equipment_r.hobby = equipment_named.hobby.name'    LANGUAGE SQL,misc.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION equipment_named_ambiguous_1a(hobby hobbies_r)    RETURNS setof equipment_r    AS 'select * from equipment_r where hobby = equipment_named_ambiguous_1a.hobby.name'    LANGUAGE SQL,misc.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION equipment_named_ambiguous_1b(hobby hobbies_r)    RETURNS setof equipment_r    AS 'select * from equipment_r where equipment_r.hobby = hobby.name'    LANGUAGE SQL,misc.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION equipment_named_ambiguous_1c(hobby hobbies_r)    RETURNS setof equipment_r    AS 'select * from equipment_r where hobby = hobby.name'    LANGUAGE SQL,misc.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION equipment_named_ambiguous_2a(hobby text)    RETURNS setof equipment_r    AS 'select * from equipment_r where hobby = equipment_named_ambiguous_2a.hobby'    LANGUAGE SQL,misc.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION equipment_named_ambiguous_2b(hobby text)    RETURNS setof equipment_r    AS 'select * from equipment_r where equipment_r.hobby = hobby'    LANGUAGE SQL,misc.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT hobbies_r.name, name(hobbies_r.equipment) FROM hobbies_r   ORDER BY 1,2",misc.sql,SAME,,"[('skywalking', 'guts')]"
postgresql,postgresql,"SELECT hobbies_r.name, (hobbies_r.equipment).name FROM hobbies_r",misc.sql,SAME,,"[('skywalking', 'guts')]"
postgresql,postgresql,"SELECT name(equipment(hobby_construct(text 'skywalking', text 'mer')))",misc.sql,SAME,,"[('guts',)]"
postgresql,postgresql,"SELECT name(equipment(hobby_construct_named(text 'skywalking', text 'mer')))",misc.sql,SAME,,"[('guts',)]"
postgresql,postgresql,"SELECT name(equipment_named(hobby_construct_named(text 'skywalking', text 'mer')))",misc.sql,SAME,,"[('guts',)]"
postgresql,postgresql,"SELECT name(equipment_named_ambiguous_1a(hobby_construct_named(text 'skywalking', text 'mer')))",misc.sql,SAME,,"[('guts',)]"
postgresql,postgresql,"SELECT name(equipment_named_ambiguous_1b(hobby_construct_named(text 'skywalking', text 'mer')))",misc.sql,SAME,,"[('guts',)]"
postgresql,postgresql,"SELECT name(equipment_named_ambiguous_1c(hobby_construct_named(text 'skywalking', text 'mer')))",misc.sql,SAME,,"[('guts',)]"
postgresql,postgresql,SELECT name(equipment_named_ambiguous_2a(text 'skywalking')),misc.sql,SAME,,"[('guts',)]"
postgresql,postgresql,SELECT name(equipment_named_ambiguous_2b(text 'skywalking')),misc.sql,SAME,,"[('advil',), (""peet's coffee"",), ('hightops',), ('guts',)]"
postgresql,postgresql,SELECT hobbies_by_name('basketball'),misc.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT * FROM equipment(ROW('skywalking', 'mer'))",misc.sql,SAME,,"[('guts', 'skywalking')]"
postgresql,postgresql,"SELECT name(equipment(ROW('skywalking', 'mer')))",misc.sql,SAME,,"[('guts',)]"
postgresql,postgresql,"SELECT *, name(equipment(h.*)) FROM hobbies_r h",misc.sql,SAME,,"[('skywalking', None, 'guts')]"
postgresql,postgresql,"SELECT *, (equipment(CAST((h.*) AS hobbies_r))).name FROM hobbies_r h",misc.sql,SAME,,"[('skywalking', None, 'guts')]"
postgresql,postgresql,SELECT num_nonnulls(NULL),misc_functions.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT num_nonnulls('1'),misc_functions.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT num_nonnulls(NULL::text),misc_functions.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT num_nonnulls(NULL::text, NULL::int)",misc_functions.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT num_nonnulls(1, 2, NULL::text, NULL::point, '', int8 '9', 1.0 / NULL)",misc_functions.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT num_nonnulls(VARIADIC '{1,2,NULL,3}'::int[])",misc_functions.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT num_nonnulls(VARIADIC '{""1"",""2"",""3"",""4""}'::text[])",misc_functions.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT num_nonnulls(VARIADIC ARRAY(SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) i))",misc_functions.sql,SAME,,"[(99,)]"
postgresql,postgresql,SELECT num_nulls(NULL),misc_functions.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT num_nulls('1'),misc_functions.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT num_nulls(NULL::text),misc_functions.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT num_nulls(NULL::text, NULL::int)",misc_functions.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT num_nulls(1, 2, NULL::text, NULL::point, '', int8 '9', 1.0 / NULL)",misc_functions.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT num_nulls(VARIADIC '{1,2,NULL,3}'::int[])",misc_functions.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT num_nulls(VARIADIC '{""1"",""2"",""3"",""4""}'::text[])",misc_functions.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT num_nulls(VARIADIC ARRAY(SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) i))",misc_functions.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT num_nonnulls(VARIADIC NULL::text[]),misc_functions.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT num_nonnulls(VARIADIC '{}'::int[]),misc_functions.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT num_nulls(VARIADIC NULL::text[]),misc_functions.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT num_nulls(VARIADIC '{}'::int[]),misc_functions.sql,SAME,,"[(0,)]"
postgresql,postgresql,RESET ROLE,misc_functions.sql,SAME,,[]
postgresql,postgresql,select * from (select (pg_timezone_names()).name) ptn where name='UTC' limit 1,misc_functions.sql,SAME,,"[('UTC',)]"
postgresql,postgresql,select count(*) > 0 from   (select pg_tablespace_databases(oid) as pts from pg_tablespace    where spcname = 'pg_default') pts   join pg_database db on pts.pts = db.oid,misc_functions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT count(*) > 0 AS ok FROM pg_control_checkpoint(),misc_functions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT count(*) > 0 AS ok FROM pg_control_init(),misc_functions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT count(*) > 0 AS ok FROM pg_control_recovery(),misc_functions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT count(*) > 0 AS ok FROM pg_control_system(),misc_functions.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT * FROM pg_split_walfile_name(NULL),misc_functions.sql,SAME,,"[(None, None)]"
postgresql,postgresql,"SELECT segment_number > 0 AS ok_segment_number, timeline_id   FROM pg_split_walfile_name('000000010000000100000000')",misc_functions.sql,SAME,,"[(True, 1)]"
postgresql,postgresql,"SELECT segment_number > 0 AS ok_segment_number, timeline_id   FROM pg_split_walfile_name('ffffffFF00000001000000af')",misc_functions.sql,SAME,,"[(True, 4294967295)]"
postgresql,postgresql,"SELECT * FROM pg_depend as d1 WHERE refclassid = 0 OR refobjid = 0 OR       classid = 0 OR objid = 0 OR       deptype NOT IN ('a', 'e', 'i', 'n', 'x', 'P', 'S')",misc_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM pg_shdepend as d1 WHERE refclassid = 0 OR refobjid = 0 OR       classid = 0 OR objid = 0 OR       deptype NOT IN ('a', 'o', 'r', 't')",misc_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, attname, atttypid::regtype FROM pg_class c JOIN pg_attribute a ON c.oid = attrelid WHERE c.oid < 16384 AND       reltoastrelid = 0 AND       relkind = 'r' AND       attstorage != 'p' ORDER BY 1, 2",misc_sanity.sql,SAME,,"[('pg_attribute', 'attacl', 'aclitem[]'), ('pg_attribute', 'attfdwoptions', 'text[]'), ('pg_attribute', 'attmissingval', 'anyarray'), ('pg_attribute', 'attoptions', 'text[]'), ('pg_class', 'relacl', 'aclitem[]'), ('pg_class', 'reloptions', 'text[]'), ('pg_class', 'relpartbound', 'pg_node_tree'), ('pg_index', 'indexprs', 'pg_node_tree'), ('pg_index', 'indpred', 'pg_node_tree'), ('pg_largeobject', 'data', 'bytea'), ('pg_largeobject_metadata', 'lomacl', 'aclitem[]')]"
postgresql,postgresql,SELECT relname FROM pg_class WHERE relnamespace = 'pg_catalog'::regnamespace AND relkind = 'r'       AND pg_class.oid NOT IN (SELECT indrelid FROM pg_index WHERE indisprimary) ORDER BY 1,misc_sanity.sql,SAME,,"[('pg_depend',), ('pg_shdepend',)]"
postgresql,postgresql,SELECT relname FROM pg_class c JOIN pg_index i ON c.oid = i.indexrelid WHERE relnamespace = 'pg_catalog'::regnamespace AND relkind = 'i'       AND i.indisunique       AND c.oid NOT IN (SELECT conindid FROM pg_constraint) ORDER BY 1,misc_sanity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM money_data,money.sql,SAME,,"[('$123.00',)]"
postgresql,postgresql,SELECT m + '123' FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT m + '123.45' FROM money_data,money.sql,SAME,,"[('$246.45',)]"
postgresql,postgresql,SELECT m - '123.45' FROM money_data,money.sql,SAME,,"[('-$0.45',)]"
postgresql,postgresql,SELECT m / '2'::money FROM money_data,money.sql,SAME,,"[(61.5,)]"
postgresql,postgresql,SELECT m * 2 FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT 2 * m FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT m / 2 FROM money_data,money.sql,SAME,,"[('$61.50',)]"
postgresql,postgresql,SELECT m * 2::int2 FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT 2::int2 * m FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT m / 2::int2 FROM money_data,money.sql,SAME,,"[('$61.50',)]"
postgresql,postgresql,SELECT m * 2::int8 FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT 2::int8 * m FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT m / 2::int8 FROM money_data,money.sql,SAME,,"[('$61.50',)]"
postgresql,postgresql,SELECT m * 2::float8 FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT 2::float8 * m FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT m / 2::float8 FROM money_data,money.sql,SAME,,"[('$61.50',)]"
postgresql,postgresql,SELECT m * 2::float4 FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT 2::float4 * m FROM money_data,money.sql,SAME,,"[('$246.00',)]"
postgresql,postgresql,SELECT m / 2::float4 FROM money_data,money.sql,SAME,,"[('$61.50',)]"
postgresql,postgresql,SELECT m = '$123.00' FROM money_data,money.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT m != '$124.00' FROM money_data,money.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT m <= '$123.00' FROM money_data,money.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT m >= '$123.00' FROM money_data,money.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT m < '$124.00' FROM money_data,money.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT m > '$122.00' FROM money_data,money.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT m = '$123.01' FROM money_data,money.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT m != '$123.00' FROM money_data,money.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT m <= '$122.99' FROM money_data,money.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT m >= '$123.01' FROM money_data,money.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT m > '$124.00' FROM money_data,money.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT m < '$122.00' FROM money_data,money.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT cashlarger(m, '$124.00') FROM money_data",money.sql,SAME,,"[('$124.00',)]"
postgresql,postgresql,"SELECT cashsmaller(m, '$124.00') FROM money_data",money.sql,SAME,,"[('$123.00',)]"
postgresql,postgresql,SELECT cash_words(m) FROM money_data,money.sql,SAME,,"[('One hundred twenty three dollars and zero cents',)]"
postgresql,postgresql,SELECT cash_words(m + '1.23') FROM money_data,money.sql,SAME,,"[('One hundred twenty four dollars and twenty three cents',)]"
postgresql,postgresql,DELETE FROM money_data,money.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM money_data,money.sql,SAME,,"[('$123.45',)]"
postgresql,postgresql,DELETE FROM money_data,money.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM money_data,money.sql,SAME,,"[('$123.45',)]"
postgresql,postgresql,DELETE FROM money_data,money.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM money_data,money.sql,SAME,,"[('$123.45',)]"
postgresql,postgresql,DELETE FROM money_data,money.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM money_data,money.sql,SAME,,"[('$123.46',)]"
postgresql,postgresql,DELETE FROM money_data,money.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM money_data,money.sql,SAME,,"[('$123.46',)]"
postgresql,postgresql,DELETE FROM money_data,money.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM money_data,money.sql,SAME,,"[('$123.46',)]"
postgresql,postgresql,SELECT '1234567890'::money,money.sql,SAME,,"[('$1,234,567,890.00',)]"
postgresql,postgresql,SELECT '12345678901234567'::money,money.sql,SAME,,"[('$12,345,678,901,234,567.00',)]"
postgresql,postgresql,SELECT '-12345'::money,money.sql,SAME,,"[('-$12,345.00',)]"
postgresql,postgresql,SELECT '-1234567890'::money,money.sql,SAME,,"[('-$1,234,567,890.00',)]"
postgresql,postgresql,SELECT '-12345678901234567'::money,money.sql,SAME,,"[('-$12,345,678,901,234,567.00',)]"
postgresql,postgresql,SELECT '(1)'::money,money.sql,SAME,,"[('-$1.00',)]"
postgresql,postgresql,"SELECT '($123,456.78)'::money",money.sql,SAME,,"[('-$123,456.78',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('\x0001', 'money')",money.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('\x0001', 'money')",money.sql,SAME,,"[('invalid input syntax for type money: ""\\x0001""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('192233720368547758.07', 'money')",money.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('192233720368547758.07', 'money')",money.sql,SAME,,"[('value ""192233720368547758.07"" is out of range for type money', None, None, '22003')]"
postgresql,postgresql,SELECT '-92233720368547758.08'::money,money.sql,SAME,,"[('-$92,233,720,368,547,758.08',)]"
postgresql,postgresql,SELECT '92233720368547758.07'::money,money.sql,SAME,,"[('$92,233,720,368,547,758.07',)]"
postgresql,postgresql,SELECT '878.08'::money / 11::float8,money.sql,SAME,,"[('$79.83',)]"
postgresql,postgresql,SELECT '878.08'::money / 11::float4,money.sql,SAME,,"[('$79.83',)]"
postgresql,postgresql,SELECT '878.08'::money / 11::bigint,money.sql,SAME,,"[('$79.82',)]"
postgresql,postgresql,SELECT '878.08'::money / 11::int,money.sql,SAME,,"[('$79.82',)]"
postgresql,postgresql,SELECT '878.08'::money / 11::smallint,money.sql,SAME,,"[('$79.82',)]"
postgresql,postgresql,SELECT '90000000000000099.00'::money / 10::bigint,money.sql,SAME,,"[('$9,000,000,000,000,009.90',)]"
postgresql,postgresql,SELECT '90000000000000099.00'::money / 10::int,money.sql,SAME,,"[('$9,000,000,000,000,009.90',)]"
postgresql,postgresql,SELECT '90000000000000099.00'::money / 10::smallint,money.sql,SAME,,"[('$9,000,000,000,000,009.90',)]"
postgresql,postgresql,SELECT 1234567890::money,money.sql,SAME,,"[('$1,234,567,890.00',)]"
postgresql,postgresql,SELECT 12345678901234567::money,money.sql,SAME,,"[('$12,345,678,901,234,567.00',)]"
postgresql,postgresql,SELECT (-12345)::money,money.sql,SAME,,"[('-$12,345.00',)]"
postgresql,postgresql,SELECT (-1234567890)::money,money.sql,SAME,,"[('-$1,234,567,890.00',)]"
postgresql,postgresql,SELECT (-12345678901234567)::money,money.sql,SAME,,"[('-$12,345,678,901,234,567.00',)]"
postgresql,postgresql,SELECT 1234567890::int4::money,money.sql,SAME,,"[('$1,234,567,890.00',)]"
postgresql,postgresql,SELECT 12345678901234567::int8::money,money.sql,SAME,,"[('$12,345,678,901,234,567.00',)]"
postgresql,postgresql,SELECT 12345678901234567::numeric::money,money.sql,SAME,,"[('$12,345,678,901,234,567.00',)]"
postgresql,postgresql,SELECT (-1234567890)::int4::money,money.sql,SAME,,"[('-$1,234,567,890.00',)]"
postgresql,postgresql,SELECT (-12345678901234567)::int8::money,money.sql,SAME,,"[('-$12,345,678,901,234,567.00',)]"
postgresql,postgresql,SELECT (-12345678901234567)::numeric::money,money.sql,SAME,,"[('-$12,345,678,901,234,567.00',)]"
postgresql,postgresql,SELECT '12345678901234567'::money::numeric,money.sql,SAME,,"[(Decimal('12345678901234567.00'),)]"
postgresql,postgresql,SELECT '-12345678901234567'::money::numeric,money.sql,SAME,,"[(Decimal('-12345678901234567.00'),)]"
postgresql,postgresql,SELECT '92233720368547758.07'::money::numeric,money.sql,SAME,,"[(Decimal('92233720368547758.07'),)]"
postgresql,postgresql,SELECT '-92233720368547758.08'::money::numeric,money.sql,SAME,,"[(Decimal('-92233720368547758.08'),)]"
postgresql,postgresql,"select '{[1,2], [3,4]}'::int4multirange",multirangetypes.sql,SAME,,"[('{[1,5)}',)]"
postgresql,postgresql,"select pg_input_is_valid('{[1,2], [4,5]}', 'int4multirange')",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_input_is_valid('{[1,2], [4,5]', 'int4multirange')",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('{[1,2], [4,5]', 'int4multirange')",multirangetypes.sql,SAME,,"[('malformed multirange literal: ""{[1,2], [4,5]""', 'Unexpected end of input.', None, '22P02')]"
postgresql,postgresql,"select pg_input_is_valid('{[1,2], [4,zed]}', 'int4multirange')",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('{[1,2], [4,zed]}', 'int4multirange')",multirangetypes.sql,SAME,,"[('invalid input syntax for type integer: ""zed""', None, None, '22P02')]"
postgresql,postgresql,select 'empty'::int4range::int4multirange,multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"select int4range(1, 3)::int4multirange",multirangetypes.sql,SAME,,"[('{[1,3)}',)]"
postgresql,postgresql,"select int4range(1, null)::int4multirange",multirangetypes.sql,SAME,,"[('{[1,)}',)]"
postgresql,postgresql,"select int4range(null, null)::int4multirange",multirangetypes.sql,SAME,,"[('{(,)}',)]"
postgresql,postgresql,"select unnest(int4multirange(int4range('5', '6'), int4range('1', '2')))",multirangetypes.sql,SAME,,"[(NumericRange(1, 2, '[)'),), (NumericRange(5, 6, '[)'),)]"
postgresql,postgresql,CREATE INDEX nummultirange_test_btree ON nummultirange_test(nmr),multirangetypes.sql,SAME,,[]
postgresql,postgresql,"SELECT nmr, isempty(nmr), lower(nmr), upper(nmr) FROM nummultirange_test ORDER BY nmr",multirangetypes.sql,SAME,,"[('{}', True, None, None), ('{}', True, None, None), ('{}', True, None, None), ('{}', True, None, None), ('{(,5)}', False, None, Decimal('5')), ('{(,)}', False, None, None), ('{(,)}', False, None, None), ('{[1.1,2.2)}', False, Decimal('1.1'), Decimal('2.2')), ('{[1.7,1.7],[1.9,2.1)}', False, Decimal('1.7'), Decimal('2.1')), ('{[1.7,1.9)}', False, Decimal('1.7'), Decimal('1.9')), ('{[3,)}', False, Decimal('3'), None)]"
postgresql,postgresql,"SELECT nmr, lower_inc(nmr), lower_inf(nmr), upper_inc(nmr), upper_inf(nmr) FROM nummultirange_test ORDER BY nmr",multirangetypes.sql,SAME,,"[('{}', False, False, False, False), ('{}', False, False, False, False), ('{}', False, False, False, False), ('{}', False, False, False, False), ('{(,5)}', False, True, False, False), ('{(,)}', False, True, False, True), ('{(,)}', False, True, False, True), ('{[1.1,2.2)}', True, False, False, False), ('{[1.7,1.7],[1.9,2.1)}', True, False, False, False), ('{[1.7,1.9)}', True, False, False, False), ('{[3,)}', True, False, False, True)]"
postgresql,postgresql,SELECT * FROM nummultirange_test WHERE nmr = '{}',multirangetypes.sql,SAME,,"[('{}',), ('{}',), ('{}',), ('{}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr = '{(,5)}'",multirangetypes.sql,SAME,,"[('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr = '{[3,)}'",multirangetypes.sql,SAME,,"[('{[3,)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr = '{[1.7,1.7]}'",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr = '{[1.7,1.7],[1.9,2.1)}'",multirangetypes.sql,SAME,,"[('{[1.7,1.7],[1.9,2.1)}',)]"
postgresql,postgresql,SELECT * FROM nummultirange_test WHERE nmr < '{}',multirangetypes.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr < '{[-1000.0, -1000.0]}'",multirangetypes.sql,SAME,,"[('{}',), ('{(,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr < '{[0.0, 1.0]}'",multirangetypes.sql,SAME,,"[('{}',), ('{(,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr < '{[1000.0, 1001.0]}'",multirangetypes.sql,SAME,,"[('{}',), ('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{[1.1,2.2)}',), ('{}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]"
postgresql,postgresql,SELECT * FROM nummultirange_test WHERE nmr <= '{}',multirangetypes.sql,SAME,,"[('{}',), ('{}',), ('{}',), ('{}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr <= '{[3,)}'",multirangetypes.sql,SAME,,"[('{}',), ('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{[1.1,2.2)}',), ('{}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]"
postgresql,postgresql,SELECT * FROM nummultirange_test WHERE nmr >= '{}',multirangetypes.sql,SAME,,"[('{}',), ('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{[1.1,2.2)}',), ('{}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr >= '{[3,)}'",multirangetypes.sql,SAME,,"[('{[3,)}',)]"
postgresql,postgresql,SELECT * FROM nummultirange_test WHERE nmr > '{}',multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr > '{[-1000.0, -1000.0]}'",multirangetypes.sql,SAME,,"[('{[3,)}',), ('{[1.1,2.2)}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr > '{[0.0, 1.0]}'",multirangetypes.sql,SAME,,"[('{[3,)}',), ('{[1.1,2.2)}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr > '{[1000.0, 1001.0]}'",multirangetypes.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM nummultirange_test WHERE nmr <> '{}',multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr <> '{(,5)}'",multirangetypes.sql,SAME,,"[('{}',), ('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{}',), ('{}',), ('{[1.1,2.2)}',), ('{}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]"
postgresql,postgresql,"select nummultirange(numrange(5.0, 6.0), numrange(1.0, 2.0))",multirangetypes.sql,SAME,,"[('{[1.0,2.0),[5.0,6.0)}',)]"
postgresql,postgresql,analyze nummultirange_test,multirangetypes.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE range_overlaps_multirange(numrange(4.0, 4.2), nmr)",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE numrange(4.0, 4.2) && nmr",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE multirange_overlaps_range(nmr, numrange(4.0, 4.2))",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr && numrange(4.0, 4.2)",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE multirange_overlaps_multirange(nmr, nummultirange(numrange(4.0, 4.2), numrange(6.0, 7.0)))",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr && nummultirange(numrange(4.0, 4.2), numrange(6.0, 7.0))",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr && nummultirange(numrange(6.0, 7.0))",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr && nummultirange(numrange(6.0, 7.0), numrange(8.0, 9.0))",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE multirange_contains_elem(nmr, 4.0)",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,SELECT * FROM nummultirange_test WHERE nmr @> 4.0,multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE multirange_contains_range(nmr, numrange(4.0, 4.2))",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr @> numrange(4.0, 4.2)",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE multirange_contains_multirange(nmr, '{[4.0,4.2), [6.0, 8.0)}')",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE nmr @> '{[4.0,4.2), [6.0, 8.0)}'::nummultirange",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE elem_contained_by_multirange(4.0, nmr)",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,SELECT * FROM nummultirange_test WHERE 4.0 <@ nmr,multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE range_contained_by_multirange(numrange(4.0, 4.2), nmr)",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE numrange(4.0, 4.2) <@ nmr",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE multirange_contained_by_multirange('{[4.0,4.2), [6.0, 8.0)}', nmr)",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',)]"
postgresql,postgresql,"SELECT * FROM nummultirange_test WHERE '{[4.0,4.2), [6.0, 8.0)}'::nummultirange <@ nmr",multirangetypes.sql,SAME,,"[('{(,)}',), ('{[3,)}',), ('{(,)}',)]"
postgresql,postgresql,SELECT 'empty'::numrange && nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'empty'::numrange && nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() && 'empty'::numrange,multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) && 'empty'::numrange",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() && nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange() && nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) && nummultirange()",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) && nummultirange(numrange(1,2), numrange(7,8))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(7,8)) && nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) && nummultirange(numrange(1,2), numrange(3.5,8))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(3.5,8)) && numrange(3,4)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(3.5,8)) && nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select '{(10,20),(30,40),(50,60)}'::nummultirange && '(42,92)'::numrange",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT nummultirange() @> nummultirange(),multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT nummultirange() @> 'empty'::numrange,multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(null,null)) @> numrange(1,2)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(null,null)) @> numrange(null,2)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(null,null)) @> numrange(2,null)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(null,5)) @> numrange(null,3)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(null,5)) @> numrange(null,8)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(5,null)) @> numrange(8,null)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(5,null)) @> numrange(3,null)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5)) @> numrange(8,9)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5)) @> numrange(3,9)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5)) @> numrange(1,4)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5)) @> numrange(1,5)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(-4,-2), numrange(1,5)) @> numrange(1,5)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5), numrange(8,9)) @> numrange(1,5)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5), numrange(8,9)) @> numrange(6,7)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5), numrange(6,9)) @> numrange(6,7)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,5)}'::nummultirange @> '{[1,5)}'",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[-4,-2), [1,5)}'::nummultirange @> '{[1,5)}'",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,5), [8,9)}'::nummultirange @> '{[1,5)}'",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,5), [8,9)}'::nummultirange @> '{[6,7)}'",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{[1,5), [6,9)}'::nummultirange @> '{[6,7)}'",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select '{(10,20),(30,40),(50,60)}'::nummultirange @> '(52,56)'::numrange",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(null,null) @> nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(null,null) @> nummultirange(numrange(null,2))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(null,null) @> nummultirange(numrange(2,null))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(null,5) @> nummultirange(numrange(null,3))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(null,5) @> nummultirange(numrange(null,8))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(5,null) @> nummultirange(numrange(8,null))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(5,null) @> nummultirange(numrange(3,null))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(1,5) @> nummultirange(numrange(8,9))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(1,5) @> nummultirange(numrange(3,9))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(1,5) @> nummultirange(numrange(1,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,5) @> nummultirange(numrange(1,5))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,9) @> nummultirange(numrange(-4,-2), numrange(1,5))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(1,9) @> nummultirange(numrange(1,5), numrange(8,9))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,9) @> nummultirange(numrange(1,5), numrange(6,9))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,9) @> nummultirange(numrange(1,5), numrange(6,10))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{[1,9)}' @> '{[1,5)}'::nummultirange",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,9)}' @> '{[-4,-2), [1,5)}'::nummultirange",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{[1,9)}' @> '{[1,5), [8,9)}'::nummultirange",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,9)}' @> '{[1,5), [6,9)}'::nummultirange",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,9)}' @> '{[1,5), [6,10)}'::nummultirange",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() <@ nummultirange(),multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT 'empty'::numrange <@ nummultirange(),multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,2) <@ nummultirange(numrange(null,null))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(null,2) <@ nummultirange(numrange(null,null))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(2,null) <@ nummultirange(numrange(null,null))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(null,3) <@ nummultirange(numrange(null,5))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(null,8) <@ nummultirange(numrange(null,5))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(8,null) <@ nummultirange(numrange(5,null))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(3,null) <@ nummultirange(numrange(5,null))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(8,9) <@ nummultirange(numrange(1,5))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(3,9) <@ nummultirange(numrange(1,5))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(1,4) <@ nummultirange(numrange(1,5))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,5) <@ nummultirange(numrange(1,5))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,5) <@ nummultirange(numrange(-4,-2), numrange(1,5))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,5) <@ nummultirange(numrange(1,5), numrange(8,9))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(6,7) <@ nummultirange(numrange(1,5), numrange(8,9))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(6,7) <@ nummultirange(numrange(1,5), numrange(6,9))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,5)}' <@ '{[1,5)}'::nummultirange",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,5)}' <@ '{[-4,-2), [1,5)}'::nummultirange",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,5)}' <@ '{[1,5), [8,9)}'::nummultirange",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[6,7)}' <@ '{[1,5), [8,9)}'::nummultirange",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{[6,7)}' <@ '{[1,5), [6,9)}'::nummultirange",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) <@ numrange(null,null)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(null,2)) <@ numrange(null,null)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(2,null)) <@ numrange(null,null)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(null,3)) <@ numrange(null,5)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(null,8)) <@ numrange(null,5)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(8,null)) <@ numrange(5,null)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,null)) <@ numrange(5,null)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(8,9)) <@ numrange(1,5)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,9)) <@ numrange(1,5)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,4)) <@ numrange(1,5)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5)) <@ numrange(1,5)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(-4,-2), numrange(1,5)) <@ numrange(1,9)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5), numrange(8,9)) <@ numrange(1,9)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5), numrange(6,9)) <@ numrange(1,9)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,5), numrange(6,10)) <@ numrange(1,9)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{[1,5)}'::nummultirange <@ '{[1,9)}'",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[-4,-2), [1,5)}'::nummultirange <@ '{[1,9)}'",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT '{[1,5), [8,9)}'::nummultirange <@ '{[1,9)}'",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,5), [6,9)}'::nummultirange <@ '{[1,9)}'",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT '{[1,5), [6,10)}'::nummultirange <@ '{[1,9)}'",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 'empty'::numrange &< nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'empty'::numrange &< nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() &< 'empty'::numrange,multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) &< 'empty'::numrange",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() &< nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) &< nummultirange()",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange() &< nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(6,7) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(1,2) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,4) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,6) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(3.5,6) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(6,7)) &< numrange(3,4)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) &< numrange(3,4)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,4)) &< numrange(3,4)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,6)) &< numrange(3,4)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3.5,6)) &< numrange(3,4)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(6,7)) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,4)) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,6)) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3.5,6)) &< nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() &> 'empty'::numrange,multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) &> 'empty'::numrange",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 'empty'::numrange &> nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'empty'::numrange &> nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() &> nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange() &> nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) &> nummultirange()",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> numrange(6,7)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> numrange(1,2)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> numrange(1,4)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> numrange(1,6)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> numrange(3.5,6)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(3,4) &> nummultirange(numrange(6,7))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(3,4) &> nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(3,4) &> nummultirange(numrange(1,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(3,4) &> nummultirange(numrange(1,6))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(3,4) &> nummultirange(numrange(3.5,6))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(6,7))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(1,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(1,6))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(3.5,6))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 'empty'::numrange -|- nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'empty'::numrange -|- nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() -|- 'empty'::numrange,multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) -|- 'empty'::numrange",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() -|- nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) -|- nummultirange()",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange() -|- nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT numrange(1,2) -|- nummultirange(numrange(2,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT numrange(1,2) -|- nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) -|- numrange(2,4)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) -|- numrange(3,4)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) -|- nummultirange(numrange(2,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) -|- nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(5,6)) -|- nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(5,6)) -|- nummultirange(numrange(6,7))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(5,6)) -|- nummultirange(numrange(8,9))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) -|- nummultirange(numrange(2,4), numrange(6,7))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'empty'::numrange << nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(1,2) << nummultirange()",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(1,2) << nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select numrange(1,2) << nummultirange(numrange(0,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(1,2) << nummultirange(numrange(0,4), numrange(7,8))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,select nummultirange() << 'empty'::numrange,multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange() << numrange(1,2)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(3,4)) << numrange(3,6)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(0,2)) << numrange(3,6)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select nummultirange(numrange(0,2), numrange(7,8)) << numrange(3,6)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(-4,-2), numrange(0,2)) << numrange(3,6)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,select nummultirange() << nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange() << nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(1,2)) << nummultirange()",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(1,2)) << nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(1,2)) << nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select nummultirange(numrange(1,2)) << nummultirange(numrange(3,4), numrange(7,8))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select nummultirange(numrange(1,2), numrange(4,5)) << nummultirange(numrange(3,4), numrange(7,8))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,select nummultirange() >> 'empty'::numrange,multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange() >> numrange(1,2)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(3,4)) >> numrange(1,2)",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select nummultirange(numrange(0,4)) >> numrange(1,2)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(0,4), numrange(7,8)) >> numrange(1,2)",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'empty'::numrange >> nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(1,2) >> nummultirange()",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(3,6) >> nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(3,6) >> nummultirange(numrange(0,2))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select numrange(3,6) >> nummultirange(numrange(0,2), numrange(7,8))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(3,6) >> nummultirange(numrange(-4,-2), numrange(0,2))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,select nummultirange() >> nummultirange(),multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(1,2)) >> nummultirange()",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange() >> nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(1,2)) >> nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select nummultirange(numrange(3,4)) >> nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select nummultirange(numrange(3,4), numrange(7,8)) >> nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select nummultirange(numrange(3,4), numrange(7,8)) >> nummultirange(numrange(1,2), numrange(4,5))",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT nummultirange() + nummultirange(),multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT nummultirange() + nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[('{[1,2)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) + nummultirange()",multirangetypes.sql,SAME,,"[('{[1,2)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) + nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[('{[1,2)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) + nummultirange(numrange(2,4))",multirangetypes.sql,SAME,,"[('{[1,4)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) + nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[('{[1,2),[3,4)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(4,5)) + nummultirange(numrange(2,4))",multirangetypes.sql,SAME,,"[('{[1,5)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(4,5)) + nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[('{[1,2),[3,5)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(4,5)) + nummultirange(numrange(0,9))",multirangetypes.sql,SAME,,"[('{[0,9)}',)]"
postgresql,postgresql,SELECT range_merge(nummultirange()),multirangetypes.sql,SAME,,"[(NumericRange(empty=True),)]"
postgresql,postgresql,"SELECT range_merge(nummultirange(numrange(1,2)))",multirangetypes.sql,SAME,,"[(NumericRange(Decimal('1'), Decimal('2'), '[)'),)]"
postgresql,postgresql,"SELECT range_merge(nummultirange(numrange(1,2), numrange(7,8)))",multirangetypes.sql,SAME,,"[(NumericRange(Decimal('1'), Decimal('8'), '[)'),)]"
postgresql,postgresql,SELECT nummultirange() - nummultirange(),multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT nummultirange() - nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) - nummultirange()",multirangetypes.sql,SAME,,"[('{[1,2)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(3,4)) - nummultirange()",multirangetypes.sql,SAME,,"[('{[1,2),[3,4)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) - nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) - nummultirange(numrange(2,4))",multirangetypes.sql,SAME,,"[('{[1,2)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) - nummultirange(numrange(3,4))",multirangetypes.sql,SAME,,"[('{[1,2)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[('{[2,4)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(2,3))",multirangetypes.sql,SAME,,"[('{[1,2),[3,4)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(0,8))",multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(0,2))",multirangetypes.sql,SAME,,"[('{[2,4)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,8)) - nummultirange(numrange(0,2), numrange(3,4))",multirangetypes.sql,SAME,,"[('{[2,3),[4,8)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,8)) - nummultirange(numrange(2,3), numrange(5,null))",multirangetypes.sql,SAME,,"[('{[1,2),[3,5)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(-2,0))",multirangetypes.sql,SAME,,"[('{[1,2),[4,5)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(2,4))",multirangetypes.sql,SAME,,"[('{[1,2),[4,5)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(3,5))",multirangetypes.sql,SAME,,"[('{[1,2)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(0,9))",multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,3), numrange(4,5)) - nummultirange(numrange(2,9))",multirangetypes.sql,SAME,,"[('{[1,2)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(8,9))",multirangetypes.sql,SAME,,"[('{[1,2),[4,5)}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(-2,0), numrange(8,9))",multirangetypes.sql,SAME,,"[('{[1,2),[4,5)}',)]"
postgresql,postgresql,SELECT nummultirange() * nummultirange(),multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT nummultirange() * nummultirange(numrange(1,2))",multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT nummultirange(numrange(1,2)) * nummultirange()",multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT '{[1,3)}'::nummultirange * '{[1,5)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[1,3)}',)]"
postgresql,postgresql,"SELECT '{[1,3)}'::nummultirange * '{[0,5)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[1,3)}',)]"
postgresql,postgresql,"SELECT '{[1,3)}'::nummultirange * '{[0,2)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[1,2)}',)]"
postgresql,postgresql,"SELECT '{[1,3)}'::nummultirange * '{[2,5)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[2,3)}',)]"
postgresql,postgresql,"SELECT '{[1,4)}'::nummultirange * '{[2,3)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[2,3)}',)]"
postgresql,postgresql,"SELECT '{[1,4)}'::nummultirange * '{[0,2), [3,5)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[1,2),[3,4)}',)]"
postgresql,postgresql,"SELECT '{[1,4), [7,10)}'::nummultirange * '{[0,8), [9,12)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[1,4),[7,8),[9,10)}',)]"
postgresql,postgresql,"SELECT '{[1,4), [7,10)}'::nummultirange * '{[9,12)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[9,10)}',)]"
postgresql,postgresql,"SELECT '{[1,4), [7,10)}'::nummultirange * '{[-5,-4), [5,6), [9,12)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[9,10)}',)]"
postgresql,postgresql,"SELECT '{[1,4), [7,10)}'::nummultirange * '{[0,2), [3,8), [9,12)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[1,2),[3,4),[7,8),[9,10)}',)]"
postgresql,postgresql,"SELECT '{[1,4), [7,10)}'::nummultirange * '{[0,2), [3,8), [9,12)}'::nummultirange",multirangetypes.sql,SAME,,"[('{[1,2),[3,4),[7,8),[9,10)}',)]"
postgresql,postgresql,create index test_mulrirange_gist_idx on test_multirange_gist using gist (mr),multirangetypes.sql,SAME,,[]
postgresql,postgresql,analyze test_multirange_gist,multirangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan    = t,multirangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan  = f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,select count(*) from test_multirange_gist where mr = '{}'::int4multirange,multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> 'empty'::int4range,multirangetypes.sql,SAME,,"[(3700,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr && 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr <@ 'empty'::int4range,multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr << 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr >> 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr &< 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr &> 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr -|- 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(3700,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(3700,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr && '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr <@ '{}'::int4multirange,multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr << '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr >> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr &< '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr &> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr -|- '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr = int4multirange(int4range(10,20), int4range(30,40), int4range(50,60))",multirangetypes.sql,SAME,,"[(1,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> 10,multirangetypes.sql,SAME,,"[(120,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr @> int4range(10,20)",multirangetypes.sql,SAME,,"[(111,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr && int4range(10,20)",multirangetypes.sql,SAME,,"[(139,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr <@ int4range(10,50)",multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr << int4range(100,500)",multirangetypes.sql,SAME,,"[(54,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr >> int4range(100,500)",multirangetypes.sql,SAME,,"[(2053,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr &< int4range(100,500)",multirangetypes.sql,SAME,,"[(474,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr &> int4range(100,500)",multirangetypes.sql,SAME,,"[(2893,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr -|- int4range(100,500)",multirangetypes.sql,SAME,,"[(3,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(3700,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr @> int4multirange(int4range(10,20), int4range(30,40))",multirangetypes.sql,SAME,,"[(110,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr && '{(10,20),(30,40),(50,60)}'::int4multirange",multirangetypes.sql,SAME,,"[(218,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr <@ '{(10,30),(40,60),(70,90)}'::int4multirange",multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr << int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(54,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr >> int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(2053,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr &< int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(474,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr &> int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(2893,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr -|- int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(3,)]"
postgresql,postgresql,SET enable_seqscan    = f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan  = t,multirangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,select count(*) from test_multirange_gist where mr = '{}'::int4multirange,multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> 'empty'::int4range,multirangetypes.sql,SAME,,"[(3700,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr && 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr <@ 'empty'::int4range,multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr << 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr >> 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr &< 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr &> 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr -|- 'empty'::int4range,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(3700,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(3700,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr && '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr <@ '{}'::int4multirange,multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr << '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr >> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr &< '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr &> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr -|- '{}'::int4multirange,multirangetypes.sql,SAME,,"[(0,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> 'empty'::int4range,multirangetypes.sql,SAME,,"[(3700,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr = int4multirange(int4range(10,20), int4range(30,40), int4range(50,60))",multirangetypes.sql,SAME,,"[(1,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> 10,multirangetypes.sql,SAME,,"[(120,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr @> int4range(10,20)",multirangetypes.sql,SAME,,"[(111,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr && int4range(10,20)",multirangetypes.sql,SAME,,"[(139,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr <@ int4range(10,50)",multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr << int4range(100,500)",multirangetypes.sql,SAME,,"[(54,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr >> int4range(100,500)",multirangetypes.sql,SAME,,"[(2053,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr &< int4range(100,500)",multirangetypes.sql,SAME,,"[(474,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr &> int4range(100,500)",multirangetypes.sql,SAME,,"[(2893,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr -|- int4range(100,500)",multirangetypes.sql,SAME,,"[(3,)]"
postgresql,postgresql,select count(*) from test_multirange_gist where mr @> '{}'::int4multirange,multirangetypes.sql,SAME,,"[(3700,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr @> int4multirange(int4range(10,20), int4range(30,40))",multirangetypes.sql,SAME,,"[(110,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr && '{(10,20),(30,40),(50,60)}'::int4multirange",multirangetypes.sql,SAME,,"[(218,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr <@ '{(10,30),(40,60),(70,90)}'::int4multirange",multirangetypes.sql,SAME,,"[(500,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr << int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(54,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr >> int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(2053,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr &< int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(474,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr &> int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(2893,)]"
postgresql,postgresql,"select count(*) from test_multirange_gist where mr -|- int4multirange(int4range(100,200), int4range(400,500))",multirangetypes.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT   room_id, range_agg(booked_during) FROM     reservations GROUP BY room_id ORDER BY room_id",multirangetypes.sql,SAME,,"[(1, '{[2018-07-01,2018-07-14),[2018-07-20,2018-07-22)}'), (2, '{[2018-07-01,2018-07-03)}'), (3, None), (4, None), (5, '{[2018-07-01,2018-07-03)}'), (6, '{[2018-07-01,2018-07-10)}'), (7, '{[2018-07-01,2018-07-14)}'), (8, '{}')]"
postgresql,postgresql,select range_agg(nmr) from nummultirange_test,multirangetypes.sql,SAME,,"[('{(,)}',)]"
postgresql,postgresql,select range_agg(nmr) from nummultirange_test where false,multirangetypes.sql,SAME,,"[(None,)]"
postgresql,postgresql,select range_agg(null::nummultirange) from nummultirange_test,multirangetypes.sql,SAME,,"[(None,)]"
postgresql,postgresql,select range_agg(nmr) from (values ('{}'::nummultirange)) t(nmr),multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"select range_agg(nmr) from (values ('{}'::nummultirange), ('{}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"select range_agg(nmr) from (values ('{[1,2]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{[1,2]}',)]"
postgresql,postgresql,"select range_agg(nmr) from (values ('{[1,2], [5,6]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{[1,2],[5,6]}',)]"
postgresql,postgresql,"select range_agg(nmr) from (values ('{[1,2], [2,3]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{[1,3]}',)]"
postgresql,postgresql,"select range_agg(nmr) from (values ('{[1,2]}'::nummultirange), ('{[5,6]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{[1,2],[5,6]}',)]"
postgresql,postgresql,"select range_agg(nmr) from (values ('{[1,2]}'::nummultirange), ('{[2,3]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{[1,3]}',)]"
postgresql,postgresql,select range_intersect_agg(nmr) from nummultirange_test,multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,select range_intersect_agg(nmr) from nummultirange_test where false,multirangetypes.sql,SAME,,"[(None,)]"
postgresql,postgresql,select range_intersect_agg(null::nummultirange) from nummultirange_test,multirangetypes.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select range_intersect_agg(nmr) from (values ('{[1,3]}'::nummultirange), ('{[6,12]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"select range_intersect_agg(nmr) from (values ('{[1,6]}'::nummultirange), ('{[3,12]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{[3,6]}',)]"
postgresql,postgresql,"select range_intersect_agg(nmr) from (values ('{[1,6], [10,12]}'::nummultirange), ('{[4,14]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{[4,6],[10,12]}',)]"
postgresql,postgresql,select range_intersect_agg(nmr) from (values ('{}'::nummultirange)) t(nmr),multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"select range_intersect_agg(nmr) from (values ('{[1,2]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{[1,2]}',)]"
postgresql,postgresql,"select range_intersect_agg(nmr) from (values ('{[1,6], [10,12]}'::nummultirange)) t(nmr)",multirangetypes.sql,SAME,,"[('{[1,6],[10,12]}',)]"
postgresql,postgresql,select range_intersect_agg(nmr) from nummultirange_test where nmr @> 4.0,multirangetypes.sql,SAME,,"[('{[3,5)}',)]"
postgresql,postgresql,create index nummultirange_test2_hash_idx on nummultirange_test2 using hash (nmr),multirangetypes.sql,SAME,,[]
postgresql,postgresql,select * from nummultirange_test2 where nmr = '{}',multirangetypes.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"select * from nummultirange_test2 where nmr = nummultirange(numrange(1.1, 2.2))",multirangetypes.sql,SAME,,"[('{[1.1,2.2)}',), ('{[1.1,2.2)}',)]"
postgresql,postgresql,"select * from nummultirange_test2 where nmr = nummultirange(numrange(1.1, 2.3))",multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop=t,multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin=f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin=f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,select * from nummultirange_test natural join nummultirange_test2 order by nmr,multirangetypes.sql,SAME,,"[('{}',), ('{}',), ('{}',), ('{}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.1,2.2)}',)]"
postgresql,postgresql,set enable_nestloop=f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin=t,multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin=f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,select * from nummultirange_test natural join nummultirange_test2 order by nmr,multirangetypes.sql,SAME,,"[('{}',), ('{}',), ('{}',), ('{}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.1,2.2)}',)]"
postgresql,postgresql,set enable_nestloop=f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin=f,multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin=t,multirangetypes.sql,SAME,,[]
postgresql,postgresql,select * from nummultirange_test natural join nummultirange_test2 order by nmr,multirangetypes.sql,SAME,,"[('{}',), ('{}',), ('{}',), ('{}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.1,2.2)}',)]"
postgresql,postgresql,set enable_nestloop to default,multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin to default,multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin to default,multirangetypes.sql,SAME,,[]
postgresql,postgresql,create domain mydomain as int4,multirangetypes.sql,SAME,,[]
postgresql,postgresql,create type mydomainrange as range(subtype=mydomain),multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select '{[4,50)}'::mydomainmultirange @> 7::mydomain",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,drop domain mydomain cascade,multirangetypes.sql,SAME,,[]
postgresql,postgresql,create domain restrictedmultirange as int4multirange check (upper(value) < 10),multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select '{[4,5)}'::restrictedmultirange @> 7",multirangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,drop domain restrictedmultirange,multirangetypes.sql,SAME,,[]
postgresql,postgresql,create type intr as range(subtype=int),multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select intr_multirange(intr(1,10))",multirangetypes.sql,SAME,,"[('{[1,10)}',)]"
postgresql,postgresql,drop type intr,multirangetypes.sql,SAME,,[]
postgresql,postgresql,"create type intmultirange as (x int, y int)",multirangetypes.sql,SAME,,[]
postgresql,postgresql,drop type intmultirange,multirangetypes.sql,SAME,,[]
postgresql,postgresql,"create type intr_multirange as (x int, y int)",multirangetypes.sql,SAME,,[]
postgresql,postgresql,drop type intr_multirange,multirangetypes.sql,SAME,,[]
postgresql,postgresql,"create type textrange1 as range(subtype=text, multirange_type_name=multirange_of_text, collation=""C"")",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"create type textrange2 as range(subtype=text, multirange_type_name=_textrange1, collation=""C"")",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select unnest(multirange_of_text(textrange1('a','b'), textrange1('d','e')))",multirangetypes.sql,SAME,,"[('[a,b)',), ('[d,e)',)]"
postgresql,postgresql,"select _textrange1(textrange2('a','z')) @> 'b'::text",multirangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,drop type textrange1,multirangetypes.sql,SAME,,[]
postgresql,postgresql,drop type textrange2,multirangetypes.sql,SAME,,[]
postgresql,postgresql,"create type textrange1 as range(subtype=text, multirange_type_name=multitextrange1, collation=""C"")",multirangetypes.sql,SAME,,[]
postgresql,postgresql,revoke usage on type multitextrange1 from public,multirangetypes.sql,SAME,,[]
postgresql,postgresql,revoke usage on type textrange1 from public,multirangetypes.sql,SAME,,[]
postgresql,postgresql,create temp table test1(f1 multitextrange1[]),multirangetypes.sql,SAME,,[]
postgresql,postgresql,create temp table test2(f1 multitextrange1[]),multirangetypes.sql,SAME,,[]
postgresql,postgresql,reset role,multirangetypes.sql,SAME,,[]
postgresql,postgresql,create function range_add_bounds(anymultirange)   returns anyelement as 'select lower($1) + upper($1)' language sql,multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select range_add_bounds(int4multirange(int4range(1, 17)))",multirangetypes.sql,SAME,,"[(18,)]"
postgresql,postgresql,"select range_add_bounds(nummultirange(numrange(1.0001, 123.123)))",multirangetypes.sql,SAME,,"[(Decimal('124.1231'),)]"
postgresql,postgresql,"create function multirangetypes_sql(q anymultirange, b anyarray, out c anyelement)   as $$ select upper($1) + $2[1] $$   language sql",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select multirangetypes_sql(int4multirange(int4range(1,10)), ARRAY[2,20])",multirangetypes.sql,SAME,,"[(12,)]"
postgresql,postgresql,"select ARRAY[nummultirange(numrange(1.1, 1.2)), nummultirange(numrange(12.3, 155.5))]",multirangetypes.sql,SAME,,"[('{""{[1.1,1.2)}"",""{[12.3,155.5)}""}',)]"
postgresql,postgresql,select * from i8mr_array,multirangetypes.sql,SAME,,"[(42, '{""{[1,10)}"",""{[2,20)}""}')]"
postgresql,postgresql,"create type two_ints as (a int, b int)",multirangetypes.sql,SAME,,[]
postgresql,postgresql,create type two_ints_range as range (subtype = two_ints),multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select *, row_to_json(upper(t)) as u from   (values (two_ints_multirange(two_ints_range(row(1,2), row(3,4)))),           (two_ints_multirange(two_ints_range(row(5,6), row(7,8))))) v(t)",multirangetypes.sql,SAME,,"[('{[""(1,2)"",""(3,4)"")}', {'a': 3, 'b': 4}), ('{[""(5,6)"",""(7,8)"")}', {'a': 7, 'b': 8})]"
postgresql,postgresql,drop type two_ints cascade,multirangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_sort = off,multirangetypes.sql,SAME,,[]
postgresql,postgresql,reset enable_sort,multirangetypes.sql,SAME,,[]
postgresql,postgresql,"create function mr_outparam_succeed(i anymultirange, out r anymultirange, out t text)   as $$ select $1, 'foo'::text $$ language sql",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from mr_outparam_succeed(int4multirange(int4range(1,2)))",multirangetypes.sql,SAME,,"[('{[1,2)}', 'foo')]"
postgresql,postgresql,"create function mr_outparam_succeed2(i anymultirange, out r anyarray, out t text)   as $$ select ARRAY[upper($1)], 'foo'::text $$ language sql",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from mr_outparam_succeed2(int4multirange(int4range(1,2)))",multirangetypes.sql,SAME,,"[([2], 'foo')]"
postgresql,postgresql,"create function mr_outparam_succeed3(i anymultirange, out r anyrange, out t text)   as $$ select range_merge($1), 'foo'::text $$ language sql",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from mr_outparam_succeed3(int4multirange(int4range(1,2)))",multirangetypes.sql,SAME,,"[(NumericRange(1, 2, '[)'), 'foo')]"
postgresql,postgresql,"create function mr_outparam_succeed4(i anyrange, out r anymultirange, out t text)   as $$ select multirange($1), 'foo'::text $$ language sql",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from mr_outparam_succeed4(int4range(1,2))",multirangetypes.sql,SAME,,"[('{[1,2)}', 'foo')]"
postgresql,postgresql,"create function mr_inoutparam_succeed(out i anyelement, inout r anymultirange)   as $$ select upper($1), $1 $$ language sql",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from mr_inoutparam_succeed(int4multirange(int4range(1,2)))",multirangetypes.sql,SAME,,"[(2, '{[1,2)}')]"
postgresql,postgresql,"create function mr_table_succeed(i anyelement, r anymultirange) returns table(i anyelement, r anymultirange)   as $$ select $1, $2 $$ language sql",multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from mr_table_succeed(123, int4multirange(int4range(1,11)))",multirangetypes.sql,SAME,,"[(123, '{[1,11)}')]"
postgresql,postgresql,create function mr_polymorphic(i anyrange) returns anymultirange   as $$ begin return multirange($1); end; $$ language plpgsql,multirangetypes.sql,SAME,,[]
postgresql,postgresql,"select mr_polymorphic(int4range(1, 4))",multirangetypes.sql,SAME,,"[('{[1,4)}',)]"
postgresql,postgresql,BEGIN,mvcc.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_seqscan = false,mvcc.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexonlyscan = false,mvcc.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_bitmapscan = false,mvcc.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX clean_aborted_self_key ON clean_aborted_self(key),mvcc.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,mvcc.sql,SAME,,[]
postgresql,postgresql,"SELECT name 'name string' = name 'name string' AS ""True""",name.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT name 'name string' = name 'name string ' AS ""False""",name.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT * FROM NAME_TBL,name.sql,SAME,,"[('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',), ('1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopq',), ('343f%2a',), ('d34aaasdf',), ('',), ('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',)]"
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 <> '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR',name.sql,SAME,,"[('1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopq',), ('343f%2a',), ('d34aaasdf',), ('',)]"
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR',name.sql,SAME,,"[('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',), ('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',)]"
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 < '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR',name.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 <= '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR',name.sql,SAME,,"[('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',), ('',), ('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',)]"
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 > '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR',name.sql,SAME,,"[('1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopq',), ('343f%2a',), ('d34aaasdf',)]"
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 >= '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR',name.sql,SAME,,"[('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',), ('1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopq',), ('343f%2a',), ('d34aaasdf',), ('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',)]"
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 ~ '.*',name.sql,SAME,,"[('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',), ('1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopq',), ('343f%2a',), ('d34aaasdf',), ('',), ('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',)]"
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 !~ '.*',name.sql,SAME,,[]
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 ~ '[0-9]',name.sql,SAME,,"[('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',), ('1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopq',), ('343f%2a',), ('d34aaasdf',), ('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQ',)]"
postgresql,postgresql,SELECT c.f1 FROM NAME_TBL c WHERE c.f1 ~ '.*asdf.*',name.sql,SAME,,"[('d34aaasdf',)]"
postgresql,postgresql,SELECT parse_ident('foo.boo'),name.sql,SAME,,"[(['foo', 'boo'],)]"
postgresql,postgresql,"SELECT parse_ident('foo.boo[]', strict => false)",name.sql,SAME,,"[(['foo', 'boo'],)]"
postgresql,postgresql,"SELECT length(a[1]), length(a[2]) from parse_ident('""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"".yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy') as a",name.sql,SAME,,"[(414, 289)]"
postgresql,postgresql,"SELECT parse_ident(' first . ""  second  "" .""   third   "". ""  ' || repeat('x',66) || '""')",name.sql,SAME,,"[(['first', '  second  ', '   third   ', '  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'],)]"
postgresql,postgresql,"SELECT parse_ident(' first . ""  second  "" .""   third   "". ""  ' || repeat('x',66) || '""')::name[]",name.sql,SAME,,"[(['first', '  second  ', '   third   ', '  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'],)]"
postgresql,postgresql,"SELECT pg_catalog.set_config('search_path', ' ', false)",namespace.sql,SAME,,"[(' ',)]"
postgresql,postgresql,SET search_path to public,namespace.sql,SAME,,[]
postgresql,postgresql,BEGIN,namespace.sql,SAME,,[]
postgresql,postgresql,"SET search_path to public, test_ns_schema_1",namespace.sql,SAME,,[]
postgresql,postgresql,COMMIT,namespace.sql,SAME,,[]
postgresql,postgresql,SHOW search_path,namespace.sql,SAME,,"[('public, test_ns_schema_1',)]"
postgresql,postgresql,BEGIN,namespace.sql,SAME,,[]
postgresql,postgresql,"SET search_path to public, test_ns_schema_1",namespace.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA test_ns_schema_2        CREATE VIEW abc_view AS SELECT a FROM abc,namespace.sql,SAME,,[]
postgresql,postgresql,SHOW search_path,namespace.sql,SAME,,"[('public, test_ns_schema_1',)]"
postgresql,postgresql,COMMIT,namespace.sql,SAME,,[]
postgresql,postgresql,SHOW search_path,namespace.sql,SAME,,"[('public, test_ns_schema_1',)]"
postgresql,postgresql,DROP SCHEMA test_ns_schema_2 CASCADE,namespace.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM pg_class WHERE relnamespace =     (SELECT oid FROM pg_namespace WHERE nspname = 'test_ns_schema_1'),namespace.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT * FROM test_ns_schema_1.abc,namespace.sql,SAME,,"[(1, None), (2, None), (3, None)]"
postgresql,postgresql,SELECT * FROM test_ns_schema_1.abc_view,namespace.sql,SAME,,"[(2, None), (3, None), (4, None)]"
postgresql,postgresql,ALTER SCHEMA test_ns_schema_1 RENAME TO test_ns_schema_renamed,namespace.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM pg_class WHERE relnamespace =     (SELECT oid FROM pg_namespace WHERE nspname = 'test_ns_schema_1'),namespace.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE SCHEMA IF NOT EXISTS test_ns_schema_renamed,namespace.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA test_ns_schema_renamed CASCADE,namespace.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM pg_class WHERE relnamespace =     (SELECT oid FROM pg_namespace WHERE nspname = 'test_ns_schema_renamed'),namespace.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE SCHEMA test_maint_search_path,namespace.sql,SAME,,[]
postgresql,postgresql,SET search_path = test_maint_search_path,namespace.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION fn(INT) RETURNS INT IMMUTABLE LANGUAGE plpgsql AS $$   BEGIN     RAISE NOTICE 'current search_path: %', current_setting('search_path');     RETURN $1;   END; $$",namespace.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW test_maint_mv AS SELECT fn(i) FROM test_maint,namespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX test_maint_idx ON test_maint_search_path.test_maint (fn(i)),namespace.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE test_maint_search_path.test_maint,namespace.sql,SAME,,[]
postgresql,postgresql,ANALYZE test_maint_search_path.test_maint,namespace.sql,SAME,,[]
postgresql,postgresql,VACUUM FULL test_maint_search_path.test_maint,namespace.sql,SAME,,[]
postgresql,postgresql,CLUSTER test_maint_search_path.test_maint USING test_maint_idx,namespace.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW test_maint_search_path.test_maint_mv,namespace.sql,SAME,,[]
postgresql,postgresql,RESET search_path,namespace.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA test_maint_search_path CASCADE,namespace.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX num_exp_add_idx ON num_exp_add (id1, id2)",numeric.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX num_exp_sub_idx ON num_exp_sub (id1, id2)",numeric.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX num_exp_div_idx ON num_exp_div (id1, id2)",numeric.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX num_exp_mul_idx ON num_exp_mul (id1, id2)",numeric.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX num_exp_sqrt_idx ON num_exp_sqrt (id),numeric.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX num_exp_ln_idx ON num_exp_ln (id),numeric.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX num_exp_log10_idx ON num_exp_log10 (id),numeric.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX num_exp_power_10_ln_idx ON num_exp_power_10_ln (id),numeric.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_add,numeric.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_sub,numeric.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_div,numeric.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_mul,numeric.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_sqrt,numeric.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_ln,numeric.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_log10,numeric.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_power_10_ln,numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, t2.expected     FROM num_result t1, num_exp_add t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != t2.expected",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 10) as expected     FROM num_result t1, num_exp_add t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != round(t2.expected, 10)",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, t2.expected     FROM num_result t1, num_exp_sub t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != t2.expected",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 40)     FROM num_result t1, num_exp_sub t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != round(t2.expected, 40)",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, t2.expected     FROM num_result t1, num_exp_mul t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != t2.expected",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 30) as expected     FROM num_result t1, num_exp_mul t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != round(t2.expected, 30)",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, t2.expected     FROM num_result t1, num_exp_div t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != t2.expected",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 80) as expected     FROM num_result t1, num_exp_div t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != round(t2.expected, 80)",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.result, t2.expected     FROM num_result t1, num_exp_sqrt t2     WHERE t1.id1 = t2.id     AND t1.result != t2.expected",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.result, t2.expected     FROM num_result t1, num_exp_ln t2     WHERE t1.id1 = t2.id     AND t1.result != t2.expected",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.result, t2.expected     FROM num_result t1, num_exp_log10 t2     WHERE t1.id1 = t2.id     AND t1.result != t2.expected",numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.result, t2.expected     FROM num_result t1, num_exp_power_10_ln t2     WHERE t1.id1 = t2.id     AND t1.result != t2.expected",numeric.sql,SAME,,[]
postgresql,postgresql,"WITH v(x) AS   (VALUES('0'::numeric),('1'),('-1'),('4.2'),('inf'),('-inf'),('nan')) SELECT x1, x2,   x1 + x2 AS sum,   x1 - x2 AS diff,   x1 * x2 AS prod FROM v AS v1(x1), v AS v2(x2)",numeric.sql,SAME,,"[(Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0')), (Decimal('0'), Decimal('1'), Decimal('1'), Decimal('-1'), Decimal('0')), (Decimal('0'), Decimal('-1'), Decimal('-1'), Decimal('1'), Decimal('0')), (Decimal('0'), Decimal('4.2'), Decimal('4.2'), Decimal('-4.2'), Decimal('0.0')), (Decimal('0'), Decimal('Infinity'), Decimal('Infinity'), Decimal('-Infinity'), Decimal('NaN')), (Decimal('0'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('Infinity'), Decimal('NaN')), (Decimal('0'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('1'), Decimal('0'), Decimal('1'), Decimal('1'), Decimal('0')), (Decimal('1'), Decimal('1'), Decimal('2'), Decimal('0'), Decimal('1')), (Decimal('1'), Decimal('-1'), Decimal('0'), Decimal('2'), Decimal('-1')), (Decimal('1'), Decimal('4.2'), Decimal('5.2'), Decimal('-3.2'), Decimal('4.2')), (Decimal('1'), Decimal('Infinity'), Decimal('Infinity'), Decimal('-Infinity'), Decimal('Infinity')), (Decimal('1'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('Infinity'), Decimal('-Infinity')), (Decimal('1'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('-1'), Decimal('0'), Decimal('-1'), Decimal('-1'), Decimal('0')), (Decimal('-1'), Decimal('1'), Decimal('0'), Decimal('-2'), Decimal('-1')), (Decimal('-1'), Decimal('-1'), Decimal('-2'), Decimal('0'), Decimal('1')), (Decimal('-1'), Decimal('4.2'), Decimal('3.2'), Decimal('-5.2'), Decimal('-4.2')), (Decimal('-1'), Decimal('Infinity'), Decimal('Infinity'), Decimal('-Infinity'), Decimal('-Infinity')), (Decimal('-1'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('-1'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('4.2'), Decimal('0'), Decimal('4.2'), Decimal('4.2'), Decimal('0.0')), (Decimal('4.2'), Decimal('1'), Decimal('5.2'), Decimal('3.2'), Decimal('4.2')), (Decimal('4.2'), Decimal('-1'), Decimal('3.2'), Decimal('5.2'), Decimal('-4.2')), (Decimal('4.2'), Decimal('4.2'), Decimal('8.4'), Decimal('0.0'), Decimal('17.64')), (Decimal('4.2'), Decimal('Infinity'), Decimal('Infinity'), Decimal('-Infinity'), Decimal('Infinity')), (Decimal('4.2'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('Infinity'), Decimal('-Infinity')), (Decimal('4.2'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('Infinity'), Decimal('0'), Decimal('Infinity'), Decimal('Infinity'), Decimal('NaN')), (Decimal('Infinity'), Decimal('1'), Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('Infinity'), Decimal('-1'), Decimal('Infinity'), Decimal('Infinity'), Decimal('-Infinity')), (Decimal('Infinity'), Decimal('4.2'), Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity'), Decimal('NaN'), Decimal('Infinity')), (Decimal('Infinity'), Decimal('-Infinity'), Decimal('NaN'), Decimal('Infinity'), Decimal('-Infinity')), (Decimal('Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('-Infinity'), Decimal('0'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('NaN')), (Decimal('-Infinity'), Decimal('1'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('-Infinity')), (Decimal('-Infinity'), Decimal('-1'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('Infinity')), (Decimal('-Infinity'), Decimal('4.2'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('-Infinity')), (Decimal('-Infinity'), Decimal('Infinity'), Decimal('NaN'), Decimal('-Infinity'), Decimal('-Infinity')), (Decimal('-Infinity'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('NaN'), Decimal('Infinity')), (Decimal('-Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('0'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('1'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('-1'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('4.2'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('-Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,"WITH v(x) AS   (VALUES('0'::numeric),('1'),('-1'),('4.2'),('inf'),('-inf'),('nan')) SELECT x1, x2,   x1 / x2 AS quot,   x1 % x2 AS mod,   div(x1, x2) AS div FROM v AS v1(x1), v AS v2(x2) WHERE x2 != 0",numeric.sql,SAME,,"[(Decimal('0'), Decimal('1'), Decimal('0E-20'), Decimal('0'), Decimal('0')), (Decimal('1'), Decimal('1'), Decimal('1.00000000000000000000'), Decimal('0'), Decimal('1')), (Decimal('-1'), Decimal('1'), Decimal('-1.00000000000000000000'), Decimal('0'), Decimal('-1')), (Decimal('4.2'), Decimal('1'), Decimal('4.2000000000000000'), Decimal('0.2'), Decimal('4')), (Decimal('Infinity'), Decimal('1'), Decimal('Infinity'), Decimal('NaN'), Decimal('Infinity')), (Decimal('-Infinity'), Decimal('1'), Decimal('-Infinity'), Decimal('NaN'), Decimal('-Infinity')), (Decimal('NaN'), Decimal('1'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('0'), Decimal('-1'), Decimal('0E-20'), Decimal('0'), Decimal('0')), (Decimal('1'), Decimal('-1'), Decimal('-1.00000000000000000000'), Decimal('0'), Decimal('-1')), (Decimal('-1'), Decimal('-1'), Decimal('1.00000000000000000000'), Decimal('0'), Decimal('1')), (Decimal('4.2'), Decimal('-1'), Decimal('-4.2000000000000000'), Decimal('0.2'), Decimal('-4')), (Decimal('Infinity'), Decimal('-1'), Decimal('-Infinity'), Decimal('NaN'), Decimal('-Infinity')), (Decimal('-Infinity'), Decimal('-1'), Decimal('Infinity'), Decimal('NaN'), Decimal('Infinity')), (Decimal('NaN'), Decimal('-1'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('0'), Decimal('4.2'), Decimal('0E-20'), Decimal('0.0'), Decimal('0')), (Decimal('1'), Decimal('4.2'), Decimal('0.23809523809523809524'), Decimal('1.0'), Decimal('0')), (Decimal('-1'), Decimal('4.2'), Decimal('-0.23809523809523809524'), Decimal('-1.0'), Decimal('0')), (Decimal('4.2'), Decimal('4.2'), Decimal('1.00000000000000000000'), Decimal('0.0'), Decimal('1')), (Decimal('Infinity'), Decimal('4.2'), Decimal('Infinity'), Decimal('NaN'), Decimal('Infinity')), (Decimal('-Infinity'), Decimal('4.2'), Decimal('-Infinity'), Decimal('NaN'), Decimal('-Infinity')), (Decimal('NaN'), Decimal('4.2'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('0'), Decimal('Infinity'), Decimal('0'), Decimal('0'), Decimal('0')), (Decimal('1'), Decimal('Infinity'), Decimal('0'), Decimal('1'), Decimal('0')), (Decimal('-1'), Decimal('Infinity'), Decimal('0'), Decimal('-1'), Decimal('0')), (Decimal('4.2'), Decimal('Infinity'), Decimal('0'), Decimal('4.2'), Decimal('0')), (Decimal('Infinity'), Decimal('Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('-Infinity'), Decimal('Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('0'), Decimal('-Infinity'), Decimal('0'), Decimal('0'), Decimal('0')), (Decimal('1'), Decimal('-Infinity'), Decimal('0'), Decimal('1'), Decimal('0')), (Decimal('-1'), Decimal('-Infinity'), Decimal('0'), Decimal('-1'), Decimal('0')), (Decimal('4.2'), Decimal('-Infinity'), Decimal('0'), Decimal('4.2'), Decimal('0')), (Decimal('Infinity'), Decimal('-Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('-Infinity'), Decimal('-Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('-Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('0'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('1'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('-1'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('4.2'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('-Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,SELECT 'nan'::numeric / '0',numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,SELECT 'nan'::numeric % '0',numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,"SELECT div('nan'::numeric, '0')",numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,"WITH v(x) AS   (VALUES('0'::numeric),('1'),('-1'),('4.2'),('-7.777'),('inf'),('-inf'),('nan')) SELECT x, -x as minusx, abs(x), floor(x), ceil(x), sign(x), numeric_inc(x) as inc FROM v",numeric.sql,SAME,,"[(Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('1')), (Decimal('1'), Decimal('-1'), Decimal('1'), Decimal('1'), Decimal('1'), Decimal('1'), Decimal('2')), (Decimal('-1'), Decimal('1'), Decimal('1'), Decimal('-1'), Decimal('-1'), Decimal('-1'), Decimal('0')), (Decimal('4.2'), Decimal('-4.2'), Decimal('4.2'), Decimal('4'), Decimal('5'), Decimal('1'), Decimal('5.2')), (Decimal('-7.777'), Decimal('7.777'), Decimal('7.777'), Decimal('-8'), Decimal('-7'), Decimal('-1'), Decimal('-6.777')), (Decimal('Infinity'), Decimal('-Infinity'), Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity'), Decimal('1'), Decimal('Infinity')), (Decimal('-Infinity'), Decimal('Infinity'), Decimal('Infinity'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('-1'), Decimal('-Infinity')), (Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,"WITH v(x) AS   (VALUES('0'::numeric),('1'),('-1'),('4.2'),('-7.777'),('inf'),('-inf'),('nan')) SELECT x, round(x), round(x,1) as round1, trunc(x), trunc(x,1) as trunc1 FROM v",numeric.sql,SAME,,"[(Decimal('0'), Decimal('0'), Decimal('0.0'), Decimal('0'), Decimal('0.0')), (Decimal('1'), Decimal('1'), Decimal('1.0'), Decimal('1'), Decimal('1.0')), (Decimal('-1'), Decimal('-1'), Decimal('-1.0'), Decimal('-1'), Decimal('-1.0')), (Decimal('4.2'), Decimal('4'), Decimal('4.2'), Decimal('4'), Decimal('4.2')), (Decimal('-7.777'), Decimal('-8'), Decimal('-7.8'), Decimal('-7'), Decimal('-7.7')), (Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('-Infinity'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('-Infinity'), Decimal('-Infinity')), (Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,"WITH v(x) AS   (VALUES('0'::numeric),('1'),('-1'),('4.2'),('-7.777'),('1e340'),('-1e340'),          ('inf'),('-inf'),('nan'),          ('inf'),('-inf'),('nan')) SELECT substring(x::text, 1, 32) FROM v ORDER BY x",numeric.sql,SAME,,"[('-Infinity',), ('-Infinity',), ('-1000000000000000000000000000000',), ('-7.777',), ('-1',), ('0',), ('1',), ('4.2',), ('10000000000000000000000000000000',), ('Infinity',), ('Infinity',), ('NaN',), ('NaN',)]"
postgresql,postgresql,"WITH v(x) AS   (VALUES('0'::numeric),('1'),('4.2'),('inf'),('nan')) SELECT x, sqrt(x) FROM v",numeric.sql,SAME,,"[(Decimal('0'), Decimal('0E-15')), (Decimal('1'), Decimal('1.000000000000000')), (Decimal('4.2'), Decimal('2.049390153191920')), (Decimal('Infinity'), Decimal('Infinity')), (Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,"WITH v(x) AS   (VALUES('1'::numeric),('4.2'),('inf'),('nan')) SELECT x,   log(x),   log10(x),   ln(x) FROM v",numeric.sql,SAME,,"[(Decimal('1'), Decimal('0E-16'), Decimal('0E-16'), Decimal('0E-16')), (Decimal('4.2'), Decimal('0.6232492903979005'), Decimal('0.6232492903979005'), Decimal('1.4350845252893226')), (Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,"WITH v(x) AS   (VALUES('2'::numeric),('4.2'),('inf'),('nan')) SELECT x1, x2,   log(x1, x2) FROM v AS v1(x1), v AS v2(x2)",numeric.sql,SAME,,"[(Decimal('2'), Decimal('2'), Decimal('1.0000000000000000')), (Decimal('2'), Decimal('4.2'), Decimal('2.0703893278913979')), (Decimal('2'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('2'), Decimal('NaN'), Decimal('NaN')), (Decimal('4.2'), Decimal('2'), Decimal('0.4830009440873890')), (Decimal('4.2'), Decimal('4.2'), Decimal('1.0000000000000000')), (Decimal('4.2'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('4.2'), Decimal('NaN'), Decimal('NaN')), (Decimal('Infinity'), Decimal('2'), Decimal('0')), (Decimal('Infinity'), Decimal('4.2'), Decimal('0')), (Decimal('Infinity'), Decimal('Infinity'), Decimal('NaN')), (Decimal('Infinity'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('2'), Decimal('NaN')), (Decimal('NaN'), Decimal('4.2'), Decimal('NaN')), (Decimal('NaN'), Decimal('Infinity'), Decimal('NaN')), (Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,"WITH v(x) AS   (VALUES('0'::numeric),('1'),('2'),('4.2'),('inf'),('nan')) SELECT x1, x2,   power(x1, x2) FROM v AS v1(x1), v AS v2(x2) WHERE x1 != 0 OR x2 >= 0",numeric.sql,SAME,,"[(Decimal('0'), Decimal('0'), Decimal('1.0000000000000000')), (Decimal('0'), Decimal('1'), Decimal('0E-16')), (Decimal('0'), Decimal('2'), Decimal('0E-16')), (Decimal('0'), Decimal('4.2'), Decimal('0E-16')), (Decimal('0'), Decimal('Infinity'), Decimal('0')), (Decimal('0'), Decimal('NaN'), Decimal('NaN')), (Decimal('1'), Decimal('0'), Decimal('1.0000000000000000')), (Decimal('1'), Decimal('1'), Decimal('1.0000000000000000')), (Decimal('1'), Decimal('2'), Decimal('1.0000000000000000')), (Decimal('1'), Decimal('4.2'), Decimal('1.0000000000000000')), (Decimal('1'), Decimal('Infinity'), Decimal('1')), (Decimal('1'), Decimal('NaN'), Decimal('1')), (Decimal('2'), Decimal('0'), Decimal('1.0000000000000000')), (Decimal('2'), Decimal('1'), Decimal('2.0000000000000000')), (Decimal('2'), Decimal('2'), Decimal('4.0000000000000000')), (Decimal('2'), Decimal('4.2'), Decimal('18.379173679952560')), (Decimal('2'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('2'), Decimal('NaN'), Decimal('NaN')), (Decimal('4.2'), Decimal('0'), Decimal('1.0000000000000000')), (Decimal('4.2'), Decimal('1'), Decimal('4.2000000000000000')), (Decimal('4.2'), Decimal('2'), Decimal('17.640000000000000')), (Decimal('4.2'), Decimal('4.2'), Decimal('414.61691860129675')), (Decimal('4.2'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('4.2'), Decimal('NaN'), Decimal('NaN')), (Decimal('Infinity'), Decimal('0'), Decimal('1')), (Decimal('Infinity'), Decimal('1'), Decimal('Infinity')), (Decimal('Infinity'), Decimal('2'), Decimal('Infinity')), (Decimal('Infinity'), Decimal('4.2'), Decimal('Infinity')), (Decimal('Infinity'), Decimal('Infinity'), Decimal('Infinity')), (Decimal('Infinity'), Decimal('NaN'), Decimal('NaN')), (Decimal('NaN'), Decimal('0'), Decimal('1')), (Decimal('NaN'), Decimal('1'), Decimal('NaN')), (Decimal('NaN'), Decimal('2'), Decimal('NaN')), (Decimal('NaN'), Decimal('4.2'), Decimal('NaN')), (Decimal('NaN'), Decimal('Infinity'), Decimal('NaN')), (Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,"SELECT power('-1'::numeric, 'inf')",numeric.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,"SELECT power('-2'::numeric, '3')",numeric.sql,SAME,,"[(Decimal('-8.0000000000000000'),)]"
postgresql,postgresql,"SELECT power('-2'::numeric, '-1')",numeric.sql,SAME,,"[(Decimal('-0.5000000000000000'),)]"
postgresql,postgresql,"SELECT power('-2'::numeric, 'inf')",numeric.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,"SELECT power('-2'::numeric, '-inf')",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,"SELECT power('inf'::numeric, '-2')",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,"SELECT power('inf'::numeric, '-inf')",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,"SELECT power('-inf'::numeric, '2')",numeric.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,"SELECT power('-inf'::numeric, '3')",numeric.sql,SAME,,"[(Decimal('-Infinity'),)]"
postgresql,postgresql,"SELECT power('-inf'::numeric, '-2')",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,"SELECT power('-inf'::numeric, '-3')",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,"SELECT power('-inf'::numeric, '0')",numeric.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,"SELECT power('-inf'::numeric, 'inf')",numeric.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,"SELECT power('-inf'::numeric, '-inf')",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,SELECT AVG(val) FROM num_data,numeric.sql,SAME,,"[(Decimal('-13430913.592242320700'),)]"
postgresql,postgresql,SELECT MAX(val) FROM num_data,numeric.sql,SAME,,"[(Decimal('7799461.4119000000'),)]"
postgresql,postgresql,SELECT MIN(val) FROM num_data,numeric.sql,SAME,,"[(Decimal('-83028485.0000000000'),)]"
postgresql,postgresql,SELECT STDDEV(val) FROM num_data,numeric.sql,SAME,,"[(Decimal('27791203.28758835329805617386'),)]"
postgresql,postgresql,SELECT VARIANCE(val) FROM num_data,numeric.sql,SAME,,"[(Decimal('772350980172061.69659105821915863601'),)]"
postgresql,postgresql,SELECT * FROM fract_only,numeric.sql,SAME,,"[(1, Decimal('0.0000')), (2, Decimal('0.1000')), (4, Decimal('-0.9999')), (5, Decimal('0.9999')), (7, Decimal('0.0000')), (8, Decimal('0.0002')), (9, Decimal('NaN'))]"
postgresql,postgresql,SELECT (-9223372036854775808.4)::int8,numeric.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,SELECT 9223372036854775807.4::int8,numeric.sql,SAME,,"[(9223372036854775807,)]"
postgresql,postgresql,SELECT (-2147483648.4)::int4,numeric.sql,SAME,,"[(-2147483648,)]"
postgresql,postgresql,SELECT 2147483647.4::int4,numeric.sql,SAME,,"[(2147483647,)]"
postgresql,postgresql,SELECT (-32768.4)::int2,numeric.sql,SAME,,"[(-32768,)]"
postgresql,postgresql,SELECT 32767.4::int2,numeric.sql,SAME,,"[(32767,)]"
postgresql,postgresql,SELECT 'NaN'::float8::numeric,numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,SELECT 'Infinity'::float8::numeric,numeric.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,SELECT '-Infinity'::float8::numeric,numeric.sql,SAME,,"[(Decimal('-Infinity'),)]"
postgresql,postgresql,SELECT 'NaN'::numeric::float8,numeric.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'Infinity'::numeric::float8,numeric.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT '-Infinity'::numeric::float8,numeric.sql,SAME,,"[(-inf,)]"
postgresql,postgresql,SELECT 'NaN'::float4::numeric,numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,SELECT 'Infinity'::float4::numeric,numeric.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,SELECT '-Infinity'::float4::numeric,numeric.sql,SAME,,"[(Decimal('-Infinity'),)]"
postgresql,postgresql,SELECT 'NaN'::numeric::float4,numeric.sql,SAME,,"[(nan,)]"
postgresql,postgresql,SELECT 'Infinity'::numeric::float4,numeric.sql,SAME,,"[(inf,)]"
postgresql,postgresql,SELECT '-Infinity'::numeric::float4,numeric.sql,SAME,,"[(-inf,)]"
postgresql,postgresql,SELECT '42'::int2::numeric,numeric.sql,SAME,,"[(Decimal('42'),)]"
postgresql,postgresql,"SELECT a, ceil(a), ceiling(a), floor(a), round(a) FROM ceil_floor_round",numeric.sql,SAME,,"[(Decimal('-5.5'), Decimal('-5'), Decimal('-5'), Decimal('-6'), Decimal('-6')), (Decimal('-5.499999'), Decimal('-5'), Decimal('-5'), Decimal('-6'), Decimal('-5')), (Decimal('9.5'), Decimal('10'), Decimal('10'), Decimal('9'), Decimal('10')), (Decimal('9.4999999'), Decimal('10'), Decimal('10'), Decimal('9'), Decimal('9')), (Decimal('0.0'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0')), (Decimal('1E-7'), Decimal('1'), Decimal('1'), Decimal('0'), Decimal('0')), (Decimal('-0.000001'), Decimal('0'), Decimal('0'), Decimal('-1'), Decimal('0'))]"
postgresql,postgresql,"SELECT i as pow, 	round((-2.5 * 10 ^ i)::numeric, -i), 	round((-1.5 * 10 ^ i)::numeric, -i), 	round((-0.5 * 10 ^ i)::numeric, -i), 	round((0.5 * 10 ^ i)::numeric, -i), 	round((1.5 * 10 ^ i)::numeric, -i), 	round((2.5 * 10 ^ i)::numeric, -i) FROM generate_series(-5,5) AS t(i)",numeric.sql,SAME,,"[(-5, Decimal('-0.00003'), Decimal('-0.00002'), Decimal('-0.00001'), Decimal('0.00001'), Decimal('0.00002'), Decimal('0.00003')), (-4, Decimal('-0.0003'), Decimal('-0.0002'), Decimal('-0.0001'), Decimal('0.0001'), Decimal('0.0002'), Decimal('0.0003')), (-3, Decimal('-0.003'), Decimal('-0.002'), Decimal('-0.001'), Decimal('0.001'), Decimal('0.002'), Decimal('0.003')), (-2, Decimal('-0.03'), Decimal('-0.02'), Decimal('-0.01'), Decimal('0.01'), Decimal('0.02'), Decimal('0.03')), (-1, Decimal('-0.3'), Decimal('-0.2'), Decimal('-0.1'), Decimal('0.1'), Decimal('0.2'), Decimal('0.3')), (0, Decimal('-3'), Decimal('-2'), Decimal('-1'), Decimal('1'), Decimal('2'), Decimal('3')), (1, Decimal('-30'), Decimal('-20'), Decimal('-10'), Decimal('10'), Decimal('20'), Decimal('30')), (2, Decimal('-300'), Decimal('-200'), Decimal('-100'), Decimal('100'), Decimal('200'), Decimal('300')), (3, Decimal('-3000'), Decimal('-2000'), Decimal('-1000'), Decimal('1000'), Decimal('2000'), Decimal('3000')), (4, Decimal('-30000'), Decimal('-20000'), Decimal('-10000'), Decimal('10000'), Decimal('20000'), Decimal('30000')), (5, Decimal('-300000'), Decimal('-200000'), Decimal('-100000'), Decimal('100000'), Decimal('200000'), Decimal('300000'))]"
postgresql,postgresql,"SELECT     operand_num,     width_bucket(operand_num, 0, 10, 5) AS wb_1,     width_bucket(operand_f8, 0, 10, 5) AS wb_1f,     width_bucket(operand_num, 10, 0, 5) AS wb_2,     width_bucket(operand_f8, 10, 0, 5) AS wb_2f,     width_bucket(operand_num, 2, 8, 4) AS wb_3,     width_bucket(operand_f8, 2, 8, 4) AS wb_3f,     width_bucket(operand_num, 5.0, 5.5, 20) AS wb_4,     width_bucket(operand_f8, 5.0, 5.5, 20) AS wb_4f,     width_bucket(operand_num, -25, 25, 10) AS wb_5,     width_bucket(operand_f8, -25, 25, 10) AS wb_5f     FROM width_bucket_test",numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT width_bucket('Infinity'::numeric, 1, 10, 10),        width_bucket('-Infinity'::numeric, 1, 10, 10)",numeric.sql,SAME,,"[(11, 0)]"
postgresql,postgresql,"SELECT width_bucket('Infinity'::float8, 1, 10, 10),        width_bucket('-Infinity'::float8, 1, 10, 10)",numeric.sql,SAME,,"[(11, 0)]"
postgresql,postgresql,"SELECT x, width_bucket(x::float8, 10, 100, 9) as flt,        width_bucket(x::numeric, 10, 100, 9) as num FROM generate_series(0, 110, 10) x",numeric.sql,SAME,,"[(0, 0, 0), (10, 1, 1), (20, 2, 2), (30, 3, 3), (40, 4, 4), (50, 5, 5), (60, 6, 6), (70, 7, 7), (80, 8, 8), (90, 9, 9), (100, 10, 10), (110, 10, 10)]"
postgresql,postgresql,"SELECT x, width_bucket(x::float8, 100, 10, 9) as flt,        width_bucket(x::numeric, 100, 10, 9) as num FROM generate_series(0, 110, 10) x",numeric.sql,SAME,,"[(0, 10, 10), (10, 10, 10), (20, 9, 9), (30, 8, 8), (40, 7, 7), (50, 6, 6), (60, 5, 5), (70, 4, 4), (80, 3, 3), (90, 2, 2), (100, 1, 1), (110, 0, 0)]"
postgresql,postgresql,"SELECT width_bucket(0, -1e100::numeric, 1, 10)",numeric.sql,SAME,,"[(10,)]"
postgresql,postgresql,"SELECT width_bucket(0, -1e100::float8, 1, 10)",numeric.sql,SAME,,"[(10,)]"
postgresql,postgresql,"SELECT width_bucket(1, 1e100::numeric, 0, 10)",numeric.sql,SAME,,"[(10,)]"
postgresql,postgresql,"SELECT width_bucket(1, 1e100::float8, 0, 10)",numeric.sql,SAME,,"[(10,)]"
postgresql,postgresql,"SELECT oper, low, high, cnt, width_bucket(oper, low, high, cnt) FROM   (SELECT 1.797e+308::float8 AS big, 5e-324::float8 AS tiny) as v,   LATERAL (VALUES     (10.5::float8, -big, big, 1),     (10.5::float8, -big, big, 2),     (10.5::float8, -big, big, 3),     (big / 4, -big / 2, big / 2, 10),     (10.5::float8, big, -big, 1),     (10.5::float8, big, -big, 2),     (10.5::float8, big, -big, 3),     (big / 4, big / 2, -big / 2, 10),     (0, 0, tiny, 4),     (tiny, 0, tiny, 4),     (0, 0, 1, 2147483647),     (1, 1, 0, 2147483647)   ) as sample(oper, low, high, cnt)",numeric.sql,SAME,,"[(10.5, -1.797e+308, 1.797e+308, 1, 1), (10.5, -1.797e+308, 1.797e+308, 2, 2), (10.5, -1.797e+308, 1.797e+308, 3, 2), (4.4925e+307, -8.985e+307, 8.985e+307, 10, 8), (10.5, 1.797e+308, -1.797e+308, 1, 1), (10.5, 1.797e+308, -1.797e+308, 2, 2), (10.5, 1.797e+308, -1.797e+308, 3, 2), (4.4925e+307, 8.985e+307, -8.985e+307, 10, 3), (0.0, 0.0, 5e-324, 4, 1), (5e-324, 0.0, 5e-324, 4, 5), (0.0, 0.0, 1.0, 2147483647, 1), (1.0, 1.0, 0.0, 2147483647, 1)]"
postgresql,postgresql,"SELECT to_char(val, '9G999G999G999G999G999') 	FROM num_data",numeric.sql,SAME,,"[('                     0',), ('                     0',), ('           -34,338,492',), ('                     4',), ('             7,799,461',), ('                16,397',), ('                93,902',), ('           -83,028,485',), ('                74,881',), ('           -24,926,804',)]"
postgresql,postgresql,"SELECT to_char(val, '9G999G999G999G999G999D999G999G999G999G999') 	FROM num_data",numeric.sql,SAME,,"[('                      .000,000,000,000,000',), ('                      .000,000,000,000,000',), ('           -34,338,492.215,397,047,000,000',), ('                     4.310,000,000,000,000',), ('             7,799,461.411,900,000,000,000',), ('                16,397.038,491,000,000,000',), ('                93,901.577,630,260,000,000',), ('           -83,028,485.000,000,000,000,000',), ('                74,881.000,000,000,000,000',), ('           -24,926,804.045,047,420,000,000',)]"
postgresql,postgresql,"SELECT to_char(val, '9999999999999999.999999999999999PR') 	FROM num_data",numeric.sql,SAME,,"[('                 .000000000000000 ',), ('                 .000000000000000 ',), ('        <34338492.215397047000000>',), ('                4.310000000000000 ',), ('          7799461.411900000000000 ',), ('            16397.038491000000000 ',), ('            93901.577630260000000 ',), ('        <83028485.000000000000000>',), ('            74881.000000000000000 ',), ('        <24926804.045047420000000>',)]"
postgresql,postgresql,"SELECT to_char(val, '9999999999999999.999999999999999S') 	FROM num_data",numeric.sql,SAME,,"[('                .000000000000000+',), ('                .000000000000000+',), ('        34338492.215397047000000-',), ('               4.310000000000000+',), ('         7799461.411900000000000+',), ('           16397.038491000000000+',), ('           93901.577630260000000+',), ('        83028485.000000000000000-',), ('           74881.000000000000000+',), ('        24926804.045047420000000-',)]"
postgresql,postgresql,"SELECT to_char(val, 'MI9999999999999999.999999999999999')     FROM num_data",numeric.sql,SAME,,"[('                 .000000000000000',), ('                 .000000000000000',), ('-        34338492.215397047000000',), ('                4.310000000000000',), ('          7799461.411900000000000',), ('            16397.038491000000000',), ('            93901.577630260000000',), ('-        83028485.000000000000000',), ('            74881.000000000000000',), ('-        24926804.045047420000000',)]"
postgresql,postgresql,"SELECT to_char(val, 'FMS9999999999999999.999999999999999')    FROM num_data",numeric.sql,SAME,,"[('+0.',), ('+0.',), ('-34338492.215397047',), ('+4.31',), ('+7799461.4119',), ('+16397.038491',), ('+93901.57763026',), ('-83028485.',), ('+74881.',), ('-24926804.04504742',)]"
postgresql,postgresql,"SELECT to_char(val, 'FM9999999999999999.999999999999999THPR') FROM num_data",numeric.sql,SAME,,"[('0.',), ('0.',), ('<34338492.215397047>',), ('4.31',), ('7799461.4119',), ('16397.038491',), ('93901.57763026',), ('<83028485.>',), ('74881.',), ('<24926804.04504742>',)]"
postgresql,postgresql,"SELECT to_char(val, 'SG9999999999999999.999999999999999th')   FROM num_data",numeric.sql,SAME,,"[('+                .000000000000000',), ('+                .000000000000000',), ('-        34338492.215397047000000',), ('+               4.310000000000000',), ('+         7799461.411900000000000',), ('+           16397.038491000000000',), ('+           93901.577630260000000',), ('-        83028485.000000000000000',), ('+           74881.000000000000000',), ('-        24926804.045047420000000',)]"
postgresql,postgresql,"SELECT to_char(val, '0999999999999999.999999999999999')       FROM num_data",numeric.sql,SAME,,"[(' 0000000000000000.000000000000000',), (' 0000000000000000.000000000000000',), ('-0000000034338492.215397047000000',), (' 0000000000000004.310000000000000',), (' 0000000007799461.411900000000000',), (' 0000000000016397.038491000000000',), (' 0000000000093901.577630260000000',), ('-0000000083028485.000000000000000',), (' 0000000000074881.000000000000000',), ('-0000000024926804.045047420000000',)]"
postgresql,postgresql,"SELECT to_char(val, 'S0999999999999999.999999999999999')      FROM num_data",numeric.sql,SAME,,"[('+0000000000000000.000000000000000',), ('+0000000000000000.000000000000000',), ('-0000000034338492.215397047000000',), ('+0000000000000004.310000000000000',), ('+0000000007799461.411900000000000',), ('+0000000000016397.038491000000000',), ('+0000000000093901.577630260000000',), ('-0000000083028485.000000000000000',), ('+0000000000074881.000000000000000',), ('-0000000024926804.045047420000000',)]"
postgresql,postgresql,"SELECT to_char(val, 'FM0999999999999999.999999999999999')     FROM num_data",numeric.sql,SAME,,"[('0000000000000000.',), ('0000000000000000.',), ('-0000000034338492.215397047',), ('0000000000000004.31',), ('0000000007799461.4119',), ('0000000000016397.038491',), ('0000000000093901.57763026',), ('-0000000083028485.',), ('0000000000074881.',), ('-0000000024926804.04504742',)]"
postgresql,postgresql,"SELECT to_char(val, 'FM9999999999999999.099999999999999') 	FROM num_data",numeric.sql,SAME,,"[('.0',), ('.0',), ('-34338492.215397047',), ('4.31',), ('7799461.4119',), ('16397.038491',), ('93901.57763026',), ('-83028485.0',), ('74881.0',), ('-24926804.04504742',)]"
postgresql,postgresql,"SELECT to_char(val, 'FM9999999999990999.990999999999999') 	FROM num_data",numeric.sql,SAME,,"[('0000.000',), ('0000.000',), ('-34338492.215397047',), ('0004.310',), ('7799461.4119',), ('16397.038491',), ('93901.57763026',), ('-83028485.000',), ('74881.000',), ('-24926804.04504742',)]"
postgresql,postgresql,"SELECT to_char(val, 'FM0999999999999999.999909999999999') 	FROM num_data",numeric.sql,SAME,,"[('0000000000000000.00000',), ('0000000000000000.00000',), ('-0000000034338492.215397047',), ('0000000000000004.31000',), ('0000000007799461.41190',), ('0000000000016397.038491',), ('0000000000093901.57763026',), ('-0000000083028485.00000',), ('0000000000074881.00000',), ('-0000000024926804.04504742',)]"
postgresql,postgresql,"SELECT to_char(val, 'FM9999999990999999.099999999999999') 	FROM num_data",numeric.sql,SAME,,"[('0000000.0',), ('0000000.0',), ('-34338492.215397047',), ('0000004.31',), ('7799461.4119',), ('0016397.038491',), ('0093901.57763026',), ('-83028485.0',), ('0074881.0',), ('-24926804.04504742',)]"
postgresql,postgresql,"SELECT to_char(val, 'L9999999999999999.099999999999999')	FROM num_data",numeric.sql,SAME,,"[('                  .000000000000000',), ('                  .000000000000000',), ('         -34338492.215397047000000',), ('                 4.310000000000000',), ('           7799461.411900000000000',), ('             16397.038491000000000',), ('             93901.577630260000000',), ('         -83028485.000000000000000',), ('             74881.000000000000000',), ('         -24926804.045047420000000',)]"
postgresql,postgresql,"SELECT to_char(val, 'FM9999999999999999.99999999999999')	FROM num_data",numeric.sql,SAME,,"[('0.',), ('0.',), ('-34338492.215397047',), ('4.31',), ('7799461.4119',), ('16397.038491',), ('93901.57763026',), ('-83028485.',), ('74881.',), ('-24926804.04504742',)]"
postgresql,postgresql,"SELECT to_char(val, 'S 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 . 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9') FROM num_data",numeric.sql,SAME,,"[('                                 +. 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0',), ('                                 +. 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0',), ('                 -3 4 3 3 8 4 9 2 . 2 1 5 3 9 7 0 4 7 0 0 0 0 0 0 0 0',), ('                               +4 . 3 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0',), ('                   +7 7 9 9 4 6 1 . 4 1 1 9 0 0 0 0 0 0 0 0 0 0 0 0 0',), ('                       +1 6 3 9 7 . 0 3 8 4 9 1 0 0 0 0 0 0 0 0 0 0 0',), ('                       +9 3 9 0 1 . 5 7 7 6 3 0 2 6 0 0 0 0 0 0 0 0 0',), ('                 -8 3 0 2 8 4 8 5 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0',), ('                       +7 4 8 8 1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0',), ('                 -2 4 9 2 6 8 0 4 . 0 4 5 0 4 7 4 2 0 0 0 0 0 0 0 0 0',)]"
postgresql,postgresql,"SELECT to_char(val, 'FMS 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 . 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9') FROM num_data",numeric.sql,SAME,,"[('                +0 .                 ',), ('                +0 .                 ',), ('         -3 4 3 3 8 4 9 2 . 2 1 5 3 9 7 0 4 7        ',), ('                +4 . 3 1               ',), ('          +7 7 9 9 4 6 1 . 4 1 1 9             ',), ('            +1 6 3 9 7 . 0 3 8 4 9 1           ',), ('            +9 3 9 0 1 . 5 7 7 6 3 0 2 6         ',), ('         -8 3 0 2 8 4 8 5 .                 ',), ('            +7 4 8 8 1 .                 ',), ('         -2 4 9 2 6 8 0 4 . 0 4 5 0 4 7 4 2         ',)]"
postgresql,postgresql,"SELECT to_char(val, E'99999 ""text"" 9999 ""9999"" 999 ""\\""text between quote marks\\"""" 9999') FROM num_data",numeric.sql,SAME,,"[('      text      9999     ""text between quote marks""     0',), ('      text      9999     ""text between quote marks""     0',), ('      text    -3 9999 433 ""text between quote marks"" 8492',), ('      text      9999     ""text between quote marks""     4',), ('      text      9999  779 ""text between quote marks"" 9461',), ('      text      9999    1 ""text between quote marks"" 6397',), ('      text      9999    9 ""text between quote marks"" 3902',), ('      text    -8 9999 302 ""text between quote marks"" 8485',), ('      text      9999    7 ""text between quote marks"" 4881',), ('      text    -2 9999 492 ""text between quote marks"" 6804',)]"
postgresql,postgresql,"SELECT to_char(val, '999999SG9999999999')			FROM num_data",numeric.sql,SAME,,"[('      +         0',), ('      +         0',), ('      -  34338492',), ('      +         4',), ('      +   7799461',), ('      +     16397',), ('      +     93902',), ('      -  83028485',), ('      +     74881',), ('      -  24926804',)]"
postgresql,postgresql,"SELECT to_char(val, 'FM9999999999999999.999999999999999')	FROM num_data",numeric.sql,SAME,,"[('0.',), ('0.',), ('-34338492.215397047',), ('4.31',), ('7799461.4119',), ('16397.038491',), ('93901.57763026',), ('-83028485.',), ('74881.',), ('-24926804.04504742',)]"
postgresql,postgresql,"SELECT to_char(val, '9.999EEEE')				FROM num_data",numeric.sql,SAME,,"[(' 0.000e+00',), (' 0.000e+00',), ('-3.434e+07',), (' 4.310e+00',), (' 7.799e+06',), (' 1.640e+04',), (' 9.390e+04',), ('-8.303e+07',), (' 7.488e+04',), ('-2.493e+07',)]"
postgresql,postgresql,"WITH v(val) AS   (VALUES('0'::numeric),('-4.2'),('4.2e9'),('1.2e-5'),('inf'),('-inf'),('nan')) SELECT val,   to_char(val, '9.999EEEE') as numeric,   to_char(val::float8, '9.999EEEE') as float8,   to_char(val::float4, '9.999EEEE') as float4 FROM v",numeric.sql,SAME,,"[(Decimal('0'), ' 0.000e+00', ' 0.000e+00', ' 0.000e+00'), (Decimal('-4.2'), '-4.200e+00', '-4.200e+00', '-4.200e+00'), (Decimal('4200000000'), ' 4.200e+09', ' 4.200e+09', ' 4.200e+09'), (Decimal('0.000012'), ' 1.200e-05', ' 1.200e-05', ' 1.200e-05'), (Decimal('Infinity'), ' #.#######', ' #.#######', ' #.#######'), (Decimal('-Infinity'), ' #.#######', ' #.#######', ' #.#######'), (Decimal('NaN'), ' #.#######', ' #.#######', ' #.#######')]"
postgresql,postgresql,"WITH v(exp) AS   (VALUES(-16379),(-16378),(-1234),(-789),(-45),(-5),(-4),(-3),(-2),(-1),(0),          (1),(2),(3),(4),(5),(38),(275),(2345),(45678),(131070),(131071)) SELECT exp,   to_char(('1.2345e'||exp)::numeric, '9.999EEEE') as numeric FROM v",numeric.sql,SAME,,"[(-16379, ' 1.235e-16379'), (-16378, ' 1.235e-16378'), (-1234, ' 1.235e-1234'), (-789, ' 1.235e-789'), (-45, ' 1.235e-45'), (-5, ' 1.235e-05'), (-4, ' 1.235e-04'), (-3, ' 1.235e-03'), (-2, ' 1.235e-02'), (-1, ' 1.235e-01'), (0, ' 1.235e+00'), (1, ' 1.235e+01'), (2, ' 1.235e+02'), (3, ' 1.235e+03'), (4, ' 1.235e+04'), (5, ' 1.235e+05'), (38, ' 1.235e+38'), (275, ' 1.235e+275'), (2345, ' 1.235e+2345'), (45678, ' 1.235e+45678'), (131070, ' 1.235e+131070'), (131071, ' 1.235e+131071')]"
postgresql,postgresql,"WITH v(val) AS   (VALUES('0'::numeric),('-4.2'),('4.2e9'),('1.2e-5'),('inf'),('-inf'),('nan')) SELECT val,   to_char(val, 'MI9999999999.99') as numeric,   to_char(val::float8, 'MI9999999999.99') as float8,   to_char(val::float4, 'MI9999999999.99') as float4 FROM v",numeric.sql,SAME,,"[(Decimal('0'), '           .00', '           .00', '           .00'), (Decimal('-4.2'), '-         4.20', '-         4.20', '-         4.20'), (Decimal('4200000000'), ' 4200000000.00', ' 4200000000.00', ' 4200000000'), (Decimal('0.000012'), '           .00', '           .00', '           .00'), (Decimal('Infinity'), '   Infinity', '   Infinity', '   Infinity'), (Decimal('-Infinity'), '-  Infinity', '-  Infinity', '-  Infinity'), (Decimal('NaN'), '        NaN', '        NaN', '        NaN')]"
postgresql,postgresql,"WITH v(val) AS   (VALUES('0'::numeric),('-4.2'),('4.2e9'),('1.2e-5'),('inf'),('-inf'),('nan')) SELECT val,   to_char(val, 'MI99.99') as numeric,   to_char(val::float8, 'MI99.99') as float8,   to_char(val::float4, 'MI99.99') as float4 FROM v",numeric.sql,SAME,,"[(Decimal('0'), '   .00', '   .00', '   .00'), (Decimal('-4.2'), '- 4.20', '- 4.20', '- 4.20'), (Decimal('4200000000'), ' ##.##', ' ##.##', ' ##.'), (Decimal('0.000012'), '   .00', '   .00', '   .00'), (Decimal('Infinity'), ' ##.##', ' ##.##', ' ##.'), (Decimal('-Infinity'), '-##.##', '-##.##', '-##.'), (Decimal('NaN'), ' ##.##', ' ##.##', ' ##.##')]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'FM999.9')",numeric.sql,SAME,,"[('100.',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'FM999.')",numeric.sql,SAME,,"[('100',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'FM999')",numeric.sql,SAME,,"[('100',)]"
postgresql,postgresql,"SELECT to_char('12345678901'::float8, 'FM9999999999D9999900000000000000000')",numeric.sql,SAME,,"[('##########.####',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'foo999')",numeric.sql,SAME,,"[('foo 100',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'f\oo999')",numeric.sql,SAME,,"[('f\\oo 100',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'f\\oo999')",numeric.sql,SAME,,"[('f\\\\oo 100',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'f\""oo999')",numeric.sql,SAME,,"[('f""oo 100',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'f\\""oo999')",numeric.sql,SAME,,"[('f\\""oo 100',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'f""ool""999')",numeric.sql,SAME,,"[('fool 100',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'f""\ool""999')",numeric.sql,SAME,,"[('fool 100',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'f""\\ool""999')",numeric.sql,SAME,,"[('f\\ool 100',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'f""ool\""999')",numeric.sql,SAME,,"[('fool""999',)]"
postgresql,postgresql,"SELECT to_char('100'::numeric, 'f""ool\\""999')",numeric.sql,SAME,,"[('fool\\ 100',)]"
postgresql,postgresql,SET lc_numeric = 'C',numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT to_number('-34,338,492', '99G999G999')",numeric.sql,SAME,,"[(Decimal('-34338492'),)]"
postgresql,postgresql,"SELECT to_number('-34,338,492.654,878', '99G999G999D999G999')",numeric.sql,SAME,,"[(Decimal('-34338492.654878'),)]"
postgresql,postgresql,"SELECT to_number('<564646.654564>', '999999.999999PR')",numeric.sql,SAME,,"[(Decimal('-564646.654564'),)]"
postgresql,postgresql,"SELECT to_number('0.00001-', '9.999999S')",numeric.sql,SAME,,"[(Decimal('-0.00001'),)]"
postgresql,postgresql,"SELECT to_number('5.01-', 'FM9.999999S')",numeric.sql,SAME,,"[(Decimal('-5.01'),)]"
postgresql,postgresql,"SELECT to_number('5.01-', 'FM9.999999MI')",numeric.sql,SAME,,"[(Decimal('-5.01'),)]"
postgresql,postgresql,"SELECT to_number('5 4 4 4 4 8 . 7 8', '9 9 9 9 9 9 . 9 9')",numeric.sql,SAME,,"[(Decimal('544448.78'),)]"
postgresql,postgresql,"SELECT to_number('.01', 'FM9.99')",numeric.sql,SAME,,"[(Decimal('0.01'),)]"
postgresql,postgresql,"SELECT to_number('.0', '99999999.99999999')",numeric.sql,SAME,,"[(Decimal('0.0'),)]"
postgresql,postgresql,"SELECT to_number('0', '99.99')",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,"SELECT to_number('.-01', 'S99.99')",numeric.sql,SAME,,"[(Decimal('-0.01'),)]"
postgresql,postgresql,"SELECT to_number('.01-', '99.99S')",numeric.sql,SAME,,"[(Decimal('-0.01'),)]"
postgresql,postgresql,"SELECT to_number(' . 0 1-', ' 9 9 . 9 9 S')",numeric.sql,SAME,,"[(Decimal('-0.01'),)]"
postgresql,postgresql,"SELECT to_number('34,50','999,99')",numeric.sql,SAME,,"[(Decimal('3450'),)]"
postgresql,postgresql,"SELECT to_number('123,000','999G')",numeric.sql,SAME,,"[(Decimal('123'),)]"
postgresql,postgresql,"SELECT to_number('123456','999G999')",numeric.sql,SAME,,"[(Decimal('123456'),)]"
postgresql,postgresql,"SELECT to_number('$1234.56','L9,999.99')",numeric.sql,SAME,,"[(Decimal('1234.56'),)]"
postgresql,postgresql,"SELECT to_number('$1234.56','L99,999.99')",numeric.sql,SAME,,"[(Decimal('1234.56'),)]"
postgresql,postgresql,"SELECT to_number('$1,234.56','L99,999.99')",numeric.sql,SAME,,"[(Decimal('1234.56'),)]"
postgresql,postgresql,"SELECT to_number('1234.56','L99,999.99')",numeric.sql,SAME,,"[(Decimal('1234.56'),)]"
postgresql,postgresql,"SELECT to_number('1,234.56','L99,999.99')",numeric.sql,SAME,,"[(Decimal('1234.56'),)]"
postgresql,postgresql,"SELECT to_number('42nd', '99th')",numeric.sql,SAME,,"[(Decimal('42'),)]"
postgresql,postgresql,RESET lc_numeric,numeric.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM num_input_test,numeric.sql,SAME,,"[(Decimal('123'),), (Decimal('3245874'),), (Decimal('-93853'),), (Decimal('555.50'),), (Decimal('-555.50'),), (Decimal('NaN'),), (Decimal('NaN'),), (Decimal('Infinity'),), (Decimal('Infinity'),), (Decimal('-Infinity'),), (Decimal('Infinity'),), (Decimal('Infinity'),), (Decimal('-Infinity'),), (Decimal('12000000000'),), (Decimal('12000.123456'),), (Decimal('2.3000000000'),), (Decimal('1.23'),), (Decimal('12.3'),), (Decimal('299792458'),), (Decimal('-12345678901234567890'),), (Decimal('9999999999'),), (Decimal('-12345678900987654321'),), (Decimal('-3735928559'),), (Decimal('987654321234567898765432123456789'),)]"
postgresql,postgresql,"SELECT pg_input_is_valid('34.5', 'numeric')",numeric.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('34xyz', 'numeric')",numeric.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('1e400000', 'numeric')",numeric.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1e400000', 'numeric')",numeric.sql,SAME,,"[('value overflows numeric format', None, None, '22003')]"
postgresql,postgresql,"SELECT pg_input_is_valid('1234.567', 'numeric(8,4)')",numeric.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('1234.567', 'numeric(7,4)')",numeric.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1234.567', 'numeric(7,4)')",numeric.sql,SAME,,"[('numeric field overflow', 'A field with precision 7, scale 4 must round to an absolute value less than 10^3.', None, '22003')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('0x1234.567', 'numeric')",numeric.sql,SAME,,"[('invalid input syntax for type numeric: ""0x1234.567""', None, None, '22P02')]"
postgresql,postgresql,"SELECT scale(millions), * FROM num_typemod_test ORDER BY millions",numeric.sql,SAME,,"[(0, Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0.000'), Decimal('0.000000')), (0, Decimal('1000000'), Decimal('1000'), Decimal('1'), Decimal('0.001'), Decimal('0.000001')), (0, Decimal('2000000'), Decimal('2000'), Decimal('2'), Decimal('0.002'), Decimal('0.000002')), (0, Decimal('8000000'), Decimal('8000'), Decimal('8'), Decimal('0.008'), Decimal('0.000008')), (0, Decimal('12000000'), Decimal('12000'), Decimal('12'), Decimal('0.012'), Decimal('0.000012')), (0, Decimal('88000000'), Decimal('88000'), Decimal('88'), Decimal('0.088'), Decimal('0.000088')), (0, Decimal('123000000'), Decimal('123000'), Decimal('123'), Decimal('0.123'), Decimal('0.000123')), (0, Decimal('988000000'), Decimal('988000'), Decimal('988'), Decimal('0.988'), Decimal('0.000988')), (None, Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,select 4790999999999999999999999999999999999999999999999999999999999999999999999999999999999999 * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,numeric.sql,SAME,,"[(Decimal('47909999999999999999999999999999999999999999999999999999999999999999999999999999999999985209000000000000000000000000000000000000000000000000000000000000000000000000000000000001'),)]"
postgresql,postgresql,select 4789999999999999999999999999999999999999999999999999999999999999999999999999999999999999 * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,numeric.sql,SAME,,"[(Decimal('47899999999999999999999999999999999999999999999999999999999999999999999999999999999999985210000000000000000000000000000000000000000000000000000000000000000000000000000000000001'),)]"
postgresql,postgresql,select 4770999999999999999999999999999999999999999999999999999999999999999999999999999999999999 * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,numeric.sql,SAME,,"[(Decimal('47709999999999999999999999999999999999999999999999999999999999999999999999999999999999985229000000000000000000000000000000000000000000000000000000000000000000000000000000000001'),)]"
postgresql,postgresql,select 4769999999999999999999999999999999999999999999999999999999999999999999999999999999999999 * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,numeric.sql,SAME,,"[(Decimal('47699999999999999999999999999999999999999999999999999999999999999999999999999999999999985230000000000000000000000000000000000000000000000000000000000000000000000000000000000001'),)]"
postgresql,postgresql,select trim_scale((0.1 - 2e-16383) * (0.1 - 3e-16383)),numeric.sql,SAME,,"[(Decimal('0.01'),)]"
postgresql,postgresql,select 999999999999999999999::numeric/1000000000000000000000,numeric.sql,SAME,,"[(Decimal('1.00000000000000000000'),)]"
postgresql,postgresql,"select div(999999999999999999999::numeric,1000000000000000000000)",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,"select mod(999999999999999999999::numeric,1000000000000000000000)",numeric.sql,SAME,,"[(Decimal('999999999999999999999'),)]"
postgresql,postgresql,"select div(-9999999999999999999999::numeric,1000000000000000000000)",numeric.sql,SAME,,"[(Decimal('-9'),)]"
postgresql,postgresql,"select mod(-9999999999999999999999::numeric,1000000000000000000000)",numeric.sql,SAME,,"[(Decimal('-999999999999999999999'),)]"
postgresql,postgresql,"select div(-9999999999999999999999::numeric,1000000000000000000000)*1000000000000000000000 + mod(-9999999999999999999999::numeric,1000000000000000000000)",numeric.sql,SAME,,"[(Decimal('-9999999999999999999999'),)]"
postgresql,postgresql,"select mod (70.0,70)",numeric.sql,SAME,,"[(Decimal('0.0'),)]"
postgresql,postgresql,"select div (70.0,70)",numeric.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,select 70.0 / 70,numeric.sql,SAME,,"[(Decimal('1.00000000000000000000'),)]"
postgresql,postgresql,select 12345678901234567890 % 123,numeric.sql,SAME,,"[(Decimal('78'),)]"
postgresql,postgresql,select 12345678901234567890 / 123,numeric.sql,SAME,,"[(Decimal('100371373180768845'),)]"
postgresql,postgresql,"select div(12345678901234567890, 123)",numeric.sql,SAME,,"[(Decimal('100371373180768844'),)]"
postgresql,postgresql,"select div(12345678901234567890, 123) * 123 + 12345678901234567890 % 123",numeric.sql,SAME,,"[(Decimal('12345678901234567890'),)]"
postgresql,postgresql,select sqrt(1.000000000000003::numeric),numeric.sql,SAME,,"[(Decimal('1.000000000000001'),)]"
postgresql,postgresql,select sqrt(1.000000000000004::numeric),numeric.sql,SAME,,"[(Decimal('1.000000000000002'),)]"
postgresql,postgresql,select sqrt(96627521408608.56340355805::numeric),numeric.sql,SAME,,"[(Decimal('9829929.87811248648'),)]"
postgresql,postgresql,select sqrt(96627521408608.56340355806::numeric),numeric.sql,SAME,,"[(Decimal('9829929.87811248649'),)]"
postgresql,postgresql,select sqrt(515549506212297735.073688290367::numeric),numeric.sql,SAME,,"[(Decimal('718017761.766585921184'),)]"
postgresql,postgresql,select sqrt(515549506212297735.073688290368::numeric),numeric.sql,SAME,,"[(Decimal('718017761.766585921185'),)]"
postgresql,postgresql,select sqrt(8015491789940783531003294973900306::numeric),numeric.sql,SAME,,"[(Decimal('89529278953540017'),)]"
postgresql,postgresql,select sqrt(8015491789940783531003294973900307::numeric),numeric.sql,SAME,,"[(Decimal('89529278953540018'),)]"
postgresql,postgresql,select 10.0 ^ -2147483648 as rounds_to_zero,numeric.sql,SAME,,"[(Decimal('0E-1000'),)]"
postgresql,postgresql,select 10.0 ^ -2147483647 as rounds_to_zero,numeric.sql,SAME,,"[(Decimal('0E-1000'),)]"
postgresql,postgresql,select 3.789 ^ 21.0000000000000000,numeric.sql,SAME,,"[(Decimal('1409343026052.8716016316022141'),)]"
postgresql,postgresql,select 3.789 ^ 35.0000000000000000,numeric.sql,SAME,,"[(Decimal('177158169650516670809.3820586142670135'),)]"
postgresql,postgresql,select 1.2 ^ 345,numeric.sql,SAME,,"[(Decimal('2077446682327378559843444695.6'),)]"
postgresql,postgresql,select 0.12 ^ (-20),numeric.sql,SAME,,"[(Decimal('2608405330458882702.55'),)]"
postgresql,postgresql,select 1.000000000123 ^ (-2147483648),numeric.sql,SAME,,"[(Decimal('0.7678656556403084'),)]"
postgresql,postgresql,"select coalesce(nullif(0.9999999999 ^ 23300000000000, 0), 0) as rounds_to_zero",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,select round(((1 - 1.500012345678e-1000) ^ 1.45e1003) * 1e1000),numeric.sql,SAME,,"[(Decimal('25218976308958387188077465658068501556514992509509282366'),)]"
postgresql,postgresql,select 0.12 ^ (-25),numeric.sql,SAME,,"[(Decimal('104825960103961013959336.50'),)]"
postgresql,postgresql,select 0.5678 ^ (-85),numeric.sql,SAME,,"[(Decimal('782333637740774446257.7719'),)]"
postgresql,postgresql,"select coalesce(nullif(0.9999999999 ^ 70000000000000, 0), 0) as underflows",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,select (-1.0) ^ 2147483646,numeric.sql,SAME,,"[(Decimal('1.0000000000000000'),)]"
postgresql,postgresql,select (-1.0) ^ 2147483647,numeric.sql,SAME,,"[(Decimal('-1.0000000000000000'),)]"
postgresql,postgresql,select (-1.0) ^ 2147483648,numeric.sql,SAME,,"[(Decimal('1.0000000000000000'),)]"
postgresql,postgresql,select (-1.0) ^ 1000000000000000,numeric.sql,SAME,,"[(Decimal('1.0000000000000000'),)]"
postgresql,postgresql,select (-1.0) ^ 1000000000000001,numeric.sql,SAME,,"[(Decimal('-1.0000000000000000'),)]"
postgresql,postgresql,"select n, 10.0 ^ n as ""10^n"", (10.0 ^ n) * (10.0 ^ (-n)) = 1 as ok from generate_series(-20, 20) n",numeric.sql,SAME,,"[(-20, Decimal('1.0000000000000000E-20'), True), (-19, Decimal('1.0000000000000000E-19'), True), (-18, Decimal('1.0000000000000000E-18'), True), (-17, Decimal('1.0000000000000000E-17'), True), (-16, Decimal('1.0000000000000000E-16'), True), (-15, Decimal('1.0000000000000000E-15'), True), (-14, Decimal('1.0000000000000000E-14'), True), (-13, Decimal('1.0000000000000000E-13'), True), (-12, Decimal('1.0000000000000000E-12'), True), (-11, Decimal('1.0000000000000000E-11'), True), (-10, Decimal('1.0000000000000000E-10'), True), (-9, Decimal('1.0000000000000000E-9'), True), (-8, Decimal('1.0000000000000000E-8'), True), (-7, Decimal('1.0000000000000000E-7'), True), (-6, Decimal('0.0000010000000000000000'), True), (-5, Decimal('0.000010000000000000000'), True), (-4, Decimal('0.00010000000000000000'), True), (-3, Decimal('0.0010000000000000000'), True), (-2, Decimal('0.010000000000000000'), True), (-1, Decimal('0.10000000000000000'), True), (0, Decimal('1.0000000000000000'), True), (1, Decimal('10.000000000000000'), True), (2, Decimal('100.00000000000000'), True), (3, Decimal('1000.0000000000000'), True), (4, Decimal('10000.000000000000'), True), (5, Decimal('100000.00000000000'), True), (6, Decimal('1000000.0000000000'), True), (7, Decimal('10000000.000000000'), True), (8, Decimal('100000000.00000000'), True), (9, Decimal('1000000000.0000000'), True), (10, Decimal('10000000000.000000'), True), (11, Decimal('100000000000.00000'), True), (12, Decimal('1000000000000.0000'), True), (13, Decimal('10000000000000.000'), True), (14, Decimal('100000000000000.00'), True), (15, Decimal('1000000000000000.0'), True), (16, Decimal('10000000000000000.0'), True), (17, Decimal('100000000000000000.0'), True), (18, Decimal('1000000000000000000.0'), True), (19, Decimal('10000000000000000000.0'), True), (20, Decimal('100000000000000000000.0'), True)]"
postgresql,postgresql,select 0.0 ^ 0.0,numeric.sql,SAME,,"[(Decimal('1.0000000000000000'),)]"
postgresql,postgresql,select (-12.34) ^ 0.0,numeric.sql,SAME,,"[(Decimal('1.0000000000000000'),)]"
postgresql,postgresql,select 12.34 ^ 0.0,numeric.sql,SAME,,"[(Decimal('1.0000000000000000'),)]"
postgresql,postgresql,select 0.0 ^ 12.34,numeric.sql,SAME,,"[(Decimal('0E-16'),)]"
postgresql,postgresql,select 'NaN'::numeric ^ 'NaN'::numeric,numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,select 'NaN'::numeric ^ 0,numeric.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,select 'NaN'::numeric ^ 1,numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,select 0 ^ 'NaN'::numeric,numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,select 1 ^ 'NaN'::numeric,numeric.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,select 32.1 ^ 9.8,numeric.sql,SAME,,"[(Decimal('580429286790711.10'),)]"
postgresql,postgresql,select 32.1 ^ (-9.8),numeric.sql,SAME,,"[(Decimal('1.722862754788209E-15'),)]"
postgresql,postgresql,select 12.3 ^ 45.6,numeric.sql,SAME,,"[(Decimal('50081010321492803393171165777624533697036806969694.9'),)]"
postgresql,postgresql,select 12.3 ^ (-45.6),numeric.sql,SAME,,"[(Decimal('1.996764828785491E-50'),)]"
postgresql,postgresql,select 1.234 ^ 5678,numeric.sql,SAME,,"[(Decimal('307239295662090741644584872593956173493568238595074141254349565406661439636598896798876823220904084953233015553994854875890890858118656468658643918169805277399402542281777901029346337707622181574346585989613344285010764501017625366742865066948856161360224801370482171458030533346309750557140549621313515752078638620714732831815297168231790779296290266207315344008883935010274044001522606235576584215999260117523114297033944018699691024106823438431754073086813382242140602291215149759520833200152654884259619588924545324.597'),)]"
postgresql,postgresql,select exp(0.0),numeric.sql,SAME,,"[(Decimal('1.0000000000000000'),)]"
postgresql,postgresql,select exp(1.0),numeric.sql,SAME,,"[(Decimal('2.7182818284590452'),)]"
postgresql,postgresql,"select exp(1.0::numeric(71,70))",numeric.sql,SAME,,"[(Decimal('2.7182818284590452353602874713526624977572470936999595749669676277240766'),)]"
postgresql,postgresql,select exp('nan'::numeric),numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,select exp('inf'::numeric),numeric.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,select exp('-inf'::numeric),numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,"select coalesce(nullif(exp(-5000::numeric), 0), 0) as rounds_to_zero",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,"select coalesce(nullif(exp(-10000::numeric), 0), 0) as underflows",numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,select exp(32.999),numeric.sql,SAME,,"[(Decimal('214429043492155.053'),)]"
postgresql,postgresql,select exp(-32.999),numeric.sql,SAME,,"[(Decimal('4.663547361468248E-15'),)]"
postgresql,postgresql,select exp(123.456),numeric.sql,SAME,,"[(Decimal('413294435277809344957685441227343146614594393746575438.725'),)]"
postgresql,postgresql,select exp(-123.456),numeric.sql,SAME,,"[(Decimal('2.419582541264601E-54'),)]"
postgresql,postgresql,select exp(1234.5678),numeric.sql,SAME,,"[(Decimal('146549072930959479983482138503979804217622199675223653966270157446954995433819741094410764947112047906012815540251009949604426069672532417736057033099274204598385314594846509975629046864798765888104789074984927709616261452461385220475510438783429612447831614003668421849727379202555580791042606170523016207262965336641214601082882495255771621327088265411334088968112458492660609809762865582162764292604697957813514621259353683899630997077707406305730694385703091201347848855199354307506425820147289848677003277208302716466011827836279231.9667'),)]"
postgresql,postgresql,"select * from generate_series(0.0::numeric, 4.0::numeric)",numeric.sql,SAME,,"[(Decimal('0.0'),), (Decimal('1.0'),), (Decimal('2.0'),), (Decimal('3.0'),), (Decimal('4.0'),)]"
postgresql,postgresql,"select * from generate_series(0.1::numeric, 4.0::numeric, 1.3::numeric)",numeric.sql,SAME,,"[(Decimal('0.1'),), (Decimal('1.4'),), (Decimal('2.7'),), (Decimal('4.0'),)]"
postgresql,postgresql,"select * from generate_series(4.0::numeric, -1.5::numeric, -2.2::numeric)",numeric.sql,SAME,,"[(Decimal('4.0'),), (Decimal('1.8'),), (Decimal('-0.4'),)]"
postgresql,postgresql,"select (i / (10::numeric ^ 131071))::numeric(1,0) 	from generate_series(6 * (10::numeric ^ 131071), 			     9 * (10::numeric ^ 131071), 			     10::numeric ^ 131071) as a(i)",numeric.sql,SAME,,"[(Decimal('6'),), (Decimal('7'),), (Decimal('8'),), (Decimal('9'),)]"
postgresql,postgresql,"select * from generate_series(1::numeric, 3::numeric) i, generate_series(i,3) j",numeric.sql,SAME,,"[(Decimal('1'), Decimal('1')), (Decimal('1'), Decimal('2')), (Decimal('1'), Decimal('3')), (Decimal('2'), Decimal('2')), (Decimal('2'), Decimal('3')), (Decimal('3'), Decimal('3'))]"
postgresql,postgresql,"select * from generate_series(1::numeric, 3::numeric) i, generate_series(1,i) j",numeric.sql,SAME,,"[(Decimal('1'), Decimal('1')), (Decimal('2'), Decimal('1')), (Decimal('2'), Decimal('2')), (Decimal('3'), Decimal('1')), (Decimal('3'), Decimal('2')), (Decimal('3'), Decimal('3'))]"
postgresql,postgresql,"select * from generate_series(1::numeric, 3::numeric) i, generate_series(1,5,i) j",numeric.sql,SAME,,"[(Decimal('1'), Decimal('1')), (Decimal('1'), Decimal('2')), (Decimal('1'), Decimal('3')), (Decimal('1'), Decimal('4')), (Decimal('1'), Decimal('5')), (Decimal('2'), Decimal('1')), (Decimal('2'), Decimal('3')), (Decimal('2'), Decimal('5')), (Decimal('3'), Decimal('1')), (Decimal('3'), Decimal('4'))]"
postgresql,postgresql,select ln(1.2345678e-28),numeric.sql,SAME,,"[(Decimal('-64.26166165451762991204894255882820859'),)]"
postgresql,postgresql,select ln(0.0456789),numeric.sql,SAME,,"[(Decimal('-3.0861187944847439'),)]"
postgresql,postgresql,select ln(0.349873948359354029493948309745709580730482050975),numeric.sql,SAME,,"[(Decimal('-1.050182336912082775693991697979750253056317885460'),)]"
postgresql,postgresql,select ln(0.99949452),numeric.sql,SAME,,"[(Decimal('-0.00050560779808326467'),)]"
postgresql,postgresql,select ln(1.00049687395),numeric.sql,SAME,,"[(Decimal('0.00049675054901370394'),)]"
postgresql,postgresql,select ln(1234.567890123456789),numeric.sql,SAME,,"[(Decimal('7.1184763012977896'),)]"
postgresql,postgresql,select ln(5.80397490724e5),numeric.sql,SAME,,"[(Decimal('13.271468476626518'),)]"
postgresql,postgresql,select ln(9.342536355e34),numeric.sql,SAME,,"[(Decimal('80.522470935524187'),)]"
postgresql,postgresql,select log(1.234567e-89),numeric.sql,SAME,,"[(Decimal('-88.90848533591373725637496492944925187293052336306443143312825869985819779294142441287021741054275'),)]"
postgresql,postgresql,select log(3.4634998359873254962349856073435545),numeric.sql,SAME,,"[(Decimal('0.5395151714070134409152404011959981'),)]"
postgresql,postgresql,select log(9.999999999999999999),numeric.sql,SAME,,"[(Decimal('1.000000000000000000'),)]"
postgresql,postgresql,select log(10.00000000000000000),numeric.sql,SAME,,"[(Decimal('1.00000000000000000'),)]"
postgresql,postgresql,select log(10.00000000000000001),numeric.sql,SAME,,"[(Decimal('1.00000000000000000'),)]"
postgresql,postgresql,select log(590489.45235237),numeric.sql,SAME,,"[(Decimal('5.771212144411727'),)]"
postgresql,postgresql,"select log(1.23e-89, 6.4689e45)",numeric.sql,SAME,,"[(Decimal('-0.5152489207781856983977054971756484879653568168479201885425588841094788842469115325262329756'),)]"
postgresql,postgresql,"select log(0.99923, 4.58934e34)",numeric.sql,SAME,,"[(Decimal('-103611.55579544132'),)]"
postgresql,postgresql,"select log(1.000016, 8.452010e18)",numeric.sql,SAME,,"[(Decimal('2723830.2877097365'),)]"
postgresql,postgresql,"select log(3.1954752e47, 9.4792021e-73)",numeric.sql,SAME,,"[(Decimal('-1.51613372350688302142917386143459361608600157692779164475351842333265418126982165'),)]"
postgresql,postgresql,select scale(numeric 'NaN'),numeric.sql,SAME,,"[(None,)]"
postgresql,postgresql,select scale(numeric 'inf'),numeric.sql,SAME,,"[(None,)]"
postgresql,postgresql,select scale(NULL::numeric),numeric.sql,SAME,,"[(None,)]"
postgresql,postgresql,select scale(1.12),numeric.sql,SAME,,"[(2,)]"
postgresql,postgresql,select scale(0),numeric.sql,SAME,,"[(0,)]"
postgresql,postgresql,select scale(0.00),numeric.sql,SAME,,"[(2,)]"
postgresql,postgresql,select scale(1.12345),numeric.sql,SAME,,"[(5,)]"
postgresql,postgresql,select scale(110123.12475871856128),numeric.sql,SAME,,"[(14,)]"
postgresql,postgresql,select scale(-1123.12471856128),numeric.sql,SAME,,"[(11,)]"
postgresql,postgresql,select scale(-13.000000000000000),numeric.sql,SAME,,"[(15,)]"
postgresql,postgresql,select min_scale(numeric 'NaN') is NULL,numeric.sql,SAME,,"[(True,)]"
postgresql,postgresql,select min_scale(numeric 'inf') is NULL,numeric.sql,SAME,,"[(True,)]"
postgresql,postgresql,select min_scale(0),numeric.sql,SAME,,"[(0,)]"
postgresql,postgresql,select min_scale(0.00),numeric.sql,SAME,,"[(0,)]"
postgresql,postgresql,select min_scale(1.0),numeric.sql,SAME,,"[(0,)]"
postgresql,postgresql,select min_scale(1.1),numeric.sql,SAME,,"[(1,)]"
postgresql,postgresql,select min_scale(1.12),numeric.sql,SAME,,"[(2,)]"
postgresql,postgresql,select min_scale(1.123),numeric.sql,SAME,,"[(3,)]"
postgresql,postgresql,select min_scale(1.1234),numeric.sql,SAME,,"[(4,)]"
postgresql,postgresql,select min_scale(1.12345),numeric.sql,SAME,,"[(5,)]"
postgresql,postgresql,select min_scale(1.1000),numeric.sql,SAME,,"[(1,)]"
postgresql,postgresql,select min_scale(1e100),numeric.sql,SAME,,"[(0,)]"
postgresql,postgresql,select trim_scale(numeric 'NaN'),numeric.sql,SAME,,"[(Decimal('NaN'),)]"
postgresql,postgresql,select trim_scale(numeric 'inf'),numeric.sql,SAME,,"[(Decimal('Infinity'),)]"
postgresql,postgresql,select trim_scale(1.120),numeric.sql,SAME,,"[(Decimal('1.12'),)]"
postgresql,postgresql,select trim_scale(0),numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,select trim_scale(0.00),numeric.sql,SAME,,"[(Decimal('0'),)]"
postgresql,postgresql,select trim_scale(1.1234500),numeric.sql,SAME,,"[(Decimal('1.12345'),)]"
postgresql,postgresql,select trim_scale(110123.12475871856128000),numeric.sql,SAME,,"[(Decimal('110123.12475871856128'),)]"
postgresql,postgresql,select trim_scale(-1123.124718561280000000),numeric.sql,SAME,,"[(Decimal('-1123.12471856128'),)]"
postgresql,postgresql,select trim_scale(-13.00000000000000000000),numeric.sql,SAME,,"[(Decimal('-13'),)]"
postgresql,postgresql,select trim_scale(1e100),numeric.sql,SAME,,"[(Decimal('10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),)]"
postgresql,postgresql,"SELECT SUM(9999::numeric) FROM generate_series(1, 100000)",numeric.sql,SAME,,"[(Decimal('999900000'),)]"
postgresql,postgresql,"SELECT SUM((-9999)::numeric) FROM generate_series(1, 100000)",numeric.sql,SAME,,"[(Decimal('-999900000'),)]"
postgresql,postgresql,SELECT trim_scale(variance(a) * 1e1000) FROM num_variance,numeric.sql,SAME,,"[(Decimal('12'),)]"
postgresql,postgresql,BEGIN,numeric.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE num_variance SET (parallel_workers = 4),numeric.sql,SAME,,[]
postgresql,postgresql,SET LOCAL parallel_setup_cost = 0,numeric.sql,SAME,,[]
postgresql,postgresql,SET LOCAL max_parallel_workers_per_gather = 4,numeric.sql,SAME,,[]
postgresql,postgresql,SELECT trim_scale(variance(a) * 1e1000) FROM num_variance,numeric.sql,SAME,,"[(Decimal('12'),)]"
postgresql,postgresql,ROLLBACK,numeric.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_variance,numeric.sql,SAME,,[]
postgresql,postgresql,SELECT variance(a) FROM num_variance,numeric.sql,SAME,,"[(Decimal('2.5000000000000000'),)]"
postgresql,postgresql,BEGIN,numeric.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE num_variance SET (parallel_workers = 4),numeric.sql,SAME,,[]
postgresql,postgresql,SET LOCAL parallel_setup_cost = 0,numeric.sql,SAME,,[]
postgresql,postgresql,SET LOCAL max_parallel_workers_per_gather = 4,numeric.sql,SAME,,[]
postgresql,postgresql,SELECT variance(a) FROM num_variance,numeric.sql,SAME,,"[(Decimal('2.5000000000000000'),)]"
postgresql,postgresql,ROLLBACK,numeric.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b, gcd(a, b), gcd(a, -b), gcd(-b, a), gcd(-b, -a) FROM (VALUES (0::numeric, 0::numeric),              (0::numeric, numeric 'NaN'),              (0::numeric, 46375::numeric),              (433125::numeric, 46375::numeric),              (43312.5::numeric, 4637.5::numeric),              (4331.250::numeric, 463.75000::numeric),              ('inf', '0'),              ('inf', '42'),              ('inf', 'inf')      ) AS v(a, b)",numeric.sql,SAME,,"[(Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0')), (Decimal('0'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('0'), Decimal('46375'), Decimal('46375'), Decimal('46375'), Decimal('46375'), Decimal('46375')), (Decimal('433125'), Decimal('46375'), Decimal('875'), Decimal('875'), Decimal('875'), Decimal('875')), (Decimal('43312.5'), Decimal('4637.5'), Decimal('87.5'), Decimal('87.5'), Decimal('87.5'), Decimal('87.5')), (Decimal('4331.250'), Decimal('463.75000'), Decimal('8.75000'), Decimal('8.75000'), Decimal('8.75000'), Decimal('8.75000')), (Decimal('Infinity'), Decimal('0'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('Infinity'), Decimal('42'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('Infinity'), Decimal('Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,"SELECT a,b, lcm(a, b), lcm(a, -b), lcm(-b, a), lcm(-b, -a) FROM (VALUES (0::numeric, 0::numeric),              (0::numeric, numeric 'NaN'),              (0::numeric, 13272::numeric),              (13272::numeric, 13272::numeric),              (423282::numeric, 13272::numeric),              (42328.2::numeric, 1327.2::numeric),              (4232.820::numeric, 132.72000::numeric),              ('inf', '0'),              ('inf', '42'),              ('inf', 'inf')      ) AS v(a, b)",numeric.sql,SAME,,"[(Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0')), (Decimal('0'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('0'), Decimal('13272'), Decimal('0'), Decimal('0'), Decimal('0'), Decimal('0')), (Decimal('13272'), Decimal('13272'), Decimal('13272'), Decimal('13272'), Decimal('13272'), Decimal('13272')), (Decimal('423282'), Decimal('13272'), Decimal('11851896'), Decimal('11851896'), Decimal('11851896'), Decimal('11851896')), (Decimal('42328.2'), Decimal('1327.2'), Decimal('1185189.6'), Decimal('1185189.6'), Decimal('1185189.6'), Decimal('1185189.6')), (Decimal('4232.820'), Decimal('132.72000'), Decimal('118518.96000'), Decimal('118518.96000'), Decimal('118518.96000'), Decimal('118518.96000')), (Decimal('Infinity'), Decimal('0'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('Infinity'), Decimal('42'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN')), (Decimal('Infinity'), Decimal('Infinity'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'), Decimal('NaN'))]"
postgresql,postgresql,SELECT factorial(4),numeric.sql,SAME,,"[(Decimal('24'),)]"
postgresql,postgresql,SELECT factorial(15),numeric.sql,SAME,,"[(Decimal('1307674368000'),)]"
postgresql,postgresql,SELECT factorial(0),numeric.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,SELECT pg_lsn(23783416::numeric),numeric.sql,SAME,,"[('0/16AE7F8',)]"
postgresql,postgresql,SELECT pg_lsn(0::numeric),numeric.sql,SAME,,"[('0/0',)]"
postgresql,postgresql,SELECT pg_lsn(18446744073709551615::numeric),numeric.sql,SAME,,"[('FFFFFFFF/FFFFFFFF',)]"
postgresql,postgresql,BEGIN TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,COMMIT TRANSACTION,numeric_big.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX num_exp_add_idx ON num_exp_add (id1, id2)",numeric_big.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX num_exp_sub_idx ON num_exp_sub (id1, id2)",numeric_big.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX num_exp_div_idx ON num_exp_div (id1, id2)",numeric_big.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX num_exp_mul_idx ON num_exp_mul (id1, id2)",numeric_big.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX num_exp_sqrt_idx ON num_exp_sqrt (id),numeric_big.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX num_exp_ln_idx ON num_exp_ln (id),numeric_big.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX num_exp_log10_idx ON num_exp_log10 (id),numeric_big.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX num_exp_power_10_ln_idx ON num_exp_power_10_ln (id),numeric_big.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_add,numeric_big.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_sub,numeric_big.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_div,numeric_big.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_mul,numeric_big.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_sqrt,numeric_big.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_ln,numeric_big.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_log10,numeric_big.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE num_exp_power_10_ln,numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, t2.expected     FROM num_result t1, num_exp_add t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != t2.expected",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 10) as expected     FROM num_result t1, num_exp_add t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != round(t2.expected, 10)",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, t2.expected     FROM num_result t1, num_exp_sub t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != t2.expected",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 40)     FROM num_result t1, num_exp_sub t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != round(t2.expected, 40)",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, t2.expected     FROM num_result t1, num_exp_mul t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != t2.expected",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 30) as expected     FROM num_result t1, num_exp_mul t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != round(t2.expected, 30)",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, t2.expected     FROM num_result t1, num_exp_div t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != t2.expected",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 80) as expected     FROM num_result t1, num_exp_div t2     WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2     AND t1.result != round(t2.expected, 80)",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.result, t2.expected     FROM num_result t1, num_exp_sqrt t2     WHERE t1.id1 = t2.id     AND t1.result != t2.expected",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.result, t2.expected     FROM num_result t1, num_exp_ln t2     WHERE t1.id1 = t2.id     AND t1.result != t2.expected",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.result, t2.expected     FROM num_result t1, num_exp_log10 t2     WHERE t1.id1 = t2.id     AND t1.result != t2.expected",numeric_big.sql,SAME,,[]
postgresql,postgresql,DELETE FROM num_result,numeric_big.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.id1, t1.result, t2.expected     FROM num_result t1, num_exp_power_10_ln t2     WHERE t1.id1 = t2.id     AND t1.result != t2.expected",numeric_big.sql,SAME,,[]
postgresql,postgresql,"WITH t(b, p, bc_result) AS (VALUES (0.084738, -20, 2744326694304960114888.785913), (0.084738, -19, 232548755422013710215.445941), (0.084738, -18, 19705716436950597776.236458), (0.084738, -17, 1669822999434319754.362725), (0.084738, -16, 141497461326065387.345189), (0.084738, -15, 11990211877848128.792857), (0.084738, -14, 1016026574105094.737649), (0.084738, -13, 86096059836517.517879), (0.084738, -12, 7295607918426.821430), (0.084738, -11, 618215223791.651994), (0.084738, -10, 52386321633.657007), (0.084738, -9, 4439112122.5928274), (0.084738, -8, 376161483.04427101), (0.084738, -7, 31875171.750205437), (0.084738, -6, 2701038.3037689083), (0.084738, -5, 228880.58378476975), (0.084738, -4, 19394.882908753819), (0.084738, -3, 1643.4835879219811), (0.084738, -2, 139.26551227333284), (0.084738, -1, 11.801080979017678), (0.084738, 0, 1), (0.084738, 1, .084738), (0.084738, 2, .007180528644), (0.084738, 3, .000608463636235272), (0.084738, 4, .00005155999160730448), (0.084738, 5, .000004369090568819767), (0.084738, 6, .0000003702279966206494), (0.084738, 7, .00000003137237997764059), (0.084738, 8, .000000002658432734545308), (0.084738, 9, .0000000002252702730599003), (0.084738, 10, .00000000001908895239854983), (0.084738, 11, .000000000001617559648348316), (0.084738, 12, .0000000000001370687694817396), (0.084738, 13, .00000000000001161493338834365), (0.084738, 14, .0000000000000009842262254614642), (0.084738, 15, .00000000000000008340136189315355), (0.084738, 16, .000000000000000007067264604102046), (0.084738, 17, .0000000000000000005988658680223991), (0.084738, 18, .00000000000000000005074669592448206), (0.084738, 19, .000000000000000000004300173519248761), (0.084738, 20, .0000000000000000000003643881036741015)) SELECT b, p, bc_result, b^p AS power, b^p - bc_result AS diff FROM t",numeric_big.sql,SAME,,"[(Decimal('0.084738'), -20, Decimal('2744326694304960114888.785913'), Decimal('2744326694304960114888.785913'), Decimal('0.000000')), (Decimal('0.084738'), -19, Decimal('232548755422013710215.445941'), Decimal('232548755422013710215.445941'), Decimal('0.000000')), (Decimal('0.084738'), -18, Decimal('19705716436950597776.236458'), Decimal('19705716436950597776.236458'), Decimal('0.000000')), (Decimal('0.084738'), -17, Decimal('1669822999434319754.362725'), Decimal('1669822999434319754.362725'), Decimal('0.000000')), (Decimal('0.084738'), -16, Decimal('141497461326065387.345189'), Decimal('141497461326065387.345189'), Decimal('0.000000')), (Decimal('0.084738'), -15, Decimal('11990211877848128.792857'), Decimal('11990211877848128.792857'), Decimal('0.000000')), (Decimal('0.084738'), -14, Decimal('1016026574105094.737649'), Decimal('1016026574105094.737649'), Decimal('0.000000')), (Decimal('0.084738'), -13, Decimal('86096059836517.517879'), Decimal('86096059836517.517879'), Decimal('0.000000')), (Decimal('0.084738'), -12, Decimal('7295607918426.821430'), Decimal('7295607918426.821430'), Decimal('0.000000')), (Decimal('0.084738'), -11, Decimal('618215223791.651994'), Decimal('618215223791.651994'), Decimal('0.000000')), (Decimal('0.084738'), -10, Decimal('52386321633.657007'), Decimal('52386321633.657007'), Decimal('0.000000')), (Decimal('0.084738'), -9, Decimal('4439112122.5928274'), Decimal('4439112122.5928274'), Decimal('0E-7')), (Decimal('0.084738'), -8, Decimal('376161483.04427101'), Decimal('376161483.04427101'), Decimal('0E-8')), (Decimal('0.084738'), -7, Decimal('31875171.750205437'), Decimal('31875171.750205437'), Decimal('0E-9')), (Decimal('0.084738'), -6, Decimal('2701038.3037689083'), Decimal('2701038.3037689083'), Decimal('0E-10')), (Decimal('0.084738'), -5, Decimal('228880.58378476975'), Decimal('228880.58378476975'), Decimal('0E-11')), (Decimal('0.084738'), -4, Decimal('19394.882908753819'), Decimal('19394.882908753819'), Decimal('0E-12')), (Decimal('0.084738'), -3, Decimal('1643.4835879219811'), Decimal('1643.4835879219811'), Decimal('0E-13')), (Decimal('0.084738'), -2, Decimal('139.26551227333284'), Decimal('139.26551227333284'), Decimal('0E-14')), (Decimal('0.084738'), -1, Decimal('11.801080979017678'), Decimal('11.801080979017678'), Decimal('0E-15')), (Decimal('0.084738'), 0, Decimal('1'), Decimal('1.0000000000000000'), Decimal('0E-16')), (Decimal('0.084738'), 1, Decimal('0.084738'), Decimal('0.08473800000000000'), Decimal('0E-17')), (Decimal('0.084738'), 2, Decimal('0.007180528644'), Decimal('0.007180528644000000'), Decimal('0E-18')), (Decimal('0.084738'), 3, Decimal('0.000608463636235272'), Decimal('0.0006084636362352720'), Decimal('0E-19')), (Decimal('0.084738'), 4, Decimal('0.00005155999160730448'), Decimal('0.00005155999160730448'), Decimal('0E-20')), (Decimal('0.084738'), 5, Decimal('0.000004369090568819767'), Decimal('0.000004369090568819767'), Decimal('0E-21')), (Decimal('0.084738'), 6, Decimal('3.702279966206494E-7'), Decimal('3.702279966206494E-7'), Decimal('0E-22')), (Decimal('0.084738'), 7, Decimal('3.137237997764059E-8'), Decimal('3.137237997764059E-8'), Decimal('0E-23')), (Decimal('0.084738'), 8, Decimal('2.658432734545308E-9'), Decimal('2.658432734545308E-9'), Decimal('0E-24')), (Decimal('0.084738'), 9, Decimal('2.252702730599003E-10'), Decimal('2.252702730599003E-10'), Decimal('0E-25')), (Decimal('0.084738'), 10, Decimal('1.908895239854983E-11'), Decimal('1.908895239854983E-11'), Decimal('0E-26')), (Decimal('0.084738'), 11, Decimal('1.617559648348316E-12'), Decimal('1.617559648348316E-12'), Decimal('0E-27')), (Decimal('0.084738'), 12, Decimal('1.370687694817396E-13'), Decimal('1.370687694817396E-13'), Decimal('0E-28')), (Decimal('0.084738'), 13, Decimal('1.161493338834365E-14'), Decimal('1.161493338834365E-14'), Decimal('0E-29')), (Decimal('0.084738'), 14, Decimal('9.842262254614642E-16'), Decimal('9.842262254614642E-16'), Decimal('0E-31')), (Decimal('0.084738'), 15, Decimal('8.340136189315355E-17'), Decimal('8.340136189315355E-17'), Decimal('0E-32')), (Decimal('0.084738'), 16, Decimal('7.067264604102046E-18'), Decimal('7.067264604102046E-18'), Decimal('0E-33')), (Decimal('0.084738'), 17, Decimal('5.988658680223991E-19'), Decimal('5.988658680223991E-19'), Decimal('0E-34')), (Decimal('0.084738'), 18, Decimal('5.074669592448206E-20'), Decimal('5.074669592448206E-20'), Decimal('0E-35')), (Decimal('0.084738'), 19, Decimal('4.300173519248761E-21'), Decimal('4.300173519248761E-21'), Decimal('0E-36')), (Decimal('0.084738'), 20, Decimal('3.643881036741015E-22'), Decimal('3.643881036741015E-22'), Decimal('0E-37'))]"
postgresql,postgresql,"WITH t(b, p, bc_result) AS (VALUES (37.821637, -20, .00000000000000000000000000000002787363175065101), (37.821637, -19, .000000000000000000000000000001054226381944797), (37.821637, -18, .00000000000000000000000000003987256753373947), (37.821637, -17, .000000000000000000000000001508045775519079), (37.821637, -16, .00000000000000000000000005703675990106610), (37.821637, -15, .000000000000000000000002157223628634278), (37.821637, -14, .00000000000000000000008158972901002847), (37.821637, -13, .000000000000000000003085857113545666), (37.821637, -12, .0000000000000000001167121675823920), (37.821637, -11, .000000000000000004414245235784397), (37.821637, -10, .0000000000000001669539809368169), (37.821637, -9, .000000000000006314472862697207), (37.821637, -8, .0000000000002388237004592846), (37.821637, -7, .000000000009032703305767796), (37.821637, -6, .0000000003416316255594496), (37.821637, -5, .00000001292106732962942), (37.821637, -4, .0000004886959181938034), (37.821637, -3, .00001848327962130773), (37.821637, -2, .0006990678924065984), (37.821637, -1, .02643989206495742), (37.821637, 0, 1), (37.821637, 1, 37.821637), (37.821637, 2, 1430.476225359769), (37.821637, 3, 54102.952532687378), (37.821637, 4, 2046262.2313195326), (37.821637, 5, 77392987.319777394), (37.821637, 6, 2927129472.7542235), (37.821637, 7, 110708828370.511632), (37.821637, 8, 4187189119324.792454), (37.821637, 9, 158366346921451.985294), (37.821637, 10, 5989674486279224.500736), (37.821637, 11, 226539294168214309.708325), (37.821637, 12, 8568086950266418559.993831), (37.821637, 13, 324059074417413536066.149409), (37.821637, 14, 12256444679171401239980.310926), (37.821637, 15, 463558801566202198479885.206986), (37.821637, 16, 17532552720991931019508170.100286), (37.821637, 17, 663109844696719094948877928.067252), (37.821637, 18, 25079899837245684700124994552.671731), (37.821637, 19, 948562867640665366544581398598.127577), (37.821637, 20, 35876200451584291931921101974730.690104)) SELECT b, p, bc_result, b^p AS power, b^p - bc_result AS diff FROM t",numeric_big.sql,SAME,,"[(Decimal('37.821637'), -20, Decimal('2.787363175065101E-32'), Decimal('2.787363175065101E-32'), Decimal('0E-47')), (Decimal('37.821637'), -19, Decimal('1.054226381944797E-30'), Decimal('1.054226381944797E-30'), Decimal('0E-45')), (Decimal('37.821637'), -18, Decimal('3.987256753373947E-29'), Decimal('3.987256753373947E-29'), Decimal('0E-44')), (Decimal('37.821637'), -17, Decimal('1.508045775519079E-27'), Decimal('1.508045775519079E-27'), Decimal('0E-42')), (Decimal('37.821637'), -16, Decimal('5.703675990106610E-26'), Decimal('5.703675990106610E-26'), Decimal('0E-41')), (Decimal('37.821637'), -15, Decimal('2.157223628634278E-24'), Decimal('2.157223628634278E-24'), Decimal('0E-39')), (Decimal('37.821637'), -14, Decimal('8.158972901002847E-23'), Decimal('8.158972901002847E-23'), Decimal('0E-38')), (Decimal('37.821637'), -13, Decimal('3.085857113545666E-21'), Decimal('3.085857113545666E-21'), Decimal('0E-36')), (Decimal('37.821637'), -12, Decimal('1.167121675823920E-19'), Decimal('1.167121675823920E-19'), Decimal('0E-34')), (Decimal('37.821637'), -11, Decimal('4.414245235784397E-18'), Decimal('4.414245235784397E-18'), Decimal('0E-33')), (Decimal('37.821637'), -10, Decimal('1.669539809368169E-16'), Decimal('1.669539809368169E-16'), Decimal('0E-31')), (Decimal('37.821637'), -9, Decimal('6.314472862697207E-15'), Decimal('6.314472862697207E-15'), Decimal('0E-30')), (Decimal('37.821637'), -8, Decimal('2.388237004592846E-13'), Decimal('2.388237004592846E-13'), Decimal('0E-28')), (Decimal('37.821637'), -7, Decimal('9.032703305767796E-12'), Decimal('9.032703305767796E-12'), Decimal('0E-27')), (Decimal('37.821637'), -6, Decimal('3.416316255594496E-10'), Decimal('3.416316255594496E-10'), Decimal('0E-25')), (Decimal('37.821637'), -5, Decimal('1.292106732962942E-8'), Decimal('1.292106732962942E-8'), Decimal('0E-23')), (Decimal('37.821637'), -4, Decimal('4.886959181938034E-7'), Decimal('4.886959181938034E-7'), Decimal('0E-22')), (Decimal('37.821637'), -3, Decimal('0.00001848327962130773'), Decimal('0.00001848327962130773'), Decimal('0E-20')), (Decimal('37.821637'), -2, Decimal('0.0006990678924065984'), Decimal('0.0006990678924065984'), Decimal('0E-19')), (Decimal('37.821637'), -1, Decimal('0.02643989206495742'), Decimal('0.02643989206495742'), Decimal('0E-17')), (Decimal('37.821637'), 0, Decimal('1'), Decimal('1.0000000000000000'), Decimal('0E-16')), (Decimal('37.821637'), 1, Decimal('37.821637'), Decimal('37.821637000000000'), Decimal('0E-15')), (Decimal('37.821637'), 2, Decimal('1430.476225359769'), Decimal('1430.4762253597690'), Decimal('0E-13')), (Decimal('37.821637'), 3, Decimal('54102.952532687378'), Decimal('54102.952532687378'), Decimal('0E-12')), (Decimal('37.821637'), 4, Decimal('2046262.2313195326'), Decimal('2046262.2313195326'), Decimal('0E-10')), (Decimal('37.821637'), 5, Decimal('77392987.319777394'), Decimal('77392987.319777394'), Decimal('0E-9')), (Decimal('37.821637'), 6, Decimal('2927129472.7542235'), Decimal('2927129472.7542235'), Decimal('0E-7')), (Decimal('37.821637'), 7, Decimal('110708828370.511632'), Decimal('110708828370.511632'), Decimal('0.000000')), (Decimal('37.821637'), 8, Decimal('4187189119324.792454'), Decimal('4187189119324.792454'), Decimal('0.000000')), (Decimal('37.821637'), 9, Decimal('158366346921451.985294'), Decimal('158366346921451.985294'), Decimal('0.000000')), (Decimal('37.821637'), 10, Decimal('5989674486279224.500736'), Decimal('5989674486279224.500736'), Decimal('0.000000')), (Decimal('37.821637'), 11, Decimal('226539294168214309.708325'), Decimal('226539294168214309.708325'), Decimal('0.000000')), (Decimal('37.821637'), 12, Decimal('8568086950266418559.993831'), Decimal('8568086950266418559.993831'), Decimal('0.000000')), (Decimal('37.821637'), 13, Decimal('324059074417413536066.149409'), Decimal('324059074417413536066.149409'), Decimal('0.000000')), (Decimal('37.821637'), 14, Decimal('12256444679171401239980.310926'), Decimal('12256444679171401239980.310926'), Decimal('0.000000')), (Decimal('37.821637'), 15, Decimal('463558801566202198479885.206986'), Decimal('463558801566202198479885.206986'), Decimal('0.000000')), (Decimal('37.821637'), 16, Decimal('17532552720991931019508170.100286'), Decimal('17532552720991931019508170.100286'), Decimal('0.000000')), (Decimal('37.821637'), 17, Decimal('663109844696719094948877928.067252'), Decimal('663109844696719094948877928.067252'), Decimal('0.000000')), (Decimal('37.821637'), 18, Decimal('25079899837245684700124994552.671731'), Decimal('25079899837245684700124994552.671731'), Decimal('0.000000')), (Decimal('37.821637'), 19, Decimal('948562867640665366544581398598.127577'), Decimal('948562867640665366544581398598.127577'), Decimal('0.000000')), (Decimal('37.821637'), 20, Decimal('35876200451584291931921101974730.690104'), Decimal('35876200451584291931921101974730.690104'), Decimal('0.000000'))]"
postgresql,postgresql,"WITH t(b, p, bc_result) AS (VALUES (0.06933247, -20.342987, 379149253615977128356318.39406340), (0.06933247, -19.342987, 26287354251852125772450.59436685), (0.06933247, -18.342987, 1822567200045909954554.65766042), (0.06933247, -17.342987, 126363085720167050546.86216560), (0.06933247, -16.342987, 8761064849800910427.02880469), (0.06933247, -15.342987, 607426265866876128.15466179), (0.06933247, -14.342987, 42114363355427213.14899924), (0.06933247, -13.342987, 2919892833909256.59283660), (0.06933247, -12.342987, 202443382310228.51544515), (0.06933247, -11.342987, 14035899730722.44924025), (0.06933247, -10.342987, 973143597003.32229028), (0.06933247, -9.342987, 67470449244.92493259), (0.06933247, -8.342987, 4677892898.16028054), (0.06933247, -7.342987, 324329869.02491071), (0.06933247, -6.342987, 22486590.914273551), (0.06933247, -5.342987, 1559050.8899661435), (0.06933247, -4.342987, 108092.84905705095), (0.06933247, -3.342987, 7494.3442144625131), (0.06933247, -2.342987, 519.60139541889576), (0.06933247, -1.342987, 36.025248159838727), (0.06933247, 0.342987, .40036522320023350), (0.06933247, 1.342987, .02775830982657349), (0.06933247, 2.342987, .001924552183301612), (0.06933247, 3.342987, .0001334339565121935), (0.06933247, 4.342987, .000009251305786862961), (0.06933247, 5.342987, .0000006414158809285026), (0.06933247, 6.342987, .00000004447094732199898), (0.06933247, 7.342987, .000000003083280621074075), (0.06933247, 8.342987, .0000000002137714611621997), (0.06933247, 9.342987, .00000000001482130341788437), (0.06933247, 10.342987, .000000000001027597574581366), (0.06933247, 11.342987, .00000000000007124587801173530), (0.06933247, 12.342987, .000000000000004939652699872298), (0.06933247, 13.342987, .0000000000000003424783226243151), (0.06933247, 14.342987, .00000000000000002374486802900065), (0.06933247, 15.342987, .000000000000000001646290350274646), (0.06933247, 16.342987, .0000000000000000001141413763217064), (0.06933247, 17.342987, .000000000000000000007913703549583420), (0.06933247, 18.342987, .0000000000000000000005486766139403860), (0.06933247, 19.342987, .00000000000000000000003804110487572339), (0.06933247, 20.342987, .000000000000000000000002637483762562946)) SELECT b, p, bc_result, b^p AS power, b^p - bc_result AS diff FROM t",numeric_big.sql,SAME,,"[(Decimal('0.06933247'), Decimal('-20.342987'), Decimal('379149253615977128356318.39406340'), Decimal('379149253615977128356318.39406340'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-19.342987'), Decimal('26287354251852125772450.59436685'), Decimal('26287354251852125772450.59436685'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-18.342987'), Decimal('1822567200045909954554.65766042'), Decimal('1822567200045909954554.65766042'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-17.342987'), Decimal('126363085720167050546.86216560'), Decimal('126363085720167050546.86216560'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-16.342987'), Decimal('8761064849800910427.02880469'), Decimal('8761064849800910427.02880469'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-15.342987'), Decimal('607426265866876128.15466179'), Decimal('607426265866876128.15466179'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-14.342987'), Decimal('42114363355427213.14899924'), Decimal('42114363355427213.14899924'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-13.342987'), Decimal('2919892833909256.59283660'), Decimal('2919892833909256.59283660'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-12.342987'), Decimal('202443382310228.51544515'), Decimal('202443382310228.51544515'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-11.342987'), Decimal('14035899730722.44924025'), Decimal('14035899730722.44924025'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-10.342987'), Decimal('973143597003.32229028'), Decimal('973143597003.32229028'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-9.342987'), Decimal('67470449244.92493259'), Decimal('67470449244.92493259'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-8.342987'), Decimal('4677892898.16028054'), Decimal('4677892898.16028054'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-7.342987'), Decimal('324329869.02491071'), Decimal('324329869.02491071'), Decimal('0E-8')), (Decimal('0.06933247'), Decimal('-6.342987'), Decimal('22486590.914273551'), Decimal('22486590.914273551'), Decimal('0E-9')), (Decimal('0.06933247'), Decimal('-5.342987'), Decimal('1559050.8899661435'), Decimal('1559050.8899661435'), Decimal('0E-10')), (Decimal('0.06933247'), Decimal('-4.342987'), Decimal('108092.84905705095'), Decimal('108092.84905705095'), Decimal('0E-11')), (Decimal('0.06933247'), Decimal('-3.342987'), Decimal('7494.3442144625131'), Decimal('7494.3442144625131'), Decimal('0E-13')), (Decimal('0.06933247'), Decimal('-2.342987'), Decimal('519.60139541889576'), Decimal('519.60139541889576'), Decimal('0E-14')), (Decimal('0.06933247'), Decimal('-1.342987'), Decimal('36.025248159838727'), Decimal('36.025248159838727'), Decimal('0E-15')), (Decimal('0.06933247'), Decimal('0.342987'), Decimal('0.40036522320023350'), Decimal('0.4003652232002335'), Decimal('0E-17')), (Decimal('0.06933247'), Decimal('1.342987'), Decimal('0.02775830982657349'), Decimal('0.02775830982657349'), Decimal('0E-17')), (Decimal('0.06933247'), Decimal('2.342987'), Decimal('0.001924552183301612'), Decimal('0.001924552183301612'), Decimal('0E-18')), (Decimal('0.06933247'), Decimal('3.342987'), Decimal('0.0001334339565121935'), Decimal('0.0001334339565121935'), Decimal('0E-19')), (Decimal('0.06933247'), Decimal('4.342987'), Decimal('0.000009251305786862961'), Decimal('0.000009251305786862961'), Decimal('0E-21')), (Decimal('0.06933247'), Decimal('5.342987'), Decimal('6.414158809285026E-7'), Decimal('6.414158809285026E-7'), Decimal('0E-22')), (Decimal('0.06933247'), Decimal('6.342987'), Decimal('4.447094732199898E-8'), Decimal('4.447094732199898E-8'), Decimal('0E-23')), (Decimal('0.06933247'), Decimal('7.342987'), Decimal('3.083280621074075E-9'), Decimal('3.083280621074075E-9'), Decimal('0E-24')), (Decimal('0.06933247'), Decimal('8.342987'), Decimal('2.137714611621997E-10'), Decimal('2.137714611621997E-10'), Decimal('0E-25')), (Decimal('0.06933247'), Decimal('9.342987'), Decimal('1.482130341788437E-11'), Decimal('1.482130341788437E-11'), Decimal('0E-26')), (Decimal('0.06933247'), Decimal('10.342987'), Decimal('1.027597574581366E-12'), Decimal('1.027597574581366E-12'), Decimal('0E-27')), (Decimal('0.06933247'), Decimal('11.342987'), Decimal('7.124587801173530E-14'), Decimal('7.124587801173530E-14'), Decimal('0E-29')), (Decimal('0.06933247'), Decimal('12.342987'), Decimal('4.939652699872298E-15'), Decimal('4.939652699872298E-15'), Decimal('0E-30')), (Decimal('0.06933247'), Decimal('13.342987'), Decimal('3.424783226243151E-16'), Decimal('3.424783226243151E-16'), Decimal('0E-31')), (Decimal('0.06933247'), Decimal('14.342987'), Decimal('2.374486802900065E-17'), Decimal('2.374486802900065E-17'), Decimal('0E-32')), (Decimal('0.06933247'), Decimal('15.342987'), Decimal('1.646290350274646E-18'), Decimal('1.646290350274646E-18'), Decimal('0E-33')), (Decimal('0.06933247'), Decimal('16.342987'), Decimal('1.141413763217064E-19'), Decimal('1.141413763217064E-19'), Decimal('0E-34')), (Decimal('0.06933247'), Decimal('17.342987'), Decimal('7.913703549583420E-21'), Decimal('7.913703549583420E-21'), Decimal('0E-36')), (Decimal('0.06933247'), Decimal('18.342987'), Decimal('5.486766139403860E-22'), Decimal('5.486766139403860E-22'), Decimal('0E-37')), (Decimal('0.06933247'), Decimal('19.342987'), Decimal('3.804110487572339E-23'), Decimal('3.804110487572339E-23'), Decimal('0E-38')), (Decimal('0.06933247'), Decimal('20.342987'), Decimal('2.637483762562946E-24'), Decimal('2.637483762562946E-24'), Decimal('0E-39'))]"
postgresql,postgresql,"WITH t(b, p, bc_result) AS (VALUES (27.234987, -20.230957, .000000000000000000000000000009247064512095633), (27.234987, -19.230957, .0000000000000000000000000002518436817750859), (27.234987, -18.230957, .000000000000000000000000006858959399176602), (27.234987, -17.230957, .0000000000000000000000001868036700701026), (27.234987, -16.230957, .000000000000000000000005087595525911532), (27.234987, -15.230957, .0000000000000000000001385605980094587), (27.234987, -14.230957, .000000000000000000003773696085499835), (27.234987, -13.230957, .0000000000000000001027765638305389), (27.234987, -12.230957, .000000000000000002799118379829397), (27.234987, -11.230957, .00000000000000007623395268611469), (27.234987, -10.230957, .000000000000002076230710364949), (27.234987, -9.230957, .00000000000005654611640579014), (27.234987, -8.230957, .000000000001540032745212181), (27.234987, -7.230957, .00000000004194277179542807), (27.234987, -6.230957, .000000001142310844592450), (27.234987, -5.230957, .00000003111082100243440), (27.234987, -4.230957, .0000008473028055606278), (27.234987, -3.230957, .00002307628089450723), (27.234987, -2.230957, .0006284822101702527), (27.234987, -1.230957, .01711670482371810), (27.234987, 0.230957, 2.1451253063142300), (27.234987, 1.230957, 58.422459830839071), (27.234987, 2.230957, 1591.1349340009243), (27.234987, 3.230957, 43334.539242761031), (27.234987, 4.230957, 1180215.6129275865), (27.234987, 5.230957, 32143156.875279851), (27.234987, 6.230957, 875418459.63720737), (27.234987, 7.230957, 23842010367.779367), (27.234987, 8.230957, 649336842420.336290), (27.234987, 9.230957, 17684680461938.907402), (27.234987, 10.230957, 481642042480060.137900), (27.234987, 11.230957, 13117514765597885.614921), (27.234987, 12.230957, 357255344113366461.949871), (27.234987, 13.230957, 9729844652608062117.440722), (27.234987, 14.230957, 264992192625800087863.690528), (27.234987, 15.230957, 7217058921265161257566.469315), (27.234987, 16.230957, 196556505898890690402726.443417), (27.234987, 17.230957, 5353213882921711267539279.451015), (27.234987, 18.230957, 145794710509592328389185797.837767), (27.234987, 19.230957, 3970717045397510438979206144.696206), (27.234987, 20.230957, 108142427112079606637962972621.121293)) SELECT b, p, bc_result, b^p AS power, b^p - bc_result AS diff FROM t",numeric_big.sql,SAME,,"[(Decimal('27.234987'), Decimal('-20.230957'), Decimal('9.247064512095633E-30'), Decimal('9.247064512095633E-30'), Decimal('0E-45')), (Decimal('27.234987'), Decimal('-19.230957'), Decimal('2.518436817750859E-28'), Decimal('2.518436817750859E-28'), Decimal('0E-43')), (Decimal('27.234987'), Decimal('-18.230957'), Decimal('6.858959399176602E-27'), Decimal('6.858959399176602E-27'), Decimal('0E-42')), (Decimal('27.234987'), Decimal('-17.230957'), Decimal('1.868036700701026E-25'), Decimal('1.868036700701026E-25'), Decimal('0E-40')), (Decimal('27.234987'), Decimal('-16.230957'), Decimal('5.087595525911532E-24'), Decimal('5.087595525911532E-24'), Decimal('0E-39')), (Decimal('27.234987'), Decimal('-15.230957'), Decimal('1.385605980094587E-22'), Decimal('1.385605980094587E-22'), Decimal('0E-37')), (Decimal('27.234987'), Decimal('-14.230957'), Decimal('3.773696085499835E-21'), Decimal('3.773696085499835E-21'), Decimal('0E-36')), (Decimal('27.234987'), Decimal('-13.230957'), Decimal('1.027765638305389E-19'), Decimal('1.027765638305389E-19'), Decimal('0E-34')), (Decimal('27.234987'), Decimal('-12.230957'), Decimal('2.799118379829397E-18'), Decimal('2.799118379829397E-18'), Decimal('0E-33')), (Decimal('27.234987'), Decimal('-11.230957'), Decimal('7.623395268611469E-17'), Decimal('7.623395268611469E-17'), Decimal('0E-32')), (Decimal('27.234987'), Decimal('-10.230957'), Decimal('2.076230710364949E-15'), Decimal('2.076230710364949E-15'), Decimal('0E-30')), (Decimal('27.234987'), Decimal('-9.230957'), Decimal('5.654611640579014E-14'), Decimal('5.654611640579014E-14'), Decimal('0E-29')), (Decimal('27.234987'), Decimal('-8.230957'), Decimal('1.540032745212181E-12'), Decimal('1.540032745212181E-12'), Decimal('0E-27')), (Decimal('27.234987'), Decimal('-7.230957'), Decimal('4.194277179542807E-11'), Decimal('4.194277179542807E-11'), Decimal('0E-26')), (Decimal('27.234987'), Decimal('-6.230957'), Decimal('1.142310844592450E-9'), Decimal('1.142310844592450E-9'), Decimal('0E-24')), (Decimal('27.234987'), Decimal('-5.230957'), Decimal('3.111082100243440E-8'), Decimal('3.111082100243440E-8'), Decimal('0E-23')), (Decimal('27.234987'), Decimal('-4.230957'), Decimal('8.473028055606278E-7'), Decimal('8.473028055606278E-7'), Decimal('0E-22')), (Decimal('27.234987'), Decimal('-3.230957'), Decimal('0.00002307628089450723'), Decimal('0.00002307628089450723'), Decimal('0E-20')), (Decimal('27.234987'), Decimal('-2.230957'), Decimal('0.0006284822101702527'), Decimal('0.0006284822101702527'), Decimal('0E-19')), (Decimal('27.234987'), Decimal('-1.230957'), Decimal('0.01711670482371810'), Decimal('0.01711670482371810'), Decimal('0E-17')), (Decimal('27.234987'), Decimal('0.230957'), Decimal('2.1451253063142300'), Decimal('2.1451253063142300'), Decimal('0E-16')), (Decimal('27.234987'), Decimal('1.230957'), Decimal('58.422459830839071'), Decimal('58.422459830839071'), Decimal('0E-15')), (Decimal('27.234987'), Decimal('2.230957'), Decimal('1591.1349340009243'), Decimal('1591.1349340009243'), Decimal('0E-13')), (Decimal('27.234987'), Decimal('3.230957'), Decimal('43334.539242761031'), Decimal('43334.539242761031'), Decimal('0E-12')), (Decimal('27.234987'), Decimal('4.230957'), Decimal('1180215.6129275865'), Decimal('1180215.6129275865'), Decimal('0E-10')), (Decimal('27.234987'), Decimal('5.230957'), Decimal('32143156.875279851'), Decimal('32143156.875279851'), Decimal('0E-9')), (Decimal('27.234987'), Decimal('6.230957'), Decimal('875418459.63720737'), Decimal('875418459.63720737'), Decimal('0E-8')), (Decimal('27.234987'), Decimal('7.230957'), Decimal('23842010367.779367'), Decimal('23842010367.779367'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('8.230957'), Decimal('649336842420.336290'), Decimal('649336842420.336290'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('9.230957'), Decimal('17684680461938.907402'), Decimal('17684680461938.907402'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('10.230957'), Decimal('481642042480060.137900'), Decimal('481642042480060.137900'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('11.230957'), Decimal('13117514765597885.614921'), Decimal('13117514765597885.614921'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('12.230957'), Decimal('357255344113366461.949871'), Decimal('357255344113366461.949871'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('13.230957'), Decimal('9729844652608062117.440722'), Decimal('9729844652608062117.440722'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('14.230957'), Decimal('264992192625800087863.690528'), Decimal('264992192625800087863.690528'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('15.230957'), Decimal('7217058921265161257566.469315'), Decimal('7217058921265161257566.469315'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('16.230957'), Decimal('196556505898890690402726.443417'), Decimal('196556505898890690402726.443417'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('17.230957'), Decimal('5353213882921711267539279.451015'), Decimal('5353213882921711267539279.451015'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('18.230957'), Decimal('145794710509592328389185797.837767'), Decimal('145794710509592328389185797.837767'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('19.230957'), Decimal('3970717045397510438979206144.696206'), Decimal('3970717045397510438979206144.696206'), Decimal('0.000000')), (Decimal('27.234987'), Decimal('20.230957'), Decimal('108142427112079606637962972621.121293'), Decimal('108142427112079606637962972621.121293'), Decimal('0.000000'))]"
postgresql,postgresql,"WITH t(b, p, bc_result) AS (VALUES (0.12, -2829.8369, 58463948950011752465280493160293790845494328939320966633018493248607815580903065923369555885857984675501574162389726507612128133630191173383130639968378879506624785786843501848666498440326970769604109017960864573408272864266102690849952650095786874354625921641729880352858506454246180842452983243549491658464046163869265572232996388827878976066830374513768599285647145439771472435206769249126377164951470622827631950210853282324510655982757098065657709137845327135766013147354253426364240746381620690117663724329288646510198895137275207992825719846135857839292915100523542874885080351683587865157015032404901182924720371819942957083390475846809517968191151435281268695782594904484795360890092607679215675240583291240729468370895035823777914792823688291214492607109455017754453939895630226174304357121900605689015734289765672740769194115142607443713769825894380064727556869268488695795705030158832909348803019429370973064732712469794182891757241046263341655894972953512257981661670321890336672832647028099324621932563236459127918144141230217523147304565594514812518826936144181257723061181656522095236928347413997136815409159361412494284201481609684892562646522086577634100783077813105675590737823924220663206479031113753135119759722725207724879578900186075841393115040465401462266086907464970054073340036852442184414587772177753008511913377364966775792477387717262694468450099866775550614257191941835797445874557362115814601886902749237439492398087966544817154173072811937702110580330775581851211123491341435883319798273456296794954514173820352334127081705706502510709179711510240917772628308487366740741280043704807717608366220401933596364641284631036907635403895053036499618723044314773148779735006542501244942039455169872946018271985844759209768927953340447524637670938413827595013338859796135512187473850161303598087634723542727044978083220970836296653305188470017342167913572166172051819741354902582606590658382067039498769674611071582171914886494269818475850690414812481252963932223686078322390396586222238852602472958831686564971334200490182175112490433364675164900946902818404704835106260174052265784055642968397240262737313737007322288203637798365320295080314524864099419556398713380156353062937736280885716820226469419928595465390700629307079710611273715705695938635644841913194091407807776191951797748706106000922803167645881087385311847268311361092838264814899353459146959869764278464187826798546290981492648723002412475976344071283321798061003719251864595518596639432393032991023409676558943539937377229130132816883146259468718344018277257037013406135980469482324577407154032999045733141275895.3432), (1.2, 32908.8896, 58463467728170833376633133695001863276259293590926929026251227859007891876739460057725441400966420577009060860805883032969522911803372870882799865787473726926215148161529632590083389287080925059682489116446754279752928005457087175157581627230586554364417068189211136840990661174760199073702207450133797324318403866058202372178813998850887986769280847189341565507156189065295823921162851958925352114220880236114784962150135485415106748467247897246441194126125699204912883449386043559785865023459356275014504597646990160571664166410683323036984805434677654413174177920726210827006973855410386789516533036723888687725436216478665958434776205940192130053647653715221076841771578099896259902368829351569726536927952661429685419815305418450230567773264738536471211804481206474781470237730069753206249915908804615495060673071058534441654604668770343616386612119048579369195201590008082689834456232255266932976831478404670192731621439902738547169253818323045451045749609624500171633897705543164388470746657118050314064066768449450440405619135824055131398727045420324382226572368236570500391463795989258779677208133531636928003546809249007993065200108076924439703799231711400266122025052209803513232429907231051873161206025860851056337427740362763618748092029386371493898291580557004812947013231371383576580415676519066503391905962989205397824064923920045371823949776899815750413244195402085917098964452866825666226141169411712884994564949174271056284898570445214367063763956186792886147126466387576513166370247576466566827375268334148320298849218878848928271566491769458471357076035396330179659440244425914213309776100351793665960978678576150833311810944729586040624059867137538839913141142139636023129691775489034134511666020819676247950267220131499463010350308195762769192775344260909521732256844149916046793599150786757764962585268686580124987490115873389726527572428003433405659445349155536369077209682951123806333170190998931670309088422483075609203671527331975811507450670132060984691061148836994322505371265263690017938762760088575875666254883673433331627055180154954694693433502522592907190906966067656027637884202418119121728966267936832338377284832958974299187166554160783467156478554899314000348357280306042140481751668215838656488457943830180819301102535170705017482946779698265096226184239631924271857062033454725540956591929965181603262502135610768915716020374362368495244256420143645126927013882334008435586481691725030031204304273292938132599127402133470745819213047706793887965197191137237066440328777206799072470374264316425913530947082957300047105685634407092811630672103242089966046839626911122.7149)) SELECT b, p, bc_result, b^p AS power, b^p - bc_result AS diff FROM t",numeric_big.sql,SAME,,"[(Decimal('0.12'), Decimal('-2829.8369'), Decimal('58463948950011752465280493160293790845494328939320966633018493248607815580903065923369555885857984675501574162389726507612128133630191173383130639968378879506624785786843501848666498440326970769604109017960864573408272864266102690849952650095786874354625921641729880352858506454246180842452983243549491658464046163869265572232996388827878976066830374513768599285647145439771472435206769249126377164951470622827631950210853282324510655982757098065657709137845327135766013147354253426364240746381620690117663724329288646510198895137275207992825719846135857839292915100523542874885080351683587865157015032404901182924720371819942957083390475846809517968191151435281268695782594904484795360890092607679215675240583291240729468370895035823777914792823688291214492607109455017754453939895630226174304357121900605689015734289765672740769194115142607443713769825894380064727556869268488695795705030158832909348803019429370973064732712469794182891757241046263341655894972953512257981661670321890336672832647028099324621932563236459127918144141230217523147304565594514812518826936144181257723061181656522095236928347413997136815409159361412494284201481609684892562646522086577634100783077813105675590737823924220663206479031113753135119759722725207724879578900186075841393115040465401462266086907464970054073340036852442184414587772177753008511913377364966775792477387717262694468450099866775550614257191941835797445874557362115814601886902749237439492398087966544817154173072811937702110580330775581851211123491341435883319798273456296794954514173820352334127081705706502510709179711510240917772628308487366740741280043704807717608366220401933596364641284631036907635403895053036499618723044314773148779735006542501244942039455169872946018271985844759209768927953340447524637670938413827595013338859796135512187473850161303598087634723542727044978083220970836296653305188470017342167913572166172051819741354902582606590658382067039498769674611071582171914886494269818475850690414812481252963932223686078322390396586222238852602472958831686564971334200490182175112490433364675164900946902818404704835106260174052265784055642968397240262737313737007322288203637798365320295080314524864099419556398713380156353062937736280885716820226469419928595465390700629307079710611273715705695938635644841913194091407807776191951797748706106000922803167645881087385311847268311361092838264814899353459146959869764278464187826798546290981492648723002412475976344071283321798061003719251864595518596639432393032991023409676558943539937377229130132816883146259468718344018277257037013406135980469482324577407154032999045733141275895.3432'), Decimal('58463948950011752465280493160293790845494328939320966633018493248607815580903065923369555885857984675501574162389726507612128133630191173383130639968378879506624785786843501848666498440326970769604109017960864573408272864266102690849952650095786874354625921641729880352858506454246180842452983243549491658464046163869265572232996388827878976066830374513768599285647145439771472435206769249126377164951470622827631950210853282324510655982757098065657709137845327135766013147354253426364240746381620690117663724329288646510198895137275207992825719846135857839292915100523542874885080351683587865157015032404901182924720371819942957083390475846809517968191151435281268695782594904484795360890092607679215675240583291240729468370895035823777914792823688291214492607109455017754453939895630226174304357121900605689015734289765672740769194115142607443713769825894380064727556869268488695795705030158832909348803019429370973064732712469794182891757241046263341655894972953512257981661670321890336672832647028099324621932563236459127918144141230217523147304565594514812518826936144181257723061181656522095236928347413997136815409159361412494284201481609684892562646522086577634100783077813105675590737823924220663206479031113753135119759722725207724879578900186075841393115040465401462266086907464970054073340036852442184414587772177753008511913377364966775792477387717262694468450099866775550614257191941835797445874557362115814601886902749237439492398087966544817154173072811937702110580330775581851211123491341435883319798273456296794954514173820352334127081705706502510709179711510240917772628308487366740741280043704807717608366220401933596364641284631036907635403895053036499618723044314773148779735006542501244942039455169872946018271985844759209768927953340447524637670938413827595013338859796135512187473850161303598087634723542727044978083220970836296653305188470017342167913572166172051819741354902582606590658382067039498769674611071582171914886494269818475850690414812481252963932223686078322390396586222238852602472958831686564971334200490182175112490433364675164900946902818404704835106260174052265784055642968397240262737313737007322288203637798365320295080314524864099419556398713380156353062937736280885716820226469419928595465390700629307079710611273715705695938635644841913194091407807776191951797748706106000922803167645881087385311847268311361092838264814899353459146959869764278464187826798546290981492648723002412475976344071283321798061003719251864595518596639432393032991023409676558943539937377229130132816883146259468718344018277257037013406135980469482324577407154032999045733141275895.3432'), Decimal('0.0000')), (Decimal('1.2'), Decimal('32908.8896'), Decimal('58463467728170833376633133695001863276259293590926929026251227859007891876739460057725441400966420577009060860805883032969522911803372870882799865787473726926215148161529632590083389287080925059682489116446754279752928005457087175157581627230586554364417068189211136840990661174760199073702207450133797324318403866058202372178813998850887986769280847189341565507156189065295823921162851958925352114220880236114784962150135485415106748467247897246441194126125699204912883449386043559785865023459356275014504597646990160571664166410683323036984805434677654413174177920726210827006973855410386789516533036723888687725436216478665958434776205940192130053647653715221076841771578099896259902368829351569726536927952661429685419815305418450230567773264738536471211804481206474781470237730069753206249915908804615495060673071058534441654604668770343616386612119048579369195201590008082689834456232255266932976831478404670192731621439902738547169253818323045451045749609624500171633897705543164388470746657118050314064066768449450440405619135824055131398727045420324382226572368236570500391463795989258779677208133531636928003546809249007993065200108076924439703799231711400266122025052209803513232429907231051873161206025860851056337427740362763618748092029386371493898291580557004812947013231371383576580415676519066503391905962989205397824064923920045371823949776899815750413244195402085917098964452866825666226141169411712884994564949174271056284898570445214367063763956186792886147126466387576513166370247576466566827375268334148320298849218878848928271566491769458471357076035396330179659440244425914213309776100351793665960978678576150833311810944729586040624059867137538839913141142139636023129691775489034134511666020819676247950267220131499463010350308195762769192775344260909521732256844149916046793599150786757764962585268686580124987490115873389726527572428003433405659445349155536369077209682951123806333170190998931670309088422483075609203671527331975811507450670132060984691061148836994322505371265263690017938762760088575875666254883673433331627055180154954694693433502522592907190906966067656027637884202418119121728966267936832338377284832958974299187166554160783467156478554899314000348357280306042140481751668215838656488457943830180819301102535170705017482946779698265096226184239631924271857062033454725540956591929965181603262502135610768915716020374362368495244256420143645126927013882334008435586481691725030031204304273292938132599127402133470745819213047706793887965197191137237066440328777206799072470374264316425913530947082957300047105685634407092811630672103242089966046839626911122.7149'), Decimal('58463467728170833376633133695001863276259293590926929026251227859007891876739460057725441400966420577009060860805883032969522911803372870882799865787473726926215148161529632590083389287080925059682489116446754279752928005457087175157581627230586554364417068189211136840990661174760199073702207450133797324318403866058202372178813998850887986769280847189341565507156189065295823921162851958925352114220880236114784962150135485415106748467247897246441194126125699204912883449386043559785865023459356275014504597646990160571664166410683323036984805434677654413174177920726210827006973855410386789516533036723888687725436216478665958434776205940192130053647653715221076841771578099896259902368829351569726536927952661429685419815305418450230567773264738536471211804481206474781470237730069753206249915908804615495060673071058534441654604668770343616386612119048579369195201590008082689834456232255266932976831478404670192731621439902738547169253818323045451045749609624500171633897705543164388470746657118050314064066768449450440405619135824055131398727045420324382226572368236570500391463795989258779677208133531636928003546809249007993065200108076924439703799231711400266122025052209803513232429907231051873161206025860851056337427740362763618748092029386371493898291580557004812947013231371383576580415676519066503391905962989205397824064923920045371823949776899815750413244195402085917098964452866825666226141169411712884994564949174271056284898570445214367063763956186792886147126466387576513166370247576466566827375268334148320298849218878848928271566491769458471357076035396330179659440244425914213309776100351793665960978678576150833311810944729586040624059867137538839913141142139636023129691775489034134511666020819676247950267220131499463010350308195762769192775344260909521732256844149916046793599150786757764962585268686580124987490115873389726527572428003433405659445349155536369077209682951123806333170190998931670309088422483075609203671527331975811507450670132060984691061148836994322505371265263690017938762760088575875666254883673433331627055180154954694693433502522592907190906966067656027637884202418119121728966267936832338377284832958974299187166554160783467156478554899314000348357280306042140481751668215838656488457943830180819301102535170705017482946779698265096226184239631924271857062033454725540956591929965181603262502135610768915716020374362368495244256420143645126927013882334008435586481691725030031204304273292938132599127402133470745819213047706793887965197191137237066440328777206799072470374264316425913530947082957300047105685634407092811630672103242089966046839626911122.7149'), Decimal('0.0000'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES (-20.29837, .000000001529431101152222), (-19.29837, .000000004157424770142192), (-18.29837, .00000001130105220586304), (-17.29837, .00000003071944485366452), (-16.29837, .00000008350410872606600), (-15.29837, .0000002269877013517336), (-14.29837, .0000006170165438681061), (-13.29837, .000001677224859055276), (-12.29837, .000004559169856609741), (-11.29837, .00001239310857408049), (-10.29837, .00003368796183504298), (-9.29837, .00009157337449401917), (-8.29837, .0002489222398577673), (-7.29837, .0006766408013046928), (-6.29837, .001839300394580514), (-5.29837, .004999736839665763), (-4.29837, .01359069379834070), (-3.29837, .03694333598818056), (-2.29837, .1004223988993283), (-1.29837, .2729763820983097), (0.29837, 1.3476603299656679), (1.29837, 3.6633205858807959), (2.29837, 9.9579377804197108), (3.29837, 27.068481317440698), (4.29837, 73.579760889182206), (5.29837, 200.01052696742555), (6.29837, 543.68498095607070), (7.29837, 1477.8890041389891), (8.29837, 4017.3188244304487), (9.29837, 10920.204759575742), (10.29837, 29684.194161006717), (11.29837, 80690.005580314652), (12.29837, 219338.17590722828), (13.29837, 596222.97785597218), (14.29837, 1620702.0864156289), (15.29837, 4405525.0308492653), (16.29837, 11975458.636179032), (17.29837, 32552671.598188404), (18.29837, 88487335.673150406), (19.29837, 240533516.60908059), (20.29837, 653837887.33381570)) SELECT x, bc_result, exp(x), exp(x)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[(Decimal('-20.29837'), Decimal('1.529431101152222E-9'), Decimal('1.529431101152222E-9'), Decimal('0E-24')), (Decimal('-19.29837'), Decimal('4.157424770142192E-9'), Decimal('4.157424770142192E-9'), Decimal('0E-24')), (Decimal('-18.29837'), Decimal('1.130105220586304E-8'), Decimal('1.130105220586304E-8'), Decimal('0E-23')), (Decimal('-17.29837'), Decimal('3.071944485366452E-8'), Decimal('3.071944485366452E-8'), Decimal('0E-23')), (Decimal('-16.29837'), Decimal('8.350410872606600E-8'), Decimal('8.350410872606600E-8'), Decimal('0E-23')), (Decimal('-15.29837'), Decimal('2.269877013517336E-7'), Decimal('2.269877013517336E-7'), Decimal('0E-22')), (Decimal('-14.29837'), Decimal('6.170165438681061E-7'), Decimal('6.170165438681061E-7'), Decimal('0E-22')), (Decimal('-13.29837'), Decimal('0.000001677224859055276'), Decimal('0.000001677224859055276'), Decimal('0E-21')), (Decimal('-12.29837'), Decimal('0.000004559169856609741'), Decimal('0.000004559169856609741'), Decimal('0E-21')), (Decimal('-11.29837'), Decimal('0.00001239310857408049'), Decimal('0.00001239310857408049'), Decimal('0E-20')), (Decimal('-10.29837'), Decimal('0.00003368796183504298'), Decimal('0.00003368796183504298'), Decimal('0E-20')), (Decimal('-9.29837'), Decimal('0.00009157337449401917'), Decimal('0.00009157337449401917'), Decimal('0E-20')), (Decimal('-8.29837'), Decimal('0.0002489222398577673'), Decimal('0.0002489222398577673'), Decimal('0E-19')), (Decimal('-7.29837'), Decimal('0.0006766408013046928'), Decimal('0.0006766408013046928'), Decimal('0E-19')), (Decimal('-6.29837'), Decimal('0.001839300394580514'), Decimal('0.001839300394580514'), Decimal('0E-18')), (Decimal('-5.29837'), Decimal('0.004999736839665763'), Decimal('0.004999736839665763'), Decimal('0E-18')), (Decimal('-4.29837'), Decimal('0.01359069379834070'), Decimal('0.01359069379834070'), Decimal('0E-17')), (Decimal('-3.29837'), Decimal('0.03694333598818056'), Decimal('0.03694333598818056'), Decimal('0E-17')), (Decimal('-2.29837'), Decimal('0.1004223988993283'), Decimal('0.1004223988993283'), Decimal('0E-16')), (Decimal('-1.29837'), Decimal('0.2729763820983097'), Decimal('0.2729763820983097'), Decimal('0E-16')), (Decimal('0.29837'), Decimal('1.3476603299656679'), Decimal('1.3476603299656679'), Decimal('0E-16')), (Decimal('1.29837'), Decimal('3.6633205858807959'), Decimal('3.6633205858807959'), Decimal('0E-16')), (Decimal('2.29837'), Decimal('9.9579377804197108'), Decimal('9.9579377804197108'), Decimal('0E-16')), (Decimal('3.29837'), Decimal('27.068481317440698'), Decimal('27.068481317440698'), Decimal('0E-15')), (Decimal('4.29837'), Decimal('73.579760889182206'), Decimal('73.579760889182206'), Decimal('0E-15')), (Decimal('5.29837'), Decimal('200.01052696742555'), Decimal('200.01052696742555'), Decimal('0E-14')), (Decimal('6.29837'), Decimal('543.68498095607070'), Decimal('543.68498095607070'), Decimal('0E-14')), (Decimal('7.29837'), Decimal('1477.8890041389891'), Decimal('1477.8890041389891'), Decimal('0E-13')), (Decimal('8.29837'), Decimal('4017.3188244304487'), Decimal('4017.3188244304487'), Decimal('0E-13')), (Decimal('9.29837'), Decimal('10920.204759575742'), Decimal('10920.204759575742'), Decimal('0E-12')), (Decimal('10.29837'), Decimal('29684.194161006717'), Decimal('29684.194161006717'), Decimal('0E-12')), (Decimal('11.29837'), Decimal('80690.005580314652'), Decimal('80690.005580314652'), Decimal('0E-12')), (Decimal('12.29837'), Decimal('219338.17590722828'), Decimal('219338.17590722828'), Decimal('0E-11')), (Decimal('13.29837'), Decimal('596222.97785597218'), Decimal('596222.97785597218'), Decimal('0E-11')), (Decimal('14.29837'), Decimal('1620702.0864156289'), Decimal('1620702.0864156289'), Decimal('0E-10')), (Decimal('15.29837'), Decimal('4405525.0308492653'), Decimal('4405525.0308492653'), Decimal('0E-10')), (Decimal('16.29837'), Decimal('11975458.636179032'), Decimal('11975458.636179032'), Decimal('0E-9')), (Decimal('17.29837'), Decimal('32552671.598188404'), Decimal('32552671.598188404'), Decimal('0E-9')), (Decimal('18.29837'), Decimal('88487335.673150406'), Decimal('88487335.673150406'), Decimal('0E-9')), (Decimal('19.29837'), Decimal('240533516.60908059'), Decimal('240533516.60908059'), Decimal('0E-8')), (Decimal('20.29837'), Decimal('653837887.33381570'), Decimal('653837887.33381570'), Decimal('0E-8'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES ('1.0e-1', -2.3025850929940457), ('1.0e-2', -4.6051701859880914), ('1.0e-3', -6.9077552789821371), ('1.0e-4', -9.2103403719761827), ('1.0e-5', -11.512925464970228), ('1.0e-6', -13.815510557964274), ('1.0e-7', -16.118095650958320), ('1.0e-8', -18.420680743952365), ('1.0e-9', -20.723265836946411), ('1.0e-10', -23.025850929940457), ('1.0e-11', -25.328436022934503), ('1.0e-12', -27.631021115928548), ('1.0e-13', -29.933606208922594), ('1.0e-14', -32.236191301916640), ('1.0e-15', -34.5387763949106853), ('1.0e-16', -36.84136148790473094), ('1.0e-17', -39.143946580898776628), ('1.0e-18', -41.4465316738928223123), ('1.0e-19', -43.74911676688686799634), ('1.0e-20', -46.051701859880913680360), ('1.0e-21', -48.3542869528749593643778), ('1.0e-22', -50.65687204586900504839581), ('1.0e-23', -52.959457138863050732413803), ('1.0e-24', -55.2620422318570964164317949), ('1.0e-25', -57.56462732485114210044978637), ('1.0e-26', -59.867212417845187784467777822), ('1.0e-27', -62.1697975108392334684857692765), ('1.0e-28', -64.47238260383327915250376073116), ('1.0e-29', -66.774967696827324836521752185847), ('1.0e-30', -69.0775527898213705205397436405309), ('1.0e-31', -71.38013788281541620455773509521529), ('1.0e-32', -73.682722975809461888575726549899655), ('1.0e-33', -75.9853080688035075725937180045840189), ('1.0e-34', -78.28789316179755325661170945926838306), ('1.0e-35', -80.590478254791598940629700913952747266), ('1.0e-36', -82.8930633477856446246476923686371114736), ('1.0e-37', -85.19564844077969030866568382332147568124), ('1.0e-38', -87.498233533773735992683675278005839888842), ('1.0e-39', -89.8008186267677816767016667326902040964430), ('1.0e-40', -92.10340371976182736071965818737456830404406)) SELECT x, bc_result, ln(x::numeric), ln(x::numeric)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[('1.0e-1', Decimal('-2.3025850929940457'), Decimal('-2.3025850929940457'), Decimal('0E-16')), ('1.0e-2', Decimal('-4.6051701859880914'), Decimal('-4.6051701859880914'), Decimal('0E-16')), ('1.0e-3', Decimal('-6.9077552789821371'), Decimal('-6.9077552789821371'), Decimal('0E-16')), ('1.0e-4', Decimal('-9.2103403719761827'), Decimal('-9.2103403719761827'), Decimal('0E-16')), ('1.0e-5', Decimal('-11.512925464970228'), Decimal('-11.512925464970228'), Decimal('0E-15')), ('1.0e-6', Decimal('-13.815510557964274'), Decimal('-13.815510557964274'), Decimal('0E-15')), ('1.0e-7', Decimal('-16.118095650958320'), Decimal('-16.118095650958320'), Decimal('0E-15')), ('1.0e-8', Decimal('-18.420680743952365'), Decimal('-18.420680743952365'), Decimal('0E-15')), ('1.0e-9', Decimal('-20.723265836946411'), Decimal('-20.723265836946411'), Decimal('0E-15')), ('1.0e-10', Decimal('-23.025850929940457'), Decimal('-23.025850929940457'), Decimal('0E-15')), ('1.0e-11', Decimal('-25.328436022934503'), Decimal('-25.328436022934503'), Decimal('0E-15')), ('1.0e-12', Decimal('-27.631021115928548'), Decimal('-27.631021115928548'), Decimal('0E-15')), ('1.0e-13', Decimal('-29.933606208922594'), Decimal('-29.933606208922594'), Decimal('0E-15')), ('1.0e-14', Decimal('-32.236191301916640'), Decimal('-32.236191301916640'), Decimal('0E-15')), ('1.0e-15', Decimal('-34.5387763949106853'), Decimal('-34.5387763949106853'), Decimal('0E-16')), ('1.0e-16', Decimal('-36.84136148790473094'), Decimal('-36.84136148790473094'), Decimal('0E-17')), ('1.0e-17', Decimal('-39.143946580898776628'), Decimal('-39.143946580898776628'), Decimal('0E-18')), ('1.0e-18', Decimal('-41.4465316738928223123'), Decimal('-41.4465316738928223123'), Decimal('0E-19')), ('1.0e-19', Decimal('-43.74911676688686799634'), Decimal('-43.74911676688686799634'), Decimal('0E-20')), ('1.0e-20', Decimal('-46.051701859880913680360'), Decimal('-46.051701859880913680360'), Decimal('0E-21')), ('1.0e-21', Decimal('-48.3542869528749593643778'), Decimal('-48.3542869528749593643778'), Decimal('0E-22')), ('1.0e-22', Decimal('-50.65687204586900504839581'), Decimal('-50.65687204586900504839581'), Decimal('0E-23')), ('1.0e-23', Decimal('-52.959457138863050732413803'), Decimal('-52.959457138863050732413803'), Decimal('0E-24')), ('1.0e-24', Decimal('-55.2620422318570964164317949'), Decimal('-55.2620422318570964164317949'), Decimal('0E-25')), ('1.0e-25', Decimal('-57.56462732485114210044978637'), Decimal('-57.56462732485114210044978637'), Decimal('0E-26')), ('1.0e-26', Decimal('-59.867212417845187784467777822'), Decimal('-59.867212417845187784467777822'), Decimal('0E-27')), ('1.0e-27', Decimal('-62.1697975108392334684857692765'), Decimal('-62.1697975108392334684857692765'), Decimal('0E-28')), ('1.0e-28', Decimal('-64.47238260383327915250376073116'), Decimal('-64.47238260383327915250376073116'), Decimal('0E-29')), ('1.0e-29', Decimal('-66.774967696827324836521752185847'), Decimal('-66.774967696827324836521752185847'), Decimal('0E-30')), ('1.0e-30', Decimal('-69.0775527898213705205397436405309'), Decimal('-69.0775527898213705205397436405309'), Decimal('0E-31')), ('1.0e-31', Decimal('-71.38013788281541620455773509521529'), Decimal('-71.38013788281541620455773509521529'), Decimal('0E-32')), ('1.0e-32', Decimal('-73.682722975809461888575726549899655'), Decimal('-73.682722975809461888575726549899655'), Decimal('0E-33')), ('1.0e-33', Decimal('-75.9853080688035075725937180045840189'), Decimal('-75.9853080688035075725937180045840189'), Decimal('0E-34')), ('1.0e-34', Decimal('-78.28789316179755325661170945926838306'), Decimal('-78.28789316179755325661170945926838306'), Decimal('0E-35')), ('1.0e-35', Decimal('-80.590478254791598940629700913952747266'), Decimal('-80.590478254791598940629700913952747266'), Decimal('0E-36')), ('1.0e-36', Decimal('-82.8930633477856446246476923686371114736'), Decimal('-82.8930633477856446246476923686371114736'), Decimal('0E-37')), ('1.0e-37', Decimal('-85.19564844077969030866568382332147568124'), Decimal('-85.19564844077969030866568382332147568124'), Decimal('0E-38')), ('1.0e-38', Decimal('-87.498233533773735992683675278005839888842'), Decimal('-87.498233533773735992683675278005839888842'), Decimal('0E-39')), ('1.0e-39', Decimal('-89.8008186267677816767016667326902040964430'), Decimal('-89.8008186267677816767016667326902040964430'), Decimal('0E-40')), ('1.0e-40', Decimal('-92.10340371976182736071965818737456830404406'), Decimal('-92.10340371976182736071965818737456830404406'), Decimal('0E-41'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES ('1.0e-1', -.10536051565782630), ('1.0e-2', -.010050335853501441), ('1.0e-3', -.0010005003335835335), ('1.0e-4', -.00010000500033335834), ('1.0e-5', -.000010000050000333336), ('1.0e-6', -.0000010000005000003333), ('1.0e-7', -.00000010000000500000033), ('1.0e-8', -.000000010000000050000000), ('1.0e-9', -.0000000010000000005000000), ('1.0e-10', -.00000000010000000000500000), ('1.0e-11', -.000000000010000000000050000), ('1.0e-12', -.0000000000010000000000005000), ('1.0e-13', -.00000000000010000000000000500), ('1.0e-14', -.000000000000010000000000000050), ('1.0e-15', -.0000000000000010000000000000005), ('1.0e-16', -.00000000000000010000000000000001), ('1.0e-17', -.000000000000000010000000000000000), ('1.0e-18', -.0000000000000000010000000000000000), ('1.0e-19', -.00000000000000000010000000000000000), ('1.0e-20', -.000000000000000000010000000000000000), ('1.0e-21', -.0000000000000000000010000000000000000), ('1.0e-22', -.00000000000000000000010000000000000000), ('1.0e-23', -.000000000000000000000010000000000000000), ('1.0e-24', -.0000000000000000000000010000000000000000), ('1.0e-25', -.00000000000000000000000010000000000000000), ('1.0e-26', -.000000000000000000000000010000000000000000), ('1.0e-27', -.0000000000000000000000000010000000000000000), ('1.0e-28', -.00000000000000000000000000010000000000000000), ('1.0e-29', -.000000000000000000000000000010000000000000000), ('1.0e-30', -.0000000000000000000000000000010000000000000000), ('1.0e-31', -.00000000000000000000000000000010000000000000000), ('1.0e-32', -.000000000000000000000000000000010000000000000000), ('1.0e-33', -.0000000000000000000000000000000010000000000000000), ('1.0e-34', -.00000000000000000000000000000000010000000000000000), ('1.0e-35', -.000000000000000000000000000000000010000000000000000), ('1.0e-36', -.0000000000000000000000000000000000010000000000000000), ('1.0e-37', -.00000000000000000000000000000000000010000000000000000), ('1.0e-38', -.000000000000000000000000000000000000010000000000000000), ('1.0e-39', -.0000000000000000000000000000000000000010000000000000000), ('1.0e-40', -.00000000000000000000000000000000000000010000000000000000)) SELECT '1-'||x, bc_result, ln(1.0-x::numeric), ln(1.0-x::numeric)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[('1-1.0e-1', Decimal('-0.10536051565782630'), Decimal('-0.10536051565782630'), Decimal('0E-17')), ('1-1.0e-2', Decimal('-0.010050335853501441'), Decimal('-0.010050335853501441'), Decimal('0E-18')), ('1-1.0e-3', Decimal('-0.0010005003335835335'), Decimal('-0.0010005003335835335'), Decimal('0E-19')), ('1-1.0e-4', Decimal('-0.00010000500033335834'), Decimal('-0.00010000500033335834'), Decimal('0E-20')), ('1-1.0e-5', Decimal('-0.000010000050000333336'), Decimal('-0.000010000050000333336'), Decimal('0E-21')), ('1-1.0e-6', Decimal('-0.0000010000005000003333'), Decimal('-0.0000010000005000003333'), Decimal('0E-22')), ('1-1.0e-7', Decimal('-1.0000000500000033E-7'), Decimal('-1.0000000500000033E-7'), Decimal('0E-23')), ('1-1.0e-8', Decimal('-1.0000000050000000E-8'), Decimal('-1.0000000050000000E-8'), Decimal('0E-24')), ('1-1.0e-9', Decimal('-1.0000000005000000E-9'), Decimal('-1.0000000005000000E-9'), Decimal('0E-25')), ('1-1.0e-10', Decimal('-1.0000000000500000E-10'), Decimal('-1.0000000000500000E-10'), Decimal('0E-26')), ('1-1.0e-11', Decimal('-1.0000000000050000E-11'), Decimal('-1.0000000000050000E-11'), Decimal('0E-27')), ('1-1.0e-12', Decimal('-1.0000000000005000E-12'), Decimal('-1.0000000000005000E-12'), Decimal('0E-28')), ('1-1.0e-13', Decimal('-1.0000000000000500E-13'), Decimal('-1.0000000000000500E-13'), Decimal('0E-29')), ('1-1.0e-14', Decimal('-1.0000000000000050E-14'), Decimal('-1.0000000000000050E-14'), Decimal('0E-30')), ('1-1.0e-15', Decimal('-1.0000000000000005E-15'), Decimal('-1.0000000000000005E-15'), Decimal('0E-31')), ('1-1.0e-16', Decimal('-1.0000000000000001E-16'), Decimal('-1.0000000000000001E-16'), Decimal('0E-32')), ('1-1.0e-17', Decimal('-1.0000000000000000E-17'), Decimal('-1.0000000000000000E-17'), Decimal('0E-33')), ('1-1.0e-18', Decimal('-1.0000000000000000E-18'), Decimal('-1.0000000000000000E-18'), Decimal('0E-34')), ('1-1.0e-19', Decimal('-1.0000000000000000E-19'), Decimal('-1.0000000000000000E-19'), Decimal('0E-35')), ('1-1.0e-20', Decimal('-1.0000000000000000E-20'), Decimal('-1.0000000000000000E-20'), Decimal('0E-36')), ('1-1.0e-21', Decimal('-1.0000000000000000E-21'), Decimal('-1.0000000000000000E-21'), Decimal('0E-37')), ('1-1.0e-22', Decimal('-1.0000000000000000E-22'), Decimal('-1.0000000000000000E-22'), Decimal('0E-38')), ('1-1.0e-23', Decimal('-1.0000000000000000E-23'), Decimal('-1.0000000000000000E-23'), Decimal('0E-39')), ('1-1.0e-24', Decimal('-1.0000000000000000E-24'), Decimal('-1.0000000000000000E-24'), Decimal('0E-40')), ('1-1.0e-25', Decimal('-1.0000000000000000E-25'), Decimal('-1.0000000000000000E-25'), Decimal('0E-41')), ('1-1.0e-26', Decimal('-1.0000000000000000E-26'), Decimal('-1.0000000000000000E-26'), Decimal('0E-42')), ('1-1.0e-27', Decimal('-1.0000000000000000E-27'), Decimal('-1.0000000000000000E-27'), Decimal('0E-43')), ('1-1.0e-28', Decimal('-1.0000000000000000E-28'), Decimal('-1.0000000000000000E-28'), Decimal('0E-44')), ('1-1.0e-29', Decimal('-1.0000000000000000E-29'), Decimal('-1.0000000000000000E-29'), Decimal('0E-45')), ('1-1.0e-30', Decimal('-1.0000000000000000E-30'), Decimal('-1.0000000000000000E-30'), Decimal('0E-46')), ('1-1.0e-31', Decimal('-1.0000000000000000E-31'), Decimal('-1.0000000000000000E-31'), Decimal('0E-47')), ('1-1.0e-32', Decimal('-1.0000000000000000E-32'), Decimal('-1.0000000000000000E-32'), Decimal('0E-48')), ('1-1.0e-33', Decimal('-1.0000000000000000E-33'), Decimal('-1.0000000000000000E-33'), Decimal('0E-49')), ('1-1.0e-34', Decimal('-1.0000000000000000E-34'), Decimal('-1.0000000000000000E-34'), Decimal('0E-50')), ('1-1.0e-35', Decimal('-1.0000000000000000E-35'), Decimal('-1.0000000000000000E-35'), Decimal('0E-51')), ('1-1.0e-36', Decimal('-1.0000000000000000E-36'), Decimal('-1.0000000000000000E-36'), Decimal('0E-52')), ('1-1.0e-37', Decimal('-1.0000000000000000E-37'), Decimal('-1.0000000000000000E-37'), Decimal('0E-53')), ('1-1.0e-38', Decimal('-1.0000000000000000E-38'), Decimal('-1.0000000000000000E-38'), Decimal('0E-54')), ('1-1.0e-39', Decimal('-1.0000000000000000E-39'), Decimal('-1.0000000000000000E-39'), Decimal('0E-55')), ('1-1.0e-40', Decimal('-1.0000000000000000E-40'), Decimal('-1.0000000000000000E-40'), Decimal('0E-56'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES ('1.0e-1', .09531017980432486), ('1.0e-2', .009950330853168083), ('1.0e-3', .0009995003330835332), ('1.0e-4', .00009999500033330834), ('1.0e-5', .000009999950000333331), ('1.0e-6', .0000009999995000003333), ('1.0e-7', .00000009999999500000033), ('1.0e-8', .000000009999999950000000), ('1.0e-9', .0000000009999999995000000), ('1.0e-10', .00000000009999999999500000), ('1.0e-11', .000000000009999999999950000), ('1.0e-12', .0000000000009999999999995000), ('1.0e-13', .00000000000009999999999999500), ('1.0e-14', .000000000000009999999999999950), ('1.0e-15', .0000000000000009999999999999995), ('1.0e-16', .00000000000000010000000000000000), ('1.0e-17', .000000000000000010000000000000000), ('1.0e-18', .0000000000000000010000000000000000), ('1.0e-19', .00000000000000000010000000000000000), ('1.0e-20', .000000000000000000010000000000000000), ('1.0e-21', .0000000000000000000010000000000000000), ('1.0e-22', .00000000000000000000010000000000000000), ('1.0e-23', .000000000000000000000010000000000000000), ('1.0e-24', .0000000000000000000000010000000000000000), ('1.0e-25', .00000000000000000000000010000000000000000), ('1.0e-26', .000000000000000000000000010000000000000000), ('1.0e-27', .0000000000000000000000000010000000000000000), ('1.0e-28', .00000000000000000000000000010000000000000000), ('1.0e-29', .000000000000000000000000000010000000000000000), ('1.0e-30', .0000000000000000000000000000010000000000000000), ('1.0e-31', .00000000000000000000000000000010000000000000000), ('1.0e-32', .000000000000000000000000000000010000000000000000), ('1.0e-33', .0000000000000000000000000000000010000000000000000), ('1.0e-34', .00000000000000000000000000000000010000000000000000), ('1.0e-35', .000000000000000000000000000000000010000000000000000), ('1.0e-36', .0000000000000000000000000000000000010000000000000000), ('1.0e-37', .00000000000000000000000000000000000010000000000000000), ('1.0e-38', .000000000000000000000000000000000000010000000000000000), ('1.0e-39', .0000000000000000000000000000000000000010000000000000000), ('1.0e-40', .00000000000000000000000000000000000000010000000000000000)) SELECT '1+'||x, bc_result, ln(1.0+x::numeric), ln(1.0+x::numeric)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[('1+1.0e-1', Decimal('0.09531017980432486'), Decimal('0.09531017980432486'), Decimal('0E-17')), ('1+1.0e-2', Decimal('0.009950330853168083'), Decimal('0.009950330853168083'), Decimal('0E-18')), ('1+1.0e-3', Decimal('0.0009995003330835332'), Decimal('0.0009995003330835332'), Decimal('0E-19')), ('1+1.0e-4', Decimal('0.00009999500033330834'), Decimal('0.00009999500033330834'), Decimal('0E-20')), ('1+1.0e-5', Decimal('0.000009999950000333331'), Decimal('0.000009999950000333331'), Decimal('0E-21')), ('1+1.0e-6', Decimal('9.999995000003333E-7'), Decimal('9.999995000003333E-7'), Decimal('0E-22')), ('1+1.0e-7', Decimal('9.999999500000033E-8'), Decimal('9.999999500000033E-8'), Decimal('0E-23')), ('1+1.0e-8', Decimal('9.999999950000000E-9'), Decimal('9.999999950000000E-9'), Decimal('0E-24')), ('1+1.0e-9', Decimal('9.999999995000000E-10'), Decimal('9.999999995000000E-10'), Decimal('0E-25')), ('1+1.0e-10', Decimal('9.999999999500000E-11'), Decimal('9.999999999500000E-11'), Decimal('0E-26')), ('1+1.0e-11', Decimal('9.999999999950000E-12'), Decimal('9.999999999950000E-12'), Decimal('0E-27')), ('1+1.0e-12', Decimal('9.999999999995000E-13'), Decimal('9.999999999995000E-13'), Decimal('0E-28')), ('1+1.0e-13', Decimal('9.999999999999500E-14'), Decimal('9.999999999999500E-14'), Decimal('0E-29')), ('1+1.0e-14', Decimal('9.999999999999950E-15'), Decimal('9.999999999999950E-15'), Decimal('0E-30')), ('1+1.0e-15', Decimal('9.999999999999995E-16'), Decimal('9.999999999999995E-16'), Decimal('0E-31')), ('1+1.0e-16', Decimal('1.0000000000000000E-16'), Decimal('1.0000000000000000E-16'), Decimal('0E-32')), ('1+1.0e-17', Decimal('1.0000000000000000E-17'), Decimal('1.0000000000000000E-17'), Decimal('0E-33')), ('1+1.0e-18', Decimal('1.0000000000000000E-18'), Decimal('1.0000000000000000E-18'), Decimal('0E-34')), ('1+1.0e-19', Decimal('1.0000000000000000E-19'), Decimal('1.0000000000000000E-19'), Decimal('0E-35')), ('1+1.0e-20', Decimal('1.0000000000000000E-20'), Decimal('1.0000000000000000E-20'), Decimal('0E-36')), ('1+1.0e-21', Decimal('1.0000000000000000E-21'), Decimal('1.0000000000000000E-21'), Decimal('0E-37')), ('1+1.0e-22', Decimal('1.0000000000000000E-22'), Decimal('1.0000000000000000E-22'), Decimal('0E-38')), ('1+1.0e-23', Decimal('1.0000000000000000E-23'), Decimal('1.0000000000000000E-23'), Decimal('0E-39')), ('1+1.0e-24', Decimal('1.0000000000000000E-24'), Decimal('1.0000000000000000E-24'), Decimal('0E-40')), ('1+1.0e-25', Decimal('1.0000000000000000E-25'), Decimal('1.0000000000000000E-25'), Decimal('0E-41')), ('1+1.0e-26', Decimal('1.0000000000000000E-26'), Decimal('1.0000000000000000E-26'), Decimal('0E-42')), ('1+1.0e-27', Decimal('1.0000000000000000E-27'), Decimal('1.0000000000000000E-27'), Decimal('0E-43')), ('1+1.0e-28', Decimal('1.0000000000000000E-28'), Decimal('1.0000000000000000E-28'), Decimal('0E-44')), ('1+1.0e-29', Decimal('1.0000000000000000E-29'), Decimal('1.0000000000000000E-29'), Decimal('0E-45')), ('1+1.0e-30', Decimal('1.0000000000000000E-30'), Decimal('1.0000000000000000E-30'), Decimal('0E-46')), ('1+1.0e-31', Decimal('1.0000000000000000E-31'), Decimal('1.0000000000000000E-31'), Decimal('0E-47')), ('1+1.0e-32', Decimal('1.0000000000000000E-32'), Decimal('1.0000000000000000E-32'), Decimal('0E-48')), ('1+1.0e-33', Decimal('1.0000000000000000E-33'), Decimal('1.0000000000000000E-33'), Decimal('0E-49')), ('1+1.0e-34', Decimal('1.0000000000000000E-34'), Decimal('1.0000000000000000E-34'), Decimal('0E-50')), ('1+1.0e-35', Decimal('1.0000000000000000E-35'), Decimal('1.0000000000000000E-35'), Decimal('0E-51')), ('1+1.0e-36', Decimal('1.0000000000000000E-36'), Decimal('1.0000000000000000E-36'), Decimal('0E-52')), ('1+1.0e-37', Decimal('1.0000000000000000E-37'), Decimal('1.0000000000000000E-37'), Decimal('0E-53')), ('1+1.0e-38', Decimal('1.0000000000000000E-38'), Decimal('1.0000000000000000E-38'), Decimal('0E-54')), ('1+1.0e-39', Decimal('1.0000000000000000E-39'), Decimal('1.0000000000000000E-39'), Decimal('0E-55')), ('1+1.0e-40', Decimal('1.0000000000000000E-40'), Decimal('1.0000000000000000E-40'), Decimal('0E-56'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES ('1.0e1', 2.3025850929940457), ('1.0e2', 4.6051701859880914), ('1.0e3', 6.9077552789821371), ('1.0e4', 9.2103403719761827), ('1.0e5', 11.512925464970228), ('1.0e6', 13.815510557964274), ('1.0e7', 16.118095650958320), ('1.0e8', 18.420680743952365), ('1.0e9', 20.723265836946411), ('1.0e10', 23.025850929940457), ('1.0e11', 25.328436022934503), ('1.0e12', 27.631021115928548), ('1.0e13', 29.933606208922594), ('1.0e14', 32.236191301916640), ('1.0e15', 34.538776394910685), ('1.0e16', 36.841361487904731), ('1.0e17', 39.143946580898777), ('1.0e18', 41.446531673892822), ('1.0e19', 43.749116766886868), ('1.0e20', 46.051701859880914), ('1.0e21', 48.354286952874959), ('1.0e22', 50.656872045869005), ('1.0e23', 52.959457138863051), ('1.0e24', 55.262042231857096), ('1.0e25', 57.564627324851142), ('1.0e26', 59.867212417845188), ('1.0e27', 62.169797510839233), ('1.0e28', 64.472382603833279), ('1.0e29', 66.774967696827325), ('1.0e30', 69.077552789821371), ('1.0e31', 71.380137882815416), ('1.0e32', 73.682722975809462), ('1.0e33', 75.985308068803508), ('1.0e34', 78.287893161797553), ('1.0e35', 80.590478254791599), ('1.0e36', 82.893063347785645), ('1.0e37', 85.195648440779690), ('1.0e38', 87.498233533773736), ('1.0e39', 89.800818626767782), ('1.0e40', 92.103403719761827)) SELECT x, bc_result, ln(x::numeric), ln(x::numeric)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[('1.0e1', Decimal('2.3025850929940457'), Decimal('2.3025850929940457'), Decimal('0E-16')), ('1.0e2', Decimal('4.6051701859880914'), Decimal('4.6051701859880914'), Decimal('0E-16')), ('1.0e3', Decimal('6.9077552789821371'), Decimal('6.9077552789821371'), Decimal('0E-16')), ('1.0e4', Decimal('9.2103403719761827'), Decimal('9.2103403719761827'), Decimal('0E-16')), ('1.0e5', Decimal('11.512925464970228'), Decimal('11.512925464970228'), Decimal('0E-15')), ('1.0e6', Decimal('13.815510557964274'), Decimal('13.815510557964274'), Decimal('0E-15')), ('1.0e7', Decimal('16.118095650958320'), Decimal('16.118095650958320'), Decimal('0E-15')), ('1.0e8', Decimal('18.420680743952365'), Decimal('18.420680743952365'), Decimal('0E-15')), ('1.0e9', Decimal('20.723265836946411'), Decimal('20.723265836946411'), Decimal('0E-15')), ('1.0e10', Decimal('23.025850929940457'), Decimal('23.025850929940457'), Decimal('0E-15')), ('1.0e11', Decimal('25.328436022934503'), Decimal('25.328436022934503'), Decimal('0E-15')), ('1.0e12', Decimal('27.631021115928548'), Decimal('27.631021115928548'), Decimal('0E-15')), ('1.0e13', Decimal('29.933606208922594'), Decimal('29.933606208922594'), Decimal('0E-15')), ('1.0e14', Decimal('32.236191301916640'), Decimal('32.236191301916640'), Decimal('0E-15')), ('1.0e15', Decimal('34.538776394910685'), Decimal('34.538776394910685'), Decimal('0E-15')), ('1.0e16', Decimal('36.841361487904731'), Decimal('36.841361487904731'), Decimal('0E-15')), ('1.0e17', Decimal('39.143946580898777'), Decimal('39.143946580898777'), Decimal('0E-15')), ('1.0e18', Decimal('41.446531673892822'), Decimal('41.446531673892822'), Decimal('0E-15')), ('1.0e19', Decimal('43.749116766886868'), Decimal('43.749116766886868'), Decimal('0E-15')), ('1.0e20', Decimal('46.051701859880914'), Decimal('46.051701859880914'), Decimal('0E-15')), ('1.0e21', Decimal('48.354286952874959'), Decimal('48.354286952874959'), Decimal('0E-15')), ('1.0e22', Decimal('50.656872045869005'), Decimal('50.656872045869005'), Decimal('0E-15')), ('1.0e23', Decimal('52.959457138863051'), Decimal('52.959457138863051'), Decimal('0E-15')), ('1.0e24', Decimal('55.262042231857096'), Decimal('55.262042231857096'), Decimal('0E-15')), ('1.0e25', Decimal('57.564627324851142'), Decimal('57.564627324851142'), Decimal('0E-15')), ('1.0e26', Decimal('59.867212417845188'), Decimal('59.867212417845188'), Decimal('0E-15')), ('1.0e27', Decimal('62.169797510839233'), Decimal('62.169797510839233'), Decimal('0E-15')), ('1.0e28', Decimal('64.472382603833279'), Decimal('64.472382603833279'), Decimal('0E-15')), ('1.0e29', Decimal('66.774967696827325'), Decimal('66.774967696827325'), Decimal('0E-15')), ('1.0e30', Decimal('69.077552789821371'), Decimal('69.077552789821371'), Decimal('0E-15')), ('1.0e31', Decimal('71.380137882815416'), Decimal('71.380137882815416'), Decimal('0E-15')), ('1.0e32', Decimal('73.682722975809462'), Decimal('73.682722975809462'), Decimal('0E-15')), ('1.0e33', Decimal('75.985308068803508'), Decimal('75.985308068803508'), Decimal('0E-15')), ('1.0e34', Decimal('78.287893161797553'), Decimal('78.287893161797553'), Decimal('0E-15')), ('1.0e35', Decimal('80.590478254791599'), Decimal('80.590478254791599'), Decimal('0E-15')), ('1.0e36', Decimal('82.893063347785645'), Decimal('82.893063347785645'), Decimal('0E-15')), ('1.0e37', Decimal('85.195648440779690'), Decimal('85.195648440779690'), Decimal('0E-15')), ('1.0e38', Decimal('87.498233533773736'), Decimal('87.498233533773736'), Decimal('0E-15')), ('1.0e39', Decimal('89.800818626767782'), Decimal('89.800818626767782'), Decimal('0E-15')), ('1.0e40', Decimal('92.103403719761827'), Decimal('92.103403719761827'), Decimal('0E-15'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES ('1.0e100', 230.25850929940457), ('1.0e200', 460.51701859880914), ('1.0e300', 690.77552789821371), ('1.0e400', 921.03403719761827), ('1.0e500', 1151.2925464970228), ('1.0e600', 1381.5510557964274), ('1.0e700', 1611.8095650958320), ('1.0e800', 1842.0680743952365), ('1.0e900', 2072.3265836946411), ('1.0e1000', 2302.5850929940457)) SELECT x, bc_result, ln(x::numeric), ln(x::numeric)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[('1.0e100', Decimal('230.25850929940457'), Decimal('230.25850929940457'), Decimal('0E-14')), ('1.0e200', Decimal('460.51701859880914'), Decimal('460.51701859880914'), Decimal('0E-14')), ('1.0e300', Decimal('690.77552789821371'), Decimal('690.77552789821371'), Decimal('0E-14')), ('1.0e400', Decimal('921.03403719761827'), Decimal('921.03403719761827'), Decimal('0E-14')), ('1.0e500', Decimal('1151.2925464970228'), Decimal('1151.2925464970228'), Decimal('0E-13')), ('1.0e600', Decimal('1381.5510557964274'), Decimal('1381.5510557964274'), Decimal('0E-13')), ('1.0e700', Decimal('1611.8095650958320'), Decimal('1611.8095650958320'), Decimal('0E-13')), ('1.0e800', Decimal('1842.0680743952365'), Decimal('1842.0680743952365'), Decimal('0E-13')), ('1.0e900', Decimal('2072.3265836946411'), Decimal('2072.3265836946411'), Decimal('0E-13')), ('1.0e1000', Decimal('2302.5850929940457'), Decimal('2302.5850929940457'), Decimal('0E-13'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES (484990182159328900690402236933516249572671683638747490717351807610531884491845416923860371219625151551889257298200816555016472471293780254009492949585031653913930735918829139712249577547959394351523545901788627247613322896296041868431769047433229466634098452564756860190085118463828382895145244362033728480588969626012192733802377468089120757046364393407262957242230928854711898925295251902007136232994524624903257456111389508582206404271734668422903183500589303866613158037169610592539145461637447957948521714058034772237111009429638870236361143304703683377693378577075353794118557951847394763531830696578809001981568860219578880229402696449243344235099860421846016326538272155937175661905904288335499593232232926636205909086901191153907183842087577811871344870731324067822883041265129394268082883745408414994.8967939438561591657171240282983703914075472645212002662497023142663831371447287624846942598424990784971781730103682951722370983277124599054059027055336437808366784501932987082321905202623642371063626378290734289114618092750984153422293450048717769065428713836637664433167768445609659527458911187829232316677137895259433038764404970599325009178297626038331436654541552998098529141205301472138026818453893127265938030066392881979113522757891639646670670272542401773230506961559808927249585675430838495658225557294666522469887436551840596777627408780618586500922973500018513068499587683746133637919751545157547095670767246977244726331271787622126889459658539988980096764323712767863722912919120929339399753431689512753214200090670880647731689804555417871258907716687575767185444541243606329768784843125926070743277339790277626515824924290352180761378846035233155198504033292692893297993698953705472933411199778880561376633444249703838589180474329586470353212010427945060694794274109764269805332803290229,  1864.3702986939570026328504202935192533137907736189919154633800554877738455118081651650863235106905871352085850240570561347180517240105510505203972860921397909573687877993477806728098306202020229409548306695695574102950949468160529713610952021974630774784174851619325758380143625473386495586347322798415543385655090746985183329114860118551572428921774322172798724455202876781611633419444058398798142214904998877857425038669920064728855823072107227506485770367799671977282350083029452784747350395161797215115525867416898416360638482342253129160308632504217096916335590470843180746834864303790913372081974355613359678634194879425862536147988835528973291020680020540866655622823550861337486588647231688134992810403147262346312159819432914207194632564009749236609081399504118359354620598232725290537215007867979331582119891661859015726276335168158288396939655310210558566592649049602925182137256134162660116182293851038854455437841571331011002023088829768308520393956515509475418031437505751407687618234418262), (87190145885430429849953615409019208993240447426362428988181639909267773304254748257120061524000254226856815085523676417146197197996896030672521334101413071112068202429835905642444187493717977611730127126387257253646790849384975208460867137315507010888782632024640844766297185244443116696943912406389670302370461137850160539373600494054874979342373255280815156048999900951842673141766630630919020492255966628630634124452614590400422133958133100159154995520080124736657520969784129924799670552560034302960877087853678350801769339861812435411200669026902417951572668727488315537985378304242438181615160041688723201917323705450185975141141262578884689500612295576288125956289035673242989906973367691922065122033180281670221390667818909912035903387888639331486823729897326624516015340.0330856710565117793999512551468220085711713631167607285185762046751452975325645379302403715842570486302993296501788672462090620871511446272026693318239212657949496275318383141403236705902077406660768573015707706831878445598837931116223956945944726162551477136715847593742032488181481888084716920605114101902724395659898621880016853548602514706686907951229872573180602614761229992106144727082722940736406782659562775289407005631298246624198606031298081220736931229256511054595028182057216042683060059115371651410352645266000330509331097811566633211452233019461903115970558624057877018778178814946285827512359903934291318219271464841957435711594154280905473802599888081783098187210283997106131616471807951265003903143099667366508222327805543948921694362089860577380749774036318574113007382111997454202845559941557812813566442364810680529092880773126707073967537693927177460459341763934709686530005721141046645111784404932103241501569571235364365556796422998363930810983452790309019295181282099408260156,  1793.5767085750017553306932533574391150814202249805881581227430032600579405884415934520704053351781361105595296647510475380766428668443641914861849764330704062323054023252886955844207807229267936432730818329225450152491146839618683772020068682795388746108876393249306737841247788224204701299467519965182171772253974884845661168860422489046657965359832930382114760565628765599962013955588754803194908990025689040598990346417563277021386852342928910383706995866844541160576254266641602065102228267316550706943783591722246885978355472097314691737807509436806788803362444745551013400341861820755594413819894154786253014501454443272120342005711761286524843010157182464200556865694401941794983935172457481497909987740544409272349152397774548604845897687504977786762391359552407068124283290504752932824699865504970420939586707791994870941813718246825616335675307740641350673558328821461530563823677144691877374809441673507467507447891562257806191361453045937798278733402269265623588493124129181374135958668436774), (93936642222690597390233191619858485419795942047468396309991947772747208870873993801669373075421461116465960407843923269693395211616591453397070258466704654943689268224479477016161636938138334729982904232438440955361656138189836032891825113139184685132178764873033678116450665758561650355252211196676137179184043639278410827092182700922151290703747496962700158844772453483316974221113826173404445159281421213715669245417896170368554410830320000019029956317336703559699859949692222685614036912057150632902650913831404804982509990655560731349634628713944739168096272097122388116038119844786988276635032016787352796502360718569977397214936366251320294621522016.6483354941025384161536675750898007896744690911429670830432784905421638721478353275821072200938900938046264210604940707974410950770029535636602548377806284157951164875821446035013896786653932045182167021839184824627082391478016195098055107001433336586881395912782883663046617432598969149948351689103230162742769845955320418573803127107923535948653168889411316007796459064267436246637115946581149511513369842911210359447262641996566147462977170742544980481275049898092152042927981394239266559286915303786701737610786594006685748456635797125029722684151298695274097006242412384086302106763844070230264910503179385988626477852818174114043927841085089058972074427820150462261941575665882880501074676800316585217150509780489224388148722603385921057007086785238310735038314861960410473809826927329368597558806004392175746233568789445929554890241140656324160187253042639339549705859147930476532359840809944163908006480881926041259363654863689570520534301207043189181147254153307163555433328278834311658232337,  1510.4332713542154696529645934345554302578243896764921637693542962119938599884313210100957753316832762996428481801312323020427109678979117469716796746760060470871840325255146954580681101106876674367471955788143763250819168311353856748872452260808797135108102729064040463343792765872545182299889360257515315869180266759715933989413256377582681707188367254513700731642913479683031478361835565783219287780434673712341147656477670848734998849030451414278832848680301511646182446524915091598080243532068451726548537866633622180283865668708517173065893429240665300584705585310049892047293928733753369421499719516009692095913169665213597158441636480707309244604139865130782756488091268094213446272360006907802989573582755585110277620911226015342778471352130366770729972784317323917141031824334355639769512749560550167491709646539950725523461943580211843652293561678342656010571108219244870234329176123205423872844099992204896411752620881541000940129833754169391528449211839693800724450201835161044717173715867437)) SELECT trim_scale(ln(x::numeric)-bc_result) AS diff FROM t",numeric_big.sql,SAME,,"[(Decimal('0'),), (Decimal('0'),), (Decimal('0'),)]"
postgresql,postgresql,"WITH t(x) AS (SELECT '1e-'||n FROM generate_series(1, 100) g(n)) SELECT x, log(x::numeric) FROM t",numeric_big.sql,SAME,,"[('1e-1', Decimal('-1.0000000000000000')), ('1e-2', Decimal('-2.0000000000000000')), ('1e-3', Decimal('-3.0000000000000000')), ('1e-4', Decimal('-4.0000000000000000')), ('1e-5', Decimal('-5.000000000000000')), ('1e-6', Decimal('-6.000000000000000')), ('1e-7', Decimal('-7.000000000000000')), ('1e-8', Decimal('-8.000000000000000')), ('1e-9', Decimal('-9.000000000000000')), ('1e-10', Decimal('-10.000000000000000')), ('1e-11', Decimal('-11.000000000000000')), ('1e-12', Decimal('-12.000000000000000')), ('1e-13', Decimal('-13.000000000000000')), ('1e-14', Decimal('-14.000000000000000')), ('1e-15', Decimal('-15.000000000000000')), ('1e-16', Decimal('-16.0000000000000000')), ('1e-17', Decimal('-17.00000000000000000')), ('1e-18', Decimal('-18.000000000000000000')), ('1e-19', Decimal('-19.0000000000000000000')), ('1e-20', Decimal('-20.00000000000000000000')), ('1e-21', Decimal('-21.000000000000000000000')), ('1e-22', Decimal('-22.0000000000000000000000')), ('1e-23', Decimal('-23.00000000000000000000000')), ('1e-24', Decimal('-24.000000000000000000000000')), ('1e-25', Decimal('-25.0000000000000000000000000')), ('1e-26', Decimal('-26.00000000000000000000000000')), ('1e-27', Decimal('-27.000000000000000000000000000')), ('1e-28', Decimal('-28.0000000000000000000000000000')), ('1e-29', Decimal('-29.00000000000000000000000000000')), ('1e-30', Decimal('-30.000000000000000000000000000000')), ('1e-31', Decimal('-31.0000000000000000000000000000000')), ('1e-32', Decimal('-32.00000000000000000000000000000000')), ('1e-33', Decimal('-33.000000000000000000000000000000000')), ('1e-34', Decimal('-34.0000000000000000000000000000000000')), ('1e-35', Decimal('-35.00000000000000000000000000000000000')), ('1e-36', Decimal('-36.000000000000000000000000000000000000')), ('1e-37', Decimal('-37.0000000000000000000000000000000000000')), ('1e-38', Decimal('-38.00000000000000000000000000000000000000')), ('1e-39', Decimal('-39.000000000000000000000000000000000000000')), ('1e-40', Decimal('-40.0000000000000000000000000000000000000000')), ('1e-41', Decimal('-41.00000000000000000000000000000000000000000')), ('1e-42', Decimal('-42.000000000000000000000000000000000000000000')), ('1e-43', Decimal('-43.0000000000000000000000000000000000000000000')), ('1e-44', Decimal('-44.00000000000000000000000000000000000000000000')), ('1e-45', Decimal('-45.000000000000000000000000000000000000000000000')), ('1e-46', Decimal('-46.0000000000000000000000000000000000000000000000')), ('1e-47', Decimal('-47.00000000000000000000000000000000000000000000000')), ('1e-48', Decimal('-48.000000000000000000000000000000000000000000000000')), ('1e-49', Decimal('-49.0000000000000000000000000000000000000000000000000')), ('1e-50', Decimal('-50.00000000000000000000000000000000000000000000000000')), ('1e-51', Decimal('-51.000000000000000000000000000000000000000000000000000')), ('1e-52', Decimal('-52.0000000000000000000000000000000000000000000000000000')), ('1e-53', Decimal('-53.00000000000000000000000000000000000000000000000000000')), ('1e-54', Decimal('-54.000000000000000000000000000000000000000000000000000000')), ('1e-55', Decimal('-55.0000000000000000000000000000000000000000000000000000000')), ('1e-56', Decimal('-56.00000000000000000000000000000000000000000000000000000000')), ('1e-57', Decimal('-57.000000000000000000000000000000000000000000000000000000000')), ('1e-58', Decimal('-58.0000000000000000000000000000000000000000000000000000000000')), ('1e-59', Decimal('-59.00000000000000000000000000000000000000000000000000000000000')), ('1e-60', Decimal('-60.000000000000000000000000000000000000000000000000000000000000')), ('1e-61', Decimal('-61.0000000000000000000000000000000000000000000000000000000000000')), ('1e-62', Decimal('-62.00000000000000000000000000000000000000000000000000000000000000')), ('1e-63', Decimal('-63.000000000000000000000000000000000000000000000000000000000000000')), ('1e-64', Decimal('-64.0000000000000000000000000000000000000000000000000000000000000000')), ('1e-65', Decimal('-65.00000000000000000000000000000000000000000000000000000000000000000')), ('1e-66', Decimal('-66.000000000000000000000000000000000000000000000000000000000000000000')), ('1e-67', Decimal('-67.0000000000000000000000000000000000000000000000000000000000000000000')), ('1e-68', Decimal('-68.00000000000000000000000000000000000000000000000000000000000000000000')), ('1e-69', Decimal('-69.000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-70', Decimal('-70.0000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-71', Decimal('-71.00000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-72', Decimal('-72.000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-73', Decimal('-73.0000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-74', Decimal('-74.00000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-75', Decimal('-75.000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-76', Decimal('-76.0000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-77', Decimal('-77.00000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-78', Decimal('-78.000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-79', Decimal('-79.0000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-80', Decimal('-80.00000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-81', Decimal('-81.000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-82', Decimal('-82.0000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-83', Decimal('-83.00000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-84', Decimal('-84.000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-85', Decimal('-85.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-86', Decimal('-86.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-87', Decimal('-87.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-88', Decimal('-88.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-89', Decimal('-89.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-90', Decimal('-90.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-91', Decimal('-91.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-92', Decimal('-92.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-93', Decimal('-93.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-94', Decimal('-94.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-95', Decimal('-95.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-96', Decimal('-96.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-97', Decimal('-97.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-98', Decimal('-98.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-99', Decimal('-99.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')), ('1e-100', Decimal('-100.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES ('9.0e-1', -.04575749056067513), ('6.0e-1', -.2218487496163564), ('3.0e-1', -.5228787452803376), ('9.0e-8', -7.045757490560675), ('6.0e-8', -7.221848749616356), ('3.0e-8', -7.522878745280338), ('9.0e-15', -14.0457574905606751), ('6.0e-15', -14.2218487496163564), ('3.0e-15', -14.5228787452803376), ('9.0e-22', -21.04575749056067512540994), ('6.0e-22', -21.22184874961635636749123), ('3.0e-22', -21.52287874528033756270497), ('9.0e-29', -28.045757490560675125409944193490), ('6.0e-29', -28.221848749616356367491233202020), ('3.0e-29', -28.522878745280337562704972096745), ('9.0e-36', -35.0457574905606751254099441934897693816), ('6.0e-36', -35.2218487496163563674912332020203916640), ('3.0e-36', -35.5228787452803375627049720967448846908), ('9.0e-43', -42.04575749056067512540994419348976938159974227), ('6.0e-43', -42.22184874961635636749123320202039166403168125), ('3.0e-43', -42.52287874528033756270497209674488469079987114), ('9.0e-50', -49.045757490560675125409944193489769381599742271618608), ('6.0e-50', -49.221848749616356367491233202020391664031681254347196), ('3.0e-50', -49.522878745280337562704972096744884690799871135809304)) SELECT x, bc_result, log(x::numeric), log(x::numeric)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[('9.0e-1', Decimal('-0.04575749056067513'), Decimal('-0.04575749056067513'), Decimal('0E-17')), ('6.0e-1', Decimal('-0.2218487496163564'), Decimal('-0.2218487496163564'), Decimal('0E-16')), ('3.0e-1', Decimal('-0.5228787452803376'), Decimal('-0.5228787452803376'), Decimal('0E-16')), ('9.0e-8', Decimal('-7.045757490560675'), Decimal('-7.045757490560675'), Decimal('0E-15')), ('6.0e-8', Decimal('-7.221848749616356'), Decimal('-7.221848749616356'), Decimal('0E-15')), ('3.0e-8', Decimal('-7.522878745280338'), Decimal('-7.522878745280338'), Decimal('0E-15')), ('9.0e-15', Decimal('-14.0457574905606751'), Decimal('-14.0457574905606751'), Decimal('0E-16')), ('6.0e-15', Decimal('-14.2218487496163564'), Decimal('-14.2218487496163564'), Decimal('0E-16')), ('3.0e-15', Decimal('-14.5228787452803376'), Decimal('-14.5228787452803376'), Decimal('0E-16')), ('9.0e-22', Decimal('-21.04575749056067512540994'), Decimal('-21.04575749056067512540994'), Decimal('0E-23')), ('6.0e-22', Decimal('-21.22184874961635636749123'), Decimal('-21.22184874961635636749123'), Decimal('0E-23')), ('3.0e-22', Decimal('-21.52287874528033756270497'), Decimal('-21.52287874528033756270497'), Decimal('0E-23')), ('9.0e-29', Decimal('-28.045757490560675125409944193490'), Decimal('-28.045757490560675125409944193490'), Decimal('0E-30')), ('6.0e-29', Decimal('-28.221848749616356367491233202020'), Decimal('-28.221848749616356367491233202020'), Decimal('0E-30')), ('3.0e-29', Decimal('-28.522878745280337562704972096745'), Decimal('-28.522878745280337562704972096745'), Decimal('0E-30')), ('9.0e-36', Decimal('-35.0457574905606751254099441934897693816'), Decimal('-35.0457574905606751254099441934897693816'), Decimal('0E-37')), ('6.0e-36', Decimal('-35.2218487496163563674912332020203916640'), Decimal('-35.2218487496163563674912332020203916640'), Decimal('0E-37')), ('3.0e-36', Decimal('-35.5228787452803375627049720967448846908'), Decimal('-35.5228787452803375627049720967448846908'), Decimal('0E-37')), ('9.0e-43', Decimal('-42.04575749056067512540994419348976938159974227'), Decimal('-42.04575749056067512540994419348976938159974227'), Decimal('0E-44')), ('6.0e-43', Decimal('-42.22184874961635636749123320202039166403168125'), Decimal('-42.22184874961635636749123320202039166403168125'), Decimal('0E-44')), ('3.0e-43', Decimal('-42.52287874528033756270497209674488469079987114'), Decimal('-42.52287874528033756270497209674488469079987114'), Decimal('0E-44')), ('9.0e-50', Decimal('-49.045757490560675125409944193489769381599742271618608'), Decimal('-49.045757490560675125409944193489769381599742271618608'), Decimal('0E-51')), ('6.0e-50', Decimal('-49.221848749616356367491233202020391664031681254347196'), Decimal('-49.221848749616356367491233202020391664031681254347196'), Decimal('0E-51')), ('3.0e-50', Decimal('-49.522878745280337562704972096744884690799871135809304'), Decimal('-49.522878745280337562704972096744884690799871135809304'), Decimal('0E-51'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES ('9.0e-1', -1.0000000000000000), ('6.0e-1', -.3979400086720376), ('3.0e-1', -.1549019599857432), ('9.0e-8', -.000000039086505130185422), ('6.0e-8', -.000000026057669695925208), ('3.0e-8', -.000000013028834652530076), ('9.0e-15', -.0000000000000039086503371292840), ('6.0e-15', -.0000000000000026057668914195188), ('3.0e-15', -.0000000000000013028834457097574), ('9.0e-22', -.00000000000000000000039086503371292664), ('6.0e-22', -.00000000000000000000026057668914195110), ('3.0e-22', -.00000000000000000000013028834457097555), ('9.0e-29', -.000000000000000000000000000039086503371292664), ('6.0e-29', -.000000000000000000000000000026057668914195110), ('3.0e-29', -.000000000000000000000000000013028834457097555), ('9.0e-36', -.0000000000000000000000000000000000039086503371292664), ('6.0e-36', -.0000000000000000000000000000000000026057668914195110), ('3.0e-36', -.0000000000000000000000000000000000013028834457097555)) SELECT '1-'||x, bc_result, log(1.0-x::numeric), log(1.0-x::numeric)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[('1-9.0e-1', Decimal('-1.0000000000000000'), Decimal('-1.0000000000000000'), Decimal('0E-16')), ('1-6.0e-1', Decimal('-0.3979400086720376'), Decimal('-0.3979400086720376'), Decimal('0E-16')), ('1-3.0e-1', Decimal('-0.1549019599857432'), Decimal('-0.1549019599857432'), Decimal('0E-16')), ('1-9.0e-8', Decimal('-3.9086505130185422E-8'), Decimal('-3.9086505130185422E-8'), Decimal('0E-24')), ('1-6.0e-8', Decimal('-2.6057669695925208E-8'), Decimal('-2.6057669695925208E-8'), Decimal('0E-24')), ('1-3.0e-8', Decimal('-1.3028834652530076E-8'), Decimal('-1.3028834652530076E-8'), Decimal('0E-24')), ('1-9.0e-15', Decimal('-3.9086503371292840E-15'), Decimal('-3.9086503371292840E-15'), Decimal('0E-31')), ('1-6.0e-15', Decimal('-2.6057668914195188E-15'), Decimal('-2.6057668914195188E-15'), Decimal('0E-31')), ('1-3.0e-15', Decimal('-1.3028834457097574E-15'), Decimal('-1.3028834457097574E-15'), Decimal('0E-31')), ('1-9.0e-22', Decimal('-3.9086503371292664E-22'), Decimal('-3.9086503371292664E-22'), Decimal('0E-38')), ('1-6.0e-22', Decimal('-2.6057668914195110E-22'), Decimal('-2.6057668914195110E-22'), Decimal('0E-38')), ('1-3.0e-22', Decimal('-1.3028834457097555E-22'), Decimal('-1.3028834457097555E-22'), Decimal('0E-38')), ('1-9.0e-29', Decimal('-3.9086503371292664E-29'), Decimal('-3.9086503371292664E-29'), Decimal('0E-45')), ('1-6.0e-29', Decimal('-2.6057668914195110E-29'), Decimal('-2.6057668914195110E-29'), Decimal('0E-45')), ('1-3.0e-29', Decimal('-1.3028834457097555E-29'), Decimal('-1.3028834457097555E-29'), Decimal('0E-45')), ('1-9.0e-36', Decimal('-3.9086503371292664E-36'), Decimal('-3.9086503371292664E-36'), Decimal('0E-52')), ('1-6.0e-36', Decimal('-2.6057668914195110E-36'), Decimal('-2.6057668914195110E-36'), Decimal('0E-52')), ('1-3.0e-36', Decimal('-1.3028834457097555E-36'), Decimal('-1.3028834457097555E-36'), Decimal('0E-52'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES ('9.0e-1', .2787536009528290), ('6.0e-1', .2041199826559248), ('3.0e-1', .1139433523068368), ('9.0e-8', .000000039086501612400118), ('6.0e-8', .000000026057668132465074), ('3.0e-8', .000000013028834261665042), ('9.0e-15', .0000000000000039086503371292489), ('6.0e-15', .0000000000000026057668914195031), ('3.0e-15', .0000000000000013028834457097535), ('9.0e-22', .00000000000000000000039086503371292664), ('6.0e-22', .00000000000000000000026057668914195110), ('3.0e-22', .00000000000000000000013028834457097555), ('9.0e-29', .000000000000000000000000000039086503371292664), ('6.0e-29', .000000000000000000000000000026057668914195110), ('3.0e-29', .000000000000000000000000000013028834457097555), ('9.0e-36', .0000000000000000000000000000000000039086503371292664), ('6.0e-36', .0000000000000000000000000000000000026057668914195110), ('3.0e-36', .0000000000000000000000000000000000013028834457097555)) SELECT '1+'||x, bc_result, log(1.0+x::numeric), log(1.0+x::numeric)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[('1+9.0e-1', Decimal('0.2787536009528290'), Decimal('0.2787536009528290'), Decimal('0E-16')), ('1+6.0e-1', Decimal('0.2041199826559248'), Decimal('0.2041199826559248'), Decimal('0E-16')), ('1+3.0e-1', Decimal('0.1139433523068368'), Decimal('0.1139433523068368'), Decimal('0E-16')), ('1+9.0e-8', Decimal('3.9086501612400118E-8'), Decimal('3.9086501612400118E-8'), Decimal('0E-24')), ('1+6.0e-8', Decimal('2.6057668132465074E-8'), Decimal('2.6057668132465074E-8'), Decimal('0E-24')), ('1+3.0e-8', Decimal('1.3028834261665042E-8'), Decimal('1.3028834261665042E-8'), Decimal('0E-24')), ('1+9.0e-15', Decimal('3.9086503371292489E-15'), Decimal('3.9086503371292489E-15'), Decimal('0E-31')), ('1+6.0e-15', Decimal('2.6057668914195031E-15'), Decimal('2.6057668914195031E-15'), Decimal('0E-31')), ('1+3.0e-15', Decimal('1.3028834457097535E-15'), Decimal('1.3028834457097535E-15'), Decimal('0E-31')), ('1+9.0e-22', Decimal('3.9086503371292664E-22'), Decimal('3.9086503371292664E-22'), Decimal('0E-38')), ('1+6.0e-22', Decimal('2.6057668914195110E-22'), Decimal('2.6057668914195110E-22'), Decimal('0E-38')), ('1+3.0e-22', Decimal('1.3028834457097555E-22'), Decimal('1.3028834457097555E-22'), Decimal('0E-38')), ('1+9.0e-29', Decimal('3.9086503371292664E-29'), Decimal('3.9086503371292664E-29'), Decimal('0E-45')), ('1+6.0e-29', Decimal('2.6057668914195110E-29'), Decimal('2.6057668914195110E-29'), Decimal('0E-45')), ('1+3.0e-29', Decimal('1.3028834457097555E-29'), Decimal('1.3028834457097555E-29'), Decimal('0E-45')), ('1+9.0e-36', Decimal('3.9086503371292664E-36'), Decimal('3.9086503371292664E-36'), Decimal('0E-52')), ('1+6.0e-36', Decimal('2.6057668914195110E-36'), Decimal('2.6057668914195110E-36'), Decimal('0E-52')), ('1+3.0e-36', Decimal('1.3028834457097555E-36'), Decimal('1.3028834457097555E-36'), Decimal('0E-52'))]"
postgresql,postgresql,"WITH t(x) AS (SELECT '1e'||n FROM generate_series(1, 100) g(n)) SELECT x, log(x::numeric) FROM t",numeric_big.sql,SAME,,"[('1e1', Decimal('1.0000000000000000')), ('1e2', Decimal('2.0000000000000000')), ('1e3', Decimal('3.0000000000000000')), ('1e4', Decimal('4.0000000000000000')), ('1e5', Decimal('5.000000000000000')), ('1e6', Decimal('6.000000000000000')), ('1e7', Decimal('7.000000000000000')), ('1e8', Decimal('8.000000000000000')), ('1e9', Decimal('9.000000000000000')), ('1e10', Decimal('10.000000000000000')), ('1e11', Decimal('11.000000000000000')), ('1e12', Decimal('12.000000000000000')), ('1e13', Decimal('13.000000000000000')), ('1e14', Decimal('14.000000000000000')), ('1e15', Decimal('15.000000000000000')), ('1e16', Decimal('16.000000000000000')), ('1e17', Decimal('17.000000000000000')), ('1e18', Decimal('18.000000000000000')), ('1e19', Decimal('19.000000000000000')), ('1e20', Decimal('20.000000000000000')), ('1e21', Decimal('21.000000000000000')), ('1e22', Decimal('22.000000000000000')), ('1e23', Decimal('23.000000000000000')), ('1e24', Decimal('24.000000000000000')), ('1e25', Decimal('25.000000000000000')), ('1e26', Decimal('26.000000000000000')), ('1e27', Decimal('27.000000000000000')), ('1e28', Decimal('28.000000000000000')), ('1e29', Decimal('29.000000000000000')), ('1e30', Decimal('30.000000000000000')), ('1e31', Decimal('31.000000000000000')), ('1e32', Decimal('32.000000000000000')), ('1e33', Decimal('33.000000000000000')), ('1e34', Decimal('34.000000000000000')), ('1e35', Decimal('35.000000000000000')), ('1e36', Decimal('36.000000000000000')), ('1e37', Decimal('37.000000000000000')), ('1e38', Decimal('38.000000000000000')), ('1e39', Decimal('39.000000000000000')), ('1e40', Decimal('40.000000000000000')), ('1e41', Decimal('41.000000000000000')), ('1e42', Decimal('42.000000000000000')), ('1e43', Decimal('43.000000000000000')), ('1e44', Decimal('44.00000000000000')), ('1e45', Decimal('45.00000000000000')), ('1e46', Decimal('46.00000000000000')), ('1e47', Decimal('47.00000000000000')), ('1e48', Decimal('48.00000000000000')), ('1e49', Decimal('49.00000000000000')), ('1e50', Decimal('50.00000000000000')), ('1e51', Decimal('51.00000000000000')), ('1e52', Decimal('52.00000000000000')), ('1e53', Decimal('53.00000000000000')), ('1e54', Decimal('54.00000000000000')), ('1e55', Decimal('55.00000000000000')), ('1e56', Decimal('56.00000000000000')), ('1e57', Decimal('57.00000000000000')), ('1e58', Decimal('58.00000000000000')), ('1e59', Decimal('59.00000000000000')), ('1e60', Decimal('60.00000000000000')), ('1e61', Decimal('61.00000000000000')), ('1e62', Decimal('62.00000000000000')), ('1e63', Decimal('63.00000000000000')), ('1e64', Decimal('64.00000000000000')), ('1e65', Decimal('65.00000000000000')), ('1e66', Decimal('66.00000000000000')), ('1e67', Decimal('67.00000000000000')), ('1e68', Decimal('68.00000000000000')), ('1e69', Decimal('69.00000000000000')), ('1e70', Decimal('70.00000000000000')), ('1e71', Decimal('71.00000000000000')), ('1e72', Decimal('72.00000000000000')), ('1e73', Decimal('73.00000000000000')), ('1e74', Decimal('74.00000000000000')), ('1e75', Decimal('75.00000000000000')), ('1e76', Decimal('76.00000000000000')), ('1e77', Decimal('77.00000000000000')), ('1e78', Decimal('78.00000000000000')), ('1e79', Decimal('79.00000000000000')), ('1e80', Decimal('80.00000000000000')), ('1e81', Decimal('81.00000000000000')), ('1e82', Decimal('82.00000000000000')), ('1e83', Decimal('83.00000000000000')), ('1e84', Decimal('84.00000000000000')), ('1e85', Decimal('85.00000000000000')), ('1e86', Decimal('86.00000000000000')), ('1e87', Decimal('87.00000000000000')), ('1e88', Decimal('88.00000000000000')), ('1e89', Decimal('89.00000000000000')), ('1e90', Decimal('90.00000000000000')), ('1e91', Decimal('91.00000000000000')), ('1e92', Decimal('92.00000000000000')), ('1e93', Decimal('93.00000000000000')), ('1e94', Decimal('94.00000000000000')), ('1e95', Decimal('95.00000000000000')), ('1e96', Decimal('96.00000000000000')), ('1e97', Decimal('97.00000000000000')), ('1e98', Decimal('98.00000000000000')), ('1e99', Decimal('99.00000000000000')), ('1e100', Decimal('100.00000000000000'))]"
postgresql,postgresql,"WITH t(x, bc_result) AS (VALUES ('2.0e10', 10.301029995663981), ('5.0e10', 10.698970004336019), ('8.0e10', 10.903089986991944), ('2.0e17', 17.301029995663981), ('5.0e17', 17.698970004336019), ('8.0e17', 17.903089986991944), ('2.0e24', 24.301029995663981), ('5.0e24', 24.698970004336019), ('8.0e24', 24.903089986991944), ('2.0e31', 31.301029995663981), ('5.0e31', 31.698970004336019), ('8.0e31', 31.903089986991944), ('2.0e38', 38.301029995663981), ('5.0e38', 38.698970004336019), ('8.0e38', 38.903089986991944), ('2.0e45', 45.30102999566398), ('5.0e45', 45.69897000433602), ('8.0e45', 45.90308998699194)) SELECT x, bc_result, log(x::numeric), log(x::numeric)-bc_result AS diff FROM t",numeric_big.sql,SAME,,"[('2.0e10', Decimal('10.301029995663981'), Decimal('10.301029995663981'), Decimal('0E-15')), ('5.0e10', Decimal('10.698970004336019'), Decimal('10.698970004336019'), Decimal('0E-15')), ('8.0e10', Decimal('10.903089986991944'), Decimal('10.903089986991944'), Decimal('0E-15')), ('2.0e17', Decimal('17.301029995663981'), Decimal('17.301029995663981'), Decimal('0E-15')), ('5.0e17', Decimal('17.698970004336019'), Decimal('17.698970004336019'), Decimal('0E-15')), ('8.0e17', Decimal('17.903089986991944'), Decimal('17.903089986991944'), Decimal('0E-15')), ('2.0e24', Decimal('24.301029995663981'), Decimal('24.301029995663981'), Decimal('0E-15')), ('5.0e24', Decimal('24.698970004336019'), Decimal('24.698970004336019'), Decimal('0E-15')), ('8.0e24', Decimal('24.903089986991944'), Decimal('24.903089986991944'), Decimal('0E-15')), ('2.0e31', Decimal('31.301029995663981'), Decimal('31.301029995663981'), Decimal('0E-15')), ('5.0e31', Decimal('31.698970004336019'), Decimal('31.698970004336019'), Decimal('0E-15')), ('8.0e31', Decimal('31.903089986991944'), Decimal('31.903089986991944'), Decimal('0E-15')), ('2.0e38', Decimal('38.301029995663981'), Decimal('38.301029995663981'), Decimal('0E-15')), ('5.0e38', Decimal('38.698970004336019'), Decimal('38.698970004336019'), Decimal('0E-15')), ('8.0e38', Decimal('38.903089986991944'), Decimal('38.903089986991944'), Decimal('0E-15')), ('2.0e45', Decimal('45.30102999566398'), Decimal('45.30102999566398'), Decimal('0E-14')), ('5.0e45', Decimal('45.69897000433602'), Decimal('45.69897000433602'), Decimal('0E-14')), ('8.0e45', Decimal('45.90308998699194'), Decimal('45.90308998699194'), Decimal('0E-14'))]"
postgresql,postgresql,SELECT 0b100101,numerology.sql,SAME,,"[(37,)]"
postgresql,postgresql,SELECT 0o273,numerology.sql,SAME,,"[(187,)]"
postgresql,postgresql,SELECT 0x42F,numerology.sql,SAME,,"[(1071,)]"
postgresql,postgresql,SELECT 0b1111111111111111111111111111111,numerology.sql,SAME,,"[(2147483647,)]"
postgresql,postgresql,SELECT 0b10000000000000000000000000000000,numerology.sql,SAME,,"[(2147483648,)]"
postgresql,postgresql,SELECT 0o17777777777,numerology.sql,SAME,,"[(2147483647,)]"
postgresql,postgresql,SELECT 0o20000000000,numerology.sql,SAME,,"[(2147483648,)]"
postgresql,postgresql,SELECT 0x7FFFFFFF,numerology.sql,SAME,,"[(2147483647,)]"
postgresql,postgresql,SELECT 0x80000000,numerology.sql,SAME,,"[(2147483648,)]"
postgresql,postgresql,SELECT -0b10000000000000000000000000000000,numerology.sql,SAME,,"[(-2147483648,)]"
postgresql,postgresql,SELECT -0b10000000000000000000000000000001,numerology.sql,SAME,,"[(-2147483649,)]"
postgresql,postgresql,SELECT -0o20000000000,numerology.sql,SAME,,"[(-2147483648,)]"
postgresql,postgresql,SELECT -0o20000000001,numerology.sql,SAME,,"[(-2147483649,)]"
postgresql,postgresql,SELECT -0x80000000,numerology.sql,SAME,,"[(-2147483648,)]"
postgresql,postgresql,SELECT -0x80000001,numerology.sql,SAME,,"[(-2147483649,)]"
postgresql,postgresql,SELECT 0b111111111111111111111111111111111111111111111111111111111111111,numerology.sql,SAME,,"[(9223372036854775807,)]"
postgresql,postgresql,SELECT 0b1000000000000000000000000000000000000000000000000000000000000000,numerology.sql,SAME,,"[(Decimal('9223372036854775808'),)]"
postgresql,postgresql,SELECT 0o777777777777777777777,numerology.sql,SAME,,"[(9223372036854775807,)]"
postgresql,postgresql,SELECT 0o1000000000000000000000,numerology.sql,SAME,,"[(Decimal('9223372036854775808'),)]"
postgresql,postgresql,SELECT 0x7FFFFFFFFFFFFFFF,numerology.sql,SAME,,"[(9223372036854775807,)]"
postgresql,postgresql,SELECT 0x8000000000000000,numerology.sql,SAME,,"[(Decimal('9223372036854775808'),)]"
postgresql,postgresql,SELECT -0b1000000000000000000000000000000000000000000000000000000000000000,numerology.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,SELECT -0b1000000000000000000000000000000000000000000000000000000000000001,numerology.sql,SAME,,"[(Decimal('-9223372036854775809'),)]"
postgresql,postgresql,SELECT -0o1000000000000000000000,numerology.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,SELECT -0o1000000000000000000001,numerology.sql,SAME,,"[(Decimal('-9223372036854775809'),)]"
postgresql,postgresql,SELECT -0x8000000000000000,numerology.sql,SAME,,"[(-9223372036854775808,)]"
postgresql,postgresql,SELECT -0x8000000000000001,numerology.sql,SAME,,"[(Decimal('-9223372036854775809'),)]"
postgresql,postgresql,SELECT 1_000_000,numerology.sql,SAME,,"[(1000000,)]"
postgresql,postgresql,SELECT 1_2_3,numerology.sql,SAME,,"[(123,)]"
postgresql,postgresql,SELECT 0x1EEE_FFFF,numerology.sql,SAME,,"[(518979583,)]"
postgresql,postgresql,SELECT 0o2_73,numerology.sql,SAME,,"[(187,)]"
postgresql,postgresql,SELECT 0b_10_0101,numerology.sql,SAME,,"[(37,)]"
postgresql,postgresql,SELECT 1_000.000_005,numerology.sql,SAME,,"[(Decimal('1000.000005'),)]"
postgresql,postgresql,SELECT 1_000.,numerology.sql,SAME,,"[(Decimal('1000'),)]"
postgresql,postgresql,SELECT .000_005,numerology.sql,SAME,,"[(Decimal('0.000005'),)]"
postgresql,postgresql,SELECT 1_000.5e0_1,numerology.sql,SAME,,"[(Decimal('10005'),)]"
postgresql,postgresql,SELECT f1 FROM TEMP_FLOAT   ORDER BY f1,numerology.sql,SAME,,[]
postgresql,postgresql,SELECT f1 FROM TEMP_INT4   ORDER BY f1,numerology.sql,SAME,,[]
postgresql,postgresql,SELECT f1 FROM TEMP_INT2   ORDER BY f1,numerology.sql,SAME,,[]
postgresql,postgresql,SELECT DISTINCT f1 AS two FROM TEMP_GROUP ORDER BY 1,numerology.sql,SAME,,[]
postgresql,postgresql,"SELECT f1 AS two, max(f3) AS max_float, min(f3) as min_float   FROM TEMP_GROUP   GROUP BY f1   ORDER BY two, max_float, min_float",numerology.sql,SAME,,[]
postgresql,postgresql,"SELECT f1 AS two, max(f3) AS max_float, min(f3) AS min_float   FROM TEMP_GROUP   GROUP BY two   ORDER BY two, max_float, min_float",numerology.sql,SAME,,[]
postgresql,postgresql,"SELECT f1 AS two, (max(f3) + 1) AS max_plus_1, (min(f3) - 1) AS min_minus_1   FROM TEMP_GROUP   GROUP BY f1   ORDER BY two, min_minus_1",numerology.sql,SAME,,[]
postgresql,postgresql,"SELECT f1 AS two,        max(f2) + min(f2) AS max_plus_min,        min(f3) - 1 AS min_minus_1   FROM TEMP_GROUP   GROUP BY f1   ORDER BY two, min_minus_1",numerology.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages TO 'warning',object_address.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,object_address.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA addr_nsp,object_address.sql,SAME,,[]
postgresql,postgresql,SET search_path TO 'addr_nsp',object_address.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH DICTIONARY addr_ts_dict (template=simple),object_address.sql,SAME,,[]
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION addr_ts_conf (copy=english),object_address.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW addr_nsp.genview AS SELECT * from addr_nsp.gentable,object_address.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW addr_nsp.genmatview AS SELECT * FROM addr_nsp.gentable,object_address.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE addr_nsp.gencomptype AS (a int),object_address.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE addr_nsp.genenum AS ENUM ('one', 'two')",object_address.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE addr_nsp.genaggr(int4) (sfunc = int4pl, stype = int4)",object_address.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN addr_nsp.gendomain AS int4 CONSTRAINT domconstr CHECK (value > 0),object_address.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY genpol ON addr_nsp.gentable,object_address.sql,SAME,,[]
postgresql,postgresql,CREATE PROCEDURE addr_nsp.proc(int4) LANGUAGE SQL AS $$ $$,object_address.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',object_address.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION addr_pub FOR TABLE addr_nsp.gentable,object_address.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,object_address.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS addr_nsp.gentable_stat ON a, b FROM addr_nsp.gentable",object_address.sql,SAME,,[]
postgresql,postgresql,END,object_address.sql,SAME,,[]
postgresql,postgresql,END,object_address.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION addr_pub,object_address.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA addr_nsp CASCADE,object_address.sql,SAME,,[]
postgresql,postgresql,"WITH objects (classid, objid, objsubid) AS (VALUES     ('pg_class'::regclass, 0, 0),      ('pg_class'::regclass, 'pg_class'::regclass, 100),      ('pg_proc'::regclass, 0, 0),      ('pg_type'::regclass, 0, 0),      ('pg_cast'::regclass, 0, 0),      ('pg_collation'::regclass, 0, 0),      ('pg_constraint'::regclass, 0, 0),      ('pg_conversion'::regclass, 0, 0),      ('pg_attrdef'::regclass, 0, 0),      ('pg_language'::regclass, 0, 0),      ('pg_largeobject'::regclass, 0, 0),      ('pg_operator'::regclass, 0, 0),      ('pg_opclass'::regclass, 0, 0),      ('pg_opfamily'::regclass, 0, 0),      ('pg_am'::regclass, 0, 0),      ('pg_amop'::regclass, 0, 0),      ('pg_amproc'::regclass, 0, 0),      ('pg_rewrite'::regclass, 0, 0),      ('pg_trigger'::regclass, 0, 0),      ('pg_namespace'::regclass, 0, 0),      ('pg_statistic_ext'::regclass, 0, 0),      ('pg_ts_parser'::regclass, 0, 0),      ('pg_ts_dict'::regclass, 0, 0),      ('pg_ts_template'::regclass, 0, 0),      ('pg_ts_config'::regclass, 0, 0),      ('pg_authid'::regclass, 0, 0),      ('pg_auth_members'::regclass, 0, 0),       ('pg_database'::regclass, 0, 0),      ('pg_tablespace'::regclass, 0, 0),      ('pg_foreign_data_wrapper'::regclass, 0, 0),      ('pg_foreign_server'::regclass, 0, 0),      ('pg_user_mapping'::regclass, 0, 0),      ('pg_default_acl'::regclass, 0, 0),      ('pg_extension'::regclass, 0, 0),      ('pg_event_trigger'::regclass, 0, 0),      ('pg_parameter_acl'::regclass, 0, 0),      ('pg_policy'::regclass, 0, 0),      ('pg_publication'::regclass, 0, 0),      ('pg_publication_namespace'::regclass, 0, 0),      ('pg_publication_rel'::regclass, 0, 0),      ('pg_subscription'::regclass, 0, 0),      ('pg_transform'::regclass, 0, 0)    ) SELECT ROW(pg_identify_object(objects.classid, objects.objid, objects.objsubid))          AS ident,        ROW(pg_identify_object_as_address(objects.classid, objects.objid, objects.objsubid))          AS addr,        pg_describe_object(objects.classid, objects.objid, objects.objsubid)          AS descr FROM objects ORDER BY objects.classid, objects.objid, objects.objsubid",object_address.sql,SAME,,"[('(""(""""default acl"""",,,)"")', '(""(""""default acl"""",,)"")', None), ('(""(tablespace,,,)"")', '(""(tablespace,,)"")', None), ('(""(type,,,)"")', '(""(type,,)"")', None), ('(""(routine,,,)"")', '(""(routine,,)"")', None), ('(""(relation,,,)"")', '(""(relation,,)"")', None), ('(""(""""table column"""",,,)"")', '(""(""""table column"""",,)"")', None), ('(""(role,,,)"")', '(""(role,,)"")', None), ('(""(""""role membership"""",,,)"")', '(""(""""role membership"""",,)"")', None), ('(""(database,,,)"")', '(""(database,,)"")', None), ('(""(server,,,)"")', '(""(server,,)"")', None), ('(""(""""user mapping"""",,,)"")', '(""(""""user mapping"""",,)"")', None), ('(""(""""foreign-data wrapper"""",,,)"")', '(""(""""foreign-data wrapper"""",,)"")', None), ('(""(""""access method"""",,,)"")', '(""(""""access method"""",,)"")', None), ('(""(""""operator of access method"""",,,)"")', '(""(""""operator of access method"""",,)"")', None), ('(""(""""function of access method"""",,,)"")', '(""(""""function of access method"""",,)"")', None), ('(""(""""default value"""",,,)"")', '(""(""""default value"""",,)"")', None), ('(""(cast,,,)"")', '(""(cast,,)"")', None), ('(""(constraint,,,)"")', '(""(constraint,,)"")', None), ('(""(conversion,,,)"")', '(""(conversion,,)"")', None), ('(""(language,,,)"")', '(""(language,,)"")', None), ('(""(""""large object"""",,,)"")', '(""(""""large object"""",,)"")', None), ('(""(schema,,,)"")', '(""(schema,,)"")', None), ('(""(""""operator class"""",,,)"")', '(""(""""operator class"""",,)"")', None), ('(""(operator,,,)"")', '(""(operator,,)"")', None), ('(""(rule,,,)"")', '(""(rule,,)"")', None), ('(""(trigger,,,)"")', '(""(trigger,,)"")', None), ('(""(""""operator family"""",,,)"")', '(""(""""operator family"""",,)"")', None), ('(""(extension,,,)"")', '(""(extension,,)"")', None), ('(""(policy,,,)"")', '(""(policy,,)"")', None), ('(""(""""statistics object"""",,,)"")', '(""(""""statistics object"""",,)"")', None), ('(""(collation,,,)"")', '(""(collation,,)"")', None), ('(""(""""event trigger"""",,,)"")', '(""(""""event trigger"""",,)"")', None), ('(""(transform,,,)"")', '(""(transform,,)"")', None), ('(""(""""text search dictionary"""",,,)"")', '(""(""""text search dictionary"""",,)"")', None), ('(""(""""text search parser"""",,,)"")', '(""(""""text search parser"""",,)"")', None), ('(""(""""text search configuration"""",,,)"")', '(""(""""text search configuration"""",,)"")', None), ('(""(""""text search template"""",,,)"")', '(""(""""text search template"""",,)"")', None), ('(""(subscription,,,)"")', '(""(subscription,,)"")', None), ('(""(publication,,,)"")', '(""(publication,,)"")', None), ('(""(""""publication relation"""",,,)"")', '(""(""""publication relation"""",,)"")', None), ('(""(""""publication namespace"""",,,)"")', '(""(""""publication namespace"""",,)"")', None), ('(""(""""parameter ACL"""",,,)"")', '(""(""""parameter ACL"""",,)"")', None)]"
postgresql,postgresql,SELECT * FROM OID_TBL,oid.sql,SAME,,"[(1234,), (1235,), (987,), (4294966256,), (99999999,), (5,), (10,), (15,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('1234', 'oid')",oid.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('01XYZ', 'oid')",oid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('01XYZ', 'oid')",oid.sql,SAME,,"[('invalid input syntax for type oid: ""01XYZ""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('9999999999', 'oid')",oid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('9999999999', 'oid')",oid.sql,SAME,,"[('value ""9999999999"" is out of range for type oid', None, None, '22003')]"
postgresql,postgresql,"SELECT pg_input_is_valid(' 1 2  4 ', 'oidvector')",oid.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('01 01XYZ', 'oidvector')",oid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('01 01XYZ', 'oidvector')",oid.sql,SAME,,"[('invalid input syntax for type oid: ""XYZ""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('01 9999999999', 'oidvector')",oid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('01 9999999999', 'oidvector')",oid.sql,SAME,,"[('value ""9999999999"" is out of range for type oid', None, None, '22003')]"
postgresql,postgresql,SELECT o.* FROM OID_TBL o WHERE o.f1 = 1234,oid.sql,SAME,,"[(1234,)]"
postgresql,postgresql,SELECT o.* FROM OID_TBL o WHERE o.f1 <> '1234',oid.sql,SAME,,"[(1235,), (987,), (4294966256,), (99999999,), (5,), (10,), (15,)]"
postgresql,postgresql,SELECT o.* FROM OID_TBL o WHERE o.f1 <= '1234',oid.sql,SAME,,"[(1234,), (987,), (5,), (10,), (15,)]"
postgresql,postgresql,SELECT o.* FROM OID_TBL o WHERE o.f1 < '1234',oid.sql,SAME,,"[(987,), (5,), (10,), (15,)]"
postgresql,postgresql,SELECT o.* FROM OID_TBL o WHERE o.f1 >= '1234',oid.sql,SAME,,"[(1234,), (1235,), (4294966256,), (99999999,)]"
postgresql,postgresql,SELECT o.* FROM OID_TBL o WHERE o.f1 > '1234',oid.sql,SAME,,"[(1235,), (4294966256,), (99999999,)]"
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE p1.prolang = 0 OR p1.prorettype = 0 OR        p1.pronargs < 0 OR        p1.pronargdefaults < 0 OR        p1.pronargdefaults > p1.pronargs OR        array_lower(p1.proargtypes, 1) != 0 OR        array_upper(p1.proargtypes, 1) != p1.pronargs-1 OR        0::oid = ANY (p1.proargtypes) OR        procost <= 0 OR        CASE WHEN proretset THEN prorows <= 0 ELSE prorows != 0 END OR        prokind NOT IN ('f', 'a', 'w', 'p') OR        provolatile NOT IN ('i', 's', 'v') OR        proparallel NOT IN ('s', 'r', 'u')",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE prosrc IS NULL",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE (prosrc = '' OR prosrc = '-') AND prosqlbody IS NULL",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc AS p1 WHERE proretset AND prokind != 'f'",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc AS p1 WHERE prosecdef ORDER BY 1",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc AS p1 WHERE (pronargdefaults <> 0) != (proargdefaults IS NOT NULL)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE prolang = 13 AND (probin IS NULL OR probin = '' OR probin = '-')",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE prolang != 13 AND probin IS NOT NULL",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname, p2.oid, p2.proname FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.proname = p2.proname AND     p1.pronargs = p2.pronargs AND     p1.proargtypes = p2.proargtypes",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname, p2.oid, p2.proname FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid < p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     (p1.prokind != 'a' OR p2.prokind != 'a') AND     (p1.prolang != p2.prolang OR      p1.prokind != p2.prokind OR      p1.prosecdef != p2.prosecdef OR      p1.proleakproof != p2.proleakproof OR      p1.proisstrict != p2.proisstrict OR      p1.proretset != p2.proretset OR      p1.provolatile != p2.provolatile OR      p1.pronargs != p2.pronargs)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT p1.prorettype::regtype, p2.prorettype::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     p1.prosrc NOT LIKE E'range\\_constructor_' AND     p2.prosrc NOT LIKE E'range\\_constructor_' AND     p1.prosrc NOT LIKE E'multirange\\_constructor_' AND     p2.prosrc NOT LIKE E'multirange\\_constructor_' AND     (p1.prorettype < p2.prorettype) ORDER BY 1, 2",opr_sanity.sql,SAME,,"[('bigint', 'xid8'), ('text', 'character varying'), ('timestamp without time zone', 'timestamp with time zone'), ('txid_snapshot', 'pg_snapshot')]"
postgresql,postgresql,"SELECT DISTINCT p1.proargtypes[0]::regtype, p2.proargtypes[0]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     p1.prosrc NOT LIKE E'range\\_constructor_' AND     p2.prosrc NOT LIKE E'range\\_constructor_' AND     p1.prosrc NOT LIKE E'multirange\\_constructor_' AND     p2.prosrc NOT LIKE E'multirange\\_constructor_' AND     (p1.proargtypes[0] < p2.proargtypes[0]) ORDER BY 1, 2",opr_sanity.sql,SAME,,"[('bigint', 'xid8'), ('text', 'character'), ('text', 'character varying'), ('timestamp without time zone', 'timestamp with time zone'), ('bit', 'bit varying'), ('txid_snapshot', 'pg_snapshot')]"
postgresql,postgresql,"SELECT DISTINCT p1.proargtypes[1]::regtype, p2.proargtypes[1]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     p1.prosrc NOT LIKE E'range\\_constructor_' AND     p2.prosrc NOT LIKE E'range\\_constructor_' AND     p1.prosrc NOT LIKE E'multirange\\_constructor_' AND     p2.prosrc NOT LIKE E'multirange\\_constructor_' AND     (p1.proargtypes[1] < p2.proargtypes[1]) ORDER BY 1, 2",opr_sanity.sql,SAME,,"[('integer', 'xid'), ('timestamp without time zone', 'timestamp with time zone'), ('bit', 'bit varying'), ('txid_snapshot', 'pg_snapshot'), ('anyrange', 'anymultirange')]"
postgresql,postgresql,"SELECT DISTINCT p1.proargtypes[2]::regtype, p2.proargtypes[2]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[2] < p2.proargtypes[2]) ORDER BY 1, 2",opr_sanity.sql,SAME,,"[('timestamp without time zone', 'timestamp with time zone')]"
postgresql,postgresql,"SELECT DISTINCT p1.proargtypes[3]::regtype, p2.proargtypes[3]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[3] < p2.proargtypes[3]) ORDER BY 1, 2",opr_sanity.sql,SAME,,"[('timestamp without time zone', 'timestamp with time zone')]"
postgresql,postgresql,"SELECT DISTINCT p1.proargtypes[4]::regtype, p2.proargtypes[4]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[4] < p2.proargtypes[4]) ORDER BY 1, 2",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT p1.proargtypes[5]::regtype, p2.proargtypes[5]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[5] < p2.proargtypes[5]) ORDER BY 1, 2",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT p1.proargtypes[6]::regtype, p2.proargtypes[6]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[6] < p2.proargtypes[6]) ORDER BY 1, 2",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT p1.proargtypes[7]::regtype, p2.proargtypes[7]::regtype FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid != p2.oid AND     p1.prosrc = p2.prosrc AND     p1.prolang = 12 AND p2.prolang = 12 AND     p1.prokind != 'a' AND p2.prokind != 'a' AND     (p1.proargtypes[7] < p2.proargtypes[7]) ORDER BY 1, 2",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE p1.prorettype = 'internal'::regtype AND NOT     'internal'::regtype = ANY (p1.proargtypes)",opr_sanity.sql,SAME,,"[(2304, 'internal_in')]"
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE p1.prorettype IN     ('anyelement'::regtype, 'anyarray'::regtype, 'anynonarray'::regtype,      'anyenum'::regtype)   AND NOT     ('anyelement'::regtype = ANY (p1.proargtypes) OR      'anyarray'::regtype = ANY (p1.proargtypes) OR      'anynonarray'::regtype = ANY (p1.proargtypes) OR      'anyenum'::regtype = ANY (p1.proargtypes) OR      'anyrange'::regtype = ANY (p1.proargtypes) OR      'anymultirange'::regtype = ANY (p1.proargtypes)) ORDER BY 2",opr_sanity.sql,SAME,,"[(2296, 'anyarray_in'), (2502, 'anyarray_recv'), (2312, 'anyelement_in'), (3504, 'anyenum_in'), (2777, 'anynonarray_in'), (750, 'array_in'), (2400, 'array_recv'), (3506, 'enum_in'), (3532, 'enum_recv')]"
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE p1.prorettype IN ('anyrange'::regtype, 'anymultirange'::regtype)   AND NOT     ('anyrange'::regtype = ANY (p1.proargtypes) OR       'anymultirange'::regtype = ANY (p1.proargtypes)) ORDER BY 2",opr_sanity.sql,SAME,,"[(4229, 'anymultirange_in'), (3832, 'anyrange_in'), (4231, 'multirange_in'), (4233, 'multirange_recv'), (3876, 'range_gist_union'), (3834, 'range_in'), (3836, 'range_recv')]"
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE p1.prorettype IN     ('anycompatible'::regtype, 'anycompatiblearray'::regtype,      'anycompatiblenonarray'::regtype)   AND NOT     ('anycompatible'::regtype = ANY (p1.proargtypes) OR      'anycompatiblearray'::regtype = ANY (p1.proargtypes) OR      'anycompatiblenonarray'::regtype = ANY (p1.proargtypes) OR      'anycompatiblerange'::regtype = ANY (p1.proargtypes)) ORDER BY 2",opr_sanity.sql,SAME,,"[(5086, 'anycompatible_in'), (5088, 'anycompatiblearray_in'), (5090, 'anycompatiblearray_recv'), (5092, 'anycompatiblenonarray_in')]"
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE p1.prorettype = 'anycompatiblerange'::regtype   AND NOT      'anycompatiblerange'::regtype = ANY (p1.proargtypes) ORDER BY 2",opr_sanity.sql,SAME,,"[(5094, 'anycompatiblerange_in')]"
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE 'cstring'::regtype = ANY (p1.proargtypes)     AND NOT EXISTS(SELECT 1 FROM pg_type WHERE typinput = p1.oid)     AND NOT EXISTS(SELECT 1 FROM pg_conversion WHERE conproc = p1.oid)     AND p1.oid != 'shell_in(cstring)'::regprocedure ORDER BY 1",opr_sanity.sql,SAME,,"[(2293, 'cstring_out'), (2501, 'cstring_send'), (3506, 'enum_in')]"
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE  p1.prorettype = 'cstring'::regtype     AND NOT EXISTS(SELECT 1 FROM pg_type WHERE typoutput = p1.oid)     AND NOT EXISTS(SELECT 1 FROM pg_type WHERE typmodout = p1.oid)     AND p1.oid != 'shell_out(void)'::regprocedure ORDER BY 1",opr_sanity.sql,SAME,,"[(2292, 'cstring_in'), (2500, 'cstring_recv'), (3507, 'enum_out')]"
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE proallargtypes IS NOT NULL AND     array_length(proallargtypes,1) < array_length(proargtypes,1)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE proargmodes IS NOT NULL AND     array_length(proargmodes,1) < array_length(proargtypes,1)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE proargnames IS NOT NULL AND     array_length(proargnames,1) < array_length(proargtypes,1)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE proallargtypes IS NOT NULL AND proargmodes IS NOT NULL AND     array_length(proallargtypes,1) <> array_length(proargmodes,1)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE proallargtypes IS NOT NULL AND proargnames IS NOT NULL AND     array_length(proallargtypes,1) <> array_length(proargnames,1)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 WHERE proargmodes IS NOT NULL AND proargnames IS NOT NULL AND     array_length(proargmodes,1) <> array_length(proargnames,1)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname, p1.proargtypes, p1.proallargtypes, p1.proargmodes FROM pg_proc as p1 WHERE proallargtypes IS NOT NULL AND   ARRAY(SELECT unnest(proargtypes)) <>   ARRAY(SELECT proallargtypes[i]         FROM generate_series(1, array_length(proallargtypes, 1)) g(i)         WHERE proargmodes IS NULL OR proargmodes[i] IN ('i', 'b', 'v'))",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT oid::regprocedure, provariadic::regtype, proargtypes::regtype[] FROM pg_proc WHERE provariadic != 0 AND case proargtypes[array_length(proargtypes, 1)-1] 	WHEN '""any""'::regtype THEN '""any""'::regtype 	WHEN 'anyarray'::regtype THEN 'anyelement'::regtype 	WHEN 'anycompatiblearray'::regtype THEN 'anycompatible'::regtype 	ELSE (SELECT t.oid 		  FROM pg_type t 		  WHERE t.typarray = proargtypes[array_length(proargtypes, 1)-1]) 	END  != provariadic",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT oid::regprocedure, proargmodes, provariadic FROM pg_proc WHERE (proargmodes IS NOT NULL AND 'v' = any(proargmodes))     IS DISTINCT FROM     (provariadic != 0)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname, p2.oid, p2.proname FROM pg_proc AS p1, pg_proc AS p2 WHERE p2.oid = p1.prosupport AND     (p2.prorettype != 'internal'::regtype OR p2.proretset OR p2.pronargs != 1      OR p2.proargtypes[0] != 'internal'::regtype)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc as p1 LEFT JOIN pg_description as d      ON p1.tableoid = d.classoid and p1.oid = d.objoid and d.objsubid = 0 WHERE d.classoid IS NULL AND p1.oid <= 9999",opr_sanity.sql,SAME,,[]
postgresql,postgresql,SELECT p1.oid::regprocedure FROM pg_proc p1 JOIN pg_namespace pn      ON pronamespace = pn.oid WHERE nspname = 'pg_catalog' AND proleakproof ORDER BY 1,opr_sanity.sql,SAME,,"[('boollt(boolean,boolean)',), ('boolgt(boolean,boolean)',), ('booleq(boolean,boolean)',), ('chareq(""char"",""char"")',), ('nameeq(name,name)',), ('int2eq(smallint,smallint)',), ('int2lt(smallint,smallint)',), ('int4eq(integer,integer)',), ('int4lt(integer,integer)',), ('texteq(text,text)',), ('xideq(xid,xid)',), ('cideq(cid,cid)',), ('charne(""char"",""char"")',), ('charle(""char"",""char"")',), ('chargt(""char"",""char"")',), ('charge(""char"",""char"")',), ('boolne(boolean,boolean)',), ('int4ne(integer,integer)',), ('int2ne(smallint,smallint)',), ('int2gt(smallint,smallint)',), ('int4gt(integer,integer)',), ('int2le(smallint,smallint)',), ('int4le(integer,integer)',), ('int4ge(integer,integer)',), ('int2ge(smallint,smallint)',), ('textne(text,text)',), ('int24eq(smallint,integer)',), ('int42eq(integer,smallint)',), ('int24lt(smallint,integer)',), ('int42lt(integer,smallint)',), ('int24gt(smallint,integer)',), ('int42gt(integer,smallint)',), ('int24ne(smallint,integer)',), ('int42ne(integer,smallint)',), ('int24le(smallint,integer)',), ('int42le(integer,smallint)',), ('int24ge(smallint,integer)',), ('int42ge(integer,smallint)',), ('oideq(oid,oid)',), ('oidne(oid,oid)',), ('float8(smallint)',), ('float4(smallint)',), ('nameeqtext(name,text)',), ('namelttext(name,text)',), ('nameletext(name,text)',), ('namegetext(name,text)',), ('namegttext(name,text)',), ('namenetext(name,text)',), ('btnametextcmp(name,text)',), ('texteqname(text,name)',), ('textltname(text,name)',), ('textlename(text,name)',), ('textgename(text,name)',), ('textgtname(text,name)',), ('textnename(text,name)',), ('bttextnamecmp(text,name)',), ('float4eq(real,real)',), ('float4ne(real,real)',), ('float4lt(real,real)',), ('float4le(real,real)',), ('float4gt(real,real)',), ('float4ge(real,real)',), ('float8eq(double precision,double precision)',), ('float8ne(double precision,double precision)',), ('float8lt(double precision,double precision)',), ('float8le(double precision,double precision)',), ('float8gt(double precision,double precision)',), ('float8ge(double precision,double precision)',), ('float48eq(real,double precision)',), ('float48ne(real,double precision)',), ('float48lt(real,double precision)',), ('float48le(real,double precision)',), ('float48gt(real,double precision)',), ('float48ge(real,double precision)',), ('float84eq(double precision,real)',), ('float84ne(double precision,real)',), ('float84lt(double precision,real)',), ('float84le(double precision,real)',), ('float84gt(double precision,real)',), ('float84ge(double precision,real)',), ('float8(real)',), ('int4(smallint)',), ('float8(integer)',), ('float4(integer)',), ('btint2cmp(smallint,smallint)',), ('btint4cmp(integer,integer)',), ('btfloat4cmp(real,real)',), ('btfloat8cmp(double precision,double precision)',), ('btoidcmp(oid,oid)',), ('btcharcmp(""char"",""char"")',), ('btnamecmp(name,name)',), ('bttextcmp(text,text)',), ('cash_cmp(money,money)',), ('btoidvectorcmp(oidvector,oidvector)',), ('text(name)',), ('name(text)',), ('name(character)',), ('text_larger(text,text)',), ('text_smaller(text,text)',), ('int8eq(bigint,bigint)',), ('int8ne(bigint,bigint)',), ('int8lt(bigint,bigint)',), ('int8gt(bigint,bigint)',), ('int8le(bigint,bigint)',), ('int8ge(bigint,bigint)',), ('int84eq(bigint,integer)',), ('int84ne(bigint,integer)',), ('int84lt(bigint,integer)',), ('int84gt(bigint,integer)',), ('int84le(bigint,integer)',), ('int84ge(bigint,integer)',), ('int8(integer)',), ('float8(bigint)',), ('oidvectorne(oidvector,oidvector)',), ('float4(bigint)',), ('namelt(name,name)',), ('namele(name,name)',), ('namegt(name,name)',), ('namege(name,name)',), ('namene(name,name)',), ('oidvectorlt(oidvector,oidvector)',), ('oidvectorle(oidvector,oidvector)',), ('oidvectoreq(oidvector,oidvector)',), ('oidvectorge(oidvector,oidvector)',), ('oidvectorgt(oidvector,oidvector)',), ('oidlt(oid,oid)',), ('oidle(oid,oid)',), ('text_lt(text,text)',), ('text_le(text,text)',), ('text_gt(text,text)',), ('text_ge(text,text)',), ('int8(smallint)',), ('macaddr_eq(macaddr,macaddr)',), ('macaddr_lt(macaddr,macaddr)',), ('macaddr_le(macaddr,macaddr)',), ('macaddr_gt(macaddr,macaddr)',), ('macaddr_ge(macaddr,macaddr)',), ('macaddr_ne(macaddr,macaddr)',), ('macaddr_cmp(macaddr,macaddr)',), ('btint8cmp(bigint,bigint)',), ('int48eq(integer,bigint)',), ('int48ne(integer,bigint)',), ('int48lt(integer,bigint)',), ('int48gt(integer,bigint)',), ('int48le(integer,bigint)',), ('int48ge(integer,bigint)',), ('cash_eq(money,money)',), ('cash_ne(money,money)',), ('cash_lt(money,money)',), ('cash_le(money,money)',), ('cash_gt(money,money)',), ('cash_ge(money,money)',), ('network_eq(inet,inet)',), ('network_lt(inet,inet)',), ('network_le(inet,inet)',), ('network_gt(inet,inet)',), ('network_ge(inet,inet)',), ('network_ne(inet,inet)',), ('network_cmp(inet,inet)',), ('lseg_eq(lseg,lseg)',), ('bpchareq(character,character)',), ('bpcharlt(character,character)',), ('bpcharle(character,character)',), ('bpchargt(character,character)',), ('bpcharge(character,character)',), ('bpcharne(character,character)',), ('bpchar_larger(character,character)',), ('bpchar_smaller(character,character)',), ('bpcharcmp(character,character)',), ('date_eq(date,date)',), ('date_lt(date,date)',), ('date_le(date,date)',), ('date_gt(date,date)',), ('date_ge(date,date)',), ('date_ne(date,date)',), ('date_cmp(date,date)',), ('time_lt(time without time zone,time without time zone)',), ('time_le(time without time zone,time without time zone)',), ('time_gt(time without time zone,time without time zone)',), ('time_ge(time without time zone,time without time zone)',), ('time_ne(time without time zone,time without time zone)',), ('time_cmp(time without time zone,time without time zone)',), ('time_eq(time without time zone,time without time zone)',), ('timestamptz_eq(timestamp with time zone,timestamp with time zone)',), ('timestamptz_ne(timestamp with time zone,timestamp with time zone)',), ('timestamptz_lt(timestamp with time zone,timestamp with time zone)',), ('timestamptz_le(timestamp with time zone,timestamp with time zone)',), ('timestamptz_ge(timestamp with time zone,timestamp with time zone)',), ('timestamptz_gt(timestamp with time zone,timestamp with time zone)',), ('interval_eq(interval,interval)',), ('interval_ne(interval,interval)',), ('interval_lt(interval,interval)',), ('interval_le(interval,interval)',), ('interval_ge(interval,interval)',), ('interval_gt(interval,interval)',), ('charlt(""char"",""char"")',), ('tidne(tid,tid)',), ('int8(oid)',), ('tideq(tid,tid)',), ('timestamptz_cmp(timestamp with time zone,timestamp with time zone)',), ('interval_cmp(interval,interval)',), ('xideqint4(xid,integer)',), ('timetz_eq(time with time zone,time with time zone)',), ('timetz_ne(time with time zone,time with time zone)',), ('timetz_lt(time with time zone,time with time zone)',), ('timetz_le(time with time zone,time with time zone)',), ('timetz_ge(time with time zone,time with time zone)',), ('timetz_gt(time with time zone,time with time zone)',), ('timetz_cmp(time with time zone,time with time zone)',), ('""interval""(time without time zone)',), ('name(character varying)',), ('""varchar""(name)',), ('circle_eq(circle,circle)',), ('circle_ne(circle,circle)',), ('circle_lt(circle,circle)',), ('circle_gt(circle,circle)',), ('circle_le(circle,circle)',), ('circle_ge(circle,circle)',), ('lseg_ne(lseg,lseg)',), ('lseg_lt(lseg,lseg)',), ('lseg_le(lseg,lseg)',), ('lseg_gt(lseg,lseg)',), ('lseg_ge(lseg,lseg)',), ('biteq(bit,bit)',), ('bitne(bit,bit)',), ('bitge(bit,bit)',), ('bitgt(bit,bit)',), ('bitle(bit,bit)',), ('bitlt(bit,bit)',), ('bitcmp(bit,bit)',), ('oidgt(oid,oid)',), ('oidge(oid,oid)',), ('varbiteq(bit varying,bit varying)',), ('varbitne(bit varying,bit varying)',), ('varbitge(bit varying,bit varying)',), ('varbitgt(bit varying,bit varying)',), ('varbitle(bit varying,bit varying)',), ('varbitlt(bit varying,bit varying)',), ('varbitcmp(bit varying,bit varying)',), ('boolle(boolean,boolean)',), ('boolge(boolean,boolean)',), ('btboolcmp(boolean,boolean)',), ('""numeric""(integer)',), ('""numeric""(real)',), ('""numeric""(double precision)',), ('""numeric""(bigint)',), ('""numeric""(smallint)',), ('int28eq(smallint,bigint)',), ('int28ne(smallint,bigint)',), ('int28lt(smallint,bigint)',), ('int28gt(smallint,bigint)',), ('int28le(smallint,bigint)',), ('int28ge(smallint,bigint)',), ('int82eq(bigint,smallint)',), ('int82ne(bigint,smallint)',), ('int82lt(bigint,smallint)',), ('int82gt(bigint,smallint)',), ('int82le(bigint,smallint)',), ('int82ge(bigint,smallint)',), ('byteaeq(bytea,bytea)',), ('bytealt(bytea,bytea)',), ('byteale(bytea,bytea)',), ('byteagt(bytea,bytea)',), ('byteage(bytea,bytea)',), ('byteane(bytea,bytea)',), ('byteacmp(bytea,bytea)',), ('timestamp_cmp(timestamp without time zone,timestamp without time zone)',), ('timestamp_eq(timestamp without time zone,timestamp without time zone)',), ('timestamp_ne(timestamp without time zone,timestamp without time zone)',), ('timestamp_lt(timestamp without time zone,timestamp without time zone)',), ('timestamp_le(timestamp without time zone,timestamp without time zone)',), ('timestamp_ge(timestamp without time zone,timestamp without time zone)',), ('timestamp_gt(timestamp without time zone,timestamp without time zone)',), ('text_pattern_lt(text,text)',), ('text_pattern_le(text,text)',), ('text_pattern_ge(text,text)',), ('text_pattern_gt(text,text)',), ('bttext_pattern_cmp(text,text)',), ('bpchar_pattern_lt(character,character)',), ('bpchar_pattern_le(character,character)',), ('bpchar_pattern_ge(character,character)',), ('bpchar_pattern_gt(character,character)',), ('btbpchar_pattern_cmp(character,character)',), ('btint48cmp(integer,bigint)',), ('btint84cmp(bigint,integer)',), ('btint24cmp(smallint,integer)',), ('btint42cmp(integer,smallint)',), ('btint28cmp(smallint,bigint)',), ('btint82cmp(bigint,smallint)',), ('btfloat48cmp(real,double precision)',), ('btfloat84cmp(double precision,real)',), ('md5(text)',), ('md5(bytea)',), ('bool(integer)',), ('int4(boolean)',), ('tidgt(tid,tid)',), ('tidlt(tid,tid)',), ('tidge(tid,tid)',), ('tidle(tid,tid)',), ('bttidcmp(tid,tid)',), ('uuid_lt(uuid,uuid)',), ('uuid_le(uuid,uuid)',), ('uuid_eq(uuid,uuid)',), ('uuid_ge(uuid,uuid)',), ('uuid_gt(uuid,uuid)',), ('uuid_ne(uuid,uuid)',), ('uuid_cmp(uuid,uuid)',), ('pg_lsn_lt(pg_lsn,pg_lsn)',), ('pg_lsn_le(pg_lsn,pg_lsn)',), ('pg_lsn_eq(pg_lsn,pg_lsn)',), ('pg_lsn_ge(pg_lsn,pg_lsn)',), ('pg_lsn_gt(pg_lsn,pg_lsn)',), ('pg_lsn_ne(pg_lsn,pg_lsn)',), ('pg_lsn_cmp(pg_lsn,pg_lsn)',), ('xidneq(xid,xid)',), ('xidneqint4(xid,integer)',), ('sha224(bytea)',), ('sha256(bytea)',), ('sha384(bytea)',), ('sha512(bytea)',), ('gen_random_uuid()',), ('starts_with(text,text)',), ('macaddr8_eq(macaddr8,macaddr8)',), ('macaddr8_lt(macaddr8,macaddr8)',), ('macaddr8_le(macaddr8,macaddr8)',), ('macaddr8_gt(macaddr8,macaddr8)',), ('macaddr8_ge(macaddr8,macaddr8)',), ('macaddr8_ne(macaddr8,macaddr8)',), ('macaddr8_cmp(macaddr8,macaddr8)',), ('macaddr8(macaddr)',), ('xid8lt(xid8,xid8)',), ('xid8gt(xid8,xid8)',), ('xid8le(xid8,xid8)',), ('xid8ge(xid8,xid8)',), ('xid8eq(xid8,xid8)',), ('xid8ne(xid8,xid8)',), ('xid8cmp(xid8,xid8)',)]"
postgresql,postgresql,"select proname, oid from pg_catalog.pg_proc where proname in (   'lo_open',   'lo_close',   'lo_creat',   'lo_create',   'lo_unlink',   'lo_lseek',   'lo_lseek64',   'lo_tell',   'lo_tell64',   'lo_truncate',   'lo_truncate64',   'loread',   'lowrite') and pronamespace = (select oid from pg_catalog.pg_namespace                     where nspname = 'pg_catalog') order by 1",opr_sanity.sql,SAME,,"[('lo_close', 953), ('lo_creat', 957), ('lo_create', 715), ('lo_lseek', 956), ('lo_lseek64', 3170), ('lo_open', 952), ('lo_tell', 958), ('lo_tell64', 3171), ('lo_truncate', 1004), ('lo_truncate64', 3172), ('lo_unlink', 964), ('loread', 954), ('lowrite', 955)]"
postgresql,postgresql,"SELECT p1.oid, p1.proname FROM pg_proc AS p1 WHERE provolatile = 'i' AND proparallel = 'u'",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM pg_cast c WHERE castsource = 0 OR casttarget = 0 OR castcontext NOT IN ('e', 'a', 'i')     OR castmethod NOT IN ('f', 'b' ,'i')",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM pg_cast c WHERE (castmethod = 'f' AND castfunc = 0)    OR (castmethod IN ('b', 'i') AND castfunc <> 0)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_cast c WHERE castsource = casttarget AND castfunc = 0,opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT c.* FROM pg_cast c, pg_proc p WHERE c.castfunc = p.oid AND p.pronargs < 2 AND castsource = casttarget",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT c.* FROM pg_cast c, pg_proc p WHERE c.castfunc = p.oid AND     ((p.pronargs > 1 AND p.proargtypes[1] != 'int4'::regtype) OR      (p.pronargs > 2 AND p.proargtypes[2] != 'bool'::regtype))",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT castsource::regtype, casttarget::regtype, castfunc, castcontext FROM pg_cast c WHERE c.castmethod = 'b' AND     NOT EXISTS (SELECT 1 FROM pg_cast k                 WHERE k.castmethod = 'b' AND                     k.castsource = c.casttarget AND                     k.casttarget = c.castsource)",opr_sanity.sql,SAME,,"[('text', 'character', 0, 'i'), ('character varying', 'character', 0, 'i'), ('pg_node_tree', 'text', 0, 'i'), ('pg_ndistinct', 'bytea', 0, 'i'), ('pg_dependencies', 'bytea', 0, 'i'), ('pg_mcv_list', 'bytea', 0, 'i'), ('cidr', 'inet', 0, 'i'), ('xml', 'text', 0, 'a'), ('xml', 'character varying', 0, 'a'), ('xml', 'character', 0, 'a')]"
postgresql,postgresql,"SELECT c.oid, c.conname FROM pg_conversion as c WHERE c.conproc = 0 OR     pg_encoding_to_char(conforencoding) = '' OR     pg_encoding_to_char(contoencoding) = ''",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p.oid, p.proname, c.oid, c.conname FROM pg_proc p, pg_conversion c WHERE p.oid = c.conproc AND     (p.prorettype != 'int4'::regtype OR p.proretset OR      p.pronargs != 6 OR      p.proargtypes[0] != 'int4'::regtype OR      p.proargtypes[1] != 'int4'::regtype OR      p.proargtypes[2] != 'cstring'::regtype OR      p.proargtypes[3] != 'internal'::regtype OR      p.proargtypes[4] != 'int4'::regtype OR      p.proargtypes[5] != 'bool'::regtype)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT c.oid, c.conname FROM pg_conversion as c WHERE condefault AND     convert('ABC'::bytea, pg_encoding_to_char(conforencoding),             pg_encoding_to_char(contoencoding)) != 'ABC'",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname FROM pg_operator as o1 WHERE (o1.oprkind != 'b' AND o1.oprkind != 'l') OR     o1.oprresult = 0 OR o1.oprcode = 0",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname FROM pg_operator as o1 WHERE (o1.oprleft = 0 and o1.oprkind != 'l') OR     (o1.oprleft != 0 and o1.oprkind = 'l') OR     o1.oprright = 0",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode FROM pg_operator AS o1, pg_operator AS o2 WHERE o1.oid != o2.oid AND     o1.oprname = o2.oprname AND     o1.oprkind = o2.oprkind AND     o1.oprleft = o2.oprleft AND     o1.oprright = o2.oprright",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode FROM pg_operator AS o1, pg_operator AS o2 WHERE o1.oprcom = o2.oid AND     (o1.oprkind != 'b' OR      o1.oprleft != o2.oprright OR      o1.oprright != o2.oprleft OR      o1.oprresult != o2.oprresult OR      o1.oid != o2.oprcom)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode FROM pg_operator AS o1, pg_operator AS o2 WHERE o1.oprnegate = o2.oid AND     (o1.oprkind != o2.oprkind OR      o1.oprleft != o2.oprleft OR      o1.oprright != o2.oprright OR      o1.oprresult != 'bool'::regtype OR      o2.oprresult != 'bool'::regtype OR      o1.oid != o2.oprnegate OR      o1.oid = o2.oid)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT o1.oprname AS op1, o2.oprname AS op2 FROM pg_operator o1, pg_operator o2 WHERE o1.oprcom = o2.oid AND o1.oprname <= o2.oprname ORDER BY 1, 2",opr_sanity.sql,SAME,,"[('#', '#'), ('&', '&'), ('&&', '&&'), ('*', '*'), ('*<', '*>'), ('*<=', '*>='), ('*<>', '*<>'), ('*=', '*='), ('+', '+'), ('-|-', '-|-'), ('<', '>'), ('<->', '<->'), ('<<', '>>'), ('<<=', '>>='), ('<=', '>='), ('<>', '<>'), ('<@', '@>'), ('=', '='), ('?#', '?#'), ('?-', '?-'), ('?-|', '?-|'), ('?|', '?|'), ('?||', '?||'), ('@@', '@@'), ('@@@', '@@@'), ('|', '|'), ('~<=~', '~>=~'), ('~<~', '~>~'), ('~=', '~=')]"
postgresql,postgresql,"SELECT DISTINCT o1.oprname AS op1, o2.oprname AS op2 FROM pg_operator o1, pg_operator o2 WHERE o1.oprnegate = o2.oid AND o1.oprname <= o2.oprname ORDER BY 1, 2",opr_sanity.sql,SAME,,"[('!~', '~'), ('!~*', '~*'), ('!~~', '~~'), ('!~~*', '~~*'), ('*<', '*>='), ('*<=', '*>'), ('*<>', '*='), ('<', '>='), ('<=', '>'), ('<>', '='), ('<>', '~='), ('~<=~', '~>~'), ('~<~', '~>=~')]"
postgresql,postgresql,"SELECT o1.oid, o1.oprname FROM pg_operator AS o1 WHERE (o1.oprcanmerge OR o1.oprcanhash) AND NOT     (o1.oprkind = 'b' AND o1.oprresult = 'bool'::regtype AND o1.oprcom != 0)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname, o2.oid, o2.oprname FROM pg_operator AS o1, pg_operator AS o2 WHERE o1.oprcom = o2.oid AND     (o1.oprcanmerge != o2.oprcanmerge OR      o1.oprcanhash != o2.oprcanhash)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname FROM pg_operator AS o1 WHERE o1.oprcanmerge AND NOT EXISTS   (SELECT 1 FROM pg_amop    WHERE amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree') AND          amopopr = o1.oid AND amopstrategy = 3)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname, p.amopfamily FROM pg_operator AS o1, pg_amop p WHERE amopopr = o1.oid   AND amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree')   AND amopstrategy = 3   AND NOT o1.oprcanmerge",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname FROM pg_operator AS o1 WHERE o1.oprcanhash AND NOT EXISTS   (SELECT 1 FROM pg_amop    WHERE amopmethod = (SELECT oid FROM pg_am WHERE amname = 'hash') AND          amopopr = o1.oid AND amopstrategy = 1)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname, p.amopfamily FROM pg_operator AS o1, pg_amop p WHERE amopopr = o1.oid   AND amopmethod = (SELECT oid FROM pg_am WHERE amname = 'hash')   AND NOT o1.oprcanhash",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname, p1.oid, p1.proname FROM pg_operator AS o1, pg_proc AS p1 WHERE o1.oprcode = p1.oid AND     (o1.oprcanmerge OR o1.oprcanhash) AND     p1.provolatile = 'v'",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname, p2.oid, p2.proname FROM pg_operator AS o1, pg_proc AS p2 WHERE o1.oprrest = p2.oid AND     (o1.oprresult != 'bool'::regtype OR      p2.prorettype != 'float8'::regtype OR p2.proretset OR      p2.pronargs != 4 OR      p2.proargtypes[0] != 'internal'::regtype OR      p2.proargtypes[1] != 'oid'::regtype OR      p2.proargtypes[2] != 'internal'::regtype OR      p2.proargtypes[3] != 'int4'::regtype)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname, p2.oid, p2.proname FROM pg_operator AS o1, pg_proc AS p2 WHERE o1.oprjoin = p2.oid AND     (o1.oprkind != 'b' OR o1.oprresult != 'bool'::regtype OR      p2.prorettype != 'float8'::regtype OR p2.proretset OR      p2.pronargs != 5 OR      p2.proargtypes[0] != 'internal'::regtype OR      p2.proargtypes[1] != 'oid'::regtype OR      p2.proargtypes[2] != 'internal'::regtype OR      p2.proargtypes[3] != 'int2'::regtype OR      p2.proargtypes[4] != 'internal'::regtype)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprname FROM pg_operator as o1 LEFT JOIN pg_description as d      ON o1.tableoid = d.classoid and o1.oid = d.objoid and d.objsubid = 0 WHERE d.classoid IS NULL AND o1.oid <= 9999",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"WITH funcdescs AS (   SELECT p.oid as p_oid, proname, o.oid as o_oid,     pd.description as prodesc,     'implementation of ' || oprname || ' operator' as expecteddesc,     od.description as oprdesc   FROM pg_proc p JOIN pg_operator o ON oprcode = p.oid        LEFT JOIN pg_description pd ON          (pd.objoid = p.oid and pd.classoid = p.tableoid and pd.objsubid = 0)        LEFT JOIN pg_description od ON          (od.objoid = o.oid and od.classoid = o.tableoid and od.objsubid = 0)   WHERE o.oid <= 9999 ) SELECT * FROM funcdescs   WHERE prodesc IS DISTINCT FROM expecteddesc     AND oprdesc NOT LIKE 'deprecated%'     AND prodesc IS DISTINCT FROM oprdesc",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"WITH funcdescs AS (   SELECT p.oid as p_oid, proname, o.oid as o_oid,     pd.description as prodesc,     'implementation of ' || oprname || ' operator' as expecteddesc,     od.description as oprdesc   FROM pg_proc p JOIN pg_operator o ON oprcode = p.oid        LEFT JOIN pg_description pd ON          (pd.objoid = p.oid and pd.classoid = p.tableoid and pd.objsubid = 0)        LEFT JOIN pg_description od ON          (od.objoid = o.oid and od.classoid = o.tableoid and od.objsubid = 0)   WHERE o.oid <= 9999 ) SELECT p_oid, proname, prodesc FROM funcdescs   WHERE prodesc IS DISTINCT FROM expecteddesc     AND oprdesc NOT LIKE 'deprecated%' ORDER BY 1",opr_sanity.sql,SAME,,"[(378, 'array_append', 'append element onto end of array'), (379, 'array_prepend', 'prepend element onto front of array'), (1035, 'aclinsert', 'add/update ACL item'), (1036, 'aclremove', 'remove ACL item'), (1037, 'aclcontains', 'contains'), (3217, 'jsonb_extract_path', 'get value from jsonb with path elements'), (3940, 'jsonb_extract_path_text', 'get value from jsonb as text with path elements'), (3951, 'json_extract_path', 'get value from json with path elements'), (3953, 'json_extract_path_text', 'get value from json as text with path elements')]"
postgresql,postgresql,"SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode FROM pg_operator AS o1, pg_operator AS o2, pg_proc AS p1, pg_proc AS p2 WHERE o1.oprcom = o2.oid AND p1.oid = o1.oprcode AND p2.oid = o2.oprcode AND     (p1.provolatile != p2.provolatile OR      p1.proleakproof != p2.proleakproof)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode FROM pg_operator AS o1, pg_operator AS o2, pg_proc AS p1, pg_proc AS p2 WHERE o1.oprnegate = o2.oid AND p1.oid = o1.oprcode AND p2.oid = o2.oprcode AND     (p1.provolatile != p2.provolatile OR      p1.proleakproof != p2.proleakproof)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT pp.oid::regprocedure as proc, pp.provolatile as vp, pp.proleakproof as lp,        po.oid::regprocedure as opr, po.provolatile as vo, po.proleakproof as lo FROM pg_proc pp, pg_proc po, pg_operator o, pg_amproc ap, pg_amop ao WHERE pp.oid = ap.amproc AND po.oid = o.oprcode AND o.oid = ao.amopopr AND     ao.amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree') AND     ao.amopfamily = ap.amprocfamily AND     ao.amoplefttype = ap.amproclefttype AND     ao.amoprighttype = ap.amprocrighttype AND     ap.amprocnum = 1 AND     (pp.provolatile != po.provolatile OR      pp.proleakproof != po.proleakproof) ORDER BY 1",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid, aggfnoid::oid FROM pg_aggregate as a WHERE aggfnoid = 0 OR aggtransfn = 0 OR     aggkind NOT IN ('n', 'o', 'h') OR     aggnumdirectargs < 0 OR     (aggkind = 'n' AND aggnumdirectargs > 0) OR     aggfinalmodify NOT IN ('r', 's', 'w') OR     aggmfinalmodify NOT IN ('r', 's', 'w') OR     aggtranstype = 0 OR aggtransspace < 0 OR aggmtransspace < 0",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a.aggfnoid::oid, p.proname FROM pg_aggregate as a, pg_proc as p WHERE a.aggfnoid = p.oid AND     (p.prokind != 'a' OR p.proretset OR p.pronargs < a.aggnumdirectargs)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT oid, proname FROM pg_proc as p WHERE p.prokind = 'a' AND     NOT EXISTS (SELECT 1 FROM pg_aggregate a WHERE a.aggfnoid = p.oid)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a.aggfnoid::oid, p.proname FROM pg_aggregate as a, pg_proc as p WHERE a.aggfnoid = p.oid AND     a.aggfinalfn = 0 AND p.prorettype != a.aggtranstype",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid, aggfnoid::oid FROM pg_aggregate as a WHERE aggmtranstype != 0 AND     (aggmtransfn = 0 OR aggminvtransfn = 0)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid, aggfnoid::oid FROM pg_aggregate as a WHERE aggmtranstype = 0 AND     (aggmtransfn != 0 OR aggminvtransfn != 0 OR aggmfinalfn != 0 OR      aggmtransspace != 0 OR aggminitval IS NOT NULL)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a.aggfnoid::oid, p.proname FROM pg_aggregate as a, pg_proc as p WHERE a.aggfnoid = p.oid AND     a.aggmtransfn != 0 AND     a.aggmfinalfn = 0 AND p.prorettype != a.aggmtranstype",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname, iptr.oid, iptr.proname FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr, pg_proc AS iptr WHERE a.aggfnoid = p.oid AND     a.aggmtransfn = ptr.oid AND     a.aggminvtransfn = iptr.oid AND     ptr.proisstrict != iptr.proisstrict",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a.aggfnoid, p.proname FROM pg_aggregate as a, pg_proc as p WHERE a.aggcombinefn = p.oid AND     a.aggtranstype = 'internal'::regtype AND p.proisstrict",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT aggfnoid, aggtranstype, aggserialfn, aggdeserialfn FROM pg_aggregate WHERE (aggserialfn != 0 OR aggdeserialfn != 0)   AND (aggtranstype != 'internal'::regtype OR aggcombinefn = 0 OR        aggserialfn = 0 OR aggdeserialfn = 0)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a.aggfnoid, p.proname FROM pg_aggregate as a, pg_proc as p WHERE a.aggserialfn = p.oid AND     (p.prorettype != 'bytea'::regtype OR p.pronargs != 1 OR      p.proargtypes[0] != 'internal'::regtype OR      NOT p.proisstrict)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a.aggfnoid, p.proname FROM pg_aggregate as a, pg_proc as p WHERE a.aggdeserialfn = p.oid AND     (p.prorettype != 'internal'::regtype OR p.pronargs != 2 OR      p.proargtypes[0] != 'bytea'::regtype OR      p.proargtypes[1] != 'internal'::regtype OR      NOT p.proisstrict)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a.aggfnoid, a.aggcombinefn, a.aggserialfn, a.aggdeserialfn,        b.aggfnoid, b.aggcombinefn, b.aggserialfn, b.aggdeserialfn FROM     pg_aggregate a, pg_aggregate b WHERE     a.aggfnoid < b.aggfnoid AND a.aggtransfn = b.aggtransfn AND     (a.aggcombinefn != b.aggcombinefn OR a.aggserialfn != b.aggserialfn      OR a.aggdeserialfn != b.aggdeserialfn)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT proname, oprname FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid ORDER BY 1, 2",opr_sanity.sql,SAME,,"[('bool_and', '<'), ('bool_or', '>'), ('every', '<'), ('max', '>'), ('min', '<')]"
postgresql,postgresql,"SELECT a.aggfnoid::oid, o.oid FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND     (oprkind != 'b' OR oprresult != 'boolean'::regtype      OR oprleft != p.proargtypes[0] OR oprright != p.proargtypes[0])",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a.aggfnoid::oid, o.oid FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND     NOT EXISTS(SELECT 1 FROM pg_amop                WHERE amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree')                      AND amopopr = o.oid                      AND amoplefttype = o.oprleft                      AND amoprighttype = o.oprright)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT proname, oprname, amopstrategy FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p,      pg_amop as ao WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND     amopopr = o.oid AND     amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree') ORDER BY 1, 2",opr_sanity.sql,SAME,,"[('bool_and', '<', 1), ('bool_or', '>', 5), ('every', '<', 1), ('max', '>', 5), ('min', '<', 1)]"
postgresql,postgresql,"SELECT p1.oid::regprocedure, p2.oid::regprocedure FROM pg_proc AS p1, pg_proc AS p2 WHERE p1.oid < p2.oid AND p1.proname = p2.proname AND     p1.prokind = 'a' AND p2.prokind = 'a' AND     array_dims(p1.proargtypes) != array_dims(p2.proargtypes) ORDER BY 1",opr_sanity.sql,SAME,,"[('count(""any"")', 'count()')]"
postgresql,postgresql,"SELECT oid, proname FROM pg_proc AS p WHERE prokind = 'a' AND proargdefaults IS NOT NULL",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT p.oid, proname FROM pg_proc AS p JOIN pg_aggregate AS a ON a.aggfnoid = p.oid WHERE prokind = 'a' AND provariadic != 0 AND a.aggkind = 'n'",opr_sanity.sql,SAME,,[]
postgresql,postgresql,SELECT f.oid FROM pg_opfamily as f WHERE f.opfmethod = 0 OR f.opfnamespace = 0,opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT oid, opfname FROM pg_opfamily f WHERE NOT EXISTS (SELECT 1 FROM pg_opclass WHERE opcfamily = f.oid)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,SELECT c1.oid FROM pg_opclass AS c1 WHERE c1.opcmethod = 0 OR c1.opcnamespace = 0 OR c1.opcfamily = 0     OR c1.opcintype = 0,opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT c1.oid, f1.oid FROM pg_opclass AS c1, pg_opfamily AS f1 WHERE c1.opcfamily = f1.oid AND c1.opcmethod != f1.opfmethod",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT c1.oid, c2.oid FROM pg_opclass AS c1, pg_opclass AS c2 WHERE c1.oid != c2.oid AND     c1.opcmethod = c2.opcmethod AND c1.opcintype = c2.opcintype AND     c1.opcdefault AND c2.opcdefault",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT oid, opcname FROM pg_opclass WHERE NOT amvalidate(oid)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.oid, a1.amname FROM pg_am AS a1 WHERE a1.amhandler = 0",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.oid, a1.amname, p1.oid, p1.proname FROM pg_am AS a1, pg_proc AS p1 WHERE p1.oid = a1.amhandler AND a1.amtype = 'i' AND     (p1.prorettype != 'index_am_handler'::regtype      OR p1.proretset      OR p1.pronargs != 1      OR p1.proargtypes[0] != 'internal'::regtype)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.oid, a1.amname, p1.oid, p1.proname FROM pg_am AS a1, pg_proc AS p1 WHERE p1.oid = a1.amhandler AND a1.amtype = 't' AND     (p1.prorettype != 'table_am_handler'::regtype      OR p1.proretset      OR p1.pronargs != 1      OR p1.proargtypes[0] != 'internal'::regtype)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.amopfamily, a1.amopstrategy FROM pg_amop as a1 WHERE a1.amopfamily = 0 OR a1.amoplefttype = 0 OR a1.amoprighttype = 0     OR a1.amopopr = 0 OR a1.amopmethod = 0 OR a1.amopstrategy < 1",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.amopfamily, a1.amopstrategy FROM pg_amop as a1 WHERE NOT ((a1.amoppurpose = 's' AND a1.amopsortfamily = 0) OR            (a1.amoppurpose = 'o' AND a1.amopsortfamily <> 0))",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.oid, f1.oid FROM pg_amop AS a1, pg_opfamily AS f1 WHERE a1.amopfamily = f1.oid AND a1.amopmethod != f1.opfmethod",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT amopmethod, amopstrategy, oprname FROM pg_amop a1 LEFT JOIN pg_operator o1 ON amopopr = o1.oid ORDER BY 1, 2, 3",opr_sanity.sql,SAME,,"[(403, 1, '*<'), (403, 1, '<'), (403, 1, '~<~'), (403, 2, '*<='), (403, 2, '<='), (403, 2, '~<=~'), (403, 3, '*='), (403, 3, '='), (403, 4, '*>='), (403, 4, '>='), (403, 4, '~>=~'), (403, 5, '*>'), (403, 5, '>'), (403, 5, '~>~'), (405, 1, '='), (783, 1, '<<'), (783, 1, '@@'), (783, 2, '&<'), (783, 3, '&&'), (783, 4, '&>'), (783, 5, '>>'), (783, 6, '-|-'), (783, 6, '~='), (783, 7, '@>'), (783, 8, '<@'), (783, 9, '&<|'), (783, 10, '<<|'), (783, 11, '|>>'), (783, 12, '|&>'), (783, 15, '<->'), (783, 16, '@>'), (783, 18, '='), (783, 19, '<>'), (783, 20, '<'), (783, 21, '<='), (783, 22, '>'), (783, 23, '>='), (783, 24, '<<'), (783, 25, '<<='), (783, 26, '>>'), (783, 27, '>>='), (783, 28, '<@'), (783, 29, '<^'), (783, 30, '>^'), (783, 48, '<@'), (783, 68, '<@'), (2742, 1, '&&'), (2742, 1, '@@'), (2742, 2, '@>'), (2742, 2, '@@@'), (2742, 3, '<@'), (2742, 4, '='), (2742, 7, '@>'), (2742, 9, '?'), (2742, 10, '?|'), (2742, 11, '?&'), (2742, 15, '@?'), (2742, 16, '@@'), (3580, 1, '<'), (3580, 1, '<<'), (3580, 1, '='), (3580, 2, '&<'), (3580, 2, '<='), (3580, 3, '&&'), (3580, 3, '='), (3580, 4, '&>'), (3580, 4, '>='), (3580, 5, '>'), (3580, 5, '>>'), (3580, 6, '~='), (3580, 7, '>>='), (3580, 7, '@>'), (3580, 8, '<<='), (3580, 8, '<@'), (3580, 9, '&<|'), (3580, 10, '<<|'), (3580, 11, '|>>'), (3580, 12, '|&>'), (3580, 16, '@>'), (3580, 17, '-|-'), (3580, 18, '='), (3580, 20, '<'), (3580, 21, '<='), (3580, 22, '>'), (3580, 23, '>='), (3580, 24, '>>'), (3580, 26, '<<'), (4000, 1, '<<'), (4000, 1, '~<~'), (4000, 2, '&<'), (4000, 2, '~<=~'), (4000, 3, '&&'), (4000, 3, '='), (4000, 4, '&>'), (4000, 4, '~>=~'), (4000, 5, '>>'), (4000, 5, '~>~'), (4000, 6, '-|-'), (4000, 6, '~='), (4000, 7, '@>'), (4000, 8, '<@'), (4000, 9, '&<|'), (4000, 10, '<<|'), (4000, 11, '<'), (4000, 11, '|>>'), (4000, 12, '<='), (4000, 12, '|&>'), (4000, 14, '>='), (4000, 15, '<->'), (4000, 15, '>'), (4000, 16, '@>'), (4000, 18, '='), (4000, 19, '<>'), (4000, 20, '<'), (4000, 21, '<='), (4000, 22, '>'), (4000, 23, '>='), (4000, 24, '<<'), (4000, 25, '<<='), (4000, 26, '>>'), (4000, 27, '>>='), (4000, 28, '^@'), (4000, 29, '<^'), (4000, 30, '>^')]"
postgresql,postgresql,"SELECT a1.amopfamily, a1.amopopr, o1.oid, o1.oprname FROM pg_amop AS a1, pg_operator AS o1 WHERE a1.amopopr = o1.oid AND a1.amoppurpose = 's' AND     (o1.oprrest = 0 OR o1.oprjoin = 0)",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.amopfamily, a1.amopopr, o1.oprname, p1.prosrc FROM pg_amop AS a1, pg_operator AS o1, pg_proc AS p1 WHERE a1.amopopr = o1.oid AND o1.oprcode = p1.oid AND     a1.amoplefttype = a1.amoprighttype AND     p1.provolatile != 'i'",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.amopfamily, a1.amopopr, o1.oprname, p1.prosrc FROM pg_amop AS a1, pg_operator AS o1, pg_proc AS p1 WHERE a1.amopopr = o1.oid AND o1.oprcode = p1.oid AND     a1.amoplefttype != a1.amoprighttype AND     p1.provolatile = 'v'",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.amprocfamily, a1.amprocnum FROM pg_amproc as a1 WHERE a1.amprocfamily = 0 OR a1.amproclefttype = 0 OR a1.amprocrighttype = 0     OR a1.amprocnum < 0 OR a1.amproc = 0",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.amprocfamily, a1.amproc, p1.prosrc FROM pg_amproc AS a1, pg_proc AS p1 WHERE a1.amproc = p1.oid AND     a1.amproclefttype = a1.amprocrighttype AND     p1.provolatile != 'i'",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.amprocfamily, a1.amproc, p1.prosrc FROM pg_amproc AS a1, pg_proc AS p1 WHERE a1.amproc = p1.oid AND     a1.amproclefttype != a1.amprocrighttype AND     p1.provolatile = 'v'",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT amp.amproc::regproc AS proc, opf.opfname AS opfamily_name,        opc.opcname AS opclass_name, opc.opcintype::regtype AS opcintype FROM pg_am AS am JOIN pg_opclass AS opc ON opc.opcmethod = am.oid JOIN pg_opfamily AS opf ON opc.opcfamily = opf.oid LEFT JOIN pg_amproc AS amp ON amp.amprocfamily = opf.oid AND     amp.amproclefttype = opc.opcintype AND amp.amprocnum = 4 WHERE am.amname = 'btree' AND     amp.amproc IS DISTINCT FROM 'btequalimage'::regproc ORDER BY 1, 2, 3",opr_sanity.sql,SAME,,"[('btvarstrequalimage', 'bpchar_ops', 'bpchar_ops', 'character'), ('btvarstrequalimage', 'text_ops', 'name_ops', 'name'), ('btvarstrequalimage', 'text_ops', 'text_ops', 'text'), ('btvarstrequalimage', 'text_ops', 'varchar_ops', 'text'), (None, 'array_ops', 'array_ops', 'anyarray'), (None, 'float_ops', 'float4_ops', 'real'), (None, 'float_ops', 'float8_ops', 'double precision'), (None, 'interval_ops', 'interval_ops', 'interval'), (None, 'jsonb_ops', 'jsonb_ops', 'jsonb'), (None, 'multirange_ops', 'multirange_ops', 'anymultirange'), (None, 'numeric_ops', 'numeric_ops', 'numeric'), (None, 'range_ops', 'range_ops', 'anyrange'), (None, 'record_image_ops', 'record_image_ops', 'record'), (None, 'record_ops', 'record_ops', 'record'), (None, 'tsquery_ops', 'tsquery_ops', 'tsquery'), (None, 'tsvector_ops', 'tsvector_ops', 'tsvector')]"
postgresql,postgresql,"SELECT indexrelid, indrelid FROM pg_index WHERE indexrelid = 0 OR indrelid = 0 OR       indnatts <= 0 OR indnatts > 32",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT indexrelid, indrelid FROM pg_index WHERE array_lower(indkey, 1) != 0 OR array_upper(indkey, 1) != indnatts-1 OR     array_lower(indclass, 1) != 0 OR array_upper(indclass, 1) != indnatts-1 OR     array_lower(indcollation, 1) != 0 OR array_upper(indcollation, 1) != indnatts-1 OR     array_lower(indoption, 1) != 0 OR array_upper(indoption, 1) != indnatts-1",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT indexrelid::regclass, indrelid::regclass, attname, atttypid::regtype, opcname FROM (SELECT indexrelid, indrelid, unnest(indkey) as ikey,              unnest(indclass) as iclass, unnest(indcollation) as icoll       FROM pg_index       WHERE indrelid < 16384) ss,       pg_attribute a,       pg_opclass opc WHERE a.attrelid = indrelid AND a.attnum = ikey AND opc.oid = iclass AND       (opcintype != atttypid OR icoll != attcollation) ORDER BY 1",opr_sanity.sql,SAME,,"[('pg_aggregate_fnoid_index', 'pg_aggregate', 'aggfnoid', 'regproc', 'oid_ops')]"
postgresql,postgresql,"SELECT relname, attname, attcollation FROM pg_class c, pg_attribute a WHERE c.oid = attrelid AND c.oid < 16384 AND     c.relkind != 'v' AND       attcollation != 0 AND     attcollation != (SELECT oid FROM pg_collation WHERE collname = 'C')",opr_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT indexrelid::regclass, indrelid::regclass, iclass, icoll FROM (SELECT indexrelid, indrelid,              unnest(indclass) as iclass, unnest(indcollation) as icoll       FROM pg_index       WHERE indrelid < 16384) ss WHERE icoll != 0 AND     icoll != (SELECT oid FROM pg_collation WHERE collname = 'C')",opr_sanity.sql,SAME,,[]
postgresql,postgresql,SET enable_partitionwise_aggregate TO true,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,SET enable_partitionwise_join TO true,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,SET max_parallel_workers_per_gather TO 0,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,SET enable_incremental_sort TO off,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,ANALYZE pagg_tab,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT c, sum(a), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY c HAVING avg(d) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab.c, (sum(pagg_tab.a)), (avg(pagg_tab.b))',), ('  ->  Append',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab.c',), (""              Filter: (avg(pagg_tab.d) < '15'::numeric)"",), ('              ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_1.c',), (""              Filter: (avg(pagg_tab_1.d) < '15'::numeric)"",), ('              ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_2.c',), (""              Filter: (avg(pagg_tab_2.d) < '15'::numeric)"",), ('              ->  Seq Scan on pagg_tab_p3 pagg_tab_2',)]"
postgresql,postgresql,"SELECT c, sum(a), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY c HAVING avg(d) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('0000', 2000, Decimal('12.0000000000000000'), 250, 0, 24), ('0001', 2250, Decimal('13.0000000000000000'), 250, 1, 25), ('0002', 2500, Decimal('14.0000000000000000'), 250, 2, 26), ('0006', 2500, Decimal('12.0000000000000000'), 250, 2, 24), ('0007', 2750, Decimal('13.0000000000000000'), 250, 3, 25), ('0008', 2000, Decimal('14.0000000000000000'), 250, 0, 26)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY a HAVING avg(d) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab.a, (sum(pagg_tab.b)), (avg(pagg_tab.b))',), ('  ->  Finalize HashAggregate',), ('        Group Key: pagg_tab.a',), (""        Filter: (avg(pagg_tab.d) < '15'::numeric)"",), ('        ->  Append',), ('              ->  Partial HashAggregate',), ('                    Group Key: pagg_tab.a',), ('                    ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('              ->  Partial HashAggregate',), ('                    Group Key: pagg_tab_1.a',), ('                    ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('              ->  Partial HashAggregate',), ('                    Group Key: pagg_tab_2.a',), ('                    ->  Seq Scan on pagg_tab_p3 pagg_tab_2',)]"
postgresql,postgresql,"SELECT a, sum(b), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY a HAVING avg(d) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 1500, Decimal('10.0000000000000000'), 150, 0, 20), (1, 1650, Decimal('11.0000000000000000'), 150, 1, 21), (2, 1800, Decimal('12.0000000000000000'), 150, 2, 22), (3, 1950, Decimal('13.0000000000000000'), 150, 3, 23), (4, 2100, Decimal('14.0000000000000000'), 150, 4, 24), (10, 1500, Decimal('10.0000000000000000'), 150, 10, 20), (11, 1650, Decimal('11.0000000000000000'), 150, 11, 21), (12, 1800, Decimal('12.0000000000000000'), 150, 12, 22), (13, 1950, Decimal('13.0000000000000000'), 150, 13, 23), (14, 2100, Decimal('14.0000000000000000'), 150, 14, 24)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, c, count(*) FROM pagg_tab GROUP BY a, c",partition_aggregate.sql,SAME,,"[('Append',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab.a, pagg_tab.c',), ('        ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab_1.a, pagg_tab_1.c',), ('        ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab_2.a, pagg_tab_2.c',), ('        ->  Seq Scan on pagg_tab_p3 pagg_tab_2',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, c, count(*) FROM pagg_tab GROUP BY c, a",partition_aggregate.sql,SAME,,"[('Append',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab.c, pagg_tab.a',), ('        ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab_1.c, pagg_tab_1.a',), ('        ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab_2.c, pagg_tab_2.a',), ('        ->  Seq Scan on pagg_tab_p3 pagg_tab_2',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT c, a, count(*) FROM pagg_tab GROUP BY a, c",partition_aggregate.sql,SAME,,"[('Append',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab.a, pagg_tab.c',), ('        ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab_1.a, pagg_tab_1.c',), ('        ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab_2.a, pagg_tab_2.c',), ('        ->  Seq Scan on pagg_tab_p3 pagg_tab_2',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT c, sum(a) FROM pagg_tab WHERE 1 = 2 GROUP BY c",partition_aggregate.sql,SAME,,"[('HashAggregate',), ('  Group Key: c',), ('  ->  Result',), ('        One-Time Filter: false',)]"
postgresql,postgresql,"SELECT c, sum(a) FROM pagg_tab WHERE 1 = 2 GROUP BY c",partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT c, sum(a) FROM pagg_tab WHERE c = 'x' GROUP BY c",partition_aggregate.sql,SAME,,"[('GroupAggregate',), ('  ->  Result',), ('        One-Time Filter: false',)]"
postgresql,postgresql,"SELECT c, sum(a) FROM pagg_tab WHERE c = 'x' GROUP BY c",partition_aggregate.sql,SAME,,[]
postgresql,postgresql,SET enable_hashagg TO false,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT c, sum(a), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab.c, (sum(pagg_tab.a)), (avg(pagg_tab.b))',), ('  ->  Append',), ('        ->  GroupAggregate',), ('              Group Key: pagg_tab.c',), (""              Filter: (avg(pagg_tab.d) < '15'::numeric)"",), ('              ->  Sort',), ('                    Sort Key: pagg_tab.c',), ('                    ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('        ->  GroupAggregate',), ('              Group Key: pagg_tab_1.c',), (""              Filter: (avg(pagg_tab_1.d) < '15'::numeric)"",), ('              ->  Sort',), ('                    Sort Key: pagg_tab_1.c',), ('                    ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('        ->  GroupAggregate',), ('              Group Key: pagg_tab_2.c',), (""              Filter: (avg(pagg_tab_2.d) < '15'::numeric)"",), ('              ->  Sort',), ('                    Sort Key: pagg_tab_2.c',), ('                    ->  Seq Scan on pagg_tab_p3 pagg_tab_2',)]"
postgresql,postgresql,"SELECT c, sum(a), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('0000', 2000, Decimal('12.0000000000000000'), 250), ('0001', 2250, Decimal('13.0000000000000000'), 250), ('0002', 2500, Decimal('14.0000000000000000'), 250), ('0006', 2500, Decimal('12.0000000000000000'), 250), ('0007', 2750, Decimal('13.0000000000000000'), 250), ('0008', 2000, Decimal('14.0000000000000000'), 250)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab.a, (sum(pagg_tab.b)), (avg(pagg_tab.b))',), ('  ->  Finalize GroupAggregate',), ('        Group Key: pagg_tab.a',), (""        Filter: (avg(pagg_tab.d) < '15'::numeric)"",), ('        ->  Merge Append',), ('              Sort Key: pagg_tab.a',), ('              ->  Partial GroupAggregate',), ('                    Group Key: pagg_tab.a',), ('                    ->  Sort',), ('                          Sort Key: pagg_tab.a',), ('                          ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('              ->  Partial GroupAggregate',), ('                    Group Key: pagg_tab_1.a',), ('                    ->  Sort',), ('                          Sort Key: pagg_tab_1.a',), ('                          ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('              ->  Partial GroupAggregate',), ('                    Group Key: pagg_tab_2.a',), ('                    ->  Sort',), ('                          Sort Key: pagg_tab_2.a',), ('                          ->  Seq Scan on pagg_tab_p3 pagg_tab_2',)]"
postgresql,postgresql,"SELECT a, sum(b), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 1500, Decimal('10.0000000000000000'), 150), (1, 1650, Decimal('11.0000000000000000'), 150), (2, 1800, Decimal('12.0000000000000000'), 150), (3, 1950, Decimal('13.0000000000000000'), 150), (4, 2100, Decimal('14.0000000000000000'), 150), (10, 1500, Decimal('10.0000000000000000'), 150), (11, 1650, Decimal('11.0000000000000000'), 150), (12, 1800, Decimal('12.0000000000000000'), 150), (13, 1950, Decimal('13.0000000000000000'), 150), (14, 2100, Decimal('14.0000000000000000'), 150)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT c FROM pagg_tab GROUP BY c ORDER BY 1,partition_aggregate.sql,SAME,,"[('Merge Append',), ('  Sort Key: pagg_tab.c',), ('  ->  Group',), ('        Group Key: pagg_tab.c',), ('        ->  Sort',), ('              Sort Key: pagg_tab.c',), ('              ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('  ->  Group',), ('        Group Key: pagg_tab_1.c',), ('        ->  Sort',), ('              Sort Key: pagg_tab_1.c',), ('              ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('  ->  Group',), ('        Group Key: pagg_tab_2.c',), ('        ->  Sort',), ('              Sort Key: pagg_tab_2.c',), ('              ->  Seq Scan on pagg_tab_p3 pagg_tab_2',)]"
postgresql,postgresql,SELECT c FROM pagg_tab GROUP BY c ORDER BY 1,partition_aggregate.sql,SAME,,"[('0000',), ('0001',), ('0002',), ('0003',), ('0004',), ('0005',), ('0006',), ('0007',), ('0008',), ('0009',), ('0010',), ('0011',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT a FROM pagg_tab WHERE a < 3 GROUP BY a ORDER BY 1,partition_aggregate.sql,SAME,,"[('Group',), ('  Group Key: pagg_tab.a',), ('  ->  Merge Append',), ('        Sort Key: pagg_tab.a',), ('        ->  Group',), ('              Group Key: pagg_tab.a',), ('              ->  Sort',), ('                    Sort Key: pagg_tab.a',), ('                    ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('                          Filter: (a < 3)',), ('        ->  Group',), ('              Group Key: pagg_tab_1.a',), ('              ->  Sort',), ('                    Sort Key: pagg_tab_1.a',), ('                    ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('                          Filter: (a < 3)',), ('        ->  Group',), ('              Group Key: pagg_tab_2.a',), ('              ->  Sort',), ('                    Sort Key: pagg_tab_2.a',), ('                    ->  Seq Scan on pagg_tab_p3 pagg_tab_2',), ('                          Filter: (a < 3)',)]"
postgresql,postgresql,SELECT a FROM pagg_tab WHERE a < 3 GROUP BY a ORDER BY 1,partition_aggregate.sql,SAME,,"[(0,), (1,), (2,)]"
postgresql,postgresql,RESET enable_hashagg,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT c, sum(a) FROM pagg_tab GROUP BY rollup(c) ORDER BY 1, 2",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab.c, (sum(pagg_tab.a))',), ('  ->  MixedAggregate',), ('        Hash Key: pagg_tab.c',), ('        Group Key: ()',), ('        ->  Append',), ('              ->  Seq Scan on pagg_tab_p1 pagg_tab_1',), ('              ->  Seq Scan on pagg_tab_p2 pagg_tab_2',), ('              ->  Seq Scan on pagg_tab_p3 pagg_tab_3',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT c, sum(b order by a) FROM pagg_tab GROUP BY c ORDER BY 1, 2",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab.c, (sum(pagg_tab.b ORDER BY pagg_tab.a))',), ('  ->  Append',), ('        ->  GroupAggregate',), ('              Group Key: pagg_tab.c',), ('              ->  Sort',), ('                    Sort Key: pagg_tab.c, pagg_tab.a',), ('                    ->  Seq Scan on pagg_tab_p1 pagg_tab',), ('        ->  GroupAggregate',), ('              Group Key: pagg_tab_1.c',), ('              ->  Sort',), ('                    Sort Key: pagg_tab_1.c, pagg_tab_1.a',), ('                    ->  Seq Scan on pagg_tab_p2 pagg_tab_1',), ('        ->  GroupAggregate',), ('              Group Key: pagg_tab_2.c',), ('              ->  Sort',), ('                    Sort Key: pagg_tab_2.c, pagg_tab_2.a',), ('                    ->  Seq Scan on pagg_tab_p3 pagg_tab_2',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b order by a) FROM pagg_tab GROUP BY a ORDER BY 1, 2",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab.a, (sum(pagg_tab.b ORDER BY pagg_tab.a))',), ('  ->  GroupAggregate',), ('        Group Key: pagg_tab.a',), ('        ->  Sort',), ('              Sort Key: pagg_tab.a',), ('              ->  Append',), ('                    ->  Seq Scan on pagg_tab_p1 pagg_tab_1',), ('                    ->  Seq Scan on pagg_tab_p2 pagg_tab_2',), ('                    ->  Seq Scan on pagg_tab_p3 pagg_tab_3',)]"
postgresql,postgresql,ANALYZE pagg_tab1,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,ANALYZE pagg_tab2,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.x, sum(t1.y), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: t1.x, (sum(t1.y)), (count(*))',), ('  ->  Append',), ('        ->  HashAggregate',), ('              Group Key: t1.x',), ('              ->  Hash Join',), ('                    Hash Cond: (t1.x = t2.y)',), ('                    ->  Seq Scan on pagg_tab1_p1 t1',), ('                    ->  Hash',), ('                          ->  Seq Scan on pagg_tab2_p1 t2',), ('        ->  HashAggregate',), ('              Group Key: t1_1.x',), ('              ->  Hash Join',), ('                    Hash Cond: (t1_1.x = t2_1.y)',), ('                    ->  Seq Scan on pagg_tab1_p2 t1_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on pagg_tab2_p2 t2_1',), ('        ->  HashAggregate',), ('              Group Key: t1_2.x',), ('              ->  Hash Join',), ('                    Hash Cond: (t2_2.y = t1_2.x)',), ('                    ->  Seq Scan on pagg_tab2_p3 t2_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on pagg_tab1_p3 t1_2',)]"
postgresql,postgresql,"SELECT t1.x, sum(t1.y), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 500, 100), (6, 1100, 100), (12, 700, 100), (18, 1300, 100), (24, 900, 100)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.x, sum(t1.y), count(t1) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: t1.x, (sum(t1.y)), (count(((t1.*)::pagg_tab1)))',), ('  ->  HashAggregate',), ('        Group Key: t1.x',), ('        ->  Hash Join',), ('              Hash Cond: (t1.x = t2.y)',), ('              ->  Append',), ('                    ->  Seq Scan on pagg_tab1_p1 t1_1',), ('                    ->  Seq Scan on pagg_tab1_p2 t1_2',), ('                    ->  Seq Scan on pagg_tab1_p3 t1_3',), ('              ->  Hash',), ('                    ->  Append',), ('                          ->  Seq Scan on pagg_tab2_p1 t2_1',), ('                          ->  Seq Scan on pagg_tab2_p2 t2_2',), ('                          ->  Seq Scan on pagg_tab2_p3 t2_3',)]"
postgresql,postgresql,"SELECT t1.x, sum(t1.y), count(t1) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 500, 100), (6, 1100, 100), (12, 700, 100), (18, 1300, 100), (24, 900, 100)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t2.y, sum(t1.y), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t2.y ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: t2.y, (sum(t1.y)), (count(*))',), ('  ->  Append',), ('        ->  HashAggregate',), ('              Group Key: t2.y',), ('              ->  Hash Join',), ('                    Hash Cond: (t1.x = t2.y)',), ('                    ->  Seq Scan on pagg_tab1_p1 t1',), ('                    ->  Hash',), ('                          ->  Seq Scan on pagg_tab2_p1 t2',), ('        ->  HashAggregate',), ('              Group Key: t2_1.y',), ('              ->  Hash Join',), ('                    Hash Cond: (t1_1.x = t2_1.y)',), ('                    ->  Seq Scan on pagg_tab1_p2 t1_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on pagg_tab2_p2 t2_1',), ('        ->  HashAggregate',), ('              Group Key: t2_2.y',), ('              ->  Hash Join',), ('                    Hash Cond: (t2_2.y = t1_2.x)',), ('                    ->  Seq Scan on pagg_tab2_p3 t2_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on pagg_tab1_p3 t1_2',)]"
postgresql,postgresql,SET enable_hashagg TO false,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.y, sum(t1.x), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.y HAVING avg(t1.x) > 10 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: t1.y, (sum(t1.x)), (count(*))',), ('  ->  Finalize GroupAggregate',), ('        Group Key: t1.y',), (""        Filter: (avg(t1.x) > '10'::numeric)"",), ('        ->  Merge Append',), ('              Sort Key: t1.y',), ('              ->  Partial GroupAggregate',), ('                    Group Key: t1.y',), ('                    ->  Sort',), ('                          Sort Key: t1.y',), ('                          ->  Hash Join',), ('                                Hash Cond: (t1.x = t2.y)',), ('                                ->  Seq Scan on pagg_tab1_p1 t1',), ('                                ->  Hash',), ('                                      ->  Seq Scan on pagg_tab2_p1 t2',), ('              ->  Partial GroupAggregate',), ('                    Group Key: t1_1.y',), ('                    ->  Sort',), ('                          Sort Key: t1_1.y',), ('                          ->  Hash Join',), ('                                Hash Cond: (t1_1.x = t2_1.y)',), ('                                ->  Seq Scan on pagg_tab1_p2 t1_1',), ('                                ->  Hash',), ('                                      ->  Seq Scan on pagg_tab2_p2 t2_1',), ('              ->  Partial GroupAggregate',), ('                    Group Key: t1_2.y',), ('                    ->  Sort',), ('                          Sort Key: t1_2.y',), ('                          ->  Hash Join',), ('                                Hash Cond: (t2_2.y = t1_2.x)',), ('                                ->  Seq Scan on pagg_tab2_p3 t2_2',), ('                                ->  Hash',), ('                                      ->  Seq Scan on pagg_tab1_p3 t1_2',)]"
postgresql,postgresql,"SELECT t1.y, sum(t1.x), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.y HAVING avg(t1.x) > 10 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(2, 600, 50), (4, 1200, 50), (8, 900, 50), (12, 600, 50), (14, 1200, 50), (18, 900, 50)]"
postgresql,postgresql,RESET enable_hashagg,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT b.y, sum(a.y) FROM pagg_tab1 a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST",partition_aggregate.sql,SAME,,"[('Finalize GroupAggregate',), ('  Group Key: b.y',), ('  ->  Sort',), ('        Sort Key: b.y',), ('        ->  Append',), ('              ->  Partial HashAggregate',), ('                    Group Key: b.y',), ('                    ->  Hash Left Join',), ('                          Hash Cond: (a.x = b.y)',), ('                          ->  Seq Scan on pagg_tab1_p1 a',), ('                          ->  Hash',), ('                                ->  Seq Scan on pagg_tab2_p1 b',), ('              ->  Partial HashAggregate',), ('                    Group Key: b_1.y',), ('                    ->  Hash Left Join',), ('                          Hash Cond: (a_1.x = b_1.y)',), ('                          ->  Seq Scan on pagg_tab1_p2 a_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on pagg_tab2_p2 b_1',), ('              ->  Partial HashAggregate',), ('                    Group Key: b_2.y',), ('                    ->  Hash Right Join',), ('                          Hash Cond: (b_2.y = a_2.x)',), ('                          ->  Seq Scan on pagg_tab2_p3 b_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on pagg_tab1_p3 a_2',)]"
postgresql,postgresql,"SELECT b.y, sum(a.y) FROM pagg_tab1 a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST",partition_aggregate.sql,SAME,,"[(0, 500), (6, 1100), (12, 700), (18, 1300), (24, 900), (None, 900)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT b.y, sum(a.y) FROM pagg_tab1 a RIGHT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: b.y',), ('  ->  Append',), ('        ->  HashAggregate',), ('              Group Key: b.y',), ('              ->  Hash Right Join',), ('                    Hash Cond: (a.x = b.y)',), ('                    ->  Seq Scan on pagg_tab1_p1 a',), ('                    ->  Hash',), ('                          ->  Seq Scan on pagg_tab2_p1 b',), ('        ->  HashAggregate',), ('              Group Key: b_1.y',), ('              ->  Hash Right Join',), ('                    Hash Cond: (a_1.x = b_1.y)',), ('                    ->  Seq Scan on pagg_tab1_p2 a_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on pagg_tab2_p2 b_1',), ('        ->  HashAggregate',), ('              Group Key: b_2.y',), ('              ->  Hash Left Join',), ('                    Hash Cond: (b_2.y = a_2.x)',), ('                    ->  Seq Scan on pagg_tab2_p3 b_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on pagg_tab1_p3 a_2',)]"
postgresql,postgresql,"SELECT b.y, sum(a.y) FROM pagg_tab1 a RIGHT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST",partition_aggregate.sql,SAME,,"[(0, 500), (3, None), (6, 1100), (9, None), (12, 700), (15, None), (18, 1300), (21, None), (24, 900), (27, None)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a.x, sum(b.x) FROM pagg_tab1 a FULL OUTER JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x ORDER BY 1 NULLS LAST",partition_aggregate.sql,SAME,,"[('Finalize GroupAggregate',), ('  Group Key: a.x',), ('  ->  Sort',), ('        Sort Key: a.x',), ('        ->  Append',), ('              ->  Partial HashAggregate',), ('                    Group Key: a.x',), ('                    ->  Hash Full Join',), ('                          Hash Cond: (a.x = b.y)',), ('                          ->  Seq Scan on pagg_tab1_p1 a',), ('                          ->  Hash',), ('                                ->  Seq Scan on pagg_tab2_p1 b',), ('              ->  Partial HashAggregate',), ('                    Group Key: a_1.x',), ('                    ->  Hash Full Join',), ('                          Hash Cond: (a_1.x = b_1.y)',), ('                          ->  Seq Scan on pagg_tab1_p2 a_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on pagg_tab2_p2 b_1',), ('              ->  Partial HashAggregate',), ('                    Group Key: a_2.x',), ('                    ->  Hash Full Join',), ('                          Hash Cond: (b_2.y = a_2.x)',), ('                          ->  Seq Scan on pagg_tab2_p3 b_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on pagg_tab1_p3 a_2',)]"
postgresql,postgresql,"SELECT a.x, sum(b.x) FROM pagg_tab1 a FULL OUTER JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x ORDER BY 1 NULLS LAST",partition_aggregate.sql,SAME,,"[(0, 500), (2, None), (4, None), (6, 1100), (8, None), (10, None), (12, 700), (14, None), (16, None), (18, 1300), (20, None), (22, None), (24, 900), (26, None), (28, None), (None, 500)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a LEFT JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab1.x, pagg_tab2.y',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab1.x, pagg_tab2.y',), ('        ->  Hash Left Join',), ('              Hash Cond: (pagg_tab1.x = pagg_tab2.y)',), ('              Filter: ((pagg_tab1.x > 5) OR (pagg_tab2.y < 20))',), ('              ->  Append',), ('                    ->  Seq Scan on pagg_tab1_p1 pagg_tab1_1',), ('                          Filter: (x < 20)',), ('                    ->  Seq Scan on pagg_tab1_p2 pagg_tab1_2',), ('                          Filter: (x < 20)',), ('              ->  Hash',), ('                    ->  Append',), ('                          ->  Seq Scan on pagg_tab2_p2 pagg_tab2_1',), ('                                Filter: (y > 10)',), ('                          ->  Seq Scan on pagg_tab2_p3 pagg_tab2_2',), ('                                Filter: (y > 10)',)]"
postgresql,postgresql,"SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a LEFT JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2",partition_aggregate.sql,SAME,,"[(6, None, 10), (8, None, 10), (10, None, 10), (12, 12, 100), (14, None, 10), (16, None, 10), (18, 18, 100)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a FULL JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab1.x, pagg_tab2.y',), ('  ->  HashAggregate',), ('        Group Key: pagg_tab1.x, pagg_tab2.y',), ('        ->  Hash Full Join',), ('              Hash Cond: (pagg_tab1.x = pagg_tab2.y)',), ('              Filter: ((pagg_tab1.x > 5) OR (pagg_tab2.y < 20))',), ('              ->  Append',), ('                    ->  Seq Scan on pagg_tab1_p1 pagg_tab1_1',), ('                          Filter: (x < 20)',), ('                    ->  Seq Scan on pagg_tab1_p2 pagg_tab1_2',), ('                          Filter: (x < 20)',), ('              ->  Hash',), ('                    ->  Append',), ('                          ->  Seq Scan on pagg_tab2_p2 pagg_tab2_1',), ('                                Filter: (y > 10)',), ('                          ->  Seq Scan on pagg_tab2_p3 pagg_tab2_2',), ('                                Filter: (y > 10)',)]"
postgresql,postgresql,"SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a FULL JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20 GROUP BY a.x, b.y ORDER BY 1, 2",partition_aggregate.sql,SAME,,"[(6, None, 10), (8, None, 10), (10, None, 10), (12, 12, 100), (14, None, 10), (16, None, 10), (18, 18, 100), (None, 15, 10)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a.x, a.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x = 1 AND x = 2) a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x, a.y ORDER BY 1, 2",partition_aggregate.sql,SAME,,"[('GroupAggregate',), ('  Group Key: pagg_tab1.y',), ('  ->  Sort',), ('        Sort Key: pagg_tab1.y',), ('        ->  Result',), ('              One-Time Filter: false',)]"
postgresql,postgresql,"SELECT a.x, a.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x = 1 AND x = 2) a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x, a.y ORDER BY 1, 2",partition_aggregate.sql,SAME,,[]
postgresql,postgresql,ANALYZE pagg_tab_m,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a HAVING avg(c) < 22 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_m.a, (sum(pagg_tab_m.b)), (avg(pagg_tab_m.c))',), ('  ->  Finalize HashAggregate',), ('        Group Key: pagg_tab_m.a',), (""        Filter: (avg(pagg_tab_m.c) < '22'::numeric)"",), ('        ->  Append',), ('              ->  Partial HashAggregate',), ('                    Group Key: pagg_tab_m.a',), ('                    ->  Seq Scan on pagg_tab_m_p1 pagg_tab_m',), ('              ->  Partial HashAggregate',), ('                    Group Key: pagg_tab_m_1.a',), ('                    ->  Seq Scan on pagg_tab_m_p2 pagg_tab_m_1',), ('              ->  Partial HashAggregate',), ('                    Group Key: pagg_tab_m_2.a',), ('                    ->  Seq Scan on pagg_tab_m_p3 pagg_tab_m_2',)]"
postgresql,postgresql,"SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a HAVING avg(c) < 22 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 1500, Decimal('20.0000000000000000'), 100), (1, 1600, Decimal('21.0000000000000000'), 100), (10, 1500, Decimal('20.0000000000000000'), 100), (11, 1600, Decimal('21.0000000000000000'), 100), (20, 1500, Decimal('20.0000000000000000'), 100), (21, 1600, Decimal('21.0000000000000000'), 100)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a, (a+b)/2 HAVING sum(b) < 50 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_m.a, (sum(pagg_tab_m.b)), (avg(pagg_tab_m.c))',), ('  ->  Append',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_m.a, ((pagg_tab_m.a + pagg_tab_m.b) / 2)',), ('              Filter: (sum(pagg_tab_m.b) < 50)',), ('              ->  Seq Scan on pagg_tab_m_p1 pagg_tab_m',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_m_1.a, ((pagg_tab_m_1.a + pagg_tab_m_1.b) / 2)',), ('              Filter: (sum(pagg_tab_m_1.b) < 50)',), ('              ->  Seq Scan on pagg_tab_m_p2 pagg_tab_m_1',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_m_2.a, ((pagg_tab_m_2.a + pagg_tab_m_2.b) / 2)',), ('              Filter: (sum(pagg_tab_m_2.b) < 50)',), ('              ->  Seq Scan on pagg_tab_m_p3 pagg_tab_m_2',)]"
postgresql,postgresql,"SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a, (a+b)/2 HAVING sum(b) < 50 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 0, Decimal('20.0000000000000000'), 25), (1, 25, Decimal('21.0000000000000000'), 25), (10, 0, Decimal('20.0000000000000000'), 25), (11, 25, Decimal('21.0000000000000000'), 25), (20, 0, Decimal('20.0000000000000000'), 25), (21, 25, Decimal('21.0000000000000000'), 25)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, c, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY (a+b)/2, 2, 1 HAVING sum(b) = 50 AND avg(c) > 25 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_m.a, pagg_tab_m.c, (sum(pagg_tab_m.b))',), ('  ->  Append',), ('        ->  HashAggregate',), ('              Group Key: ((pagg_tab_m.a + pagg_tab_m.b) / 2), pagg_tab_m.c, pagg_tab_m.a',), (""              Filter: ((sum(pagg_tab_m.b) = 50) AND (avg(pagg_tab_m.c) > '25'::numeric))"",), ('              ->  Seq Scan on pagg_tab_m_p1 pagg_tab_m',), ('        ->  HashAggregate',), ('              Group Key: ((pagg_tab_m_1.a + pagg_tab_m_1.b) / 2), pagg_tab_m_1.c, pagg_tab_m_1.a',), (""              Filter: ((sum(pagg_tab_m_1.b) = 50) AND (avg(pagg_tab_m_1.c) > '25'::numeric))"",), ('              ->  Seq Scan on pagg_tab_m_p2 pagg_tab_m_1',), ('        ->  HashAggregate',), ('              Group Key: ((pagg_tab_m_2.a + pagg_tab_m_2.b) / 2), pagg_tab_m_2.c, pagg_tab_m_2.a',), (""              Filter: ((sum(pagg_tab_m_2.b) = 50) AND (avg(pagg_tab_m_2.c) > '25'::numeric))"",), ('              ->  Seq Scan on pagg_tab_m_p3 pagg_tab_m_2',)]"
postgresql,postgresql,"SELECT a, c, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY (a+b)/2, 2, 1 HAVING sum(b) = 50 AND avg(c) > 25 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 30, 50, Decimal('30.0000000000000000'), 5), (0, 40, 50, Decimal('40.0000000000000000'), 5), (10, 30, 50, Decimal('30.0000000000000000'), 5), (10, 40, 50, Decimal('40.0000000000000000'), 5), (20, 30, 50, Decimal('30.0000000000000000'), 5), (20, 40, 50, Decimal('40.0000000000000000'), 5)]"
postgresql,postgresql,ALTER TABLE pagg_tab_ml_p3 ATTACH PARTITION pagg_tab_ml_p3_s1 FOR VALUES FROM (0) TO (7),partition_aggregate.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pagg_tab_ml ATTACH PARTITION pagg_tab_ml_p3 FOR VALUES FROM (20) TO (30),partition_aggregate.sql,SAME,,[]
postgresql,postgresql,ANALYZE pagg_tab_ml,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,SET max_parallel_workers_per_gather TO 2,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,SET parallel_setup_cost = 0,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_ml.a, (sum(pagg_tab_ml.b)), (array_agg(DISTINCT pagg_tab_ml.c))',), ('  ->  Gather',), ('        Workers Planned: 2',), ('        ->  Parallel Append',), ('              ->  GroupAggregate',), ('                    Group Key: pagg_tab_ml.a',), (""                    Filter: (avg(pagg_tab_ml.b) < '3'::numeric)"",), ('                    ->  Sort',), ('                          Sort Key: pagg_tab_ml.a, pagg_tab_ml.c',), ('                          ->  Seq Scan on pagg_tab_ml_p1 pagg_tab_ml',), ('              ->  GroupAggregate',), ('                    Group Key: pagg_tab_ml_5.a',), (""                    Filter: (avg(pagg_tab_ml_5.b) < '3'::numeric)"",), ('                    ->  Sort',), ('                          Sort Key: pagg_tab_ml_5.a, pagg_tab_ml_5.c',), ('                          ->  Append',), ('                                ->  Seq Scan on pagg_tab_ml_p3_s1 pagg_tab_ml_5',), ('                                ->  Seq Scan on pagg_tab_ml_p3_s2 pagg_tab_ml_6',), ('              ->  GroupAggregate',), ('                    Group Key: pagg_tab_ml_2.a',), (""                    Filter: (avg(pagg_tab_ml_2.b) < '3'::numeric)"",), ('                    ->  Sort',), ('                          Sort Key: pagg_tab_ml_2.a, pagg_tab_ml_2.c',), ('                          ->  Append',), ('                                ->  Seq Scan on pagg_tab_ml_p2_s1 pagg_tab_ml_2',), ('                                ->  Seq Scan on pagg_tab_ml_p2_s2 pagg_tab_ml_3',)]"
postgresql,postgresql,"SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 0, ['0000', '0002'], 1000), (1, 1000, ['0001', '0003'], 1000), (2, 2000, ['0000', '0002'], 1000), (10, 0, ['0000', '0002'], 1000), (11, 1000, ['0001', '0003'], 1000), (12, 2000, ['0000', '0002'], 1000), (20, 0, ['0000', '0002'], 1000), (21, 1000, ['0001', '0003'], 1000), (22, 2000, ['0000', '0002'], 1000)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3",partition_aggregate.sql,SAME,,"[('Gather',), ('  Workers Planned: 2',), ('  ->  Parallel Append',), ('        ->  GroupAggregate',), ('              Group Key: pagg_tab_ml.a',), (""              Filter: (avg(pagg_tab_ml.b) < '3'::numeric)"",), ('              ->  Sort',), ('                    Sort Key: pagg_tab_ml.a, pagg_tab_ml.c',), ('                    ->  Seq Scan on pagg_tab_ml_p1 pagg_tab_ml',), ('        ->  GroupAggregate',), ('              Group Key: pagg_tab_ml_5.a',), (""              Filter: (avg(pagg_tab_ml_5.b) < '3'::numeric)"",), ('              ->  Sort',), ('                    Sort Key: pagg_tab_ml_5.a, pagg_tab_ml_5.c',), ('                    ->  Append',), ('                          ->  Seq Scan on pagg_tab_ml_p3_s1 pagg_tab_ml_5',), ('                          ->  Seq Scan on pagg_tab_ml_p3_s2 pagg_tab_ml_6',), ('        ->  GroupAggregate',), ('              Group Key: pagg_tab_ml_2.a',), (""              Filter: (avg(pagg_tab_ml_2.b) < '3'::numeric)"",), ('              ->  Sort',), ('                    Sort Key: pagg_tab_ml_2.a, pagg_tab_ml_2.c',), ('                    ->  Append',), ('                          ->  Seq Scan on pagg_tab_ml_p2_s1 pagg_tab_ml_2',), ('                          ->  Seq Scan on pagg_tab_ml_p2_s2 pagg_tab_ml_3',)]"
postgresql,postgresql,RESET parallel_setup_cost,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_ml.a, (sum(pagg_tab_ml.b)), (count(*))',), ('  ->  Append',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_ml.a',), (""              Filter: (avg(pagg_tab_ml.b) < '3'::numeric)"",), ('              ->  Seq Scan on pagg_tab_ml_p1 pagg_tab_ml',), ('        ->  Finalize GroupAggregate',), ('              Group Key: pagg_tab_ml_2.a',), (""              Filter: (avg(pagg_tab_ml_2.b) < '3'::numeric)"",), ('              ->  Sort',), ('                    Sort Key: pagg_tab_ml_2.a',), ('                    ->  Append',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml_2.a',), ('                                ->  Seq Scan on pagg_tab_ml_p2_s1 pagg_tab_ml_2',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml_3.a',), ('                                ->  Seq Scan on pagg_tab_ml_p2_s2 pagg_tab_ml_3',), ('        ->  Finalize GroupAggregate',), ('              Group Key: pagg_tab_ml_5.a',), (""              Filter: (avg(pagg_tab_ml_5.b) < '3'::numeric)"",), ('              ->  Sort',), ('                    Sort Key: pagg_tab_ml_5.a',), ('                    ->  Append',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml_5.a',), ('                                ->  Seq Scan on pagg_tab_ml_p3_s1 pagg_tab_ml_5',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml_6.a',), ('                                ->  Seq Scan on pagg_tab_ml_p3_s2 pagg_tab_ml_6',)]"
postgresql,postgresql,"SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 0, 1000), (1, 1000, 1000), (2, 2000, 1000), (10, 0, 1000), (11, 1000, 1000), (12, 2000, 1000), (20, 0, 1000), (21, 1000, 1000), (22, 2000, 1000)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_ml.b, (sum(pagg_tab_ml.a)), (count(*))',), ('  ->  Finalize GroupAggregate',), ('        Group Key: pagg_tab_ml.b',), ('        ->  Sort',), ('              Sort Key: pagg_tab_ml.b',), ('              ->  Append',), ('                    ->  Partial HashAggregate',), ('                          Group Key: pagg_tab_ml.b',), ('                          ->  Seq Scan on pagg_tab_ml_p1 pagg_tab_ml',), ('                    ->  Partial HashAggregate',), ('                          Group Key: pagg_tab_ml_1.b',), ('                          ->  Seq Scan on pagg_tab_ml_p2_s1 pagg_tab_ml_1',), ('                    ->  Partial HashAggregate',), ('                          Group Key: pagg_tab_ml_2.b',), ('                          ->  Seq Scan on pagg_tab_ml_p2_s2 pagg_tab_ml_2',), ('                    ->  Partial HashAggregate',), ('                          Group Key: pagg_tab_ml_3.b',), ('                          ->  Seq Scan on pagg_tab_ml_p3_s1 pagg_tab_ml_3',), ('                    ->  Partial HashAggregate',), ('                          Group Key: pagg_tab_ml_4.b',), ('                          ->  Seq Scan on pagg_tab_ml_p3_s2 pagg_tab_ml_4',)]"
postgresql,postgresql,"SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b HAVING avg(a) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 30000, 3000), (1, 33000, 3000), (2, 36000, 3000), (3, 39000, 3000), (4, 42000, 3000)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_ml.a, (sum(pagg_tab_ml.b)), (count(*))',), ('  ->  Append',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_ml.a, pagg_tab_ml.b, pagg_tab_ml.c',), (""              Filter: (avg(pagg_tab_ml.b) > '7'::numeric)"",), ('              ->  Seq Scan on pagg_tab_ml_p1 pagg_tab_ml',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_ml_1.a, pagg_tab_ml_1.b, pagg_tab_ml_1.c',), (""              Filter: (avg(pagg_tab_ml_1.b) > '7'::numeric)"",), ('              ->  Seq Scan on pagg_tab_ml_p2_s1 pagg_tab_ml_1',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_ml_2.a, pagg_tab_ml_2.b, pagg_tab_ml_2.c',), (""              Filter: (avg(pagg_tab_ml_2.b) > '7'::numeric)"",), ('              ->  Seq Scan on pagg_tab_ml_p2_s2 pagg_tab_ml_2',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_ml_3.a, pagg_tab_ml_3.b, pagg_tab_ml_3.c',), (""              Filter: (avg(pagg_tab_ml_3.b) > '7'::numeric)"",), ('              ->  Seq Scan on pagg_tab_ml_p3_s1 pagg_tab_ml_3',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_ml_4.a, pagg_tab_ml_4.b, pagg_tab_ml_4.c',), (""              Filter: (avg(pagg_tab_ml_4.b) > '7'::numeric)"",), ('              ->  Seq Scan on pagg_tab_ml_p3_s2 pagg_tab_ml_4',)]"
postgresql,postgresql,"SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(8, 4000, 500), (8, 4000, 500), (9, 4500, 500), (9, 4500, 500), (18, 4000, 500), (18, 4000, 500), (19, 4500, 500), (19, 4500, 500), (28, 4000, 500), (28, 4000, 500), (29, 4500, 500), (29, 4500, 500)]"
postgresql,postgresql,SET min_parallel_table_scan_size TO '8kB',partition_aggregate.sql,SAME,,[]
postgresql,postgresql,SET parallel_setup_cost TO 0,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_ml.a, (sum(pagg_tab_ml.b)), (count(*))',), ('  ->  Append',), ('        ->  Finalize GroupAggregate',), ('              Group Key: pagg_tab_ml.a',), (""              Filter: (avg(pagg_tab_ml.b) < '3'::numeric)"",), ('              ->  Gather Merge',), ('                    Workers Planned: 2',), ('                    ->  Sort',), ('                          Sort Key: pagg_tab_ml.a',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml.a',), ('                                ->  Parallel Seq Scan on pagg_tab_ml_p1 pagg_tab_ml',), ('        ->  Finalize GroupAggregate',), ('              Group Key: pagg_tab_ml_2.a',), (""              Filter: (avg(pagg_tab_ml_2.b) < '3'::numeric)"",), ('              ->  Gather Merge',), ('                    Workers Planned: 2',), ('                    ->  Sort',), ('                          Sort Key: pagg_tab_ml_2.a',), ('                          ->  Parallel Append',), ('                                ->  Partial HashAggregate',), ('                                      Group Key: pagg_tab_ml_2.a',), ('                                      ->  Parallel Seq Scan on pagg_tab_ml_p2_s1 pagg_tab_ml_2',), ('                                ->  Partial HashAggregate',), ('                                      Group Key: pagg_tab_ml_3.a',), ('                                      ->  Parallel Seq Scan on pagg_tab_ml_p2_s2 pagg_tab_ml_3',), ('        ->  Finalize GroupAggregate',), ('              Group Key: pagg_tab_ml_5.a',), (""              Filter: (avg(pagg_tab_ml_5.b) < '3'::numeric)"",), ('              ->  Gather Merge',), ('                    Workers Planned: 2',), ('                    ->  Sort',), ('                          Sort Key: pagg_tab_ml_5.a',), ('                          ->  Parallel Append',), ('                                ->  Partial HashAggregate',), ('                                      Group Key: pagg_tab_ml_5.a',), ('                                      ->  Parallel Seq Scan on pagg_tab_ml_p3_s1 pagg_tab_ml_5',), ('                                ->  Partial HashAggregate',), ('                                      Group Key: pagg_tab_ml_6.a',), ('                                      ->  Parallel Seq Scan on pagg_tab_ml_p3_s2 pagg_tab_ml_6',)]"
postgresql,postgresql,"SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 0, 1000), (1, 1000, 1000), (2, 2000, 1000), (10, 0, 1000), (11, 1000, 1000), (12, 2000, 1000), (20, 0, 1000), (21, 1000, 1000), (22, 2000, 1000)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_ml.b, (sum(pagg_tab_ml.a)), (count(*))',), ('  ->  Finalize GroupAggregate',), ('        Group Key: pagg_tab_ml.b',), ('        ->  Gather Merge',), ('              Workers Planned: 2',), ('              ->  Sort',), ('                    Sort Key: pagg_tab_ml.b',), ('                    ->  Parallel Append',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml.b',), ('                                ->  Parallel Seq Scan on pagg_tab_ml_p1 pagg_tab_ml',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml_3.b',), ('                                ->  Parallel Seq Scan on pagg_tab_ml_p3_s1 pagg_tab_ml_3',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml_1.b',), ('                                ->  Parallel Seq Scan on pagg_tab_ml_p2_s1 pagg_tab_ml_1',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml_4.b',), ('                                ->  Parallel Seq Scan on pagg_tab_ml_p3_s2 pagg_tab_ml_4',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_ml_2.b',), ('                                ->  Parallel Seq Scan on pagg_tab_ml_p2_s2 pagg_tab_ml_2',)]"
postgresql,postgresql,"SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b HAVING avg(a) < 15 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 30000, 3000), (1, 33000, 3000), (2, 36000, 3000), (3, 39000, 3000), (4, 42000, 3000)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Gather Merge',), ('  Workers Planned: 2',), ('  ->  Sort',), ('        Sort Key: pagg_tab_ml.a, (sum(pagg_tab_ml.b)), (count(*))',), ('        ->  Parallel Append',), ('              ->  HashAggregate',), ('                    Group Key: pagg_tab_ml.a, pagg_tab_ml.b, pagg_tab_ml.c',), (""                    Filter: (avg(pagg_tab_ml.b) > '7'::numeric)"",), ('                    ->  Seq Scan on pagg_tab_ml_p1 pagg_tab_ml',), ('              ->  HashAggregate',), ('                    Group Key: pagg_tab_ml_3.a, pagg_tab_ml_3.b, pagg_tab_ml_3.c',), (""                    Filter: (avg(pagg_tab_ml_3.b) > '7'::numeric)"",), ('                    ->  Seq Scan on pagg_tab_ml_p3_s1 pagg_tab_ml_3',), ('              ->  HashAggregate',), ('                    Group Key: pagg_tab_ml_1.a, pagg_tab_ml_1.b, pagg_tab_ml_1.c',), (""                    Filter: (avg(pagg_tab_ml_1.b) > '7'::numeric)"",), ('                    ->  Seq Scan on pagg_tab_ml_p2_s1 pagg_tab_ml_1',), ('              ->  HashAggregate',), ('                    Group Key: pagg_tab_ml_4.a, pagg_tab_ml_4.b, pagg_tab_ml_4.c',), (""                    Filter: (avg(pagg_tab_ml_4.b) > '7'::numeric)"",), ('                    ->  Seq Scan on pagg_tab_ml_p3_s2 pagg_tab_ml_4',), ('              ->  HashAggregate',), ('                    Group Key: pagg_tab_ml_2.a, pagg_tab_ml_2.b, pagg_tab_ml_2.c',), (""                    Filter: (avg(pagg_tab_ml_2.b) > '7'::numeric)"",), ('                    ->  Seq Scan on pagg_tab_ml_p2_s2 pagg_tab_ml_2',)]"
postgresql,postgresql,"SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(8, 4000, 500), (8, 4000, 500), (9, 4500, 500), (9, 4500, 500), (18, 4000, 500), (18, 4000, 500), (19, 4500, 500), (19, 4500, 500), (28, 4000, 500), (28, 4000, 500), (29, 4500, 500), (29, 4500, 500)]"
postgresql,postgresql,SET parallel_setup_cost TO 10,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,ANALYZE pagg_tab_para,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_para.x, (sum(pagg_tab_para.y)), (avg(pagg_tab_para.y))',), ('  ->  Finalize GroupAggregate',), ('        Group Key: pagg_tab_para.x',), (""        Filter: (avg(pagg_tab_para.y) < '7'::numeric)"",), ('        ->  Gather Merge',), ('              Workers Planned: 2',), ('              ->  Sort',), ('                    Sort Key: pagg_tab_para.x',), ('                    ->  Parallel Append',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_para.x',), ('                                ->  Parallel Seq Scan on pagg_tab_para_p1 pagg_tab_para',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_para_1.x',), ('                                ->  Parallel Seq Scan on pagg_tab_para_p2 pagg_tab_para_1',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_para_2.x',), ('                                ->  Parallel Seq Scan on pagg_tab_para_p3 pagg_tab_para_2',)]"
postgresql,postgresql,"SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 5000, Decimal('5.0000000000000000'), 1000), (1, 6000, Decimal('6.0000000000000000'), 1000), (10, 5000, Decimal('5.0000000000000000'), 1000), (11, 6000, Decimal('6.0000000000000000'), 1000), (20, 5000, Decimal('5.0000000000000000'), 1000), (21, 6000, Decimal('6.0000000000000000'), 1000)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT y, sum(x), avg(x), count(*) FROM pagg_tab_para GROUP BY y HAVING avg(x) < 12 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_para.y, (sum(pagg_tab_para.x)), (avg(pagg_tab_para.x))',), ('  ->  Finalize GroupAggregate',), ('        Group Key: pagg_tab_para.y',), (""        Filter: (avg(pagg_tab_para.x) < '12'::numeric)"",), ('        ->  Gather Merge',), ('              Workers Planned: 2',), ('              ->  Sort',), ('                    Sort Key: pagg_tab_para.y',), ('                    ->  Parallel Append',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_para.y',), ('                                ->  Parallel Seq Scan on pagg_tab_para_p1 pagg_tab_para',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_para_1.y',), ('                                ->  Parallel Seq Scan on pagg_tab_para_p2 pagg_tab_para_1',), ('                          ->  Partial HashAggregate',), ('                                Group Key: pagg_tab_para_2.y',), ('                                ->  Parallel Seq Scan on pagg_tab_para_p3 pagg_tab_para_2',)]"
postgresql,postgresql,"SELECT y, sum(x), avg(x), count(*) FROM pagg_tab_para GROUP BY y HAVING avg(x) < 12 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 15000, Decimal('10.0000000000000000'), 1500), (1, 16500, Decimal('11.0000000000000000'), 1500), (10, 15000, Decimal('10.0000000000000000'), 1500), (11, 16500, Decimal('11.0000000000000000'), 1500)]"
postgresql,postgresql,ALTER TABLE pagg_tab_para_p1 SET (parallel_workers = 0),partition_aggregate.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pagg_tab_para_p3 SET (parallel_workers = 0),partition_aggregate.sql,SAME,,[]
postgresql,postgresql,ANALYZE pagg_tab_para,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT x, sum(y), avg(y), sum(x+y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_para.x, (sum(pagg_tab_para.y)), (avg(pagg_tab_para.y))',), ('  ->  Finalize GroupAggregate',), ('        Group Key: pagg_tab_para.x',), (""        Filter: (avg(pagg_tab_para.y) < '7'::numeric)"",), ('        ->  Gather Merge',), ('              Workers Planned: 2',), ('              ->  Sort',), ('                    Sort Key: pagg_tab_para.x',), ('                    ->  Partial HashAggregate',), ('                          Group Key: pagg_tab_para.x',), ('                          ->  Parallel Append',), ('                                ->  Seq Scan on pagg_tab_para_p1 pagg_tab_para_1',), ('                                ->  Seq Scan on pagg_tab_para_p3 pagg_tab_para_3',), ('                                ->  Parallel Seq Scan on pagg_tab_para_p2 pagg_tab_para_2',)]"
postgresql,postgresql,"SELECT x, sum(y), avg(y), sum(x+y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 5000, Decimal('5.0000000000000000'), 5000, 1000), (1, 6000, Decimal('6.0000000000000000'), 7000, 1000), (10, 5000, Decimal('5.0000000000000000'), 15000, 1000), (11, 6000, Decimal('6.0000000000000000'), 17000, 1000), (20, 5000, Decimal('5.0000000000000000'), 25000, 1000), (21, 6000, Decimal('6.0000000000000000'), 27000, 1000)]"
postgresql,postgresql,ALTER TABLE pagg_tab_para_p2 SET (parallel_workers = 0),partition_aggregate.sql,SAME,,[]
postgresql,postgresql,ANALYZE pagg_tab_para,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT x, sum(y), avg(y), sum(x+y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_para.x, (sum(pagg_tab_para.y)), (avg(pagg_tab_para.y))',), ('  ->  Finalize GroupAggregate',), ('        Group Key: pagg_tab_para.x',), (""        Filter: (avg(pagg_tab_para.y) < '7'::numeric)"",), ('        ->  Gather Merge',), ('              Workers Planned: 2',), ('              ->  Sort',), ('                    Sort Key: pagg_tab_para.x',), ('                    ->  Partial HashAggregate',), ('                          Group Key: pagg_tab_para.x',), ('                          ->  Parallel Append',), ('                                ->  Seq Scan on pagg_tab_para_p1 pagg_tab_para_1',), ('                                ->  Seq Scan on pagg_tab_para_p2 pagg_tab_para_2',), ('                                ->  Seq Scan on pagg_tab_para_p3 pagg_tab_para_3',)]"
postgresql,postgresql,"SELECT x, sum(y), avg(y), sum(x+y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 5000, Decimal('5.0000000000000000'), 5000, 1000), (1, 6000, Decimal('6.0000000000000000'), 7000, 1000), (10, 5000, Decimal('5.0000000000000000'), 15000, 1000), (11, 6000, Decimal('6.0000000000000000'), 17000, 1000), (20, 5000, Decimal('5.0000000000000000'), 25000, 1000), (21, 6000, Decimal('6.0000000000000000'), 27000, 1000)]"
postgresql,postgresql,RESET min_parallel_table_scan_size,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,RESET parallel_setup_cost,partition_aggregate.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[('Sort',), ('  Sort Key: pagg_tab_para.x, (sum(pagg_tab_para.y)), (avg(pagg_tab_para.y))',), ('  ->  Append',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_para.x',), (""              Filter: (avg(pagg_tab_para.y) < '7'::numeric)"",), ('              ->  Seq Scan on pagg_tab_para_p1 pagg_tab_para',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_para_1.x',), (""              Filter: (avg(pagg_tab_para_1.y) < '7'::numeric)"",), ('              ->  Seq Scan on pagg_tab_para_p2 pagg_tab_para_1',), ('        ->  HashAggregate',), ('              Group Key: pagg_tab_para_2.x',), (""              Filter: (avg(pagg_tab_para_2.y) < '7'::numeric)"",), ('              ->  Seq Scan on pagg_tab_para_p3 pagg_tab_para_2',)]"
postgresql,postgresql,"SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3",partition_aggregate.sql,SAME,,"[(0, 5000, Decimal('5.0000000000000000'), 1000), (1, 6000, Decimal('6.0000000000000000'), 1000), (10, 5000, Decimal('5.0000000000000000'), 1000), (11, 6000, Decimal('6.0000000000000000'), 1000), (20, 5000, Decimal('5.0000000000000000'), 1000), (21, 6000, Decimal('6.0000000000000000'), 1000)]"
postgresql,postgresql,SELECT * FROM pg_partition_tree(NULL),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_tree(0),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_ancestors(NULL),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_ancestors(0),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT pg_partition_root(NULL),partition_info.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_partition_root(0),partition_info.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_test'),partition_info.sql,SAME,,"[('ptif_test',)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_test0'),partition_info.sql,SAME,,"[('ptif_test',)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_test01'),partition_info.sql,SAME,,"[('ptif_test',)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_test3'),partition_info.sql,SAME,,"[('ptif_test',)]"
postgresql,postgresql,CREATE INDEX ptif_test_index ON ONLY ptif_test (a),partition_info.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ptif_test0_index ON ONLY ptif_test0 (a),partition_info.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX ptif_test_index ATTACH PARTITION ptif_test0_index,partition_info.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ptif_test01_index ON ptif_test01 (a),partition_info.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX ptif_test0_index ATTACH PARTITION ptif_test01_index,partition_info.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ptif_test1_index ON ONLY ptif_test1 (a),partition_info.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX ptif_test_index ATTACH PARTITION ptif_test1_index,partition_info.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ptif_test11_index ON ptif_test11 (a),partition_info.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX ptif_test1_index ATTACH PARTITION ptif_test11_index,partition_info.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ptif_test2_index ON ptif_test2 (a),partition_info.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX ptif_test_index ATTACH PARTITION ptif_test2_index,partition_info.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ptif_test3_index ON ptif_test3 (a),partition_info.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX ptif_test_index ATTACH PARTITION ptif_test3_index,partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT pg_partition_root('ptif_test_index'),partition_info.sql,SAME,,"[('ptif_test_index',)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_test0_index'),partition_info.sql,SAME,,"[('ptif_test_index',)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_test01_index'),partition_info.sql,SAME,,"[('ptif_test_index',)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_test3_index'),partition_info.sql,SAME,,"[('ptif_test_index',)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree('ptif_test')",partition_info.sql,SAME,,"[('ptif_test', None, 0, False), ('ptif_test0', 'ptif_test', 1, False), ('ptif_test1', 'ptif_test', 1, False), ('ptif_test2', 'ptif_test', 1, True), ('ptif_test3', 'ptif_test', 1, False), ('ptif_test01', 'ptif_test0', 2, True), ('ptif_test11', 'ptif_test1', 2, True)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree('ptif_test0') p   JOIN pg_class c ON (p.relid = c.oid)",partition_info.sql,SAME,,"[('ptif_test0', 'ptif_test', 0, False), ('ptif_test01', 'ptif_test0', 1, True)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree('ptif_test01') p   JOIN pg_class c ON (p.relid = c.oid)",partition_info.sql,SAME,,"[('ptif_test01', 'ptif_test0', 0, True)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree('ptif_test3') p   JOIN pg_class c ON (p.relid = c.oid)",partition_info.sql,SAME,,"[('ptif_test3', 'ptif_test', 0, False)]"
postgresql,postgresql,SELECT * FROM pg_partition_ancestors('ptif_test01'),partition_info.sql,SAME,,"[('ptif_test01',), ('ptif_test0',), ('ptif_test',)]"
postgresql,postgresql,SELECT * FROM pg_partition_ancestors('ptif_test'),partition_info.sql,SAME,,"[('ptif_test',)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree(pg_partition_root('ptif_test01')) p   JOIN pg_class c ON (p.relid = c.oid)",partition_info.sql,SAME,,"[('ptif_test', None, 0, False), ('ptif_test0', 'ptif_test', 1, False), ('ptif_test1', 'ptif_test', 1, False), ('ptif_test2', 'ptif_test', 1, True), ('ptif_test3', 'ptif_test', 1, False), ('ptif_test01', 'ptif_test0', 2, True), ('ptif_test11', 'ptif_test1', 2, True)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree('ptif_test_index')",partition_info.sql,SAME,,"[('ptif_test_index', None, 0, False), ('ptif_test0_index', 'ptif_test_index', 1, False), ('ptif_test1_index', 'ptif_test_index', 1, False), ('ptif_test2_index', 'ptif_test_index', 1, True), ('ptif_test3_index', 'ptif_test_index', 1, False), ('ptif_test01_index', 'ptif_test0_index', 2, True), ('ptif_test11_index', 'ptif_test1_index', 2, True)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree('ptif_test0_index') p   JOIN pg_class c ON (p.relid = c.oid)",partition_info.sql,SAME,,"[('ptif_test0_index', 'ptif_test_index', 0, False), ('ptif_test01_index', 'ptif_test0_index', 1, True)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree('ptif_test01_index') p   JOIN pg_class c ON (p.relid = c.oid)",partition_info.sql,SAME,,"[('ptif_test01_index', 'ptif_test0_index', 0, True)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree('ptif_test3_index') p   JOIN pg_class c ON (p.relid = c.oid)",partition_info.sql,SAME,,"[('ptif_test3_index', 'ptif_test_index', 0, False)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree(pg_partition_root('ptif_test01_index')) p   JOIN pg_class c ON (p.relid = c.oid)",partition_info.sql,SAME,,"[('ptif_test_index', None, 0, False), ('ptif_test0_index', 'ptif_test_index', 1, False), ('ptif_test1_index', 'ptif_test_index', 1, False), ('ptif_test2_index', 'ptif_test_index', 1, True), ('ptif_test3_index', 'ptif_test_index', 1, False), ('ptif_test01_index', 'ptif_test0_index', 2, True), ('ptif_test11_index', 'ptif_test1_index', 2, True)]"
postgresql,postgresql,SELECT * FROM pg_partition_ancestors('ptif_test01_index'),partition_info.sql,SAME,,"[('ptif_test01_index',), ('ptif_test0_index',), ('ptif_test_index',)]"
postgresql,postgresql,SELECT * FROM pg_partition_ancestors('ptif_test_index'),partition_info.sql,SAME,,"[('ptif_test_index',)]"
postgresql,postgresql,"SELECT relid, parentrelid, level, isleaf   FROM pg_partition_tree('ptif_normal_table')",partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_ancestors('ptif_normal_table'),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT pg_partition_root('ptif_normal_table'),partition_info.sql,SAME,,"[(None,)]"
postgresql,postgresql,CREATE VIEW ptif_test_view AS SELECT 1,partition_info.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW ptif_test_matview AS SELECT 1,partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_tree('ptif_test_view'),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_tree('ptif_test_matview'),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_tree('ptif_li_parent'),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_tree('ptif_li_child'),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_ancestors('ptif_test_view'),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_ancestors('ptif_test_matview'),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_ancestors('ptif_li_parent'),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_partition_ancestors('ptif_li_child'),partition_info.sql,SAME,,[]
postgresql,postgresql,SELECT pg_partition_root('ptif_test_view'),partition_info.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_test_matview'),partition_info.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_li_parent'),partition_info.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_partition_root('ptif_li_child'),partition_info.sql,SAME,,"[(None,)]"
postgresql,postgresql,DROP VIEW ptif_test_view,partition_info.sql,SAME,,[]
postgresql,postgresql,DROP MATERIALIZED VIEW ptif_test_matview,partition_info.sql,SAME,,[]
postgresql,postgresql,SET enable_partitionwise_join to true,partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt1_p1_a on prt1_p1(a),partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt1_p2_a on prt1_p2(a),partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt1_p3_a on prt1_p3(a),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt1,partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt2_p1_b on prt2_p1(b),partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt2_p2_b on prt2_p2(b),partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt2_p3_b on prt2_p3(b),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1, prt2 t2 WHERE t1.a = t2.b AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p2 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_3.b = t1_3.a)',), ('              ->  Seq Scan on prt2_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1, prt2 t2 WHERE t1.a = t2.b AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000'), (150, '0150', 150, '0150'), (300, '0300', 300, '0300'), (450, '0450', 450, '0450')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT COUNT(*) FROM prt1 t1   LEFT JOIN prt1 t2 ON t1.a = t2.a   LEFT JOIN prt1 t3 ON t2.a = t3.a,partition_join.sql,SAME,,"[('Aggregate',), ('  ->  Append',), ('        ->  Hash Left Join',), ('              Hash Cond: (t2_1.a = t3_1.a)',), ('              ->  Hash Left Join',), ('                    Hash Cond: (t1_1.a = t2_1.a)',), ('                    ->  Seq Scan on prt1_p1 t1_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p1 t3_1',), ('        ->  Hash Left Join',), ('              Hash Cond: (t2_2.a = t3_2.a)',), ('              ->  Hash Left Join',), ('                    Hash Cond: (t1_2.a = t2_2.a)',), ('                    ->  Seq Scan on prt1_p2 t1_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p2 t3_2',), ('        ->  Hash Left Join',), ('              Hash Cond: (t2_3.a = t3_3.a)',), ('              ->  Hash Left Join',), ('                    Hash Cond: (t1_3.a = t2_3.a)',), ('                    ->  Seq Scan on prt1_p3 t1_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p3 t3_3',)]"
postgresql,postgresql,SELECT COUNT(*) FROM prt1 t1   LEFT JOIN prt1 t2 ON t1.a = t2.a   LEFT JOIN prt1 t3 ON t2.a = t3.a,partition_join.sql,SAME,,"[(300,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1, t2 FROM prt1 t1 LEFT JOIN prt2 t2 ON t1.a = t2.b WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b',), ('  ->  Hash Right Join',), ('        Hash Cond: (t2.b = t1.a)',), ('        ->  Append',), ('              ->  Seq Scan on prt2_p1 t2_1',), ('              ->  Seq Scan on prt2_p2 t2_2',), ('              ->  Seq Scan on prt2_p3 t2_3',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_p1 t1_1',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_p2 t1_2',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1, t2 FROM prt1 t1 LEFT JOIN prt2 t2 ON t1.a = t2.b WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('(0,0,0000)', '(0,0,0000)'), ('(50,0,0050)', None), ('(100,0,0100)', None), ('(150,0,0150)', '(0,150,0150)'), ('(200,0,0200)', None), ('(250,0,0250)', None), ('(300,0,0300)', '(0,300,0300)'), ('(350,0,0350)', None), ('(400,0,0400)', None), ('(450,0,0450)', '(0,450,0450)'), ('(500,0,0500)', None), ('(550,0,0550)', None)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1 RIGHT JOIN prt2 t2 ON t1.a = t2.b WHERE t2.a = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: (t1_1.a = t2_1.b)',), ('              ->  Seq Scan on prt1_p1 t1_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p1 t2_1',), ('                          Filter: (a = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: (t1_2.a = t2_2.b)',), ('              ->  Seq Scan on prt1_p2 t1_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p2 t2_2',), ('                          Filter: (a = 0)',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on prt2_p3 t2_3',), ('                    Filter: (a = 0)',), ('              ->  Index Scan using iprt1_p3_a on prt1_p3 t1_3',), ('                    Index Cond: (a = t2_3.b)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1 RIGHT JOIN prt2 t2 ON t1.a = t2.b WHERE t2.a = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000'), (150, '0150', 150, '0150'), (300, '0300', 300, '0300'), (450, '0450', 450, '0450'), (None, None, 75, '0075'), (None, None, 225, '0225'), (None, None, 375, '0375'), (None, None, 525, '0525')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT 50 phv, * FROM prt1 WHERE prt1.b = 0) t1 FULL JOIN (SELECT 75 phv, * FROM prt2 WHERE prt2.a = 0) t2 ON (t1.a = t2.b) WHERE t1.phv = t1.a OR t2.phv = t2.b ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: prt1.a, prt2.b',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: (prt1_1.a = prt2_1.b)',), ('              Filter: (((50) = prt1_1.a) OR ((75) = prt2_1.b))',), ('              ->  Seq Scan on prt1_p1 prt1_1',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p1 prt2_1',), ('                          Filter: (a = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: (prt1_2.a = prt2_2.b)',), ('              Filter: (((50) = prt1_2.a) OR ((75) = prt2_2.b))',), ('              ->  Seq Scan on prt1_p2 prt1_2',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p2 prt2_2',), ('                          Filter: (a = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: (prt1_3.a = prt2_3.b)',), ('              Filter: (((50) = prt1_3.a) OR ((75) = prt2_3.b))',), ('              ->  Seq Scan on prt1_p3 prt1_3',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p3 prt2_3',), ('                          Filter: (a = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT 50 phv, * FROM prt1 WHERE prt1.b = 0) t1 FULL JOIN (SELECT 75 phv, * FROM prt2 WHERE prt2.a = 0) t2 ON (t1.a = t2.b) WHERE t1.phv = t1.a OR t2.phv = t2.b ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(50, '0050', None, None), (None, None, 75, '0075')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1, prt2 t2 WHERE t1.a = t2.b AND t1.a < 450 AND t2.b > 250 AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Join',), ('        Hash Cond: (t2.b = t1.a)',), ('        ->  Seq Scan on prt2_p2 t2',), ('              Filter: (b > 250)',), ('        ->  Hash',), ('              ->  Seq Scan on prt1_p2 t1',), ('                    Filter: ((a < 450) AND (b = 0))',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1, prt2 t2 WHERE t1.a = t2.b AND t1.a < 450 AND t2.b > 250 AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(300, '0300', 300, '0300')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1 WHERE a < 450) t1 LEFT JOIN (SELECT * FROM prt2 WHERE b > 250) t2 ON t1.a = t2.b WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: prt1.a, prt2.b',), ('  ->  Hash Right Join',), ('        Hash Cond: (prt2.b = prt1.a)',), ('        ->  Append',), ('              ->  Seq Scan on prt2_p2 prt2_1',), ('                    Filter: (b > 250)',), ('              ->  Seq Scan on prt2_p3 prt2_2',), ('                    Filter: (b > 250)',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_p1 prt1_1',), ('                          Filter: ((a < 450) AND (b = 0))',), ('                    ->  Seq Scan on prt1_p2 prt1_2',), ('                          Filter: ((a < 450) AND (b = 0))',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1 WHERE a < 450) t1 LEFT JOIN (SELECT * FROM prt2 WHERE b > 250) t2 ON t1.a = t2.b WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, '0000', None, None), (50, '0050', None, None), (100, '0100', None, None), (150, '0150', None, None), (200, '0200', None, None), (250, '0250', None, None), (300, '0300', 300, '0300'), (350, '0350', None, None), (400, '0400', None, None)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1 WHERE a < 450) t1 FULL JOIN (SELECT * FROM prt2 WHERE b > 250) t2 ON t1.a = t2.b WHERE t1.b = 0 OR t2.a = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: prt1.a, prt2.b',), ('  ->  Hash Full Join',), ('        Hash Cond: (prt1.a = prt2.b)',), ('        Filter: ((prt1.b = 0) OR (prt2.a = 0))',), ('        ->  Append',), ('              ->  Seq Scan on prt1_p1 prt1_1',), ('                    Filter: (a < 450)',), ('              ->  Seq Scan on prt1_p2 prt1_2',), ('                    Filter: (a < 450)',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_p2 prt2_1',), ('                          Filter: (b > 250)',), ('                    ->  Seq Scan on prt2_p3 prt2_2',), ('                          Filter: (b > 250)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1 WHERE a < 450) t1 FULL JOIN (SELECT * FROM prt2 WHERE b > 250) t2 ON t1.a = t2.b WHERE t1.b = 0 OR t2.a = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, '0000', None, None), (50, '0050', None, None), (100, '0100', None, None), (150, '0150', None, None), (200, '0200', None, None), (250, '0250', None, None), (300, '0300', 300, '0300'), (350, '0350', None, None), (400, '0400', None, None), (None, None, 375, '0375'), (None, None, 450, '0450'), (None, None, 525, '0525')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1 t1 WHERE t1.a IN (SELECT t2.b FROM prt2 t2 WHERE t2.a = 0) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Semi Join',), ('              Hash Cond: (t1_1.a = t2_1.b)',), ('              ->  Seq Scan on prt1_p1 t1_1',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p1 t2_1',), ('                          Filter: (a = 0)',), ('        ->  Hash Semi Join',), ('              Hash Cond: (t1_2.a = t2_2.b)',), ('              ->  Seq Scan on prt1_p2 t1_2',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p2 t2_2',), ('                          Filter: (a = 0)',), ('        ->  Nested Loop Semi Join',), ('              Join Filter: (t1_3.a = t2_3.b)',), ('              ->  Seq Scan on prt1_p3 t1_3',), ('                    Filter: (b = 0)',), ('              ->  Materialize',), ('                    ->  Seq Scan on prt2_p3 t2_3',), ('                          Filter: (a = 0)',)]"
postgresql,postgresql,SELECT t1.* FROM prt1 t1 WHERE t1.a IN (SELECT t2.b FROM prt2 t2 WHERE t2.a = 0) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[(0, 0, '0000'), (150, 0, '0150'), (300, 0, '0300'), (450, 0, '0450')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT sum(t1.a), avg(t1.a), sum(t1.b), avg(t1.b) FROM prt1 t1 WHERE NOT EXISTS (SELECT 1 FROM prt2 t2 WHERE t1.a = t2.b)",partition_join.sql,SAME,,"[('Aggregate',), ('  ->  Append',), ('        ->  Hash Anti Join',), ('              Hash Cond: (t1_1.a = t2_1.b)',), ('              ->  Seq Scan on prt1_p1 t1_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p1 t2_1',), ('        ->  Hash Anti Join',), ('              Hash Cond: (t1_2.a = t2_2.b)',), ('              ->  Seq Scan on prt1_p2 t1_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p2 t2_2',), ('        ->  Hash Anti Join',), ('              Hash Cond: (t1_3.a = t2_3.b)',), ('              ->  Seq Scan on prt1_p3 t1_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p3 t2_3',)]"
postgresql,postgresql,"SELECT sum(t1.a), avg(t1.a), sum(t1.b), avg(t1.b) FROM prt1 t1 WHERE NOT EXISTS (SELECT 1 FROM prt2 t2 WHERE t1.a = t2.b)",partition_join.sql,SAME,,"[(60000, Decimal('300.0000000000000000'), 2400, Decimal('12.0000000000000000'))]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM prt1 t1 LEFT JOIN LATERAL 			  (SELECT t2.a AS t2a, t3.a AS t3a, least(t1.a,t2.a,t3.b) FROM prt1 t2 JOIN prt2 t3 ON (t2.a = t3.b)) ss 			  ON t1.a = ss.t2a WHERE t1.b = 0 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on prt1_p1 t1_1',), ('                    Filter: (b = 0)',), ('              ->  Nested Loop',), ('                    ->  Index Only Scan using iprt1_p1_a on prt1_p1 t2_1',), ('                          Index Cond: (a = t1_1.a)',), ('                    ->  Index Scan using iprt2_p1_b on prt2_p1 t3_1',), ('                          Index Cond: (b = t2_1.a)',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on prt1_p2 t1_2',), ('                    Filter: (b = 0)',), ('              ->  Nested Loop',), ('                    ->  Index Only Scan using iprt1_p2_a on prt1_p2 t2_2',), ('                          Index Cond: (a = t1_2.a)',), ('                    ->  Index Scan using iprt2_p2_b on prt2_p2 t3_2',), ('                          Index Cond: (b = t2_2.a)',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on prt1_p3 t1_3',), ('                    Filter: (b = 0)',), ('              ->  Nested Loop',), ('                    ->  Index Only Scan using iprt1_p3_a on prt1_p3 t2_3',), ('                          Index Cond: (a = t1_3.a)',), ('                    ->  Index Scan using iprt2_p3_b on prt2_p3 t3_3',), ('                          Index Cond: (b = t2_3.a)',)]"
postgresql,postgresql,"SELECT * FROM prt1 t1 LEFT JOIN LATERAL 			  (SELECT t2.a AS t2a, t3.a AS t3a, least(t1.a,t2.a,t3.b) FROM prt1 t2 JOIN prt2 t3 ON (t2.a = t3.b)) ss 			  ON t1.a = ss.t2a WHERE t1.b = 0 ORDER BY t1.a",partition_join.sql,SAME,,"[(0, 0, '0000', 0, 0, 0), (50, 0, '0050', None, None, None), (100, 0, '0100', None, None, None), (150, 0, '0150', 150, 0, 150), (200, 0, '0200', None, None, None), (250, 0, '0250', None, None, None), (300, 0, '0300', 300, 0, 300), (350, 0, '0350', None, None, None), (400, 0, '0400', None, None, None), (450, 0, '0450', 450, 0, 450), (500, 0, '0500', None, None, None), (550, 0, '0550', None, None, None)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, ss.t2a, ss.t2c FROM prt1 t1 LEFT JOIN LATERAL 			  (SELECT t2.a AS t2a, t3.a AS t3a, t2.b t2b, t2.c t2c, least(t1.a,t2.a,t3.b) FROM prt1 t2 JOIN prt2 t3 ON (t2.a = t3.b)) ss 			  ON t1.c = ss.t2c WHERE (t1.b + coalesce(ss.t2b, 0)) = 0 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Left Join',), ('        Hash Cond: ((t1.c)::text = (t2.c)::text)',), ('        Filter: ((t1.b + COALESCE(t2.b, 0)) = 0)',), ('        ->  Append',), ('              ->  Seq Scan on prt1_p1 t1_1',), ('              ->  Seq Scan on prt1_p2 t1_2',), ('              ->  Seq Scan on prt1_p3 t1_3',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Hash Join',), ('                          Hash Cond: (t2_1.a = t3_1.b)',), ('                          ->  Seq Scan on prt1_p1 t2_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_p1 t3_1',), ('                    ->  Hash Join',), ('                          Hash Cond: (t2_2.a = t3_2.b)',), ('                          ->  Seq Scan on prt1_p2 t2_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_p2 t3_2',), ('                    ->  Hash Join',), ('                          Hash Cond: (t2_3.a = t3_3.b)',), ('                          ->  Seq Scan on prt1_p3 t2_3',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_p3 t3_3',)]"
postgresql,postgresql,"SELECT t1.a, ss.t2a, ss.t2c FROM prt1 t1 LEFT JOIN LATERAL 			  (SELECT t2.a AS t2a, t3.a AS t3a, t2.b t2b, t2.c t2c, least(t1.a,t2.a,t3.a) FROM prt1 t2 JOIN prt2 t3 ON (t2.a = t3.b)) ss 			  ON t1.c = ss.t2c WHERE (t1.b + coalesce(ss.t2b, 0)) = 0 ORDER BY t1.a",partition_join.sql,SAME,,"[(0, 0, '0000'), (50, None, None), (100, None, None), (150, 150, '0150'), (200, None, None), (250, None, None), (300, 300, '0300'), (350, None, None), (400, None, None), (450, 450, '0450'), (500, None, None), (550, None, None)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM prt1 t1 JOIN LATERAL 			  (SELECT * FROM prt1 t2 TABLESAMPLE SYSTEM (t1.a) REPEATABLE(t1.b)) s 			  ON t1.a = s.a,partition_join.sql,SAME,,"[('Gather',), ('  Workers Planned: 2',), ('  ->  Nested Loop',), ('        ->  Parallel Append',), ('              ->  Parallel Seq Scan on prt1_p1 t1_1',), ('              ->  Parallel Seq Scan on prt1_p2 t1_2',), ('              ->  Parallel Seq Scan on prt1_p3 t1_3',), ('        ->  Append',), ('              ->  Sample Scan on prt1_p1 t2_1',), ('                    Sampling: system (t1.a) REPEATABLE (t1.b)',), ('                    Filter: (t1.a = a)',), ('              ->  Sample Scan on prt1_p2 t2_2',), ('                    Sampling: system (t1.a) REPEATABLE (t1.b)',), ('                    Filter: (t1.a = a)',), ('              ->  Sample Scan on prt1_p3 t2_3',), ('                    Sampling: system (t1.a) REPEATABLE (t1.b)',), ('                    Filter: (t1.a = a)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM prt1 t1 LEFT JOIN LATERAL 			  (SELECT t1.b AS t1b, t2.* FROM prt2 t2) s 			  ON t1.a = s.b WHERE s.t1b = s.a",partition_join.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop',), ('        ->  Append',), ('              ->  Seq Scan on prt1_p1 t1_1',), ('              ->  Seq Scan on prt1_p2 t1_2',), ('              ->  Seq Scan on prt1_p3 t1_3',), ('        ->  Append',), ('              ->  Index Scan using iprt2_p1_b on prt2_p1 t2_1',), ('                    Index Cond: (b = t1.a)',), ('                    Filter: (t1.b = a)',), ('              ->  Index Scan using iprt2_p2_b on prt2_p2 t2_2',), ('                    Index Cond: (b = t1.a)',), ('                    Filter: (t1.b = a)',), ('              ->  Index Scan using iprt2_p3_b on prt2_p3 t2_3',), ('                    Index Cond: (b = t1.a)',), ('                    Filter: (t1.b = a)',)]"
postgresql,postgresql,"SELECT count(*) FROM prt1 t1 LEFT JOIN LATERAL 			  (SELECT t1.b AS t1b, t2.* FROM prt2 t2) s 			  ON t1.a = s.b WHERE s.t1b = s.a",partition_join.sql,SAME,,"[(100,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM prt1 t1 LEFT JOIN LATERAL 			  (SELECT t1.b AS t1b, t2.* FROM prt2 t2) s 			  ON t1.a = s.b WHERE s.t1b = s.b",partition_join.sql,SAME,,"[('Aggregate',), ('  ->  Nested Loop',), ('        ->  Append',), ('              ->  Seq Scan on prt1_p1 t1_1',), ('              ->  Seq Scan on prt1_p2 t1_2',), ('              ->  Seq Scan on prt1_p3 t1_3',), ('        ->  Append',), ('              ->  Index Only Scan using iprt2_p1_b on prt2_p1 t2_1',), ('                    Index Cond: (b = t1.a)',), ('                    Filter: (b = t1.b)',), ('              ->  Index Only Scan using iprt2_p2_b on prt2_p2 t2_2',), ('                    Index Cond: (b = t1.a)',), ('                    Filter: (b = t1.b)',), ('              ->  Index Only Scan using iprt2_p3_b on prt2_p3 t2_3',), ('                    Index Cond: (b = t1.a)',), ('                    Filter: (b = t1.b)',)]"
postgresql,postgresql,"SELECT count(*) FROM prt1 t1 LEFT JOIN LATERAL 			  (SELECT t1.b AS t1b, t2.* FROM prt2 t2) s 			  ON t1.a = s.b WHERE s.t1b = s.b",partition_join.sql,SAME,,"[(5,)]"
postgresql,postgresql,SET enable_partitionwise_aggregate TO true,partition_join.sql,SAME,,[]
postgresql,postgresql,SET enable_hashjoin TO false,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT a, b FROM prt1 FULL JOIN prt2 p2(b,a,c) USING(a,b)   WHERE a BETWEEN 490 AND 510   GROUP BY 1, 2 ORDER BY 1, 2",partition_join.sql,SAME,,"[('Group',), ('  Group Key: (COALESCE(prt1.a, p2.a)), (COALESCE(prt1.b, p2.b))',), ('  ->  Merge Append',), ('        Sort Key: (COALESCE(prt1.a, p2.a)), (COALESCE(prt1.b, p2.b))',), ('        ->  Group',), ('              Group Key: (COALESCE(prt1.a, p2.a)), (COALESCE(prt1.b, p2.b))',), ('              ->  Sort',), ('                    Sort Key: (COALESCE(prt1.a, p2.a)), (COALESCE(prt1.b, p2.b))',), ('                    ->  Merge Full Join',), ('                          Merge Cond: ((prt1.a = p2.a) AND (prt1.b = p2.b))',), ('                          Filter: ((COALESCE(prt1.a, p2.a) >= 490) AND (COALESCE(prt1.a, p2.a) <= 510))',), ('                          ->  Sort',), ('                                Sort Key: prt1.a, prt1.b',), ('                                ->  Seq Scan on prt1_p1 prt1',), ('                          ->  Sort',), ('                                Sort Key: p2.a, p2.b',), ('                                ->  Seq Scan on prt2_p1 p2',), ('        ->  Group',), ('              Group Key: (COALESCE(prt1_1.a, p2_1.a)), (COALESCE(prt1_1.b, p2_1.b))',), ('              ->  Sort',), ('                    Sort Key: (COALESCE(prt1_1.a, p2_1.a)), (COALESCE(prt1_1.b, p2_1.b))',), ('                    ->  Merge Full Join',), ('                          Merge Cond: ((prt1_1.a = p2_1.a) AND (prt1_1.b = p2_1.b))',), ('                          Filter: ((COALESCE(prt1_1.a, p2_1.a) >= 490) AND (COALESCE(prt1_1.a, p2_1.a) <= 510))',), ('                          ->  Sort',), ('                                Sort Key: prt1_1.a, prt1_1.b',), ('                                ->  Seq Scan on prt1_p2 prt1_1',), ('                          ->  Sort',), ('                                Sort Key: p2_1.a, p2_1.b',), ('                                ->  Seq Scan on prt2_p2 p2_1',), ('        ->  Group',), ('              Group Key: (COALESCE(prt1_2.a, p2_2.a)), (COALESCE(prt1_2.b, p2_2.b))',), ('              ->  Sort',), ('                    Sort Key: (COALESCE(prt1_2.a, p2_2.a)), (COALESCE(prt1_2.b, p2_2.b))',), ('                    ->  Merge Full Join',), ('                          Merge Cond: ((prt1_2.a = p2_2.a) AND (prt1_2.b = p2_2.b))',), ('                          Filter: ((COALESCE(prt1_2.a, p2_2.a) >= 490) AND (COALESCE(prt1_2.a, p2_2.a) <= 510))',), ('                          ->  Sort',), ('                                Sort Key: prt1_2.a, prt1_2.b',), ('                                ->  Seq Scan on prt1_p3 prt1_2',), ('                          ->  Sort',), ('                                Sort Key: p2_2.a, p2_2.b',), ('                                ->  Seq Scan on prt2_p3 p2_2',)]"
postgresql,postgresql,"SELECT a, b FROM prt1 FULL JOIN prt2 p2(b,a,c) USING(a,b)   WHERE a BETWEEN 490 AND 510   GROUP BY 1, 2 ORDER BY 1, 2",partition_join.sql,SAME,,"[(490, 15), (492, 17), (494, 19), (495, 20), (496, 21), (498, 23), (500, 0), (501, 1), (502, 2), (504, 4), (506, 6), (507, 7), (508, 8), (510, 10)]"
postgresql,postgresql,RESET enable_partitionwise_aggregate,partition_join.sql,SAME,,[]
postgresql,postgresql,RESET enable_hashjoin,partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt1_e_p1_ab2 on prt1_e_p1(((a+b)/2)),partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt1_e_p2_ab2 on prt1_e_p2(((a+b)/2)),partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX iprt1_e_p3_ab2 on prt1_e_p3(((a+b)/2)),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt1_e,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_e,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_e t1, prt2_e t2 WHERE (t1.a + t1.b)/2 = (t2.b + t2.a)/2 AND t1.c = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (((t2_1.b + t2_1.a) / 2) = ((t1_1.a + t1_1.b) / 2))',), ('              ->  Seq Scan on prt2_e_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_e_p1 t1_1',), ('                          Filter: (c = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (((t2_2.b + t2_2.a) / 2) = ((t1_2.a + t1_2.b) / 2))',), ('              ->  Seq Scan on prt2_e_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_e_p2 t1_2',), ('                          Filter: (c = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (((t2_3.b + t2_3.a) / 2) = ((t1_3.a + t1_3.b) / 2))',), ('              ->  Seq Scan on prt2_e_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_e_p3 t1_3',), ('                          Filter: (c = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_e t1, prt2_e t2 WHERE (t1.a + t1.b)/2 = (t2.b + t2.a)/2 AND t1.c = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, 0, 0, 0), (150, 0, 150, 0), (300, 0, 300, 0), (450, 0, 450, 0)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c, t3.a + t3.b, t3.c FROM prt1 t1, prt2 t2, prt1_e t3 WHERE t1.a = t2.b AND t1.a = (t3.a + t3.b)/2 AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Nested Loop',), ('              Join Filter: (t1_1.a = ((t3_1.a + t3_1.b) / 2))',), ('              ->  Hash Join',), ('                    Hash Cond: (t2_1.b = t1_1.a)',), ('                    ->  Seq Scan on prt2_p1 t2_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_p1 t1_1',), ('                                Filter: (b = 0)',), ('              ->  Index Scan using iprt1_e_p1_ab2 on prt1_e_p1 t3_1',), ('                    Index Cond: (((a + b) / 2) = t2_1.b)',), ('        ->  Nested Loop',), ('              Join Filter: (t1_2.a = ((t3_2.a + t3_2.b) / 2))',), ('              ->  Hash Join',), ('                    Hash Cond: (t2_2.b = t1_2.a)',), ('                    ->  Seq Scan on prt2_p2 t2_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_p2 t1_2',), ('                                Filter: (b = 0)',), ('              ->  Index Scan using iprt1_e_p2_ab2 on prt1_e_p2 t3_2',), ('                    Index Cond: (((a + b) / 2) = t2_2.b)',), ('        ->  Nested Loop',), ('              Join Filter: (t1_3.a = ((t3_3.a + t3_3.b) / 2))',), ('              ->  Hash Join',), ('                    Hash Cond: (t2_3.b = t1_3.a)',), ('                    ->  Seq Scan on prt2_p3 t2_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_p3 t1_3',), ('                                Filter: (b = 0)',), ('              ->  Index Scan using iprt1_e_p3_ab2 on prt1_e_p3 t3_3',), ('                    Index Cond: (((a + b) / 2) = t2_3.b)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c, t3.a + t3.b, t3.c FROM prt1 t1, prt2 t2, prt1_e t3 WHERE t1.a = t2.b AND t1.a = (t3.a + t3.b)/2 AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000', 0, 0), (150, '0150', 150, '0150', 300, 0), (300, '0300', 300, '0300', 600, 0), (450, '0450', 450, '0450', 900, 0)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c, t3.a + t3.b, t3.c FROM (prt1 t1 LEFT JOIN prt2 t2 ON t1.a = t2.b) LEFT JOIN prt1_e t3 ON (t1.a = (t3.a + t3.b)/2) WHERE t1.b = 0 ORDER BY t1.a, t2.b, t3.a + t3.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b, ((t3.a + t3.b))',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: (((t3_1.a + t3_1.b) / 2) = t1_1.a)',), ('              ->  Seq Scan on prt1_e_p1 t3_1',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: (t2_1.b = t1_1.a)',), ('                          ->  Seq Scan on prt2_p1 t2_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt1_p1 t1_1',), ('                                      Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: (((t3_2.a + t3_2.b) / 2) = t1_2.a)',), ('              ->  Seq Scan on prt1_e_p2 t3_2',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: (t2_2.b = t1_2.a)',), ('                          ->  Seq Scan on prt2_p2 t2_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt1_p2 t1_2',), ('                                      Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: (((t3_3.a + t3_3.b) / 2) = t1_3.a)',), ('              ->  Seq Scan on prt1_e_p3 t3_3',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: (t2_3.b = t1_3.a)',), ('                          ->  Seq Scan on prt2_p3 t2_3',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt1_p3 t1_3',), ('                                      Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c, t3.a + t3.b, t3.c FROM (prt1 t1 LEFT JOIN prt2 t2 ON t1.a = t2.b) LEFT JOIN prt1_e t3 ON (t1.a = (t3.a + t3.b)/2) WHERE t1.b = 0 ORDER BY t1.a, t2.b, t3.a + t3.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000', 0, 0), (50, '0050', None, None, 100, 0), (100, '0100', None, None, 200, 0), (150, '0150', 150, '0150', 300, 0), (200, '0200', None, None, 400, 0), (250, '0250', None, None, 500, 0), (300, '0300', 300, '0300', 600, 0), (350, '0350', None, None, 700, 0), (400, '0400', None, None, 800, 0), (450, '0450', 450, '0450', 900, 0), (500, '0500', None, None, 1000, 0), (550, '0550', None, None, 1100, 0)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c, t3.a + t3.b, t3.c FROM (prt1 t1 LEFT JOIN prt2 t2 ON t1.a = t2.b) RIGHT JOIN prt1_e t3 ON (t1.a = (t3.a + t3.b)/2) WHERE t3.c = 0 ORDER BY t1.a, t2.b, t3.a + t3.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b, ((t3.a + t3.b))',), ('  ->  Append',), ('        ->  Nested Loop Left Join',), ('              ->  Hash Right Join',), ('                    Hash Cond: (t1_1.a = ((t3_1.a + t3_1.b) / 2))',), ('                    ->  Seq Scan on prt1_p1 t1_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_e_p1 t3_1',), ('                                Filter: (c = 0)',), ('              ->  Index Scan using iprt2_p1_b on prt2_p1 t2_1',), ('                    Index Cond: (b = t1_1.a)',), ('        ->  Nested Loop Left Join',), ('              ->  Hash Right Join',), ('                    Hash Cond: (t1_2.a = ((t3_2.a + t3_2.b) / 2))',), ('                    ->  Seq Scan on prt1_p2 t1_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_e_p2 t3_2',), ('                                Filter: (c = 0)',), ('              ->  Index Scan using iprt2_p2_b on prt2_p2 t2_2',), ('                    Index Cond: (b = t1_2.a)',), ('        ->  Nested Loop Left Join',), ('              ->  Hash Right Join',), ('                    Hash Cond: (t1_3.a = ((t3_3.a + t3_3.b) / 2))',), ('                    ->  Seq Scan on prt1_p3 t1_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_e_p3 t3_3',), ('                                Filter: (c = 0)',), ('              ->  Index Scan using iprt2_p3_b on prt2_p3 t2_3',), ('                    Index Cond: (b = t1_3.a)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c, t3.a + t3.b, t3.c FROM (prt1 t1 LEFT JOIN prt2 t2 ON t1.a = t2.b) RIGHT JOIN prt1_e t3 ON (t1.a = (t3.a + t3.b)/2) WHERE t3.c = 0 ORDER BY t1.a, t2.b, t3.a + t3.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000', 0, 0), (50, '0050', None, None, 100, 0), (100, '0100', None, None, 200, 0), (150, '0150', 150, '0150', 300, 0), (200, '0200', None, None, 400, 0), (250, '0250', None, None, 500, 0), (300, '0300', 300, '0300', 600, 0), (350, '0350', None, None, 700, 0), (400, '0400', None, None, 800, 0), (450, '0450', 450, '0450', 900, 0), (500, '0500', None, None, 1000, 0), (550, '0550', None, None, 1100, 0)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT COUNT(*) FROM prt1 FULL JOIN prt2 p2(b,a,c) USING(a,b) FULL JOIN prt2 p3(b,a,c) USING (a, b)   WHERE a BETWEEN 490 AND 510",partition_join.sql,SAME,,"[('Aggregate',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: ((COALESCE(prt1_1.a, p2_1.a) = p3_1.a) AND (COALESCE(prt1_1.b, p2_1.b) = p3_1.b))',), ('              Filter: ((COALESCE(COALESCE(prt1_1.a, p2_1.a), p3_1.a) >= 490) AND (COALESCE(COALESCE(prt1_1.a, p2_1.a), p3_1.a) <= 510))',), ('              ->  Hash Full Join',), ('                    Hash Cond: ((prt1_1.a = p2_1.a) AND (prt1_1.b = p2_1.b))',), ('                    ->  Seq Scan on prt1_p1 prt1_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p1 p2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p1 p3_1',), ('        ->  Hash Full Join',), ('              Hash Cond: ((COALESCE(prt1_2.a, p2_2.a) = p3_2.a) AND (COALESCE(prt1_2.b, p2_2.b) = p3_2.b))',), ('              Filter: ((COALESCE(COALESCE(prt1_2.a, p2_2.a), p3_2.a) >= 490) AND (COALESCE(COALESCE(prt1_2.a, p2_2.a), p3_2.a) <= 510))',), ('              ->  Hash Full Join',), ('                    Hash Cond: ((prt1_2.a = p2_2.a) AND (prt1_2.b = p2_2.b))',), ('                    ->  Seq Scan on prt1_p2 prt1_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p2 p2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p2 p3_2',), ('        ->  Hash Full Join',), ('              Hash Cond: ((COALESCE(prt1_3.a, p2_3.a) = p3_3.a) AND (COALESCE(prt1_3.b, p2_3.b) = p3_3.b))',), ('              Filter: ((COALESCE(COALESCE(prt1_3.a, p2_3.a), p3_3.a) >= 490) AND (COALESCE(COALESCE(prt1_3.a, p2_3.a), p3_3.a) <= 510))',), ('              ->  Hash Full Join',), ('                    Hash Cond: ((prt1_3.a = p2_3.a) AND (prt1_3.b = p2_3.b))',), ('                    ->  Seq Scan on prt1_p3 prt1_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p3 p2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p3 p3_3',)]"
postgresql,postgresql,"SELECT COUNT(*) FROM prt1 FULL JOIN prt2 p2(b,a,c) USING(a,b) FULL JOIN prt2 p3(b,a,c) USING (a, b)   WHERE a BETWEEN 490 AND 510",partition_join.sql,SAME,,"[(14,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT COUNT(*) FROM prt1 FULL JOIN prt2 p2(b,a,c) USING(a,b) FULL JOIN prt2 p3(b,a,c) USING (a, b) FULL JOIN prt1 p4 (a,b,c) USING (a, b)   WHERE a BETWEEN 490 AND 510",partition_join.sql,SAME,,"[('Aggregate',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: ((COALESCE(COALESCE(prt1_1.a, p2_1.a), p3_1.a) = p4_1.a) AND (COALESCE(COALESCE(prt1_1.b, p2_1.b), p3_1.b) = p4_1.b))',), ('              Filter: ((COALESCE(COALESCE(COALESCE(prt1_1.a, p2_1.a), p3_1.a), p4_1.a) >= 490) AND (COALESCE(COALESCE(COALESCE(prt1_1.a, p2_1.a), p3_1.a), p4_1.a) <= 510))',), ('              ->  Hash Full Join',), ('                    Hash Cond: ((COALESCE(prt1_1.a, p2_1.a) = p3_1.a) AND (COALESCE(prt1_1.b, p2_1.b) = p3_1.b))',), ('                    ->  Hash Full Join',), ('                          Hash Cond: ((prt1_1.a = p2_1.a) AND (prt1_1.b = p2_1.b))',), ('                          ->  Seq Scan on prt1_p1 prt1_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_p1 p2_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p1 p3_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p1 p4_1',), ('        ->  Hash Full Join',), ('              Hash Cond: ((COALESCE(COALESCE(prt1_2.a, p2_2.a), p3_2.a) = p4_2.a) AND (COALESCE(COALESCE(prt1_2.b, p2_2.b), p3_2.b) = p4_2.b))',), ('              Filter: ((COALESCE(COALESCE(COALESCE(prt1_2.a, p2_2.a), p3_2.a), p4_2.a) >= 490) AND (COALESCE(COALESCE(COALESCE(prt1_2.a, p2_2.a), p3_2.a), p4_2.a) <= 510))',), ('              ->  Hash Full Join',), ('                    Hash Cond: ((COALESCE(prt1_2.a, p2_2.a) = p3_2.a) AND (COALESCE(prt1_2.b, p2_2.b) = p3_2.b))',), ('                    ->  Hash Full Join',), ('                          Hash Cond: ((prt1_2.a = p2_2.a) AND (prt1_2.b = p2_2.b))',), ('                          ->  Seq Scan on prt1_p2 prt1_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_p2 p2_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p2 p3_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p2 p4_2',), ('        ->  Hash Full Join',), ('              Hash Cond: ((COALESCE(COALESCE(prt1_3.a, p2_3.a), p3_3.a) = p4_3.a) AND (COALESCE(COALESCE(prt1_3.b, p2_3.b), p3_3.b) = p4_3.b))',), ('              Filter: ((COALESCE(COALESCE(COALESCE(prt1_3.a, p2_3.a), p3_3.a), p4_3.a) >= 490) AND (COALESCE(COALESCE(COALESCE(prt1_3.a, p2_3.a), p3_3.a), p4_3.a) <= 510))',), ('              ->  Hash Full Join',), ('                    Hash Cond: ((COALESCE(prt1_3.a, p2_3.a) = p3_3.a) AND (COALESCE(prt1_3.b, p2_3.b) = p3_3.b))',), ('                    ->  Hash Full Join',), ('                          Hash Cond: ((prt1_3.a = p2_3.a) AND (prt1_3.b = p2_3.b))',), ('                          ->  Seq Scan on prt1_p3 prt1_3',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_p3 p2_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p3 p3_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p3 p4_3',)]"
postgresql,postgresql,"SELECT COUNT(*) FROM prt1 FULL JOIN prt2 p2(b,a,c) USING(a,b) FULL JOIN prt2 p3(b,a,c) USING (a, b) FULL JOIN prt1 p4 (a,b,c) USING (a, b)   WHERE a BETWEEN 490 AND 510",partition_join.sql,SAME,,"[(14,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.phv, t2.b, t2.phv, t3.a + t3.b, t3.phv FROM ((SELECT 50 phv, * FROM prt1 WHERE prt1.b = 0) t1 FULL JOIN (SELECT 75 phv, * FROM prt2 WHERE prt2.a = 0) t2 ON (t1.a = t2.b)) FULL JOIN (SELECT 50 phv, * FROM prt1_e WHERE prt1_e.c = 0) t3 ON (t1.a = (t3.a + t3.b)/2) WHERE t1.a = t1.phv OR t2.b = t2.phv OR (t3.a + t3.b)/2 = t3.phv ORDER BY t1.a, t2.b, t3.a + t3.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: prt1.a, prt2.b, ((prt1_e.a + prt1_e.b))',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: (prt1_1.a = ((prt1_e_1.a + prt1_e_1.b) / 2))',), ('              Filter: ((prt1_1.a = (50)) OR (prt2_1.b = (75)) OR (((prt1_e_1.a + prt1_e_1.b) / 2) = (50)))',), ('              ->  Hash Full Join',), ('                    Hash Cond: (prt1_1.a = prt2_1.b)',), ('                    ->  Seq Scan on prt1_p1 prt1_1',), ('                          Filter: (b = 0)',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p1 prt2_1',), ('                                Filter: (a = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_e_p1 prt1_e_1',), ('                          Filter: (c = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: (prt1_2.a = ((prt1_e_2.a + prt1_e_2.b) / 2))',), ('              Filter: ((prt1_2.a = (50)) OR (prt2_2.b = (75)) OR (((prt1_e_2.a + prt1_e_2.b) / 2) = (50)))',), ('              ->  Hash Full Join',), ('                    Hash Cond: (prt1_2.a = prt2_2.b)',), ('                    ->  Seq Scan on prt1_p2 prt1_2',), ('                          Filter: (b = 0)',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p2 prt2_2',), ('                                Filter: (a = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_e_p2 prt1_e_2',), ('                          Filter: (c = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: (prt1_3.a = ((prt1_e_3.a + prt1_e_3.b) / 2))',), ('              Filter: ((prt1_3.a = (50)) OR (prt2_3.b = (75)) OR (((prt1_e_3.a + prt1_e_3.b) / 2) = (50)))',), ('              ->  Hash Full Join',), ('                    Hash Cond: (prt1_3.a = prt2_3.b)',), ('                    ->  Seq Scan on prt1_p3 prt1_3',), ('                          Filter: (b = 0)',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p3 prt2_3',), ('                                Filter: (a = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_e_p3 prt1_e_3',), ('                          Filter: (c = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.phv, t2.b, t2.phv, t3.a + t3.b, t3.phv FROM ((SELECT 50 phv, * FROM prt1 WHERE prt1.b = 0) t1 FULL JOIN (SELECT 75 phv, * FROM prt2 WHERE prt2.a = 0) t2 ON (t1.a = t2.b)) FULL JOIN (SELECT 50 phv, * FROM prt1_e WHERE prt1_e.c = 0) t3 ON (t1.a = (t3.a + t3.b)/2) WHERE t1.a = t1.phv OR t2.b = t2.phv OR (t3.a + t3.b)/2 = t3.phv ORDER BY t1.a, t2.b, t3.a + t3.b",partition_join.sql,SAME,,"[(50, 50, None, None, 100, 50), (None, None, 75, 75, None, None)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1 t1 WHERE t1.a IN (SELECT t1.b FROM prt2 t1, prt1_e t2 WHERE t1.a = 0 AND t1.b = (t2.a + t2.b)/2) AND t1.b = 0 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Nested Loop',), ('              Join Filter: (t1_2.a = t1_5.b)',), ('              ->  HashAggregate',), ('                    Group Key: t1_5.b',), ('                    ->  Hash Join',), ('                          Hash Cond: (((t2_1.a + t2_1.b) / 2) = t1_5.b)',), ('                          ->  Seq Scan on prt1_e_p1 t2_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_p1 t1_5',), ('                                      Filter: (a = 0)',), ('              ->  Index Scan using iprt1_p1_a on prt1_p1 t1_2',), ('                    Index Cond: (a = ((t2_1.a + t2_1.b) / 2))',), ('                    Filter: (b = 0)',), ('        ->  Nested Loop',), ('              Join Filter: (t1_3.a = t1_6.b)',), ('              ->  HashAggregate',), ('                    Group Key: t1_6.b',), ('                    ->  Hash Join',), ('                          Hash Cond: (((t2_2.a + t2_2.b) / 2) = t1_6.b)',), ('                          ->  Seq Scan on prt1_e_p2 t2_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_p2 t1_6',), ('                                      Filter: (a = 0)',), ('              ->  Index Scan using iprt1_p2_a on prt1_p2 t1_3',), ('                    Index Cond: (a = ((t2_2.a + t2_2.b) / 2))',), ('                    Filter: (b = 0)',), ('        ->  Nested Loop',), ('              Join Filter: (t1_4.a = t1_7.b)',), ('              ->  HashAggregate',), ('                    Group Key: t1_7.b',), ('                    ->  Nested Loop',), ('                          ->  Seq Scan on prt2_p3 t1_7',), ('                                Filter: (a = 0)',), ('                          ->  Index Scan using iprt1_e_p3_ab2 on prt1_e_p3 t2_3',), ('                                Index Cond: (((a + b) / 2) = t1_7.b)',), ('              ->  Index Scan using iprt1_p3_a on prt1_p3 t1_4',), ('                    Index Cond: (a = ((t2_3.a + t2_3.b) / 2))',), ('                    Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.* FROM prt1 t1 WHERE t1.a IN (SELECT t1.b FROM prt2 t1, prt1_e t2 WHERE t1.a = 0 AND t1.b = (t2.a + t2.b)/2) AND t1.b = 0 ORDER BY t1.a",partition_join.sql,SAME,,"[(0, 0, '0000'), (150, 0, '0150'), (300, 0, '0300'), (450, 0, '0450')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1 t1 WHERE t1.a IN (SELECT t1.b FROM prt2 t1 WHERE t1.b IN (SELECT (t1.a + t1.b)/2 FROM prt1_e t1 WHERE t1.c = 0)) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Nested Loop',), ('              ->  HashAggregate',), ('                    Group Key: t1_6.b',), ('                    ->  Hash Semi Join',), ('                          Hash Cond: (t1_6.b = ((t1_9.a + t1_9.b) / 2))',), ('                          ->  Seq Scan on prt2_p1 t1_6',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt1_e_p1 t1_9',), ('                                      Filter: (c = 0)',), ('              ->  Index Scan using iprt1_p1_a on prt1_p1 t1_3',), ('                    Index Cond: (a = t1_6.b)',), ('                    Filter: (b = 0)',), ('        ->  Nested Loop',), ('              ->  HashAggregate',), ('                    Group Key: t1_7.b',), ('                    ->  Hash Semi Join',), ('                          Hash Cond: (t1_7.b = ((t1_10.a + t1_10.b) / 2))',), ('                          ->  Seq Scan on prt2_p2 t1_7',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt1_e_p2 t1_10',), ('                                      Filter: (c = 0)',), ('              ->  Index Scan using iprt1_p2_a on prt1_p2 t1_4',), ('                    Index Cond: (a = t1_7.b)',), ('                    Filter: (b = 0)',), ('        ->  Nested Loop',), ('              ->  HashAggregate',), ('                    Group Key: t1_8.b',), ('                    ->  Hash Semi Join',), ('                          Hash Cond: (t1_8.b = ((t1_11.a + t1_11.b) / 2))',), ('                          ->  Seq Scan on prt2_p3 t1_8',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt1_e_p3 t1_11',), ('                                      Filter: (c = 0)',), ('              ->  Index Scan using iprt1_p3_a on prt1_p3 t1_5',), ('                    Index Cond: (a = t1_8.b)',), ('                    Filter: (b = 0)',)]"
postgresql,postgresql,SELECT t1.* FROM prt1 t1 WHERE t1.a IN (SELECT t1.b FROM prt2 t1 WHERE t1.b IN (SELECT (t1.a + t1.b)/2 FROM prt1_e t1 WHERE t1.c = 0)) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[(0, 0, '0000'), (150, 0, '0150'), (300, 0, '0300'), (450, 0, '0450')]"
postgresql,postgresql,SET enable_hashjoin TO off,partition_join.sql,SAME,,[]
postgresql,postgresql,SET enable_nestloop TO off,partition_join.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1 t1 WHERE t1.a IN (SELECT t1.b FROM prt2 t1 WHERE t1.b IN (SELECT (t1.a + t1.b)/2 FROM prt1_e t1 WHERE t1.c = 0)) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[('Merge Append',), ('  Sort Key: t1.a',), ('  ->  Merge Semi Join',), ('        Merge Cond: (t1_3.a = t1_6.b)',), ('        ->  Sort',), ('              Sort Key: t1_3.a',), ('              ->  Seq Scan on prt1_p1 t1_3',), ('                    Filter: (b = 0)',), ('        ->  Merge Semi Join',), ('              Merge Cond: (t1_6.b = (((t1_9.a + t1_9.b) / 2)))',), ('              ->  Sort',), ('                    Sort Key: t1_6.b',), ('                    ->  Seq Scan on prt2_p1 t1_6',), ('              ->  Sort',), ('                    Sort Key: (((t1_9.a + t1_9.b) / 2))',), ('                    ->  Seq Scan on prt1_e_p1 t1_9',), ('                          Filter: (c = 0)',), ('  ->  Merge Semi Join',), ('        Merge Cond: (t1_4.a = t1_7.b)',), ('        ->  Sort',), ('              Sort Key: t1_4.a',), ('              ->  Seq Scan on prt1_p2 t1_4',), ('                    Filter: (b = 0)',), ('        ->  Merge Semi Join',), ('              Merge Cond: (t1_7.b = (((t1_10.a + t1_10.b) / 2)))',), ('              ->  Sort',), ('                    Sort Key: t1_7.b',), ('                    ->  Seq Scan on prt2_p2 t1_7',), ('              ->  Sort',), ('                    Sort Key: (((t1_10.a + t1_10.b) / 2))',), ('                    ->  Seq Scan on prt1_e_p2 t1_10',), ('                          Filter: (c = 0)',), ('  ->  Merge Semi Join',), ('        Merge Cond: (t1_5.a = t1_8.b)',), ('        ->  Sort',), ('              Sort Key: t1_5.a',), ('              ->  Seq Scan on prt1_p3 t1_5',), ('                    Filter: (b = 0)',), ('        ->  Merge Semi Join',), ('              Merge Cond: (t1_8.b = (((t1_11.a + t1_11.b) / 2)))',), ('              ->  Sort',), ('                    Sort Key: t1_8.b',), ('                    ->  Seq Scan on prt2_p3 t1_8',), ('              ->  Sort',), ('                    Sort Key: (((t1_11.a + t1_11.b) / 2))',), ('                    ->  Seq Scan on prt1_e_p3 t1_11',), ('                          Filter: (c = 0)',)]"
postgresql,postgresql,SELECT t1.* FROM prt1 t1 WHERE t1.a IN (SELECT t1.b FROM prt2 t1 WHERE t1.b IN (SELECT (t1.a + t1.b)/2 FROM prt1_e t1 WHERE t1.c = 0)) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[(0, 0, '0000'), (150, 0, '0150'), (300, 0, '0300'), (450, 0, '0450')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c, t3.a + t3.b, t3.c FROM (prt1 t1 LEFT JOIN prt2 t2 ON t1.a = t2.b) RIGHT JOIN prt1_e t3 ON (t1.a = (t3.a + t3.b)/2) WHERE t3.c = 0 ORDER BY t1.a, t2.b, t3.a + t3.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b, ((t3.a + t3.b))',), ('  ->  Append',), ('        ->  Merge Left Join',), ('              Merge Cond: (t1_1.a = t2_1.b)',), ('              ->  Sort',), ('                    Sort Key: t1_1.a',), ('                    ->  Merge Left Join',), ('                          Merge Cond: ((((t3_1.a + t3_1.b) / 2)) = t1_1.a)',), ('                          ->  Sort',), ('                                Sort Key: (((t3_1.a + t3_1.b) / 2))',), ('                                ->  Seq Scan on prt1_e_p1 t3_1',), ('                                      Filter: (c = 0)',), ('                          ->  Sort',), ('                                Sort Key: t1_1.a',), ('                                ->  Seq Scan on prt1_p1 t1_1',), ('              ->  Sort',), ('                    Sort Key: t2_1.b',), ('                    ->  Seq Scan on prt2_p1 t2_1',), ('        ->  Merge Left Join',), ('              Merge Cond: (t1_2.a = t2_2.b)',), ('              ->  Sort',), ('                    Sort Key: t1_2.a',), ('                    ->  Merge Left Join',), ('                          Merge Cond: ((((t3_2.a + t3_2.b) / 2)) = t1_2.a)',), ('                          ->  Sort',), ('                                Sort Key: (((t3_2.a + t3_2.b) / 2))',), ('                                ->  Seq Scan on prt1_e_p2 t3_2',), ('                                      Filter: (c = 0)',), ('                          ->  Sort',), ('                                Sort Key: t1_2.a',), ('                                ->  Seq Scan on prt1_p2 t1_2',), ('              ->  Sort',), ('                    Sort Key: t2_2.b',), ('                    ->  Seq Scan on prt2_p2 t2_2',), ('        ->  Merge Left Join',), ('              Merge Cond: (t1_3.a = t2_3.b)',), ('              ->  Sort',), ('                    Sort Key: t1_3.a',), ('                    ->  Merge Left Join',), ('                          Merge Cond: ((((t3_3.a + t3_3.b) / 2)) = t1_3.a)',), ('                          ->  Sort',), ('                                Sort Key: (((t3_3.a + t3_3.b) / 2))',), ('                                ->  Seq Scan on prt1_e_p3 t3_3',), ('                                      Filter: (c = 0)',), ('                          ->  Sort',), ('                                Sort Key: t1_3.a',), ('                                ->  Seq Scan on prt1_p3 t1_3',), ('              ->  Sort',), ('                    Sort Key: t2_3.b',), ('                    ->  Seq Scan on prt2_p3 t2_3',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c, t3.a + t3.b, t3.c FROM (prt1 t1 LEFT JOIN prt2 t2 ON t1.a = t2.b) RIGHT JOIN prt1_e t3 ON (t1.a = (t3.a + t3.b)/2) WHERE t3.c = 0 ORDER BY t1.a, t2.b, t3.a + t3.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000', 0, 0), (50, '0050', None, None, 100, 0), (100, '0100', None, None, 200, 0), (150, '0150', 150, '0150', 300, 0), (200, '0200', None, None, 400, 0), (250, '0250', None, None, 500, 0), (300, '0300', 300, '0300', 600, 0), (350, '0350', None, None, 700, 0), (400, '0400', None, None, 800, 0), (450, '0450', 450, '0450', 900, 0), (500, '0500', None, None, 1000, 0), (550, '0550', None, None, 1100, 0)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t2.b FROM (SELECT * FROM prt1 WHERE a < 450) t1 LEFT JOIN (SELECT * FROM prt2 WHERE b > 250) t2 ON t1.a = t2.b WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Incremental Sort',), ('  Sort Key: prt1.a, prt2.b',), ('  Presorted Key: prt1.a',), ('  ->  Merge Left Join',), ('        Merge Cond: (prt1.a = prt2.b)',), ('        ->  Sort',), ('              Sort Key: prt1.a',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_p1 prt1_1',), ('                          Filter: ((a < 450) AND (b = 0))',), ('                    ->  Seq Scan on prt1_p2 prt1_2',), ('                          Filter: ((a < 450) AND (b = 0))',), ('        ->  Sort',), ('              Sort Key: prt2.b',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_p2 prt2_1',), ('                          Filter: (b > 250)',), ('                    ->  Seq Scan on prt2_p3 prt2_2',), ('                          Filter: (b > 250)',)]"
postgresql,postgresql,"SELECT t1.a, t2.b FROM (SELECT * FROM prt1 WHERE a < 450) t1 LEFT JOIN (SELECT * FROM prt2 WHERE b > 250) t2 ON t1.a = t2.b WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, None), (50, None), (100, None), (150, None), (200, None), (250, None), (300, 300), (350, None), (400, None)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t2.b FROM prt1 t1, prt2 t2 WHERE t1::text = t2::text AND t1.a = t2.b ORDER BY t1.a",partition_join.sql,SAME,,"[('Merge Join',), ('  Merge Cond: ((t1.a = t2.b) AND (((((t1.*)::prt1))::text) = ((((t2.*)::prt2))::text)))',), ('  ->  Sort',), ('        Sort Key: t1.a, ((((t1.*)::prt1))::text)',), ('        ->  Result',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_p1 t1_1',), ('                    ->  Seq Scan on prt1_p2 t1_2',), ('                    ->  Seq Scan on prt1_p3 t1_3',), ('  ->  Sort',), ('        Sort Key: t2.b, ((((t2.*)::prt2))::text)',), ('        ->  Result',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_p1 t2_1',), ('                    ->  Seq Scan on prt2_p2 t2_2',), ('                    ->  Seq Scan on prt2_p3 t2_3',)]"
postgresql,postgresql,"SELECT t1.a, t2.b FROM prt1 t1, prt2 t2 WHERE t1::text = t2::text AND t1.a = t2.b ORDER BY t1.a",partition_join.sql,SAME,,"[(0, 0), (6, 6), (12, 12), (18, 18), (24, 24)]"
postgresql,postgresql,RESET enable_hashjoin,partition_join.sql,SAME,,[]
postgresql,postgresql,RESET enable_nestloop,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt1_m,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_m,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1_m WHERE prt1_m.c = 0) t1 FULL JOIN (SELECT * FROM prt2_m WHERE prt2_m.c = 0) t2 ON (t1.a = (t2.b + t2.a)/2 AND t2.b = (t1.a + t1.b)/2) ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: prt1_m.a, prt2_m.b',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: ((prt1_m_1.a = ((prt2_m_1.b + prt2_m_1.a) / 2)) AND (((prt1_m_1.a + prt1_m_1.b) / 2) = prt2_m_1.b))',), ('              ->  Seq Scan on prt1_m_p1 prt1_m_1',), ('                    Filter: (c = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_m_p1 prt2_m_1',), ('                          Filter: (c = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: ((prt1_m_2.a = ((prt2_m_2.b + prt2_m_2.a) / 2)) AND (((prt1_m_2.a + prt1_m_2.b) / 2) = prt2_m_2.b))',), ('              ->  Seq Scan on prt1_m_p2 prt1_m_2',), ('                    Filter: (c = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_m_p2 prt2_m_2',), ('                          Filter: (c = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: ((prt1_m_3.a = ((prt2_m_3.b + prt2_m_3.a) / 2)) AND (((prt1_m_3.a + prt1_m_3.b) / 2) = prt2_m_3.b))',), ('              ->  Seq Scan on prt1_m_p3 prt1_m_3',), ('                    Filter: (c = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_m_p3 prt2_m_3',), ('                          Filter: (c = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1_m WHERE prt1_m.c = 0) t1 FULL JOIN (SELECT * FROM prt2_m WHERE prt2_m.c = 0) t2 ON (t1.a = (t2.b + t2.a)/2 AND t2.b = (t1.a + t1.b)/2) ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, 0, 0, 0), (50, 0, None, None), (100, 0, None, None), (150, 0, 150, 0), (200, 0, None, None), (250, 0, None, None), (300, 0, 300, 0), (350, 0, None, None), (400, 0, None, None), (450, 0, 450, 0), (500, 0, None, None), (550, 0, None, None), (None, None, 75, 0), (None, None, 225, 0), (None, None, 375, 0), (None, None, 525, 0)]"
postgresql,postgresql,ANALYZE plt1,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt1_e,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT avg(t1.a), avg(t2.b), avg(t3.a + t3.b), t1.c, t2.c, t3.c FROM plt1 t1, plt2 t2, plt1_e t3 WHERE t1.b = t2.b AND t1.c = t2.c AND ltrim(t3.c, 'A') = t1.c GROUP BY t1.c, t2.c, t3.c ORDER BY t1.c, t2.c, t3.c",partition_join.sql,SAME,,"[('GroupAggregate',), ('  Group Key: t1.c, t3.c',), ('  ->  Sort',), ('        Sort Key: t1.c, t3.c',), ('        ->  Append',), ('              ->  Hash Join',), (""                    Hash Cond: (t1_1.c = ltrim(t3_1.c, 'A'::text))"",), ('                    ->  Hash Join',), ('                          Hash Cond: ((t1_1.b = t2_1.b) AND (t1_1.c = t2_1.c))',), ('                          ->  Seq Scan on plt1_p1 t1_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on plt2_p1 t2_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on plt1_e_p1 t3_1',), ('              ->  Hash Join',), (""                    Hash Cond: (t1_2.c = ltrim(t3_2.c, 'A'::text))"",), ('                    ->  Hash Join',), ('                          Hash Cond: ((t1_2.b = t2_2.b) AND (t1_2.c = t2_2.c))',), ('                          ->  Seq Scan on plt1_p2 t1_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on plt2_p2 t2_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on plt1_e_p2 t3_2',), ('              ->  Hash Join',), (""                    Hash Cond: (t1_3.c = ltrim(t3_3.c, 'A'::text))"",), ('                    ->  Hash Join',), ('                          Hash Cond: ((t1_3.b = t2_3.b) AND (t1_3.c = t2_3.c))',), ('                          ->  Seq Scan on plt1_p3 t1_3',), ('                          ->  Hash',), ('                                ->  Seq Scan on plt2_p3 t2_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on plt1_e_p3 t3_3',)]"
postgresql,postgresql,"SELECT avg(t1.a), avg(t2.b), avg(t3.a + t3.b), t1.c, t2.c, t3.c FROM plt1 t1, plt2 t2, plt1_e t3 WHERE t1.b = t2.b AND t1.c = t2.c AND ltrim(t3.c, 'A') = t1.c GROUP BY t1.c, t2.c, t3.c ORDER BY t1.c, t2.c, t3.c",partition_join.sql,SAME,,"[(Decimal('24.0000000000000000'), Decimal('24.0000000000000000'), Decimal('48.0000000000000000'), '0000', '0000', 'A0000'), (Decimal('75.0000000000000000'), Decimal('75.0000000000000000'), Decimal('148.0000000000000000'), '0001', '0001', 'A0001'), (Decimal('123.0000000000000000'), Decimal('123.0000000000000000'), Decimal('248.0000000000000000'), '0002', '0002', 'A0002'), (Decimal('174.0000000000000000'), Decimal('174.0000000000000000'), Decimal('348.0000000000000000'), '0003', '0003', 'A0003'), (Decimal('225.0000000000000000'), Decimal('225.0000000000000000'), Decimal('448.0000000000000000'), '0004', '0004', 'A0004'), (Decimal('273.0000000000000000'), Decimal('273.0000000000000000'), Decimal('548.0000000000000000'), '0005', '0005', 'A0005'), (Decimal('324.0000000000000000'), Decimal('324.0000000000000000'), Decimal('648.0000000000000000'), '0006', '0006', 'A0006'), (Decimal('375.0000000000000000'), Decimal('375.0000000000000000'), Decimal('748.0000000000000000'), '0007', '0007', 'A0007'), (Decimal('423.0000000000000000'), Decimal('423.0000000000000000'), Decimal('848.0000000000000000'), '0008', '0008', 'A0008'), (Decimal('474.0000000000000000'), Decimal('474.0000000000000000'), Decimal('948.0000000000000000'), '0009', '0009', 'A0009'), (Decimal('525.0000000000000000'), Decimal('525.0000000000000000'), Decimal('1048.0000000000000000'), '0010', '0010', 'A0010'), (Decimal('573.0000000000000000'), Decimal('573.0000000000000000'), Decimal('1148.0000000000000000'), '0011', '0011', 'A0011')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1, prt2 t2 WHERE t1.a = t2.b AND t1.a = 1 AND t1.a = 2",partition_join.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1 WHERE a = 1 AND a = 2) t1 LEFT JOIN prt2 t2 ON t1.a = t2.b",partition_join.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1 WHERE a = 1 AND a = 2) t1 RIGHT JOIN prt2 t2 ON t1.a = t2.b, prt1 t3 WHERE t2.b = t3.a",partition_join.sql,SAME,,"[('Hash Left Join',), ('  Hash Cond: (t2.b = a)',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (t3_1.a = t2_1.b)',), ('              ->  Seq Scan on prt1_p1 t3_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p1 t2_1',), ('        ->  Hash Join',), ('              Hash Cond: (t3_2.a = t2_2.b)',), ('              ->  Seq Scan on prt1_p2 t3_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p2 t2_2',), ('        ->  Hash Join',), ('              Hash Cond: (t3_3.a = t2_3.b)',), ('              ->  Seq Scan on prt1_p3 t3_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_p3 t2_3',), ('  ->  Hash',), ('        ->  Result',), ('              One-Time Filter: false',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1 WHERE a = 1 AND a = 2) t1 FULL JOIN prt2 t2 ON t1.a = t2.b WHERE t2.a = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: a, t2.b',), ('  ->  Hash Left Join',), ('        Hash Cond: (t2.b = a)',), ('        ->  Append',), ('              ->  Seq Scan on prt2_p1 t2_1',), ('                    Filter: (a = 0)',), ('              ->  Seq Scan on prt2_p2 t2_2',), ('                    Filter: (a = 0)',), ('              ->  Seq Scan on prt2_p3 t2_3',), ('                    Filter: (a = 0)',), ('        ->  Hash',), ('              ->  Result',), ('                    One-Time Filter: false',)]"
postgresql,postgresql,ANALYZE pht1,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE pht2,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE pht1_e,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT avg(t1.a), avg(t2.b), avg(t3.a + t3.b), t1.c, t2.c, t3.c FROM pht1 t1, pht2 t2, pht1_e t3 WHERE t1.b = t2.b AND t1.c = t2.c AND ltrim(t3.c, 'A') = t1.c GROUP BY t1.c, t2.c, t3.c ORDER BY t1.c, t2.c, t3.c",partition_join.sql,SAME,,"[('GroupAggregate',), ('  Group Key: t1.c, t3.c',), ('  ->  Sort',), ('        Sort Key: t1.c, t3.c',), ('        ->  Append',), ('              ->  Hash Join',), (""                    Hash Cond: (t1_1.c = ltrim(t3_1.c, 'A'::text))"",), ('                    ->  Hash Join',), ('                          Hash Cond: ((t1_1.b = t2_1.b) AND (t1_1.c = t2_1.c))',), ('                          ->  Seq Scan on pht1_p1 t1_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on pht2_p1 t2_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on pht1_e_p1 t3_1',), ('              ->  Hash Join',), (""                    Hash Cond: (t1_2.c = ltrim(t3_2.c, 'A'::text))"",), ('                    ->  Hash Join',), ('                          Hash Cond: ((t1_2.b = t2_2.b) AND (t1_2.c = t2_2.c))',), ('                          ->  Seq Scan on pht1_p2 t1_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on pht2_p2 t2_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on pht1_e_p2 t3_2',), ('              ->  Hash Join',), (""                    Hash Cond: (t1_3.c = ltrim(t3_3.c, 'A'::text))"",), ('                    ->  Hash Join',), ('                          Hash Cond: ((t1_3.b = t2_3.b) AND (t1_3.c = t2_3.c))',), ('                          ->  Seq Scan on pht1_p3 t1_3',), ('                          ->  Hash',), ('                                ->  Seq Scan on pht2_p3 t2_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on pht1_e_p3 t3_3',)]"
postgresql,postgresql,"SELECT avg(t1.a), avg(t2.b), avg(t3.a + t3.b), t1.c, t2.c, t3.c FROM pht1 t1, pht2 t2, pht1_e t3 WHERE t1.b = t2.b AND t1.c = t2.c AND ltrim(t3.c, 'A') = t1.c GROUP BY t1.c, t2.c, t3.c ORDER BY t1.c, t2.c, t3.c",partition_join.sql,SAME,,"[(Decimal('24.0000000000000000'), Decimal('24.0000000000000000'), Decimal('48.0000000000000000'), '0000', '0000', 'A0000'), (Decimal('75.0000000000000000'), Decimal('75.0000000000000000'), Decimal('148.0000000000000000'), '0001', '0001', 'A0001'), (Decimal('123.0000000000000000'), Decimal('123.0000000000000000'), Decimal('248.0000000000000000'), '0002', '0002', 'A0002'), (Decimal('174.0000000000000000'), Decimal('174.0000000000000000'), Decimal('348.0000000000000000'), '0003', '0003', 'A0003'), (Decimal('225.0000000000000000'), Decimal('225.0000000000000000'), Decimal('448.0000000000000000'), '0004', '0004', 'A0004'), (Decimal('273.0000000000000000'), Decimal('273.0000000000000000'), Decimal('548.0000000000000000'), '0005', '0005', 'A0005')]"
postgresql,postgresql,ALTER TABLE prt1 DETACH PARTITION prt1_p3,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE prt1 ATTACH PARTITION prt1_p3 DEFAULT,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt1,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE prt2 DETACH PARTITION prt2_p3,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE prt2 ATTACH PARTITION prt2_p3 DEFAULT,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1, prt2 t2 WHERE t1.a = t2.b AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p2 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_3.b = t1_3.a)',), ('              ->  Seq Scan on prt2_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,ALTER TABLE plt1 DETACH PARTITION plt1_p3,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE plt1 ATTACH PARTITION plt1_p3 DEFAULT,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt1,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE plt2 DETACH PARTITION plt2_p3,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE plt2 ATTACH PARTITION plt2_p3 DEFAULT,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT avg(t1.a), avg(t2.b), t1.c, t2.c FROM plt1 t1 RIGHT JOIN plt2 t2 ON t1.c = t2.c WHERE t1.a % 25 = 0 GROUP BY t1.c, t2.c ORDER BY t1.c, t2.c",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.c',), ('  ->  HashAggregate',), ('        Group Key: t1.c',), ('        ->  Append',), ('              ->  Hash Join',), ('                    Hash Cond: (t2_1.c = t1_1.c)',), ('                    ->  Seq Scan on plt2_p1 t2_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on plt1_p1 t1_1',), ('                                Filter: ((a % 25) = 0)',), ('              ->  Hash Join',), ('                    Hash Cond: (t2_2.c = t1_2.c)',), ('                    ->  Seq Scan on plt2_p2 t2_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on plt1_p2 t1_2',), ('                                Filter: ((a % 25) = 0)',), ('              ->  Hash Join',), ('                    Hash Cond: (t2_3.c = t1_3.c)',), ('                    ->  Seq Scan on plt2_p3 t2_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on plt1_p3 t1_3',), ('                                Filter: ((a % 25) = 0)',)]"
postgresql,postgresql,ANALYZE prt1_l,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_l,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_l t1, prt2_l t2 WHERE t1.a = t2.b AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_l_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_l_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_3.b = t1_3.a)',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_l_p2_p1 t2_3',), ('                    ->  Seq Scan on prt2_l_p2_p2 t2_4',), ('              ->  Hash',), ('                    ->  Append',), ('                          ->  Seq Scan on prt1_l_p2_p1 t1_3',), ('                                Filter: (b = 0)',), ('                          ->  Seq Scan on prt1_l_p2_p2 t1_4',), ('                                Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_6.b = t1_5.a)',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_l_p3_p1 t2_6',), ('                    ->  Seq Scan on prt2_l_p3_p2 t2_7',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_l_p3_p1 t1_5',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_l t1, prt2_l t2 WHERE t1.a = t2.b AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000'), (150, '0002', 150, '0002'), (300, '0000', 300, '0000'), (450, '0002', 450, '0002')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_l t1 LEFT JOIN prt2_l t2 ON t1.a = t2.b AND t1.c = t2.c WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_1.b = t1_1.a) AND ((t2_1.c)::text = (t1_1.c)::text))',), ('              ->  Seq Scan on prt2_l_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_l_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_2.b = t1_2.a) AND ((t2_2.c)::text = (t1_2.c)::text))',), ('              ->  Seq Scan on prt2_l_p2_p1 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_l_p2_p1 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_3.b = t1_3.a) AND ((t2_3.c)::text = (t1_3.c)::text))',), ('              ->  Seq Scan on prt2_l_p2_p2 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_l_p2_p2 t1_3',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_5.b = t1_4.a) AND ((t2_5.c)::text = (t1_4.c)::text))',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_l_p3_p1 t2_5',), ('                    ->  Seq Scan on prt2_l_p3_p2 t2_6',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_l_p3_p1 t1_4',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_l t1 LEFT JOIN prt2_l t2 ON t1.a = t2.b AND t1.c = t2.c WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000'), (50, '0002', None, None), (100, '0000', None, None), (150, '0002', 150, '0002'), (200, '0000', None, None), (250, '0002', None, None), (300, '0000', 300, '0000'), (350, '0002', None, None), (400, '0000', None, None), (450, '0002', 450, '0002'), (500, '0000', None, None), (550, '0002', None, None)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_l t1 RIGHT JOIN prt2_l t2 ON t1.a = t2.b AND t1.c = t2.c WHERE t2.a = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t1_1.a = t2_1.b) AND ((t1_1.c)::text = (t2_1.c)::text))',), ('              ->  Seq Scan on prt1_l_p1 t1_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_l_p1 t2_1',), ('                          Filter: (a = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t1_2.a = t2_2.b) AND ((t1_2.c)::text = (t2_2.c)::text))',), ('              ->  Seq Scan on prt1_l_p2_p1 t1_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_l_p2_p1 t2_2',), ('                          Filter: (a = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t1_3.a = t2_3.b) AND ((t1_3.c)::text = (t2_3.c)::text))',), ('              ->  Seq Scan on prt1_l_p2_p2 t1_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_l_p2_p2 t2_3',), ('                          Filter: (a = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t1_5.a = t2_4.b) AND ((t1_5.c)::text = (t2_4.c)::text))',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_l_p3_p1 t1_5',), ('                    ->  Seq Scan on prt1_l_p3_p2 t1_6',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_l_p3_p1 t2_4',), ('                          Filter: (a = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_l t1 RIGHT JOIN prt2_l t2 ON t1.a = t2.b AND t1.c = t2.c WHERE t2.a = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000'), (150, '0002', 150, '0002'), (300, '0000', 300, '0000'), (450, '0002', 450, '0002'), (None, None, 75, '0003'), (None, None, 225, '0001'), (None, None, 375, '0003'), (None, None, 525, '0001')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1_l WHERE prt1_l.b = 0) t1 FULL JOIN (SELECT * FROM prt2_l WHERE prt2_l.a = 0) t2 ON (t1.a = t2.b AND t1.c = t2.c) ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: prt1_l.a, prt2_l.b',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: ((prt1_l_1.a = prt2_l_1.b) AND ((prt1_l_1.c)::text = (prt2_l_1.c)::text))',), ('              ->  Seq Scan on prt1_l_p1 prt1_l_1',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_l_p1 prt2_l_1',), ('                          Filter: (a = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: ((prt1_l_2.a = prt2_l_2.b) AND ((prt1_l_2.c)::text = (prt2_l_2.c)::text))',), ('              ->  Seq Scan on prt1_l_p2_p1 prt1_l_2',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_l_p2_p1 prt2_l_2',), ('                          Filter: (a = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: ((prt1_l_3.a = prt2_l_3.b) AND ((prt1_l_3.c)::text = (prt2_l_3.c)::text))',), ('              ->  Seq Scan on prt1_l_p2_p2 prt1_l_3',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_l_p2_p2 prt2_l_3',), ('                          Filter: (a = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: ((prt1_l_4.a = prt2_l_4.b) AND ((prt1_l_4.c)::text = (prt2_l_4.c)::text))',), ('              ->  Seq Scan on prt1_l_p3_p1 prt1_l_4',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_l_p3_p1 prt2_l_4',), ('                          Filter: (a = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1_l WHERE prt1_l.b = 0) t1 FULL JOIN (SELECT * FROM prt2_l WHERE prt2_l.a = 0) t2 ON (t1.a = t2.b AND t1.c = t2.c) ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(0, '0000', 0, '0000'), (50, '0002', None, None), (100, '0000', None, None), (150, '0002', 150, '0002'), (200, '0000', None, None), (250, '0002', None, None), (300, '0000', 300, '0000'), (350, '0002', None, None), (400, '0000', None, None), (450, '0002', 450, '0002'), (500, '0000', None, None), (550, '0002', None, None), (None, None, 75, '0003'), (None, None, 225, '0001'), (None, None, 375, '0003'), (None, None, 525, '0001')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM prt1_l t1 LEFT JOIN LATERAL 			  (SELECT t2.a AS t2a, t2.c AS t2c, t2.b AS t2b, t3.b AS t3b, least(t1.a,t2.a,t3.b) FROM prt1_l t2 JOIN prt2_l t3 ON (t2.a = t3.b AND t2.c = t3.c)) ss 			  ON t1.a = ss.t2a AND t1.c = ss.t2c WHERE t1.b = 0 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on prt1_l_p1 t1_1',), ('                    Filter: (b = 0)',), ('              ->  Hash Join',), ('                    Hash Cond: ((t3_1.b = t2_1.a) AND ((t3_1.c)::text = (t2_1.c)::text))',), ('                    ->  Seq Scan on prt2_l_p1 t3_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_l_p1 t2_1',), ('                                Filter: ((t1_1.a = a) AND ((t1_1.c)::text = (c)::text))',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on prt1_l_p2_p1 t1_2',), ('                    Filter: (b = 0)',), ('              ->  Hash Join',), ('                    Hash Cond: ((t3_2.b = t2_2.a) AND ((t3_2.c)::text = (t2_2.c)::text))',), ('                    ->  Seq Scan on prt2_l_p2_p1 t3_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_l_p2_p1 t2_2',), ('                                Filter: ((t1_2.a = a) AND ((t1_2.c)::text = (c)::text))',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on prt1_l_p2_p2 t1_3',), ('                    Filter: (b = 0)',), ('              ->  Hash Join',), ('                    Hash Cond: ((t3_3.b = t2_3.a) AND ((t3_3.c)::text = (t2_3.c)::text))',), ('                    ->  Seq Scan on prt2_l_p2_p2 t3_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt1_l_p2_p2 t2_3',), ('                                Filter: ((t1_3.a = a) AND ((t1_3.c)::text = (c)::text))',), ('        ->  Nested Loop Left Join',), ('              ->  Seq Scan on prt1_l_p3_p1 t1_4',), ('                    Filter: (b = 0)',), ('              ->  Hash Join',), ('                    Hash Cond: ((t3_5.b = t2_5.a) AND ((t3_5.c)::text = (t2_5.c)::text))',), ('                    ->  Append',), ('                          ->  Seq Scan on prt2_l_p3_p1 t3_5',), ('                          ->  Seq Scan on prt2_l_p3_p2 t3_6',), ('                    ->  Hash',), ('                          ->  Append',), ('                                ->  Seq Scan on prt1_l_p3_p1 t2_5',), ('                                      Filter: ((t1_4.a = a) AND ((t1_4.c)::text = (c)::text))',), ('                                ->  Seq Scan on prt1_l_p3_p2 t2_6',), ('                                      Filter: ((t1_4.a = a) AND ((t1_4.c)::text = (c)::text))',)]"
postgresql,postgresql,"SELECT * FROM prt1_l t1 LEFT JOIN LATERAL 			  (SELECT t2.a AS t2a, t2.c AS t2c, t2.b AS t2b, t3.b AS t3b, least(t1.a,t2.a,t3.b) FROM prt1_l t2 JOIN prt2_l t3 ON (t2.a = t3.b AND t2.c = t3.c)) ss 			  ON t1.a = ss.t2a AND t1.c = ss.t2c WHERE t1.b = 0 ORDER BY t1.a",partition_join.sql,SAME,,"[(0, 0, '0000', 0, '0000', 0, 0, 0), (50, 0, '0002', None, None, None, None, None), (100, 0, '0000', None, None, None, None, None), (150, 0, '0002', 150, '0002', 0, 150, 150), (200, 0, '0000', None, None, None, None, None), (250, 0, '0002', None, None, None, None, None), (300, 0, '0000', 300, '0000', 0, 300, 300), (350, 0, '0002', None, None, None, None, None), (400, 0, '0000', None, None, None, None, None), (450, 0, '0002', 450, '0002', 0, 450, 450), (500, 0, '0000', None, None, None, None, None), (550, 0, '0002', None, None, None, None, None)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM prt1_l t1 JOIN LATERAL 			  (SELECT * FROM prt1_l t2 TABLESAMPLE SYSTEM (t1.a) REPEATABLE(t1.b)) s 			  ON t1.a = s.a AND t1.b = s.b AND t1.c = s.c,partition_join.sql,SAME,,"[('Gather',), ('  Workers Planned: 2',), ('  ->  Nested Loop',), ('        ->  Parallel Append',), ('              ->  Parallel Seq Scan on prt1_l_p1 t1_1',), ('              ->  Parallel Seq Scan on prt1_l_p2_p2 t1_3',), ('              ->  Parallel Seq Scan on prt1_l_p2_p1 t1_2',), ('              ->  Parallel Seq Scan on prt1_l_p3_p1 t1_4',), ('              ->  Parallel Seq Scan on prt1_l_p3_p2 t1_5',), ('        ->  Append',), ('              ->  Sample Scan on prt1_l_p1 t2_1',), ('                    Sampling: system (t1.a) REPEATABLE (t1.b)',), ('                    Filter: ((t1.a = a) AND (t1.b = b) AND ((t1.c)::text = (c)::text))',), ('              ->  Sample Scan on prt1_l_p2_p1 t2_2',), ('                    Sampling: system (t1.a) REPEATABLE (t1.b)',), ('                    Filter: ((t1.a = a) AND (t1.b = b) AND ((t1.c)::text = (c)::text))',), ('              ->  Sample Scan on prt1_l_p2_p2 t2_3',), ('                    Sampling: system (t1.a) REPEATABLE (t1.b)',), ('                    Filter: ((t1.a = a) AND (t1.b = b) AND ((t1.c)::text = (c)::text))',), ('              ->  Sample Scan on prt1_l_p3_p1 t2_4',), ('                    Sampling: system (t1.a) REPEATABLE (t1.b)',), ('                    Filter: ((t1.a = a) AND (t1.b = b) AND ((t1.c)::text = (c)::text))',), ('              ->  Sample Scan on prt1_l_p3_p2 t2_5',), ('                    Sampling: system (t1.a) REPEATABLE (t1.b)',), ('                    Filter: ((t1.a = a) AND (t1.b = b) AND ((t1.c)::text = (c)::text))',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT COUNT(*) FROM prt1_l t1 LEFT JOIN LATERAL 			  (SELECT t1.b AS t1b, t2.* FROM prt2_l t2) s 			  ON t1.a = s.b AND t1.b = s.a AND t1.c = s.c 			  WHERE s.t1b = s.a",partition_join.sql,SAME,,"[('Aggregate',), ('  ->  Gather',), ('        Workers Planned: 2',), ('        ->  Nested Loop',), ('              ->  Parallel Append',), ('                    ->  Parallel Seq Scan on prt1_l_p1 t1_1',), ('                    ->  Parallel Seq Scan on prt1_l_p2_p2 t1_3',), ('                    ->  Parallel Seq Scan on prt1_l_p2_p1 t1_2',), ('                    ->  Parallel Seq Scan on prt1_l_p3_p1 t1_4',), ('                    ->  Parallel Seq Scan on prt1_l_p3_p2 t1_5',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_l_p1 t2_1',), ('                          Filter: ((a = t1.b) AND (t1.a = b) AND (t1.b = a) AND ((t1.c)::text = (c)::text))',), ('                    ->  Seq Scan on prt2_l_p2_p1 t2_2',), ('                          Filter: ((a = t1.b) AND (t1.a = b) AND (t1.b = a) AND ((t1.c)::text = (c)::text))',), ('                    ->  Seq Scan on prt2_l_p2_p2 t2_3',), ('                          Filter: ((a = t1.b) AND (t1.a = b) AND (t1.b = a) AND ((t1.c)::text = (c)::text))',), ('                    ->  Seq Scan on prt2_l_p3_p1 t2_4',), ('                          Filter: ((a = t1.b) AND (t1.a = b) AND (t1.b = a) AND ((t1.c)::text = (c)::text))',), ('                    ->  Seq Scan on prt2_l_p3_p2 t2_5',), ('                          Filter: ((a = t1.b) AND (t1.a = b) AND (t1.b = a) AND ((t1.c)::text = (c)::text))',)]"
postgresql,postgresql,"SELECT COUNT(*) FROM prt1_l t1 LEFT JOIN LATERAL 			  (SELECT t1.b AS t1b, t2.* FROM prt2_l t2) s 			  ON t1.a = s.b AND t1.b = s.a AND t1.c = s.c 			  WHERE s.t1b = s.a",partition_join.sql,SAME,,"[(100,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT * FROM prt1_l WHERE a = 1 AND a = 2) t1 RIGHT JOIN prt2_l t2 ON t1.a = t2.b AND t1.b = t2.a AND t1.c = t2.c",partition_join.sql,SAME,,"[('Hash Left Join',), ('  Hash Cond: ((t2.b = a) AND (t2.a = b) AND ((t2.c)::text = (c)::text))',), ('  ->  Append',), ('        ->  Seq Scan on prt2_l_p1 t2_1',), ('        ->  Seq Scan on prt2_l_p2_p1 t2_2',), ('        ->  Seq Scan on prt2_l_p2_p2 t2_3',), ('        ->  Seq Scan on prt2_l_p3_p1 t2_4',), ('        ->  Seq Scan on prt2_l_p3_p2 t2_5',), ('  ->  Hash',), ('        ->  Result',), ('              One-Time Filter: false',)]"
postgresql,postgresql,ANALYZE prt1_n,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_n,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt3_n,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt4_n,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1, prt4_n t2 WHERE t1.a = t2.a",partition_join.sql,SAME,,"[('Hash Join',), ('  Hash Cond: (t1.a = t2.a)',), ('  ->  Append',), ('        ->  Seq Scan on prt1_p1 t1_1',), ('        ->  Seq Scan on prt1_p2 t1_2',), ('        ->  Seq Scan on prt1_p3 t1_3',), ('  ->  Hash',), ('        ->  Append',), ('              ->  Seq Scan on prt4_n_p1 t2_1',), ('              ->  Seq Scan on prt4_n_p2 t2_2',), ('              ->  Seq Scan on prt4_n_p3 t2_3',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1, prt4_n t2, prt2 t3 WHERE t1.a = t2.a and t1.a = t3.b",partition_join.sql,SAME,,"[('Hash Join',), ('  Hash Cond: (t2.a = t1.a)',), ('  ->  Append',), ('        ->  Seq Scan on prt4_n_p1 t2_1',), ('        ->  Seq Scan on prt4_n_p2 t2_2',), ('        ->  Seq Scan on prt4_n_p3 t2_3',), ('  ->  Hash',), ('        ->  Append',), ('              ->  Hash Join',), ('                    Hash Cond: (t1_1.a = t3_1.b)',), ('                    ->  Seq Scan on prt1_p1 t1_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p1 t3_1',), ('              ->  Hash Join',), ('                    Hash Cond: (t1_2.a = t3_2.b)',), ('                    ->  Seq Scan on prt1_p2 t1_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p2 t3_2',), ('              ->  Hash Join',), ('                    Hash Cond: (t1_3.a = t3_3.b)',), ('                    ->  Seq Scan on prt1_p3 t1_3',), ('                    ->  Hash',), ('                          ->  Seq Scan on prt2_p3 t3_3',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1 LEFT JOIN prt2 t2 ON (t1.a < t2.b)",partition_join.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Append',), ('        ->  Seq Scan on prt1_p1 t1_1',), ('        ->  Seq Scan on prt1_p2 t1_2',), ('        ->  Seq Scan on prt1_p3 t1_3',), ('  ->  Append',), ('        ->  Index Scan using iprt2_p1_b on prt2_p1 t2_1',), ('              Index Cond: (b > t1.a)',), ('        ->  Index Scan using iprt2_p2_b on prt2_p2 t2_2',), ('              Index Cond: (b > t1.a)',), ('        ->  Index Scan using iprt2_p3_b on prt2_p3 t2_3',), ('              Index Cond: (b > t1.a)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_m t1, prt2_m t2 WHERE t1.a = (t2.b + t2.a)/2",partition_join.sql,SAME,,"[('Hash Join',), ('  Hash Cond: (((t2.b + t2.a) / 2) = t1.a)',), ('  ->  Append',), ('        ->  Seq Scan on prt2_m_p1 t2_1',), ('        ->  Seq Scan on prt2_m_p2 t2_2',), ('        ->  Seq Scan on prt2_m_p3 t2_3',), ('  ->  Hash',), ('        ->  Append',), ('              ->  Seq Scan on prt1_m_p1 t1_1',), ('              ->  Seq Scan on prt1_m_p2 t1_2',), ('              ->  Seq Scan on prt1_m_p3 t1_3',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_m t1 LEFT JOIN prt2_m t2 ON t1.a = t2.b",partition_join.sql,SAME,,"[('Hash Left Join',), ('  Hash Cond: (t1.a = t2.b)',), ('  ->  Append',), ('        ->  Seq Scan on prt1_m_p1 t1_1',), ('        ->  Seq Scan on prt1_m_p2 t1_2',), ('        ->  Seq Scan on prt1_m_p3 t1_3',), ('  ->  Hash',), ('        ->  Append',), ('              ->  Seq Scan on prt2_m_p1 t2_1',), ('              ->  Seq Scan on prt2_m_p2 t2_2',), ('              ->  Seq Scan on prt2_m_p3 t2_3',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_m t1 LEFT JOIN prt2_m t2 ON t1.c = t2.c",partition_join.sql,SAME,,"[('Hash Left Join',), ('  Hash Cond: (t1.c = t2.c)',), ('  ->  Append',), ('        ->  Seq Scan on prt1_m_p1 t1_1',), ('        ->  Seq Scan on prt1_m_p2 t1_2',), ('        ->  Seq Scan on prt1_m_p3 t1_3',), ('  ->  Hash',), ('        ->  Append',), ('              ->  Seq Scan on prt2_m_p1 t2_1',), ('              ->  Seq Scan on prt2_m_p2 t2_2',), ('              ->  Seq Scan on prt2_m_p3 t2_3',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_n t1 LEFT JOIN prt2_n t2 ON (t1.c = t2.c)",partition_join.sql,SAME,,"[('Hash Right Join',), ('  Hash Cond: (t2.c = (t1.c)::text)',), ('  ->  Append',), ('        ->  Seq Scan on prt2_n_p1 t2_1',), ('        ->  Seq Scan on prt2_n_p2 t2_2',), ('  ->  Hash',), ('        ->  Append',), ('              ->  Seq Scan on prt1_n_p1 t1_1',), ('              ->  Seq Scan on prt1_n_p2 t1_2',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_n t1 JOIN prt2_n t2 ON (t1.c = t2.c) JOIN plt1 t3 ON (t1.c = t3.c)",partition_join.sql,SAME,,"[('Hash Join',), ('  Hash Cond: (t2.c = (t1.c)::text)',), ('  ->  Append',), ('        ->  Seq Scan on prt2_n_p1 t2_1',), ('        ->  Seq Scan on prt2_n_p2 t2_2',), ('  ->  Hash',), ('        ->  Hash Join',), ('              Hash Cond: (t3.c = (t1.c)::text)',), ('              ->  Append',), ('                    ->  Seq Scan on plt1_p1 t3_1',), ('                    ->  Seq Scan on plt1_p2 t3_2',), ('                    ->  Seq Scan on plt1_p3 t3_3',), ('              ->  Hash',), ('                    ->  Append',), ('                          ->  Seq Scan on prt1_n_p1 t1_1',), ('                          ->  Seq Scan on prt1_n_p2 t1_2',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_n t1 FULL JOIN prt1 t2 ON (t1.c = t2.c)",partition_join.sql,SAME,,"[('Hash Full Join',), ('  Hash Cond: ((t2.c)::text = (t1.c)::text)',), ('  ->  Append',), ('        ->  Seq Scan on prt1_p1 t2_1',), ('        ->  Seq Scan on prt1_p2 t2_2',), ('        ->  Seq Scan on prt1_p3 t2_3',), ('  ->  Hash',), ('        ->  Append',), ('              ->  Seq Scan on prt1_n_p1 t1_1',), ('              ->  Seq Scan on prt1_n_p2 t1_2',)]"
postgresql,postgresql,"create temp table prtx1 (a integer, b integer, c integer)   partition by range (a)",partition_join.sql,SAME,,[]
postgresql,postgresql,create temp table prtx1_1 partition of prtx1 for values from (1) to (11),partition_join.sql,SAME,,[]
postgresql,postgresql,create temp table prtx1_2 partition of prtx1 for values from (11) to (21),partition_join.sql,SAME,,[]
postgresql,postgresql,create temp table prtx1_3 partition of prtx1 for values from (21) to (31),partition_join.sql,SAME,,[]
postgresql,postgresql,"create temp table prtx2 (a integer, b integer, c integer)   partition by range (a)",partition_join.sql,SAME,,[]
postgresql,postgresql,create temp table prtx2_1 partition of prtx2 for values from (1) to (11),partition_join.sql,SAME,,[]
postgresql,postgresql,create temp table prtx2_2 partition of prtx2 for values from (11) to (21),partition_join.sql,SAME,,[]
postgresql,postgresql,create temp table prtx2_3 partition of prtx2 for values from (21) to (31),partition_join.sql,SAME,,[]
postgresql,postgresql,create index on prtx2 (b),partition_join.sql,SAME,,[]
postgresql,postgresql,create index on prtx2 (c),partition_join.sql,SAME,,[]
postgresql,postgresql,analyze prtx1,partition_join.sql,SAME,,[]
postgresql,postgresql,analyze prtx2,partition_join.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from prtx1 where not exists (select 1 from prtx2                   where prtx2.a=prtx1.a and prtx2.b=prtx1.b and prtx2.c=123)   and a<20 and c=120,partition_join.sql,SAME,,"[('Append',), ('  ->  Nested Loop Anti Join',), ('        ->  Seq Scan on prtx1_1',), ('              Filter: ((a < 20) AND (c = 120))',), ('        ->  Bitmap Heap Scan on prtx2_1',), ('              Recheck Cond: ((b = prtx1_1.b) AND (c = 123))',), ('              Filter: (a = prtx1_1.a)',), ('              ->  BitmapAnd',), ('                    ->  Bitmap Index Scan on prtx2_1_b_idx',), ('                          Index Cond: (b = prtx1_1.b)',), ('                    ->  Bitmap Index Scan on prtx2_1_c_idx',), ('                          Index Cond: (c = 123)',), ('  ->  Nested Loop Anti Join',), ('        ->  Seq Scan on prtx1_2',), ('              Filter: ((a < 20) AND (c = 120))',), ('        ->  Bitmap Heap Scan on prtx2_2',), ('              Recheck Cond: ((b = prtx1_2.b) AND (c = 123))',), ('              Filter: (a = prtx1_2.a)',), ('              ->  BitmapAnd',), ('                    ->  Bitmap Index Scan on prtx2_2_b_idx',), ('                          Index Cond: (b = prtx1_2.b)',), ('                    ->  Bitmap Index Scan on prtx2_2_c_idx',), ('                          Index Cond: (c = 123)',)]"
postgresql,postgresql,select * from prtx1 where not exists (select 1 from prtx2                   where prtx2.a=prtx1.a and prtx2.b=prtx1.b and prtx2.c=123)   and a<20 and c=120,partition_join.sql,SAME,,"[(1, 120, 120)]"
postgresql,postgresql,explain (costs off) select * from prtx1 where not exists (select 1 from prtx2                   where prtx2.a=prtx1.a and (prtx2.b=prtx1.b+1 or prtx2.c=99))   and a<20 and c=91,partition_join.sql,SAME,,"[('Append',), ('  ->  Nested Loop Anti Join',), ('        ->  Seq Scan on prtx1_1',), ('              Filter: ((a < 20) AND (c = 91))',), ('        ->  Bitmap Heap Scan on prtx2_1',), ('              Recheck Cond: ((b = (prtx1_1.b + 1)) OR (c = 99))',), ('              Filter: (a = prtx1_1.a)',), ('              ->  BitmapOr',), ('                    ->  Bitmap Index Scan on prtx2_1_b_idx',), ('                          Index Cond: (b = (prtx1_1.b + 1))',), ('                    ->  Bitmap Index Scan on prtx2_1_c_idx',), ('                          Index Cond: (c = 99)',), ('  ->  Nested Loop Anti Join',), ('        ->  Seq Scan on prtx1_2',), ('              Filter: ((a < 20) AND (c = 91))',), ('        ->  Bitmap Heap Scan on prtx2_2',), ('              Recheck Cond: ((b = (prtx1_2.b + 1)) OR (c = 99))',), ('              Filter: (a = prtx1_2.a)',), ('              ->  BitmapOr',), ('                    ->  Bitmap Index Scan on prtx2_2_b_idx',), ('                          Index Cond: (b = (prtx1_2.b + 1))',), ('                    ->  Bitmap Index Scan on prtx2_2_c_idx',), ('                          Index Cond: (c = 99)',)]"
postgresql,postgresql,select * from prtx1 where not exists (select 1 from prtx2                   where prtx2.a=prtx1.a and (prtx2.b=prtx1.b+1 or prtx2.c=99))   and a<20 and c=91,partition_join.sql,SAME,,"[(2, 91, 91)]"
postgresql,postgresql,CREATE INDEX prt1_adv_a_idx ON prt1_adv (a),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX prt2_adv_b_idx ON prt2_adv (b),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_3.b = t1_3.a)',), ('              ->  Seq Scan on prt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(100, '0100', 100, '0100'), (125, '0125', 125, '0125'), (200, '0200', 200, '0200'), (225, '0225', 225, '0225'), (250, '0250', 250, '0250'), (275, '0275', 275, '0275'), (350, '0350', 350, '0350'), (375, '0375', 375, '0375')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1_adv t1 WHERE EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Semi Join',), ('              Hash Cond: (t1_1.a = t2_1.b)',), ('              ->  Seq Scan on prt1_adv_p1 t1_1',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_adv_p1 t2_1',), ('        ->  Hash Semi Join',), ('              Hash Cond: (t1_2.a = t2_2.b)',), ('              ->  Seq Scan on prt1_adv_p2 t1_2',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_adv_p2 t2_2',), ('        ->  Hash Semi Join',), ('              Hash Cond: (t1_3.a = t2_3.b)',), ('              ->  Seq Scan on prt1_adv_p3 t1_3',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_adv_p3 t2_3',)]"
postgresql,postgresql,SELECT t1.* FROM prt1_adv t1 WHERE EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[(100, 0, '0100'), (125, 0, '0125'), (200, 0, '0200'), (225, 0, '0225'), (250, 0, '0250'), (275, 0, '0275'), (350, 0, '0350'), (375, 0, '0375')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 LEFT JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: (t2_3.b = t1_3.a)',), ('              ->  Seq Scan on prt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 LEFT JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(100, '0100', 100, '0100'), (125, '0125', 125, '0125'), (150, '0150', None, None), (175, '0175', None, None), (200, '0200', 200, '0200'), (225, '0225', 225, '0225'), (250, '0250', 250, '0250'), (275, '0275', 275, '0275'), (300, '0300', None, None), (325, '0325', None, None), (350, '0350', 350, '0350'), (375, '0375', 375, '0375')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: (t2_3.b = t1_3.a)',), ('              ->  Seq Scan on prt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,SELECT t1.* FROM prt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[(150, 0, '0150'), (175, 0, '0175'), (300, 0, '0300'), (325, 0, '0325')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT 175 phv, * FROM prt1_adv WHERE prt1_adv.b = 0) t1 FULL JOIN (SELECT 425 phv, * FROM prt2_adv WHERE prt2_adv.a = 0) t2 ON (t1.a = t2.b) WHERE t1.phv = t1.a OR t2.phv = t2.b ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: prt1_adv.a, prt2_adv.b',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: (prt1_adv_1.a = prt2_adv_1.b)',), ('              Filter: (((175) = prt1_adv_1.a) OR ((425) = prt2_adv_1.b))',), ('              ->  Seq Scan on prt1_adv_p1 prt1_adv_1',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_adv_p1 prt2_adv_1',), ('                          Filter: (a = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: (prt1_adv_2.a = prt2_adv_2.b)',), ('              Filter: (((175) = prt1_adv_2.a) OR ((425) = prt2_adv_2.b))',), ('              ->  Seq Scan on prt1_adv_p2 prt1_adv_2',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_adv_p2 prt2_adv_2',), ('                          Filter: (a = 0)',), ('        ->  Hash Full Join',), ('              Hash Cond: (prt2_adv_3.b = prt1_adv_3.a)',), ('              Filter: (((175) = prt1_adv_3.a) OR ((425) = prt2_adv_3.b))',), ('              ->  Seq Scan on prt2_adv_p3 prt2_adv_3',), ('                    Filter: (a = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p3 prt1_adv_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT 175 phv, * FROM prt1_adv WHERE prt1_adv.b = 0) t1 FULL JOIN (SELECT 425 phv, * FROM prt2_adv WHERE prt2_adv.a = 0) t2 ON (t1.a = t2.b) WHERE t1.phv = t1.a OR t2.phv = t2.b ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(175, '0175', None, None), (None, None, 425, '0425')]"
postgresql,postgresql,ANALYZE prt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_3.b = t1_3.a)',), ('              ->  Seq Scan on prt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(100, '0100', 100, '0100'), (125, '0125', 125, '0125'), (200, '0200', 200, '0200'), (225, '0225', 225, '0225'), (250, '0250', 250, '0250'), (275, '0275', 275, '0275'), (350, '0350', 350, '0350'), (375, '0375', 375, '0375')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1_adv t1 WHERE EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Semi Join',), ('              Hash Cond: (t1_1.a = t2_1.b)',), ('              ->  Seq Scan on prt1_adv_p1 t1_1',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_adv_p1 t2_1',), ('        ->  Hash Semi Join',), ('              Hash Cond: (t1_2.a = t2_2.b)',), ('              ->  Seq Scan on prt1_adv_p2 t1_2',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_adv_p2 t2_2',), ('        ->  Hash Semi Join',), ('              Hash Cond: (t1_3.a = t2_3.b)',), ('              ->  Seq Scan on prt1_adv_p3 t1_3',), ('                    Filter: (b = 0)',), ('              ->  Hash',), ('                    ->  Seq Scan on prt2_adv_p3 t2_3',)]"
postgresql,postgresql,SELECT t1.* FROM prt1_adv t1 WHERE EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[(100, 0, '0100'), (125, 0, '0125'), (200, 0, '0200'), (225, 0, '0225'), (250, 0, '0250'), (275, 0, '0275'), (350, 0, '0350'), (375, 0, '0375')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 LEFT JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: (t2_3.b = t1_3.a)',), ('              ->  Seq Scan on prt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 LEFT JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(100, '0100', 100, '0100'), (125, '0125', 125, '0125'), (150, '0150', None, None), (175, '0175', None, None), (200, '0200', 200, '0200'), (225, '0225', 225, '0225'), (250, '0250', 250, '0250'), (275, '0275', 275, '0275'), (300, '0300', None, None), (325, '0325', None, None), (350, '0350', 350, '0350'), (375, '0375', 375, '0375')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.b, t1.c, t2.a, t2.c FROM prt2_adv t1 LEFT JOIN prt1_adv t2 ON (t1.b = t2.a) WHERE t1.a = 0 ORDER BY t1.b, t2.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.b, t2.a',), ('  ->  Hash Right Join',), ('        Hash Cond: (t2.a = t1.b)',), ('        ->  Append',), ('              ->  Seq Scan on prt1_adv_p1 t2_1',), ('              ->  Seq Scan on prt1_adv_p2 t2_2',), ('              ->  Seq Scan on prt1_adv_p3 t2_3',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_adv_p1 t1_1',), ('                          Filter: (a = 0)',), ('                    ->  Seq Scan on prt2_adv_p2 t1_2',), ('                          Filter: (a = 0)',), ('                    ->  Seq Scan on prt2_adv_p3 t1_3',), ('                          Filter: (a = 0)',), ('                    ->  Seq Scan on prt2_adv_extra t1_4',), ('                          Filter: (a = 0)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: (t2_3.b = t1_3.a)',), ('              ->  Seq Scan on prt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,SELECT t1.* FROM prt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[(150, 0, '0150'), (175, 0, '0175'), (300, 0, '0300'), (325, 0, '0325')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt2_adv t1 WHERE NOT EXISTS (SELECT 1 FROM prt1_adv t2 WHERE t1.b = t2.a) AND t1.a = 0 ORDER BY t1.b,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.b',), ('  ->  Hash Right Anti Join',), ('        Hash Cond: (t2.a = t1.b)',), ('        ->  Append',), ('              ->  Seq Scan on prt1_adv_p1 t2_1',), ('              ->  Seq Scan on prt1_adv_p2 t2_2',), ('              ->  Seq Scan on prt1_adv_p3 t2_3',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_adv_p1 t1_1',), ('                          Filter: (a = 0)',), ('                    ->  Seq Scan on prt2_adv_p2 t1_2',), ('                          Filter: (a = 0)',), ('                    ->  Seq Scan on prt2_adv_p3 t1_3',), ('                          Filter: (a = 0)',), ('                    ->  Seq Scan on prt2_adv_extra t1_4',), ('                          Filter: (a = 0)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT 175 phv, * FROM prt1_adv WHERE prt1_adv.b = 0) t1 FULL JOIN (SELECT 425 phv, * FROM prt2_adv WHERE prt2_adv.a = 0) t2 ON (t1.a = t2.b) WHERE t1.phv = t1.a OR t2.phv = t2.b ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: prt1_adv.a, prt2_adv.b',), ('  ->  Hash Full Join',), ('        Hash Cond: (prt2_adv.b = prt1_adv.a)',), ('        Filter: (((175) = prt1_adv.a) OR ((425) = prt2_adv.b))',), ('        ->  Append',), ('              ->  Seq Scan on prt2_adv_p1 prt2_adv_1',), ('                    Filter: (a = 0)',), ('              ->  Seq Scan on prt2_adv_p2 prt2_adv_2',), ('                    Filter: (a = 0)',), ('              ->  Seq Scan on prt2_adv_p3 prt2_adv_3',), ('                    Filter: (a = 0)',), ('              ->  Seq Scan on prt2_adv_extra prt2_adv_4',), ('                    Filter: (a = 0)',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_adv_p1 prt1_adv_1',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p2 prt1_adv_2',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p3 prt1_adv_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.b, t1.c, t2.a, t2.c, t3.a, t3.c FROM prt2_adv t1 LEFT JOIN prt1_adv t2 ON (t1.b = t2.a) INNER JOIN prt1_adv t3 ON (t1.b = t3.a) WHERE t1.a = 0 ORDER BY t1.b, t2.a, t3.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.b, t2.a',), ('  ->  Append',), ('        ->  Nested Loop Left Join',), ('              ->  Nested Loop',), ('                    ->  Seq Scan on prt2_adv_p1 t1_1',), ('                          Filter: (a = 0)',), ('                    ->  Index Scan using prt1_adv_p1_a_idx on prt1_adv_p1 t3_1',), ('                          Index Cond: (a = t1_1.b)',), ('              ->  Index Scan using prt1_adv_p1_a_idx on prt1_adv_p1 t2_1',), ('                    Index Cond: (a = t1_1.b)',), ('        ->  Hash Right Join',), ('              Hash Cond: (t2_2.a = t1_2.b)',), ('              ->  Seq Scan on prt1_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Hash Join',), ('                          Hash Cond: (t3_2.a = t1_2.b)',), ('                          ->  Seq Scan on prt1_adv_p2 t3_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_adv_p2 t1_2',), ('                                      Filter: (a = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: (t2_3.a = t1_3.b)',), ('              ->  Seq Scan on prt1_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Hash Join',), ('                          Hash Cond: (t3_3.a = t1_3.b)',), ('                          ->  Seq Scan on prt1_adv_p3 t3_3',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt2_adv_p3 t1_3',), ('                                      Filter: (a = 0)',)]"
postgresql,postgresql,"SELECT t1.b, t1.c, t2.a, t2.c, t3.a, t3.c FROM prt2_adv t1 LEFT JOIN prt1_adv t2 ON (t1.b = t2.a) INNER JOIN prt1_adv t3 ON (t1.b = t3.a) WHERE t1.a = 0 ORDER BY t1.b, t2.a, t3.a",partition_join.sql,SAME,,"[(100, '0100', 100, '0100', 100, '0100'), (125, '0125', 125, '0125', 125, '0125'), (200, '0200', 200, '0200', 200, '0200'), (225, '0225', 225, '0225', 225, '0225'), (250, '0250', 250, '0250', 250, '0250'), (275, '0275', 275, '0275', 275, '0275'), (350, '0350', 350, '0350', 350, '0350'), (375, '0375', 375, '0375', 375, '0375')]"
postgresql,postgresql,ALTER TABLE prt2_adv DETACH PARTITION prt2_adv_p3,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Join',), ('        Hash Cond: (t2.b = t1.a)',), ('        ->  Append',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Seq Scan on prt2_adv_p3_1 t2_3',), ('              ->  Seq Scan on prt2_adv_p3_2 t2_4',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1_adv t1 WHERE EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Semi Join',), ('        Hash Cond: (t1.a = t2.b)',), ('        ->  Append',), ('              ->  Seq Scan on prt1_adv_p1 t1_1',), ('                    Filter: (b = 0)',), ('              ->  Seq Scan on prt1_adv_p2 t1_2',), ('                    Filter: (b = 0)',), ('              ->  Seq Scan on prt1_adv_p3 t1_3',), ('                    Filter: (b = 0)',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt2_adv_p1 t2_1',), ('                    ->  Seq Scan on prt2_adv_p2 t2_2',), ('                    ->  Seq Scan on prt2_adv_p3_1 t2_3',), ('                    ->  Seq Scan on prt2_adv_p3_2 t2_4',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 LEFT JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b',), ('  ->  Hash Right Join',), ('        Hash Cond: (t2.b = t1.a)',), ('        ->  Append',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Seq Scan on prt2_adv_p3_1 t2_3',), ('              ->  Seq Scan on prt2_adv_p3_2 t2_4',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM prt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM prt2_adv t2 WHERE t1.a = t2.b) AND t1.b = 0 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Right Anti Join',), ('        Hash Cond: (t2.b = t1.a)',), ('        ->  Append',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Seq Scan on prt2_adv_p3_1 t2_3',), ('              ->  Seq Scan on prt2_adv_p3_2 t2_4',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p3 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM (SELECT 175 phv, * FROM prt1_adv WHERE prt1_adv.b = 0) t1 FULL JOIN (SELECT 425 phv, * FROM prt2_adv WHERE prt2_adv.a = 0) t2 ON (t1.a = t2.b) WHERE t1.phv = t1.a OR t2.phv = t2.b ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: prt1_adv.a, prt2_adv.b',), ('  ->  Hash Full Join',), ('        Hash Cond: (prt2_adv.b = prt1_adv.a)',), ('        Filter: (((175) = prt1_adv.a) OR ((425) = prt2_adv.b))',), ('        ->  Append',), ('              ->  Seq Scan on prt2_adv_p1 prt2_adv_1',), ('                    Filter: (a = 0)',), ('              ->  Seq Scan on prt2_adv_p2 prt2_adv_2',), ('                    Filter: (a = 0)',), ('              ->  Seq Scan on prt2_adv_p3_1 prt2_adv_3',), ('                    Filter: (a = 0)',), ('              ->  Seq Scan on prt2_adv_p3_2 prt2_adv_4',), ('                    Filter: (a = 0)',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_adv_p1 prt1_adv_1',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p2 prt1_adv_2',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p3 prt1_adv_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,ANALYZE prt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE prt1_adv DETACH PARTITION prt1_adv_p1,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE prt1_adv ATTACH PARTITION prt1_adv_p1 DEFAULT,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE prt1_adv DETACH PARTITION prt1_adv_p3,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (t2_1.b = t1_2.a)',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p1 t1_2',), ('                          Filter: (b = 0)',), ('        ->  Hash Join',), ('              Hash Cond: (t2_2.b = t1_1.a)',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p2 t1_1',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(100, '0100', 100, '0100'), (125, '0125', 125, '0125'), (200, '0200', 200, '0200'), (225, '0225', 225, '0225'), (250, '0250', 250, '0250'), (275, '0275', 275, '0275')]"
postgresql,postgresql,ALTER TABLE prt1_adv ATTACH PARTITION prt1_adv_p3 FOR VALUES FROM (300) TO (400),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE prt2_adv ATTACH PARTITION prt2_adv_p3 FOR VALUES FROM (350) TO (500),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Join',), ('        Hash Cond: (t2.b = t1.a)',), ('        ->  Append',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Seq Scan on prt2_adv_p3 t2_3',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_adv_p2 t1_1',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p3 t1_2',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p1 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,ALTER TABLE prt2_adv DETACH PARTITION prt2_adv_p3,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE prt2_adv ATTACH PARTITION prt2_adv_p3 DEFAULT,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Join',), ('        Hash Cond: (t2.b = t1.a)',), ('        ->  Append',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Seq Scan on prt2_adv_p3 t2_3',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on prt1_adv_p2 t1_1',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p3 t1_2',), ('                          Filter: (b = 0)',), ('                    ->  Seq Scan on prt1_adv_p1 t1_3',), ('                          Filter: (b = 0)',)]"
postgresql,postgresql,ANALYZE prt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX prt3_adv_a_idx ON prt3_adv (a),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt3_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c, t3.a, t3.c FROM prt1_adv t1 LEFT JOIN prt2_adv t2 ON (t1.a = t2.b) LEFT JOIN prt3_adv t3 ON (t1.a = t3.a) WHERE t1.b = 0 ORDER BY t1.a, t2.b, t3.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.b, t3.a',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: (t3_1.a = t1_1.a)',), ('              ->  Seq Scan on prt3_adv_p1 t3_1',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: (t2_2.b = t1_1.a)',), ('                          ->  Seq Scan on prt2_adv_p2 t2_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt1_adv_p2 t1_1',), ('                                      Filter: (b = 0)',), ('        ->  Hash Right Join',), ('              Hash Cond: (t3_2.a = t1_2.a)',), ('              ->  Seq Scan on prt3_adv_p2 t3_2',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: (t2_1.b = t1_2.a)',), ('                          ->  Seq Scan on prt2_adv_p1 t2_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on prt1_adv_p1 t1_2',), ('                                      Filter: (b = 0)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c, t3.a, t3.c FROM prt1_adv t1 LEFT JOIN prt2_adv t2 ON (t1.a = t2.b) LEFT JOIN prt3_adv t3 ON (t1.a = t3.a) WHERE t1.b = 0 ORDER BY t1.a, t2.b, t3.a",partition_join.sql,SAME,,"[(100, '0100', 100, '0100', None, None), (125, '0125', 125, '0125', None, None), (150, '0150', None, None, None, None), (175, '0175', None, None, None, None), (200, '0200', 200, '0200', 200, '0200'), (225, '0225', 225, '0225', 225, '0225'), (250, '0250', 250, '0250', 250, '0250'), (275, '0275', 275, '0275', 275, '0275')]"
postgresql,postgresql,CREATE INDEX prt1_adv_a_idx ON prt1_adv (a),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX prt2_adv_b_idx ON prt2_adv (b),partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.a < 300 AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: ((a < 300) AND (b = 0))',), ('        ->  Hash Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: ((a < 300) AND (b = 0))',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.a < 300 AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(100, '0100', 100, '0100'), (125, '0125', 125, '0125'), (150, '0150', 150, '0150'), (175, '0175', 175, '0175'), (200, '0200', 200, '0200'), (225, '0225', 225, '0225'), (250, '0250', 250, '0250'), (275, '0275', 275, '0275')]"
postgresql,postgresql,ANALYZE prt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE prt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.a >= 100 AND t1.a < 300 AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: (t2_1.b = t1_1.a)',), ('              ->  Seq Scan on prt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p1 t1_1',), ('                          Filter: ((a >= 100) AND (a < 300) AND (b = 0))',), ('        ->  Hash Join',), ('              Hash Cond: (t2_2.b = t1_2.a)',), ('              ->  Seq Scan on prt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on prt1_adv_p2 t1_2',), ('                          Filter: ((a >= 100) AND (a < 300) AND (b = 0))',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.b, t2.c FROM prt1_adv t1 INNER JOIN prt2_adv t2 ON (t1.a = t2.b) WHERE t1.a >= 100 AND t1.a < 300 AND t1.b = 0 ORDER BY t1.a, t2.b",partition_join.sql,SAME,,"[(100, '0100', 100, '0100'), (125, '0125', 125, '0125'), (150, '0150', 150, '0150'), (175, '0175', 175, '0175'), (200, '0200', 200, '0200'), (225, '0225', 225, '0225'), (250, '0250', 250, '0250'), (275, '0275', 275, '0275')]"
postgresql,postgresql,ANALYZE plt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (9, '0009', 9, '0009')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM plt1_adv t1 WHERE EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Nested Loop Semi Join',), ('              Join Filter: ((t1_1.a = t2_1.a) AND (t1_1.c = t2_1.c))',), ('              ->  Seq Scan on plt1_adv_p1 t1_1',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('        ->  Nested Loop Semi Join',), ('              Join Filter: ((t1_2.a = t2_2.a) AND (t1_2.c = t2_2.c))',), ('              ->  Seq Scan on plt1_adv_p2 t1_2',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('        ->  Nested Loop Semi Join',), ('              Join Filter: ((t1_3.a = t2_3.a) AND (t1_3.c = t2_3.c))',), ('              ->  Seq Scan on plt1_adv_p3 t1_3',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',)]"
postgresql,postgresql,SELECT t1.* FROM plt1_adv t1 WHERE EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[(3, 3, '0003'), (4, 4, '0004'), (6, 6, '0006'), (9, 9, '0009')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(1, '0001', None, None), (3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (8, '0008', None, None), (9, '0009', 9, '0009')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM plt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,SELECT t1.* FROM plt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[(1, 1, '0001'), (8, 8, '0008')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 FULL JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE coalesce(t1.b, 0) < 10 AND coalesce(t2.b, 0) < 10 ORDER BY t1.a, t2.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.a',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t1_1.a = t2_1.a) AND (t1_1.c = t2_1.c))',), ('              Filter: ((COALESCE(t1_1.b, 0) < 10) AND (COALESCE(t2_1.b, 0) < 10))',), ('              ->  Seq Scan on plt1_adv_p1 t1_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_p1 t2_1',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t1_2.a = t2_2.a) AND (t1_2.c = t2_2.c))',), ('              Filter: ((COALESCE(t1_2.b, 0) < 10) AND (COALESCE(t2_2.b, 0) < 10))',), ('              ->  Seq Scan on plt1_adv_p2 t1_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_p2 t2_2',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t1_3.a = t2_3.a) AND (t1_3.c = t2_3.c))',), ('              Filter: ((COALESCE(t1_3.b, 0) < 10) AND (COALESCE(t2_3.b, 0) < 10))',), ('              ->  Seq Scan on plt1_adv_p3 t1_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_p3 t2_3',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 FULL JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE coalesce(t1.b, 0) < 10 AND coalesce(t2.b, 0) < 10 ORDER BY t1.a, t2.a",partition_join.sql,SAME,,"[(1, '0001', None, None), (3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (8, '0008', None, None), (9, '0009', 9, '0009'), (None, None, 2, '0002'), (None, None, 7, '0007')]"
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (9, '0009', 9, '0009')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM plt1_adv t1 WHERE EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Nested Loop Semi Join',), ('              Join Filter: ((t1_1.a = t2_1.a) AND (t1_1.c = t2_1.c))',), ('              ->  Seq Scan on plt1_adv_p1 t1_1',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('        ->  Nested Loop Semi Join',), ('              Join Filter: ((t1_2.a = t2_2.a) AND (t1_2.c = t2_2.c))',), ('              ->  Seq Scan on plt1_adv_p2 t1_2',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('        ->  Nested Loop Semi Join',), ('              Join Filter: ((t1_3.a = t2_3.a) AND (t1_3.c = t2_3.c))',), ('              ->  Seq Scan on plt1_adv_p3 t1_3',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',)]"
postgresql,postgresql,SELECT t1.* FROM plt1_adv t1 WHERE EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[(3, 3, '0003'), (4, 4, '0004'), (6, 6, '0006'), (9, 9, '0009')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(1, '0001', None, None), (3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (8, '0008', None, None), (9, '0009', 9, '0009')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt2_adv t1 LEFT JOIN plt1_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Right Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Append',), ('              ->  Seq Scan on plt1_adv_p1 t2_1',), ('              ->  Seq Scan on plt1_adv_p2 t2_2',), ('              ->  Seq Scan on plt1_adv_p3 t2_3',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt2_adv_extra t1_1',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt2_adv_p1 t1_2',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt2_adv_p2 t1_3',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt2_adv_p3 t1_4',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM plt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,SELECT t1.* FROM plt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[(1, 1, '0001'), (8, 8, '0008')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM plt2_adv t1 WHERE NOT EXISTS (SELECT 1 FROM plt1_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Right Anti Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Append',), ('              ->  Seq Scan on plt1_adv_p1 t2_1',), ('              ->  Seq Scan on plt1_adv_p2 t2_2',), ('              ->  Seq Scan on plt1_adv_p3 t2_3',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt2_adv_extra t1_1',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt2_adv_p1 t1_2',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt2_adv_p2 t1_3',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt2_adv_p3 t1_4',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 FULL JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE coalesce(t1.b, 0) < 10 AND coalesce(t2.b, 0) < 10 ORDER BY t1.a, t2.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.a',), ('  ->  Hash Full Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        Filter: ((COALESCE(t1.b, 0) < 10) AND (COALESCE(t2.b, 0) < 10))',), ('        ->  Append',), ('              ->  Seq Scan on plt2_adv_extra t2_1',), ('              ->  Seq Scan on plt2_adv_p1 t2_2',), ('              ->  Seq Scan on plt2_adv_p2 t2_3',), ('              ->  Seq Scan on plt2_adv_p3 t2_4',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',)]"
postgresql,postgresql,ALTER TABLE plt2_adv DETACH PARTITION plt2_adv_p2,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Append',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Seq Scan on plt2_adv_p2_1 t2_2',), ('              ->  Seq Scan on plt2_adv_p2_2 t2_3',), ('              ->  Seq Scan on plt2_adv_p3 t2_4',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM plt1_adv t1 WHERE EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Semi Join',), ('        Hash Cond: ((t1.a = t2.a) AND (t1.c = t2.c))',), ('        ->  Append',), ('              ->  Seq Scan on plt1_adv_p1 t1_1',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt1_adv_p2 t1_2',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt1_adv_p3 t1_3',), ('                    Filter: (b < 10)',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt2_adv_p1 t2_1',), ('                    ->  Seq Scan on plt2_adv_p2_1 t2_2',), ('                    ->  Seq Scan on plt2_adv_p2_2 t2_3',), ('                    ->  Seq Scan on plt2_adv_p3 t2_4',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Right Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Append',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Seq Scan on plt2_adv_p2_1 t2_2',), ('              ->  Seq Scan on plt2_adv_p2_2 t2_3',), ('              ->  Seq Scan on plt2_adv_p3 t2_4',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM plt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Right Anti Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Append',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Seq Scan on plt2_adv_p2_1 t2_2',), ('              ->  Seq Scan on plt2_adv_p2_2 t2_3',), ('              ->  Seq Scan on plt2_adv_p3 t2_4',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 FULL JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE coalesce(t1.b, 0) < 10 AND coalesce(t2.b, 0) < 10 ORDER BY t1.a, t2.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.a',), ('  ->  Hash Full Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        Filter: ((COALESCE(t1.b, 0) < 10) AND (COALESCE(t2.b, 0) < 10))',), ('        ->  Append',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Seq Scan on plt2_adv_p2_1 t2_2',), ('              ->  Seq Scan on plt2_adv_p2_2 t2_3',), ('              ->  Seq Scan on plt2_adv_p3 t2_4',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',)]"
postgresql,postgresql,"ALTER TABLE plt2_adv ATTACH PARTITION plt2_adv_p2 FOR VALUES IN ('0004', '0006')",partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE plt1_adv DETACH PARTITION plt1_adv_p1,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE plt2_adv DETACH PARTITION plt2_adv_p3,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1_null t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3_null t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (9, '0009', 9, '0009')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM plt1_adv t1 WHERE EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Semi Join',), ('              Hash Cond: ((t1_1.a = t2_1.a) AND (t1_1.c = t2_1.c))',), ('              ->  Seq Scan on plt1_adv_p1_null t1_1',), ('                    Filter: (b < 10)',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_p1 t2_1',), ('        ->  Nested Loop Semi Join',), ('              Join Filter: ((t1_2.a = t2_2.a) AND (t1_2.c = t2_2.c))',), ('              ->  Seq Scan on plt1_adv_p2 t1_2',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('        ->  Nested Loop Semi Join',), ('              Join Filter: ((t1_3.a = t2_3.a) AND (t1_3.c = t2_3.c))',), ('              ->  Seq Scan on plt1_adv_p3 t1_3',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt2_adv_p3_null t2_3',)]"
postgresql,postgresql,SELECT t1.* FROM plt1_adv t1 WHERE EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[(3, 3, '0003'), (4, 4, '0004'), (6, 6, '0006'), (9, 9, '0009')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1_null t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3_null t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(-1, None, None, None), (1, '0001', None, None), (3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (8, '0008', None, None), (9, '0009', 9, '0009')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT t1.* FROM plt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1_null t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Anti Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3_null t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,SELECT t1.* FROM plt1_adv t1 WHERE NOT EXISTS (SELECT 1 FROM plt2_adv t2 WHERE t1.a = t2.a AND t1.c = t2.c) AND t1.b < 10 ORDER BY t1.a,partition_join.sql,SAME,,"[(-1, -1, None), (1, 1, '0001'), (8, 8, '0008')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 FULL JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE coalesce(t1.b, 0) < 10 AND coalesce(t2.b, 0) < 10 ORDER BY t1.a, t2.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.a',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t1_1.a = t2_1.a) AND (t1_1.c = t2_1.c))',), ('              Filter: ((COALESCE(t1_1.b, 0) < 10) AND (COALESCE(t2_1.b, 0) < 10))',), ('              ->  Seq Scan on plt1_adv_p1_null t1_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_p1 t2_1',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t1_2.a = t2_2.a) AND (t1_2.c = t2_2.c))',), ('              Filter: ((COALESCE(t1_2.b, 0) < 10) AND (COALESCE(t2_2.b, 0) < 10))',), ('              ->  Seq Scan on plt1_adv_p2 t1_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_p2 t2_2',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              Filter: ((COALESCE(t1_3.b, 0) < 10) AND (COALESCE(t2_3.b, 0) < 10))',), ('              ->  Seq Scan on plt2_adv_p3_null t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 FULL JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE coalesce(t1.b, 0) < 10 AND coalesce(t2.b, 0) < 10 ORDER BY t1.a, t2.a",partition_join.sql,SAME,,"[(-1, None, None, None), (1, '0001', None, None), (3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (8, '0008', None, None), (9, '0009', 9, '0009'), (None, None, -1, None), (None, None, 2, '0002'), (None, None, 7, '0007')]"
postgresql,postgresql,"ALTER TABLE plt1_adv ATTACH PARTITION plt1_adv_p1 FOR VALUES IN ('0001', '0003')",partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE plt2_adv ATTACH PARTITION plt2_adv_p3 FOR VALUES IN ('0007', '0009')",partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (9, '0009', 9, '0009')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Right Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Append',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_extra t1_4',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 FULL JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE coalesce(t1.b, 0) < 10 AND coalesce(t2.b, 0) < 10 ORDER BY t1.a, t2.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.a',), ('  ->  Hash Full Join',), ('        Hash Cond: ((t1.a = t2.a) AND (t1.c = t2.c))',), ('        Filter: ((COALESCE(t1.b, 0) < 10) AND (COALESCE(t2.b, 0) < 10))',), ('        ->  Append',), ('              ->  Seq Scan on plt1_adv_p1 t1_1',), ('              ->  Seq Scan on plt1_adv_p2 t1_2',), ('              ->  Seq Scan on plt1_adv_p3 t1_3',), ('              ->  Seq Scan on plt1_adv_extra t1_4',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt2_adv_p1 t2_1',), ('                    ->  Seq Scan on plt2_adv_p2 t2_2',), ('                    ->  Seq Scan on plt2_adv_p3 t2_3',)]"
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (9, '0009', 9, '0009')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_3',), ('                          Filter: (b < 10)',), ('        ->  Nested Loop Left Join',), ('              Join Filter: ((t1_4.a = t2_4.a) AND (t1_4.c = t2_4.c))',), ('              ->  Seq Scan on plt1_adv_extra t1_4',), ('                    Filter: (b < 10)',), ('              ->  Seq Scan on plt2_adv_extra t2_4',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(-1, None, None, None), (1, '0001', None, None), (3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (8, '0008', None, None), (9, '0009', 9, '0009')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 FULL JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE coalesce(t1.b, 0) < 10 AND coalesce(t2.b, 0) < 10 ORDER BY t1.a, t2.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t2.a',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t1_1.a = t2_1.a) AND (t1_1.c = t2_1.c))',), ('              Filter: ((COALESCE(t1_1.b, 0) < 10) AND (COALESCE(t2_1.b, 0) < 10))',), ('              ->  Seq Scan on plt1_adv_p1 t1_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_p1 t2_1',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t1_2.a = t2_2.a) AND (t1_2.c = t2_2.c))',), ('              Filter: ((COALESCE(t1_2.b, 0) < 10) AND (COALESCE(t2_2.b, 0) < 10))',), ('              ->  Seq Scan on plt1_adv_p2 t1_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_p2 t2_2',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t1_3.a = t2_3.a) AND (t1_3.c = t2_3.c))',), ('              Filter: ((COALESCE(t1_3.b, 0) < 10) AND (COALESCE(t2_3.b, 0) < 10))',), ('              ->  Seq Scan on plt1_adv_p3 t1_3',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_p3 t2_3',), ('        ->  Hash Full Join',), ('              Hash Cond: ((t1_4.a = t2_4.a) AND (t1_4.c = t2_4.c))',), ('              Filter: ((COALESCE(t1_4.b, 0) < 10) AND (COALESCE(t2_4.b, 0) < 10))',), ('              ->  Seq Scan on plt1_adv_extra t1_4',), ('              ->  Hash',), ('                    ->  Seq Scan on plt2_adv_extra t2_4',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 FULL JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE coalesce(t1.b, 0) < 10 AND coalesce(t2.b, 0) < 10 ORDER BY t1.a, t2.a",partition_join.sql,SAME,,"[(-1, None, None, None), (1, '0001', None, None), (3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006'), (8, '0008', None, None), (9, '0009', 9, '0009'), (None, None, -1, None), (None, None, 2, '0002'), (None, None, 7, '0007')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c, t3.a, t3.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) LEFT JOIN plt1_adv t3 ON (t1.a = t3.a AND t1.c = t3.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t3_1.a = t1_1.a) AND (t3_1.c = t1_1.c))',), ('              ->  Seq Scan on plt1_adv_p1 t3_1',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('                          ->  Seq Scan on plt2_adv_p1 t2_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on plt1_adv_p1 t1_1',), ('                                      Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t3_2.a = t1_2.a) AND (t3_2.c = t1_2.c))',), ('              ->  Seq Scan on plt1_adv_p2 t3_2',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('                          ->  Seq Scan on plt2_adv_p2 t2_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on plt1_adv_p2 t1_2',), ('                                      Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t3_3.a = t1_3.a) AND (t3_3.c = t1_3.c))',), ('              ->  Seq Scan on plt1_adv_p3 t3_3',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.c = t1_3.c))',), ('                          ->  Seq Scan on plt2_adv_p3 t2_3',), ('                          ->  Hash',), ('                                ->  Seq Scan on plt1_adv_p3 t1_3',), ('                                      Filter: (b < 10)',), ('        ->  Nested Loop Left Join',), ('              Join Filter: ((t1_4.a = t3_4.a) AND (t1_4.c = t3_4.c))',), ('              ->  Nested Loop Left Join',), ('                    Join Filter: ((t1_4.a = t2_4.a) AND (t1_4.c = t2_4.c))',), ('                    ->  Seq Scan on plt1_adv_extra t1_4',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt2_adv_extra t2_4',), ('              ->  Seq Scan on plt1_adv_extra t3_4',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c, t3.a, t3.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) LEFT JOIN plt1_adv t3 ON (t1.a = t3.a AND t1.c = t3.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(-1, None, None, None, None, None), (1, '0001', None, None, 1, '0001'), (3, '0003', 3, '0003', 3, '0003'), (4, '0004', 4, '0004', 4, '0004'), (6, '0006', 6, '0006', 6, '0006'), (8, '0008', None, None, 8, '0008'), (9, '0009', 9, '0009', 9, '0009')]"
postgresql,postgresql,ALTER TABLE plt1_adv DETACH PARTITION plt1_adv_p1,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE plt1_adv ATTACH PARTITION plt1_adv_p1 DEFAULT,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_1.a = t1_2.a) AND (t2_1.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_1.a) AND (t2_2.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_1',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006')]"
postgresql,postgresql,ALTER TABLE plt2_adv DETACH PARTITION plt2_adv_p2,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Append',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Seq Scan on plt2_adv_p2_ext t2_2',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt1_adv_p2 t1_1',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p1 t1_2',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,ALTER TABLE plt2_adv DETACH PARTITION plt2_adv_p2_ext,partition_join.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE plt2_adv ATTACH PARTITION plt2_adv_p2_ext DEFAULT,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Append',), ('              ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Seq Scan on plt2_adv_p2_ext t2_2',), ('        ->  Hash',), ('              ->  Append',), ('                    ->  Seq Scan on plt1_adv_p2 t1_1',), ('                          Filter: (b < 10)',), ('                    ->  Seq Scan on plt1_adv_p1 t1_2',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"ALTER TABLE plt2_adv ATTACH PARTITION plt2_adv_p2 FOR VALUES IN ('0004', '0006')",partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt3_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c, t3.a, t3.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) LEFT JOIN plt3_adv t3 ON (t1.a = t3.a AND t1.c = t3.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t3_1.a = t1_1.a) AND (t3_1.c = t1_1.c))',), ('              ->  Seq Scan on plt3_adv_p1 t3_1',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: ((t2_2.a = t1_1.a) AND (t2_2.c = t1_1.c))',), ('                          ->  Seq Scan on plt2_adv_p2 t2_2',), ('                          ->  Hash',), ('                                ->  Seq Scan on plt1_adv_p2 t1_1',), ('                                      Filter: (b < 10)',), ('        ->  Hash Right Join',), ('              Hash Cond: ((t3_2.a = t1_2.a) AND (t3_2.c = t1_2.c))',), ('              ->  Seq Scan on plt3_adv_p2 t3_2',), ('              ->  Hash',), ('                    ->  Hash Right Join',), ('                          Hash Cond: ((t2_1.a = t1_2.a) AND (t2_1.c = t1_2.c))',), ('                          ->  Seq Scan on plt2_adv_p1 t2_1',), ('                          ->  Hash',), ('                                ->  Seq Scan on plt1_adv_p1 t1_2',), ('                                      Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c, t3.a, t3.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) LEFT JOIN plt3_adv t3 ON (t1.a = t3.a AND t1.c = t3.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(1, '0001', None, None, None, None), (3, '0003', 3, '0003', None, None), (4, '0004', 4, '0004', 4, '0004'), (6, '0006', 6, '0006', 6, '0006')]"
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_1.a = t1_2.a) AND (t2_1.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p1_null t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p1 t1_2',), ('                          Filter: (b < 10)',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_1.a) AND (t2_2.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p2 t1_1',), ('                          Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(1, '0001', 1, '0001'), (3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (6, '0006', 6, '0006')]"
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Seq Scan on plt2_adv_p2 t2',), ('        ->  Hash',), ('              ->  Seq Scan on plt1_adv_p2 t1',), ('                    Filter: (b < 10)',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(4, '0004', 4, '0004'), (6, '0006', 6, '0006')]"
postgresql,postgresql,ANALYZE plt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.c IN ('0003', '0004', '0005') AND t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_1',), (""                          Filter: ((b < 10) AND (c = ANY ('{0003,0004,0005}'::text[])))"",), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p4 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p4 t1_2',), (""                          Filter: ((b < 10) AND (c = ANY ('{0003,0004,0005}'::text[])))"",)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.c IN ('0003', '0004', '0005') AND t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (5, '0005', 5, '0005')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.c IS NULL AND t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Right Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Seq Scan on plt2_adv_p4 t2',), ('        ->  Hash',), ('              ->  Seq Scan on plt1_adv_p4 t1',), ('                    Filter: ((c IS NULL) AND (b < 10))',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.c IS NULL AND t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(-1, None, None, None)]"
postgresql,postgresql,ANALYZE plt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.c IN ('0003', '0004', '0005') AND t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_1.a = t1_1.a) AND (t2_1.c = t1_1.c))',), ('              ->  Seq Scan on plt2_adv_p3 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p3 t1_1',), (""                          Filter: ((b < 10) AND (c = ANY ('{0003,0004,0005}'::text[])))"",), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.c = t1_2.c))',), ('              ->  Seq Scan on plt2_adv_p4 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt1_adv_p4 t1_2',), (""                          Filter: ((b < 10) AND (c = ANY ('{0003,0004,0005}'::text[])))"",)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 INNER JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.c IN ('0003', '0004', '0005') AND t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(3, '0003', 3, '0003'), (4, '0004', 4, '0004'), (5, '0005', 5, '0005')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.c IS NULL AND t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a',), ('  ->  Hash Right Join',), ('        Hash Cond: ((t2.a = t1.a) AND (t2.c = t1.c))',), ('        ->  Seq Scan on plt2_adv_p4 t2',), ('        ->  Hash',), ('              ->  Seq Scan on plt1_adv_p4 t1',), ('                    Filter: ((c IS NULL) AND (b < 10))',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c FROM plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE t1.c IS NULL AND t1.b < 10 ORDER BY t1.a",partition_join.sql,SAME,,"[(-1, None, None, None)]"
postgresql,postgresql,ANALYZE plt1_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt2_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE plt3_adv,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.a, t1.c, t2.a, t2.c, t3.a, t3.c FROM (plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.c = t2.c)) FULL JOIN plt3_adv t3 ON (t1.c = t3.c) WHERE coalesce(t1.a, 0) % 5 != 3 AND coalesce(t1.a, 0) % 5 != 4 ORDER BY t1.c, t1.a, t2.a, t3.a",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.c, t1.a, t2.a, t3.a',), ('  ->  Append',), ('        ->  Hash Full Join',), ('              Hash Cond: (t1_1.c = t3_1.c)',), ('              Filter: (((COALESCE(t1_1.a, 0) % 5) <> 3) AND ((COALESCE(t1_1.a, 0) % 5) <> 4))',), ('              ->  Hash Left Join',), ('                    Hash Cond: (t1_1.c = t2_1.c)',), ('                    ->  Seq Scan on plt1_adv_p1 t1_1',), ('                    ->  Hash',), ('                          ->  Seq Scan on plt2_adv_p1 t2_1',), ('              ->  Hash',), ('                    ->  Seq Scan on plt3_adv_p1 t3_1',), ('        ->  Hash Full Join',), ('              Hash Cond: (t1_2.c = t3_2.c)',), ('              Filter: (((COALESCE(t1_2.a, 0) % 5) <> 3) AND ((COALESCE(t1_2.a, 0) % 5) <> 4))',), ('              ->  Hash Left Join',), ('                    Hash Cond: (t1_2.c = t2_2.c)',), ('                    ->  Seq Scan on plt1_adv_p2 t1_2',), ('                    ->  Hash',), ('                          ->  Seq Scan on plt2_adv_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on plt3_adv_p2 t3_2',)]"
postgresql,postgresql,"SELECT t1.a, t1.c, t2.a, t2.c, t3.a, t3.c FROM (plt1_adv t1 LEFT JOIN plt2_adv t2 ON (t1.c = t2.c)) FULL JOIN plt3_adv t3 ON (t1.c = t3.c) WHERE coalesce(t1.a, 0) % 5 != 3 AND coalesce(t1.a, 0) % 5 != 4 ORDER BY t1.c, t1.a, t2.a, t3.a",partition_join.sql,SAME,,"[(0, '0000', None, None, None, None), (5, '0000', None, None, None, None), (10, '0000', None, None, None, None), (15, '0000', None, None, None, None), (20, '0000', None, None, None, None), (1, '0001', None, None, 1, '0001'), (1, '0001', None, None, 6, '0001'), (1, '0001', None, None, 11, '0001'), (1, '0001', None, None, 16, '0001'), (1, '0001', None, None, 21, '0001'), (6, '0001', None, None, 1, '0001'), (6, '0001', None, None, 6, '0001'), (6, '0001', None, None, 11, '0001'), (6, '0001', None, None, 16, '0001'), (6, '0001', None, None, 21, '0001'), (11, '0001', None, None, 1, '0001'), (11, '0001', None, None, 6, '0001'), (11, '0001', None, None, 11, '0001'), (11, '0001', None, None, 16, '0001'), (11, '0001', None, None, 21, '0001'), (16, '0001', None, None, 1, '0001'), (16, '0001', None, None, 6, '0001'), (16, '0001', None, None, 11, '0001'), (16, '0001', None, None, 16, '0001'), (16, '0001', None, None, 21, '0001'), (21, '0001', None, None, 1, '0001'), (21, '0001', None, None, 6, '0001'), (21, '0001', None, None, 11, '0001'), (21, '0001', None, None, 16, '0001'), (21, '0001', None, None, 21, '0001'), (2, '0002', 2, '0002', None, None), (2, '0002', 7, '0002', None, None), (2, '0002', 12, '0002', None, None), (2, '0002', 17, '0002', None, None), (2, '0002', 22, '0002', None, None), (7, '0002', 2, '0002', None, None), (7, '0002', 7, '0002', None, None), (7, '0002', 12, '0002', None, None), (7, '0002', 17, '0002', None, None), (7, '0002', 22, '0002', None, None), (12, '0002', 2, '0002', None, None), (12, '0002', 7, '0002', None, None), (12, '0002', 12, '0002', None, None), (12, '0002', 17, '0002', None, None), (12, '0002', 22, '0002', None, None), (17, '0002', 2, '0002', None, None), (17, '0002', 7, '0002', None, None), (17, '0002', 12, '0002', None, None), (17, '0002', 17, '0002', None, None), (17, '0002', 22, '0002', None, None), (22, '0002', 2, '0002', None, None), (22, '0002', 7, '0002', None, None), (22, '0002', 12, '0002', None, None), (22, '0002', 17, '0002', None, None), (22, '0002', 22, '0002', None, None)]"
postgresql,postgresql,ANALYZE alpha,partition_join.sql,SAME,,[]
postgresql,postgresql,ANALYZE beta,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.*, t2.* FROM alpha t1 INNER JOIN beta t2 ON (t1.a = t2.a AND t1.b = t2.b) WHERE t1.b >= 125 AND t1.b < 225 ORDER BY t1.a, t1.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t1.b',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t1_1.a = t2_1.a) AND (t1_1.b = t2_1.b))',), ('              ->  Seq Scan on alpha_neg_p1 t1_1',), ('                    Filter: ((b >= 125) AND (b < 225))',), ('              ->  Hash',), ('                    ->  Seq Scan on beta_neg_p1 t2_1',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_2.a = t1_2.a) AND (t2_2.b = t1_2.b))',), ('              ->  Seq Scan on beta_neg_p2 t2_2',), ('              ->  Hash',), ('                    ->  Seq Scan on alpha_neg_p2 t1_2',), ('                          Filter: ((b >= 125) AND (b < 225))',), ('        ->  Hash Join',), ('              Hash Cond: ((t2_4.a = t1_4.a) AND (t2_4.b = t1_4.b))',), ('              ->  Append',), ('                    ->  Seq Scan on beta_pos_p1 t2_4',), ('                    ->  Seq Scan on beta_pos_p2 t2_5',), ('                    ->  Seq Scan on beta_pos_p3 t2_6',), ('              ->  Hash',), ('                    ->  Append',), ('                          ->  Seq Scan on alpha_pos_p1 t1_4',), ('                                Filter: ((b >= 125) AND (b < 225))',), ('                          ->  Seq Scan on alpha_pos_p2 t1_5',), ('                                Filter: ((b >= 125) AND (b < 225))',), ('                          ->  Seq Scan on alpha_pos_p3 t1_6',), ('                                Filter: ((b >= 125) AND (b < 225))',)]"
postgresql,postgresql,"SELECT t1.*, t2.* FROM alpha t1 INNER JOIN beta t2 ON (t1.a = t2.a AND t1.b = t2.b) WHERE t1.b >= 125 AND t1.b < 225 ORDER BY t1.a, t1.b",partition_join.sql,SAME,,"[(-1.0, 126, '0006', -1.0, 126, '0006'), (-1.0, 129, '0009', -1.0, 129, '0009'), (-1.0, 133, '0003', -1.0, 133, '0003'), (-1.0, 134, '0004', -1.0, 134, '0004'), (-1.0, 136, '0006', -1.0, 136, '0006'), (-1.0, 139, '0009', -1.0, 139, '0009'), (-1.0, 143, '0003', -1.0, 143, '0003'), (-1.0, 144, '0004', -1.0, 144, '0004'), (-1.0, 146, '0006', -1.0, 146, '0006'), (-1.0, 149, '0009', -1.0, 149, '0009'), (-1.0, 203, '0003', -1.0, 203, '0003'), (-1.0, 204, '0004', -1.0, 204, '0004'), (-1.0, 206, '0006', -1.0, 206, '0006'), (-1.0, 209, '0009', -1.0, 209, '0009'), (-1.0, 213, '0003', -1.0, 213, '0003'), (-1.0, 214, '0004', -1.0, 214, '0004'), (-1.0, 216, '0006', -1.0, 216, '0006'), (-1.0, 219, '0009', -1.0, 219, '0009'), (-1.0, 223, '0003', -1.0, 223, '0003'), (-1.0, 224, '0004', -1.0, 224, '0004'), (1.0, 126, '0006', 1.0, 126, '0006'), (1.0, 129, '0009', 1.0, 129, '0009'), (1.0, 133, '0003', 1.0, 133, '0003'), (1.0, 134, '0004', 1.0, 134, '0004'), (1.0, 136, '0006', 1.0, 136, '0006'), (1.0, 139, '0009', 1.0, 139, '0009'), (1.0, 143, '0003', 1.0, 143, '0003'), (1.0, 144, '0004', 1.0, 144, '0004'), (1.0, 146, '0006', 1.0, 146, '0006'), (1.0, 149, '0009', 1.0, 149, '0009'), (1.0, 203, '0003', 1.0, 203, '0003'), (1.0, 204, '0004', 1.0, 204, '0004'), (1.0, 206, '0006', 1.0, 206, '0006'), (1.0, 209, '0009', 1.0, 209, '0009'), (1.0, 213, '0003', 1.0, 213, '0003'), (1.0, 214, '0004', 1.0, 214, '0004'), (1.0, 216, '0006', 1.0, 216, '0006'), (1.0, 219, '0009', 1.0, 219, '0009'), (1.0, 223, '0003', 1.0, 223, '0003'), (1.0, 224, '0004', 1.0, 224, '0004')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.*, t2.* FROM alpha t1 INNER JOIN beta t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE ((t1.b >= 100 AND t1.b < 110) OR (t1.b >= 200 AND t1.b < 210)) AND ((t2.b >= 100 AND t2.b < 110) OR (t2.b >= 200 AND t2.b < 210)) AND t1.c IN ('0004', '0009') ORDER BY t1.a, t1.b, t2.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t1.b, t2.b',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t1_2.a = t2_2.a) AND (t1_2.c = t2_2.c))',), ('              ->  Append',), ('                    ->  Seq Scan on alpha_neg_p1 t1_2',), (""                          Filter: ((c = ANY ('{0004,0009}'::text[])) AND (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210))))"",), ('                    ->  Seq Scan on alpha_neg_p2 t1_3',), (""                          Filter: ((c = ANY ('{0004,0009}'::text[])) AND (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210))))"",), ('              ->  Hash',), ('                    ->  Append',), ('                          ->  Seq Scan on beta_neg_p1 t2_2',), ('                                Filter: (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210)))',), ('                          ->  Seq Scan on beta_neg_p2 t2_3',), ('                                Filter: (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210)))',), ('        ->  Nested Loop',), ('              Join Filter: ((t1_4.a = t2_4.a) AND (t1_4.c = t2_4.c))',), ('              ->  Seq Scan on alpha_pos_p2 t1_4',), (""                    Filter: ((c = ANY ('{0004,0009}'::text[])) AND (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210))))"",), ('              ->  Seq Scan on beta_pos_p2 t2_4',), ('                    Filter: (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210)))',), ('        ->  Nested Loop',), ('              Join Filter: ((t1_5.a = t2_5.a) AND (t1_5.c = t2_5.c))',), ('              ->  Seq Scan on alpha_pos_p3 t1_5',), (""                    Filter: ((c = ANY ('{0004,0009}'::text[])) AND (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210))))"",), ('              ->  Seq Scan on beta_pos_p3 t2_5',), ('                    Filter: (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210)))',)]"
postgresql,postgresql,"SELECT t1.*, t2.* FROM alpha t1 INNER JOIN beta t2 ON (t1.a = t2.a AND t1.c = t2.c) WHERE ((t1.b >= 100 AND t1.b < 110) OR (t1.b >= 200 AND t1.b < 210)) AND ((t2.b >= 100 AND t2.b < 110) OR (t2.b >= 200 AND t2.b < 210)) AND t1.c IN ('0004', '0009') ORDER BY t1.a, t1.b, t2.b",partition_join.sql,SAME,,"[(-1.0, 104, '0004', -1.0, 104, '0004'), (-1.0, 104, '0004', -1.0, 204, '0004'), (-1.0, 109, '0009', -1.0, 109, '0009'), (-1.0, 109, '0009', -1.0, 209, '0009'), (-1.0, 204, '0004', -1.0, 104, '0004'), (-1.0, 204, '0004', -1.0, 204, '0004'), (-1.0, 209, '0009', -1.0, 109, '0009'), (-1.0, 209, '0009', -1.0, 209, '0009'), (1.0, 104, '0004', 1.0, 104, '0004'), (1.0, 104, '0004', 1.0, 204, '0004'), (1.0, 109, '0009', 1.0, 109, '0009'), (1.0, 109, '0009', 1.0, 209, '0009'), (1.0, 204, '0004', 1.0, 104, '0004'), (1.0, 204, '0004', 1.0, 204, '0004'), (1.0, 209, '0009', 1.0, 109, '0009'), (1.0, 209, '0009', 1.0, 209, '0009')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.*, t2.* FROM alpha t1 INNER JOIN beta t2 ON (t1.a = t2.a AND t1.b = t2.b AND t1.c = t2.c) WHERE ((t1.b >= 100 AND t1.b < 110) OR (t1.b >= 200 AND t1.b < 210)) AND ((t2.b >= 100 AND t2.b < 110) OR (t2.b >= 200 AND t2.b < 210)) AND t1.c IN ('0004', '0009') ORDER BY t1.a, t1.b",partition_join.sql,SAME,,"[('Sort',), ('  Sort Key: t1.a, t1.b',), ('  ->  Append',), ('        ->  Hash Join',), ('              Hash Cond: ((t1_1.a = t2_1.a) AND (t1_1.b = t2_1.b) AND (t1_1.c = t2_1.c))',), ('              ->  Seq Scan on alpha_neg_p1 t1_1',), (""                    Filter: ((c = ANY ('{0004,0009}'::text[])) AND (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210))))"",), ('              ->  Hash',), ('                    ->  Seq Scan on beta_neg_p1 t2_1',), ('                          Filter: (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210)))',), ('        ->  Hash Join',), ('              Hash Cond: ((t1_2.a = t2_2.a) AND (t1_2.b = t2_2.b) AND (t1_2.c = t2_2.c))',), ('              ->  Seq Scan on alpha_neg_p2 t1_2',), (""                    Filter: ((c = ANY ('{0004,0009}'::text[])) AND (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210))))"",), ('              ->  Hash',), ('                    ->  Seq Scan on beta_neg_p2 t2_2',), ('                          Filter: (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210)))',), ('        ->  Nested Loop',), ('              Join Filter: ((t1_3.a = t2_3.a) AND (t1_3.b = t2_3.b) AND (t1_3.c = t2_3.c))',), ('              ->  Seq Scan on alpha_pos_p2 t1_3',), (""                    Filter: ((c = ANY ('{0004,0009}'::text[])) AND (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210))))"",), ('              ->  Seq Scan on beta_pos_p2 t2_3',), ('                    Filter: (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210)))',), ('        ->  Nested Loop',), ('              Join Filter: ((t1_4.a = t2_4.a) AND (t1_4.b = t2_4.b) AND (t1_4.c = t2_4.c))',), ('              ->  Seq Scan on alpha_pos_p3 t1_4',), (""                    Filter: ((c = ANY ('{0004,0009}'::text[])) AND (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210))))"",), ('              ->  Seq Scan on beta_pos_p3 t2_4',), ('                    Filter: (((b >= 100) AND (b < 110)) OR ((b >= 200) AND (b < 210)))',)]"
postgresql,postgresql,"SELECT t1.*, t2.* FROM alpha t1 INNER JOIN beta t2 ON (t1.a = t2.a AND t1.b = t2.b AND t1.c = t2.c) WHERE ((t1.b >= 100 AND t1.b < 110) OR (t1.b >= 200 AND t1.b < 210)) AND ((t2.b >= 100 AND t2.b < 110) OR (t2.b >= 200 AND t2.b < 210)) AND t1.c IN ('0004', '0009') ORDER BY t1.a, t1.b",partition_join.sql,SAME,,"[(-1.0, 104, '0004', -1.0, 104, '0004'), (-1.0, 109, '0009', -1.0, 109, '0009'), (-1.0, 204, '0004', -1.0, 204, '0004'), (-1.0, 209, '0009', -1.0, 209, '0009'), (1.0, 104, '0004', 1.0, 104, '0004'), (1.0, 109, '0009', 1.0, 109, '0009'), (1.0, 204, '0004', 1.0, 204, '0004'), (1.0, 209, '0009', 1.0, 209, '0009')]"
postgresql,postgresql,ANALYZE fract_t,partition_join.sql,SAME,,[]
postgresql,postgresql,SET max_parallel_workers_per_gather = 0,partition_join.sql,SAME,,[]
postgresql,postgresql,SET enable_partitionwise_join = on,partition_join.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT x.id, y.id FROM fract_t x LEFT JOIN fract_t y USING (id) ORDER BY x.id ASC LIMIT 10",partition_join.sql,SAME,,"[('Limit',), ('  ->  Merge Append',), ('        Sort Key: x.id',), ('        ->  Merge Left Join',), ('              Merge Cond: (x_1.id = y_1.id)',), ('              ->  Index Only Scan using fract_t0_pkey on fract_t0 x_1',), ('              ->  Index Only Scan using fract_t0_pkey on fract_t0 y_1',), ('        ->  Merge Left Join',), ('              Merge Cond: (x_2.id = y_2.id)',), ('              ->  Index Only Scan using fract_t1_pkey on fract_t1 x_2',), ('              ->  Index Only Scan using fract_t1_pkey on fract_t1 y_2',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT x.id, y.id FROM fract_t x LEFT JOIN fract_t y USING (id) ORDER BY x.id DESC LIMIT 10",partition_join.sql,SAME,,"[('Limit',), ('  ->  Merge Append',), ('        Sort Key: x.id DESC',), ('        ->  Nested Loop Left Join',), ('              ->  Index Only Scan Backward using fract_t0_pkey on fract_t0 x_1',), ('              ->  Index Only Scan using fract_t0_pkey on fract_t0 y_1',), ('                    Index Cond: (id = x_1.id)',), ('        ->  Nested Loop Left Join',), ('              ->  Index Only Scan Backward using fract_t1_pkey on fract_t1 x_2',), ('              ->  Index Only Scan using fract_t1_pkey on fract_t1 y_2',), ('                    Index Cond: (id = x_2.id)',)]"
postgresql,postgresql,RESET max_parallel_workers_per_gather,partition_join.sql,SAME,,[]
postgresql,postgresql,RESET enable_partitionwise_join,partition_join.sql,SAME,,[]
postgresql,postgresql,set plan_cache_mode = force_generic_plan,partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from lp,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), ('  ->  Seq Scan on lp_bc lp_2',), ('  ->  Seq Scan on lp_ef lp_3',), ('  ->  Seq Scan on lp_g lp_4',), ('  ->  Seq Scan on lp_null lp_5',), ('  ->  Seq Scan on lp_default lp_6',)]"
postgresql,postgresql,explain (costs off) select * from lp where a > 'a' and a < 'd',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_bc lp_1',), (""        Filter: ((a > 'a'::bpchar) AND (a < 'd'::bpchar))"",), ('  ->  Seq Scan on lp_default lp_2',), (""        Filter: ((a > 'a'::bpchar) AND (a < 'd'::bpchar))"",)]"
postgresql,postgresql,explain (costs off) select * from lp where a > 'a' and a <= 'd',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), (""        Filter: ((a > 'a'::bpchar) AND (a <= 'd'::bpchar))"",), ('  ->  Seq Scan on lp_bc lp_2',), (""        Filter: ((a > 'a'::bpchar) AND (a <= 'd'::bpchar))"",), ('  ->  Seq Scan on lp_default lp_3',), (""        Filter: ((a > 'a'::bpchar) AND (a <= 'd'::bpchar))"",)]"
postgresql,postgresql,explain (costs off) select * from lp where a = 'a',partition_prune.sql,SAME,,"[('Seq Scan on lp_ad lp',), (""  Filter: (a = 'a'::bpchar)"",)]"
postgresql,postgresql,explain (costs off) select * from lp where 'a' = a,partition_prune.sql,SAME,,"[('Seq Scan on lp_ad lp',), (""  Filter: ('a'::bpchar = a)"",)]"
postgresql,postgresql,/* commuted */ explain (costs off) select * from lp where a is not null,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on lp_bc lp_2',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on lp_ef lp_3',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on lp_g lp_4',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on lp_default lp_5',), ('        Filter: (a IS NOT NULL)',)]"
postgresql,postgresql,explain (costs off) select * from lp where a is null,partition_prune.sql,SAME,,"[('Seq Scan on lp_null lp',), ('  Filter: (a IS NULL)',)]"
postgresql,postgresql,explain (costs off) select * from lp where a = 'a' or a = 'c',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), (""        Filter: ((a = 'a'::bpchar) OR (a = 'c'::bpchar))"",), ('  ->  Seq Scan on lp_bc lp_2',), (""        Filter: ((a = 'a'::bpchar) OR (a = 'c'::bpchar))"",)]"
postgresql,postgresql,explain (costs off) select * from lp where a is not null and (a = 'a' or a = 'c'),partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), (""        Filter: ((a IS NOT NULL) AND ((a = 'a'::bpchar) OR (a = 'c'::bpchar)))"",), ('  ->  Seq Scan on lp_bc lp_2',), (""        Filter: ((a IS NOT NULL) AND ((a = 'a'::bpchar) OR (a = 'c'::bpchar)))"",)]"
postgresql,postgresql,explain (costs off) select * from lp where a <> 'g',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), (""        Filter: (a <> 'g'::bpchar)"",), ('  ->  Seq Scan on lp_bc lp_2',), (""        Filter: (a <> 'g'::bpchar)"",), ('  ->  Seq Scan on lp_ef lp_3',), (""        Filter: (a <> 'g'::bpchar)"",), ('  ->  Seq Scan on lp_default lp_4',), (""        Filter: (a <> 'g'::bpchar)"",)]"
postgresql,postgresql,explain (costs off) select * from lp where a <> 'a' and a <> 'd',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_bc lp_1',), (""        Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))"",), ('  ->  Seq Scan on lp_ef lp_2',), (""        Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))"",), ('  ->  Seq Scan on lp_g lp_3',), (""        Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))"",), ('  ->  Seq Scan on lp_default lp_4',), (""        Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))"",)]"
postgresql,postgresql,"explain (costs off) select * from lp where a not in ('a', 'd')",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_bc lp_1',), (""        Filter: (a <> ALL ('{a,d}'::bpchar[]))"",), ('  ->  Seq Scan on lp_ef lp_2',), (""        Filter: (a <> ALL ('{a,d}'::bpchar[]))"",), ('  ->  Seq Scan on lp_g lp_3',), (""        Filter: (a <> ALL ('{a,d}'::bpchar[]))"",), ('  ->  Seq Scan on lp_default lp_4',), (""        Filter: (a <> ALL ('{a,d}'::bpchar[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from coll_pruning where a collate ""C"" = 'a' collate ""C""",partition_prune.sql,SAME,,"[('Seq Scan on coll_pruning_a coll_pruning',), ('  Filter: (a = \'a\'::text COLLATE ""C"")',)]"
postgresql,postgresql,"explain (costs off) select * from coll_pruning where a collate ""POSIX"" = 'a' collate ""POSIX""",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on coll_pruning_a coll_pruning_1',), ('        Filter: ((a)::text = \'a\'::text COLLATE ""POSIX"")',), ('  ->  Seq Scan on coll_pruning_b coll_pruning_2',), ('        Filter: ((a)::text = \'a\'::text COLLATE ""POSIX"")',), ('  ->  Seq Scan on coll_pruning_def coll_pruning_3',), ('        Filter: ((a)::text = \'a\'::text COLLATE ""POSIX"")',)]"
postgresql,postgresql,alter table rlp attach partition rlp3 for values from (15) to (20),partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from rlp where a < 1,partition_prune.sql,SAME,,"[('Seq Scan on rlp1 rlp',), ('  Filter: (a < 1)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where 1 > a,partition_prune.sql,SAME,,"[('Seq Scan on rlp1 rlp',), ('  Filter: (1 > a)',)]"
postgresql,postgresql,/* commuted */ explain (costs off) select * from rlp where a <= 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a <= 1)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a <= 1)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 1,partition_prune.sql,SAME,,"[('Seq Scan on rlp2 rlp',), ('  Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 1::bigint,partition_prune.sql,SAME,,"[('Seq Scan on rlp2 rlp',), (""  Filter: (a = '1'::bigint)"",)]"
postgresql,postgresql,/* same as above */ explain (costs off) select * from rlp where a = 1::numeric,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp2 rlp_2',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp3abcd rlp_3',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp3efgh rlp_4',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp3nullxy rlp_5',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp3_default rlp_6',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp4_1 rlp_7',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp4_2 rlp_8',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp4_default rlp_9',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp5_1 rlp_10',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp5_default rlp_11',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp_default_10 rlp_12',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp_default_30 rlp_13',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp_default_null rlp_14',), (""        Filter: ((a)::numeric = '1'::numeric)"",), ('  ->  Seq Scan on rlp_default_default rlp_15',), (""        Filter: ((a)::numeric = '1'::numeric)"",)]"
postgresql,postgresql,/* no pruning */ explain (costs off) select * from rlp where a <= 10,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a <= 10)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a <= 10)',), ('  ->  Seq Scan on rlp_default_10 rlp_3',), ('        Filter: (a <= 10)',), ('  ->  Seq Scan on rlp_default_default rlp_4',), ('        Filter: (a <= 10)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a > 10,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp3efgh rlp_2',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp3nullxy rlp_3',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp3_default rlp_4',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp4_1 rlp_5',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp4_2 rlp_6',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp4_default rlp_7',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp5_1 rlp_8',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp5_default rlp_9',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp_default_30 rlp_10',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on rlp_default_default rlp_11',), ('        Filter: (a > 10)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a < 15,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a < 15)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a < 15)',), ('  ->  Seq Scan on rlp_default_10 rlp_3',), ('        Filter: (a < 15)',), ('  ->  Seq Scan on rlp_default_default rlp_4',), ('        Filter: (a < 15)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a <= 15,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp3abcd rlp_3',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp3efgh rlp_4',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp3nullxy rlp_5',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp3_default rlp_6',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp_default_10 rlp_7',), ('        Filter: (a <= 15)',), ('  ->  Seq Scan on rlp_default_default rlp_8',), ('        Filter: (a <= 15)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a > 15 and b = 'ab',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), (""        Filter: ((a > 15) AND ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp4_1 rlp_2',), (""        Filter: ((a > 15) AND ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp4_2 rlp_3',), (""        Filter: ((a > 15) AND ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp4_default rlp_4',), (""        Filter: ((a > 15) AND ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp5_1 rlp_5',), (""        Filter: ((a > 15) AND ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp5_default rlp_6',), (""        Filter: ((a > 15) AND ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp_default_30 rlp_7',), (""        Filter: ((a > 15) AND ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp_default_default rlp_8',), (""        Filter: ((a > 15) AND ((b)::text = 'ab'::text))"",)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 16,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ('        Filter: (a = 16)',), ('  ->  Seq Scan on rlp3efgh rlp_2',), ('        Filter: (a = 16)',), ('  ->  Seq Scan on rlp3nullxy rlp_3',), ('        Filter: (a = 16)',), ('  ->  Seq Scan on rlp3_default rlp_4',), ('        Filter: (a = 16)',)]"
postgresql,postgresql,"explain (costs off) select * from rlp where a = 16 and b in ('not', 'in', 'here')",partition_prune.sql,SAME,,"[('Seq Scan on rlp3_default rlp',), (""  Filter: ((a = 16) AND ((b)::text = ANY ('{not,in,here}'::text[])))"",)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 16 and b < 'ab',partition_prune.sql,SAME,,"[('Seq Scan on rlp3_default rlp',), (""  Filter: (((b)::text < 'ab'::text) AND (a = 16))"",)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 16 and b <= 'ab',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), (""        Filter: (((b)::text <= 'ab'::text) AND (a = 16))"",), ('  ->  Seq Scan on rlp3_default rlp_2',), (""        Filter: (((b)::text <= 'ab'::text) AND (a = 16))"",)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 16 and b is null,partition_prune.sql,SAME,,"[('Seq Scan on rlp3nullxy rlp',), ('  Filter: ((b IS NULL) AND (a = 16))',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 16 and b is not null,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ('        Filter: ((b IS NOT NULL) AND (a = 16))',), ('  ->  Seq Scan on rlp3efgh rlp_2',), ('        Filter: ((b IS NOT NULL) AND (a = 16))',), ('  ->  Seq Scan on rlp3nullxy rlp_3',), ('        Filter: ((b IS NOT NULL) AND (a = 16))',), ('  ->  Seq Scan on rlp3_default rlp_4',), ('        Filter: ((b IS NOT NULL) AND (a = 16))',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a is null,partition_prune.sql,SAME,,"[('Seq Scan on rlp_default_null rlp',), ('  Filter: (a IS NULL)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a is not null,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp3abcd rlp_3',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp3efgh rlp_4',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp3nullxy rlp_5',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp3_default rlp_6',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp4_1 rlp_7',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp4_2 rlp_8',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp4_default rlp_9',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp5_1 rlp_10',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp5_default rlp_11',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp_default_10 rlp_12',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp_default_30 rlp_13',), ('        Filter: (a IS NOT NULL)',), ('  ->  Seq Scan on rlp_default_default rlp_14',), ('        Filter: (a IS NOT NULL)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a > 30,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp5_1 rlp_1',), ('        Filter: (a > 30)',), ('  ->  Seq Scan on rlp5_default rlp_2',), ('        Filter: (a > 30)',), ('  ->  Seq Scan on rlp_default_default rlp_3',), ('        Filter: (a > 30)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 30,partition_prune.sql,SAME,,"[('Seq Scan on rlp_default_30 rlp',), ('  Filter: (a = 30)',)]"
postgresql,postgresql,/* only default is scanned */ explain (costs off) select * from rlp where a <= 31,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp2 rlp_2',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp3abcd rlp_3',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp3efgh rlp_4',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp3nullxy rlp_5',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp3_default rlp_6',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp4_1 rlp_7',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp4_2 rlp_8',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp4_default rlp_9',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp5_1 rlp_10',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp_default_10 rlp_11',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp_default_30 rlp_12',), ('        Filter: (a <= 31)',), ('  ->  Seq Scan on rlp_default_default rlp_13',), ('        Filter: (a <= 31)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 1 or a = 7,partition_prune.sql,SAME,,"[('Seq Scan on rlp2 rlp',), ('  Filter: ((a = 1) OR (a = 7))',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 1 or b = 'ab',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp2 rlp_2',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp3abcd rlp_3',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp4_1 rlp_4',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp4_2 rlp_5',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp4_default rlp_6',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp5_1 rlp_7',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp5_default rlp_8',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp_default_10 rlp_9',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp_default_30 rlp_10',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp_default_null rlp_11',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",), ('  ->  Seq Scan on rlp_default_default rlp_12',), (""        Filter: ((a = 1) OR ((b)::text = 'ab'::text))"",)]"
postgresql,postgresql,explain (costs off) select * from rlp where a > 20 and a < 27,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp4_1 rlp_1',), ('        Filter: ((a > 20) AND (a < 27))',), ('  ->  Seq Scan on rlp4_2 rlp_2',), ('        Filter: ((a > 20) AND (a < 27))',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 29,partition_prune.sql,SAME,,"[('Seq Scan on rlp4_default rlp',), ('  Filter: (a = 29)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a >= 29,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp4_default rlp_1',), ('        Filter: (a >= 29)',), ('  ->  Seq Scan on rlp5_1 rlp_2',), ('        Filter: (a >= 29)',), ('  ->  Seq Scan on rlp5_default rlp_3',), ('        Filter: (a >= 29)',), ('  ->  Seq Scan on rlp_default_30 rlp_4',), ('        Filter: (a >= 29)',), ('  ->  Seq Scan on rlp_default_default rlp_5',), ('        Filter: (a >= 29)',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a < 1 or (a > 20 and a < 25),partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp1 rlp_1',), ('        Filter: ((a < 1) OR ((a > 20) AND (a < 25)))',), ('  ->  Seq Scan on rlp4_1 rlp_2',), ('        Filter: ((a < 1) OR ((a > 20) AND (a < 25)))',)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 20 or a = 40,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp4_1 rlp_1',), ('        Filter: ((a = 20) OR (a = 40))',), ('  ->  Seq Scan on rlp5_default rlp_2',), ('        Filter: ((a = 20) OR (a = 40))',)]"
postgresql,postgresql,explain (costs off) select * from rlp3 where a = 20,partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,/* empty */  explain (costs off) select * from rlp where a > 1 and a = 10,partition_prune.sql,SAME,,"[('Seq Scan on rlp_default_10 rlp',), ('  Filter: ((a > 1) AND (a = 10))',)]"
postgresql,postgresql,/* only default */ explain (costs off) select * from rlp where a > 1 and a >=15,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp3abcd rlp_1',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp3efgh rlp_2',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp3nullxy rlp_3',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp3_default rlp_4',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp4_1 rlp_5',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp4_2 rlp_6',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp4_default rlp_7',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp5_1 rlp_8',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp5_default rlp_9',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp_default_30 rlp_10',), ('        Filter: ((a > 1) AND (a >= 15))',), ('  ->  Seq Scan on rlp_default_default rlp_11',), ('        Filter: ((a > 1) AND (a >= 15))',)]"
postgresql,postgresql,"/* rlp3 onwards, including default */ explain (costs off) select * from rlp where a = 1 and a = 3",partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,/* empty */ explain (costs off) select * from rlp where (a = 1 and a = 3) or (a > 1 and a = 15),partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp2 rlp_1',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',), ('  ->  Seq Scan on rlp3abcd rlp_2',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',), ('  ->  Seq Scan on rlp3efgh rlp_3',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',), ('  ->  Seq Scan on rlp3nullxy rlp_4',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',), ('  ->  Seq Scan on rlp3_default rlp_5',), ('        Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a = 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on mc3p_default mc3p_3',), ('        Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a = 1 and abs(b) < 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((a = 1) AND (abs(b) < 1))',), ('  ->  Seq Scan on mc3p_default mc3p_2',), ('        Filter: ((a = 1) AND (abs(b) < 1))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a = 1 and abs(b) = 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((a = 1) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: ((a = 1) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p_default mc3p_3',), ('        Filter: ((a = 1) AND (abs(b) = 1))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a = 1 and abs(b) = 1 and c < 8,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((c < 8) AND (a = 1) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: ((c < 8) AND (a = 1) AND (abs(b) = 1))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a = 10 and abs(b) between 5 and 35,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p1 mc3p_1',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',), ('  ->  Seq Scan on mc3p2 mc3p_2',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',), ('  ->  Seq Scan on mc3p3 mc3p_3',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',), ('  ->  Seq Scan on mc3p4 mc3p_4',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',), ('  ->  Seq Scan on mc3p_default mc3p_5',), ('        Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a > 10,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p5 mc3p_1',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on mc3p6 mc3p_2',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on mc3p7 mc3p_3',), ('        Filter: (a > 10)',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: (a > 10)',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a >= 10,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p1 mc3p_1',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p2 mc3p_2',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p3 mc3p_3',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p4 mc3p_4',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p5 mc3p_5',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p6 mc3p_6',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p7 mc3p_7',), ('        Filter: (a >= 10)',), ('  ->  Seq Scan on mc3p_default mc3p_8',), ('        Filter: (a >= 10)',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a < 10,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (a < 10)',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (a < 10)',), ('  ->  Seq Scan on mc3p_default mc3p_3',), ('        Filter: (a < 10)',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a <= 10 and abs(b) < 10,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((a <= 10) AND (abs(b) < 10))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: ((a <= 10) AND (abs(b) < 10))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: ((a <= 10) AND (abs(b) < 10))',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: ((a <= 10) AND (abs(b) < 10))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a = 11 and abs(b) = 0,partition_prune.sql,SAME,,"[('Seq Scan on mc3p_default mc3p',), ('  Filter: ((a = 11) AND (abs(b) = 0))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a = 20 and abs(b) = 10 and c = 100,partition_prune.sql,SAME,,"[('Seq Scan on mc3p6 mc3p',), ('  Filter: ((a = 20) AND (c = 100) AND (abs(b) = 10))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a > 20,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p7 mc3p_1',), ('        Filter: (a > 20)',), ('  ->  Seq Scan on mc3p_default mc3p_2',), ('        Filter: (a > 20)',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a >= 20,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p5 mc3p_1',), ('        Filter: (a >= 20)',), ('  ->  Seq Scan on mc3p6 mc3p_2',), ('        Filter: (a >= 20)',), ('  ->  Seq Scan on mc3p7 mc3p_3',), ('        Filter: (a >= 20)',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: (a >= 20)',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20),partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p1 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))',), ('  ->  Seq Scan on mc3p2 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))',), ('  ->  Seq Scan on mc3p5 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20) or a < 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',), ('  ->  Seq Scan on mc3p5 mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',), ('  ->  Seq Scan on mc3p_default mc3p_5',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20) or a < 1 or a = 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',), ('  ->  Seq Scan on mc3p5 mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',), ('  ->  Seq Scan on mc3p_default mc3p_5',), ('        Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where a = 1 or abs(b) = 1 or c = 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p3 mc3p_4',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p4 mc3p_5',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p5 mc3p_6',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p6 mc3p_7',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p7 mc3p_8',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',), ('  ->  Seq Scan on mc3p_default mc3p_9',), ('        Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1) or (a = 10 and abs(b) = 10),partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p3 mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p4 mc3p_5',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',), ('  ->  Seq Scan on mc3p_default mc3p_6',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))',)]"
postgresql,postgresql,explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1) or (a = 10 and abs(b) = 9),partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc3p0 mc3p_1',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))',), ('  ->  Seq Scan on mc3p1 mc3p_2',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))',), ('  ->  Seq Scan on mc3p2 mc3p_3',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))',), ('  ->  Seq Scan on mc3p_default mc3p_4',), ('        Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))',)]"
postgresql,postgresql,explain (costs off) select * from mc2p where a < 2,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc2p0 mc2p_1',), ('        Filter: (a < 2)',), ('  ->  Seq Scan on mc2p1 mc2p_2',), ('        Filter: (a < 2)',), ('  ->  Seq Scan on mc2p2 mc2p_3',), ('        Filter: (a < 2)',), ('  ->  Seq Scan on mc2p_default mc2p_4',), ('        Filter: (a < 2)',)]"
postgresql,postgresql,explain (costs off) select * from mc2p where a = 2 and b < 1,partition_prune.sql,SAME,,"[('Seq Scan on mc2p3 mc2p',), ('  Filter: ((b < 1) AND (a = 2))',)]"
postgresql,postgresql,explain (costs off) select * from mc2p where a > 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on mc2p2 mc2p_1',), ('        Filter: (a > 1)',), ('  ->  Seq Scan on mc2p3 mc2p_2',), ('        Filter: (a > 1)',), ('  ->  Seq Scan on mc2p4 mc2p_3',), ('        Filter: (a > 1)',), ('  ->  Seq Scan on mc2p5 mc2p_4',), ('        Filter: (a > 1)',), ('  ->  Seq Scan on mc2p_default mc2p_5',), ('        Filter: (a > 1)',)]"
postgresql,postgresql,explain (costs off) select * from mc2p where a = 1 and b > 1,partition_prune.sql,SAME,,"[('Seq Scan on mc2p2 mc2p',), ('  Filter: ((b > 1) AND (a = 1))',)]"
postgresql,postgresql,explain (costs off) select * from mc2p where a = 1 and b is null,partition_prune.sql,SAME,,"[('Seq Scan on mc2p_default mc2p',), ('  Filter: ((b IS NULL) AND (a = 1))',)]"
postgresql,postgresql,explain (costs off) select * from mc2p where a is null and b is null,partition_prune.sql,SAME,,"[('Seq Scan on mc2p_default mc2p',), ('  Filter: ((a IS NULL) AND (b IS NULL))',)]"
postgresql,postgresql,explain (costs off) select * from mc2p where a is null and b = 1,partition_prune.sql,SAME,,"[('Seq Scan on mc2p_default mc2p',), ('  Filter: ((a IS NULL) AND (b = 1))',)]"
postgresql,postgresql,explain (costs off) select * from mc2p where a is null,partition_prune.sql,SAME,,"[('Seq Scan on mc2p_default mc2p',), ('  Filter: (a IS NULL)',)]"
postgresql,postgresql,explain (costs off) select * from mc2p where b is null,partition_prune.sql,SAME,,"[('Seq Scan on mc2p_default mc2p',), ('  Filter: (b IS NULL)',)]"
postgresql,postgresql,"explain (costs off) select * from boolpart where a in (true, false)",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), (""        Filter: (a = ANY ('{t,f}'::boolean[]))"",), ('  ->  Seq Scan on boolpart_t boolpart_2',), (""        Filter: (a = ANY ('{t,f}'::boolean[]))"",)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a = false,partition_prune.sql,SAME,,"[('Seq Scan on boolpart_f boolpart',), ('  Filter: (NOT a)',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where not a = false,partition_prune.sql,SAME,,"[('Seq Scan on boolpart_t boolpart',), ('  Filter: a',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is true or a is not true,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',), ('  ->  Seq Scan on boolpart_default boolpart_3',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is not true,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS NOT TRUE)',), ('  ->  Seq Scan on boolpart_default boolpart_2',), ('        Filter: (a IS NOT TRUE)',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is not true and a is not false,partition_prune.sql,SAME,,"[('Seq Scan on boolpart_default boolpart',), ('  Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is unknown,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS UNKNOWN)',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: (a IS UNKNOWN)',), ('  ->  Seq Scan on boolpart_default boolpart_3',), ('        Filter: (a IS UNKNOWN)',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is not unknown,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_default boolpart_3',), ('        Filter: (a IS NOT UNKNOWN)',)]"
postgresql,postgresql,"select * from boolpart where a in (true, false)",partition_prune.sql,SAME,,"[(False,), (True,)]"
postgresql,postgresql,select * from boolpart where a = false,partition_prune.sql,SAME,,"[(False,)]"
postgresql,postgresql,select * from boolpart where not a = false,partition_prune.sql,SAME,,"[(True,)]"
postgresql,postgresql,select * from boolpart where a is true or a is not true,partition_prune.sql,SAME,,"[(False,), (True,), (None,)]"
postgresql,postgresql,select * from boolpart where a is not true,partition_prune.sql,SAME,,"[(False,), (None,)]"
postgresql,postgresql,select * from boolpart where a is not true and a is not false,partition_prune.sql,SAME,,"[(None,)]"
postgresql,postgresql,select * from boolpart where a is unknown,partition_prune.sql,SAME,,"[(None,)]"
postgresql,postgresql,select * from boolpart where a is not unknown,partition_prune.sql,SAME,,"[(False,), (True,)]"
postgresql,postgresql,delete from boolpart where a is null,partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from boolpart where a is not true,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS NOT TRUE)',), ('  ->  Seq Scan on boolpart_null boolpart_2',), ('        Filter: (a IS NOT TRUE)',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is not true and a is not false,partition_prune.sql,SAME,,"[('Seq Scan on boolpart_null boolpart',), ('  Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is not false,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolpart_t boolpart_1',), ('        Filter: (a IS NOT FALSE)',), ('  ->  Seq Scan on boolpart_null boolpart_2',), ('        Filter: (a IS NOT FALSE)',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is not unknown,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_null boolpart_3',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on boolpart_default boolpart_4',), ('        Filter: (a IS NOT UNKNOWN)',)]"
postgresql,postgresql,select * from boolpart where a is not true,partition_prune.sql,SAME,,"[(False,), (None,)]"
postgresql,postgresql,select * from boolpart where a is not true and a is not false,partition_prune.sql,SAME,,"[(None,)]"
postgresql,postgresql,select * from boolpart where a is not false,partition_prune.sql,SAME,,"[(True,), (None,)]"
postgresql,postgresql,select * from boolpart where a is not unknown,partition_prune.sql,SAME,,"[(False,), (True,)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is not unknown and a is unknown,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolpart_f boolpart_1',), ('        Filter: ((a IS NOT UNKNOWN) AND (a IS UNKNOWN))',), ('  ->  Seq Scan on boolpart_t boolpart_2',), ('        Filter: ((a IS NOT UNKNOWN) AND (a IS UNKNOWN))',), ('  ->  Seq Scan on boolpart_null boolpart_3',), ('        Filter: ((a IS NOT UNKNOWN) AND (a IS UNKNOWN))',), ('  ->  Seq Scan on boolpart_default boolpart_4',), ('        Filter: ((a IS NOT UNKNOWN) AND (a IS UNKNOWN))',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is false and a is unknown,partition_prune.sql,SAME,,"[('Seq Scan on boolpart_f boolpart',), ('  Filter: ((a IS FALSE) AND (a IS UNKNOWN))',)]"
postgresql,postgresql,explain (costs off) select * from boolpart where a is true and a is unknown,partition_prune.sql,SAME,,"[('Seq Scan on boolpart_t boolpart',), ('  Filter: ((a IS TRUE) AND (a IS UNKNOWN))',)]"
postgresql,postgresql,"explain (costs off) select * from iboolpart where a in (true, false)",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), (""        Filter: (a = ANY ('{t,f}'::boolean[]))"",), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), (""        Filter: (a = ANY ('{t,f}'::boolean[]))"",), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), (""        Filter: (a = ANY ('{t,f}'::boolean[]))"",)]"
postgresql,postgresql,explain (costs off) select * from iboolpart where a = false,partition_prune.sql,SAME,,"[('Seq Scan on iboolpart_f iboolpart',), ('  Filter: (NOT a)',)]"
postgresql,postgresql,explain (costs off) select * from iboolpart where not a = false,partition_prune.sql,SAME,,"[('Seq Scan on iboolpart_t iboolpart',), ('  Filter: a',)]"
postgresql,postgresql,explain (costs off) select * from iboolpart where a is true or a is not true,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: ((a IS TRUE) OR (a IS NOT TRUE))',)]"
postgresql,postgresql,explain (costs off) select * from iboolpart where a is not true,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: (a IS NOT TRUE)',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: (a IS NOT TRUE)',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: (a IS NOT TRUE)',)]"
postgresql,postgresql,explain (costs off) select * from iboolpart where a is not true and a is not false,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: ((a IS NOT TRUE) AND (a IS NOT FALSE))',)]"
postgresql,postgresql,explain (costs off) select * from iboolpart where a is unknown,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: (a IS UNKNOWN)',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: (a IS UNKNOWN)',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: (a IS UNKNOWN)',)]"
postgresql,postgresql,explain (costs off) select * from iboolpart where a is not unknown,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on iboolpart_t iboolpart_1',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on iboolpart_f iboolpart_2',), ('        Filter: (a IS NOT UNKNOWN)',), ('  ->  Seq Scan on iboolpart_default iboolpart_3',), ('        Filter: (a IS NOT UNKNOWN)',)]"
postgresql,postgresql,"select * from iboolpart where a in (true, false)",partition_prune.sql,SAME,,"[(True,), (False,)]"
postgresql,postgresql,select * from iboolpart where a = false,partition_prune.sql,SAME,,"[(False,)]"
postgresql,postgresql,select * from iboolpart where not a = false,partition_prune.sql,SAME,,"[(True,)]"
postgresql,postgresql,select * from iboolpart where a is true or a is not true,partition_prune.sql,SAME,,"[(True,), (False,), (None,)]"
postgresql,postgresql,select * from iboolpart where a is not true,partition_prune.sql,SAME,,"[(False,), (None,)]"
postgresql,postgresql,select * from iboolpart where a is not true and a is not false,partition_prune.sql,SAME,,"[(None,)]"
postgresql,postgresql,select * from iboolpart where a is unknown,partition_prune.sql,SAME,,"[(None,)]"
postgresql,postgresql,select * from iboolpart where a is not unknown,partition_prune.sql,SAME,,"[(True,), (False,)]"
postgresql,postgresql,delete from iboolpart where a is null,partition_prune.sql,SAME,,[]
postgresql,postgresql,select * from iboolpart where a is not true,partition_prune.sql,SAME,,"[(False,), (None,)]"
postgresql,postgresql,select * from iboolpart where a is not true and a is not false,partition_prune.sql,SAME,,"[(None,)]"
postgresql,postgresql,select * from iboolpart where a is not false,partition_prune.sql,SAME,,"[(True,), (None,)]"
postgresql,postgresql,explain (costs off)  select * from boolrangep where not a and not b and c = 25,partition_prune.sql,SAME,,"[('Seq Scan on boolrangep_ff1 boolrangep',), ('  Filter: ((NOT a) AND (NOT b) AND (c = 25))',)]"
postgresql,postgresql,explain (costs off)  select * from boolrangep where a is not true and not b and c = 25,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolrangep_ff1 boolrangep_1',), ('        Filter: ((a IS NOT TRUE) AND (NOT b) AND (c = 25))',), ('  ->  Seq Scan on boolrangep_ff2 boolrangep_2',), ('        Filter: ((a IS NOT TRUE) AND (NOT b) AND (c = 25))',), ('  ->  Seq Scan on boolrangep_ft boolrangep_3',), ('        Filter: ((a IS NOT TRUE) AND (NOT b) AND (c = 25))',), ('  ->  Seq Scan on boolrangep_null boolrangep_4',), ('        Filter: ((a IS NOT TRUE) AND (NOT b) AND (c = 25))',)]"
postgresql,postgresql,explain (costs off)  select * from boolrangep where a is not false and not b and c = 25,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on boolrangep_tf boolrangep_1',), ('        Filter: ((a IS NOT FALSE) AND (NOT b) AND (c = 25))',), ('  ->  Seq Scan on boolrangep_null boolrangep_2',), ('        Filter: ((a IS NOT FALSE) AND (NOT b) AND (c = 25))',)]"
postgresql,postgresql,"explain (costs off) select * from coercepart where a in ('ab', to_char(125, '999'))",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), (""        Filter: ((a)::text = ANY ((ARRAY['ab'::character varying, (to_char(125, '999'::text))::character varying])::text[]))"",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), (""        Filter: ((a)::text = ANY ((ARRAY['ab'::character varying, (to_char(125, '999'::text))::character varying])::text[]))"",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), (""        Filter: ((a)::text = ANY ((ARRAY['ab'::character varying, (to_char(125, '999'::text))::character varying])::text[]))"",)]"
postgresql,postgresql,explain (costs off) select * from coercepart where a ~ any ('{ab}'),partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), (""        Filter: ((a)::text ~ ANY ('{ab}'::text[]))"",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), (""        Filter: ((a)::text ~ ANY ('{ab}'::text[]))"",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), (""        Filter: ((a)::text ~ ANY ('{ab}'::text[]))"",)]"
postgresql,postgresql,explain (costs off) select * from coercepart where a !~ all ('{ab}'),partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), (""        Filter: ((a)::text !~ ALL ('{ab}'::text[]))"",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), (""        Filter: ((a)::text !~ ALL ('{ab}'::text[]))"",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), (""        Filter: ((a)::text !~ ALL ('{ab}'::text[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from coercepart where a ~ any ('{ab,bc}')",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), (""        Filter: ((a)::text ~ ANY ('{ab,bc}'::text[]))"",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), (""        Filter: ((a)::text ~ ANY ('{ab,bc}'::text[]))"",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), (""        Filter: ((a)::text ~ ANY ('{ab,bc}'::text[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from coercepart where a !~ all ('{ab,bc}')",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), (""        Filter: ((a)::text !~ ALL ('{ab,bc}'::text[]))"",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), (""        Filter: ((a)::text !~ ALL ('{ab,bc}'::text[]))"",), ('  ->  Seq Scan on coercepart_cd coercepart_3',), (""        Filter: ((a)::text !~ ALL ('{ab,bc}'::text[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from coercepart where a = any ('{ab,bc}')",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on coercepart_ab coercepart_1',), (""        Filter: ((a)::text = ANY ('{ab,bc}'::text[]))"",), ('  ->  Seq Scan on coercepart_bc coercepart_2',), (""        Filter: ((a)::text = ANY ('{ab,bc}'::text[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from coercepart where a = any ('{ab,null}')",partition_prune.sql,SAME,,"[('Seq Scan on coercepart_ab coercepart',), (""  Filter: ((a)::text = ANY ('{ab,NULL}'::text[]))"",)]"
postgresql,postgresql,explain (costs off) select * from coercepart where a = any (null::text[]),partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,explain (costs off) select * from coercepart where a = all ('{ab}'),partition_prune.sql,SAME,,"[('Seq Scan on coercepart_ab coercepart',), (""  Filter: ((a)::text = ALL ('{ab}'::text[]))"",)]"
postgresql,postgresql,"explain (costs off) select * from coercepart where a = all ('{ab,bc}')",partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,"explain (costs off) select * from coercepart where a = all ('{ab,null}')",partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,explain (costs off) select * from coercepart where a = all (null::text[]),partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,ALTER TABLE part_rev DROP COLUMN c,partition_prune.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part ATTACH PARTITION part_rev FOR VALUES IN (3),partition_prune.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT tableoid::regclass as part, a, b FROM part WHERE a IS NULL ORDER BY 1, 2, 3",partition_prune.sql,SAME,,"[('Sort',), ('  Sort Key: ((part.tableoid)::regclass), part.a, part.b',), ('  ->  Seq Scan on part_p2_p1 part',), ('        Filter: (a IS NULL)',)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM part p(x) ORDER BY x",partition_prune.sql,SAME,,"[('Sort',), ('  Output: p.x, p.b',), ('  Sort Key: p.x',), ('  ->  Append',), ('        ->  Seq Scan on public.part_p1 p_1',), ('              Output: p_1.x, p_1.b',), ('        ->  Seq Scan on public.part_rev p_2',), ('              Output: p_2.x, p_2.b',), ('        ->  Seq Scan on public.part_p2_p1 p_3',), ('              Output: p_3.x, p_3.b',)]"
postgresql,postgresql,"explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.a = t1.b and abs(t2.b) = 1 and t2.c = 1) s where t1.a = 1",partition_prune.sql,SAME,,"[('Nested Loop',), ('  ->  Append',), ('        ->  Seq Scan on mc2p1 t1_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p2 t1_2',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p_default t1_3',), ('              Filter: (a = 1)',), ('  ->  Aggregate',), ('        ->  Append',), ('              ->  Seq Scan on mc3p0 t2_1',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p1 t2_2',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p2 t2_3',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p3 t2_4',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p4 t2_5',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p5 t2_6',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p6 t2_7',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p7 t2_8',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p_default t2_9',), ('                    Filter: ((a = t1.b) AND (c = 1) AND (abs(b) = 1))',)]"
postgresql,postgresql,"explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.c = t1.b and abs(t2.b) = 1 and t2.a = 1) s where t1.a = 1",partition_prune.sql,SAME,,"[('Nested Loop',), ('  ->  Append',), ('        ->  Seq Scan on mc2p1 t1_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p2 t1_2',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p_default t1_3',), ('              Filter: (a = 1)',), ('  ->  Aggregate',), ('        ->  Append',), ('              ->  Seq Scan on mc3p0 t2_1',), ('                    Filter: ((c = t1.b) AND (a = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p1 t2_2',), ('                    Filter: ((c = t1.b) AND (a = 1) AND (abs(b) = 1))',), ('              ->  Seq Scan on mc3p_default t2_3',), ('                    Filter: ((c = t1.b) AND (a = 1) AND (abs(b) = 1))',)]"
postgresql,postgresql,"explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.a = 1 and abs(t2.b) = 1 and t2.c = 1) s where t1.a = 1",partition_prune.sql,SAME,,"[('Nested Loop',), ('  ->  Aggregate',), ('        ->  Seq Scan on mc3p1 t2',), ('              Filter: ((a = 1) AND (c = 1) AND (abs(b) = 1))',), ('  ->  Append',), ('        ->  Seq Scan on mc2p1 t1_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p2 t1_2',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on mc2p_default t1_3',), ('              Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) select * from rp where a <> 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rp0 rp_1',), ('        Filter: (a <> 1)',), ('  ->  Seq Scan on rp1 rp_2',), ('        Filter: (a <> 1)',), ('  ->  Seq Scan on rp2 rp_3',), ('        Filter: (a <> 1)',)]"
postgresql,postgresql,explain (costs off) select * from rp where a <> 1 and a <> 2,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rp0 rp_1',), ('        Filter: ((a <> 1) AND (a <> 2))',), ('  ->  Seq Scan on rp1 rp_2',), ('        Filter: ((a <> 1) AND (a <> 2))',), ('  ->  Seq Scan on rp2 rp_3',), ('        Filter: ((a <> 1) AND (a <> 2))',)]"
postgresql,postgresql,explain (costs off) select * from lp where a <> 'a',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_ad lp_1',), (""        Filter: (a <> 'a'::bpchar)"",), ('  ->  Seq Scan on lp_bc lp_2',), (""        Filter: (a <> 'a'::bpchar)"",), ('  ->  Seq Scan on lp_ef lp_3',), (""        Filter: (a <> 'a'::bpchar)"",), ('  ->  Seq Scan on lp_g lp_4',), (""        Filter: (a <> 'a'::bpchar)"",), ('  ->  Seq Scan on lp_default lp_5',), (""        Filter: (a <> 'a'::bpchar)"",)]"
postgresql,postgresql,explain (costs off) select * from lp where a <> 'a' and a is null,partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,explain (costs off) select * from lp where (a <> 'a' and a <> 'd') or a is null,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on lp_bc lp_1',), (""        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))"",), ('  ->  Seq Scan on lp_ef lp_2',), (""        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))"",), ('  ->  Seq Scan on lp_g lp_3',), (""        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))"",), ('  ->  Seq Scan on lp_null lp_4',), (""        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))"",), ('  ->  Seq Scan on lp_default lp_5',), (""        Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))"",)]"
postgresql,postgresql,explain (costs off) select * from rlp where a = 15 and b <> 'ab' and b <> 'cd' and b <> 'xy' and b is not null,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on rlp3efgh rlp_1',), (""        Filter: ((b IS NOT NULL) AND ((b)::text <> 'ab'::text) AND ((b)::text <> 'cd'::text) AND ((b)::text <> 'xy'::text) AND (a = 15))"",), ('  ->  Seq Scan on rlp3_default rlp_2',), (""        Filter: ((b IS NOT NULL) AND ((b)::text <> 'ab'::text) AND ((b)::text <> 'cd'::text) AND ((b)::text <> 'xy'::text) AND (a = 15))"",)]"
postgresql,postgresql,"explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'e' collate ""C""",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on coll_pruning_multi1 coll_pruning_multi_1',), ('        Filter: (substr(a, 1) = \'e\'::text COLLATE ""C"")',), ('  ->  Seq Scan on coll_pruning_multi2 coll_pruning_multi_2',), ('        Filter: (substr(a, 1) = \'e\'::text COLLATE ""C"")',), ('  ->  Seq Scan on coll_pruning_multi3 coll_pruning_multi_3',), ('        Filter: (substr(a, 1) = \'e\'::text COLLATE ""C"")',)]"
postgresql,postgresql,"explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'a' collate ""POSIX""",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on coll_pruning_multi1 coll_pruning_multi_1',), ('        Filter: (substr(a, 1) = \'a\'::text COLLATE ""POSIX"")',), ('  ->  Seq Scan on coll_pruning_multi2 coll_pruning_multi_2',), ('        Filter: (substr(a, 1) = \'a\'::text COLLATE ""POSIX"")',)]"
postgresql,postgresql,"explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'e' collate ""C"" and substr(a, 1) = 'a' collate ""POSIX""",partition_prune.sql,SAME,,"[('Seq Scan on coll_pruning_multi2 coll_pruning_multi',), ('  Filter: ((substr(a, 1) = \'e\'::text COLLATE ""C"") AND (substr(a, 1) = \'a\'::text COLLATE ""POSIX""))',)]"
postgresql,postgresql,explain (costs off) select * from like_op_noprune where a like '%BC',partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on like_op_noprune1 like_op_noprune_1',), (""        Filter: (a ~~ '%BC'::text)"",), ('  ->  Seq Scan on like_op_noprune2 like_op_noprune_2',), (""        Filter: (a ~~ '%BC'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from lparted_by_int2 where a = 100_000_000_000_000,partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,explain (costs off) select * from rparted_by_int2 where a > 100_000_000_000_000,partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,explain (costs off) select * from rparted_by_int2 where a > 100_000_000_000_000,partition_prune.sql,SAME,,"[('Seq Scan on rparted_by_int2_maxvalue rparted_by_int2',), (""  Filter: (a > '100000000000000'::bigint)"",)]"
postgresql,postgresql,set enable_indexonlyscan = off,partition_prune.sql,SAME,,[]
postgresql,postgresql,"prepare ab_q1 (int, int, int) as select * from ab where a between $1 and $2 and b <= $3",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute ab_q1 (2, 2, 3)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 6',), ('  ->  Seq Scan on ab_a2_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b3 ab_3 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute ab_q1 (1, 2, 3)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 3',), ('  ->  Seq Scan on ab_a1_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a1_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a1_b3 ab_3 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b1 ab_4 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b2 ab_5 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',), ('  ->  Seq Scan on ab_a2_b3 ab_6 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b <= $3))',)]"
postgresql,postgresql,deallocate ab_q1,partition_prune.sql,SAME,,[]
postgresql,postgresql,"prepare ab_q1 (int, int) as select a from ab where a between $1 and $2 and b < 3",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute ab_q1 (2, 2)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 4',), ('  ->  Seq Scan on ab_a2_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute ab_q1 (2, 4)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',), ('  ->  Seq Scan on ab_a2_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',), ('  ->  Seq Scan on ab_a3_b1 ab_3 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',), ('  ->  Seq Scan on ab_a3_b2 ab_4 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < 3))',)]"
postgresql,postgresql,"prepare ab_q2 (int, int) as select a from ab where a between $1 and $2 and b < (select 3)",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute ab_q2 (2, 2)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 6',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on ab_a2_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < $0))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < $0))',), ('  ->  Seq Scan on ab_a2_b3 ab_3 (never executed)',), ('        Filter: ((a >= $1) AND (a <= $2) AND (b < $0))',)]"
postgresql,postgresql,"prepare ab_q3 (int, int) as select a from ab where b between $1 and $2 and a < (select 3)",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute ab_q3 (2, 2)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 6',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on ab_a1_b2 ab_1 (actual rows=0 loops=1)',), ('        Filter: ((b >= $1) AND (b <= $2) AND (a < $0))',), ('  ->  Seq Scan on ab_a2_b2 ab_2 (actual rows=0 loops=1)',), ('        Filter: ((b >= $1) AND (b <= $2) AND (a < $0))',), ('  ->  Seq Scan on ab_a3_b2 ab_3 (never executed)',), ('        Filter: ((b >= $1) AND (b <= $2) AND (a < $0))',)]"
postgresql,postgresql,begin,partition_prune.sql,SAME,,[]
postgresql,postgresql,declare cur SCROLL CURSOR for select 1 from list_part where a > (select 1) and a < (select 4),partition_prune.sql,SAME,,[]
postgresql,postgresql,move 3 from cur,partition_prune.sql,SAME,,[]
postgresql,postgresql,fetch backward all from cur,partition_prune.sql,SAME,,"[(1,), (1,)]"
postgresql,postgresql,commit,partition_prune.sql,SAME,,[]
postgresql,postgresql,begin,partition_prune.sql,SAME,,[]
postgresql,postgresql,end,partition_prune.sql,SAME,,[]
postgresql,postgresql,rollback,partition_prune.sql,SAME,,[]
postgresql,postgresql,"prepare ab_q4 (int, int) as select avg(a) from ab where a between $1 and $2 and b < 4",partition_prune.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost = 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost = 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size = 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather = 2,partition_prune.sql,SAME,,[]
postgresql,postgresql,"prepare ab_q5 (int, int, int) as select avg(a) from ab where a in($1,$2,$3) and b < 4",partition_prune.sql,SAME,,[]
postgresql,postgresql,analyze lprt_a,partition_prune.sql,SAME,,[]
postgresql,postgresql,create index ab_a2_b1_a_idx on ab_a2_b1 (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index ab_a2_b2_a_idx on ab_a2_b2 (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index ab_a2_b3_a_idx on ab_a2_b3 (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index ab_a1_b1_a_idx on ab_a1_b1 (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index ab_a1_b2_a_idx on ab_a1_b2 (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index ab_a1_b3_a_idx on ab_a1_b3 (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index ab_a3_b1_a_idx on ab_a3_b1 (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index ab_a3_b2_a_idx on ab_a3_b2 (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index ab_a3_b3_a_idx on ab_a3_b3 (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin = 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,set enable_memoize = 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,"select c.relname,c.relpages,c.reltuples,i.indisvalid,s.autovacuum_count,s.autoanalyze_count from pg_class c left join pg_stat_all_tables s on c.oid = s.relid left join pg_index i on c.oid = i.indexrelid where c.relname like 'ab\_%' order by c.relname",partition_prune.sql,SAME,,"[('ab_a1', 0, -1.0, None, 0, 0), ('ab_a1_b1', 0, -1.0, None, 0, 0), ('ab_a1_b1_a_idx', 1, 0.0, True, None, None), ('ab_a1_b2', 0, -1.0, None, 0, 0), ('ab_a1_b2_a_idx', 1, 0.0, True, None, None), ('ab_a1_b3', 0, -1.0, None, 0, 0), ('ab_a1_b3_a_idx', 1, 0.0, True, None, None), ('ab_a2', 0, -1.0, None, 0, 0), ('ab_a2_b1', 0, -1.0, None, 0, 0), ('ab_a2_b1_a_idx', 1, 0.0, True, None, None), ('ab_a2_b2', 0, -1.0, None, 0, 0), ('ab_a2_b2_a_idx', 1, 0.0, True, None, None), ('ab_a2_b3', 0, -1.0, None, 0, 0), ('ab_a2_b3_a_idx', 1, 0.0, True, None, None), ('ab_a3', 0, -1.0, None, 0, 0), ('ab_a3_b1', 0, -1.0, None, 0, 0), ('ab_a3_b1_a_idx', 1, 0.0, True, None, None), ('ab_a3_b2', 0, -1.0, None, 0, 0), ('ab_a3_b2_a_idx', 1, 0.0, True, None, None), ('ab_a3_b3', 0, -1.0, None, 0, 0), ('ab_a3_b3_a_idx', 1, 0.0, True, None, None)]"
postgresql,postgresql,delete from lprt_a where a = 1,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset enable_hashjoin,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset enable_mergejoin,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset enable_memoize,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset parallel_setup_cost,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset parallel_tuple_cost,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset min_parallel_table_scan_size,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset max_parallel_workers_per_gather,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from ab where a = (select max(a) from lprt_a) and b = (select max(a)-1 from lprt_a)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Aggregate (actual rows=1 loops=1)',), ('          ->  Seq Scan on lprt_a (actual rows=102 loops=1)',), ('  InitPlan 2 (returns $1)',), ('    ->  Aggregate (actual rows=1 loops=1)',), ('          ->  Seq Scan on lprt_a lprt_a_1 (actual rows=102 loops=1)',), ('  ->  Bitmap Heap Scan on ab_a1_b1 ab_1 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a1_b1_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a1_b2 ab_2 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a1_b2_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a1_b3 ab_3 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a1_b3_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a2_b1 ab_4 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a2_b1_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a2_b2 ab_5 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a2_b2_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a2_b3 ab_6 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a2_b3_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a3_b1 ab_7 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a3_b1_a_idx (never executed)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a3_b2 ab_8 (actual rows=0 loops=1)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a3_b2_a_idx (actual rows=0 loops=1)',), ('              Index Cond: (a = $0)',), ('  ->  Bitmap Heap Scan on ab_a3_b3 ab_9 (never executed)',), ('        Recheck Cond: (a = $0)',), ('        Filter: (b = $1)',), ('        ->  Bitmap Index Scan on ab_a3_b3_a_idx (never executed)',), ('              Index Cond: (a = $0)',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from (select * from ab where a = 1 union all select * from ab) ab where b = (select 1)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Append (actual rows=0 loops=1)',), ('        ->  Bitmap Heap Scan on ab_a1_b1 ab_11 (actual rows=0 loops=1)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b1_a_idx (actual rows=0 loops=1)',), ('                    Index Cond: (a = 1)',), ('        ->  Bitmap Heap Scan on ab_a1_b2 ab_12 (never executed)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b2_a_idx (never executed)',), ('                    Index Cond: (a = 1)',), ('        ->  Bitmap Heap Scan on ab_a1_b3 ab_13 (never executed)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b3_a_idx (never executed)',), ('                    Index Cond: (a = 1)',), ('  ->  Seq Scan on ab_a1_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a1_b2 ab_2 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a1_b3 ab_3 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b1 ab_4 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b2 ab_5 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b3 ab_6 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b1 ab_7 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b2 ab_8 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b3 ab_9 (never executed)',), ('        Filter: (b = $0)',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from (select * from ab where a = 1 union all (values(10,5)) union all select * from ab) ab where b = (select 1)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Append (actual rows=0 loops=1)',), ('        ->  Bitmap Heap Scan on ab_a1_b1 ab_11 (actual rows=0 loops=1)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b1_a_idx (actual rows=0 loops=1)',), ('                    Index Cond: (a = 1)',), ('        ->  Bitmap Heap Scan on ab_a1_b2 ab_12 (never executed)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b2_a_idx (never executed)',), ('                    Index Cond: (a = 1)',), ('        ->  Bitmap Heap Scan on ab_a1_b3 ab_13 (never executed)',), ('              Recheck Cond: (a = 1)',), ('              Filter: (b = $0)',), ('              ->  Bitmap Index Scan on ab_a1_b3_a_idx (never executed)',), ('                    Index Cond: (a = 1)',), ('  ->  Result (actual rows=0 loops=1)',), ('        One-Time Filter: (5 = $0)',), ('  ->  Seq Scan on ab_a1_b1 ab_1 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a1_b2 ab_2 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a1_b3 ab_3 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b1 ab_4 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b2 ab_5 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a2_b3 ab_6 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b1 ab_7 (actual rows=0 loops=1)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b2 ab_8 (never executed)',), ('        Filter: (b = $0)',), ('  ->  Seq Scan on ab_a3_b3 ab_9 (never executed)',), ('        Filter: (b = $0)',)]"
postgresql,postgresql,set enable_bitmapscan = 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,set enable_indexscan = 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,"prepare ab_q6 as select * from ( 	select tableoid::regclass,a,b from ab union all 	select tableoid::regclass,x,y from xy_1 union all 	select tableoid::regclass,a,b from ab ) ab where a = $1 and b = (select -10)",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute ab_q6(1)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 12',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on ab_a1_b1 ab_1 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on ab_a1_b2 ab_2 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on ab_a1_b3 ab_3 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on xy_1 (actual rows=0 loops=1)',), ('        Filter: ((x = $1) AND (y = $0))',), ('        Rows Removed by Filter: 1',), ('  ->  Seq Scan on ab_a1_b1 ab_4 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on ab_a1_b2 ab_5 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',), ('  ->  Seq Scan on ab_a1_b3 ab_6 (never executed)',), ('        Filter: ((a = $1) AND (b = $0))',)]"
postgresql,postgresql,execute ab_q6(100),partition_prune.sql,SAME,,"[('xy_1', 100, -10)]"
postgresql,postgresql,reset enable_bitmapscan,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset enable_indexscan,partition_prune.sql,SAME,,[]
postgresql,postgresql,deallocate ab_q1,partition_prune.sql,SAME,,[]
postgresql,postgresql,deallocate ab_q2,partition_prune.sql,SAME,,[]
postgresql,postgresql,deallocate ab_q3,partition_prune.sql,SAME,,[]
postgresql,postgresql,deallocate ab_q4,partition_prune.sql,SAME,,[]
postgresql,postgresql,deallocate ab_q5,partition_prune.sql,SAME,,[]
postgresql,postgresql,deallocate ab_q6,partition_prune.sql,SAME,,[]
postgresql,postgresql,"select c.relname,c.relpages,c.reltuples,i.indisvalid,s.autovacuum_count,s.autoanalyze_count from pg_class c left join pg_stat_all_tables s on c.oid = s.relid left join pg_index i on c.oid = i.indexrelid where c.relname like 'ab\_%' order by c.relname",partition_prune.sql,SAME,,"[('ab_a1', 0, -1.0, None, 0, 0), ('ab_a1_b1', 0, -1.0, None, 0, 0), ('ab_a1_b1_a_idx', 1, 0.0, True, None, None), ('ab_a1_b2', 0, -1.0, None, 0, 0), ('ab_a1_b2_a_idx', 1, 0.0, True, None, None), ('ab_a1_b3', 0, -1.0, None, 0, 0), ('ab_a1_b3_a_idx', 1, 0.0, True, None, None), ('ab_a2', 0, -1.0, None, 0, 0), ('ab_a2_b1', 0, -1.0, None, 0, 0), ('ab_a2_b1_a_idx', 1, 0.0, True, None, None), ('ab_a2_b2', 0, -1.0, None, 0, 0), ('ab_a2_b2_a_idx', 1, 0.0, True, None, None), ('ab_a2_b3', 0, -1.0, None, 0, 0), ('ab_a2_b3_a_idx', 1, 0.0, True, None, None), ('ab_a3', 0, -1.0, None, 0, 0), ('ab_a3_b1', 0, -1.0, None, 0, 0), ('ab_a3_b1_a_idx', 1, 0.0, True, None, None), ('ab_a3_b2', 0, -1.0, None, 0, 0), ('ab_a3_b2_a_idx', 1, 0.0, True, None, None), ('ab_a3_b3', 0, -1.0, None, 0, 0), ('ab_a3_b3_a_idx', 1, 0.0, True, None, None)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) update ab_a1 set b = 3 from ab where ab.a = 1 and ab.a = ab_a1.a",partition_prune.sql,SAME,,"[('Update on ab_a1 (actual rows=0 loops=1)',), ('  Update on ab_a1_b1 ab_a1_1',), ('  Update on ab_a1_b2 ab_a1_2',), ('  Update on ab_a1_b3 ab_a1_3',), ('  ->  Nested Loop (actual rows=1 loops=1)',), ('        ->  Append (actual rows=1 loops=1)',), ('              ->  Bitmap Heap Scan on ab_a1_b1 ab_a1_1 (actual rows=0 loops=1)',), ('                    Recheck Cond: (a = 1)',), ('                    ->  Bitmap Index Scan on ab_a1_b1_a_idx (actual rows=0 loops=1)',), ('                          Index Cond: (a = 1)',), ('              ->  Bitmap Heap Scan on ab_a1_b2 ab_a1_2 (actual rows=1 loops=1)',), ('                    Recheck Cond: (a = 1)',), ('                    Heap Blocks: exact=1',), ('                    ->  Bitmap Index Scan on ab_a1_b2_a_idx (actual rows=1 loops=1)',), ('                          Index Cond: (a = 1)',), ('              ->  Bitmap Heap Scan on ab_a1_b3 ab_a1_3 (actual rows=0 loops=1)',), ('                    Recheck Cond: (a = 1)',), ('                    Heap Blocks: exact=1',), ('                    ->  Bitmap Index Scan on ab_a1_b3_a_idx (actual rows=1 loops=1)',), ('                          Index Cond: (a = 1)',), ('        ->  Materialize (actual rows=1 loops=1)',), ('              ->  Append (actual rows=1 loops=1)',), ('                    ->  Bitmap Heap Scan on ab_a1_b1 ab_1 (actual rows=0 loops=1)',), ('                          Recheck Cond: (a = 1)',), ('                          ->  Bitmap Index Scan on ab_a1_b1_a_idx (actual rows=0 loops=1)',), ('                                Index Cond: (a = 1)',), ('                    ->  Bitmap Heap Scan on ab_a1_b2 ab_2 (actual rows=1 loops=1)',), ('                          Recheck Cond: (a = 1)',), ('                          Heap Blocks: exact=1',), ('                          ->  Bitmap Index Scan on ab_a1_b2_a_idx (actual rows=1 loops=1)',), ('                                Index Cond: (a = 1)',), ('                    ->  Bitmap Heap Scan on ab_a1_b3 ab_3 (actual rows=0 loops=1)',), ('                          Recheck Cond: (a = 1)',), ('                          Heap Blocks: exact=1',), ('                          ->  Bitmap Index Scan on ab_a1_b3_a_idx (actual rows=1 loops=1)',), ('                                Index Cond: (a = 1)',)]"
postgresql,postgresql,table ab,partition_prune.sql,SAME,,"[(1, 3)]"
postgresql,postgresql,truncate ab,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) update ab_a1 set b = 3 from ab_a2 where ab_a2.b = (select 1)",partition_prune.sql,SAME,,"[('Update on ab_a1 (actual rows=0 loops=1)',), ('  Update on ab_a1_b1 ab_a1_1',), ('  Update on ab_a1_b2 ab_a1_2',), ('  Update on ab_a1_b3 ab_a1_3',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Nested Loop (actual rows=3 loops=1)',), ('        ->  Append (actual rows=3 loops=1)',), ('              ->  Seq Scan on ab_a1_b1 ab_a1_1 (actual rows=1 loops=1)',), ('              ->  Seq Scan on ab_a1_b2 ab_a1_2 (actual rows=1 loops=1)',), ('              ->  Seq Scan on ab_a1_b3 ab_a1_3 (actual rows=1 loops=1)',), ('        ->  Materialize (actual rows=1 loops=3)',), ('              ->  Append (actual rows=1 loops=1)',), ('                    ->  Seq Scan on ab_a2_b1 ab_a2_1 (actual rows=1 loops=1)',), ('                          Filter: (b = $0)',), ('                    ->  Seq Scan on ab_a2_b2 ab_a2_2 (never executed)',), ('                          Filter: (b = $0)',), ('                    ->  Seq Scan on ab_a2_b3 ab_a2_3 (never executed)',), ('                          Filter: (b = $0)',)]"
postgresql,postgresql,"select tableoid::regclass, * from ab",partition_prune.sql,SAME,,"[('ab_a1_b3', 1, 3), ('ab_a1_b3', 1, 3), ('ab_a1_b3', 1, 3), ('ab_a2_b1', 2, 1)]"
postgresql,postgresql,create index tprt1_idx on tprt_1 (col1),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index tprt2_idx on tprt_2 (col1),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index tprt3_idx on tprt_3 (col1),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index tprt4_idx on tprt_4 (col1),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index tprt5_idx on tprt_5 (col1),partition_prune.sql,SAME,,[]
postgresql,postgresql,create index tprt6_idx on tprt_6 (col1),partition_prune.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin = off,partition_prune.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin = off,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 > tprt.col1",partition_prune.sql,SAME,,"[('Nested Loop (actual rows=6 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=2 loops=1)',), ('  ->  Append (actual rows=3 loops=2)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (actual rows=2 loops=2)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (actual rows=2 loops=1)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 = tprt.col1",partition_prune.sql,SAME,,"[('Nested Loop (actual rows=2 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=2 loops=1)',), ('  ->  Append (actual rows=1 loops=2)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (actual rows=1 loops=2)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',)]"
postgresql,postgresql,"select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 > tprt.col1 order by tbl1.col1, tprt.col1",partition_prune.sql,SAME,,"[(501, 10), (501, 20), (505, 10), (505, 20), (505, 501), (505, 502)]"
postgresql,postgresql,"select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 = tprt.col1 order by tbl1.col1, tprt.col1",partition_prune.sql,SAME,,"[(501, 501), (505, 505)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from tbl1 inner join tprt on tbl1.col1 > tprt.col1",partition_prune.sql,SAME,,"[('Nested Loop (actual rows=23 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=5 loops=1)',), ('  ->  Append (actual rows=5 loops=5)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (actual rows=2 loops=5)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (actual rows=3 loops=4)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (actual rows=1 loops=2)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 < tbl1.col1)',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from tbl1 inner join tprt on tbl1.col1 = tprt.col1",partition_prune.sql,SAME,,"[('Nested Loop (actual rows=3 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=5 loops=1)',), ('  ->  Append (actual rows=1 loops=5)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (actual rows=1 loops=2)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (actual rows=0 loops=3)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',)]"
postgresql,postgresql,"select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 > tprt.col1 order by tbl1.col1, tprt.col1",partition_prune.sql,SAME,,"[(501, 10), (501, 20), (505, 10), (505, 20), (505, 501), (505, 502), (1001, 10), (1001, 20), (1001, 501), (1001, 502), (1001, 505), (1010, 10), (1010, 20), (1010, 501), (1010, 502), (1010, 505), (1010, 1001), (1011, 10), (1011, 20), (1011, 501), (1011, 502), (1011, 505), (1011, 1001)]"
postgresql,postgresql,"select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 = tprt.col1 order by tbl1.col1, tprt.col1",partition_prune.sql,SAME,,"[(501, 501), (505, 505), (1001, 1001)]"
postgresql,postgresql,delete from tbl1,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 < tprt.col1",partition_prune.sql,SAME,,"[('Nested Loop (actual rows=1 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=1 loops=1)',), ('  ->  Append (actual rows=1 loops=1)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 > tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (actual rows=1 loops=1)',), ('              Index Cond: (col1 > tbl1.col1)',)]"
postgresql,postgresql,"select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 < tprt.col1 order by tbl1.col1, tprt.col1",partition_prune.sql,SAME,,"[(4400, 4500)]"
postgresql,postgresql,delete from tbl1,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 = tprt.col1",partition_prune.sql,SAME,,"[('Nested Loop (actual rows=0 loops=1)',), ('  ->  Seq Scan on tbl1 (actual rows=1 loops=1)',), ('  ->  Append (actual rows=0 loops=1)',), ('        ->  Index Scan using tprt1_idx on tprt_1 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt2_idx on tprt_2 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt3_idx on tprt_3 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt4_idx on tprt_4 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt5_idx on tprt_5 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',), ('        ->  Index Scan using tprt6_idx on tprt_6 (never executed)',), ('              Index Cond: (col1 = tbl1.col1)',)]"
postgresql,postgresql,"select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 = tprt.col1 order by tbl1.col1, tprt.col1",partition_prune.sql,SAME,,[]
postgresql,postgresql,alter table part_abc attach partition part_bac for values in(1),partition_prune.sql,SAME,,[]
postgresql,postgresql,alter table part_bac attach partition part_cab for values in(2),partition_prune.sql,SAME,,[]
postgresql,postgresql,alter table part_cab attach partition part_abc_p1 for values in(3),partition_prune.sql,SAME,,[]
postgresql,postgresql,"prepare part_abc_q1 (int, int, int) as select * from part_abc where a = $1 and b = $2 and c = $3",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute part_abc_q1 (1, 2, 3)",partition_prune.sql,SAME,,"[('Seq Scan on part_abc_p1 part_abc (actual rows=0 loops=1)',), ('  Filter: ((a = $1) AND (b = $2) AND (c = $3))',)]"
postgresql,postgresql,deallocate part_abc_q1,partition_prune.sql,SAME,,[]
postgresql,postgresql,select * from listp where b = 1,partition_prune.sql,SAME,,[]
postgresql,postgresql,"prepare q1 (int,int) as select * from listp where b in ($1,$2)",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off)  execute q1 (1,1)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 1',), ('  ->  Seq Scan on listp_1_1 listp_1 (actual rows=0 loops=1)',), ('        Filter: (b = ANY (ARRAY[$1, $2]))',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off)  execute q1 (2,2)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 1',), ('  ->  Seq Scan on listp_2_1 listp_1 (actual rows=0 loops=1)',), ('        Filter: (b = ANY (ARRAY[$1, $2]))',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off)  execute q1 (0,0)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',)]"
postgresql,postgresql,deallocate q1,partition_prune.sql,SAME,,[]
postgresql,postgresql,"prepare q1 (int,int,int,int) as select * from listp where b in($1,$2) and $3 <> b and $4 <> b",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off)  execute q1 (1,2,2,0)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 1',), ('  ->  Seq Scan on listp_1_1 listp_1 (actual rows=0 loops=1)',), ('        Filter: ((b = ANY (ARRAY[$1, $2])) AND ($3 <> b) AND ($4 <> b))',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off)  execute q1 (1,2,2,1)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from listp where a = (select null::int)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on listp_1_1 listp_1 (never executed)',), ('        Filter: (a = $0)',), ('  ->  Seq Scan on listp_2_1 listp_2 (never executed)',), ('        Filter: (a = $0)',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a < localtimestamp",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 1',), ('  ->  Seq Scan on stable_qual_pruning1 stable_qual_pruning_1 (actual rows=0 loops=1)',), ('        Filter: (a < LOCALTIMESTAMP)',), ('  ->  Seq Scan on stable_qual_pruning2 stable_qual_pruning_2 (actual rows=0 loops=1)',), ('        Filter: (a < LOCALTIMESTAMP)',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a < '2000-02-01'::timestamptz",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',), ('  ->  Seq Scan on stable_qual_pruning1 stable_qual_pruning_1 (actual rows=0 loops=1)',), (""        Filter: (a < '2000-02-01 00:00:00+01'::timestamp with time zone)"",)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2010-02-01', '2020-01-01']::timestamp[])",partition_prune.sql,SAME,,"[('Result (actual rows=0 loops=1)',), ('  One-Time Filter: false',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2000-02-01', '2010-01-01']::timestamp[])",partition_prune.sql,SAME,,"[('Seq Scan on stable_qual_pruning2 stable_qual_pruning (actual rows=0 loops=1)',), ('  Filter: (a = ANY (\'{""2000-02-01 00:00:00"",""2010-01-01 00:00:00""}\'::timestamp without time zone[]))',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2000-02-01', localtimestamp]::timestamp[])",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',), ('  ->  Seq Scan on stable_qual_pruning2 stable_qual_pruning_1 (actual rows=0 loops=1)',), (""        Filter: (a = ANY (ARRAY['2000-02-01 00:00:00'::timestamp without time zone, LOCALTIMESTAMP]))"",)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2010-02-01', '2020-01-01']::timestamptz[])",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 3',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(array['2000-02-01', '2010-01-01']::timestamptz[])",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  Subplans Removed: 2',), ('  ->  Seq Scan on stable_qual_pruning2 stable_qual_pruning_1 (actual rows=0 loops=1)',), ('        Filter: (a = ANY (\'{""2000-02-01 00:00:00+01"",""2010-01-01 00:00:00+01""}\'::timestamp with time zone[]))',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning   where a = any(null::timestamptz[])",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  ->  Seq Scan on stable_qual_pruning1 stable_qual_pruning_1 (actual rows=0 loops=1)',), ('        Filter: (a = ANY (NULL::timestamp with time zone[]))',), ('  ->  Seq Scan on stable_qual_pruning2 stable_qual_pruning_2 (actual rows=0 loops=1)',), ('        Filter: (a = ANY (NULL::timestamp with time zone[]))',), ('  ->  Seq Scan on stable_qual_pruning3 stable_qual_pruning_3 (actual rows=0 loops=1)',), ('        Filter: (a = ANY (NULL::timestamp with time zone[]))',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from mc3p where a < 3 and abs(b) = 1",partition_prune.sql,SAME,,"[('Append (actual rows=3 loops=1)',), ('  ->  Seq Scan on mc3p0 mc3p_1 (actual rows=1 loops=1)',), ('        Filter: ((a < 3) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p1 mc3p_2 (actual rows=1 loops=1)',), ('        Filter: ((a < 3) AND (abs(b) = 1))',), ('  ->  Seq Scan on mc3p2 mc3p_3 (actual rows=1 loops=1)',), ('        Filter: ((a < 3) AND (abs(b) = 1))',)]"
postgresql,postgresql,prepare ps1 as   select * from mc3p where a = $1 and abs(b) < (select 3),partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute ps1(1)",partition_prune.sql,SAME,,"[('Append (actual rows=1 loops=1)',), ('  Subplans Removed: 2',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on mc3p1 mc3p_1 (actual rows=1 loops=1)',), ('        Filter: ((a = $1) AND (abs(b) < $0))',)]"
postgresql,postgresql,deallocate ps1,partition_prune.sql,SAME,,[]
postgresql,postgresql,prepare ps2 as   select * from mc3p where a <= $1 and abs(b) < (select 3),partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute ps2(1)",partition_prune.sql,SAME,,"[('Append (actual rows=2 loops=1)',), ('  Subplans Removed: 1',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Seq Scan on mc3p0 mc3p_1 (actual rows=1 loops=1)',), ('        Filter: ((a <= $1) AND (abs(b) < $0))',), ('  ->  Seq Scan on mc3p1 mc3p_2 (actual rows=1 loops=1)',), ('        Filter: ((a <= $1) AND (abs(b) < $0))',)]"
postgresql,postgresql,deallocate ps2,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from boolp where a = (select value from boolvalues where value)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Seq Scan on boolvalues (actual rows=1 loops=1)',), ('          Filter: value',), ('          Rows Removed by Filter: 1',), ('  ->  Seq Scan on boolp_f boolp_1 (never executed)',), ('        Filter: (a = $0)',), ('  ->  Seq Scan on boolp_t boolp_2 (actual rows=0 loops=1)',), ('        Filter: (a = $0)',)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from boolp where a = (select value from boolvalues where not value)",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Seq Scan on boolvalues (actual rows=1 loops=1)',), ('          Filter: (NOT value)',), ('          Rows Removed by Filter: 1',), ('  ->  Seq Scan on boolp_f boolp_1 (actual rows=0 loops=1)',), ('        Filter: (a = $0)',), ('  ->  Seq Scan on boolp_t boolp_2 (never executed)',), ('        Filter: (a = $0)',)]"
postgresql,postgresql,set enable_seqscan = off,partition_prune.sql,SAME,,[]
postgresql,postgresql,set enable_sort = off,partition_prune.sql,SAME,,[]
postgresql,postgresql,create index on ma_test (b),partition_prune.sql,SAME,,[]
postgresql,postgresql,analyze ma_test,partition_prune.sql,SAME,,[]
postgresql,postgresql,prepare mt_q1 (int) as select a from ma_test where a >= $1 and a % 10 = 5 order by b,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute mt_q1(15)",partition_prune.sql,SAME,,"[('Merge Append (actual rows=2 loops=1)',), ('  Sort Key: ma_test.b',), ('  Subplans Removed: 1',), ('  ->  Index Scan using ma_test_p2_b_idx on ma_test_p2 ma_test_1 (actual rows=1 loops=1)',), ('        Filter: ((a >= $1) AND ((a % 10) = 5))',), ('        Rows Removed by Filter: 9',), ('  ->  Index Scan using ma_test_p3_b_idx on ma_test_p3 ma_test_2 (actual rows=1 loops=1)',), ('        Filter: ((a >= $1) AND ((a % 10) = 5))',), ('        Rows Removed by Filter: 9',)]"
postgresql,postgresql,execute mt_q1(15),partition_prune.sql,SAME,,"[(15,), (25,)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute mt_q1(25)",partition_prune.sql,SAME,,"[('Merge Append (actual rows=1 loops=1)',), ('  Sort Key: ma_test.b',), ('  Subplans Removed: 2',), ('  ->  Index Scan using ma_test_p3_b_idx on ma_test_p3 ma_test_1 (actual rows=1 loops=1)',), ('        Filter: ((a >= $1) AND ((a % 10) = 5))',), ('        Rows Removed by Filter: 9',)]"
postgresql,postgresql,execute mt_q1(25),partition_prune.sql,SAME,,"[(25,)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) execute mt_q1(35)",partition_prune.sql,SAME,,"[('Merge Append (actual rows=0 loops=1)',), ('  Sort Key: ma_test.b',), ('  Subplans Removed: 3',)]"
postgresql,postgresql,execute mt_q1(35),partition_prune.sql,SAME,,[]
postgresql,postgresql,deallocate mt_q1,partition_prune.sql,SAME,,[]
postgresql,postgresql,prepare mt_q2 (int) as select * from ma_test where a >= $1 order by b limit 1,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, verbose, costs off, summary off, timing off) execute mt_q2 (35)",partition_prune.sql,SAME,,"[('Limit (actual rows=0 loops=1)',), ('  Output: ma_test.a, ma_test.b',), ('  ->  Merge Append (actual rows=0 loops=1)',), ('        Sort Key: ma_test.b',), ('        Subplans Removed: 3',)]"
postgresql,postgresql,deallocate mt_q2,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from ma_test where a >= (select min(b) from ma_test_p2) order by b",partition_prune.sql,SAME,,"[('Merge Append (actual rows=20 loops=1)',), ('  Sort Key: ma_test.b',), ('  InitPlan 2 (returns $1)',), ('    ->  Result (actual rows=1 loops=1)',), ('          InitPlan 1 (returns $0)',), ('            ->  Limit (actual rows=1 loops=1)',), ('                  ->  Index Scan using ma_test_p2_b_idx on ma_test_p2 (actual rows=1 loops=1)',), ('                        Index Cond: (b IS NOT NULL)',), ('  ->  Index Scan using ma_test_p1_b_idx on ma_test_p1 ma_test_1 (never executed)',), ('        Filter: (a >= $1)',), ('  ->  Index Scan using ma_test_p2_b_idx on ma_test_p2 ma_test_2 (actual rows=10 loops=1)',), ('        Filter: (a >= $1)',), ('  ->  Index Scan using ma_test_p3_b_idx on ma_test_p3 ma_test_3 (actual rows=10 loops=1)',), ('        Filter: (a >= $1)',)]"
postgresql,postgresql,reset enable_seqscan,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset enable_sort,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset enable_indexonlyscan,partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from pp_arrpart where a = '{1}',partition_prune.sql,SAME,,"[('Seq Scan on pp_arrpart1 pp_arrpart',), (""  Filter: (a = '{1}'::integer[])"",)]"
postgresql,postgresql,"explain (costs off) select * from pp_arrpart where a = '{1, 2}'",partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,"explain (costs off) select * from pp_arrpart where a in ('{4, 5}', '{1}')",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on pp_arrpart1 pp_arrpart_1',), (""        Filter: ((a = '{4,5}'::integer[]) OR (a = '{1}'::integer[]))"",), ('  ->  Seq Scan on pp_arrpart2 pp_arrpart_2',), (""        Filter: ((a = '{4,5}'::integer[]) OR (a = '{1}'::integer[]))"",)]"
postgresql,postgresql,explain (costs off) update pp_arrpart set a = a where a = '{1}',partition_prune.sql,SAME,,"[('Update on pp_arrpart',), ('  Update on pp_arrpart1 pp_arrpart_1',), ('  ->  Seq Scan on pp_arrpart1 pp_arrpart_1',), (""        Filter: (a = '{1}'::integer[])"",)]"
postgresql,postgresql,explain (costs off) delete from pp_arrpart where a = '{1}',partition_prune.sql,SAME,,"[('Delete on pp_arrpart',), ('  Delete on pp_arrpart1 pp_arrpart_1',), ('  ->  Seq Scan on pp_arrpart1 pp_arrpart_1',), (""        Filter: (a = '{1}'::integer[])"",)]"
postgresql,postgresql,"select tableoid::regclass, * from pph_arrpart order by 1",partition_prune.sql,SAME,,"[('pph_arrpart1', [1, 2]), ('pph_arrpart1', [4, 5]), ('pph_arrpart2', [1])]"
postgresql,postgresql,explain (costs off) select * from pph_arrpart where a = '{1}',partition_prune.sql,SAME,,"[('Seq Scan on pph_arrpart2 pph_arrpart',), (""  Filter: (a = '{1}'::integer[])"",)]"
postgresql,postgresql,"explain (costs off) select * from pph_arrpart where a = '{1, 2}'",partition_prune.sql,SAME,,"[('Seq Scan on pph_arrpart1 pph_arrpart',), (""  Filter: (a = '{1,2}'::integer[])"",)]"
postgresql,postgresql,"explain (costs off) select * from pph_arrpart where a in ('{4, 5}', '{1}')",partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on pph_arrpart1 pph_arrpart_1',), (""        Filter: ((a = '{4,5}'::integer[]) OR (a = '{1}'::integer[]))"",), ('  ->  Seq Scan on pph_arrpart2 pph_arrpart_2',), (""        Filter: ((a = '{4,5}'::integer[]) OR (a = '{1}'::integer[]))"",)]"
postgresql,postgresql,"create type pp_colors as enum ('green', 'blue', 'black')",partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from pp_enumpart where a = 'blue',partition_prune.sql,SAME,,"[('Seq Scan on pp_enumpart_blue pp_enumpart',), (""  Filter: (a = 'blue'::pp_colors)"",)]"
postgresql,postgresql,explain (costs off) select * from pp_enumpart where a = 'black',partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,drop type pp_colors,partition_prune.sql,SAME,,[]
postgresql,postgresql,"create type pp_rectype as (a int, b int)",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from pp_recpart where a = '(1,1)'::pp_rectype",partition_prune.sql,SAME,,"[('Seq Scan on pp_recpart_11 pp_recpart',), (""  Filter: (a = '(1,1)'::pp_rectype)"",)]"
postgresql,postgresql,"explain (costs off) select * from pp_recpart where a = '(1,2)'::pp_rectype",partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,drop type pp_rectype,partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from pp_intrangepart where a = '[1,2]'::int4range",partition_prune.sql,SAME,,"[('Seq Scan on pp_intrangepart12 pp_intrangepart',), (""  Filter: (a = '[1,3)'::int4range)"",)]"
postgresql,postgresql,"explain (costs off) select * from pp_intrangepart where a = '(1,2)'::int4range",partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,explain (costs off) select * from pp_lp where a = 1,partition_prune.sql,SAME,,"[('Seq Scan on pp_lp1 pp_lp',), ('  Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) update pp_lp set value = 10 where a = 1,partition_prune.sql,SAME,,"[('Update on pp_lp',), ('  Update on pp_lp1 pp_lp_1',), ('  ->  Seq Scan on pp_lp1 pp_lp_1',), ('        Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) delete from pp_lp where a = 1,partition_prune.sql,SAME,,"[('Delete on pp_lp',), ('  Delete on pp_lp1 pp_lp_1',), ('  ->  Seq Scan on pp_lp1 pp_lp_1',), ('        Filter: (a = 1)',)]"
postgresql,postgresql,set enable_partition_pruning = off,partition_prune.sql,SAME,,[]
postgresql,postgresql,set constraint_exclusion = 'partition',partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from pp_lp where a = 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on pp_lp1 pp_lp_1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on pp_lp2 pp_lp_2',), ('        Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) update pp_lp set value = 10 where a = 1,partition_prune.sql,SAME,,"[('Update on pp_lp',), ('  Update on pp_lp1 pp_lp_1',), ('  Update on pp_lp2 pp_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on pp_lp1 pp_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on pp_lp2 pp_lp_2',), ('              Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) delete from pp_lp where a = 1,partition_prune.sql,SAME,,"[('Delete on pp_lp',), ('  Delete on pp_lp1 pp_lp_1',), ('  Delete on pp_lp2 pp_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on pp_lp1 pp_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on pp_lp2 pp_lp_2',), ('              Filter: (a = 1)',)]"
postgresql,postgresql,set constraint_exclusion = 'off',partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from pp_lp where a = 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on pp_lp1 pp_lp_1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on pp_lp2 pp_lp_2',), ('        Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) update pp_lp set value = 10 where a = 1,partition_prune.sql,SAME,,"[('Update on pp_lp',), ('  Update on pp_lp1 pp_lp_1',), ('  Update on pp_lp2 pp_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on pp_lp1 pp_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on pp_lp2 pp_lp_2',), ('              Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) delete from pp_lp where a = 1,partition_prune.sql,SAME,,"[('Delete on pp_lp',), ('  Delete on pp_lp1 pp_lp_1',), ('  Delete on pp_lp2 pp_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on pp_lp1 pp_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on pp_lp2 pp_lp_2',), ('              Filter: (a = 1)',)]"
postgresql,postgresql,set constraint_exclusion = 'partition',partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from inh_lp where a = 1,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on inh_lp inh_lp_1',), ('        Filter: (a = 1)',), ('  ->  Seq Scan on inh_lp1 inh_lp_2',), ('        Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) update inh_lp set value = 10 where a = 1,partition_prune.sql,SAME,,"[('Update on inh_lp',), ('  Update on inh_lp inh_lp_1',), ('  Update on inh_lp1 inh_lp_2',), ('  ->  Result',), ('        ->  Append',), ('              ->  Seq Scan on inh_lp inh_lp_1',), ('                    Filter: (a = 1)',), ('              ->  Seq Scan on inh_lp1 inh_lp_2',), ('                    Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) delete from inh_lp where a = 1,partition_prune.sql,SAME,,"[('Delete on inh_lp',), ('  Delete on inh_lp inh_lp_1',), ('  Delete on inh_lp1 inh_lp_2',), ('  ->  Append',), ('        ->  Seq Scan on inh_lp inh_lp_1',), ('              Filter: (a = 1)',), ('        ->  Seq Scan on inh_lp1 inh_lp_2',), ('              Filter: (a = 1)',)]"
postgresql,postgresql,explain (costs off) update inh_lp1 set value = 10 where a = 2,partition_prune.sql,SAME,,"[('Update on inh_lp1',), ('  ->  Seq Scan on inh_lp1',), ('        Filter: (a = 2)',)]"
postgresql,postgresql,reset enable_partition_pruning,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset constraint_exclusion,partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table pp_temp_parent (a int) partition by list (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table pp_temp_part_1 partition of pp_temp_parent for values in (1),partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table pp_temp_part_def partition of pp_temp_parent default,partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from pp_temp_parent where true,partition_prune.sql,SAME,,"[('Append',), ('  ->  Seq Scan on pp_temp_part_1 pp_temp_parent_1',), ('  ->  Seq Scan on pp_temp_part_def pp_temp_parent_2',)]"
postgresql,postgresql,explain (costs off) select * from pp_temp_parent where a = 2,partition_prune.sql,SAME,,"[('Seq Scan on pp_temp_part_def pp_temp_parent',), ('  Filter: (a = 2)',)]"
postgresql,postgresql,"create temp table p (a int, b int, c int) partition by list (a)",partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table p1 partition of p for values in (1),partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table p2 partition of p for values in (2),partition_prune.sql,SAME,,[]
postgresql,postgresql,"create temp table q (a int, b int, c int) partition by list (a)",partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table q1 partition of q for values in (1) partition by list (b),partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table q11 partition of q1 for values in (1) partition by list (c),partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table q111 partition of q11 for values in (1),partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table q2 partition of q for values in (2) partition by list (b),partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table q21 partition of q2 for values in (1),partition_prune.sql,SAME,,[]
postgresql,postgresql,create temp table q22 partition of q2 for values in (2),partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from (       select * from p       union all       select * from q1       union all       select 1, 1, 1      ) s(a, b, c) where s.a = 1 and s.b = 1 and s.c = (select 1)",partition_prune.sql,SAME,,"[('Append',), ('  InitPlan 1 (returns $0)',), ('    ->  Result',), ('  ->  Seq Scan on p1 p',), ('        Filter: ((a = 1) AND (b = 1) AND (c = $0))',), ('  ->  Seq Scan on q111 q1',), ('        Filter: ((a = 1) AND (b = 1) AND (c = $0))',), ('  ->  Result',), ('        One-Time Filter: (1 = $0)',)]"
postgresql,postgresql,"select * from (       select * from p       union all       select * from q1       union all       select 1, 1, 1      ) s(a, b, c) where s.a = 1 and s.b = 1 and s.c = (select 1)",partition_prune.sql,SAME,,"[(1, 1, 1)]"
postgresql,postgresql,"prepare q (int, int) as select * from (       select * from p       union all       select * from q1       union all       select 1, 1, 1      ) s(a, b, c) where s.a = $1 and s.b = $2 and s.c = (select 1)",partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) execute q (1, 1)",partition_prune.sql,SAME,,"[('Append',), ('  Subplans Removed: 1',), ('  InitPlan 1 (returns $0)',), ('    ->  Result',), ('  ->  Seq Scan on p1 p',), ('        Filter: ((a = $1) AND (b = $2) AND (c = $0))',), ('  ->  Seq Scan on q111 q1',), ('        Filter: ((a = $1) AND (b = $2) AND (c = $0))',), ('  ->  Result',), ('        One-Time Filter: ((1 = $1) AND (1 = $2) AND (1 = $0))',)]"
postgresql,postgresql,"execute q (1, 1)",partition_prune.sql,SAME,,"[(1, 1, 1)]"
postgresql,postgresql,"explain (analyze, costs off, summary off, timing off) select * from listp where a = (select 2) and b <> 10",partition_prune.sql,SAME,,"[('Seq Scan on listp1 listp (actual rows=0 loops=1)',), ('  Filter: ((b <> 10) AND (a = $0))',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (never executed)',)]"
postgresql,postgresql,set enable_partition_pruning to off,partition_prune.sql,SAME,,[]
postgresql,postgresql,set constraint_exclusion to 'partition',partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from listp1 where a = 2,partition_prune.sql,SAME,,"[('Seq Scan on listp1',), ('  Filter: (a = 2)',)]"
postgresql,postgresql,explain (costs off) update listp1 set a = 1 where a = 2,partition_prune.sql,SAME,,"[('Update on listp1',), ('  ->  Seq Scan on listp1',), ('        Filter: (a = 2)',)]"
postgresql,postgresql,set constraint_exclusion to 'on',partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from listp1 where a = 2,partition_prune.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,explain (costs off) update listp1 set a = 1 where a = 2,partition_prune.sql,SAME,,"[('Update on listp1',), ('  ->  Result',), ('        One-Time Filter: false',)]"
postgresql,postgresql,reset constraint_exclusion,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset enable_partition_pruning,partition_prune.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost to 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost to 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,alter table listp_12_1 set (parallel_workers = 0),partition_prune.sql,SAME,,[]
postgresql,postgresql,reset parallel_tuple_cost,partition_prune.sql,SAME,,[]
postgresql,postgresql,reset parallel_setup_cost,partition_prune.sql,SAME,,[]
postgresql,postgresql,set enable_sort to 0,partition_prune.sql,SAME,,[]
postgresql,postgresql,create index on rangep (a),partition_prune.sql,SAME,,[]
postgresql,postgresql,"explain (analyze on, costs off, timing off, summary off) select * from rangep where b IN((select 1),(select 2)) order by a",partition_prune.sql,SAME,,"[('Append (actual rows=0 loops=1)',), ('  InitPlan 1 (returns $0)',), ('    ->  Result (actual rows=1 loops=1)',), ('  InitPlan 2 (returns $1)',), ('    ->  Result (actual rows=1 loops=1)',), ('  ->  Merge Append (actual rows=0 loops=1)',), ('        Sort Key: rangep_2.a',), ('        ->  Index Scan using rangep_0_to_100_1_a_idx on rangep_0_to_100_1 rangep_2 (actual rows=0 loops=1)',), ('              Filter: (b = ANY (ARRAY[$0, $1]))',), ('        ->  Index Scan using rangep_0_to_100_2_a_idx on rangep_0_to_100_2 rangep_3 (actual rows=0 loops=1)',), ('              Filter: (b = ANY (ARRAY[$0, $1]))',), ('        ->  Index Scan using rangep_0_to_100_3_a_idx on rangep_0_to_100_3 rangep_4 (never executed)',), ('              Filter: (b = ANY (ARRAY[$0, $1]))',), ('  ->  Index Scan using rangep_100_to_200_a_idx on rangep_100_to_200 rangep_5 (actual rows=0 loops=1)',), ('        Filter: (b = ANY (ARRAY[$0, $1]))',)]"
postgresql,postgresql,reset enable_sort,partition_prune.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from rp_prefix_test1 where a <= 1 and b = 'a',partition_prune.sql,SAME,,"[('Seq Scan on rp_prefix_test1_p1 rp_prefix_test1',), (""  Filter: ((a <= 1) AND ((b)::text = 'a'::text))"",)]"
postgresql,postgresql,explain (costs off) select * from rp_prefix_test2 where a <= 1 and b = 1 and c >= 0,partition_prune.sql,SAME,,"[('Seq Scan on rp_prefix_test2_p1 rp_prefix_test2',), ('  Filter: ((a <= 1) AND (c >= 0) AND (b = 1))',)]"
postgresql,postgresql,explain (costs off) select * from rp_prefix_test3 where a >= 1 and b >= 1 and b >= 2 and c >= 2 and d >= 0,partition_prune.sql,SAME,,"[('Seq Scan on rp_prefix_test3_p2 rp_prefix_test3',), ('  Filter: ((a >= 1) AND (b >= 1) AND (b >= 2) AND (c >= 2) AND (d >= 0))',)]"
postgresql,postgresql,explain (costs off) select * from rp_prefix_test3 where a >= 1 and b >= 1 and b = 2 and c = 2 and d >= 0,partition_prune.sql,SAME,,"[('Seq Scan on rp_prefix_test3_p2 rp_prefix_test3',), ('  Filter: ((a >= 1) AND (b >= 1) AND (d >= 0) AND (b = 2) AND (c = 2))',)]"
postgresql,postgresql,"select   'explain (costs off) select tableoid::regclass,* from hp_prefix_test where ' ||   string_agg(c.colname || case when g.s & (1 << c.colpos) = 0 then ' is null' else ' = ' || (colpos+1)::text end, ' and ' order by c.colpos) from (values('a',0),('b',1),('c',2),('d',3)) c(colname, colpos), generate_Series(0,15) g(s) group by g.s order by g.s",partition_prune.sql,SAME,,"[('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c is null and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c is null and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c is null and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c is null and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c = 3 and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c = 3 and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c = 3 and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c = 3 and d is null',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c is null and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c is null and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c is null and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c is null and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c = 3 and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c = 3 and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c = 3 and d = 4',), ('explain (costs off) select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c = 3 and d = 4',)]"
postgresql,postgresql,"select   'select tableoid::regclass,* from hp_prefix_test where ' ||   string_agg(c.colname || case when g.s & (1 << c.colpos) = 0 then ' is null' else ' = ' || (colpos+1)::text end, ' and ' order by c.colpos) from (values('a',0),('b',1),('c',2),('d',3)) c(colname, colpos), generate_Series(0,15) g(s) group by g.s order by g.s",partition_prune.sql,SAME,,"[('select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c is null and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c is null and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c is null and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c is null and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c = 3 and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c = 3 and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c = 3 and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c = 3 and d is null',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c is null and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c is null and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c is null and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c is null and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b is null and c = 3 and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b is null and c = 3 and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a is null and b = 2 and c = 3 and d = 4',), ('select tableoid::regclass,* from hp_prefix_test where a = 1 and b = 2 and c = 3 and d = 4',)]"
postgresql,postgresql,"create operator === (    leftarg = int4,    rightarg = int4,    procedure = int4eq,    commutator = ===,    hashes )",partition_prune.sql,SAME,,[]
postgresql,postgresql,"drop operator ===(int4, int4)",partition_prune.sql,SAME,,[]
postgresql,postgresql,SET password_encryption = 'md5',password.sql,SAME,,[]
postgresql,postgresql,SET password_encryption = 'scram-sha-256',password.sql,SAME,,[]
postgresql,postgresql,SET password_encryption = 'md5',password.sql,SAME,,[]
postgresql,postgresql,SET password_encryption = 'scram-sha-256',password.sql,SAME,,[]
postgresql,postgresql,SET password_encryption = 'md5',password.sql,SAME,,[]
postgresql,postgresql,SET password_encryption = 'scram-sha-256',password.sql,SAME,,[]
postgresql,postgresql,SET scram_iterations = 1024,password.sql,SAME,,[]
postgresql,postgresql,SELECT f1 AS open_path FROM PATH_TBL WHERE isopen(f1),path.sql,SAME,,"[('[(1,2),(3,4)]',), ('[(0,0),(3,0),(4,5),(1,6)]',), ('[(1,2),(3,4)]',), ('[(11,12),(13,14)]',)]"
postgresql,postgresql,SELECT f1 AS closed_path FROM PATH_TBL WHERE isclosed(f1),path.sql,SAME,,"[('((1,2),(3,4))',), ('((1,2),(3,4))',), ('((1,2),(3,4))',), ('((10,20))',), ('((11,12),(13,14))',)]"
postgresql,postgresql,SELECT pclose(f1) AS closed_path FROM PATH_TBL,path.sql,SAME,,"[('((1,2),(3,4))',), ('((1,2),(3,4))',), ('((0,0),(3,0),(4,5),(1,6))',), ('((1,2),(3,4))',), ('((1,2),(3,4))',), ('((1,2),(3,4))',), ('((10,20))',), ('((11,12),(13,14))',), ('((11,12),(13,14))',)]"
postgresql,postgresql,SELECT popen(f1) AS open_path FROM PATH_TBL,path.sql,SAME,,"[('[(1,2),(3,4)]',), ('[(1,2),(3,4)]',), ('[(0,0),(3,0),(4,5),(1,6)]',), ('[(1,2),(3,4)]',), ('[(1,2),(3,4)]',), ('[(1,2),(3,4)]',), ('[(10,20)]',), ('[(11,12),(13,14)]',), ('[(11,12),(13,14)]',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('[(1,2),(3)]', 'path')",path.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('[(1,2),(3)]', 'path')",path.sql,SAME,,"[('invalid input syntax for type path: ""[(1,2),(3)]""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('[(1,2,6),(3,4,6)]', 'path')",path.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('[(1,2,6),(3,4,6)]', 'path')",path.sql,SAME,,"[('invalid input syntax for type path: ""[(1,2,6),(3,4,6)]""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('16AE7F7', 'pg_lsn')",pg_lsn.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('16AE7F7', 'pg_lsn')",pg_lsn.sql,SAME,,"[('invalid input syntax for type pg_lsn: ""16AE7F7""', None, None, '22P02')]"
postgresql,postgresql,"SELECT MIN(f1), MAX(f1) FROM PG_LSN_TBL",pg_lsn.sql,SAME,,"[('0/0', 'FFFFFFFF/FFFFFFFF')]"
postgresql,postgresql,SELECT '0/16AE7F8' = '0/16AE7F8'::pg_lsn,pg_lsn.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '0/16AE7F8'::pg_lsn != '0/16AE7F7',pg_lsn.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '0/16AE7F7' < '0/16AE7F8'::pg_lsn,pg_lsn.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '0/16AE7F8' > pg_lsn '0/16AE7F7',pg_lsn.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT '0/16AE7F7'::pg_lsn - '0/16AE7F8'::pg_lsn,pg_lsn.sql,SAME,,"[(Decimal('-1'),)]"
postgresql,postgresql,SELECT '0/16AE7F8'::pg_lsn - '0/16AE7F7'::pg_lsn,pg_lsn.sql,SAME,,"[(Decimal('1'),)]"
postgresql,postgresql,SELECT '0/16AE7F7'::pg_lsn + 16::numeric,pg_lsn.sql,SAME,,"[('0/16AE807',)]"
postgresql,postgresql,SELECT 16::numeric + '0/16AE7F7'::pg_lsn,pg_lsn.sql,SAME,,"[('0/16AE807',)]"
postgresql,postgresql,SELECT '0/16AE7F7'::pg_lsn - 16::numeric,pg_lsn.sql,SAME,,"[('0/16AE7E7',)]"
postgresql,postgresql,SELECT 'FFFFFFFF/FFFFFFFE'::pg_lsn + 1::numeric,pg_lsn.sql,SAME,,"[('FFFFFFFF/FFFFFFFF',)]"
postgresql,postgresql,SELECT '0/1'::pg_lsn - 1::numeric,pg_lsn.sql,SAME,,"[('0/0',)]"
postgresql,postgresql,SELECT '0/0'::pg_lsn + ('FFFFFFFF/FFFFFFFF'::pg_lsn - '0/0'::pg_lsn),pg_lsn.sql,SAME,,"[('FFFFFFFF/FFFFFFFF',)]"
postgresql,postgresql,SELECT 'FFFFFFFF/FFFFFFFF'::pg_lsn - ('FFFFFFFF/FFFFFFFF'::pg_lsn - '0/0'::pg_lsn),pg_lsn.sql,SAME,,"[('0/0',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT DISTINCT (i || '/' || j)::pg_lsn f   FROM generate_series(1, 10) i,        generate_series(1, 10) j,        generate_series(1, 5) k   WHERE i <= 10 AND j > 0 AND j <= 10   ORDER BY f",pg_lsn.sql,SAME,,"[('Sort',), (""  Sort Key: (((((i.i)::text || '/'::text) || (j.j)::text))::pg_lsn)"",), ('  ->  HashAggregate',), (""        Group Key: ((((i.i)::text || '/'::text) || (j.j)::text))::pg_lsn"",), ('        ->  Nested Loop',), ('              ->  Function Scan on generate_series k',), ('              ->  Materialize',), ('                    ->  Nested Loop',), ('                          ->  Function Scan on generate_series j',), ('                                Filter: ((j > 0) AND (j <= 10))',), ('                          ->  Function Scan on generate_series i',), ('                                Filter: (i <= 10)',)]"
postgresql,postgresql,"SELECT DISTINCT (i || '/' || j)::pg_lsn f   FROM generate_series(1, 10) i,        generate_series(1, 10) j,        generate_series(1, 5) k   WHERE i <= 10 AND j > 0 AND j <= 10   ORDER BY f",pg_lsn.sql,SAME,,"[('1/1',), ('1/2',), ('1/3',), ('1/4',), ('1/5',), ('1/6',), ('1/7',), ('1/8',), ('1/9',), ('1/10',), ('2/1',), ('2/2',), ('2/3',), ('2/4',), ('2/5',), ('2/6',), ('2/7',), ('2/8',), ('2/9',), ('2/10',), ('3/1',), ('3/2',), ('3/3',), ('3/4',), ('3/5',), ('3/6',), ('3/7',), ('3/8',), ('3/9',), ('3/10',), ('4/1',), ('4/2',), ('4/3',), ('4/4',), ('4/5',), ('4/6',), ('4/7',), ('4/8',), ('4/9',), ('4/10',), ('5/1',), ('5/2',), ('5/3',), ('5/4',), ('5/5',), ('5/6',), ('5/7',), ('5/8',), ('5/9',), ('5/10',), ('6/1',), ('6/2',), ('6/3',), ('6/4',), ('6/5',), ('6/6',), ('6/7',), ('6/8',), ('6/9',), ('6/10',), ('7/1',), ('7/2',), ('7/3',), ('7/4',), ('7/5',), ('7/6',), ('7/7',), ('7/8',), ('7/9',), ('7/10',), ('8/1',), ('8/2',), ('8/3',), ('8/4',), ('8/5',), ('8/6',), ('8/7',), ('8/8',), ('8/9',), ('8/10',), ('9/1',), ('9/2',), ('9/3',), ('9/4',), ('9/5',), ('9/6',), ('9/7',), ('9/8',), ('9/9',), ('9/10',), ('10/1',), ('10/2',), ('10/3',), ('10/4',), ('10/5',), ('10/6',), ('10/7',), ('10/8',), ('10/9',), ('10/10',)]"
postgresql,postgresql,create temp view v1 as   select 2+2 as f1,plancache.sql,SAME,,[]
postgresql,postgresql,create or replace temp view v1 as   select 2+2+4 as f1,plancache.sql,SAME,,[]
postgresql,postgresql,set search_path = s1,plancache.sql,SAME,,[]
postgresql,postgresql,prepare p1 as select f1 from abc,plancache.sql,SAME,,[]
postgresql,postgresql,execute p1,plancache.sql,SAME,,"[(123,)]"
postgresql,postgresql,set search_path = s2,plancache.sql,SAME,,[]
postgresql,postgresql,select f1 from abc,plancache.sql,SAME,,"[(456,)]"
postgresql,postgresql,execute p1,plancache.sql,SAME,,"[(456,)]"
postgresql,postgresql,alter table s1.abc add column f2 float8,plancache.sql,SAME,,[]
postgresql,postgresql,execute p1,plancache.sql,SAME,,"[(456,)]"
postgresql,postgresql,drop schema s1 cascade,plancache.sql,SAME,,[]
postgresql,postgresql,drop schema s2 cascade,plancache.sql,SAME,,[]
postgresql,postgresql,reset search_path,plancache.sql,SAME,,[]
postgresql,postgresql,create temp sequence seq,plancache.sql,SAME,,[]
postgresql,postgresql,prepare p2 as select nextval('seq'),plancache.sql,SAME,,[]
postgresql,postgresql,execute p2,plancache.sql,SAME,,"[(1,)]"
postgresql,postgresql,drop sequence seq,plancache.sql,SAME,,[]
postgresql,postgresql,create temp sequence seq,plancache.sql,SAME,,[]
postgresql,postgresql,execute p2,plancache.sql,SAME,,"[(1,)]"
postgresql,postgresql,"create temp table temptable as select * from generate_series(1,3) as f1",plancache.sql,SAME,,[]
postgresql,postgresql,create temp view vv as select * from temptable,plancache.sql,SAME,,[]
postgresql,postgresql,alter table pc_list_parted detach partition pc_list_part_null,plancache.sql,SAME,,[]
postgresql,postgresql,execute pstmt_def_insert(null),plancache.sql,SAME,,[]
postgresql,postgresql,execute pstmt_def_insert(1),plancache.sql,SAME,,[]
postgresql,postgresql,deallocate pstmt_def_insert,plancache.sql,SAME,,[]
postgresql,postgresql,create index on test_mode (a),plancache.sql,SAME,,[]
postgresql,postgresql,analyze test_mode,plancache.sql,SAME,,[]
postgresql,postgresql,prepare test_mode_pp (int) as select count(*) from test_mode where a = $1,plancache.sql,SAME,,[]
postgresql,postgresql,"select name, generic_plans, custom_plans from pg_prepared_statements   where  name = 'test_mode_pp'",plancache.sql,SAME,,"[('test_mode_pp', 0, 0)]"
postgresql,postgresql,set plan_cache_mode to auto,plancache.sql,SAME,,[]
postgresql,postgresql,explain (costs off) execute test_mode_pp(2),plancache.sql,SAME,,"[('Aggregate',), ('  ->  Index Only Scan using test_mode_a_idx on test_mode',), ('        Index Cond: (a = 2)',)]"
postgresql,postgresql,"select name, generic_plans, custom_plans from pg_prepared_statements   where  name = 'test_mode_pp'",plancache.sql,SAME,,"[('test_mode_pp', 0, 1)]"
postgresql,postgresql,set plan_cache_mode to force_generic_plan,plancache.sql,SAME,,[]
postgresql,postgresql,explain (costs off) execute test_mode_pp(2),plancache.sql,SAME,,"[('Aggregate',), ('  ->  Seq Scan on test_mode',), ('        Filter: (a = $1)',)]"
postgresql,postgresql,"select name, generic_plans, custom_plans from pg_prepared_statements   where  name = 'test_mode_pp'",plancache.sql,SAME,,"[('test_mode_pp', 1, 1)]"
postgresql,postgresql,set plan_cache_mode to auto,plancache.sql,SAME,,[]
postgresql,postgresql,execute test_mode_pp(1),plancache.sql,SAME,,"[(1000,)]"
postgresql,postgresql,execute test_mode_pp(1),plancache.sql,SAME,,"[(1000,)]"
postgresql,postgresql,execute test_mode_pp(1),plancache.sql,SAME,,"[(1000,)]"
postgresql,postgresql,execute test_mode_pp(1),plancache.sql,SAME,,"[(1000,)]"
postgresql,postgresql,"select name, generic_plans, custom_plans from pg_prepared_statements   where  name = 'test_mode_pp'",plancache.sql,SAME,,"[('test_mode_pp', 1, 5)]"
postgresql,postgresql,execute test_mode_pp(1),plancache.sql,SAME,,"[(1000,)]"
postgresql,postgresql,"select name, generic_plans, custom_plans from pg_prepared_statements   where  name = 'test_mode_pp'",plancache.sql,SAME,,"[('test_mode_pp', 2, 5)]"
postgresql,postgresql,explain (costs off) execute test_mode_pp(2),plancache.sql,SAME,,"[('Aggregate',), ('  ->  Seq Scan on test_mode',), ('        Filter: (a = $1)',)]"
postgresql,postgresql,set plan_cache_mode to force_custom_plan,plancache.sql,SAME,,[]
postgresql,postgresql,explain (costs off) execute test_mode_pp(2),plancache.sql,SAME,,"[('Aggregate',), ('  ->  Index Only Scan using test_mode_a_idx on test_mode',), ('        Index Cond: (a = 2)',)]"
postgresql,postgresql,"select name, generic_plans, custom_plans from pg_prepared_statements   where  name = 'test_mode_pp'",plancache.sql,SAME,,"[('test_mode_pp', 3, 6)]"
postgresql,postgresql,create unique index Room_rno on Room using btree (roomno bpchar_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create unique index WSlot_name on WSlot using btree (slotname bpchar_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create unique index PField_name on PField using btree (name text_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create unique index PSlot_name on PSlot using btree (slotname bpchar_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create unique index PLine_name on PLine using btree (slotname bpchar_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create unique index Hub_name on Hub using btree (name bpchar_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create unique index HSlot_name on HSlot using btree (slotname bpchar_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create index HSlot_hubname on HSlot using btree (hubname bpchar_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create unique index System_name on System using btree (name text_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create unique index IFace_name on IFace using btree (slotname bpchar_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,create unique index PHone_name on PHone using btree (slotname bpchar_ops),plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set backlink = 'WS.001.1a' where slotname = 'PS.base.a1',plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set backlink = 'WS.001.1b' where slotname = 'PS.base.a3',plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from WSlot where roomno = '001' order by slotname,plpgsql.sql,SAME,,"[('WS.001.1a           ', '001     ', '                    ', '                    '), ('WS.001.1b           ', '001     ', '                    ', '                    '), ('WS.001.2a           ', '001     ', '                    ', '                    '), ('WS.001.2b           ', '001     ', '                    ', '                    '), ('WS.001.3a           ', '001     ', '                    ', '                    '), ('WS.001.3b           ', '001     ', '                    ', '                    ')]"
postgresql,postgresql,select * from PSlot where slotname ~ 'PS.base.a' order by slotname,plpgsql.sql,SAME,,"[('PS.base.a1          ', 'PF0_1', '                    ', 'WS.001.1a           '), ('PS.base.a2          ', 'PF0_1', '                    ', '                    '), ('PS.base.a3          ', 'PF0_1', '                    ', 'WS.001.1b           '), ('PS.base.a4          ', 'PF0_1', '                    ', '                    '), ('PS.base.a5          ', 'PF0_1', '                    ', '                    '), ('PS.base.a6          ', 'PF0_1', '                    ', '                    ')]"
postgresql,postgresql,update PSlot set backlink = 'WS.001.2a' where slotname = 'PS.base.a3',plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from WSlot where roomno = '001' order by slotname,plpgsql.sql,SAME,,"[('WS.001.1a           ', '001     ', '                    ', '                    '), ('WS.001.1b           ', '001     ', '                    ', '                    '), ('WS.001.2a           ', '001     ', '                    ', '                    '), ('WS.001.2b           ', '001     ', '                    ', '                    '), ('WS.001.3a           ', '001     ', '                    ', '                    '), ('WS.001.3b           ', '001     ', '                    ', '                    ')]"
postgresql,postgresql,select * from PSlot where slotname ~ 'PS.base.a' order by slotname,plpgsql.sql,SAME,,"[('PS.base.a1          ', 'PF0_1', '                    ', 'WS.001.1a           '), ('PS.base.a2          ', 'PF0_1', '                    ', '                    '), ('PS.base.a3          ', 'PF0_1', '                    ', 'WS.001.2a           '), ('PS.base.a4          ', 'PF0_1', '                    ', '                    '), ('PS.base.a5          ', 'PF0_1', '                    ', '                    '), ('PS.base.a6          ', 'PF0_1', '                    ', '                    ')]"
postgresql,postgresql,update PSlot set backlink = 'WS.001.1b' where slotname = 'PS.base.a2',plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from WSlot where roomno = '001' order by slotname,plpgsql.sql,SAME,,"[('WS.001.1a           ', '001     ', '                    ', '                    '), ('WS.001.1b           ', '001     ', '                    ', '                    '), ('WS.001.2a           ', '001     ', '                    ', '                    '), ('WS.001.2b           ', '001     ', '                    ', '                    '), ('WS.001.3a           ', '001     ', '                    ', '                    '), ('WS.001.3b           ', '001     ', '                    ', '                    ')]"
postgresql,postgresql,select * from PSlot where slotname ~ 'PS.base.a' order by slotname,plpgsql.sql,SAME,,"[('PS.base.a1          ', 'PF0_1', '                    ', 'WS.001.1a           '), ('PS.base.a2          ', 'PF0_1', '                    ', 'WS.001.1b           '), ('PS.base.a3          ', 'PF0_1', '                    ', 'WS.001.2a           '), ('PS.base.a4          ', 'PF0_1', '                    ', '                    '), ('PS.base.a5          ', 'PF0_1', '                    ', '                    '), ('PS.base.a6          ', 'PF0_1', '                    ', '                    ')]"
postgresql,postgresql,update WSlot set backlink = 'PS.base.a4' where slotname = 'WS.001.2b',plpgsql.sql,SAME,,[]
postgresql,postgresql,update WSlot set backlink = 'PS.base.a6' where slotname = 'WS.001.3a',plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from WSlot where roomno = '001' order by slotname,plpgsql.sql,SAME,,"[('WS.001.1a           ', '001     ', '                    ', '                    '), ('WS.001.1b           ', '001     ', '                    ', '                    '), ('WS.001.2a           ', '001     ', '                    ', '                    '), ('WS.001.2b           ', '001     ', '                    ', 'PS.base.a4          '), ('WS.001.3a           ', '001     ', '                    ', 'PS.base.a6          '), ('WS.001.3b           ', '001     ', '                    ', '                    ')]"
postgresql,postgresql,select * from PSlot where slotname ~ 'PS.base.a' order by slotname,plpgsql.sql,SAME,,"[('PS.base.a1          ', 'PF0_1', '                    ', 'WS.001.1a           '), ('PS.base.a2          ', 'PF0_1', '                    ', 'WS.001.1b           '), ('PS.base.a3          ', 'PF0_1', '                    ', 'WS.001.2a           '), ('PS.base.a4          ', 'PF0_1', '                    ', '                    '), ('PS.base.a5          ', 'PF0_1', '                    ', '                    '), ('PS.base.a6          ', 'PF0_1', '                    ', '                    ')]"
postgresql,postgresql,update WSlot set backlink = 'PS.base.a6' where slotname = 'WS.001.3b',plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from WSlot where roomno = '001' order by slotname,plpgsql.sql,SAME,,"[('WS.001.1a           ', '001     ', '                    ', '                    '), ('WS.001.1b           ', '001     ', '                    ', '                    '), ('WS.001.2a           ', '001     ', '                    ', '                    '), ('WS.001.2b           ', '001     ', '                    ', 'PS.base.a4          '), ('WS.001.3a           ', '001     ', '                    ', 'PS.base.a6          '), ('WS.001.3b           ', '001     ', '                    ', 'PS.base.a6          ')]"
postgresql,postgresql,select * from PSlot where slotname ~ 'PS.base.a' order by slotname,plpgsql.sql,SAME,,"[('PS.base.a1          ', 'PF0_1', '                    ', 'WS.001.1a           '), ('PS.base.a2          ', 'PF0_1', '                    ', 'WS.001.1b           '), ('PS.base.a3          ', 'PF0_1', '                    ', 'WS.001.2a           '), ('PS.base.a4          ', 'PF0_1', '                    ', '                    '), ('PS.base.a5          ', 'PF0_1', '                    ', '                    '), ('PS.base.a6          ', 'PF0_1', '                    ', '                    ')]"
postgresql,postgresql,update WSlot set backlink = 'PS.base.a5' where slotname = 'WS.001.3a',plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from WSlot where roomno = '001' order by slotname,plpgsql.sql,SAME,,"[('WS.001.1a           ', '001     ', '                    ', '                    '), ('WS.001.1b           ', '001     ', '                    ', '                    '), ('WS.001.2a           ', '001     ', '                    ', '                    '), ('WS.001.2b           ', '001     ', '                    ', 'PS.base.a4          '), ('WS.001.3a           ', '001     ', '                    ', 'PS.base.a5          '), ('WS.001.3b           ', '001     ', '                    ', 'PS.base.a6          ')]"
postgresql,postgresql,select * from PSlot where slotname ~ 'PS.base.a' order by slotname,plpgsql.sql,SAME,,"[('PS.base.a1          ', 'PF0_1', '                    ', 'WS.001.1a           '), ('PS.base.a2          ', 'PF0_1', '                    ', 'WS.001.1b           '), ('PS.base.a3          ', 'PF0_1', '                    ', 'WS.001.2a           '), ('PS.base.a4          ', 'PF0_1', '                    ', '                    '), ('PS.base.a5          ', 'PF0_1', '                    ', '                    '), ('PS.base.a6          ', 'PF0_1', '                    ', '                    ')]"
postgresql,postgresql,update PField set name = 'PF0_2' where name = 'PF0_X',plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from PSlot order by slotname,plpgsql.sql,SAME,,"[('PS.base.a1          ', 'PF0_1', '                    ', 'WS.001.1a           '), ('PS.base.a2          ', 'PF0_1', '                    ', 'WS.001.1b           '), ('PS.base.a3          ', 'PF0_1', '                    ', 'WS.001.2a           '), ('PS.base.a4          ', 'PF0_1', '                    ', '                    '), ('PS.base.a5          ', 'PF0_1', '                    ', '                    '), ('PS.base.a6          ', 'PF0_1', '                    ', '                    '), ('PS.base.b1          ', 'PF0_1', '                    ', 'WS.002.1a           '), ('PS.base.b2          ', 'PF0_1', '                    ', 'WS.002.1b           '), ('PS.base.b3          ', 'PF0_1', '                    ', 'WS.002.2a           '), ('PS.base.b4          ', 'PF0_1', '                    ', 'WS.002.2b           '), ('PS.base.b5          ', 'PF0_1', '                    ', 'WS.002.3a           '), ('PS.base.b6          ', 'PF0_1', '                    ', 'WS.002.3b           '), ('PS.base.c1          ', 'PF0_1', '                    ', 'WS.003.1a           '), ('PS.base.c2          ', 'PF0_1', '                    ', 'WS.003.1b           '), ('PS.base.c3          ', 'PF0_1', '                    ', 'WS.003.2a           '), ('PS.base.c4          ', 'PF0_1', '                    ', 'WS.003.2b           '), ('PS.base.c5          ', 'PF0_1', '                    ', 'WS.003.3a           '), ('PS.base.c6          ', 'PF0_1', '                    ', 'WS.003.3b           '), ('PS.base.ta1         ', 'PF0_X', '                    ', '                    '), ('PS.base.ta2         ', 'PF0_X', '                    ', '                    '), ('PS.base.ta3         ', 'PF0_X', '                    ', '                    '), ('PS.base.ta4         ', 'PF0_X', '                    ', '                    '), ('PS.base.ta5         ', 'PF0_X', '                    ', '                    '), ('PS.base.ta6         ', 'PF0_X', '                    ', '                    '), ('PS.base.tb1         ', 'PF0_X', '                    ', '                    '), ('PS.base.tb2         ', 'PF0_X', '                    ', '                    '), ('PS.base.tb3         ', 'PF0_X', '                    ', '                    '), ('PS.base.tb4         ', 'PF0_X', '                    ', '                    '), ('PS.base.tb5         ', 'PF0_X', '                    ', '                    '), ('PS.base.tb6         ', 'PF0_X', '                    ', '                    '), ('PS.first.a1         ', 'PF1_1', '                    ', 'WS.101.1a           '), ('PS.first.a2         ', 'PF1_1', '                    ', 'WS.101.1b           '), ('PS.first.a3         ', 'PF1_1', '                    ', 'WS.101.2a           '), ('PS.first.a4         ', 'PF1_1', '                    ', 'WS.101.2b           '), ('PS.first.a5         ', 'PF1_1', '                    ', 'WS.101.3a           '), ('PS.first.a6         ', 'PF1_1', '                    ', 'WS.101.3b           '), ('PS.first.b1         ', 'PF1_1', '                    ', 'WS.102.1a           '), ('PS.first.b2         ', 'PF1_1', '                    ', 'WS.102.1b           '), ('PS.first.b3         ', 'PF1_1', '                    ', 'WS.102.2a           '), ('PS.first.b4         ', 'PF1_1', '                    ', 'WS.102.2b           '), ('PS.first.b5         ', 'PF1_1', '                    ', 'WS.102.3a           '), ('PS.first.b6         ', 'PF1_1', '                    ', 'WS.102.3b           '), ('PS.first.c1         ', 'PF1_1', '                    ', 'WS.105.1a           '), ('PS.first.c2         ', 'PF1_1', '                    ', 'WS.105.1b           '), ('PS.first.c3         ', 'PF1_1', '                    ', 'WS.105.2a           '), ('PS.first.c4         ', 'PF1_1', '                    ', 'WS.105.2b           '), ('PS.first.c5         ', 'PF1_1', '                    ', 'WS.105.3a           '), ('PS.first.c6         ', 'PF1_1', '                    ', 'WS.105.3b           '), ('PS.first.d1         ', 'PF1_1', '                    ', 'WS.106.1a           '), ('PS.first.d2         ', 'PF1_1', '                    ', 'WS.106.1b           '), ('PS.first.d3         ', 'PF1_1', '                    ', 'WS.106.2a           '), ('PS.first.d4         ', 'PF1_1', '                    ', 'WS.106.2b           '), ('PS.first.d5         ', 'PF1_1', '                    ', 'WS.106.3a           '), ('PS.first.d6         ', 'PF1_1', '                    ', 'WS.106.3b           '), ('PS.first.ta1        ', 'PF1_2', '                    ', '                    '), ('PS.first.ta2        ', 'PF1_2', '                    ', '                    '), ('PS.first.ta3        ', 'PF1_2', '                    ', '                    '), ('PS.first.ta4        ', 'PF1_2', '                    ', '                    '), ('PS.first.ta5        ', 'PF1_2', '                    ', '                    '), ('PS.first.ta6        ', 'PF1_2', '                    ', '                    '), ('PS.first.tb1        ', 'PF1_2', '                    ', '                    '), ('PS.first.tb2        ', 'PF1_2', '                    ', '                    '), ('PS.first.tb3        ', 'PF1_2', '                    ', '                    '), ('PS.first.tb4        ', 'PF1_2', '                    ', '                    '), ('PS.first.tb5        ', 'PF1_2', '                    ', '                    '), ('PS.first.tb6        ', 'PF1_2', '                    ', '                    ')]"
postgresql,postgresql,select * from WSlot order by slotname,plpgsql.sql,SAME,,"[('WS.001.1a           ', '001     ', '                    ', '                    '), ('WS.001.1b           ', '001     ', '                    ', '                    '), ('WS.001.2a           ', '001     ', '                    ', '                    '), ('WS.001.2b           ', '001     ', '                    ', 'PS.base.a4          '), ('WS.001.3a           ', '001     ', '                    ', 'PS.base.a5          '), ('WS.001.3b           ', '001     ', '                    ', 'PS.base.a6          '), ('WS.002.1a           ', '002     ', '                    ', '                    '), ('WS.002.1b           ', '002     ', '                    ', '                    '), ('WS.002.2a           ', '002     ', '                    ', '                    '), ('WS.002.2b           ', '002     ', '                    ', '                    '), ('WS.002.3a           ', '002     ', '                    ', '                    '), ('WS.002.3b           ', '002     ', '                    ', '                    '), ('WS.003.1a           ', '003     ', '                    ', '                    '), ('WS.003.1b           ', '003     ', '                    ', '                    '), ('WS.003.2a           ', '003     ', '                    ', '                    '), ('WS.003.2b           ', '003     ', '                    ', '                    '), ('WS.003.3a           ', '003     ', '                    ', '                    '), ('WS.003.3b           ', '003     ', '                    ', '                    '), ('WS.101.1a           ', '101     ', '                    ', '                    '), ('WS.101.1b           ', '101     ', '                    ', '                    '), ('WS.101.2a           ', '101     ', '                    ', '                    '), ('WS.101.2b           ', '101     ', '                    ', '                    '), ('WS.101.3a           ', '101     ', '                    ', '                    '), ('WS.101.3b           ', '101     ', '                    ', '                    '), ('WS.102.1a           ', '102     ', '                    ', '                    '), ('WS.102.1b           ', '102     ', '                    ', '                    '), ('WS.102.2a           ', '102     ', '                    ', '                    '), ('WS.102.2b           ', '102     ', '                    ', '                    '), ('WS.102.3a           ', '102     ', '                    ', '                    '), ('WS.102.3b           ', '102     ', '                    ', '                    '), ('WS.105.1a           ', '105     ', '                    ', '                    '), ('WS.105.1b           ', '105     ', '                    ', '                    '), ('WS.105.2a           ', '105     ', '                    ', '                    '), ('WS.105.2b           ', '105     ', '                    ', '                    '), ('WS.105.3a           ', '105     ', '                    ', '                    '), ('WS.105.3b           ', '105     ', '                    ', '                    '), ('WS.106.1a           ', '106     ', '                    ', '                    '), ('WS.106.1b           ', '106     ', '                    ', '                    '), ('WS.106.2a           ', '106     ', '                    ', '                    '), ('WS.106.2b           ', '106     ', '                    ', '                    '), ('WS.106.3a           ', '106     ', '                    ', '                    '), ('WS.106.3b           ', '106     ', '                    ', '                    ')]"
postgresql,postgresql,update PSlot set slotlink = 'PS.base.ta1' where slotname = 'PS.base.a1',plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set slotlink = 'PS.base.ta5' where slotname = 'PS.base.b1',plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set slotlink = 'PS.base.tb2' where slotname = 'PS.base.b3',plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set slotlink = 'PS.base.ta2' where slotname = 'PS.base.a3',plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set slotlink = 'HS.base.hub1.1' where slotname = 'PS.base.b2',plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set backlink = 'WS.not.there' where slotname = 'PS.base.a1',plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set backlink = 'XX.illegal' where slotname = 'PS.base.a1',plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set slotlink = 'PS.not.there' where slotname = 'PS.base.a1',plpgsql.sql,SAME,,[]
postgresql,postgresql,update PSlot set slotlink = 'XX.illegal' where slotname = 'PS.base.a1',plpgsql.sql,SAME,,[]
postgresql,postgresql,delete from HSlot,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,update found_test_tbl set a = 100 where a = 1,plpgsql.sql,SAME,,[]
postgresql,postgresql,delete from found_test_tbl where a = 9999,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from found_test_tbl,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM perform_test,plpgsql.sql,SAME,,[]
postgresql,postgresql,"create temp table users(login text, id serial)",plpgsql.sql,SAME,,[]
postgresql,postgresql,begin,plpgsql.sql,SAME,,[]
postgresql,postgresql,commit,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,"create type eitype as (i integer, y integer)",plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,drop type eitype cascade,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,"create temp table foo (f1 int, f2 int)",plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from foo,plpgsql.sql,SAME,,"[(1, 2), (3, 4)]"
postgresql,postgresql,set plpgsql.print_strict_params to true,plpgsql.sql,SAME,,[]
postgresql,postgresql,reset plpgsql.print_strict_params,plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_warnings to 'all',plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_warnings to 'none',plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_errors to 'all',plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_errors to 'none',plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_warnings to 'shadowed_variables',plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_warnings to 'shadowed_variables',plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_errors to 'shadowed_variables',plpgsql.sql,SAME,,[]
postgresql,postgresql,reset plpgsql.extra_errors,plpgsql.sql,SAME,,[]
postgresql,postgresql,reset plpgsql.extra_warnings,plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_warnings to 'too_many_rows',plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_errors to 'too_many_rows',plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,reset plpgsql.extra_errors,plpgsql.sql,SAME,,[]
postgresql,postgresql,reset plpgsql.extra_warnings,plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_warnings to 'strict_multi_assignment',plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.extra_errors to 'strict_multi_assignment',plpgsql.sql,SAME,,[]
postgresql,postgresql,alter table test_01 drop column a,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,reset plpgsql.extra_errors,plpgsql.sql,SAME,,[]
postgresql,postgresql,reset plpgsql.extra_warnings,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,"create type record_type as (x text, y int, z boolean)",plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,"create temp table forc_test as   select n as i, n as j from generate_series(1,10) n",plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from forc_test,plpgsql.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,select * from forc_test,plpgsql.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,alter table tabwithcols drop column b,plpgsql.sql,SAME,,[]
postgresql,postgresql,alter table tabwithcols drop column d,plpgsql.sql,SAME,,[]
postgresql,postgresql,alter table tabwithcols add column d int,plpgsql.sql,SAME,,[]
postgresql,postgresql,"create type compostype as (x int, y varchar)",plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,drop type compostype,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,create function error1(text) returns text language sql as $$ SELECT relname::text FROM pg_class c WHERE c.oid = $1::regclass $$,plpgsql.sql,SAME,,[]
postgresql,postgresql,BEGIN,plpgsql.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT a,plpgsql.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO a,plpgsql.sql,SAME,,[]
postgresql,postgresql,rollback,plpgsql.sql,SAME,,[]
postgresql,postgresql,drop function error1(text),plpgsql.sql,SAME,,[]
postgresql,postgresql,create function sql_to_date(integer) returns date as $$ select $1::text::date $$ language sql immutable strict,plpgsql.sql,SAME,,[]
postgresql,postgresql,begin,plpgsql.sql,SAME,,[]
postgresql,postgresql,commit,plpgsql.sql,SAME,,[]
postgresql,postgresql,drop function sql_to_date(integer) cascade,plpgsql.sql,SAME,,[]
postgresql,postgresql,begin,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,set standard_conforming_strings = off,plpgsql.sql,SAME,,[]
postgresql,postgresql,set standard_conforming_strings = on,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.variable_conflict = error,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,"create type xy_tuple AS (x int, y int)",plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,drop type xy_tuple,plpgsql.sql,SAME,,[]
postgresql,postgresql,"create temp table rtype (id int, ar text[])",plpgsql.sql,SAME,,[]
postgresql,postgresql,create domain orderedarray as int[2]   constraint sorted check (value[1] < value[2]),plpgsql.sql,SAME,,[]
postgresql,postgresql,"select '{1,2}'::orderedarray",plpgsql.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,set plpgsql.check_asserts = off,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,reset plpgsql.check_asserts,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,end,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,UPDATE transition_table_base   SET val = '*' || val || '*'   WHERE id BETWEEN 2 AND 3,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,ANALYZE transition_table_level1,plpgsql.sql,SAME,,[]
postgresql,postgresql,ANALYZE transition_table_level2,plpgsql.sql,SAME,,[]
postgresql,postgresql,ANALYZE transition_table_status,plpgsql.sql,SAME,,[]
postgresql,postgresql,ANALYZE transition_table_level1,plpgsql.sql,SAME,,[]
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,DELETE FROM transition_table_level2   WHERE level2_no BETWEEN 301 AND 305,plpgsql.sql,SAME,,[]
postgresql,postgresql,DELETE FROM transition_table_level1   WHERE level1_no = 25,plpgsql.sql,SAME,,[]
postgresql,postgresql,UPDATE transition_table_level1 SET level1_no = -1   WHERE level1_no = 30,plpgsql.sql,SAME,,[]
postgresql,postgresql,UPDATE transition_table_level2 SET parent_no = 2000   WHERE level2_no = 40,plpgsql.sql,SAME,,[]
postgresql,postgresql,DELETE FROM transition_table_level1   WHERE level1_no BETWEEN 201 AND 1000,plpgsql.sql,SAME,,[]
postgresql,postgresql,DELETE FROM transition_table_level1   WHERE level1_no BETWEEN 100000000 AND 100000010,plpgsql.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM transition_table_level1,plpgsql.sql,SAME,,"[(199,)]"
postgresql,postgresql,DELETE FROM transition_table_level2   WHERE level2_no BETWEEN 211 AND 220,plpgsql.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM transition_table_level2,plpgsql.sql,SAME,,"[(9985,)]"
postgresql,postgresql,END,plpgsql.sql,SAME,,[]
postgresql,postgresql,UPDATE alter_table_under_transition_tables   SET name = name || name,plpgsql.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE alter_table_under_transition_tables   ALTER COLUMN name TYPE int USING name::integer,plpgsql.sql,SAME,,[]
postgresql,postgresql,UPDATE alter_table_under_transition_tables   SET name = (name::text || name::text)::integer,plpgsql.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE alter_table_under_transition_tables   DROP column name,plpgsql.sql,SAME,,[]
postgresql,postgresql,UPDATE alter_table_under_transition_tables   SET id = id,plpgsql.sql,SAME,,[]
postgresql,postgresql,UPDATE multi_test SET i = i,plpgsql.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE FUNCTION get_from_partitioned_table(partitioned_table.a%type) RETURNS partitioned_table AS $$ DECLARE     a_val partitioned_table.a%TYPE;     result partitioned_table%ROWTYPE; BEGIN     a_val := $1;     SELECT * INTO result FROM partitioned_table WHERE a = a_val;     RETURN result; END; $$ LANGUAGE plpgsql,plpgsql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM get_from_partitioned_table(1) AS t,plpgsql.sql,SAME,,"[(1, 'Row 1')]"
postgresql,postgresql,CREATE OR REPLACE FUNCTION list_partitioned_table() RETURNS SETOF public.partitioned_table.a%TYPE AS $$ DECLARE     row public.partitioned_table%ROWTYPE;     a_val public.partitioned_table.a%TYPE; BEGIN     FOR row IN SELECT * FROM public.partitioned_table ORDER BY a LOOP         a_val := row.a;         RETURN NEXT a_val;     END LOOP;     RETURN; END; $$ LANGUAGE plpgsql,plpgsql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM list_partitioned_table() AS t,plpgsql.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,SET extra_float_digits = 0,point.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE point_gist_tbl(f1 point),point.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX point_gist_tbl_index ON point_gist_tbl USING gist (f1),point.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO true,point.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan TO false,point.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan TO false,point.sql,SAME,,[]
postgresql,postgresql,"SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000009,0.0000009)'::point",point.sql,SAME,,"[(1002,)]"
postgresql,postgresql,"SELECT COUNT(*) FROM point_gist_tbl WHERE f1 <@ '(0.0000009,0.0000009),(0.0000009,0.0000009)'::box",point.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000018,0.0000018)'::point",point.sql,SAME,,"[(1,)]"
postgresql,postgresql,SET enable_seqscan TO false,point.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan TO true,point.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan TO true,point.sql,SAME,,[]
postgresql,postgresql,"SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000009,0.0000009)'::point",point.sql,SAME,,"[(1002,)]"
postgresql,postgresql,"SELECT COUNT(*) FROM point_gist_tbl WHERE f1 <@ '(0.0000009,0.0000009),(0.0000009,0.0000009)'::box",point.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000018,0.0000018)'::point",point.sql,SAME,,"[(1,)]"
postgresql,postgresql,RESET enable_seqscan,point.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,point.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,point.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_input_is_valid('1,y', 'point')",point.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('1,y', 'point')",point.sql,SAME,,"[('invalid input syntax for type point: ""1,y""', None, None, '22P02')]"
postgresql,postgresql,SELECT * FROM POLYGON_TBL,polygon.sql,SAME,,"[('((2,0),(2,4),(0,0))',), ('((3,1),(3,3),(1,0))',), ('((1,2),(3,4),(5,6),(7,8))',), ('((7,8),(5,6),(3,4),(1,2))',), ('((1,2),(7,8),(5,6),(3,-4))',), ('((0,0))',), ('((0,1),(0,1))',)]"
postgresql,postgresql,CREATE INDEX quad_poly_tbl_idx ON quad_poly_tbl USING spgist(p),polygon.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = ON,polygon.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = OFF,polygon.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,polygon.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE quad_poly_tbl_ord_seq2 AS SELECT rank() OVER (ORDER BY p <-> point '123,456') n, p <-> point '123,456' dist, id FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = OFF,polygon.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan = OFF,polygon.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = ON,polygon.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p << polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p << '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p << '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p << polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(3890,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p &< polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p &< '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p &< '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p &< polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(7900,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p && polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p && '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p && '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p && polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(977,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p &> polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p &> '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p &> '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p &> polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(7000,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p >> polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p >> '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p >> '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p >> polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(2990,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p <<| polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p <<| '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p <<| '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p <<| polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(1890,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p &<| polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p &<| '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p &<| '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p &<| polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(6900,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p |&> polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p |&> '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p |&> '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p |&> polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(9000,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p |>> polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p |>> '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p |>> '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p |>> polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(3990,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p <@ '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p <@ '((300,300),(400,600),(600,500),(700,200))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[(831,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p @> polygon '((340,550),(343,552),(341,553))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p @> '((340,550),(343,552),(341,553))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p @> '((340,550),(343,552),(341,553))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p @> polygon '((340,550),(343,552),(341,553))'",polygon.sql,SAME,,"[(1,)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT count(*) FROM quad_poly_tbl WHERE p ~= polygon '((200, 300),(210, 310),(230, 290))'",polygon.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), (""        Recheck Cond: (p ~= '((200,300),(210,310),(230,290))'::polygon)"",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), (""              Index Cond: (p ~= '((200,300),(210,310),(230,290))'::polygon)"",)]"
postgresql,postgresql,"SELECT count(*) FROM quad_poly_tbl WHERE p ~= polygon '((200, 300),(210, 310),(230, 290))'",polygon.sql,SAME,,"[(1000,)]"
postgresql,postgresql,SET enable_indexscan = ON,polygon.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = OFF,polygon.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT rank() OVER (ORDER BY p <-> point '123,456') n, p <-> point '123,456' dist, id FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,"[('WindowAgg',), ('  ->  Index Scan using quad_poly_tbl_idx on quad_poly_tbl',), (""        Index Cond: (p <@ '((300,300),(400,600),(600,500),(700,200))'::polygon)"",), (""        Order By: (p <-> '(123,456)'::point)"",)]"
postgresql,postgresql,"CREATE TEMP TABLE quad_poly_tbl_ord_idx2 AS SELECT rank() OVER (ORDER BY p <-> point '123,456') n, p <-> point '123,456' dist, id FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))'",polygon.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM quad_poly_tbl_ord_seq2 seq FULL JOIN quad_poly_tbl_ord_idx2 idx 	ON seq.n = idx.n AND seq.id = idx.id AND 		(seq.dist = idx.dist OR seq.dist IS NULL AND idx.dist IS NULL) WHERE seq.id IS NULL OR idx.id IS NULL,polygon.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,polygon.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,polygon.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,polygon.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_input_is_valid('(2.0,0.8,0.1)', 'polygon')",polygon.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('(2.0,0.8,0.1)', 'polygon')",polygon.sql,SAME,,"[('invalid input syntax for type polygon: ""(2.0,0.8,0.1)""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('(2.0,xyz)', 'polygon')",polygon.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('(2.0,xyz)', 'polygon')",polygon.sql,SAME,,"[('invalid input syntax for type polygon: ""(2.0,xyz)""', None, None, '22P02')]"
postgresql,postgresql,create function polyf(x anyelement) returns anyelement as $$   select x + 1 $$ language sql,polymorphism.sql,SAME,,[]
postgresql,postgresql,"select polyf(42) as int, polyf(4.5) as num",polymorphism.sql,SAME,,"[(43, Decimal('5.5'))]"
postgresql,postgresql,drop function polyf(x anyelement),polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function polyf(x anyelement) returns anyarray as $$   select array[x + 1, x + 2] $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select polyf(42) as int, polyf(4.5) as num",polymorphism.sql,SAME,,"[([43, 44], [Decimal('5.5'), Decimal('6.5')])]"
postgresql,postgresql,drop function polyf(x anyelement),polymorphism.sql,SAME,,[]
postgresql,postgresql,create function polyf(x anyarray) returns anyelement as $$   select x[1] $$ language sql,polymorphism.sql,SAME,,[]
postgresql,postgresql,"select polyf(array[2,4]) as int, polyf(array[4.5, 7.7]) as num",polymorphism.sql,SAME,,"[(2, Decimal('4.5'))]"
postgresql,postgresql,drop function polyf(x anyarray),polymorphism.sql,SAME,,[]
postgresql,postgresql,create function polyf(x anyarray) returns anyarray as $$   select x $$ language sql,polymorphism.sql,SAME,,[]
postgresql,postgresql,"select polyf(array[2,4]) as int, polyf(array[4.5, 7.7]) as num",polymorphism.sql,SAME,,"[([2, 4], [Decimal('4.5'), Decimal('7.7')])]"
postgresql,postgresql,drop function polyf(x anyarray),polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function polyf(x anyrange) returns anyarray as $$   select array[lower(x), upper(x)] $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,drop function polyf(x anyrange),polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function polyf(x anycompatible, y anycompatible) returns anycompatiblearray as $$   select array[x, y] $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select polyf(2, 4) as int, polyf(2, 4.5) as num",polymorphism.sql,SAME,,"[([2, 4], [Decimal('2'), Decimal('4.5')])]"
postgresql,postgresql,"drop function polyf(x anycompatible, y anycompatible)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function polyf(x anycompatiblerange, y anycompatible, z anycompatible) returns anycompatiblearray as $$   select array[lower(x), upper(x), y, z] $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"drop function polyf(x anycompatiblerange, y anycompatible, z anycompatible)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function polyf(x anycompatiblemultirange, y anycompatible, z anycompatible) returns anycompatiblearray as $$   select array[lower(x), upper(x), y, z] $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"drop function polyf(x anycompatiblemultirange, y anycompatible, z anycompatible)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function polyf(x anycompatiblerange, y anycompatiblearray) returns anycompatiblerange as $$   select x $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"drop function polyf(x anycompatiblerange, y anycompatiblearray)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function polyf(x anycompatiblemultirange, y anycompatiblearray) returns anycompatiblemultirange as $$   select x $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"drop function polyf(x anycompatiblemultirange, y anycompatiblearray)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function polyf(a anyelement, b anyarray,                       c anycompatible, d anycompatible,                       OUT x anyarray, OUT y anycompatiblearray) as $$   select a || b, array[c, d] $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x), y, pg_typeof(y)   from polyf(11, array[1, 2], 42, 34.5)",polymorphism.sql,SAME,,"[([11, 1, 2], 'integer[]', [Decimal('42'), Decimal('34.5')], 'numeric[]')]"
postgresql,postgresql,"select x, pg_typeof(x), y, pg_typeof(y)   from polyf(11, array[1, 2], point(1,2), point(3,4))",polymorphism.sql,SAME,,"[([11, 1, 2], 'integer[]', '{""(1,2)"",""(3,4)""}', 'point[]')]"
postgresql,postgresql,"select x, pg_typeof(x), y, pg_typeof(y)   from polyf(11, '{1,2}', point(1,2), '(3,4)')",polymorphism.sql,SAME,,"[([11, 1, 2], 'integer[]', '{""(1,2)"",""(3,4)""}', 'point[]')]"
postgresql,postgresql,"drop function polyf(a anyelement, b anyarray,                     c anycompatible, d anycompatible)",polymorphism.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION stfp(anyarray) RETURNS anyarray AS 'select $1' LANGUAGE SQL,polymorphism.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION stfnp(int[]) RETURNS int[] AS 'select $1' LANGUAGE SQL,polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION tfp(anyarray,anyelement) RETURNS anyarray AS 'select $1 || $2' LANGUAGE SQL",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION tfnp(int[],int) RETURNS int[] AS 'select $1 || $2' LANGUAGE SQL",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION tf1p(anyarray,int) RETURNS anyarray AS 'select $1' LANGUAGE SQL",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION tf2p(int[],anyelement) RETURNS int[] AS 'select $1' LANGUAGE SQL",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION sum3(anyelement,anyelement,anyelement) returns anyelement AS 'select $1+$2+$3' language sql strict",polymorphism.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION ffp(anyarray) RETURNS anyarray AS 'select $1' LANGUAGE SQL,polymorphism.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION ffnp(int[]) returns int[] as 'select $1' LANGUAGE SQL,polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp01a(*) (SFUNC = stfnp, STYPE = int4[],   FINALFUNC = ffp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp03a(*) (SFUNC = stfp, STYPE = int4[],   FINALFUNC = ffp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp03b(*) (SFUNC = stfp, STYPE = int4[],   INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp05a(BASETYPE = int, SFUNC = tfnp, STYPE = int[],   FINALFUNC = ffp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp06a(BASETYPE = int, SFUNC = tf2p, STYPE = int[],   FINALFUNC = ffp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp08a(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[],   FINALFUNC = ffp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp09a(BASETYPE = int, SFUNC = tf1p, STYPE = int[],   FINALFUNC = ffp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp09b(BASETYPE = int, SFUNC = tf1p, STYPE = int[],   INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp10a(BASETYPE = int, SFUNC = tfp, STYPE = int[],   FINALFUNC = ffp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp10b(BASETYPE = int, SFUNC = tfp, STYPE = int[],   INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp20a(BASETYPE = anyelement, SFUNC = tfp,   STYPE = anyarray, FINALFUNC = ffp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggp20b(BASETYPE = anyelement, SFUNC = tfp,   STYPE = anyarray, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn01a(*) (SFUNC = stfnp, STYPE = int4[],   FINALFUNC = ffnp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn01b(*) (SFUNC = stfnp, STYPE = int4[],   INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn03a(*) (SFUNC = stfp, STYPE = int4[],   FINALFUNC = ffnp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn05a(BASETYPE = int, SFUNC = tfnp, STYPE = int[],   FINALFUNC = ffnp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn05b(BASETYPE = int, SFUNC = tfnp, STYPE = int[],   INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn06a(BASETYPE = int, SFUNC = tf2p, STYPE = int[],   FINALFUNC = ffnp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn06b(BASETYPE = int, SFUNC = tf2p, STYPE = int[],   INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn08a(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[],   FINALFUNC = ffnp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn08b(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[],   INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn09a(BASETYPE = int, SFUNC = tf1p, STYPE = int[],   FINALFUNC = ffnp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE myaggn10a(BASETYPE = int, SFUNC = tfp, STYPE = int[],   FINALFUNC = ffnp, INITCOND = '{}')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE mysum2(anyelement,anyelement) (SFUNC = sum3,   STYPE = anyelement, INITCOND = '0')",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create temp table t(f1 int, f2 int[], f3 text)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select f3, myaggp01a(*) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggp03a(*) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggp03b(*) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggp05a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', [1, 2, 3]), ('b', [1, 2, 3]), ('c', [1, 2])]"
postgresql,postgresql,"select f3, myaggp06a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggp08a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggp09a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggp09b(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggp10a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', [1, 2, 3]), ('b', [1, 2, 3]), ('c', [1, 2])]"
postgresql,postgresql,"select f3, myaggp10b(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', [1, 2, 3]), ('b', [1, 2, 3]), ('c', [1, 2])]"
postgresql,postgresql,"select f3, myaggp20a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', [1, 2, 3]), ('b', [1, 2, 3]), ('c', [1, 2])]"
postgresql,postgresql,"select f3, myaggp20b(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', [1, 2, 3]), ('b', [1, 2, 3]), ('c', [1, 2])]"
postgresql,postgresql,"select f3, myaggn01a(*) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggn01b(*) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggn03a(*) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggn05a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', [1, 2, 3]), ('b', [1, 2, 3]), ('c', [1, 2])]"
postgresql,postgresql,"select f3, myaggn05b(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', [1, 2, 3]), ('b', [1, 2, 3]), ('c', [1, 2])]"
postgresql,postgresql,"select f3, myaggn06a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggn06b(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggn08a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggn08b(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggn09a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', []), ('b', []), ('c', [])]"
postgresql,postgresql,"select f3, myaggn10a(f1) from t group by f3 order by f3",polymorphism.sql,SAME,,"[('a', [1, 2, 3]), ('b', [1, 2, 3]), ('c', [1, 2])]"
postgresql,postgresql,"select mysum2(f1, f1 + 1) from t",polymorphism.sql,SAME,,"[(38,)]"
postgresql,postgresql,"create function sql_if(bool, anyelement, anyelement) returns anyelement as $$ select case when $1 then $2 else $3 end $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE array_larger_accum (anyarray) (     sfunc = array_larger,     stype = anyarray,     initcond = '{}' )",polymorphism.sql,SAME,,[]
postgresql,postgresql,"SELECT array_larger_accum(i) FROM (VALUES (ARRAY[1,2]), (ARRAY[3,4])) as t(i)",polymorphism.sql,SAME,,"[([3, 4],)]"
postgresql,postgresql,"SELECT array_larger_accum(i) FROM (VALUES (ARRAY[row(1,2),row(3,4)]), (ARRAY[row(5,6),row(7,8)])) as t(i)",polymorphism.sql,SAME,,"[('{""(5,6)"",""(7,8)""}',)]"
postgresql,postgresql,end,polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function first_el_transfn(anyarray, anyelement) returns anyarray as 'select $1 || $2' language sql immutable",polymorphism.sql,SAME,,[]
postgresql,postgresql,create function first_el(anyarray) returns anyelement as 'select $1[1]' language sql strict immutable,polymorphism.sql,SAME,,[]
postgresql,postgresql,"create aggregate first_el_agg_f8(float8) (   SFUNC = array_append,   STYPE = float8[],   FINALFUNC = first_el )",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create aggregate first_el_agg_any(anyelement) (   SFUNC = first_el_transfn,   STYPE = anyarray,   FINALFUNC = first_el )",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select first_el_agg_f8(x::float8) from generate_series(1,10) x",polymorphism.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,"select first_el_agg_any(x) from generate_series(1,10) x",polymorphism.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select first_el_agg_f8(x::float8) over(order by x) from generate_series(1,10) x",polymorphism.sql,SAME,,"[(1.0,), (1.0,), (1.0,), (1.0,), (1.0,), (1.0,), (1.0,), (1.0,), (1.0,), (1.0,)]"
postgresql,postgresql,"select first_el_agg_any(x) over(order by x) from generate_series(1,10) x",polymorphism.sql,SAME,,"[(1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,)]"
postgresql,postgresql,select distinct array_ndims(histogram_bounds) from pg_stats where histogram_bounds is not null,polymorphism.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select array_in('{1,2,3}','int4'::regtype,-1)",polymorphism.sql,SAME,,"[('{1,2,3}',)]"
postgresql,postgresql,"create function myleast(variadic anyarray) returns anyelement as $$   select min($1[i]) from generate_subscripts($1,1) g(i) $$ language sql immutable strict",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select myleast(10, 1, 20, 33)",polymorphism.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select myleast(1.1, 0.22, 0.55)",polymorphism.sql,SAME,,"[(Decimal('0.22'),)]"
postgresql,postgresql,select myleast('z'::text),polymorphism.sql,SAME,,"[('z',)]"
postgresql,postgresql,"select myleast(variadic array[1,2,3,4,-1])",polymorphism.sql,SAME,,"[(-1,)]"
postgresql,postgresql,"select myleast(variadic array[1.1, -5.5])",polymorphism.sql,SAME,,"[(Decimal('-5.5'),)]"
postgresql,postgresql,select myleast(variadic array[]::int[]),polymorphism.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select concat('%', 1, 2, 3, 4, 5)",polymorphism.sql,SAME,,"[('%12345',)]"
postgresql,postgresql,"select concat('|', 'a'::text, 'b', 'c')",polymorphism.sql,SAME,,"[('|abc',)]"
postgresql,postgresql,select pg_typeof(null),polymorphism.sql,SAME,,"[('unknown',)]"
postgresql,postgresql,select pg_typeof(0),polymorphism.sql,SAME,,"[('integer',)]"
postgresql,postgresql,select pg_typeof(0.0),polymorphism.sql,SAME,,"[('numeric',)]"
postgresql,postgresql,select pg_typeof(1+1 = 2),polymorphism.sql,SAME,,"[('boolean',)]"
postgresql,postgresql,select pg_typeof('x'),polymorphism.sql,SAME,,"[('unknown',)]"
postgresql,postgresql,select pg_typeof('' || ''),polymorphism.sql,SAME,,"[('text',)]"
postgresql,postgresql,select pg_typeof(pg_typeof(0)),polymorphism.sql,SAME,,"[('regtype',)]"
postgresql,postgresql,"select pg_typeof(array[1.2,55.5])",polymorphism.sql,SAME,,"[('numeric[]',)]"
postgresql,postgresql,"select pg_typeof(myleast(10, 1, 20, 33))",polymorphism.sql,SAME,,"[('integer',)]"
postgresql,postgresql,"create function dfunc(a variadic int[]) returns int as $$ select array_upper($1, 1) $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,select dfunc(10),polymorphism.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select dfunc(10,20)",polymorphism.sql,SAME,,"[(2,)]"
postgresql,postgresql,"create or replace function dfunc(a variadic int[] default array[]::int[]) returns int as $$ select array_upper($1, 1) $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,select dfunc(),polymorphism.sql,SAME,,"[(None,)]"
postgresql,postgresql,select dfunc(10),polymorphism.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select dfunc(10,20)",polymorphism.sql,SAME,,"[(2,)]"
postgresql,postgresql,drop function dfunc(a variadic int[]),polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function anyctest(anycompatible, anycompatible) returns anycompatible as $$   select greatest($1, $2) $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, 12) x",polymorphism.sql,SAME,,"[(12, 'integer')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, 12.3) x",polymorphism.sql,SAME,,"[(Decimal('12.3'), 'numeric')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest('11', '12.3') x",polymorphism.sql,SAME,,"[('12.3', 'text')]"
postgresql,postgresql,"drop function anyctest(anycompatible, anycompatible)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function anyctest(anycompatible, anycompatible) returns anycompatiblearray as $$   select array[$1, $2] $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, 12) x",polymorphism.sql,SAME,,"[([11, 12], 'integer[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, 12.3) x",polymorphism.sql,SAME,,"[([Decimal('11'), Decimal('12.3')], 'numeric[]')]"
postgresql,postgresql,"drop function anyctest(anycompatible, anycompatible)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function anyctest(anycompatible, anycompatiblearray) returns anycompatiblearray as $$   select array[$1] || $2 $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, array[12]) x",polymorphism.sql,SAME,,"[([11, 12], 'integer[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, array[12.3]) x",polymorphism.sql,SAME,,"[([Decimal('11'), Decimal('12.3')], 'numeric[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(12.3, array[13]) x",polymorphism.sql,SAME,,"[([Decimal('12.3'), Decimal('13')], 'numeric[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(12.3, '{13,14.4}') x",polymorphism.sql,SAME,,"[([Decimal('12.3'), Decimal('13'), Decimal('14.4')], 'numeric[]')]"
postgresql,postgresql,"drop function anyctest(anycompatible, anycompatiblearray)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function anyctest(anycompatible, anycompatiblerange) returns anycompatiblerange as $$   select $2 $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, int4range(4,7)) x",polymorphism.sql,SAME,,"[(NumericRange(4, 7, '[)'), 'int4range')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, numrange(4,7)) x",polymorphism.sql,SAME,,"[(NumericRange(Decimal('4'), Decimal('7'), '[)'), 'numrange')]"
postgresql,postgresql,"drop function anyctest(anycompatible, anycompatiblerange)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function anyctest(anycompatiblerange, anycompatiblerange) returns anycompatible as $$   select lower($1) + upper($2) $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(int4range(11,12), int4range(4,7)) x",polymorphism.sql,SAME,,"[(18, 'integer')]"
postgresql,postgresql,"drop function anyctest(anycompatiblerange, anycompatiblerange)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function anyctest(anycompatible, anycompatiblemultirange) returns anycompatiblemultirange as $$   select $2 $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, multirange(int4range(4,7))) x",polymorphism.sql,SAME,,"[('{[4,7)}', 'int4multirange')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, multirange(numrange(4,7))) x",polymorphism.sql,SAME,,"[('{[4,7)}', 'nummultirange')]"
postgresql,postgresql,"drop function anyctest(anycompatible, anycompatiblemultirange)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function anyctest(anycompatiblemultirange, anycompatiblemultirange) returns anycompatible as $$   select lower($1) + upper($2) $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(multirange(int4range(11,12)), multirange(int4range(4,7))) x",polymorphism.sql,SAME,,"[(18, 'integer')]"
postgresql,postgresql,"drop function anyctest(anycompatiblemultirange, anycompatiblemultirange)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function anyctest(anycompatiblenonarray, anycompatiblenonarray) returns anycompatiblearray as $$   select array[$1, $2] $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, 12) x",polymorphism.sql,SAME,,"[([11, 12], 'integer[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, 12.3) x",polymorphism.sql,SAME,,"[([Decimal('11'), Decimal('12.3')], 'numeric[]')]"
postgresql,postgresql,"drop function anyctest(anycompatiblenonarray, anycompatiblenonarray)",polymorphism.sql,SAME,,[]
postgresql,postgresql,"create function anyctest(a anyelement, b anyarray,                          c anycompatible, d anycompatible) returns anycompatiblearray as $$   select array[c, d] $$ language sql",polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, array[1, 2], 42, 34.5) x",polymorphism.sql,SAME,,"[([Decimal('42'), Decimal('34.5')], 'numeric[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, array[1, 2], point(1,2), point(3,4)) x",polymorphism.sql,SAME,,"[('{""(1,2)"",""(3,4)""}', 'point[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, '{1,2}', point(1,2), '(3,4)') x",polymorphism.sql,SAME,,"[('{""(1,2)"",""(3,4)""}', 'point[]')]"
postgresql,postgresql,"drop function anyctest(a anyelement, b anyarray,                        c anycompatible, d anycompatible)",polymorphism.sql,SAME,,[]
postgresql,postgresql,create function anyctest(variadic anycompatiblearray) returns anycompatiblearray as $$   select $1 $$ language sql,polymorphism.sql,SAME,,[]
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, 12) x",polymorphism.sql,SAME,,"[([11, 12], 'integer[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, 12.2) x",polymorphism.sql,SAME,,"[([Decimal('11'), Decimal('12.2')], 'numeric[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(11, '12') x",polymorphism.sql,SAME,,"[([11, 12], 'integer[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(variadic array[11, 12]) x",polymorphism.sql,SAME,,"[([11, 12], 'integer[]')]"
postgresql,postgresql,"select x, pg_typeof(x) from anyctest(variadic array[11, 12.2]) x",polymorphism.sql,SAME,,"[([Decimal('11'), Decimal('12.2')], 'numeric[]')]"
postgresql,postgresql,drop function anyctest(variadic anycompatiblearray),polymorphism.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,END,portals.sql,SAME,,[]
postgresql,postgresql,"SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors",portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,END,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,END,portals.sql,SAME,,[]
postgresql,postgresql,"SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors",portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,COMMIT,portals.sql,SAME,,[]
postgresql,postgresql,"SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors",portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,COMMIT,portals.sql,SAME,,[]
postgresql,postgresql,"SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors",portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,create temp table tt1(f1 int),portals.sql,SAME,,[]
postgresql,postgresql,create function count_tt1_v() returns int8 as 'select count(*) from tt1' language sql volatile,portals.sql,SAME,,[]
postgresql,postgresql,create function count_tt1_s() returns int8 as 'select count(*) from tt1' language sql stable,portals.sql,SAME,,[]
postgresql,postgresql,begin,portals.sql,SAME,,[]
postgresql,postgresql,"declare c1 cursor for select count_tt1_v(), count_tt1_s()",portals.sql,SAME,,[]
postgresql,postgresql,fetch all from c1,portals.sql,SAME,,"[(2, 1)]"
postgresql,postgresql,rollback,portals.sql,SAME,,[]
postgresql,postgresql,begin,portals.sql,SAME,,[]
postgresql,postgresql,"declare c2 cursor with hold for select count_tt1_v(), count_tt1_s()",portals.sql,SAME,,[]
postgresql,postgresql,commit,portals.sql,SAME,,[]
postgresql,postgresql,delete from tt1,portals.sql,SAME,,[]
postgresql,postgresql,fetch all from c2,portals.sql,SAME,,"[(2, 1)]"
postgresql,postgresql,drop function count_tt1_v(),portals.sql,SAME,,[]
postgresql,postgresql,drop function count_tt1_s(),portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,"SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors",portals.sql,SAME,,"[('c2', 'declare c2 cursor with hold for select count_tt1_v(), count_tt1_s()', True, False, False)]"
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,"PREPARE cprep AS   SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors",portals.sql,SAME,,[]
postgresql,postgresql,EXECUTE cprep,portals.sql,SAME,,"[('c2', 'declare c2 cursor with hold for select count_tt1_v(), count_tt1_s()', True, False, False)]"
postgresql,postgresql,SELECT name FROM pg_cursors ORDER BY 1,portals.sql,SAME,,"[('c2',)]"
postgresql,postgresql,CLOSE ALL,portals.sql,SAME,,[]
postgresql,postgresql,SELECT name FROM pg_cursors ORDER BY 1,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE foo1 CURSOR WITH HOLD FOR SELECT 1,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE foo2 CURSOR WITHOUT HOLD FOR SELECT 1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT name FROM pg_cursors ORDER BY 1,portals.sql,SAME,,"[('foo1',), ('foo2',)]"
postgresql,postgresql,CLOSE ALL,portals.sql,SAME,,[]
postgresql,postgresql,SELECT name FROM pg_cursors ORDER BY 1,portals.sql,SAME,,[]
postgresql,postgresql,COMMIT,portals.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE uctest(f1 int, f2 text)",portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(1, 'one'), (2, 'two'), (3, 'three')]"
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 CURSOR FOR SELECT * FROM uctest,portals.sql,SAME,,[]
postgresql,postgresql,FETCH 2 FROM c1,portals.sql,SAME,,"[(1, 'one'), (2, 'two')]"
postgresql,postgresql,DELETE FROM uctest WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(1, 'one'), (3, 'three')]"
postgresql,postgresql,FETCH ALL FROM c1,portals.sql,SAME,,"[(3, 'three')]"
postgresql,postgresql,MOVE BACKWARD ALL IN c1,portals.sql,SAME,,[]
postgresql,postgresql,FETCH ALL FROM c1,portals.sql,SAME,,"[(1, 'one'), (2, 'two'), (3, 'three')]"
postgresql,postgresql,COMMIT,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(1, 'one'), (3, 'three')]"
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE,portals.sql,SAME,,[]
postgresql,postgresql,FETCH c1,portals.sql,SAME,,"[(1, 'one')]"
postgresql,postgresql,UPDATE uctest SET f1 = 8 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(3, 'three'), (8, 'one')]"
postgresql,postgresql,COMMIT,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(3, 'three'), (8, 'one')]"
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 CURSOR FOR SELECT * FROM uctest,portals.sql,SAME,,[]
postgresql,postgresql,FETCH c1,portals.sql,SAME,,"[(3, 'three')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one'), (13, 'three')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one'), (23, 'three')]"
postgresql,postgresql,FETCH RELATIVE 0 FROM c1,portals.sql,SAME,,"[(3, 'three')]"
postgresql,postgresql,DELETE FROM uctest WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one')]"
postgresql,postgresql,DELETE FROM uctest WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one')]"
postgresql,postgresql,FETCH RELATIVE 0 FROM c1,portals.sql,SAME,,"[(3, 'three')]"
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(3, 'three'), (8, 'one')]"
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE,portals.sql,SAME,,[]
postgresql,postgresql,FETCH c1,portals.sql,SAME,,"[(3, 'three')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one'), (13, 'three')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one'), (23, 'three')]"
postgresql,postgresql,DELETE FROM uctest WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one')]"
postgresql,postgresql,DELETE FROM uctest WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(8, 'one')]"
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(3, 'three'), (8, 'one')]"
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 INSENSITIVE CURSOR FOR SELECT * FROM uctest,portals.sql,SAME,,[]
postgresql,postgresql,FETCH NEXT FROM c1,portals.sql,SAME,,"[(3, 'three')]"
postgresql,postgresql,FETCH NEXT FROM c1,portals.sql,SAME,,"[(8, 'one')]"
postgresql,postgresql,FETCH NEXT FROM c1,portals.sql,SAME,,[]
postgresql,postgresql,COMMIT,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(3, 'three'), (8, 'one'), (10, 'ten')]"
postgresql,postgresql,DELETE FROM uctest WHERE f1 = 10,portals.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE ucchild () inherits (uctest),portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(3, 'three'), (8, 'one'), (100, 'hundred')]"
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE,portals.sql,SAME,,[]
postgresql,postgresql,FETCH 1 FROM c1,portals.sql,SAME,,"[(3, 'three')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,FETCH 1 FROM c1,portals.sql,SAME,,"[(8, 'one')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,FETCH 1 FROM c1,portals.sql,SAME,,"[(100, 'hundred')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,FETCH 1 FROM c1,portals.sql,SAME,,[]
postgresql,postgresql,COMMIT,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(13, 'three'), (18, 'one'), (110, 'hundred')]"
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,"DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5",portals.sql,SAME,,[]
postgresql,postgresql,FETCH 1 FROM c1,portals.sql,SAME,,"[(18, 'one', 13, 'three')]"
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,"DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5 FOR UPDATE",portals.sql,SAME,,[]
postgresql,postgresql,FETCH 1 FROM c1,portals.sql,SAME,,"[(18, 'one', 13, 'three')]"
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,"DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5 FOR SHARE OF a",portals.sql,SAME,,[]
postgresql,postgresql,FETCH 1 FROM c1,portals.sql,SAME,,"[(18, 'one', 13, 'three')]"
postgresql,postgresql,UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1,portals.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM uctest,portals.sql,SAME,,"[(13, 'three'), (28, 'one'), (110, 'hundred')]"
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE cx CURSOR WITH HOLD FOR SELECT * FROM uctest,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,"DECLARE c CURSOR FOR SELECT f1,count(*) FROM uctest GROUP BY f1",portals.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 CURSOR FOR SELECT * FROM uctest,portals.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP VIEW ucview AS SELECT * FROM uctest,portals.sql,SAME,,[]
postgresql,postgresql,CREATE RULE ucrule AS ON DELETE TO ucview DO INSTEAD   DELETE FROM uctest WHERE f1 = OLD.f1,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 CURSOR FOR SELECT * FROM ucview,portals.sql,SAME,,[]
postgresql,postgresql,FETCH FROM c1,portals.sql,SAME,,"[(13, 'three')]"
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 SCROLL CURSOR FOR SELECT * FROM current_check,portals.sql,SAME,,[]
postgresql,postgresql,FETCH ABSOLUTE 12 FROM c1,portals.sql,SAME,,"[(12, 'P12')]"
postgresql,postgresql,FETCH ABSOLUTE 8 FROM c1,portals.sql,SAME,,"[(8, 'p8')]"
postgresql,postgresql,DELETE FROM current_check WHERE CURRENT OF c1 RETURNING *,portals.sql,SAME,,"[(8, 'p8')]"
postgresql,postgresql,FETCH ABSOLUTE 13 FROM c1,portals.sql,SAME,,"[(13, 'P13')]"
postgresql,postgresql,FETCH ABSOLUTE 1 FROM c1,portals.sql,SAME,,"[(1, 'p1')]"
postgresql,postgresql,DELETE FROM current_check WHERE CURRENT OF c1 RETURNING *,portals.sql,SAME,,"[(1, 'p1')]"
postgresql,postgresql,SELECT * FROM current_check,portals.sql,SAME,,"[(2, 'p2'), (3, 'p3'), (4, 'p4'), (5, 'p5'), (6, 'p6'), (7, 'p7'), (9, 'p9'), (10, 'P10'), (11, 'P11'), (12, 'P12'), (13, 'P13'), (14, 'P14'), (15, 'P15'), (16, 'P16'), (17, 'P17'), (18, 'P18'), (19, 'P19')]"
postgresql,postgresql,ROLLBACK,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION ISOLATION LEVEL SERIALIZABLE,portals.sql,SAME,,[]
postgresql,postgresql,DECLARE c1 NO SCROLL CURSOR FOR SELECT * FROM cursor FOR UPDATE,portals.sql,SAME,,[]
postgresql,postgresql,UPDATE cursor SET a = 2,portals.sql,SAME,,[]
postgresql,postgresql,FETCH ALL FROM c1,portals.sql,SAME,,[]
postgresql,postgresql,COMMIT,portals.sql,SAME,,[]
postgresql,postgresql,begin,portals.sql,SAME,,[]
postgresql,postgresql,create function nochange(int) returns int   as 'select $1 limit 1' language sql stable,portals.sql,SAME,,[]
postgresql,postgresql,rollback,portals.sql,SAME,,[]
postgresql,postgresql,begin,portals.sql,SAME,,[]
postgresql,postgresql,explain (costs off) declare c1 cursor for select (select 42) as x,portals.sql,SAME,,"[('Result',), ('  InitPlan 1 (returns $0)',), ('    ->  Result',)]"
postgresql,postgresql,explain (costs off) declare c1 scroll cursor for select (select 42) as x,portals.sql,SAME,,"[('Materialize',), ('  InitPlan 1 (returns $0)',), ('    ->  Result',), ('  ->  Result',)]"
postgresql,postgresql,declare c1 scroll cursor for select (select 42) as x,portals.sql,SAME,,[]
postgresql,postgresql,fetch all in c1,portals.sql,SAME,,"[(42,)]"
postgresql,postgresql,fetch backward all in c1,portals.sql,SAME,,"[(42,)]"
postgresql,postgresql,rollback,portals.sql,SAME,,[]
postgresql,postgresql,begin,portals.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) declare c2 cursor for select generate_series(1,3) as g",portals.sql,SAME,,"[('ProjectSet',), ('  ->  Result',)]"
postgresql,postgresql,"explain (costs off) declare c2 scroll cursor for select generate_series(1,3) as g",portals.sql,SAME,,"[('Materialize',), ('  ->  ProjectSet',), ('        ->  Result',)]"
postgresql,postgresql,"declare c2 scroll cursor for select generate_series(1,3) as g",portals.sql,SAME,,[]
postgresql,postgresql,fetch all in c2,portals.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,fetch backward all in c2,portals.sql,SAME,,"[(3,), (2,), (1,)]"
postgresql,postgresql,rollback,portals.sql,SAME,,[]
postgresql,postgresql,begin,portals.sql,SAME,,[]
postgresql,postgresql,set default_toast_compression = 'pglz',portals.sql,SAME,,[]
postgresql,postgresql,declare local_portal cursor for select * from toasted_data,portals.sql,SAME,,[]
postgresql,postgresql,fetch all in local_portal,portals.sql,SAME,,"[([12345678, 12345679, 12345680, 12345681, 12345682, 12345683, 12345684, 12345685, 12345686, 12345687, 12345688, 12345689, 12345690, 12345691, 12345692, 12345693, 12345694, 12345695, 12345696, 12345697, 12345698, 12345699, 12345700, 12345701, 12345702, 12345703, 12345704, 12345705, 12345706, 12345707, 12345708, 12345709, 12345710, 12345711, 12345712, 12345713, 12345714, 12345715, 12345716, 12345717, 12345718, 12345719, 12345720, 12345721, 12345722, 12345723, 12345724, 12345725, 12345726, 12345727, 12345728, 12345729, 12345730, 12345731, 12345732, 12345733, 12345734, 12345735, 12345736, 12345737, 12345738, 12345739, 12345740, 12345741, 12345742, 12345743, 12345744, 12345745, 12345746, 12345747, 12345748, 12345749, 12345750, 12345751, 12345752, 12345753, 12345754, 12345755, 12345756, 12345757, 12345758, 12345759, 12345760, 12345761, 12345762, 12345763, 12345764, 12345765, 12345766, 12345767, 12345768, 12345769, 12345770, 12345771, 12345772, 12345773, 12345774, 12345775, 12345776, 12345777, 12345778, 12345779, 12345780, 12345781, 12345782, 12345783, 12345784, 12345785, 12345786, 12345787, 12345788, 12345789, 12345790, 12345791, 12345792, 12345793, 12345794, 12345795, 12345796, 12345797, 12345798, 12345799, 12345800, 12345801, 12345802, 12345803, 12345804, 12345805, 12345806, 12345807, 12345808, 12345809, 12345810, 12345811, 12345812, 12345813, 12345814, 12345815, 12345816, 12345817, 12345818, 12345819, 12345820, 12345821, 12345822, 12345823, 12345824, 12345825, 12345826, 12345827, 12345828, 12345829, 12345830, 12345831, 12345832, 12345833, 12345834, 12345835, 12345836, 12345837, 12345838, 12345839, 12345840, 12345841, 12345842, 12345843, 12345844, 12345845, 12345846, 12345847, 12345848, 12345849, 12345850, 12345851, 12345852, 12345853, 12345854, 12345855, 12345856, 12345857, 12345858, 12345859, 12345860, 12345861, 12345862, 12345863, 12345864, 12345865, 12345866, 12345867, 12345868, 12345869, 12345870, 12345871, 12345872, 12345873, 12345874, 12345875, 12345876, 12345877, 12345878, 12345879, 12345880, 12345881, 12345882, 12345883, 12345884, 12345885, 12345886, 12345887, 12345888, 12345889, 12345890, 12345891, 12345892, 12345893, 12345894, 12345895, 12345896, 12345897, 12345898, 12345899, 12345900, 12345901, 12345902, 12345903, 12345904, 12345905, 12345906, 12345907, 12345908, 12345909, 12345910, 12345911, 12345912, 12345913, 12345914, 12345915, 12345916, 12345917, 12345918, 12345919, 12345920, 12345921, 12345922, 12345923, 12345924, 12345925, 12345926, 12345927, 12345928, 12345929, 12345930, 12345931, 12345932, 12345933, 12345934, 12345935, 12345936, 12345937, 12345938, 12345939, 12345940, 12345941, 12345942, 12345943, 12345944, 12345945, 12345946, 12345947, 12345948, 12345949, 12345950, 12345951, 12345952, 12345953, 12345954, 12345955, 12345956, 12345957, 12345958, 12345959, 12345960, 12345961, 12345962, 12345963, 12345964, 12345965, 12345966, 12345967, 12345968, 12345969, 12345970, 12345971, 12345972, 12345973, 12345974, 12345975, 12345976, 12345977, 12345978, 12345979, 12345980, 12345981, 12345982, 12345983, 12345984, 12345985, 12345986, 12345987, 12345988, 12345989, 12345990, 12345991, 12345992, 12345993, 12345994, 12345995, 12345996, 12345997, 12345998, 12345999, 12346000, 12346001, 12346002, 12346003, 12346004, 12346005, 12346006, 12346007, 12346008, 12346009, 12346010, 12346011, 12346012, 12346013, 12346014, 12346015, 12346016, 12346017, 12346018, 12346019, 12346020, 12346021, 12346022, 12346023, 12346024, 12346025, 12346026, 12346027, 12346028, 12346029, 12346030, 12346031, 12346032, 12346033, 12346034, 12346035, 12346036, 12346037, 12346038, 12346039, 12346040, 12346041, 12346042, 12346043, 12346044, 12346045, 12346046, 12346047, 12346048, 12346049, 12346050, 12346051, 12346052, 12346053, 12346054, 12346055, 12346056, 12346057, 12346058, 12346059, 12346060, 12346061, 12346062, 12346063, 12346064, 12346065, 12346066, 12346067, 12346068, 12346069, 12346070, 12346071, 12346072, 12346073, 12346074, 12346075, 12346076, 12346077, 12346078, 12346079, 12346080, 12346081, 12346082, 12346083, 12346084, 12346085, 12346086, 12346087, 12346088, 12346089, 12346090, 12346091, 12346092, 12346093, 12346094, 12346095, 12346096, 12346097, 12346098, 12346099, 12346100, 12346101, 12346102, 12346103, 12346104, 12346105, 12346106, 12346107, 12346108, 12346109, 12346110, 12346111, 12346112, 12346113, 12346114, 12346115, 12346116, 12346117, 12346118, 12346119, 12346120, 12346121, 12346122, 12346123, 12346124, 12346125, 12346126, 12346127, 12346128, 12346129, 12346130, 12346131, 12346132, 12346133, 12346134, 12346135, 12346136, 12346137, 12346138, 12346139, 12346140, 12346141, 12346142, 12346143, 12346144, 12346145, 12346146, 12346147, 12346148, 12346149, 12346150, 12346151, 12346152, 12346153, 12346154, 12346155, 12346156, 12346157, 12346158, 12346159, 12346160, 12346161, 12346162, 12346163, 12346164, 12346165, 12346166, 12346167, 12346168, 12346169, 12346170, 12346171, 12346172, 12346173, 12346174, 12346175, 12346176, 12346177, 12346178, 12346179, 12346180, 12346181, 12346182, 12346183, 12346184, 12346185, 12346186, 12346187, 12346188, 12346189, 12346190, 12346191, 12346192, 12346193, 12346194, 12346195, 12346196, 12346197, 12346198, 12346199, 12346200, 12346201, 12346202, 12346203, 12346204, 12346205, 12346206, 12346207, 12346208, 12346209, 12346210, 12346211, 12346212, 12346213, 12346214, 12346215, 12346216, 12346217, 12346218, 12346219, 12346220, 12346221, 12346222, 12346223, 12346224, 12346225, 12346226, 12346227, 12346228, 12346229, 12346230, 12346231, 12346232, 12346233, 12346234, 12346235, 12346236, 12346237, 12346238, 12346239, 12346240, 12346241, 12346242, 12346243, 12346244, 12346245, 12346246, 12346247, 12346248, 12346249, 12346250, 12346251, 12346252, 12346253, 12346254, 12346255, 12346256, 12346257, 12346258, 12346259, 12346260, 12346261, 12346262, 12346263, 12346264, 12346265, 12346266, 12346267, 12346268, 12346269, 12346270, 12346271, 12346272, 12346273, 12346274, 12346275, 12346276, 12346277, 12346278, 12346279, 12346280, 12346281, 12346282, 12346283, 12346284, 12346285, 12346286, 12346287, 12346288, 12346289, 12346290, 12346291, 12346292, 12346293, 12346294, 12346295, 12346296, 12346297, 12346298, 12346299, 12346300, 12346301, 12346302, 12346303, 12346304, 12346305, 12346306, 12346307, 12346308, 12346309, 12346310, 12346311, 12346312, 12346313, 12346314, 12346315, 12346316, 12346317, 12346318, 12346319, 12346320, 12346321, 12346322, 12346323, 12346324, 12346325, 12346326, 12346327, 12346328, 12346329, 12346330, 12346331, 12346332, 12346333, 12346334, 12346335, 12346336, 12346337, 12346338, 12346339, 12346340, 12346341, 12346342, 12346343, 12346344, 12346345, 12346346, 12346347, 12346348, 12346349, 12346350, 12346351, 12346352, 12346353, 12346354, 12346355, 12346356, 12346357, 12346358, 12346359, 12346360, 12346361, 12346362, 12346363, 12346364, 12346365, 12346366, 12346367, 12346368, 12346369, 12346370, 12346371, 12346372, 12346373, 12346374, 12346375, 12346376, 12346377, 12346378, 12346379, 12346380, 12346381, 12346382, 12346383, 12346384, 12346385, 12346386, 12346387, 12346388, 12346389, 12346390, 12346391, 12346392, 12346393, 12346394, 12346395, 12346396, 12346397, 12346398, 12346399, 12346400, 12346401, 12346402, 12346403, 12346404, 12346405, 12346406, 12346407, 12346408, 12346409, 12346410, 12346411, 12346412, 12346413, 12346414, 12346415, 12346416, 12346417, 12346418, 12346419, 12346420, 12346421, 12346422, 12346423, 12346424, 12346425, 12346426, 12346427, 12346428, 12346429, 12346430, 12346431, 12346432, 12346433, 12346434, 12346435, 12346436, 12346437, 12346438, 12346439, 12346440, 12346441, 12346442, 12346443, 12346444, 12346445, 12346446, 12346447, 12346448, 12346449, 12346450, 12346451, 12346452, 12346453, 12346454, 12346455, 12346456, 12346457, 12346458, 12346459, 12346460, 12346461, 12346462, 12346463, 12346464, 12346465, 12346466, 12346467, 12346468, 12346469, 12346470, 12346471, 12346472, 12346473, 12346474, 12346475, 12346476, 12346477, 12346478, 12346479, 12346480, 12346481, 12346482, 12346483, 12346484, 12346485, 12346486, 12346487, 12346488, 12346489, 12346490, 12346491, 12346492, 12346493, 12346494, 12346495, 12346496, 12346497, 12346498, 12346499, 12346500, 12346501, 12346502, 12346503, 12346504, 12346505, 12346506, 12346507, 12346508, 12346509, 12346510, 12346511, 12346512, 12346513, 12346514, 12346515, 12346516, 12346517, 12346518, 12346519, 12346520, 12346521, 12346522, 12346523, 12346524, 12346525, 12346526, 12346527, 12346528, 12346529, 12346530, 12346531, 12346532, 12346533, 12346534, 12346535, 12346536, 12346537, 12346538, 12346539, 12346540, 12346541, 12346542, 12346543, 12346544, 12346545, 12346546, 12346547, 12346548, 12346549, 12346550, 12346551, 12346552, 12346553, 12346554, 12346555, 12346556, 12346557, 12346558, 12346559, 12346560, 12346561, 12346562, 12346563, 12346564, 12346565, 12346566, 12346567, 12346568, 12346569, 12346570, 12346571, 12346572, 12346573, 12346574, 12346575, 12346576, 12346577, 12346578, 12346579, 12346580, 12346581, 12346582, 12346583, 12346584, 12346585, 12346586, 12346587, 12346588, 12346589, 12346590, 12346591, 12346592, 12346593, 12346594, 12346595, 12346596, 12346597, 12346598, 12346599, 12346600, 12346601, 12346602, 12346603, 12346604, 12346605, 12346606, 12346607, 12346608, 12346609, 12346610, 12346611, 12346612, 12346613, 12346614, 12346615, 12346616, 12346617, 12346618, 12346619, 12346620, 12346621, 12346622, 12346623, 12346624, 12346625, 12346626, 12346627, 12346628, 12346629, 12346630, 12346631, 12346632, 12346633, 12346634, 12346635, 12346636, 12346637, 12346638, 12346639, 12346640, 12346641, 12346642, 12346643, 12346644, 12346645, 12346646, 12346647, 12346648, 12346649, 12346650, 12346651, 12346652, 12346653, 12346654, 12346655, 12346656, 12346657, 12346658, 12346659, 12346660, 12346661, 12346662, 12346663, 12346664, 12346665, 12346666, 12346667, 12346668, 12346669, 12346670, 12346671, 12346672, 12346673, 12346674, 12346675, 12346676, 12346677, 12346678],)]"
postgresql,postgresql,declare held_portal cursor with hold for select * from toasted_data,portals.sql,SAME,,[]
postgresql,postgresql,commit,portals.sql,SAME,,[]
postgresql,postgresql,fetch all in held_portal,portals.sql,SAME,,"[([12345678, 12345679, 12345680, 12345681, 12345682, 12345683, 12345684, 12345685, 12345686, 12345687, 12345688, 12345689, 12345690, 12345691, 12345692, 12345693, 12345694, 12345695, 12345696, 12345697, 12345698, 12345699, 12345700, 12345701, 12345702, 12345703, 12345704, 12345705, 12345706, 12345707, 12345708, 12345709, 12345710, 12345711, 12345712, 12345713, 12345714, 12345715, 12345716, 12345717, 12345718, 12345719, 12345720, 12345721, 12345722, 12345723, 12345724, 12345725, 12345726, 12345727, 12345728, 12345729, 12345730, 12345731, 12345732, 12345733, 12345734, 12345735, 12345736, 12345737, 12345738, 12345739, 12345740, 12345741, 12345742, 12345743, 12345744, 12345745, 12345746, 12345747, 12345748, 12345749, 12345750, 12345751, 12345752, 12345753, 12345754, 12345755, 12345756, 12345757, 12345758, 12345759, 12345760, 12345761, 12345762, 12345763, 12345764, 12345765, 12345766, 12345767, 12345768, 12345769, 12345770, 12345771, 12345772, 12345773, 12345774, 12345775, 12345776, 12345777, 12345778, 12345779, 12345780, 12345781, 12345782, 12345783, 12345784, 12345785, 12345786, 12345787, 12345788, 12345789, 12345790, 12345791, 12345792, 12345793, 12345794, 12345795, 12345796, 12345797, 12345798, 12345799, 12345800, 12345801, 12345802, 12345803, 12345804, 12345805, 12345806, 12345807, 12345808, 12345809, 12345810, 12345811, 12345812, 12345813, 12345814, 12345815, 12345816, 12345817, 12345818, 12345819, 12345820, 12345821, 12345822, 12345823, 12345824, 12345825, 12345826, 12345827, 12345828, 12345829, 12345830, 12345831, 12345832, 12345833, 12345834, 12345835, 12345836, 12345837, 12345838, 12345839, 12345840, 12345841, 12345842, 12345843, 12345844, 12345845, 12345846, 12345847, 12345848, 12345849, 12345850, 12345851, 12345852, 12345853, 12345854, 12345855, 12345856, 12345857, 12345858, 12345859, 12345860, 12345861, 12345862, 12345863, 12345864, 12345865, 12345866, 12345867, 12345868, 12345869, 12345870, 12345871, 12345872, 12345873, 12345874, 12345875, 12345876, 12345877, 12345878, 12345879, 12345880, 12345881, 12345882, 12345883, 12345884, 12345885, 12345886, 12345887, 12345888, 12345889, 12345890, 12345891, 12345892, 12345893, 12345894, 12345895, 12345896, 12345897, 12345898, 12345899, 12345900, 12345901, 12345902, 12345903, 12345904, 12345905, 12345906, 12345907, 12345908, 12345909, 12345910, 12345911, 12345912, 12345913, 12345914, 12345915, 12345916, 12345917, 12345918, 12345919, 12345920, 12345921, 12345922, 12345923, 12345924, 12345925, 12345926, 12345927, 12345928, 12345929, 12345930, 12345931, 12345932, 12345933, 12345934, 12345935, 12345936, 12345937, 12345938, 12345939, 12345940, 12345941, 12345942, 12345943, 12345944, 12345945, 12345946, 12345947, 12345948, 12345949, 12345950, 12345951, 12345952, 12345953, 12345954, 12345955, 12345956, 12345957, 12345958, 12345959, 12345960, 12345961, 12345962, 12345963, 12345964, 12345965, 12345966, 12345967, 12345968, 12345969, 12345970, 12345971, 12345972, 12345973, 12345974, 12345975, 12345976, 12345977, 12345978, 12345979, 12345980, 12345981, 12345982, 12345983, 12345984, 12345985, 12345986, 12345987, 12345988, 12345989, 12345990, 12345991, 12345992, 12345993, 12345994, 12345995, 12345996, 12345997, 12345998, 12345999, 12346000, 12346001, 12346002, 12346003, 12346004, 12346005, 12346006, 12346007, 12346008, 12346009, 12346010, 12346011, 12346012, 12346013, 12346014, 12346015, 12346016, 12346017, 12346018, 12346019, 12346020, 12346021, 12346022, 12346023, 12346024, 12346025, 12346026, 12346027, 12346028, 12346029, 12346030, 12346031, 12346032, 12346033, 12346034, 12346035, 12346036, 12346037, 12346038, 12346039, 12346040, 12346041, 12346042, 12346043, 12346044, 12346045, 12346046, 12346047, 12346048, 12346049, 12346050, 12346051, 12346052, 12346053, 12346054, 12346055, 12346056, 12346057, 12346058, 12346059, 12346060, 12346061, 12346062, 12346063, 12346064, 12346065, 12346066, 12346067, 12346068, 12346069, 12346070, 12346071, 12346072, 12346073, 12346074, 12346075, 12346076, 12346077, 12346078, 12346079, 12346080, 12346081, 12346082, 12346083, 12346084, 12346085, 12346086, 12346087, 12346088, 12346089, 12346090, 12346091, 12346092, 12346093, 12346094, 12346095, 12346096, 12346097, 12346098, 12346099, 12346100, 12346101, 12346102, 12346103, 12346104, 12346105, 12346106, 12346107, 12346108, 12346109, 12346110, 12346111, 12346112, 12346113, 12346114, 12346115, 12346116, 12346117, 12346118, 12346119, 12346120, 12346121, 12346122, 12346123, 12346124, 12346125, 12346126, 12346127, 12346128, 12346129, 12346130, 12346131, 12346132, 12346133, 12346134, 12346135, 12346136, 12346137, 12346138, 12346139, 12346140, 12346141, 12346142, 12346143, 12346144, 12346145, 12346146, 12346147, 12346148, 12346149, 12346150, 12346151, 12346152, 12346153, 12346154, 12346155, 12346156, 12346157, 12346158, 12346159, 12346160, 12346161, 12346162, 12346163, 12346164, 12346165, 12346166, 12346167, 12346168, 12346169, 12346170, 12346171, 12346172, 12346173, 12346174, 12346175, 12346176, 12346177, 12346178, 12346179, 12346180, 12346181, 12346182, 12346183, 12346184, 12346185, 12346186, 12346187, 12346188, 12346189, 12346190, 12346191, 12346192, 12346193, 12346194, 12346195, 12346196, 12346197, 12346198, 12346199, 12346200, 12346201, 12346202, 12346203, 12346204, 12346205, 12346206, 12346207, 12346208, 12346209, 12346210, 12346211, 12346212, 12346213, 12346214, 12346215, 12346216, 12346217, 12346218, 12346219, 12346220, 12346221, 12346222, 12346223, 12346224, 12346225, 12346226, 12346227, 12346228, 12346229, 12346230, 12346231, 12346232, 12346233, 12346234, 12346235, 12346236, 12346237, 12346238, 12346239, 12346240, 12346241, 12346242, 12346243, 12346244, 12346245, 12346246, 12346247, 12346248, 12346249, 12346250, 12346251, 12346252, 12346253, 12346254, 12346255, 12346256, 12346257, 12346258, 12346259, 12346260, 12346261, 12346262, 12346263, 12346264, 12346265, 12346266, 12346267, 12346268, 12346269, 12346270, 12346271, 12346272, 12346273, 12346274, 12346275, 12346276, 12346277, 12346278, 12346279, 12346280, 12346281, 12346282, 12346283, 12346284, 12346285, 12346286, 12346287, 12346288, 12346289, 12346290, 12346291, 12346292, 12346293, 12346294, 12346295, 12346296, 12346297, 12346298, 12346299, 12346300, 12346301, 12346302, 12346303, 12346304, 12346305, 12346306, 12346307, 12346308, 12346309, 12346310, 12346311, 12346312, 12346313, 12346314, 12346315, 12346316, 12346317, 12346318, 12346319, 12346320, 12346321, 12346322, 12346323, 12346324, 12346325, 12346326, 12346327, 12346328, 12346329, 12346330, 12346331, 12346332, 12346333, 12346334, 12346335, 12346336, 12346337, 12346338, 12346339, 12346340, 12346341, 12346342, 12346343, 12346344, 12346345, 12346346, 12346347, 12346348, 12346349, 12346350, 12346351, 12346352, 12346353, 12346354, 12346355, 12346356, 12346357, 12346358, 12346359, 12346360, 12346361, 12346362, 12346363, 12346364, 12346365, 12346366, 12346367, 12346368, 12346369, 12346370, 12346371, 12346372, 12346373, 12346374, 12346375, 12346376, 12346377, 12346378, 12346379, 12346380, 12346381, 12346382, 12346383, 12346384, 12346385, 12346386, 12346387, 12346388, 12346389, 12346390, 12346391, 12346392, 12346393, 12346394, 12346395, 12346396, 12346397, 12346398, 12346399, 12346400, 12346401, 12346402, 12346403, 12346404, 12346405, 12346406, 12346407, 12346408, 12346409, 12346410, 12346411, 12346412, 12346413, 12346414, 12346415, 12346416, 12346417, 12346418, 12346419, 12346420, 12346421, 12346422, 12346423, 12346424, 12346425, 12346426, 12346427, 12346428, 12346429, 12346430, 12346431, 12346432, 12346433, 12346434, 12346435, 12346436, 12346437, 12346438, 12346439, 12346440, 12346441, 12346442, 12346443, 12346444, 12346445, 12346446, 12346447, 12346448, 12346449, 12346450, 12346451, 12346452, 12346453, 12346454, 12346455, 12346456, 12346457, 12346458, 12346459, 12346460, 12346461, 12346462, 12346463, 12346464, 12346465, 12346466, 12346467, 12346468, 12346469, 12346470, 12346471, 12346472, 12346473, 12346474, 12346475, 12346476, 12346477, 12346478, 12346479, 12346480, 12346481, 12346482, 12346483, 12346484, 12346485, 12346486, 12346487, 12346488, 12346489, 12346490, 12346491, 12346492, 12346493, 12346494, 12346495, 12346496, 12346497, 12346498, 12346499, 12346500, 12346501, 12346502, 12346503, 12346504, 12346505, 12346506, 12346507, 12346508, 12346509, 12346510, 12346511, 12346512, 12346513, 12346514, 12346515, 12346516, 12346517, 12346518, 12346519, 12346520, 12346521, 12346522, 12346523, 12346524, 12346525, 12346526, 12346527, 12346528, 12346529, 12346530, 12346531, 12346532, 12346533, 12346534, 12346535, 12346536, 12346537, 12346538, 12346539, 12346540, 12346541, 12346542, 12346543, 12346544, 12346545, 12346546, 12346547, 12346548, 12346549, 12346550, 12346551, 12346552, 12346553, 12346554, 12346555, 12346556, 12346557, 12346558, 12346559, 12346560, 12346561, 12346562, 12346563, 12346564, 12346565, 12346566, 12346567, 12346568, 12346569, 12346570, 12346571, 12346572, 12346573, 12346574, 12346575, 12346576, 12346577, 12346578, 12346579, 12346580, 12346581, 12346582, 12346583, 12346584, 12346585, 12346586, 12346587, 12346588, 12346589, 12346590, 12346591, 12346592, 12346593, 12346594, 12346595, 12346596, 12346597, 12346598, 12346599, 12346600, 12346601, 12346602, 12346603, 12346604, 12346605, 12346606, 12346607, 12346608, 12346609, 12346610, 12346611, 12346612, 12346613, 12346614, 12346615, 12346616, 12346617, 12346618, 12346619, 12346620, 12346621, 12346622, 12346623, 12346624, 12346625, 12346626, 12346627, 12346628, 12346629, 12346630, 12346631, 12346632, 12346633, 12346634, 12346635, 12346636, 12346637, 12346638, 12346639, 12346640, 12346641, 12346642, 12346643, 12346644, 12346645, 12346646, 12346647, 12346648, 12346649, 12346650, 12346651, 12346652, 12346653, 12346654, 12346655, 12346656, 12346657, 12346658, 12346659, 12346660, 12346661, 12346662, 12346663, 12346664, 12346665, 12346666, 12346667, 12346668, 12346669, 12346670, 12346671, 12346672, 12346673, 12346674, 12346675, 12346676, 12346677, 12346678],)]"
postgresql,postgresql,reset default_toast_compression,portals.sql,SAME,,[]
postgresql,postgresql,BEGIN,portals_p2.sql,SAME,,[]
postgresql,postgresql,END,portals_p2.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t WHERE t.a IS NOT NULL,predicate.sql,SAME,,"[('Seq Scan on pred_tab t',), ('  Filter: (a IS NOT NULL)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t WHERE t.b IS NOT NULL,predicate.sql,SAME,,"[('Seq Scan on pred_tab t',), ('  Filter: (b IS NOT NULL)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t WHERE t.a IS NULL,predicate.sql,SAME,,"[('Seq Scan on pred_tab t',), ('  Filter: (a IS NULL)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t WHERE t.b IS NULL,predicate.sql,SAME,,"[('Seq Scan on pred_tab t',), ('  Filter: (b IS NULL)',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t WHERE t.a IS NOT NULL OR t.b = 1,predicate.sql,SAME,,"[('Seq Scan on pred_tab t',), ('  Filter: ((a IS NOT NULL) OR (b = 1))',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t WHERE t.b IS NOT NULL OR t.a = 1,predicate.sql,SAME,,"[('Seq Scan on pred_tab t',), ('  Filter: ((b IS NOT NULL) OR (a = 1))',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t WHERE t.a IS NULL OR t.c IS NULL,predicate.sql,SAME,,"[('Seq Scan on pred_tab t',), ('  Filter: ((a IS NULL) OR (c IS NULL))',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t WHERE t.b IS NULL OR t.c IS NULL,predicate.sql,SAME,,"[('Seq Scan on pred_tab t',), ('  Filter: ((b IS NULL) OR (c IS NULL))',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t1     LEFT JOIN pred_tab t2 ON TRUE     LEFT JOIN pred_tab t3 ON t2.a IS NOT NULL,predicate.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Seq Scan on pred_tab t1',), ('  ->  Materialize',), ('        ->  Nested Loop Left Join',), ('              Join Filter: (t2.a IS NOT NULL)',), ('              ->  Seq Scan on pred_tab t2',), ('              ->  Materialize',), ('                    ->  Seq Scan on pred_tab t3',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t1     LEFT JOIN pred_tab t2 ON t1.a = 1     LEFT JOIN pred_tab t3 ON t2.a IS NOT NULL,predicate.sql,SAME,,"[('Nested Loop Left Join',), ('  Join Filter: (t2.a IS NOT NULL)',), ('  ->  Nested Loop Left Join',), ('        Join Filter: (t1.a = 1)',), ('        ->  Seq Scan on pred_tab t1',), ('        ->  Materialize',), ('              ->  Seq Scan on pred_tab t2',), ('  ->  Materialize',), ('        ->  Seq Scan on pred_tab t3',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t1     LEFT JOIN pred_tab t2 ON TRUE     LEFT JOIN pred_tab t3 ON t2.a IS NULL AND t2.b = 1,predicate.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Seq Scan on pred_tab t1',), ('  ->  Materialize',), ('        ->  Nested Loop Left Join',), ('              Join Filter: ((t2.a IS NULL) AND (t2.b = 1))',), ('              ->  Seq Scan on pred_tab t2',), ('              ->  Materialize',), ('                    ->  Seq Scan on pred_tab t3',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t1     LEFT JOIN pred_tab t2 ON t1.a = 1     LEFT JOIN pred_tab t3 ON t2.a IS NULL,predicate.sql,SAME,,"[('Nested Loop Left Join',), ('  Join Filter: (t2.a IS NULL)',), ('  ->  Nested Loop Left Join',), ('        Join Filter: (t1.a = 1)',), ('        ->  Seq Scan on pred_tab t1',), ('        ->  Materialize',), ('              ->  Seq Scan on pred_tab t2',), ('  ->  Materialize',), ('        ->  Seq Scan on pred_tab t3',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t1     LEFT JOIN pred_tab t2 ON TRUE     LEFT JOIN pred_tab t3 ON t2.a IS NOT NULL OR t2.b = 1,predicate.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Seq Scan on pred_tab t1',), ('  ->  Materialize',), ('        ->  Nested Loop Left Join',), ('              Join Filter: ((t2.a IS NOT NULL) OR (t2.b = 1))',), ('              ->  Seq Scan on pred_tab t2',), ('              ->  Materialize',), ('                    ->  Seq Scan on pred_tab t3',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t1     LEFT JOIN pred_tab t2 ON t1.a = 1     LEFT JOIN pred_tab t3 ON t2.a IS NOT NULL OR t2.b = 1,predicate.sql,SAME,,"[('Nested Loop Left Join',), ('  Join Filter: ((t2.a IS NOT NULL) OR (t2.b = 1))',), ('  ->  Nested Loop Left Join',), ('        Join Filter: (t1.a = 1)',), ('        ->  Seq Scan on pred_tab t1',), ('        ->  Materialize',), ('              ->  Seq Scan on pred_tab t2',), ('  ->  Materialize',), ('        ->  Seq Scan on pred_tab t3',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t1     LEFT JOIN pred_tab t2 ON TRUE     LEFT JOIN pred_tab t3 ON (t2.a IS NULL OR t2.c IS NULL) AND t2.b = 1,predicate.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Seq Scan on pred_tab t1',), ('  ->  Materialize',), ('        ->  Nested Loop Left Join',), ('              Join Filter: (((t2.a IS NULL) OR (t2.c IS NULL)) AND (t2.b = 1))',), ('              ->  Seq Scan on pred_tab t2',), ('              ->  Materialize',), ('                    ->  Seq Scan on pred_tab t3',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM pred_tab t1     LEFT JOIN pred_tab t2 ON t1.a = 1     LEFT JOIN pred_tab t3 ON t2.a IS NULL OR t2.c IS NULL,predicate.sql,SAME,,"[('Nested Loop Left Join',), ('  Join Filter: ((t2.a IS NULL) OR (t2.c IS NULL))',), ('  ->  Nested Loop Left Join',), ('        Join Filter: (t1.a = 1)',), ('        ->  Seq Scan on pred_tab t1',), ('        ->  Materialize',), ('              ->  Seq Scan on pred_tab t2',), ('  ->  Materialize',), ('        ->  Seq Scan on pred_tab t3',)]"
postgresql,postgresql,"SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements",prepare.sql,SAME,,[]
postgresql,postgresql,PREPARE q1 AS SELECT 1 AS a,prepare.sql,SAME,,[]
postgresql,postgresql,EXECUTE q1,prepare.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements",prepare.sql,SAME,,"[('q1', 'PREPARE q1 AS SELECT 1 AS a', '{}', '{integer}')]"
postgresql,postgresql,DEALLOCATE q1,prepare.sql,SAME,,[]
postgresql,postgresql,PREPARE q1 AS SELECT 2,prepare.sql,SAME,,[]
postgresql,postgresql,EXECUTE q1,prepare.sql,SAME,,"[(2,)]"
postgresql,postgresql,PREPARE q2 AS SELECT 2 AS b,prepare.sql,SAME,,[]
postgresql,postgresql,"SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements",prepare.sql,SAME,,"[('q1', 'PREPARE q1 AS SELECT 2', '{}', '{integer}'), ('q2', 'PREPARE q2 AS SELECT 2 AS b', '{}', '{integer}')]"
postgresql,postgresql,DEALLOCATE PREPARE q1,prepare.sql,SAME,,[]
postgresql,postgresql,"SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements",prepare.sql,SAME,,"[('q2', 'PREPARE q2 AS SELECT 2 AS b', '{}', '{integer}')]"
postgresql,postgresql,DEALLOCATE PREPARE q2,prepare.sql,SAME,,[]
postgresql,postgresql,"SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements",prepare.sql,SAME,,[]
postgresql,postgresql,"PREPARE q2(text) AS 	SELECT datname, datistemplate, datallowconn 	FROM pg_database WHERE datname = $1",prepare.sql,SAME,,[]
postgresql,postgresql,EXECUTE q2('postgres'),prepare.sql,SAME,,"[('postgres', False, True)]"
postgresql,postgresql,"SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements     ORDER BY name",prepare.sql,SAME,,"[('q2', 'PREPARE q2(text) AS\n\tSELECT datname, datistemplate, datallowconn\n\tFROM pg_database WHERE datname = $1', '{text}', '{name,boolean,boolean}')]"
postgresql,postgresql,DEALLOCATE ALL,prepare.sql,SAME,,[]
postgresql,postgresql,"SELECT name, statement, parameter_types FROM pg_prepared_statements     ORDER BY name",prepare.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,UPDATE pxtest1 SET foobar = 'bbb' WHERE foobar = 'aaa',prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',)]"
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',)]"
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',)]"
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',), ('ddd',)]"
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',), ('ddd',)]"
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',), ('ddd',)]"
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,UPDATE pxtest1 SET foobar = 'eee' WHERE foobar = 'ddd',prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',), ('eee',)]"
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',), ('eee',), ('fff',)]"
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',), ('eee',), ('fff',)]"
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,UPDATE pxtest1 SET foobar = 'eee' WHERE foobar = 'ddd',prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',), ('eee',), ('fff',)]"
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pxtest1,prepared_xacts.sql,SAME,,"[('bbb',), ('eee',), ('fff',)]"
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,BEGIN,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT pg_advisory_lock(1),prepared_xacts.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT pg_advisory_xact_lock_shared(1),prepared_xacts.sql,SAME,,"[('',)]"
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT a,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO a,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT b,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,DECLARE foo CURSOR FOR SELECT * FROM pxtest4,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,FETCH 1 FROM foo,prepared_xacts.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,begin,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,rollback,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,begin,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,rollback,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SELECT gid FROM pg_prepared_xacts,prepared_xacts.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages TO 'warning',privileges.sql,SAME,,[]
postgresql,postgresql,SELECT lo_unlink(oid) FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid,privileges.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,privileges.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,privileges.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,privileges.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,privileges.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,privileges.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,privileges.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT session_user, current_user",privileges.sql,SAME,,"[('tester', 'tester')]"
postgresql,postgresql,SELECT * FROM atest1,privileges.sql,SAME,,[]
postgresql,postgresql,DELETE FROM atest1,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atest1 SET a = 1 WHERE b = 'blech',privileges.sql,SAME,,[]
postgresql,postgresql,TRUNCATE atest1,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK atest1 IN ACCESS EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,REVOKE ALL ON atest1 FROM PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest1,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest1,privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT session_user, current_user",privileges.sql,SAME,,"[('tester', 'tester')]"
postgresql,postgresql,SELECT * FROM atest1,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest2,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atest1 SET a = 1 WHERE a = 2,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atest2 SET col2 = NOT col2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest1 FOR UPDATE,privileges.sql,SAME,,"[(1, 'two'), (1, 'two')]"
postgresql,postgresql,SELECT * FROM atest2 FOR UPDATE,privileges.sql,SAME,,"[('foo', False)]"
postgresql,postgresql,DELETE FROM atest2,privileges.sql,SAME,,[]
postgresql,postgresql,TRUNCATE atest2,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK atest2 IN ACCESS EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON atest1 TO PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) ),privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) ),privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest1,privileges.sql,SAME,,"[(1, 'two'), (1, 'two')]"
postgresql,postgresql,SELECT * FROM atest2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest1,privileges.sql,SAME,,"[(1, 'two'), (1, 'two')]"
postgresql,postgresql,SELECT * FROM atest2,privileges.sql,SAME,,"[('foo', True)]"
postgresql,postgresql,UPDATE atest2 SET col2 = true,privileges.sql,SAME,,[]
postgresql,postgresql,DELETE FROM atest2,privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT session_user, current_user",privileges.sql,SAME,,"[('tester', 'tester')]"
postgresql,postgresql,SELECT * FROM atest1,privileges.sql,SAME,,"[(1, 'two'), (1, 'two')]"
postgresql,postgresql,SELECT * FROM atest2,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atest1 SET a = 1 WHERE a = 2,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atest2 SET col2 = NULL,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atest2 SET col2 = NOT col2,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atest2 SET col2 = true FROM atest1 WHERE atest1.a = 5,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest1 FOR UPDATE,privileges.sql,SAME,,"[(1, 'two'), (1, 'two'), (1, 'two'), (1, 'two'), (1, 'two'), (1, 'two')]"
postgresql,postgresql,SELECT * FROM atest2 FOR UPDATE,privileges.sql,SAME,,"[('foo', None)]"
postgresql,postgresql,DELETE FROM atest2,privileges.sql,SAME,,[]
postgresql,postgresql,TRUNCATE atest2,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK atest2 IN ACCESS EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) ),privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) ),privileges.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON atest12 (a),privileges.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON atest12 (abs(a)),privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE atest12 SET (autovacuum_enabled = off),privileges.sql,SAME,,[]
postgresql,postgresql,SET default_statistics_target = 10000,privileges.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE atest12,privileges.sql,SAME,,[]
postgresql,postgresql,RESET default_statistics_target,privileges.sql,SAME,,[]
postgresql,postgresql,"GRANT SELECT (a, b) ON atest12 TO PUBLIC",privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest3,privileges.sql,SAME,,[]
postgresql,postgresql,DELETE FROM atest3,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW atestv1 AS SELECT * FROM atest1,privileges.sql,SAME,,[]
postgresql,postgresql,"/* The next *should* fail, but it's not implemented that way yet. */ CREATE VIEW atestv2 AS SELECT * FROM atest2",privileges.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW atestv3 AS SELECT * FROM atest3,privileges.sql,SAME,,[]
postgresql,postgresql,/* Empty view is a corner case that failed in 9.2. */ CREATE VIEW atestv0 AS SELECT 0 as x WHERE false,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atestv1,privileges.sql,SAME,,"[(1, 'two'), (1, 'two'), (1, 'two'), (1, 'two'), (1, 'two'), (1, 'two')]"
postgresql,postgresql,SELECT * FROM atestv2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atestv1,privileges.sql,SAME,,"[(1, 'two'), (1, 'two'), (1, 'two'), (1, 'two'), (1, 'two'), (1, 'two')]"
postgresql,postgresql,SELECT * FROM atestv2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atestv3,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atestv0,privileges.sql,SAME,,[]
postgresql,postgresql,set constraint_exclusion = on,privileges.sql,SAME,,[]
postgresql,postgresql,reset constraint_exclusion,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW atestv4 AS SELECT * FROM atestv3,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atestv4,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atestv3,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atestv4,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atestv2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest5,privileges.sql,SAME,,"[(1, 2, 3, None)]"
postgresql,postgresql,SELECT one FROM atest5,privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT two FROM atest5,privileges.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT atest5 FROM atest5,privileges.sql,SAME,,"[('(1,2,3,)',)]"
postgresql,postgresql,SELECT 1 FROM atest5,privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT 1 FROM atest5 a JOIN atest5 b USING (one),privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT 1 FROM atest5 a JOIN atest5 b USING (two),privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT 1 FROM atest5 a NATURAL JOIN atest5 b,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM (atest5 a JOIN atest5 b USING (one)) j,privileges.sql,SAME,,"[(1, 2, 3, None, 2, 3, None)]"
postgresql,postgresql,SELECT j.* FROM (atest5 a JOIN atest5 b USING (one)) j,privileges.sql,SAME,,"[(1, 2, 3, None, 2, 3, None)]"
postgresql,postgresql,SELECT (j.*) IS NULL FROM (atest5 a JOIN atest5 b USING (one)) j,privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT one FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j",privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT j.one FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j",privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT two FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j",privileges.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT j.two FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j",privileges.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT y FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j",privileges.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT j.y FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j",privileges.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT * FROM (atest5 a JOIN atest5 b USING (one)),privileges.sql,SAME,,"[(1, 2, 3, None, 2, 3, None)]"
postgresql,postgresql,SELECT a.* FROM (atest5 a JOIN atest5 b USING (one)),privileges.sql,SAME,,"[(1, 2, 3, None)]"
postgresql,postgresql,SELECT (a.*) IS NULL FROM (atest5 a JOIN atest5 b USING (one)),privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT two FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one))",privileges.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT a.two FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one))",privileges.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT y FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one))",privileges.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT b.y FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one))",privileges.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT y FROM (atest5 a LEFT JOIN atest5 b(one,x,y,z) USING (one))",privileges.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT b.y FROM (atest5 a LEFT JOIN atest5 b(one,x,y,z) USING (one))",privileges.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT y FROM (atest5 a FULL JOIN atest5 b(one,x,y,z) USING (one))",privileges.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT b.y FROM (atest5 a FULL JOIN atest5 b(one,x,y,z) USING (one))",privileges.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT 1 FROM atest5 WHERE two = 2,privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT * FROM atest1, atest5",privileges.sql,SAME,,"[(1, 'two', 1, 2, 3, None), (1, 'two', 1, 2, 3, None), (1, 'two', 1, 2, 3, None), (1, 'two', 1, 2, 3, None), (1, 'two', 1, 2, 3, None), (1, 'two', 1, 2, 3, None)]"
postgresql,postgresql,"SELECT atest1.* FROM atest1, atest5",privileges.sql,SAME,,"[(1, 'two'), (1, 'two'), (1, 'two'), (1, 'two'), (1, 'two'), (1, 'two')]"
postgresql,postgresql,"SELECT atest1.*,atest5.one FROM atest1, atest5",privileges.sql,SAME,,"[(1, 'two', 1), (1, 'two', 1), (1, 'two', 1), (1, 'two', 1), (1, 'two', 1), (1, 'two', 1)]"
postgresql,postgresql,"SELECT atest1.*,atest5.one FROM atest1 JOIN atest5 ON (atest1.a = atest5.two)",privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT atest1.*,atest5.one FROM atest1 JOIN atest5 ON (atest1.a = atest5.one)",privileges.sql,SAME,,"[(1, 'two', 1), (1, 'two', 1), (1, 'two', 1), (1, 'two', 1), (1, 'two', 1), (1, 'two', 1)]"
postgresql,postgresql,"SELECT one, two FROM atest5",privileges.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,"SELECT one, two FROM atest5 NATURAL JOIN atest6",privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT one, two FROM atest5 NATURAL JOIN atest6",privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atest5 SET three = 10,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atest5 SET one = 8,privileges.sql,SAME,,[]
postgresql,postgresql,"UPDATE atest5 SET three = 5, one = 2",privileges.sql,SAME,,[]
postgresql,postgresql,SELECT one FROM atest5,privileges.sql,SAME,,"[(2,), (2,), (2,), (8,), (None,), (None,)]"
postgresql,postgresql,UPDATE atest5 SET one = 1,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT atest6 FROM atest6,privileges.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED THEN 	UPDATE SET b = s.b WHEN NOT MATCHED THEN 	INSERT VALUES (a, NULL)",privileges.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED THEN 	UPDATE SET b = 'x' WHEN NOT MATCHED THEN 	INSERT VALUES (a, b)",privileges.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED AND s.b = 'x' THEN 	UPDATE SET b = 'x' WHEN NOT MATCHED THEN 	INSERT VALUES (a, NULL)",privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED THEN 	UPDATE SET b = 'ok' WHEN NOT MATCHED THEN 	INSERT VALUES (a, NULL)",privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED THEN 	UPDATE SET b = s.b WHEN NOT MATCHED THEN 	INSERT VALUES (a, b)",privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED THEN 	UPDATE SET b = t.b WHEN NOT MATCHED THEN 	INSERT VALUES (a, NULL)",privileges.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED THEN 	UPDATE SET b = s.b, a = t.a + 1 WHEN NOT MATCHED THEN 	INSERT VALUES (a, b)",privileges.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED AND t.b IS NOT NULL THEN 	UPDATE SET b = s.b WHEN NOT MATCHED THEN 	INSERT VALUES (a, b)",privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED THEN 	UPDATE SET b = s.b,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED AND t.b IS NOT NULL THEN 	DELETE,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,MERGE INTO mtarget t USING msource s ON t.a = s.a WHEN MATCHED AND t.b IS NOT NULL THEN 	DELETE,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE errtst ATTACH PARTITION errtst_part_1 FOR VALUES IN ('aaa'),privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE errtst ATTACH PARTITION errtst_part_2 FOR VALUES IN ('aaaa'),privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE atest6 ADD COLUMN three integer,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT atest6 FROM atest6,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT one FROM atest5 NATURAL JOIN atest6,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE atest6 DROP COLUMN three,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT atest6 FROM atest6,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT one FROM atest5 NATURAL JOIN atest6,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE atest6 DROP COLUMN two,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM atest6,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT 1 FROM atest6,privileges.sql,SAME,,[]
postgresql,postgresql,DELETE FROM atest5 WHERE one = 1,privileges.sql,SAME,,[]
postgresql,postgresql,DELETE FROM atest5 WHERE two = 2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT fx FROM atestp2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT fy FROM atestp2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT atestp2 FROM atestp2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT tableoid FROM atestp2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT fy FROM atestc,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT fx FROM atestp2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT fy FROM atestp2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT atestp2 FROM atestp2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT tableoid FROM atestp2,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT f2 FROM atestp1,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT f2 FROM atestc,privileges.sql,SAME,,[]
postgresql,postgresql,DELETE FROM atestp1,privileges.sql,SAME,,[]
postgresql,postgresql,DELETE FROM atestc,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atestp1 SET f1 = 1,privileges.sql,SAME,,[]
postgresql,postgresql,UPDATE atestc SET f1 = 1,privileges.sql,SAME,,[]
postgresql,postgresql,TRUNCATE atestp1,privileges.sql,SAME,,[]
postgresql,postgresql,TRUNCATE atestc,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK atestp1,privileges.sql,SAME,,[]
postgresql,postgresql,END,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK atestc,privileges.sql,SAME,,[]
postgresql,postgresql,END,privileges.sql,SAME,,[]
postgresql,postgresql,REVOKE ALL PRIVILEGES ON LANGUAGE sql FROM PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE priv_testagg1(int) (sfunc = int4pl, stype = int4)",privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT priv_testagg1(x) FROM (VALUES (1), (2), (3)) _(x)",privileges.sql,SAME,,"[(6,)]"
postgresql,postgresql,"SELECT priv_testagg1(x) FROM (VALUES (1), (2), (3)) _(x)",privileges.sql,SAME,,"[(6,)]"
postgresql,postgresql,SELECT col1 FROM atest2 WHERE col2 = true,privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT priv_testagg1(x) FROM (VALUES (1), (2), (3)) _(x)",privileges.sql,SAME,,"[(6,)]"
postgresql,postgresql,DROP AGGREGATE priv_testagg1(int),privileges.sql,SAME,,[]
postgresql,postgresql,GRANT ALL PRIVILEGES ON LANGUAGE sql TO PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT '{1}'::int4[]::int8[],privileges.sql,SAME,,"[([1],)]"
postgresql,postgresql,REVOKE ALL ON FUNCTION int8(integer) FROM PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT '{1}'::int4[]::int8[],privileges.sql,SAME,,"[([1],)]"
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE priv_testtype1 AS (a int, b text)",privileges.sql,SAME,,[]
postgresql,postgresql,REVOKE USAGE ON TYPE priv_testtype1 FROM PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN priv_testdomain1 AS int,privileges.sql,SAME,,[]
postgresql,postgresql,REVOKE USAGE on DOMAIN priv_testdomain1 FROM PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE priv_testagg1a(priv_testdomain1) (sfunc = int4_sum, stype = bigint)",privileges.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN priv_testdomain2a AS priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN priv_testdomain3a AS int,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION castfunc(int) RETURNS priv_testdomain3a AS $$ SELECT $1::priv_testdomain3a $$ LANGUAGE SQL,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE CAST (priv_testdomain1 AS priv_testdomain3a) WITH FUNCTION castfunc(int),privileges.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION castfunc(int) CASCADE,privileges.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN priv_testdomain3a,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION priv_testfunc5a(a priv_testdomain1) RETURNS int LANGUAGE SQL AS $$ SELECT $1 $$,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION priv_testfunc6a(b int) RETURNS priv_testdomain1 LANGUAGE SQL AS $$ SELECT $1::priv_testdomain1 $$,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test9a ADD COLUMN c priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test9a ALTER COLUMN b TYPE priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE test7a AS (a int, b priv_testdomain1)",privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE test8a AS (a int, b int)",privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test8a ADD ATTRIBUTE c priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test8a ALTER ATTRIBUTE b TYPE priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,REVOKE ALL ON TYPE priv_testtype1 FROM PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE priv_testagg1b(priv_testdomain1) (sfunc = int4_sum, stype = bigint)",privileges.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN priv_testdomain2b AS priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN priv_testdomain3b AS int,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION castfunc(int) RETURNS priv_testdomain3b AS $$ SELECT $1::priv_testdomain3b $$ LANGUAGE SQL,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE CAST (priv_testdomain1 AS priv_testdomain3b) WITH FUNCTION castfunc(int),privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION priv_testfunc5b(a priv_testdomain1) RETURNS int LANGUAGE SQL AS $$ SELECT $1 $$,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION priv_testfunc6b(b int) RETURNS priv_testdomain1 LANGUAGE SQL AS $$ SELECT $1::priv_testdomain1 $$,privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR !! (PROCEDURE = priv_testfunc5b, RIGHTARG = priv_testdomain1)",privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test9b ADD COLUMN c priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test9b ALTER COLUMN b TYPE priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE test7b AS (a int, b priv_testdomain1)",privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE test8b AS (a int, b int)",privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test8b ADD ATTRIBUTE c priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TYPE test8b ALTER ATTRIBUTE b TYPE priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,REVOKE ALL ON TYPE priv_testtype1 FROM PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,DROP AGGREGATE priv_testagg1b(priv_testdomain1),privileges.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN priv_testdomain2b,privileges.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR !! (NONE, priv_testdomain1)",privileges.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION priv_testfunc5b(a priv_testdomain1),privileges.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION priv_testfunc6b(b int),privileges.sql,SAME,,[]
postgresql,postgresql,DROP TYPE test7b,privileges.sql,SAME,,[]
postgresql,postgresql,DROP TYPE test8b,privileges.sql,SAME,,[]
postgresql,postgresql,DROP CAST (priv_testdomain1 AS priv_testdomain3b),privileges.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION castfunc(int) CASCADE,privileges.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN priv_testdomain3b,privileges.sql,SAME,,[]
postgresql,postgresql,TRUNCATE atest2,privileges.sql,SAME,,[]
postgresql,postgresql,TRUNCATE atest3,privileges.sql,SAME,,[]
postgresql,postgresql,"select has_table_privilege(NULL,'pg_authid','select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_table_privilege(-999999,'pg_authid','update')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(1,'select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_table_privilege(current_user,'pg_authid','select')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(current_user,'pg_authid','insert')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,'pg_authid','update') from (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,'pg_authid','delete') from (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(current_user,t1.oid,'rule') from (select oid from pg_class where relname = 'pg_authid') as t1",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(current_user,t1.oid,'references') from (select oid from pg_class where relname = 'pg_authid') as t1",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,t1.oid,'select') from (select oid from pg_class where relname = 'pg_authid') as t1,   (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,t1.oid,'insert') from (select oid from pg_class where relname = 'pg_authid') as t1,   (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege('pg_authid','update')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege('pg_authid','delete')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege('pg_authid','truncate')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t1.oid,'select') from (select oid from pg_class where relname = 'pg_authid') as t1",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t1.oid,'trigger') from (select oid from pg_class where relname = 'pg_authid') as t1",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(current_user,'pg_class','select')",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(current_user,'pg_class','insert')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,'pg_class','update') from (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,'pg_class','delete') from (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(current_user,t1.oid,'references') from (select oid from pg_class where relname = 'pg_class') as t1",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,t1.oid,'select') from (select oid from pg_class where relname = 'pg_class') as t1,   (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,t1.oid,'insert') from (select oid from pg_class where relname = 'pg_class') as t1,   (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege('pg_class','update')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege('pg_class','delete')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege('pg_class','truncate')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(t1.oid,'select') from (select oid from pg_class where relname = 'pg_class') as t1",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(t1.oid,'trigger') from (select oid from pg_class where relname = 'pg_class') as t1",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select has_table_privilege(current_user,'atest1','select')",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(current_user,'atest1','insert')",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,'atest1','update') from (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,'atest1','delete') from (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(current_user,t1.oid,'references') from (select oid from pg_class where relname = 'atest1') as t1",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,t1.oid,'select') from (select oid from pg_class where relname = 'atest1') as t1,   (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(t2.oid,t1.oid,'insert') from (select oid from pg_class where relname = 'atest1') as t1,   (select oid from pg_roles where rolname = current_user) as t2",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege('atest1','update')",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege('atest1','delete')",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege('atest1','truncate')",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(t1.oid,'select') from (select oid from pg_class where relname = 'atest1') as t1",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_table_privilege(t1.oid,'trigger') from (select oid from pg_class where relname = 'atest1') as t1",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select has_column_privilege('pg_authid',NULL,'select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_column_privilege(9999,'nosuchcol','select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_column_privilege(9999,99::int2,'select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_column_privilege('pg_authid',99::int2,'select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_column_privilege(9999,99::int2,'select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"create temp table mytable(f1 int, f2 int, f3 int)",privileges.sql,SAME,,[]
postgresql,postgresql,alter table mytable drop column f2,privileges.sql,SAME,,[]
postgresql,postgresql,"select has_column_privilege('mytable','........pg.dropped.2........','select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_column_privilege('mytable',2::int2,'select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_column_privilege('mytable',99::int2,'select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_column_privilege('mytable',2::int2,'select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select has_column_privilege('mytable',99::int2,'select')",privileges.sql,SAME,,"[(None,)]"
postgresql,postgresql,END,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE sro_tab,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE CONCURRENTLY sro_tab,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE sro_ptab,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION unwanted_grant() RETURNS void LANGUAGE sql AS 	'GRANT regress_priv_group2 TO regress_sro_user',privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,SET CONSTRAINTS ALL IMMEDIATE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW sro_index_mv AS SELECT 1 AS c,privileges.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW sro_index_mv,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION dogrant_ok() RETURNS void LANGUAGE sql SECURITY DEFINER AS 	'GRANT regress_priv_group2 TO regress_priv_user5',privileges.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION dogrant_ok(),privileges.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE x_seq,privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT has_sequence_privilege('x_seq', 'USAGE')",privileges.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT lo_create(1001),privileges.sql,SAME,,"[(1001,)]"
postgresql,postgresql,SELECT lo_create(1002),privileges.sql,SAME,,"[(1002,)]"
postgresql,postgresql,SELECT lo_create(1003),privileges.sql,SAME,,"[(1003,)]"
postgresql,postgresql,SELECT lo_create(1004),privileges.sql,SAME,,"[(1004,)]"
postgresql,postgresql,SELECT lo_create(1005),privileges.sql,SAME,,"[(1005,)]"
postgresql,postgresql,GRANT ALL ON LARGE OBJECT 1001 TO PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT lo_create(2001),privileges.sql,SAME,,"[(2001,)]"
postgresql,postgresql,SELECT lo_create(2002),privileges.sql,SAME,,"[(2002,)]"
postgresql,postgresql,"SELECT loread(lo_open(1001, x'20000'::int), 32)",privileges.sql,SAME,,"[(<memory at 0x126577f40>,)]"
postgresql,postgresql,"SELECT loread(lo_open(1001, x'40000'::int), 32)",privileges.sql,SAME,,"[(<memory at 0x126577b80>,)]"
postgresql,postgresql,"SELECT loread(lo_open(1002, x'40000'::int), 32)",privileges.sql,SAME,,"[(<memory at 0x126577dc0>,)]"
postgresql,postgresql,"SELECT loread(lo_open(1003, x'40000'::int), 32)",privileges.sql,SAME,,"[(<memory at 0x126577e80>,)]"
postgresql,postgresql,"SELECT loread(lo_open(1004, x'40000'::int), 32)",privileges.sql,SAME,,"[(<memory at 0x105c79c00>,)]"
postgresql,postgresql,"SELECT lowrite(lo_open(1001, x'20000'::int), 'abcd')",privileges.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT lowrite(lo_open(1002, x'20000'::int), 'abcd')",privileges.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT lowrite(lo_open(1003, x'20000'::int), 'abcd')",privileges.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT lowrite(lo_open(1004, x'20000'::int), 'abcd')",privileges.sql,SAME,,"[(4,)]"
postgresql,postgresql,"REVOKE ALL ON LARGE OBJECT 2001, 2002 FROM PUBLIC",privileges.sql,SAME,,[]
postgresql,postgresql,SELECT lo_unlink(1001),privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT lo_unlink(2002),privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT oid, pg_get_userbyid(lomowner) ownername, lomacl FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid",privileges.sql,SAME,,"[(1002, 'tester', None), (1003, 'tester', None), (1004, 'tester', None), (1005, 'tester', None), (2001, 'tester', '{tester=rw/tester}')]"
postgresql,postgresql,"SELECT loread(lo_open(1003, x'40000'::int), 32)",privileges.sql,SAME,,"[(<memory at 0x12668c040>,)]"
postgresql,postgresql,"SELECT loread(lo_open(1005, x'40000'::int), 32)",privileges.sql,SAME,,"[(<memory at 0x12668c100>,)]"
postgresql,postgresql,"SELECT lo_truncate(lo_open(1005, x'20000'::int), 10)",privileges.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT lo_truncate(lo_open(2001, x'20000'::int), 10)",privileges.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT loread(lo_open(1002, x'40000'::int), 32)",privileges.sql,SAME,,"[(<memory at 0x12668c1c0>,)]"
postgresql,postgresql,"SELECT lowrite(lo_open(1002, x'20000'::int), 'abcd')",privileges.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT lo_truncate(lo_open(1002, x'20000'::int), 10)",privileges.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT lo_put(1002, 1, 'abcd')",privileges.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT lo_unlink(1002),privileges.sql,SAME,,"[(1,)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE datdba_only OWNER TO pg_database_owner,privileges.sql,SAME,,[]
postgresql,postgresql,REVOKE DELETE ON datdba_only FROM pg_database_owner,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA testns,privileges.sql,SAME,,[]
postgresql,postgresql,"ALTER DEFAULT PRIVILEGES IN SCHEMA testns,testns GRANT SELECT ON TABLES TO public,public",privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_input_is_valid('regress_priv_user1=r/regress_priv_user2', 'aclitem')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('regress_priv_user1=r/', 'aclitem')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('regress_priv_user1=r/', 'aclitem')",privileges.sql,SAME,,"[('role ""regress_priv_user1"" does not exist', None, None, '42704')]"
postgresql,postgresql,"SELECT pg_input_is_valid('regress_priv_user1=r/regress_no_such_user', 'aclitem')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('regress_priv_user1=r/regress_no_such_user', 'aclitem')",privileges.sql,SAME,,"[('role ""regress_priv_user1"" does not exist', None, None, '42704')]"
postgresql,postgresql,"SELECT pg_input_is_valid('regress_priv_user1=rY', 'aclitem')",privileges.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('regress_priv_user1=rY', 'aclitem')",privileges.sql,SAME,,"[('invalid mode character: must be one of ""arwdDxtXUCTcsA""', None, None, '22P02')]"
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA testns5,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION testns.foo() RETURNS int AS 'select 1' LANGUAGE sql,privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE testns.agg1(int) (sfunc = int4pl, stype = int4)",privileges.sql,SAME,,[]
postgresql,postgresql,CREATE PROCEDURE testns.bar() AS 'select 1' LANGUAGE sql,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT EXECUTE ON ROUTINES to public,privileges.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION testns.foo(),privileges.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION testns.foo() RETURNS int AS 'select 1' LANGUAGE sql,privileges.sql,SAME,,[]
postgresql,postgresql,DROP AGGREGATE testns.agg1(int),privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE testns.agg1(int) (sfunc = int4pl, stype = int4)",privileges.sql,SAME,,[]
postgresql,postgresql,DROP PROCEDURE testns.bar(),privileges.sql,SAME,,[]
postgresql,postgresql,CREATE PROCEDURE testns.bar() AS 'select 1' LANGUAGE sql,privileges.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION testns.foo(),privileges.sql,SAME,,[]
postgresql,postgresql,DROP AGGREGATE testns.agg1(int),privileges.sql,SAME,,[]
postgresql,postgresql,DROP PROCEDURE testns.bar(),privileges.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN testns.priv_testdomain1 AS int,privileges.sql,SAME,,[]
postgresql,postgresql,ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT USAGE ON TYPES to public,privileges.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN testns.priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN testns.priv_testdomain1 AS int,privileges.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN testns.priv_testdomain1,privileges.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT count(*)   FROM pg_default_acl d LEFT JOIN pg_namespace n ON defaclnamespace = n.oid   WHERE nspname = 'testns',privileges.sql,SAME,,"[(3,)]"
postgresql,postgresql,DROP SCHEMA testns CASCADE,privileges.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA testns5 CASCADE,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT d.*        FROM pg_default_acl d LEFT JOIN pg_namespace n ON defaclnamespace = n.oid   WHERE nspname IS NULL AND defaclnamespace != 0,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA testns,privileges.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE testns.priv_testagg(int) (sfunc = int4pl, stype = int4)",privileges.sql,SAME,,[]
postgresql,postgresql,CREATE PROCEDURE testns.priv_testproc(int) AS 'select 3' LANGUAGE sql,privileges.sql,SAME,,[]
postgresql,postgresql,REVOKE ALL ON ALL FUNCTIONS IN SCHEMA testns FROM PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,REVOKE ALL ON ALL PROCEDURES IN SCHEMA testns FROM PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON ALL ROUTINES IN SCHEMA testns TO PUBLIC,privileges.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA testns CASCADE,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA testns,privileges.sql,SAME,,[]
postgresql,postgresql,"SELECT nspname, rolname FROM pg_namespace, pg_roles WHERE pg_namespace.nspname = 'testns' AND pg_namespace.nspowner = pg_roles.oid",privileges.sql,SAME,,"[('testns', 'tester')]"
postgresql,postgresql,"SELECT nspname, rolname FROM pg_namespace, pg_roles WHERE pg_namespace.nspname = 'testns' AND pg_namespace.nspowner = pg_roles.oid",privileges.sql,SAME,,"[('testns', 'tester')]"
postgresql,postgresql,DROP SCHEMA testns CASCADE,privileges.sql,SAME,,[]
postgresql,postgresql,drop sequence x_seq,privileges.sql,SAME,,[]
postgresql,postgresql,DROP VIEW atestv0,privileges.sql,SAME,,[]
postgresql,postgresql,DROP VIEW atestv1,privileges.sql,SAME,,[]
postgresql,postgresql,DROP VIEW atestv2,privileges.sql,SAME,,[]
postgresql,postgresql,DROP VIEW atestv3 CASCADE,privileges.sql,SAME,,[]
postgresql,postgresql,SELECT lo_unlink(oid) FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid,privileges.sql,SAME,,"[(1,), (1,), (1,), (1,)]"
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS SHARE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ROW EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS SHARE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ROW EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS SHARE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ROW EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS SHARE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ROW EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS SHARE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ROW EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS SHARE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ROW EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,BEGIN,privileges.sql,SAME,,[]
postgresql,postgresql,LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE,privileges.sql,SAME,,[]
postgresql,postgresql,COMMIT,privileges.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,privileges.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA regress_roleoption,privileges.sql,SAME,,[]
postgresql,postgresql,"GRANT CREATE, USAGE ON SCHEMA regress_roleoption TO PUBLIC",privileges.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,privileges.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA regress_roleoption,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON maintain_test (a),privileges.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW refresh_test AS SELECT 1,privileges.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA reindex_test,privileges.sql,SAME,,[]
postgresql,postgresql,VACUUM maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,ANALYZE maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,CLUSTER maintain_test USING maintain_test_a_idx,privileges.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW refresh_test,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX maintain_test_a_idx,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA reindex_test,privileges.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,privileges.sql,SAME,,[]
postgresql,postgresql,VACUUM maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,ANALYZE maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,CLUSTER maintain_test USING maintain_test_a_idx,privileges.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW refresh_test,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX maintain_test_a_idx,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA reindex_test,privileges.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,privileges.sql,SAME,,[]
postgresql,postgresql,VACUUM maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,ANALYZE maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,CLUSTER maintain_test USING maintain_test_a_idx,privileges.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW refresh_test,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX TABLE maintain_test,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX INDEX maintain_test_a_idx,privileges.sql,SAME,,[]
postgresql,postgresql,REINDEX SCHEMA reindex_test,privileges.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,privileges.sql,SAME,,[]
postgresql,postgresql,DROP MATERIALIZED VIEW refresh_test,privileges.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA reindex_test,privileges.sql,SAME,,[]
postgresql,postgresql,begin,psql.sql,SAME,,[]
postgresql,postgresql,rollback,psql.sql,SAME,,[]
postgresql,postgresql,"create temporary table gexec_test(a int, b text, c date, d float)",psql.sql,SAME,,[]
postgresql,postgresql,"prepare q as select repeat('x',2*n) as ""0123456789abcdef"", repeat('y',20-2*n) as ""0123456789"" from generate_series(1,10) as n",psql.sql,SAME,,[]
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('xx', 'yyyyyyyyyyyyyyyyyy'), ('xxxx', 'yyyyyyyyyyyyyyyy'), ('xxxxxx', 'yyyyyyyyyyyyyy'), ('xxxxxxxx', 'yyyyyyyyyyyy'), ('xxxxxxxxxx', 'yyyyyyyyyy'), ('xxxxxxxxxxxx', 'yyyyyyyy'), ('xxxxxxxxxxxxxx', 'yyyyyy'), ('xxxxxxxxxxxxxxxx', 'yyyy'), ('xxxxxxxxxxxxxxxxxx', 'yy'), ('xxxxxxxxxxxxxxxxxxxx', '')]"
postgresql,postgresql,deallocate q,psql.sql,SAME,,[]
postgresql,postgresql,select 1 where false,psql.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA tableam_display,psql.sql,SAME,,[]
postgresql,postgresql,SET search_path TO tableam_display,psql.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,psql.sql,SAME,,[]
postgresql,postgresql,RESET search_path,psql.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA tableam_display CASCADE,psql.sql,SAME,,[]
postgresql,postgresql,"select n, -n as m, n * 111 as x, '1e90'::float8 as f from generate_series(0,3) n",psql.sql,SAME,,"[(0, 0, 0, 1e+90), (1, -1, 111, 1e+90), (2, -2, 222, 1e+90), (3, -3, 333, 1e+90)]"
postgresql,postgresql,"prepare q as   select 'some|text' as ""a|title"", '        ' as ""empty "", n as int   from generate_series(1,2) as n",psql.sql,SAME,,[]
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some|text', '        ', 1), ('some|text', '        ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some|text', '        ', 1), ('some|text', '        ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some|text', '        ', 1), ('some|text', '        ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some|text', '        ', 1), ('some|text', '        ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some|text', '        ', 1), ('some|text', '        ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some|text', '        ', 1), ('some|text', '        ', 2)]"
postgresql,postgresql,deallocate q,psql.sql,SAME,,[]
postgresql,postgresql,"prepare q as   select 'some""text' as ""a""""title"", E'  <foo>\n<bar>' as ""junk"",          '   ' as ""empty"", n as int   from generate_series(1,2) as n",psql.sql,SAME,,[]
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some""text', '  <foo>\n<bar>', '   ', 1), ('some""text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some""text', '  <foo>\n<bar>', '   ', 1), ('some""text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,deallocate q,psql.sql,SAME,,[]
postgresql,postgresql,select '\.' as data,psql.sql,SAME,,"[('\\.',)]"
postgresql,postgresql,"select '\' as d1, '' as d2",psql.sql,SAME,,"[('\\', '')]"
postgresql,postgresql,"prepare q as   select 'some""text' as ""a&title"", E'  <foo>\n<bar>' as ""junk"",          '   ' as ""empty"", n as int   from generate_series(1,2) as n",psql.sql,SAME,,[]
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some""text', '  <foo>\n<bar>', '   ', 1), ('some""text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some""text', '  <foo>\n<bar>', '   ', 1), ('some""text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some""text', '  <foo>\n<bar>', '   ', 1), ('some""text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some""text', '  <foo>\n<bar>', '   ', 1), ('some""text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some""text', '  <foo>\n<bar>', '   ', 1), ('some""text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some""text', '  <foo>\n<bar>', '   ', 1), ('some""text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,deallocate q,psql.sql,SAME,,[]
postgresql,postgresql,"prepare q as   select 'some\more_text' as ""a$title"", E'  #<foo>%&^~|\n{bar}' as ""junk"",          '   ' as ""empty"", n as int   from generate_series(1,2) as n",psql.sql,SAME,,[]
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,deallocate q,psql.sql,SAME,,[]
postgresql,postgresql,"prepare q as   select 'some\more_text' as ""a$title"", E'  #<foo>%&^~|\n{bar}' as ""junk"",          '   ' as ""empty"", n as int   from generate_series(1,2) as n",psql.sql,SAME,,[]
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 1), ('some\\more_text', '  #<foo>%&^~|\n{bar}', '   ', 2)]"
postgresql,postgresql,deallocate q,psql.sql,SAME,,[]
postgresql,postgresql,"prepare q as   select 'some\text' as ""a\title"", E'  <foo>\n<bar>' as ""junk"",          '   ' as ""empty"", n as int   from generate_series(1,2) as n",psql.sql,SAME,,[]
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\text', '  <foo>\n<bar>', '   ', 1), ('some\\text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\text', '  <foo>\n<bar>', '   ', 1), ('some\\text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\text', '  <foo>\n<bar>', '   ', 1), ('some\\text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\text', '  <foo>\n<bar>', '   ', 1), ('some\\text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\text', '  <foo>\n<bar>', '   ', 1), ('some\\text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,execute q,psql.sql,SAME,,"[('some\\text', '  <foo>\n<bar>', '   ', 1), ('some\\text', '  <foo>\n<bar>', '   ', 2)]"
postgresql,postgresql,deallocate q,psql.sql,SAME,,[]
postgresql,postgresql,select 'okay',psql.sql,SAME,,"[('okay',)]"
postgresql,postgresql,select 'still okay',psql.sql,SAME,,"[('still okay',)]"
postgresql,postgresql,SELECT 1,psql.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT 1 AS stuff UNION SELECT 2,psql.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,create schema testpart,psql.sql,SAME,,[]
postgresql,postgresql,set search_path to testpart,psql.sql,SAME,,[]
postgresql,postgresql,create index testtable_apple_index on testtable_apple(logdate),psql.sql,SAME,,[]
postgresql,postgresql,create index testtable_orange_index on testtable_orange(logdate),psql.sql,SAME,,[]
postgresql,postgresql,create index testpart_apple_index on testpart_apple(logdate),psql.sql,SAME,,[]
postgresql,postgresql,create index testpart_orange_index on testpart_orange(logdate),psql.sql,SAME,,[]
postgresql,postgresql,create index parent_index on parent_tab (id),psql.sql,SAME,,[]
postgresql,postgresql,drop schema testpart,psql.sql,SAME,,[]
postgresql,postgresql,set search_path to default,psql.sql,SAME,,[]
postgresql,postgresql,set role to default,psql.sql,SAME,,[]
postgresql,postgresql,set work_mem = 10240,psql.sql,SAME,,[]
postgresql,postgresql,reset work_mem,psql.sql,SAME,,[]
postgresql,postgresql,begin,psql.sql,SAME,,[]
postgresql,postgresql,end,psql.sql,SAME,,[]
postgresql,postgresql,end,psql.sql,SAME,,[]
postgresql,postgresql,rollback,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ac_test,psql.sql,SAME,,"[(1,)]"
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,psql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ac_test,psql.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,BEGIN,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ac_test,psql.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,BEGIN,psql.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,psql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ac_test,psql.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,BEGIN,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM oer_test,psql.sql,SAME,,"[(1,)]"
postgresql,postgresql,BEGIN,psql.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,psql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM oer_test,psql.sql,SAME,,"[(1,)]"
postgresql,postgresql,BEGIN,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT AND CHAIN,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM oer_test,psql.sql,SAME,,"[(1,), (5,), (6,)]"
postgresql,postgresql,SELECT 2 AS two,psql.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT 7,psql.sql,SAME,,"[(7,)]"
postgresql,postgresql,SELECT 10 AS ten,psql.sql,SAME,,"[(10,)]"
postgresql,postgresql,ROLLBACK,psql.sql,SAME,,[]
postgresql,postgresql,"SELECT 'ok' AS ""done""",psql.sql,SAME,,"[('ok',)]"
postgresql,postgresql,SELECT 2 AS two,psql.sql,SAME,,"[(2,)]"
postgresql,postgresql,"CREATE TEMPORARY TABLE reload_output(   lineno int NOT NULL GENERATED ALWAYS AS IDENTITY,   line text )",psql.sql,SAME,,[]
postgresql,postgresql,SELECT line FROM reload_output ORDER BY lineno,psql.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE reload_output,psql.sql,SAME,,[]
postgresql,postgresql,SELECT 3 AS c,psql.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT line FROM reload_output ORDER BY lineno,psql.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE reload_output,psql.sql,SAME,,[]
postgresql,postgresql,SELECT line FROM reload_output ORDER BY lineno,psql.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE reload_output,psql.sql,SAME,,[]
postgresql,postgresql,SELECT line FROM reload_output ORDER BY lineno,psql.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE reload_output,psql.sql,SAME,,[]
postgresql,postgresql,SELECT line FROM reload_output ORDER BY lineno,psql.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION psql_error(msg TEXT) RETURNS BOOLEAN AS $$   BEGIN     RAISE EXCEPTION 'error %', msg;   END; $$ LANGUAGE plpgsql",psql.sql,SAME,,[]
postgresql,postgresql,BEGIN,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,BEGIN,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,COMMIT,psql.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION psql_error,psql.sql,SAME,,[]
postgresql,postgresql,BEGIN,psql.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,psql.sql,SAME,,[]
postgresql,postgresql,ANALYZE ctv_data,psql_crosstab.sql,SAME,,[]
postgresql,postgresql,"SELECT v, EXTRACT(year FROM d), count(*)  FROM ctv_data  GROUP BY 1, 2  ORDER BY 1, 2",psql_crosstab.sql,SAME,,"[('v0', Decimal('2014'), 2), ('v0', Decimal('2015'), 1), ('v1', Decimal('2015'), 3), ('v2', Decimal('2015'), 1)]"
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub_default,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,COMMENT ON PUBLICATION testpub_default IS 'test publication',publication.sql,SAME,,[]
postgresql,postgresql,"SELECT obj_description(p.oid, 'pg_publication') FROM pg_publication p",publication.sql,SAME,,"[('test publication',)]"
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpib_ins_trunct WITH (publish = insert),publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_default SET (publish = update),publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_default SET (publish = 'insert, update, delete')",publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA pub_test,publication.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW testpub_view AS SELECT 1,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub_fortable FOR TABLE testpub_tbl1,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,"SELECT pubname, puballtables FROM pg_publication WHERE pubname = 'testpub_foralltables'",publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub3 FOR TABLE testpub_tbl3,publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub4 FOR TABLE ONLY testpub_tbl3,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,"DROP PUBLICATION testpub3, testpub4",publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub_forparted,publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub_forparted1,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_forparted1 SET (publish='insert'),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_parted ATTACH PARTITION testpub_parted1 FOR VALUES IN (1),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_parted ATTACH PARTITION testpub_parted2 FOR VALUES IN (2),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_parted1 SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_forparted ADD TABLE testpub_parted,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_parted SET a = 1 WHERE false,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_parted DETACH PARTITION testpub_parted1,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_parted1 SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_forparted SET (publish_via_partition_root = true),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_parted2 SET a = 2,publication.sql,SAME,,[]
postgresql,postgresql,"DROP PUBLICATION testpub_forparted, testpub_forparted1",publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA testpub_rf_schema1,publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA testpub_rf_schema2,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,"CREATE PUBLICATION testpub5 FOR TABLE testpub_rf_tbl1, testpub_rf_tbl2 WHERE (c <> 'test' AND d < 5) WITH (publish = 'insert')",publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 ADD TABLE testpub_rf_tbl3 WHERE (e > 1000 AND e < 2000),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl3 WHERE (e > 300 AND e < 500),publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub_rf_yes FOR TABLE testpub_rf_tbl1 WHERE (a > 1) WITH (publish = 'insert'),publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub_rf_no FOR TABLE testpub_rf_tbl1,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,"DROP PUBLICATION testpub_rf_yes, testpub_rf_no",publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,"CREATE PUBLICATION testpub_syntax1 FOR TABLE testpub_rf_tbl1, ONLY testpub_rf_tbl3 WHERE (e < 999) WITH (publish = 'insert')",publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub_syntax1,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,"CREATE PUBLICATION testpub_syntax2 FOR TABLE testpub_rf_tbl1, testpub_rf_schema1.testpub_rf_tbl5 WHERE (h < 999) WITH (publish = 'insert')",publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub_syntax2,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION testpub_rf_func1(integer, integer) RETURNS boolean AS $$ SELECT hashint4($1) > $2 $$ LANGUAGE SQL",publication.sql,SAME,,[]
postgresql,postgresql,"CREATE OPERATOR =#> (PROCEDURE = testpub_rf_func1, LEFTARG = integer, RIGHTARG = integer)",publication.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION testpub_rf_func2() RETURNS integer AS $$ BEGIN RETURN 123; END; $$ LANGUAGE plpgsql,publication.sql,SAME,,[]
postgresql,postgresql,"CREATE COLLATION user_collation FROM ""C""",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (NULLIF(1,2) = a)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (a IS NULL),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE ((a > 5) IS FALSE),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (a IS DISTINCT FROM 5),publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE ((a, a + 1) < (2, 3))",publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (b::varchar < '2'),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl4 WHERE (length(g) < 6),publication.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE rf_bug_status AS ENUM ('new', 'open', 'closed')",publication.sql,SAME,,[]
postgresql,postgresql,DROP TYPE rf_bug_status,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl5 WHERE (a IS DOCUMENT),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl5 WHERE (xmlexists('//foo[text() = ''bar'']' PASSING BY VALUE a)),publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (NULLIF(1, 2) = a)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (CASE a WHEN 5 THEN true ELSE false END),publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (COALESCE(b, 'foo') = 'foo')",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (GREATEST(a, 10) > 10)",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (a IN (2, 4, 6))",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (ARRAY[a] <@ ARRAY[2, 4, 6])",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl1 WHERE (ROW(a, 2) IS NULL)",publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA testpub_rf_schema1,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA testpub_rf_schema2,publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub5,publication.sql,SAME,,[]
postgresql,postgresql,"DROP OPERATOR =#>(integer, integer)",publication.sql,SAME,,[]
postgresql,postgresql,"DROP FUNCTION testpub_rf_func1(integer, integer)",publication.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION testpub_rf_func2(),publication.sql,SAME,,[]
postgresql,postgresql,DROP COLLATION user_collation,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_part_pk ATTACH PARTITION rf_tbl_abcd_part_pk_1 FOR VALUES FROM (1) TO (10),publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (a > 99),publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk WHERE (b > 99),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk WHERE (c > 99),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk WHERE (d > 99),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk WHERE (a > 99),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_pk REPLICA IDENTITY FULL,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_nopk REPLICA IDENTITY FULL,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk WHERE (c > 99),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk WHERE (a > 99),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_nopk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_pk REPLICA IDENTITY NOTHING,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_nopk REPLICA IDENTITY NOTHING,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk WHERE (a > 99),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk WHERE (c > 99),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk WHERE (a > 99),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_pk ALTER COLUMN c SET NOT NULL,publication.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX idx_abcd_pk_c ON rf_tbl_abcd_pk(c),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_pk REPLICA IDENTITY USING INDEX idx_abcd_pk_c,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_nopk ALTER COLUMN c SET NOT NULL,publication.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX idx_abcd_nopk_c ON rf_tbl_abcd_nopk(c),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_nopk REPLICA IDENTITY USING INDEX idx_abcd_nopk_c,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk WHERE (a > 99),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk WHERE (c > 99),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk WHERE (a > 99),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk WHERE (c > 99),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_nopk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=0),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk_1 WHERE (a > 99),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_part_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=1),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk WHERE (a > 99),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_part_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=0),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk_1 WHERE (b > 99),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=0),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=1),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk WHERE (b > 99),publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub6,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub_fortable_insert WITH (publish = 'insert'),publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_fortable ADD TABLE testpub_tbl5 (b, c)",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_fortable ADD TABLE testpub_tbl5 (a, c)",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_fortable_insert ADD TABLE testpub_tbl5 (b, c)",publication.sql,SAME,,[]
postgresql,postgresql,"/* not all replica identities are good enough */ CREATE UNIQUE INDEX testpub_tbl5_b_key ON testpub_tbl5 (b, c)",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE testpub_tbl5 ALTER b SET NOT NULL, ALTER c SET NOT NULL",publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl5 REPLICA IDENTITY USING INDEX testpub_tbl5_b_key,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl5 REPLICA IDENTITY USING INDEX testpub_tbl5_b_key,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_fortable ADD TABLE testpub_tbl5 (a, c)",publication.sql,SAME,,[]
postgresql,postgresql,"/* But if upd/del are not published, it works OK */ SET client_min_messages = 'ERROR'",publication.sql,SAME,,[]
postgresql,postgresql,"CREATE PUBLICATION testpub_table_ins WITH (publish = 'insert, truncate')",publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_table_ins ADD TABLE testpub_tbl5 (a),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_fortable ADD TABLE testpub_tbl5d,publication.sql,SAME,,[]
postgresql,postgresql,/* but works fine with FULL replica identity */ ALTER TABLE testpub_tbl5d REPLICA IDENTITY FULL,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_tbl5d SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl6 REPLICA IDENTITY FULL,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_fortable ADD TABLE testpub_tbl6 (a, b, c)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_fortable ADD TABLE testpub_tbl6,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_tbl6 SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_fortable ADD TABLE testpub_tbl7 (a, b)",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_fortable SET TABLE testpub_tbl7 (a, b)",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_fortable SET TABLE testpub_tbl7 (a, c)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_0 ADD PRIMARY KEY (a),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_0 REPLICA IDENTITY USING INDEX testpub_tbl8_0_pkey,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 ADD PRIMARY KEY (b),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 REPLICA IDENTITY USING INDEX testpub_tbl8_1_pkey,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,"CREATE PUBLICATION testpub_col_list FOR TABLE testpub_tbl8 (a, b) WITH (publish_via_partition_root = 'true')",publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_col_list ADD TABLE testpub_tbl8 (a, b)",publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_tbl8 SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_col_list ADD TABLE testpub_tbl8 (a, c)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 REPLICA IDENTITY FULL,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_col_list ADD TABLE testpub_tbl8 (a, c)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 REPLICA IDENTITY USING INDEX testpub_tbl8_1_pkey,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_col_list ADD TABLE testpub_tbl8 (a, b)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 REPLICA IDENTITY FULL,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 DROP CONSTRAINT testpub_tbl8_1_pkey,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 ADD PRIMARY KEY (c),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 REPLICA IDENTITY USING INDEX testpub_tbl8_1_pkey,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_col_list ADD TABLE testpub_tbl8 (a, b)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_0 ADD PRIMARY KEY (a),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_0 REPLICA IDENTITY USING INDEX testpub_tbl8_0_pkey,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 ADD PRIMARY KEY (c),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_1 REPLICA IDENTITY USING INDEX testpub_tbl8_1_pkey,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE testpub_tbl8 ATTACH PARTITION testpub_tbl8_0 FOR VALUES WITH (modulus 2, remainder 0)",publication.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE testpub_tbl8 ATTACH PARTITION testpub_tbl8_1 FOR VALUES WITH (modulus 2, remainder 1)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl8_0 REPLICA IDENTITY FULL,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub_both_filters,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testpub_tbl_both_filters REPLICA IDENTITY USING INDEX testpub_tbl_both_filters_pkey,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub_both_filters ADD TABLE testpub_tbl_both_filters (a,c) WHERE (c != 1)",publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub_both_filters,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_part_pk ATTACH PARTITION rf_tbl_abcd_part_pk_1 FOR VALUES FROM (1) TO (10),publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,"CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk (a, b)",publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk (a, b, c)",publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk (a),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk (b),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk (a),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_pk REPLICA IDENTITY FULL,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_nopk REPLICA IDENTITY FULL,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk (c),publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk (a, b, c, d)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_pk REPLICA IDENTITY NOTHING,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_nopk REPLICA IDENTITY NOTHING,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk (a),publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk (a, b, c, d)",publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk (d),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_pk ALTER COLUMN c SET NOT NULL,publication.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX idx_abcd_pk_c ON rf_tbl_abcd_pk(c),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_pk REPLICA IDENTITY USING INDEX idx_abcd_pk_c,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_nopk ALTER COLUMN c SET NOT NULL,publication.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX idx_abcd_nopk_c ON rf_tbl_abcd_nopk(c),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rf_tbl_abcd_nopk REPLICA IDENTITY USING INDEX idx_abcd_nopk_c,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk (a),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_pk (c),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk (a),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_nopk (c),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_nopk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=0),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk_1 (a),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_part_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=1),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk (a),publication.sql,SAME,,[]
postgresql,postgresql,UPDATE rf_tbl_abcd_part_pk SET a = 1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=0),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk_1 (b),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=0),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET (PUBLISH_VIA_PARTITION_ROOT=1),publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub6 SET TABLE rf_tbl_abcd_part_pk (b),publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub6,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_tbl4 set a = 2,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_tbl4 set a = 3,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE testpub_tbl4 set a = 3,publication.sql,SAME,,[]
postgresql,postgresql,CREATE TEMPORARY TABLE testpub_temptbl(a int),publication.sql,SAME,,[]
postgresql,postgresql,CREATE UNLOGGED TABLE testpub_unloggedtbl(a int),publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,"CREATE PUBLICATION testpub_fortbl FOR TABLE testpub_tbl1, pub_test.testpub_nopk",publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_default ADD TABLE testpub_tbl1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_default SET TABLE testpub_tbl1,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_default ADD TABLE pub_test.testpub_nopk,publication.sql,SAME,,[]
postgresql,postgresql,"ALTER PUBLICATION testpib_ins_trunct ADD TABLE pub_test.testpub_nopk, testpub_tbl1",publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_default ADD TABLE pub_test.testpub_addpk,publication.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX testpub_addpk_id_idx ON pub_test.testpub_addpk(id),publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE pub_test.testpub_addpk ADD PRIMARY KEY USING INDEX testpub_addpk_id_idx,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_test.testpub_addpk SET id = 2,publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub2,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub3,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub2 ADD TABLE testpub_tbl1,publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub2,publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub3,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,ALTER PUBLICATION testpub_default RENAME TO testpub_dummy,publication.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA pub_test1,publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA pub_test2,publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA pub_test3,publication.sql,SAME,,[]
postgresql,postgresql,"CREATE SCHEMA ""CURRENT_SCHEMA""",publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,SET SEARCH_PATH='',publication.sql,SAME,,[]
postgresql,postgresql,RESET SEARCH_PATH,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA pub_test3,publication.sql,SAME,,[]
postgresql,postgresql,ALTER SCHEMA pub_test1 RENAME to pub_test1_renamed,publication.sql,SAME,,[]
postgresql,postgresql,ALTER SCHEMA pub_test1_renamed RENAME to pub_test1,publication.sql,SAME,,[]
postgresql,postgresql,"DROP SCHEMA ""CURRENT_SCHEMA"" CASCADE",publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_test1.tbl SET id = 2,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_test1.tbl SET id = 2,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_test1.tbl SET id = 2,publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA pub_testpart1,publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA pub_testpart2,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_testpart2.child_parent1 set a = 1,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_testpart1.parent1 set a = 1,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_testpart2.child_parent1 set a = 1,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_testpart1.child_parent2 set a = 1,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_testpart2.child_parent1 set a = 1,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_testpart2.parent2 set a = 1,publication.sql,SAME,,[]
postgresql,postgresql,UPDATE pub_testpart1.child_parent2 set a = 1,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION testpub3_forschema,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,DROP VIEW testpub_view,publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpib_ins_trunct,publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub_fortbl,publication.sql,SAME,,[]
postgresql,postgresql,DROP PUBLICATION testpub3_forschema,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA pub_test CASCADE,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA pub_test1 CASCADE,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA pub_test2 CASCADE,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA pub_testpart1 CASCADE,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA pub_testpart2 CASCADE,publication.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages = 'ERROR',publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA sch1,publication.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA sch2,publication.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_publication_tables,publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION pub FOR TABLE sch2.tbl1_part1 WITH (PUBLISH_VIA_PARTITION_ROOT=1),publication.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_publication_tables,publication.sql,SAME,,"[('pub', 'sch2', 'tbl1_part1', ['a'], None)]"
postgresql,postgresql,ALTER PUBLICATION pub ADD TABLE sch1.tbl1,publication.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_publication_tables,publication.sql,SAME,,"[('pub', 'sch1', 'tbl1', ['a'], None)]"
postgresql,postgresql,DROP PUBLICATION pub,publication.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_publication_tables,publication.sql,SAME,,[]
postgresql,postgresql,CREATE PUBLICATION pub FOR TABLE sch2.tbl1_part1 WITH (PUBLISH_VIA_PARTITION_ROOT=0),publication.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_publication_tables,publication.sql,SAME,,"[('pub', 'sch2', 'tbl1_part1', ['a'], None)]"
postgresql,postgresql,ALTER PUBLICATION pub ADD TABLE sch1.tbl1,publication.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_publication_tables,publication.sql,SAME,,"[('pub', 'sch2', 'tbl1_part1', ['a'], None)]"
postgresql,postgresql,DROP PUBLICATION pub,publication.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE sch1.tbl1 ATTACH PARTITION sch1.tbl1_part3 FOR VALUES FROM (20) to (30),publication.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_publication_tables,publication.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA sch1 cascade,publication.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA sch2 cascade,publication.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,publication.sql,SAME,,[]
postgresql,postgresql,"select a,ord from unnest(array['a','b']) with ordinality as z(a,ord)",rangefuncs.sql,SAME,,"[('a', 1), ('b', 2)]"
postgresql,postgresql,"select * from unnest(array['a','b']) with ordinality as z(a,ord)",rangefuncs.sql,SAME,,"[('a', 1), ('b', 2)]"
postgresql,postgresql,"select a,ord from unnest(array[1.0::float8]) with ordinality as z(a,ord)",rangefuncs.sql,SAME,,"[(1.0, 1)]"
postgresql,postgresql,"select * from unnest(array[1.0::float8]) with ordinality as z(a,ord)",rangefuncs.sql,SAME,,"[(1.0, 1)]"
postgresql,postgresql,"select row_to_json(s.*) from generate_series(11,14) with ordinality s",rangefuncs.sql,SAME,,"[({'s': 11, 'ordinality': 1},), ({'s': 12, 'ordinality': 2},), ({'s': 13, 'ordinality': 3},), ({'s': 14, 'ordinality': 4},)]"
postgresql,postgresql,select definition from pg_views where viewname='vw_ord',rangefuncs.sql,SAME,,[]
postgresql,postgresql,select definition from pg_views where viewname='vw_ord',rangefuncs.sql,SAME,,[]
postgresql,postgresql,"select * from unnest(array[10,20],array['foo','bar'],array[1.0])",rangefuncs.sql,SAME,,"[(10, 'foo', Decimal('1.0')), (20, 'bar', None)]"
postgresql,postgresql,"select * from unnest(array[10,20],array['foo','bar'],array[1.0]) with ordinality as z(a,b,c,ord)",rangefuncs.sql,SAME,,"[(10, 'foo', Decimal('1.0'), 1), (20, 'bar', None, 2)]"
postgresql,postgresql,"select * from rows from(unnest(array[10,20],array['foo','bar'],array[1.0])) with ordinality as z(a,b,c,ord)",rangefuncs.sql,SAME,,"[(10, 'foo', Decimal('1.0'), 1), (20, 'bar', None, 2)]"
postgresql,postgresql,"select * from rows from(unnest(array[10,20],array['foo','bar']), generate_series(101,102)) with ordinality as z(a,b,c,ord)",rangefuncs.sql,SAME,,"[(10, 'foo', 101, 1), (20, 'bar', 102, 2)]"
postgresql,postgresql,"create temporary view vw_ord as select * from unnest(array[10,20],array['foo','bar'],array[1.0]) as z(a,b,c)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,select * from vw_ord,rangefuncs.sql,SAME,,"[(10, 'foo', Decimal('1.0')), (20, 'bar', None)]"
postgresql,postgresql,select definition from pg_views where viewname='vw_ord',rangefuncs.sql,SAME,,"[("" SELECT a,\n    b,\n    c\n   FROM UNNEST(ARRAY[10, 20], ARRAY['foo'::text, 'bar'::text], ARRAY[1.0]) z(a, b, c);"",)]"
postgresql,postgresql,drop view vw_ord,rangefuncs.sql,SAME,,[]
postgresql,postgresql,"create temporary view vw_ord as select * from rows from(unnest(array[10,20],array['foo','bar'],array[1.0])) as z(a,b,c)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,select * from vw_ord,rangefuncs.sql,SAME,,"[(10, 'foo', Decimal('1.0')), (20, 'bar', None)]"
postgresql,postgresql,select definition from pg_views where viewname='vw_ord',rangefuncs.sql,SAME,,"[("" SELECT a,\n    b,\n    c\n   FROM UNNEST(ARRAY[10, 20], ARRAY['foo'::text, 'bar'::text], ARRAY[1.0]) z(a, b, c);"",)]"
postgresql,postgresql,drop view vw_ord,rangefuncs.sql,SAME,,[]
postgresql,postgresql,"create temporary view vw_ord as select * from rows from(unnest(array[10,20],array['foo','bar']), generate_series(1,2)) as z(a,b,c)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,select * from vw_ord,rangefuncs.sql,SAME,,"[(10, 'foo', 1), (20, 'bar', 2)]"
postgresql,postgresql,select definition from pg_views where viewname='vw_ord',rangefuncs.sql,SAME,,"[("" SELECT a,\n    b,\n    c\n   FROM ROWS FROM(unnest(ARRAY[10, 20]), unnest(ARRAY['foo'::text, 'bar'::text]), generate_series(1, 2)) z(a, b, c);"",)]"
postgresql,postgresql,drop view vw_ord,rangefuncs.sql,SAME,,[]
postgresql,postgresql,begin,rangefuncs.sql,SAME,,[]
postgresql,postgresql,"declare rf_cur scroll cursor for select * from rows from(generate_series(1,5),generate_series(1,2)) with ordinality as g(i,j,o)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,fetch all from rf_cur,rangefuncs.sql,SAME,,"[(1, 1, 1), (2, 2, 2), (3, None, 3), (4, None, 4), (5, None, 5)]"
postgresql,postgresql,fetch backward all from rf_cur,rangefuncs.sql,SAME,,"[(5, None, 5), (4, None, 4), (3, None, 3), (2, 2, 2), (1, 1, 1)]"
postgresql,postgresql,fetch all from rf_cur,rangefuncs.sql,SAME,,"[(1, 1, 1), (2, 2, 2), (3, None, 3), (4, None, 4), (5, None, 5)]"
postgresql,postgresql,fetch next from rf_cur,rangefuncs.sql,SAME,,[]
postgresql,postgresql,fetch next from rf_cur,rangefuncs.sql,SAME,,[]
postgresql,postgresql,fetch prior from rf_cur,rangefuncs.sql,SAME,,"[(5, None, 5)]"
postgresql,postgresql,fetch absolute 1 from rf_cur,rangefuncs.sql,SAME,,"[(1, 1, 1)]"
postgresql,postgresql,fetch next from rf_cur,rangefuncs.sql,SAME,,"[(2, 2, 2)]"
postgresql,postgresql,fetch next from rf_cur,rangefuncs.sql,SAME,,"[(3, None, 3)]"
postgresql,postgresql,fetch next from rf_cur,rangefuncs.sql,SAME,,"[(4, None, 4)]"
postgresql,postgresql,fetch prior from rf_cur,rangefuncs.sql,SAME,,"[(3, None, 3)]"
postgresql,postgresql,fetch prior from rf_cur,rangefuncs.sql,SAME,,"[(2, 2, 2)]"
postgresql,postgresql,fetch prior from rf_cur,rangefuncs.sql,SAME,,"[(1, 1, 1)]"
postgresql,postgresql,commit,rangefuncs.sql,SAME,,[]
postgresql,postgresql,END,rangefuncs.sql,SAME,,[]
postgresql,postgresql,END,rangefuncs.sql,SAME,,[]
postgresql,postgresql,CREATE TEMPORARY SEQUENCE rngfunc_rescan_seq1,rangefuncs.sql,SAME,,[]
postgresql,postgresql,CREATE TEMPORARY SEQUENCE rngfunc_rescan_seq2,rangefuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE rngfunc_rescan_t AS (i integer, s bigint)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,end,rangefuncs.sql,SAME,,[]
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN generate_series(11,13) f(i) ON (r+i)<100",rangefuncs.sql,SAME,,"[(1, 11), (1, 12), (1, 13), (2, 11), (2, 12), (2, 13), (3, 11), (3, 12), (3, 13)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN generate_series(11,13) WITH ORDINALITY AS f(i,o) ON (r+i)<100",rangefuncs.sql,SAME,,"[(1, 11, 1), (1, 12, 2), (1, 13, 3), (2, 11, 1), (2, 12, 2), (2, 13, 3), (3, 11, 1), (3, 12, 2), (3, 13, 3)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN unnest(array[10,20,30]) f(i) ON (r+i)<100",rangefuncs.sql,SAME,,"[(1, 10), (1, 20), (1, 30), (2, 10), (2, 20), (2, 30), (3, 10), (3, 20), (3, 30)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN unnest(array[10,20,30]) WITH ORDINALITY AS f(i,o) ON (r+i)<100",rangefuncs.sql,SAME,,"[(1, 10, 1), (1, 20, 2), (1, 30, 3), (2, 10, 1), (2, 20, 2), (2, 30, 3), (3, 10, 1), (3, 20, 2), (3, 30, 3)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false)",rangefuncs.sql,SAME,,"[(1, 1)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v(r), generate_series(10+r,20-r) f(i)",rangefuncs.sql,SAME,,"[(1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (3, 13), (3, 14), (3, 15), (3, 16), (3, 17)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v(r), generate_series(10+r,20-r) WITH ORDINALITY AS f(i,o)",rangefuncs.sql,SAME,,"[(1, 11, 1), (1, 12, 2), (1, 13, 3), (1, 14, 4), (1, 15, 5), (1, 16, 6), (1, 17, 7), (1, 18, 8), (1, 19, 9), (2, 12, 1), (2, 13, 2), (2, 14, 3), (2, 15, 4), (2, 16, 5), (2, 17, 6), (2, 18, 7), (3, 13, 1), (3, 14, 2), (3, 15, 3), (3, 16, 4), (3, 17, 5)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v(r), unnest(array[r*10,r*20,r*30]) f(i)",rangefuncs.sql,SAME,,"[(1, 10), (1, 20), (1, 30), (2, 20), (2, 40), (2, 60), (3, 30), (3, 60), (3, 90)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v(r), unnest(array[r*10,r*20,r*30]) WITH ORDINALITY AS f(i,o)",rangefuncs.sql,SAME,,"[(1, 10, 1), (1, 20, 2), (1, 30, 3), (2, 20, 1), (2, 40, 2), (2, 60, 3), (3, 30, 1), (3, 60, 2), (3, 90, 3)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v1(r1),               LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)                                          LEFT JOIN generate_series(21,23) f(i) ON ((r2+i)<100) OFFSET 0) s1",rangefuncs.sql,SAME,,"[(1, 1, 10, 21), (1, 1, 10, 22), (1, 1, 10, 23), (1, 1, 20, 21), (1, 1, 20, 22), (1, 1, 20, 23), (1, 1, 30, 21), (1, 1, 30, 22), (1, 1, 30, 23), (2, 2, 10, 21), (2, 2, 10, 22), (2, 2, 10, 23), (2, 2, 20, 21), (2, 2, 20, 22), (2, 2, 20, 23), (2, 2, 30, 21), (2, 2, 30, 22), (2, 2, 30, 23), (3, 3, 10, 21), (3, 3, 10, 22), (3, 3, 10, 23), (3, 3, 20, 21), (3, 3, 20, 22), (3, 3, 20, 23), (3, 3, 30, 21), (3, 3, 30, 22), (3, 3, 30, 23)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v1(r1),               LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)                                          LEFT JOIN generate_series(20+r1,23) f(i) ON ((r2+i)<100) OFFSET 0) s1",rangefuncs.sql,SAME,,"[(1, 1, 10, 21), (1, 1, 10, 22), (1, 1, 10, 23), (1, 1, 20, 21), (1, 1, 20, 22), (1, 1, 20, 23), (1, 1, 30, 21), (1, 1, 30, 22), (1, 1, 30, 23), (2, 2, 10, 22), (2, 2, 10, 23), (2, 2, 20, 22), (2, 2, 20, 23), (2, 2, 30, 22), (2, 2, 30, 23), (3, 3, 10, 23), (3, 3, 20, 23), (3, 3, 30, 23)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v1(r1),               LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)                                          LEFT JOIN generate_series(r2,r2+3) f(i) ON ((r2+i)<100) OFFSET 0) s1",rangefuncs.sql,SAME,,"[(1, 1, 10, 10), (1, 1, 10, 11), (1, 1, 10, 12), (1, 1, 10, 13), (1, 1, 20, 20), (1, 1, 20, 21), (1, 1, 20, 22), (1, 1, 20, 23), (1, 1, 30, 30), (1, 1, 30, 31), (1, 1, 30, 32), (1, 1, 30, 33), (2, 2, 10, 10), (2, 2, 10, 11), (2, 2, 10, 12), (2, 2, 10, 13), (2, 2, 20, 20), (2, 2, 20, 21), (2, 2, 20, 22), (2, 2, 20, 23), (2, 2, 30, 30), (2, 2, 30, 31), (2, 2, 30, 32), (2, 2, 30, 33), (3, 3, 10, 10), (3, 3, 10, 11), (3, 3, 10, 12), (3, 3, 10, 13), (3, 3, 20, 20), (3, 3, 20, 21), (3, 3, 20, 22), (3, 3, 20, 23), (3, 3, 30, 30), (3, 3, 30, 31), (3, 3, 30, 32), (3, 3, 30, 33)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2),(3)) v1(r1),               LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)                                          LEFT JOIN generate_series(r1,2+r2/5) f(i) ON ((r2+i)<100) OFFSET 0) s1",rangefuncs.sql,SAME,,"[(1, 1, 10, 1), (1, 1, 10, 2), (1, 1, 10, 3), (1, 1, 10, 4), (1, 1, 20, 1), (1, 1, 20, 2), (1, 1, 20, 3), (1, 1, 20, 4), (1, 1, 20, 5), (1, 1, 20, 6), (1, 1, 30, 1), (1, 1, 30, 2), (1, 1, 30, 3), (1, 1, 30, 4), (1, 1, 30, 5), (1, 1, 30, 6), (1, 1, 30, 7), (1, 1, 30, 8), (2, 2, 10, 2), (2, 2, 10, 3), (2, 2, 10, 4), (2, 2, 20, 2), (2, 2, 20, 3), (2, 2, 20, 4), (2, 2, 20, 5), (2, 2, 20, 6), (2, 2, 30, 2), (2, 2, 30, 3), (2, 2, 30, 4), (2, 2, 30, 5), (2, 2, 30, 6), (2, 2, 30, 7), (2, 2, 30, 8), (3, 3, 10, 3), (3, 3, 10, 4), (3, 3, 20, 3), (3, 3, 20, 4), (3, 3, 20, 5), (3, 3, 20, 6), (3, 3, 30, 3), (3, 3, 30, 4), (3, 3, 30, 5), (3, 3, 30, 6), (3, 3, 30, 7), (3, 3, 30, 8)]"
postgresql,postgresql,"SELECT * FROM (VALUES (1),(2)) v1(r1)     LEFT JOIN LATERAL (         SELECT *         FROM generate_series(1, v1.r1) AS gs1         LEFT JOIN LATERAL (             SELECT *             FROM generate_series(1, gs1) AS gs2             LEFT JOIN generate_series(1, gs2) AS gs3 ON TRUE         ) AS ss1 ON TRUE         FULL JOIN generate_series(1, v1.r1) AS gs4 ON FALSE     ) AS ss0 ON TRUE",rangefuncs.sql,SAME,,"[(1, None, None, None, 1), (1, 1, 1, 1, None), (2, None, None, None, 1), (2, None, None, None, 2), (2, 1, 1, 1, None), (2, 2, 1, 1, None), (2, 2, 2, 1, None), (2, 2, 2, 2, None)]"
postgresql,postgresql,DROP SEQUENCE rngfunc_rescan_seq1,rangefuncs.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE rngfunc_rescan_seq2,rangefuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION rngfunc(in f1 int, out f2 int) AS 'select $1+1' LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,SELECT rngfunc(42),rangefuncs.sql,SAME,,"[(43,)]"
postgresql,postgresql,SELECT * FROM rngfunc(42),rangefuncs.sql,SAME,,"[(43,)]"
postgresql,postgresql,SELECT * FROM rngfunc(42) AS p(x),rangefuncs.sql,SAME,,"[(43,)]"
postgresql,postgresql,"CREATE OR REPLACE FUNCTION rngfunc(in f1 int, out f2 int) RETURNS int AS 'select $1+1' LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE OR REPLACE FUNCTION rngfuncr(in f1 int, out f2 int, out text) AS $$select $1-1, $1::text || 'z'$$ LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rngfuncr(42),rangefuncs.sql,SAME,,"[(41, '42z')]"
postgresql,postgresql,"SELECT * FROM rngfuncr(42) AS p(a,b)",rangefuncs.sql,SAME,,"[(41, '42z')]"
postgresql,postgresql,"CREATE OR REPLACE FUNCTION rngfuncb(in f1 int, inout f2 int, out text) AS $$select $2-1, $1::text || 'z'$$ LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM rngfuncb(42, 99)",rangefuncs.sql,SAME,,"[(98, '42z')]"
postgresql,postgresql,"SELECT * FROM rngfuncb(42, 99) AS p(a,b)",rangefuncs.sql,SAME,,"[(98, '42z')]"
postgresql,postgresql,DROP FUNCTION rngfunc(int),rangefuncs.sql,SAME,,[]
postgresql,postgresql,"DROP FUNCTION rngfuncr(in f2 int, out f1 int, out text)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"DROP FUNCTION rngfuncb(in f1 int, inout f2 int)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION dup (f1 anyelement, f2 out anyelement, f3 out anyarray) AS 'select $1, array[$1,$1]' LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,SELECT dup(22),rangefuncs.sql,SAME,,"[('(22,""{22,22}"")',)]"
postgresql,postgresql,SELECT dup('xyz'::text),rangefuncs.sql,SAME,,"[('(xyz,""{xyz,xyz}"")',)]"
postgresql,postgresql,SELECT * FROM dup('xyz'::text),rangefuncs.sql,SAME,,"[('xyz', ['xyz', 'xyz'])]"
postgresql,postgresql,DROP FUNCTION dup(anyelement),rangefuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE OR REPLACE FUNCTION dup (inout f2 anyelement, out f3 anyarray) AS 'select $1, array[$1,$1]' LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,SELECT dup(22),rangefuncs.sql,SAME,,"[('(22,""{22,22}"")',)]"
postgresql,postgresql,DROP FUNCTION dup(anyelement),rangefuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION dup (f1 anycompatible, f2 anycompatiblearray, f3 out anycompatible, f4 out anycompatiblearray) AS 'select $1, $2' LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"SELECT dup(22, array[44])",rangefuncs.sql,SAME,,"[('(22,{44})',)]"
postgresql,postgresql,"SELECT dup(4.5, array[44])",rangefuncs.sql,SAME,,"[('(4.5,{44})',)]"
postgresql,postgresql,"SELECT dup(22, array[44::bigint])",rangefuncs.sql,SAME,,"[('(22,{44})',)]"
postgresql,postgresql,"SELECT *, pg_typeof(f3), pg_typeof(f4) FROM dup(22, array[44::bigint])",rangefuncs.sql,SAME,,"[(22, [44], 'bigint', 'bigint[]')]"
postgresql,postgresql,"DROP FUNCTION dup(f1 anycompatible, f2 anycompatiblearray)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION dup (f1 anycompatiblerange, f2 out anycompatible, f3 out anycompatiblearray, f4 out anycompatiblerange) AS 'select lower($1), array[lower($1), upper($1)], $1' LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"SELECT dup(int4range(4,7))",rangefuncs.sql,SAME,,"[('(4,""{4,7}"",""[4,7)"")',)]"
postgresql,postgresql,"SELECT dup(numrange(4,7))",rangefuncs.sql,SAME,,"[('(4,""{4,7}"",""[4,7)"")',)]"
postgresql,postgresql,DROP FUNCTION dup(f1 anycompatiblerange),rangefuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE OR REPLACE FUNCTION rngfunc() RETURNS TABLE(a int) AS $$ SELECT a FROM generate_series(1,5) a(a) $$ LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rngfunc(),rangefuncs.sql,SAME,,"[(1,), (2,), (3,), (4,), (5,)]"
postgresql,postgresql,DROP FUNCTION rngfunc(),rangefuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE OR REPLACE FUNCTION rngfunc(int) RETURNS TABLE(a int, b int) AS $$ SELECT a, b          FROM generate_series(1,$1) a(a),               generate_series(1,$1) b(b) $$ LANGUAGE sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rngfunc(3),rangefuncs.sql,SAME,,"[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]"
postgresql,postgresql,DROP FUNCTION rngfunc(int),rangefuncs.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE FUNCTION rngfunc() RETURNS TABLE(a varchar(5)) AS $$ SELECT 'hello'::varchar(5) $$ LANGUAGE sql STABLE,rangefuncs.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rngfunc() GROUP BY 1,rangefuncs.sql,SAME,,"[('hello',)]"
postgresql,postgresql,DROP FUNCTION rngfunc(),rangefuncs.sql,SAME,,[]
postgresql,postgresql,"create temp table tt(f1 serial, data text)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,select insert_tt('foo'),rangefuncs.sql,SAME,,"[(1,)]"
postgresql,postgresql,select insert_tt('bar'),rangefuncs.sql,SAME,,"[(2,)]"
postgresql,postgresql,select * from tt,rangefuncs.sql,SAME,,"[(1, 'foo'), (2, 'bar')]"
postgresql,postgresql,select insert_tt('fool'),rangefuncs.sql,SAME,,"[(3,)]"
postgresql,postgresql,select * from tt,rangefuncs.sql,SAME,,"[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool')]"
postgresql,postgresql,"select insert_tt2('foolish','barrish')",rangefuncs.sql,SAME,,"[(5,), (6,)]"
postgresql,postgresql,"select * from insert_tt2('baz','quux')",rangefuncs.sql,SAME,,"[(7,), (8,)]"
postgresql,postgresql,select * from tt,rangefuncs.sql,SAME,,"[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux')]"
postgresql,postgresql,"select insert_tt2('foolish','barrish') limit 1",rangefuncs.sql,SAME,,"[(9,)]"
postgresql,postgresql,select * from tt,rangefuncs.sql,SAME,,"[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux'), (9, 'foolish'), (10, 'barrish')]"
postgresql,postgresql,"select insert_tt2('foolme','barme') limit 1",rangefuncs.sql,SAME,,"[(11,)]"
postgresql,postgresql,select * from tt,rangefuncs.sql,SAME,,"[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux'), (9, 'foolish'), (10, 'barrish'), (11, 'foolme'), (12, 'barme')]"
postgresql,postgresql,"create temp table tt_log(f1 int, data text)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"select insert_tt2('foollog','barlog') limit 1",rangefuncs.sql,SAME,,"[(13,)]"
postgresql,postgresql,select * from tt,rangefuncs.sql,SAME,,"[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux'), (9, 'foolish'), (10, 'barrish'), (11, 'foolme'), (12, 'barme'), (13, 'foollog'), (14, 'barlog')]"
postgresql,postgresql,select * from tt_log,rangefuncs.sql,SAME,,"[(15, 'foollog'), (16, 'barlog')]"
postgresql,postgresql,"create function rngfunc1(n integer, out a text, out b text)   returns setof record   language sql   as $$ select 'foo ' || i, 'bar ' || i from generate_series(1,$1) i $$",rangefuncs.sql,SAME,,[]
postgresql,postgresql,set work_mem='64kB',rangefuncs.sql,SAME,,[]
postgresql,postgresql,"select t.a, t, t.a from rngfunc1(10000) t limit 1",rangefuncs.sql,SAME,,"[('foo 1', '(""foo 1"",""bar 1"")', 'foo 1')]"
postgresql,postgresql,reset work_mem,rangefuncs.sql,SAME,,[]
postgresql,postgresql,"select t.a, t, t.a from rngfunc1(10000) t limit 1",rangefuncs.sql,SAME,,"[('foo 1', '(""foo 1"",""bar 1"")', 'foo 1')]"
postgresql,postgresql,drop function rngfunc1(n integer),rangefuncs.sql,SAME,,[]
postgresql,postgresql,"create function array_to_set(anyarray) returns setof record as $$   select i AS ""index"", $1[i] AS ""value"" from generate_subscripts($1, 1) i $$ language sql strict immutable",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"select array_to_set(array['one', 'two'])",rangefuncs.sql,SAME,,"[('(1,one)',), ('(2,two)',)]"
postgresql,postgresql,"select * from array_to_set(array['one', 'two']) as t(f1 int,f2 text)",rangefuncs.sql,SAME,,"[(1, 'one'), (2, 'two')]"
postgresql,postgresql,"select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text)",rangefuncs.sql,SAME,,"[(Decimal('1.00'), 'one'), (Decimal('2.00'), 'two')]"
postgresql,postgresql,"explain (verbose, costs off)   select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text)",rangefuncs.sql,SAME,,"[('Function Scan on public.array_to_set t',), ('  Output: f1, f2',), (""  Function Call: array_to_set('{one,two}'::text[])"",)]"
postgresql,postgresql,"create or replace function array_to_set(anyarray) returns setof record as $$   select i AS ""index"", $1[i] AS ""value"" from generate_subscripts($1, 1) i $$ language sql immutable",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"select array_to_set(array['one', 'two'])",rangefuncs.sql,SAME,,"[('(1,one)',), ('(2,two)',)]"
postgresql,postgresql,"select * from array_to_set(array['one', 'two']) as t(f1 int,f2 text)",rangefuncs.sql,SAME,,"[(1, 'one'), (2, 'two')]"
postgresql,postgresql,"select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text)",rangefuncs.sql,SAME,,"[(Decimal('1.00'), 'one'), (Decimal('2.00'), 'two')]"
postgresql,postgresql,"explain (verbose, costs off)   select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text)",rangefuncs.sql,SAME,,"[('Function Scan on pg_catalog.generate_subscripts i',), (""  Output: i.i, ('{one,two}'::text[])[i.i]"",), (""  Function Call: generate_subscripts('{one,two}'::text[], 1)"",)]"
postgresql,postgresql,"create temp table rngfunc(f1 int8, f2 int8)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"create type rngfunc_type as (f1 numeric(35,6), f2 numeric(35,2))",rangefuncs.sql,SAME,,[]
postgresql,postgresql,drop type rngfunc_type cascade,rangefuncs.sql,SAME,,[]
postgresql,postgresql,"create temp table users (userid text, seq int, email text, todrop bool, moredrop int, enabled bool)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,alter table users drop column todrop,rangefuncs.sql,SAME,,[]
postgresql,postgresql,alter table users add column junk text,rangefuncs.sql,SAME,,[]
postgresql,postgresql,alter table users drop column moredrop,rangefuncs.sql,SAME,,[]
postgresql,postgresql,begin,rangefuncs.sql,SAME,,[]
postgresql,postgresql,rollback,rangefuncs.sql,SAME,,[]
postgresql,postgresql,alter table users alter column seq type numeric,rangefuncs.sql,SAME,,[]
postgresql,postgresql,begin,rangefuncs.sql,SAME,,[]
postgresql,postgresql,rollback,rangefuncs.sql,SAME,,[]
postgresql,postgresql,create or replace function rngfuncbar() returns setof text as $$ select 'foo'::varchar union all select 'bar'::varchar ; $$ language sql stable,rangefuncs.sql,SAME,,[]
postgresql,postgresql,select rngfuncbar(),rangefuncs.sql,SAME,,"[('foo',), ('bar',)]"
postgresql,postgresql,select * from rngfuncbar(),rangefuncs.sql,SAME,,"[('foo',), ('bar',)]"
postgresql,postgresql,"explain (verbose, costs off) select * from rngfuncbar()",rangefuncs.sql,SAME,,"[('Result',), (""  Output: ('foo'::character varying)"",), ('  ->  Append',), ('        ->  Result',), (""              Output: 'foo'::character varying"",), ('        ->  Result',), (""              Output: 'bar'::character varying"",)]"
postgresql,postgresql,drop function rngfuncbar(),rangefuncs.sql,SAME,,[]
postgresql,postgresql,"create or replace function rngfuncbar(out integer, out numeric) as $$ select (1, 2.1) $$ language sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,select * from rngfuncbar(),rangefuncs.sql,SAME,,"[(1, Decimal('2.1'))]"
postgresql,postgresql,"create or replace function rngfuncbar(out integer, out numeric) as $$ select (1, 2) $$ language sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"create or replace function rngfuncbar(out integer, out numeric) as $$ select (1, 2.1, 3) $$ language sql",rangefuncs.sql,SAME,,[]
postgresql,postgresql,drop function rngfuncbar(),rangefuncs.sql,SAME,,[]
postgresql,postgresql,"create type rngfunc2 as (a integer, b text)",rangefuncs.sql,SAME,,[]
postgresql,postgresql,"select *, row_to_json(u) from unnest(array[(1,'foo')::rngfunc2, null::rngfunc2]) u",rangefuncs.sql,SAME,,"[(1, 'foo', {'a': 1, 'b': 'foo'}), (None, None, {'a': None, 'b': None})]"
postgresql,postgresql,"select *, row_to_json(u) from unnest(array[null::rngfunc2, null::rngfunc2]) u",rangefuncs.sql,SAME,,"[(None, None, {'a': None, 'b': None}), (None, None, {'a': None, 'b': None})]"
postgresql,postgresql,"select *, row_to_json(u) from unnest(array[null::rngfunc2, (1,'foo')::rngfunc2, null::rngfunc2]) u",rangefuncs.sql,SAME,,"[(None, None, {'a': None, 'b': None}), (1, 'foo', {'a': 1, 'b': 'foo'}), (None, None, {'a': None, 'b': None})]"
postgresql,postgresql,"select *, row_to_json(u) from unnest(array[]::rngfunc2[]) u",rangefuncs.sql,SAME,,[]
postgresql,postgresql,drop type rngfunc2,rangefuncs.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select * from   (select jsonb_path_query_array(module->'lectures', '$[*]') as lecture    from unnest(array['{""lectures"": [{""id"": ""1""}]}'::jsonb])         as unnested_modules(module)) as ss,   jsonb_to_recordset(ss.lecture) as j (id text)",rangefuncs.sql,SAME,,"[('Nested Loop',), (""  Output: jsonb_path_query_array((unnested_modules.module -> 'lectures'::text), '$[*]'::jsonpath, '{}'::jsonb, false), j.id"",), ('  ->  Function Scan on pg_catalog.unnest unnested_modules',), ('        Output: unnested_modules.module',), ('        Function Call: unnest(\'{""{\\""lectures\\"": [{\\""id\\"": \\""1\\""}]}""}\'::jsonb[])',), ('  ->  Function Scan on pg_catalog.jsonb_to_recordset j',), ('        Output: j.id',), (""        Function Call: jsonb_to_recordset(jsonb_path_query_array((unnested_modules.module -> 'lectures'::text), '$[*]'::jsonpath, '{}'::jsonb, false))"",)]"
postgresql,postgresql,"select * from   (select jsonb_path_query_array(module->'lectures', '$[*]') as lecture    from unnest(array['{""lectures"": [{""id"": ""1""}]}'::jsonb])         as unnested_modules(module)) as ss,   jsonb_to_recordset(ss.lecture) as j (id text)",rangefuncs.sql,SAME,,"[([{'id': '1'}], '1')]"
postgresql,postgresql,"select pg_input_is_valid('(1,4)', 'int4range')",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_input_is_valid('(1,4', 'int4range')",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('(1,4', 'int4range')",rangetypes.sql,SAME,,"[('malformed range literal: ""(1,4""', 'Unexpected end of input.', None, '22P02')]"
postgresql,postgresql,"select pg_input_is_valid('(4,1)', 'int4range')",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('(4,1)', 'int4range')",rangetypes.sql,SAME,,"[('range lower bound must be less than or equal to range upper bound', None, None, '22000')]"
postgresql,postgresql,"select pg_input_is_valid('(4,zed)', 'int4range')",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('(4,zed)', 'int4range')",rangetypes.sql,SAME,,"[('invalid input syntax for type integer: ""zed""', None, None, '22P02')]"
postgresql,postgresql,"select pg_input_is_valid('[1,2147483647]', 'int4range')",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('[1,2147483647]', 'int4range')",rangetypes.sql,SAME,,"[('integer out of range', None, None, '22003')]"
postgresql,postgresql,"select pg_input_is_valid('[2000-01-01,5874897-12-31]', 'daterange')",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('[2000-01-01,5874897-12-31]', 'daterange')",rangetypes.sql,SAME,,"[('date out of range', None, None, '22008')]"
postgresql,postgresql,create index numrange_test_btree on numrange_test(nr),rangetypes.sql,SAME,,[]
postgresql,postgresql,"SELECT nr, isempty(nr), lower(nr), upper(nr) FROM numrange_test",rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'), False, None, None), (NumericRange(Decimal('3'), None, '[)'), False, Decimal('3'), None), (NumericRange(None, Decimal('5'), '()'), False, None, Decimal('5')), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'), False, Decimal('1.1'), Decimal('2.2')), (NumericRange(empty=True), True, None, None), (NumericRange(Decimal('1.7'), Decimal('1.7'), '[]'), False, Decimal('1.7'), Decimal('1.7'))]"
postgresql,postgresql,"SELECT nr, lower_inc(nr), lower_inf(nr), upper_inc(nr), upper_inf(nr) FROM numrange_test",rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'), False, True, False, True), (NumericRange(Decimal('3'), None, '[)'), True, False, False, True), (NumericRange(None, Decimal('5'), '()'), False, True, False, False), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'), True, False, False, False), (NumericRange(empty=True), False, False, False, False), (NumericRange(Decimal('1.7'), Decimal('1.7'), '[]'), True, False, True, False)]"
postgresql,postgresql,"SELECT * FROM numrange_test WHERE range_contains(nr, numrange(1.9,1.91))",rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),)]"
postgresql,postgresql,"SELECT * FROM numrange_test WHERE nr @> numrange(1.0,10000.1)",rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'),)]"
postgresql,postgresql,"SELECT * FROM numrange_test WHERE range_contained_by(numrange(-1e7,-10000.1), nr)",rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'),), (NumericRange(None, Decimal('5'), '()'),)]"
postgresql,postgresql,SELECT * FROM numrange_test WHERE 1.9 <@ nr,rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),)]"
postgresql,postgresql,select * from numrange_test where nr = 'empty',rangetypes.sql,SAME,,"[(NumericRange(empty=True),)]"
postgresql,postgresql,"select * from numrange_test where nr = '(1.1, 2.2)'",rangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from numrange_test where nr = '[1.1, 2.2)'",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),)]"
postgresql,postgresql,select * from numrange_test where nr < 'empty',rangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from numrange_test where nr < numrange(-1000.0, -1000.0,'[]')",rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(empty=True),)]"
postgresql,postgresql,"select * from numrange_test where nr < numrange(0.0, 1.0,'[]')",rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(empty=True),)]"
postgresql,postgresql,"select * from numrange_test where nr < numrange(1000.0, 1001.0,'[]')",rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'),), (NumericRange(Decimal('3'), None, '[)'),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),), (NumericRange(empty=True),), (NumericRange(Decimal('1.7'), Decimal('1.7'), '[]'),)]"
postgresql,postgresql,select * from numrange_test where nr <= 'empty',rangetypes.sql,SAME,,"[(NumericRange(empty=True),)]"
postgresql,postgresql,select * from numrange_test where nr >= 'empty',rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'),), (NumericRange(Decimal('3'), None, '[)'),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),), (NumericRange(empty=True),), (NumericRange(Decimal('1.7'), Decimal('1.7'), '[]'),)]"
postgresql,postgresql,select * from numrange_test where nr > 'empty',rangetypes.sql,SAME,,"[(NumericRange(None, None, '()'),), (NumericRange(Decimal('3'), None, '[)'),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),), (NumericRange(Decimal('1.7'), Decimal('1.7'), '[]'),)]"
postgresql,postgresql,"select * from numrange_test where nr > numrange(-1001.0, -1000.0,'[]')",rangetypes.sql,SAME,,"[(NumericRange(Decimal('3'), None, '[)'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),), (NumericRange(Decimal('1.7'), Decimal('1.7'), '[]'),)]"
postgresql,postgresql,"select * from numrange_test where nr > numrange(0.0, 1.0,'[]')",rangetypes.sql,SAME,,"[(NumericRange(Decimal('3'), None, '[)'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),), (NumericRange(Decimal('1.7'), Decimal('1.7'), '[]'),)]"
postgresql,postgresql,"select * from numrange_test where nr > numrange(1000.0, 1000.0,'[]')",rangetypes.sql,SAME,,[]
postgresql,postgresql,"select numrange(2.0, 3.0) -|- numrange(3.0, 4.0)",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select range_adjacent(numrange(2.0, 3.0), numrange(3.1, 4.0))",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select range_adjacent(numrange(2.0, 3.0), numrange(3.1, null))",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(2.0, 3.0, '[]') -|- numrange(3.0, 4.0, '()')",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select numrange(1.0, 2.0) -|- numrange(2.0, 3.0,'[]')",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select range_adjacent(numrange(2.0, 3.0, '(]'), numrange(1.0, 2.0, '(]'))",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select numrange(1.1, 3.3) <@ numrange(0.1,10.1)",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select numrange(0.1, 10.1) <@ numrange(1.1,3.3)",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(1.1, 2.2) - numrange(2.0, 3.0)",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.1'), Decimal('2.0'), '[)'),)]"
postgresql,postgresql,"select numrange(1.1, 2.2) - numrange(2.2, 3.0)",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),)]"
postgresql,postgresql,"select numrange(1.1, 2.2,'[]') - numrange(2.0, 3.0)",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.1'), Decimal('2.0'), '[)'),)]"
postgresql,postgresql,"select range_minus(numrange(10.1,12.2,'[]'), numrange(110.0,120.2,'(]'))",rangetypes.sql,SAME,,"[(NumericRange(Decimal('10.1'), Decimal('12.2'), '[]'),)]"
postgresql,postgresql,"select range_minus(numrange(10.1,12.2,'[]'), numrange(0.0,120.2,'(]'))",rangetypes.sql,SAME,,"[(NumericRange(empty=True),)]"
postgresql,postgresql,"select numrange(4.5, 5.5, '[]') && numrange(5.5, 6.5)",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select numrange(1.0, 2.0) << numrange(3.0, 4.0)",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select numrange(1.0, 3.0,'[]') << numrange(3.0, 4.0,'[]')",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(1.0, 3.0,'()') << numrange(3.0, 4.0,'()')",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select numrange(1.0, 2.0) >> numrange(3.0, 4.0)",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(3.0, 70.0) &< numrange(6.6, 100.0)",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select numrange(1.1, 2.2) < numrange(1.0, 200.2)",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(1.1, 2.2) < numrange(1.1, 1.2)",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select numrange(1.0, 2.0) + numrange(2.0, 3.0)",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.0'), Decimal('3.0'), '[)'),)]"
postgresql,postgresql,"select numrange(1.0, 2.0) + numrange(1.5, 3.0)",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.0'), Decimal('3.0'), '[)'),)]"
postgresql,postgresql,"select range_merge(numrange(1.0, 2.0), numrange(2.0, 3.0))",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.0'), Decimal('3.0'), '[)'),)]"
postgresql,postgresql,"select range_merge(numrange(1.0, 2.0), numrange(1.5, 3.0))",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.0'), Decimal('3.0'), '[)'),)]"
postgresql,postgresql,"select range_merge(numrange(1.0, 2.0), numrange(2.5, 3.0))",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.0'), Decimal('3.0'), '[)'),)]"
postgresql,postgresql,"select numrange(1.0, 2.0) * numrange(2.0, 3.0)",rangetypes.sql,SAME,,"[(NumericRange(empty=True),)]"
postgresql,postgresql,"select numrange(1.0, 2.0) * numrange(1.5, 3.0)",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.5'), Decimal('2.0'), '[)'),)]"
postgresql,postgresql,"select numrange(1.0, 2.0) * numrange(2.5, 3.0)",rangetypes.sql,SAME,,"[(NumericRange(empty=True),)]"
postgresql,postgresql,select range_intersect_agg(nr) from numrange_test,rangetypes.sql,SAME,,"[(NumericRange(empty=True),)]"
postgresql,postgresql,select range_intersect_agg(nr) from numrange_test where false,rangetypes.sql,SAME,,"[(None,)]"
postgresql,postgresql,select range_intersect_agg(nr) from numrange_test where nr @> 4.0,rangetypes.sql,SAME,,"[(NumericRange(Decimal('3'), Decimal('5'), '[)'),)]"
postgresql,postgresql,analyze numrange_test,rangetypes.sql,SAME,,[]
postgresql,postgresql,create index numrange_test2_hash_idx on numrange_test2 using hash (nr),rangetypes.sql,SAME,,[]
postgresql,postgresql,select * from numrange_test2 where nr = 'empty'::numrange,rangetypes.sql,SAME,,"[(NumericRange(empty=True),)]"
postgresql,postgresql,"select * from numrange_test2 where nr = numrange(1.1, 2.2)",rangetypes.sql,SAME,,"[(NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),)]"
postgresql,postgresql,"select * from numrange_test2 where nr = numrange(1.1, 2.3)",rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_nestloop=t,rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin=f,rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin=f,rangetypes.sql,SAME,,[]
postgresql,postgresql,select * from numrange_test natural join numrange_test2 order by nr,rangetypes.sql,SAME,,"[(NumericRange(empty=True),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),)]"
postgresql,postgresql,set enable_nestloop=f,rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin=t,rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin=f,rangetypes.sql,SAME,,[]
postgresql,postgresql,select * from numrange_test natural join numrange_test2 order by nr,rangetypes.sql,SAME,,"[(NumericRange(empty=True),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),)]"
postgresql,postgresql,set enable_nestloop=f,rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin=f,rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin=t,rangetypes.sql,SAME,,[]
postgresql,postgresql,select * from numrange_test natural join numrange_test2 order by nr,rangetypes.sql,SAME,,"[(NumericRange(empty=True),), (NumericRange(None, Decimal('5'), '()'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),), (NumericRange(Decimal('1.1'), Decimal('2.2'), '[)'),)]"
postgresql,postgresql,set enable_nestloop to default,rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_hashjoin to default,rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_mergejoin to default,rangetypes.sql,SAME,,[]
postgresql,postgresql,"select int4range(1, 10, '[]')",rangetypes.sql,SAME,,"[(NumericRange(1, 11, '[)'),)]"
postgresql,postgresql,"select int4range(1, 10, '[)')",rangetypes.sql,SAME,,"[(NumericRange(1, 10, '[)'),)]"
postgresql,postgresql,"select int4range(1, 10, '(]')",rangetypes.sql,SAME,,"[(NumericRange(2, 11, '[)'),)]"
postgresql,postgresql,"select int4range(1, 10, '()')",rangetypes.sql,SAME,,"[(NumericRange(2, 10, '[)'),)]"
postgresql,postgresql,"select int4range(1, 2, '()')",rangetypes.sql,SAME,,"[(NumericRange(empty=True),)]"
postgresql,postgresql,"select daterange('2000-01-10'::date, '2000-01-20'::date, '[]')",rangetypes.sql,SAME,,"[(DateRange(datetime.date(2000, 1, 10), datetime.date(2000, 1, 21), '[)'),)]"
postgresql,postgresql,"select daterange('2000-01-10'::date, '2000-01-20'::date, '[)')",rangetypes.sql,SAME,,"[(DateRange(datetime.date(2000, 1, 10), datetime.date(2000, 1, 20), '[)'),)]"
postgresql,postgresql,"select daterange('2000-01-10'::date, '2000-01-20'::date, '(]')",rangetypes.sql,SAME,,"[(DateRange(datetime.date(2000, 1, 11), datetime.date(2000, 1, 21), '[)'),)]"
postgresql,postgresql,"select daterange('2000-01-10'::date, '2000-01-20'::date, '()')",rangetypes.sql,SAME,,"[(DateRange(datetime.date(2000, 1, 11), datetime.date(2000, 1, 20), '[)'),)]"
postgresql,postgresql,"select daterange('2000-01-10'::date, '2000-01-11'::date, '()')",rangetypes.sql,SAME,,"[(DateRange(empty=True),)]"
postgresql,postgresql,"select daterange('2000-01-10'::date, '2000-01-11'::date, '(]')",rangetypes.sql,SAME,,"[(DateRange(datetime.date(2000, 1, 11), datetime.date(2000, 1, 12), '[)'),)]"
postgresql,postgresql,"select daterange('-infinity'::date, '2000-01-01'::date, '()')",rangetypes.sql,SAME,,"[(DateRange(datetime.date(1, 1, 1), datetime.date(2000, 1, 1), '()'),)]"
postgresql,postgresql,"select daterange('-infinity'::date, '2000-01-01'::date, '[)')",rangetypes.sql,SAME,,"[(DateRange(datetime.date(1, 1, 1), datetime.date(2000, 1, 1), '[)'),)]"
postgresql,postgresql,"select daterange('2000-01-01'::date, 'infinity'::date, '[)')",rangetypes.sql,SAME,,"[(DateRange(datetime.date(2000, 1, 1), datetime.date(9999, 12, 31), '[)'),)]"
postgresql,postgresql,"select daterange('2000-01-01'::date, 'infinity'::date, '[]')",rangetypes.sql,SAME,,"[(DateRange(datetime.date(2000, 1, 1), datetime.date(9999, 12, 31), '[]'),)]"
postgresql,postgresql,create index test_range_gist_idx on test_range_gist using gist (ir),rangetypes.sql,SAME,,[]
postgresql,postgresql,analyze test_range_gist,rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan    = t,rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan  = f,rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = f,rangetypes.sql,SAME,,[]
postgresql,postgresql,select count(*) from test_range_gist where ir @> 'empty'::int4range,rangetypes.sql,SAME,,"[(6200,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir = int4range(10,20)",rangetypes.sql,SAME,,"[(2,)]"
postgresql,postgresql,select count(*) from test_range_gist where ir @> 10,rangetypes.sql,SAME,,"[(130,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir @> int4range(10,20)",rangetypes.sql,SAME,,"[(111,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir && int4range(10,20)",rangetypes.sql,SAME,,"[(158,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir <@ int4range(10,50)",rangetypes.sql,SAME,,"[(1062,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir << int4range(100,500)",rangetypes.sql,SAME,,"[(189,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir >> int4range(100,500)",rangetypes.sql,SAME,,"[(3554,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &< int4range(100,500)",rangetypes.sql,SAME,,"[(1029,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &> int4range(100,500)",rangetypes.sql,SAME,,"[(4794,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir -|- int4range(100,500)",rangetypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,select count(*) from test_range_gist where ir @> '{}'::int4multirange,rangetypes.sql,SAME,,"[(6200,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir @> int4multirange(int4range(10,20), int4range(30,40))",rangetypes.sql,SAME,,"[(107,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir && '{(10,20),(30,40),(50,60)}'::int4multirange",rangetypes.sql,SAME,,"[(271,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir <@ '{(10,30),(40,60),(70,90)}'::int4multirange",rangetypes.sql,SAME,,"[(1060,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir << int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(189,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir >> int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(3554,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &< int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(1029,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &> int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(4794,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir -|- int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,SET enable_seqscan    = f,rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan  = t,rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = f,rangetypes.sql,SAME,,[]
postgresql,postgresql,select count(*) from test_range_gist where ir @> 'empty'::int4range,rangetypes.sql,SAME,,"[(6200,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir = int4range(10,20)",rangetypes.sql,SAME,,"[(2,)]"
postgresql,postgresql,select count(*) from test_range_gist where ir @> 10,rangetypes.sql,SAME,,"[(130,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir @> int4range(10,20)",rangetypes.sql,SAME,,"[(111,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir && int4range(10,20)",rangetypes.sql,SAME,,"[(158,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir <@ int4range(10,50)",rangetypes.sql,SAME,,"[(1062,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir << int4range(100,500)",rangetypes.sql,SAME,,"[(189,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir >> int4range(100,500)",rangetypes.sql,SAME,,"[(3554,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &< int4range(100,500)",rangetypes.sql,SAME,,"[(1029,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &> int4range(100,500)",rangetypes.sql,SAME,,"[(4794,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir -|- int4range(100,500)",rangetypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,select count(*) from test_range_gist where ir @> '{}'::int4multirange,rangetypes.sql,SAME,,"[(6200,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir @> int4multirange(int4range(10,20), int4range(30,40))",rangetypes.sql,SAME,,"[(107,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir && '{(10,20),(30,40),(50,60)}'::int4multirange",rangetypes.sql,SAME,,"[(271,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir <@ '{(10,30),(40,60),(70,90)}'::int4multirange",rangetypes.sql,SAME,,"[(1060,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir << int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(189,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir >> int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(3554,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &< int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(1029,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &> int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(4794,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir -|- int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,drop index test_range_gist_idx,rangetypes.sql,SAME,,[]
postgresql,postgresql,create index test_range_gist_idx on test_range_gist using gist (ir),rangetypes.sql,SAME,,[]
postgresql,postgresql,select count(*) from test_range_gist where ir @> 'empty'::int4range,rangetypes.sql,SAME,,"[(6200,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir = int4range(10,20)",rangetypes.sql,SAME,,"[(2,)]"
postgresql,postgresql,select count(*) from test_range_gist where ir @> 10,rangetypes.sql,SAME,,"[(130,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir @> int4range(10,20)",rangetypes.sql,SAME,,"[(111,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir && int4range(10,20)",rangetypes.sql,SAME,,"[(158,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir <@ int4range(10,50)",rangetypes.sql,SAME,,"[(1062,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir << int4range(100,500)",rangetypes.sql,SAME,,"[(189,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir >> int4range(100,500)",rangetypes.sql,SAME,,"[(3554,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &< int4range(100,500)",rangetypes.sql,SAME,,"[(1029,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &> int4range(100,500)",rangetypes.sql,SAME,,"[(4794,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir -|- int4range(100,500)",rangetypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,select count(*) from test_range_gist where ir @> '{}'::int4multirange,rangetypes.sql,SAME,,"[(6200,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir @> int4multirange(int4range(10,20), int4range(30,40))",rangetypes.sql,SAME,,"[(107,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir && '{(10,20),(30,40),(50,60)}'::int4multirange",rangetypes.sql,SAME,,"[(271,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir <@ '{(10,30),(40,60),(70,90)}'::int4multirange",rangetypes.sql,SAME,,"[(1060,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir << int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(189,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir >> int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(3554,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &< int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(1029,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir &> int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(4794,)]"
postgresql,postgresql,"select count(*) from test_range_gist where ir -|- int4multirange(int4range(100,200), int4range(400,500))",rangetypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,create index test_range_spgist_idx on test_range_spgist using spgist (ir),rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan    = t,rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan  = f,rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = f,rangetypes.sql,SAME,,[]
postgresql,postgresql,select count(*) from test_range_spgist where ir @> 'empty'::int4range,rangetypes.sql,SAME,,"[(6200,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir = int4range(10,20)",rangetypes.sql,SAME,,"[(2,)]"
postgresql,postgresql,select count(*) from test_range_spgist where ir @> 10,rangetypes.sql,SAME,,"[(130,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir @> int4range(10,20)",rangetypes.sql,SAME,,"[(111,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir && int4range(10,20)",rangetypes.sql,SAME,,"[(158,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir <@ int4range(10,50)",rangetypes.sql,SAME,,"[(1062,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir << int4range(100,500)",rangetypes.sql,SAME,,"[(189,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir >> int4range(100,500)",rangetypes.sql,SAME,,"[(3554,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir &< int4range(100,500)",rangetypes.sql,SAME,,"[(1029,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir &> int4range(100,500)",rangetypes.sql,SAME,,"[(4794,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir -|- int4range(100,500)",rangetypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,SET enable_seqscan    = f,rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan  = t,rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan = f,rangetypes.sql,SAME,,[]
postgresql,postgresql,select count(*) from test_range_spgist where ir @> 'empty'::int4range,rangetypes.sql,SAME,,"[(6200,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir = int4range(10,20)",rangetypes.sql,SAME,,"[(2,)]"
postgresql,postgresql,select count(*) from test_range_spgist where ir @> 10,rangetypes.sql,SAME,,"[(130,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir @> int4range(10,20)",rangetypes.sql,SAME,,"[(111,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir && int4range(10,20)",rangetypes.sql,SAME,,"[(158,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir <@ int4range(10,50)",rangetypes.sql,SAME,,"[(1062,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir << int4range(100,500)",rangetypes.sql,SAME,,"[(189,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir >> int4range(100,500)",rangetypes.sql,SAME,,"[(3554,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir &< int4range(100,500)",rangetypes.sql,SAME,,"[(1029,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir &> int4range(100,500)",rangetypes.sql,SAME,,"[(4794,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir -|- int4range(100,500)",rangetypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,drop index test_range_spgist_idx,rangetypes.sql,SAME,,[]
postgresql,postgresql,create index test_range_spgist_idx on test_range_spgist using spgist (ir),rangetypes.sql,SAME,,[]
postgresql,postgresql,select count(*) from test_range_spgist where ir @> 'empty'::int4range,rangetypes.sql,SAME,,"[(6200,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir = int4range(10,20)",rangetypes.sql,SAME,,"[(2,)]"
postgresql,postgresql,select count(*) from test_range_spgist where ir @> 10,rangetypes.sql,SAME,,"[(130,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir @> int4range(10,20)",rangetypes.sql,SAME,,"[(111,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir && int4range(10,20)",rangetypes.sql,SAME,,"[(158,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir <@ int4range(10,50)",rangetypes.sql,SAME,,"[(1062,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir << int4range(100,500)",rangetypes.sql,SAME,,"[(189,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir >> int4range(100,500)",rangetypes.sql,SAME,,"[(3554,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir &< int4range(100,500)",rangetypes.sql,SAME,,"[(1029,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir &> int4range(100,500)",rangetypes.sql,SAME,,"[(4794,)]"
postgresql,postgresql,"select count(*) from test_range_spgist where ir -|- int4range(100,500)",rangetypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,"explain (costs off) select ir from test_range_spgist where ir -|- int4range(10,20) order by ir",rangetypes.sql,SAME,,"[('Sort',), ('  Sort Key: ir',), ('  ->  Index Only Scan using test_range_spgist_idx on test_range_spgist',), (""        Index Cond: (ir -|- '[10,20)'::int4range)"",)]"
postgresql,postgresql,"select ir from test_range_spgist where ir -|- int4range(10,20) order by ir",rangetypes.sql,SAME,,"[(NumericRange(20, 30, '[)'),), (NumericRange(20, 30, '[)'),), (NumericRange(20, 10020, '[)'),)]"
postgresql,postgresql,RESET enable_seqscan,rangetypes.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,rangetypes.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,rangetypes.sql,SAME,,[]
postgresql,postgresql,create index test_range_elem_idx on test_range_elem (i),rangetypes.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan    = f,rangetypes.sql,SAME,,[]
postgresql,postgresql,"select count(*) from test_range_elem where i <@ int4range(10,50)",rangetypes.sql,SAME,,"[(40,)]"
postgresql,postgresql,"create index on test_range_elem using spgist(int4range(i,i+10))",rangetypes.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select count(*) from test_range_elem where int4range(i,i+10) <@ int4range(10,30)",rangetypes.sql,SAME,,"[('Aggregate',), ('  ->  Index Scan using test_range_elem_int4range_idx on test_range_elem',), (""        Index Cond: (int4range(i, (i + 10)) <@ '[10,30)'::int4range)"",)]"
postgresql,postgresql,"select count(*) from test_range_elem where int4range(i,i+10) <@ int4range(10,30)",rangetypes.sql,SAME,,"[(11,)]"
postgresql,postgresql,RESET enable_seqscan,rangetypes.sql,SAME,,[]
postgresql,postgresql,"select int8range(10000000000::int8, 20000000000::int8,'(]')",rangetypes.sql,SAME,,"[(NumericRange(10000000001, 20000000001, '[)'),)]"
postgresql,postgresql,set timezone to '-08',rangetypes.sql,SAME,,[]
postgresql,postgresql,"select '[2010-01-01 01:00:00 -05, 2010-01-01 02:00:00 -08)'::tstzrange",rangetypes.sql,SAME,,"[(DateTimeTZRange(datetime.datetime(2009, 12, 31, 22, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))), datetime.datetime(2010, 1, 1, 2, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))), '[)'),)]"
postgresql,postgresql,set timezone to default,rangetypes.sql,SAME,,[]
postgresql,postgresql,create domain mydomain as int4,rangetypes.sql,SAME,,[]
postgresql,postgresql,create type mydomainrange as range(subtype=mydomain),rangetypes.sql,SAME,,[]
postgresql,postgresql,"select '[4,50)'::mydomainrange @> 7::mydomain",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,drop domain mydomain cascade,rangetypes.sql,SAME,,[]
postgresql,postgresql,create domain restrictedrange as int4range check (upper(value) < 10),rangetypes.sql,SAME,,[]
postgresql,postgresql,"select '[4,5)'::restrictedrange @> 7",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,drop domain restrictedrange,rangetypes.sql,SAME,,[]
postgresql,postgresql,"create type textrange1 as range(subtype=text, collation=""C"")",rangetypes.sql,SAME,,[]
postgresql,postgresql,"create type textrange2 as range(subtype=text, collation=""C"")",rangetypes.sql,SAME,,[]
postgresql,postgresql,"select textrange2('a','z') @> 'b'::text",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,drop type textrange1,rangetypes.sql,SAME,,[]
postgresql,postgresql,drop type textrange2,rangetypes.sql,SAME,,[]
postgresql,postgresql,create function range_add_bounds(anyrange)   returns anyelement as 'select lower($1) + upper($1)' language sql,rangetypes.sql,SAME,,[]
postgresql,postgresql,"select range_add_bounds(int4range(1, 17))",rangetypes.sql,SAME,,"[(18,)]"
postgresql,postgresql,"select range_add_bounds(numrange(1.0001, 123.123))",rangetypes.sql,SAME,,"[(Decimal('124.1231'),)]"
postgresql,postgresql,"create function rangetypes_sql(q anyrange, b anyarray, out c anyelement)   as $$ select upper($1) + $2[1] $$   language sql",rangetypes.sql,SAME,,[]
postgresql,postgresql,"select rangetypes_sql(int4range(1,10), ARRAY[2,20])",rangetypes.sql,SAME,,"[(12,)]"
postgresql,postgresql,"select ARRAY[numrange(1.1, 1.2), numrange(12.3, 155.5)]",rangetypes.sql,SAME,,"[([NumericRange(Decimal('1.1'), Decimal('1.2'), '[)'), NumericRange(Decimal('12.3'), Decimal('155.5'), '[)')],)]"
postgresql,postgresql,select * from i8r_array,rangetypes.sql,SAME,,"[(42, [NumericRange(1, 10, '[)'), NumericRange(2, 20, '[)')])]"
postgresql,postgresql,create type arrayrange as range (subtype=int4[]),rangetypes.sql,SAME,,[]
postgresql,postgresql,"select arrayrange(ARRAY[1,2], ARRAY[2,1])",rangetypes.sql,SAME,,"[('[""{1,2}"",""{2,1}"")',)]"
postgresql,postgresql,"select array[1,1] <@ arrayrange(array[1,2], array[2,1])",rangetypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select array[1,3] <@ arrayrange(array[1,2], array[2,1])",rangetypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"create type two_ints as (a int, b int)",rangetypes.sql,SAME,,[]
postgresql,postgresql,create type two_ints_range as range (subtype = two_ints),rangetypes.sql,SAME,,[]
postgresql,postgresql,"select *, row_to_json(upper(t)) as u from   (values (two_ints_range(row(1,2), row(3,4))),           (two_ints_range(row(5,6), row(7,8)))) v(t)",rangetypes.sql,SAME,,"[('[""(1,2)"",""(3,4)"")', {'a': 3, 'b': 4}), ('[""(5,6)"",""(7,8)"")', {'a': 7, 'b': 8})]"
postgresql,postgresql,drop type two_ints cascade,rangetypes.sql,SAME,,[]
postgresql,postgresql,create type varbitrange as range (subtype = varbit),rangetypes.sql,SAME,,[]
postgresql,postgresql,set enable_sort = off,rangetypes.sql,SAME,,[]
postgresql,postgresql,"select '(01,10)'::varbitrange except select '(10,11)'::varbitrange",rangetypes.sql,SAME,,"[('(01,10)',)]"
postgresql,postgresql,reset enable_sort,rangetypes.sql,SAME,,[]
postgresql,postgresql,"create function outparam_succeed(i anyrange, out r anyrange, out t text)   as $$ select $1, 'foo'::text $$ language sql",rangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from outparam_succeed(int4range(1,2))",rangetypes.sql,SAME,,"[(NumericRange(1, 2, '[)'), 'foo')]"
postgresql,postgresql,"create function outparam2_succeed(r anyrange, out lu anyarray, out ul anyarray)   as $$ select array[lower($1), upper($1)], array[upper($1), lower($1)] $$   language sql",rangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from outparam2_succeed(int4range(1,11))",rangetypes.sql,SAME,,"[([1, 11], [11, 1])]"
postgresql,postgresql,"create function outparam_succeed2(i anyrange, out r anyarray, out t text)   as $$ select ARRAY[upper($1)], 'foo'::text $$ language sql",rangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from outparam_succeed2(int4range(int4range(1,2)))",rangetypes.sql,SAME,,"[([2], 'foo')]"
postgresql,postgresql,"create function inoutparam_succeed(out i anyelement, inout r anyrange)   as $$ select upper($1), $1 $$ language sql",rangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from inoutparam_succeed(int4range(1,2))",rangetypes.sql,SAME,,"[(2, NumericRange(1, 2, '[)'))]"
postgresql,postgresql,"create function table_succeed(r anyrange)   returns table(l anyelement, u anyelement)   as $$ select lower($1), upper($1) $$   language sql",rangetypes.sql,SAME,,[]
postgresql,postgresql,"select * from table_succeed(int4range(1,11))",rangetypes.sql,SAME,,"[(1, 11)]"
postgresql,postgresql,"explain (verbose, costs off) select current_date <@ daterange 'empty'",rangetypes.sql,SAME,,"[('Result',), (""  Output: (CURRENT_DATE <@ 'empty'::daterange)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select current_date <@ daterange(NULL, NULL)",rangetypes.sql,SAME,,"[('Result',), (""  Output: (CURRENT_DATE <@ '(,)'::daterange)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select current_date <@ daterange('2000-01-01', NULL, '[)')",rangetypes.sql,SAME,,"[('Result',), (""  Output: (CURRENT_DATE <@ '[2000-01-01,)'::daterange)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select current_date <@ daterange(NULL, '2000-01-01', '(]')",rangetypes.sql,SAME,,"[('Result',), (""  Output: (CURRENT_DATE <@ '(,2000-01-02)'::daterange)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select current_date <@ daterange('-Infinity', '1997-04-10'::date, '()')",rangetypes.sql,SAME,,"[('Result',), (""  Output: (CURRENT_DATE <@ '(-infinity,1997-04-10)'::daterange)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select current_date <@ daterange('-Infinity', '1997-04-10'::date, '[)')",rangetypes.sql,SAME,,"[('Result',), (""  Output: (CURRENT_DATE <@ '[-infinity,1997-04-10)'::daterange)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select current_date <@ daterange('2002-09-25'::date, 'Infinity', '[)')",rangetypes.sql,SAME,,"[('Result',), (""  Output: (CURRENT_DATE <@ '[2002-09-25,infinity)'::daterange)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select current_date <@ daterange('2002-09-25'::date, 'Infinity', '[]')",rangetypes.sql,SAME,,"[('Result',), (""  Output: (CURRENT_DATE <@ '[2002-09-25,infinity]'::daterange)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select daterange('-Infinity', '1997-04-10'::date, '()') @> current_date",rangetypes.sql,SAME,,"[('Result',), (""  Output: ('(-infinity,1997-04-10)'::daterange @> CURRENT_DATE)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select daterange('2002-09-25'::date, 'Infinity', '[]') @> current_date",rangetypes.sql,SAME,,"[('Result',), (""  Output: ('[2002-09-25,infinity]'::daterange @> CURRENT_DATE)"",)]"
postgresql,postgresql,"explain (verbose, costs off) select now() <@ tstzrange('2024-01-20 00:00', '2024-01-21 00:00')",rangetypes.sql,SAME,,"[('Result',), ('  Output: (now() <@ \'[""2024-01-20 00:00:00+01"",""2024-01-21 00:00:00+01"")\'::tstzrange)',)]"
postgresql,postgresql,"explain (verbose, costs off)   select clock_timestamp() <@ tstzrange('2024-01-20 00:00', '2024-01-21 00:00')",rangetypes.sql,SAME,,"[('Result',), ('  Output: (clock_timestamp() <@ \'[""2024-01-20 00:00:00+01"",""2024-01-21 00:00:00+01"")\'::tstzrange)',)]"
postgresql,postgresql,"explain (verbose, costs off) select clock_timestamp() <@ tstzrange('2024-01-20 00:00', NULL)",rangetypes.sql,SAME,,"[('Result',), ('  Output: (clock_timestamp() <@ \'[""2024-01-20 00:00:00+01"",)\'::tstzrange)',)]"
postgresql,postgresql,"create type textrange_supp as range (    subtype = text,    subtype_opclass = text_pattern_ops )",rangetypes.sql,SAME,,[]
postgresql,postgresql,"create temp table text_support_test (t text collate ""C"")",rangetypes.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select * from text_support_test where t <@ textrange_supp('a', 'd')",rangetypes.sql,SAME,,"[('Seq Scan on text_support_test',), (""  Filter: (t <@ '[a,d)'::textrange_supp)"",)]"
postgresql,postgresql,"select * from text_support_test where t <@ textrange_supp('a', 'd')",rangetypes.sql,SAME,,"[('a',), ('c',), ('ch',)]"
postgresql,postgresql,drop type textrange_supp,rangetypes.sql,SAME,,[]
postgresql,postgresql,set standard_conforming_strings = on,regex.sql,SAME,,[]
postgresql,postgresql,select 'bbbbb' ~ '^([bc])\1*$' as t,regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'ccc' ~ '^([bc])\1*$' as t,regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'xxx' ~ '^([bc])\1*$' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'bbc' ~ '^([bc])\1*$' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'b' ~ '^([bc])\1*$' as t,regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'abc abc abc' ~ '^(\w+)( \1)+$' as t,regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'abc abd abc' ~ '^(\w+)( \1)+$' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'abc abc abd' ~ '^(\w+)( \1)+$' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'abc abc abc' ~ '^(.+)( \1)+$' as t,regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'abc abd abc' ~ '^(.+)( \1)+$' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'abc abc abd' ~ '^(.+)( \1)+$' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select substring('asd TO foo' from ' TO (([a-z0-9._]+|""([^""]+|"""")+"")+)')",regex.sql,SAME,,"[('foo',)]"
postgresql,postgresql,select substring('a' from '((a))+'),regex.sql,SAME,,"[('a',)]"
postgresql,postgresql,select substring('a' from '((a)+)'),regex.sql,SAME,,"[('a',)]"
postgresql,postgresql,"select regexp_match('abc', '')",regex.sql,SAME,,"[([''],)]"
postgresql,postgresql,"select regexp_match('abc', 'bc')",regex.sql,SAME,,"[(['bc'],)]"
postgresql,postgresql,"select regexp_match('abc', 'd') is null",regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select regexp_match('abc', '(B)(c)', 'i')",regex.sql,SAME,,"[(['b', 'c'],)]"
postgresql,postgresql,"select regexp_matches('ab', 'a(?=b)b*')",regex.sql,SAME,,"[(['ab'],)]"
postgresql,postgresql,"select regexp_matches('a', 'a(?=b)b*')",regex.sql,SAME,,[]
postgresql,postgresql,"select regexp_matches('abc', 'a(?=b)b*(?=c)c*')",regex.sql,SAME,,"[(['abc'],)]"
postgresql,postgresql,"select regexp_matches('ab', 'a(?=b)b*(?=c)c*')",regex.sql,SAME,,[]
postgresql,postgresql,"select regexp_matches('ab', 'a(?!b)b*')",regex.sql,SAME,,[]
postgresql,postgresql,"select regexp_matches('a', 'a(?!b)b*')",regex.sql,SAME,,"[(['a'],)]"
postgresql,postgresql,"select regexp_matches('b', '(?=b)b')",regex.sql,SAME,,"[(['b'],)]"
postgresql,postgresql,"select regexp_matches('a', '(?=b)b')",regex.sql,SAME,,[]
postgresql,postgresql,"select regexp_matches('abb', '(?<=a)b*')",regex.sql,SAME,,"[(['bb'],)]"
postgresql,postgresql,"select regexp_matches('a', 'a(?<=a)b*')",regex.sql,SAME,,"[(['a'],)]"
postgresql,postgresql,"select regexp_matches('abc', 'a(?<=a)b*(?<=b)c*')",regex.sql,SAME,,"[(['abc'],)]"
postgresql,postgresql,"select regexp_matches('ab', 'a(?<=a)b*(?<=b)c*')",regex.sql,SAME,,"[(['ab'],)]"
postgresql,postgresql,"select regexp_matches('ab', 'a*(?<!a)b*')",regex.sql,SAME,,"[([''],)]"
postgresql,postgresql,"select regexp_matches('ab', 'a*(?<!a)b+')",regex.sql,SAME,,[]
postgresql,postgresql,"select regexp_matches('b', 'a*(?<!a)b+')",regex.sql,SAME,,"[(['b'],)]"
postgresql,postgresql,"select regexp_matches('a', 'a(?<!a)b*')",regex.sql,SAME,,[]
postgresql,postgresql,"select regexp_matches('b', '(?<=b)b')",regex.sql,SAME,,[]
postgresql,postgresql,"select regexp_matches('foobar', '(?<=f)b+')",regex.sql,SAME,,[]
postgresql,postgresql,"select regexp_matches('foobar', '(?<=foo)b+')",regex.sql,SAME,,"[(['b'],)]"
postgresql,postgresql,"select regexp_matches('foobar', '(?<=oo)b+')",regex.sql,SAME,,"[(['b'],)]"
postgresql,postgresql,select 'xz' ~ 'x(?=[xy])',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'xy' ~ 'x(?=[xy])',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'xz' ~ 'x(?![xy])',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'xy' ~ 'x(?![xy])',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'x'  ~ 'x(?![xy])',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'xyy' ~ '(?<=[xy])yy+',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'zyy' ~ '(?<=[xy])yy+',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'xyy' ~ '(?<![xy])yy+',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'zyy' ~ '(?<![xy])yy+',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,explain (costs off) select * from pg_proc where proname ~ 'abc',regex.sql,SAME,,"[('Seq Scan on pg_proc',), (""  Filter: (proname ~ 'abc'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from pg_proc where proname ~ '^abc',regex.sql,SAME,,"[('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Index Cond: ((proname >= 'abc'::text) AND (proname < 'abd'::text))"",), (""  Filter: (proname ~ '^abc'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from pg_proc where proname ~ '^abc$',regex.sql,SAME,,"[('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Index Cond: (proname = 'abc'::text)"",), (""  Filter: (proname ~ '^abc$'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from pg_proc where proname ~ '^abcd*e',regex.sql,SAME,,"[('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Index Cond: ((proname >= 'abc'::text) AND (proname < 'abd'::text))"",), (""  Filter: (proname ~ '^abcd*e'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from pg_proc where proname ~ '^abc+d',regex.sql,SAME,,"[('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Index Cond: ((proname >= 'abc'::text) AND (proname < 'abd'::text))"",), (""  Filter: (proname ~ '^abc+d'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from pg_proc where proname ~ '^(abc)(def)',regex.sql,SAME,,"[('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Index Cond: ((proname >= 'abcdef'::text) AND (proname < 'abcdeg'::text))"",), (""  Filter: (proname ~ '^(abc)(def)'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from pg_proc where proname ~ '^(abc)$',regex.sql,SAME,,"[('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Index Cond: (proname = 'abc'::text)"",), (""  Filter: (proname ~ '^(abc)$'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from pg_proc where proname ~ '^(abc)?d',regex.sql,SAME,,"[('Seq Scan on pg_proc',), (""  Filter: (proname ~ '^(abc)?d'::text)"",)]"
postgresql,postgresql,explain (costs off) select * from pg_proc where proname ~ '^abcd(x|(?=\w\w)q)',regex.sql,SAME,,"[('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), (""  Index Cond: ((proname >= 'abcd'::text) AND (proname < 'abce'::text))"",), (""  Filter: (proname ~ '^abcd(x|(?=\\w\\w)q)'::text)"",)]"
postgresql,postgresql,select 'a' ~ '($|^)*',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'a' ~ '(^)+^',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'a' ~ '$($$)+',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'a' ~ '($^)+',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'a' ~ '(^$)*',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'aa bb cc' ~ '(^(?!aa))+',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'aa x' ~ '(^(?!aa)(?!bb)(?!cc))+',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'bb x' ~ '(^(?!aa)(?!bb)(?!cc))+',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'cc x' ~ '(^(?!aa)(?!bb)(?!cc))+',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'dd x' ~ '(^(?!aa)(?!bb)(?!cc))+',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'a' ~ '((((((a)*)*)*)*)*)*',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'a' ~ '((((((a+|)+|)+|)+|)+|)+|)',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'x' ~ 'abcd(\m)+xyz',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'a' ~ '^abcd*(((((^(a c(e?d)a+|)+|)+|)+|)+|a)+|)',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'x' ~ 'a^(^)bcd*xy(((((($a+|)+|)+|)+$|)+|)+|)^$',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'x' ~ 'xyz(\Y\Y)+',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'x' ~ 'x|(?:\M)+',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'Programmer' ~ '(\w).*?\1' as t,regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select regexp_matches('Programmer', '(\w)(.*?\1)', 'g')",regex.sql,SAME,,"[(['r', 'ogr'],), (['m', 'm'],)]"
postgresql,postgresql,"select regexp_matches('foo/bar/baz',                       '^([^/]+?)(?:/([^/]+?))(?:/([^/]+?))?$', '')",regex.sql,SAME,,"[(['foo', 'bar', 'baz'],)]"
postgresql,postgresql,"select regexp_matches('llmmmfff', '^(l*)(.*)(f*)$')",regex.sql,SAME,,"[(['ll', 'mmmfff', ''],)]"
postgresql,postgresql,"select regexp_matches('llmmmfff', '^(l*){1,1}(.*)(f*)$')",regex.sql,SAME,,"[(['ll', 'mmmfff', ''],)]"
postgresql,postgresql,"select regexp_matches('llmmmfff', '^(l*){1,1}?(.*)(f*)$')",regex.sql,SAME,,"[(['', 'llmmmfff', ''],)]"
postgresql,postgresql,"select regexp_matches('llmmmfff', '^(l*){1,1}?(.*){1,1}?(f*)$')",regex.sql,SAME,,"[(['', 'llmmm', 'fff'],)]"
postgresql,postgresql,"select regexp_matches('llmmmfff', '^(l*?)(.*)(f*)$')",regex.sql,SAME,,"[(['', 'llmmmfff', ''],)]"
postgresql,postgresql,"select regexp_matches('llmmmfff', '^(l*?){1,1}(.*)(f*)$')",regex.sql,SAME,,"[(['ll', 'mmmfff', ''],)]"
postgresql,postgresql,"select regexp_matches('llmmmfff', '^(l*?){1,1}?(.*)(f*)$')",regex.sql,SAME,,"[(['', 'llmmmfff', ''],)]"
postgresql,postgresql,"select regexp_matches('llmmmfff', '^(l*?){1,1}?(.*){1,1}?(f*)$')",regex.sql,SAME,,"[(['', 'llmmm', 'fff'],)]"
postgresql,postgresql,select 'a' ~ '$()|^\1',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'a' ~ '.. ()|\1',regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'a' ~ '()*\1',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'a' ~ '()+\1',regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'xxx' ~ '(.){0}(\1)' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'xxx' ~ '((.)){0}(\2)' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'xyz' ~ '((.)){0}(\2){0}' as t,regex.sql,SAME,,"[(True,)]"
postgresql,postgresql,select 'abcdef' ~ '^(.)\1|\1.' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'abadef' ~ '^((.)\2|..)\2' as f,regex.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select regexp_match('xy', '.|...')",regex.sql,SAME,,"[(['x'],)]"
postgresql,postgresql,"select regexp_match('xyz', '.|...')",regex.sql,SAME,,"[(['xyz'],)]"
postgresql,postgresql,"select regexp_match('xy', '.*')",regex.sql,SAME,,"[(['xy'],)]"
postgresql,postgresql,"select regexp_match('fooba', '(?:..)*')",regex.sql,SAME,,"[(['foob'],)]"
postgresql,postgresql,"select regexp_match('xyz', repeat('.', 260))",regex.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select regexp_match('foo', '(?:.|){99}')",regex.sql,SAME,,"[(['foo'],)]"
postgresql,postgresql,SELECT regoper('||/'),regproc.sql,SAME,,"[('||/',)]"
postgresql,postgresql,"SELECT regoperator('+(int4,int4)')",regproc.sql,SAME,,"[('+(integer,integer)',)]"
postgresql,postgresql,SELECT regproc('now'),regproc.sql,SAME,,"[('now',)]"
postgresql,postgresql,SELECT regprocedure('abs(numeric)'),regproc.sql,SAME,,"[('abs(numeric)',)]"
postgresql,postgresql,SELECT regclass('pg_class'),regproc.sql,SAME,,"[('pg_class',)]"
postgresql,postgresql,SELECT regtype('int4'),regproc.sql,SAME,,"[('integer',)]"
postgresql,postgresql,"SELECT regcollation('""POSIX""')",regproc.sql,SAME,,"[('""POSIX""',)]"
postgresql,postgresql,SELECT to_regoper('||/'),regproc.sql,SAME,,"[('||/',)]"
postgresql,postgresql,"SELECT to_regoperator('+(int4,int4)')",regproc.sql,SAME,,"[('+(integer,integer)',)]"
postgresql,postgresql,SELECT to_regproc('now'),regproc.sql,SAME,,"[('now',)]"
postgresql,postgresql,SELECT to_regprocedure('abs(numeric)'),regproc.sql,SAME,,"[('abs(numeric)',)]"
postgresql,postgresql,SELECT to_regclass('pg_class'),regproc.sql,SAME,,"[('pg_class',)]"
postgresql,postgresql,SELECT to_regtype('int4'),regproc.sql,SAME,,"[('integer',)]"
postgresql,postgresql,"SELECT to_regcollation('""POSIX""')",regproc.sql,SAME,,"[('""POSIX""',)]"
postgresql,postgresql,SELECT regoper('pg_catalog.||/'),regproc.sql,SAME,,"[('||/',)]"
postgresql,postgresql,"SELECT regoperator('pg_catalog.+(int4,int4)')",regproc.sql,SAME,,"[('+(integer,integer)',)]"
postgresql,postgresql,SELECT regproc('pg_catalog.now'),regproc.sql,SAME,,"[('now',)]"
postgresql,postgresql,SELECT regprocedure('pg_catalog.abs(numeric)'),regproc.sql,SAME,,"[('abs(numeric)',)]"
postgresql,postgresql,SELECT regclass('pg_catalog.pg_class'),regproc.sql,SAME,,"[('pg_class',)]"
postgresql,postgresql,SELECT regtype('pg_catalog.int4'),regproc.sql,SAME,,"[('integer',)]"
postgresql,postgresql,"SELECT regcollation('pg_catalog.""POSIX""')",regproc.sql,SAME,,"[('""POSIX""',)]"
postgresql,postgresql,SELECT to_regoper('pg_catalog.||/'),regproc.sql,SAME,,"[('||/',)]"
postgresql,postgresql,SELECT to_regproc('pg_catalog.now'),regproc.sql,SAME,,"[('now',)]"
postgresql,postgresql,SELECT to_regprocedure('pg_catalog.abs(numeric)'),regproc.sql,SAME,,"[('abs(numeric)',)]"
postgresql,postgresql,SELECT to_regclass('pg_catalog.pg_class'),regproc.sql,SAME,,"[('pg_class',)]"
postgresql,postgresql,SELECT to_regtype('pg_catalog.int4'),regproc.sql,SAME,,"[('integer',)]"
postgresql,postgresql,"SELECT to_regcollation('pg_catalog.""POSIX""')",regproc.sql,SAME,,"[('""POSIX""',)]"
postgresql,postgresql,SELECT regnamespace('pg_catalog'),regproc.sql,SAME,,"[('pg_catalog',)]"
postgresql,postgresql,"SELECT regnamespace('""pg_catalog""')",regproc.sql,SAME,,"[('pg_catalog',)]"
postgresql,postgresql,SELECT to_regrole('regress_regrole_test'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT to_regrole('""regress_regrole_test""')",regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regnamespace('pg_catalog'),regproc.sql,SAME,,"[('pg_catalog',)]"
postgresql,postgresql,"SELECT to_regnamespace('""pg_catalog""')",regproc.sql,SAME,,"[('pg_catalog',)]"
postgresql,postgresql,"/* If objects don't exist, return NULL with no error. */   SELECT to_regoper('||//')",regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT to_regoperator('++(int4,int4)')",regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regproc('know'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regprocedure('absinthe(numeric)'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regclass('pg_classes'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regtype('int3'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regcollation('notacollation'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regoper('ng_catalog.||/'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT to_regoperator('ng_catalog.+(int4,int4)')",regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regproc('ng_catalog.now'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regprocedure('ng_catalog.abs(numeric)'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regclass('ng_catalog.pg_class'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regtype('ng_catalog.int4'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT to_regcollation('ng_catalog.""POSIX""')",regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regrole('regress_regrole_test'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT to_regrole('""regress_regrole_test""')",regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regrole('foo.bar'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regrole('Nonexistent'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT to_regrole('""Nonexistent""')",regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regrole('foo.bar'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regnamespace('Nonexistent'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT to_regnamespace('""Nonexistent""')",regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT to_regnamespace('foo.bar'),regproc.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('ng_catalog.pg_class', 'regclass')",regproc.sql,SAME,,"[('relation ""ng_catalog.pg_class"" does not exist', None, None, '42P01')]"
postgresql,postgresql,"SELECT pg_input_is_valid('ng_catalog.""POSIX""', 'regcollation')",regproc.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('no_such_config', 'regconfig')",regproc.sql,SAME,,"[('text search configuration ""no_such_config"" does not exist', None, None, '42704')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('no_such_dictionary', 'regdictionary')",regproc.sql,SAME,,"[('text search dictionary ""no_such_dictionary"" does not exist', None, None, '42704')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('Nonexistent', 'regnamespace')",regproc.sql,SAME,,"[('schema ""nonexistent"" does not exist', None, None, '3F000')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('ng_catalog.||/', 'regoper')",regproc.sql,SAME,,"[('operator does not exist: ng_catalog.||/', None, None, '42883')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('-', 'regoper')",regproc.sql,SAME,,"[('more than one operator named -', None, None, '42725')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('ng_catalog.+(int4,int4)', 'regoperator')",regproc.sql,SAME,,"[('operator does not exist: ng_catalog.+(int4,int4)', None, None, '42883')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('-', 'regoperator')",regproc.sql,SAME,,"[('expected a left parenthesis', None, None, '22P02')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('ng_catalog.now', 'regproc')",regproc.sql,SAME,,"[('function ""ng_catalog.now"" does not exist', None, None, '42883')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('ng_catalog.abs(numeric)', 'regprocedure')",regproc.sql,SAME,,"[('function ""ng_catalog.abs(numeric)"" does not exist', None, None, '42883')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('ng_catalog.abs(numeric', 'regprocedure')",regproc.sql,SAME,,"[('expected a right parenthesis', None, None, '22P02')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('regress_regrole_test', 'regrole')",regproc.sql,SAME,,"[('role ""regress_regrole_test"" does not exist', None, None, '42704')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('no_such_type', 'regtype')",regproc.sql,SAME,,"[('type ""no_such_type"" does not exist', None, None, '42704')]"
postgresql,postgresql,BEGIN,reindex_catalog.sql,SAME,,[]
postgresql,postgresql,SET min_parallel_table_scan_size = 0,reindex_catalog.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,reindex_catalog.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test'::regclass,reloptions.sql,SAME,,"[(['fillfactor=30', 'autovacuum_enabled=false', 'autovacuum_analyze_scale_factor=0.2'],)]"
postgresql,postgresql,"ALTER TABLE reloptions_test SET (fillfactor=31, 	autovacuum_analyze_scale_factor = 0.3)",reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test'::regclass,reloptions.sql,SAME,,"[(['autovacuum_enabled=false', 'fillfactor=31', 'autovacuum_analyze_scale_factor=0.3'],)]"
postgresql,postgresql,"ALTER TABLE reloptions_test SET (autovacuum_enabled, fillfactor=32)",reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test'::regclass,reloptions.sql,SAME,,"[(['autovacuum_analyze_scale_factor=0.3', 'autovacuum_enabled=true', 'fillfactor=32'],)]"
postgresql,postgresql,ALTER TABLE reloptions_test RESET (fillfactor),reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test'::regclass,reloptions.sql,SAME,,"[(['autovacuum_analyze_scale_factor=0.3', 'autovacuum_enabled=true'],)]"
postgresql,postgresql,"ALTER TABLE reloptions_test RESET (autovacuum_enabled, 	autovacuum_analyze_scale_factor)",reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test'::regclass AND        reloptions IS NULL,reloptions.sql,SAME,,"[(None,)]"
postgresql,postgresql,ALTER TABLE reloptions_test RESET (illegal_option),reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test'::regclass,reloptions.sql,SAME,,"[(None,)]"
postgresql,postgresql,"CREATE TEMP TABLE reloptions_test(i INT NOT NULL, j text) 	WITH (vacuum_truncate=false, 	toast.vacuum_truncate=false, 	autovacuum_enabled=false)",reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test'::regclass,reloptions.sql,SAME,,"[(['vacuum_truncate=false', 'autovacuum_enabled=false'],)]"
postgresql,postgresql,"VACUUM (FREEZE, DISABLE_PAGE_SKIPPING) reloptions_test",reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT pg_relation_size('reloptions_test') > 0,reloptions.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 	(SELECT reltoastrelid FROM pg_class 	WHERE oid = 'reloptions_test'::regclass),reloptions.sql,SAME,,"[(['vacuum_truncate=false'],)]"
postgresql,postgresql,ALTER TABLE reloptions_test RESET (vacuum_truncate),reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test'::regclass,reloptions.sql,SAME,,"[(['autovacuum_enabled=false'],)]"
postgresql,postgresql,"VACUUM (FREEZE, DISABLE_PAGE_SKIPPING) reloptions_test",reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT pg_relation_size('reloptions_test') = 0,reloptions.sql,SAME,,"[(True,)]"
postgresql,postgresql,ALTER TABLE reloptions_test SET (toast.autovacuum_vacuum_cost_delay = 24),reloptions.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE reloptions_test RESET (toast.autovacuum_vacuum_cost_delay),reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test'::regclass,reloptions.sql,SAME,,"[(['autovacuum_vacuum_cost_delay=24', 'fillfactor=40'],)]"
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = ( 	SELECT reltoastrelid FROM pg_class WHERE oid = 'reloptions_test'::regclass),reloptions.sql,SAME,,"[(['autovacuum_vacuum_cost_delay=23'],)]"
postgresql,postgresql,CREATE INDEX reloptions_test_idx ON reloptions_test (s) WITH (fillfactor=30),reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test_idx'::regclass,reloptions.sql,SAME,,"[(['fillfactor=30'],)]"
postgresql,postgresql,ALTER INDEX reloptions_test_idx SET (fillfactor=40),reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test_idx'::regclass,reloptions.sql,SAME,,"[(['fillfactor=40'],)]"
postgresql,postgresql,CREATE INDEX reloptions_test_idx3 ON reloptions_test (s),reloptions.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX reloptions_test_idx3 SET (fillfactor=40),reloptions.sql,SAME,,[]
postgresql,postgresql,SELECT reloptions FROM pg_class WHERE oid = 'reloptions_test_idx3'::regclass,reloptions.sql,SAME,,"[(['fillfactor=40'],)]"
postgresql,postgresql,"CREATE INDEX test_replica_identity_keyab ON test_replica_identity (keya, keyb)",replica_identity.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX test_replica_identity_keyab_key ON test_replica_identity (keya, keyb)",replica_identity.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX test_replica_identity_nonkey ON test_replica_identity (keya, nonkey)",replica_identity.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX test_replica_identity_hash ON test_replica_identity USING hash (nonkey),replica_identity.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX test_replica_identity_expr ON test_replica_identity (keya, keyb, (3))",replica_identity.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX test_replica_identity_partial ON test_replica_identity (keya, keyb) WHERE keyb != '3'",replica_identity.sql,SAME,,[]
postgresql,postgresql,SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass,replica_identity.sql,SAME,,"[('d',)]"
postgresql,postgresql,SELECT relreplident FROM pg_class WHERE oid = 'pg_class'::regclass,replica_identity.sql,SAME,,"[('n',)]"
postgresql,postgresql,SELECT relreplident FROM pg_class WHERE oid = 'pg_constraint'::regclass,replica_identity.sql,SAME,,"[('n',)]"
postgresql,postgresql,SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass,replica_identity.sql,SAME,,"[('d',)]"
postgresql,postgresql,ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_pkey,replica_identity.sql,SAME,,[]
postgresql,postgresql,SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass,replica_identity.sql,SAME,,"[('i',)]"
postgresql,postgresql,ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_unique_nondefer,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_keyab_key,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity REPLICA IDENTITY USING INDEX test_replica_identity_keyab_key,replica_identity.sql,SAME,,[]
postgresql,postgresql,SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass,replica_identity.sql,SAME,,"[('i',)]"
postgresql,postgresql,SELECT count(*) FROM pg_index WHERE indrelid = 'test_replica_identity'::regclass AND indisreplident,replica_identity.sql,SAME,,"[(1,)]"
postgresql,postgresql,ALTER TABLE test_replica_identity REPLICA IDENTITY DEFAULT,replica_identity.sql,SAME,,[]
postgresql,postgresql,SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass,replica_identity.sql,SAME,,"[('d',)]"
postgresql,postgresql,SELECT count(*) FROM pg_index WHERE indrelid = 'test_replica_identity'::regclass AND indisreplident,replica_identity.sql,SAME,,"[(0,)]"
postgresql,postgresql,ALTER TABLE test_replica_identity REPLICA IDENTITY FULL,replica_identity.sql,SAME,,[]
postgresql,postgresql,SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass,replica_identity.sql,SAME,,"[('f',)]"
postgresql,postgresql,ALTER TABLE test_replica_identity REPLICA IDENTITY NOTHING,replica_identity.sql,SAME,,[]
postgresql,postgresql,SELECT relreplident FROM pg_class WHERE oid = 'test_replica_identity'::regclass,replica_identity.sql,SAME,,"[('n',)]"
postgresql,postgresql,ALTER TABLE test_replica_identity2 REPLICA IDENTITY USING INDEX test_replica_identity2_id_key,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity2 ALTER COLUMN id TYPE bigint,replica_identity.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX test_replica_identity3_id_key ON test_replica_identity3 (id),replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity3 REPLICA IDENTITY USING INDEX test_replica_identity3_id_key,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity3 ALTER COLUMN id TYPE bigint,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity3 REPLICA IDENTITY FULL,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity3 ALTER COLUMN id DROP NOT NULL,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY test_replica_identity4   ATTACH PARTITION test_replica_identity4_1 FOR VALUES IN (1),replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY test_replica_identity4   ADD CONSTRAINT test_replica_identity4_pkey PRIMARY KEY (id),replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY test_replica_identity4   REPLICA IDENTITY USING INDEX test_replica_identity4_pkey,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ONLY test_replica_identity4_1   ADD CONSTRAINT test_replica_identity4_1_pkey PRIMARY KEY (id),replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX test_replica_identity4_pkey   ATTACH PARTITION test_replica_identity4_1_pkey,replica_identity.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX test_replica_identity5_a_b_key ON test_replica_identity5 (a, b)",replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity5 REPLICA IDENTITY USING INDEX test_replica_identity5_a_b_key,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity5 DROP CONSTRAINT test_replica_identity5_pkey,replica_identity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE test_replica_identity5 ALTER b SET NOT NULL,replica_identity.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE foo (f1 serial, f2 text, f3 int default 42)",returning.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42), (2, 'More', 11), (3, 'MORE', 16)]"
postgresql,postgresql,"UPDATE foo SET f2 = lower(f2), f3 = DEFAULT RETURNING foo.*, f1+f3 AS sum13",returning.sql,SAME,,"[(1, 'test', 42, 43), (2, 'more', 42, 44), (3, 'more', 42, 45)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42), (2, 'more', 42), (3, 'more', 42)]"
postgresql,postgresql,"DELETE FROM foo WHERE f1 > 2 RETURNING f3, f2, f1, least(f1,f3)",returning.sql,SAME,,"[(42, 'more', 3, 3)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42), (2, 'more', 42)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42), (2, 'more', 42)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42), (2, 'more', 42)]"
postgresql,postgresql,CREATE TEMP TABLE foochild (fc int) INHERITS (foo),returning.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE foo ADD COLUMN f4 int8 DEFAULT 99,returning.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42, 99), (2, 'more', 42, 99), (123, 'child', 999, 99)]"
postgresql,postgresql,SELECT * FROM foochild,returning.sql,SAME,,"[(123, 'child', 999, -123, 99)]"
postgresql,postgresql,UPDATE foo SET f4 = f4 + f3 WHERE f4 = 99 RETURNING *,returning.sql,SAME,,"[(1, 'test', 42, 141), (2, 'more', 42, 141), (123, 'child', 999, 1098)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42, 141), (2, 'more', 42, 141), (123, 'child', 999, 1098)]"
postgresql,postgresql,SELECT * FROM foochild,returning.sql,SAME,,"[(123, 'child', 999, -123, 1098)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42, 141), (2, 'more', 42, 141), (123, 'child', 999, 1098)]"
postgresql,postgresql,SELECT * FROM foochild,returning.sql,SAME,,"[(123, 'child', 999, -123, 1098)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42, 141), (2, 'more', 42, 141), (123, 'child', 999, 1098)]"
postgresql,postgresql,SELECT * FROM foochild,returning.sql,SAME,,"[(123, 'child', 999, -123, 1098)]"
postgresql,postgresql,"CREATE TEMP VIEW voo AS SELECT f1, f2 FROM foo",returning.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42, 141), (2, 'more', 42, 141), (11, 'zit', 57, 99), (13, 'zit2', 57, 99), (14, 'zoo2', 57, 99)]"
postgresql,postgresql,SELECT * FROM voo,returning.sql,SAME,,"[(1, 'test'), (2, 'more'), (11, 'zit'), (13, 'zit2'), (14, 'zoo2')]"
postgresql,postgresql,"CREATE OR REPLACE RULE voo_u AS ON UPDATE TO voo DO INSTEAD   UPDATE foo SET f1 = new.f1, f2 = new.f2 WHERE f1 = old.f1   RETURNING f1, f2",returning.sql,SAME,,[]
postgresql,postgresql,update voo set f1 = f1 + 1 where f2 = 'zoo2',returning.sql,SAME,,[]
postgresql,postgresql,"update voo set f1 = f1 + 1 where f2 = 'zoo2' RETURNING *, f1*2",returning.sql,SAME,,"[(16, 'zoo2', 32)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42, 141), (2, 'more', 42, 141), (11, 'zit', 57, 99), (13, 'zit2', 57, 99), (16, 'zoo2', 57, 99)]"
postgresql,postgresql,SELECT * FROM voo,returning.sql,SAME,,"[(1, 'test'), (2, 'more'), (11, 'zit'), (13, 'zit2'), (16, 'zoo2')]"
postgresql,postgresql,"CREATE OR REPLACE RULE voo_d AS ON DELETE TO voo DO INSTEAD   DELETE FROM foo WHERE f1 = old.f1   RETURNING f1, f2",returning.sql,SAME,,[]
postgresql,postgresql,DELETE FROM foo WHERE f1 = 13,returning.sql,SAME,,[]
postgresql,postgresql,DELETE FROM foo WHERE f2 = 'zit' RETURNING *,returning.sql,SAME,,"[(11, 'zit', 57, 99)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42, 141), (2, 'more', 42, 141), (16, 'zoo2', 57, 99)]"
postgresql,postgresql,SELECT * FROM voo,returning.sql,SAME,,"[(1, 'test'), (2, 'more'), (16, 'zoo2')]"
postgresql,postgresql,"CREATE TEMP TABLE joinme (f2j text, other int)",returning.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP VIEW joinview AS   SELECT foo.*, other FROM foo JOIN joinme ON (f2 = f2j)",returning.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM joinview,returning.sql,SAME,,"[(2, 'more', 42, 141, 12345), (16, 'zoo2', 57, 99, 54321)]"
postgresql,postgresql,"CREATE RULE joinview_u AS ON UPDATE TO joinview DO INSTEAD   UPDATE foo SET f1 = new.f1, f3 = new.f3     FROM joinme WHERE f2 = f2j AND f2 = old.f2     RETURNING foo.*, other",returning.sql,SAME,,[]
postgresql,postgresql,"UPDATE joinview SET f1 = f1 + 1 WHERE f3 = 57 RETURNING *, other + 1",returning.sql,SAME,,"[(17, 'zoo2', 57, 99, 54321, 54322)]"
postgresql,postgresql,SELECT * FROM joinview,returning.sql,SAME,,"[(2, 'more', 42, 141, 12345), (17, 'zoo2', 57, 99, 54321)]"
postgresql,postgresql,SELECT * FROM foo,returning.sql,SAME,,"[(1, 'test', 42, 141), (2, 'more', 42, 141), (17, 'zoo2', 57, 99)]"
postgresql,postgresql,SELECT * FROM voo,returning.sql,SAME,,"[(1, 'test'), (2, 'more'), (17, 'zoo2')]"
postgresql,postgresql,SET client_min_messages TO 'warning',rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA IF EXISTS regress_rls_schema CASCADE,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA regress_rls_schema,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON SCHEMA regress_rls_schema to public,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET search_path = regress_rls_schema,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT SELECT ON uaccount TO public,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON category TO public,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON document TO public,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE document ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON document AS PERMISSIVE     USING (dlevel <= (SELECT seclv FROM uaccount WHERE pguser = current_user)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_policies WHERE schemaname = 'regress_rls_schema' AND tablename = 'document' ORDER BY policyname,rowsecurity.sql,SAME,,"[('regress_rls_schema', 'document', 'p1', 'PERMISSIVE', ['public'], 'ALL', '(dlevel <= ( SELECT uaccount.seclv\n   FROM uaccount\n  WHERE (uaccount.pguser = CURRENT_USER)))', None)]"
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER POLICY p1 ON document USING (true),rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p1 ON document,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"CREATE POLICY p2 ON category     USING (CASE WHEN current_user = 'regress_rls_bob' THEN cid IN (11, 33)            WHEN current_user = 'regress_rls_carol' THEN cid IN (22, 44)            ELSE false END)",rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE category ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM document d FULL OUTER JOIN category c on d.cid = c.cid ORDER BY d.did, c.cid",rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel', 11, 'novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel', 11, 'novel'), (3, 22, 2, 'regress_rls_bob', 'my science fiction', 22, 'science fiction'), (4, 44, 1, 'regress_rls_bob', 'my first manga', 44, 'manga'), (5, 44, 2, 'regress_rls_bob', 'my second manga', 44, 'manga'), (6, 22, 1, 'regress_rls_carol', 'great science fiction', 22, 'science fiction'), (7, 33, 2, 'regress_rls_carol', 'great technology book', 33, 'technology'), (8, 44, 1, 'regress_rls_carol', 'great manga', 44, 'manga'), (9, 22, 1, 'regress_rls_dave', 'awesome science fiction', 22, 'science fiction'), (10, 33, 2, 'regress_rls_dave', 'awesome technology book', 33, 'technology'), (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies', 44, 'manga')]"
postgresql,postgresql,"SELECT * FROM document d FULL OUTER JOIN category c on d.cid = c.cid ORDER BY d.did, c.cid",rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel', 11, 'novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel', 11, 'novel'), (3, 22, 2, 'regress_rls_bob', 'my science fiction', 22, 'science fiction'), (4, 44, 1, 'regress_rls_bob', 'my first manga', 44, 'manga'), (5, 44, 2, 'regress_rls_bob', 'my second manga', 44, 'manga'), (6, 22, 1, 'regress_rls_carol', 'great science fiction', 22, 'science fiction'), (7, 33, 2, 'regress_rls_carol', 'great technology book', 33, 'technology'), (8, 44, 1, 'regress_rls_carol', 'great manga', 44, 'manga'), (9, 22, 1, 'regress_rls_dave', 'awesome science fiction', 22, 'science fiction'), (10, 33, 2, 'regress_rls_dave', 'awesome technology book', 33, 'technology'), (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies', 44, 'manga')]"
postgresql,postgresql,SELECT * FROM document WHERE did = 8,rowsecurity.sql,SAME,,"[(8, 44, 1, 'regress_rls_carol', 'great manga')]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document,rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel'), (3, 22, 2, 'regress_rls_bob', 'my science fiction'), (4, 44, 1, 'regress_rls_bob', 'my first manga'), (5, 44, 2, 'regress_rls_bob', 'my second manga'), (6, 22, 1, 'regress_rls_carol', 'great science fiction'), (7, 33, 2, 'regress_rls_carol', 'great technology book'), (8, 44, 1, 'regress_rls_carol', 'great manga'), (9, 22, 1, 'regress_rls_dave', 'awesome science fiction'), (10, 33, 2, 'regress_rls_dave', 'awesome technology book'), (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies'), (11, 33, 1, 'tester', 'hoge')]"
postgresql,postgresql,SELECT * FROM category,rowsecurity.sql,SAME,,"[(11, 'novel'), (22, 'science fiction'), (33, 'technology'), (44, 'manga')]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document,rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel'), (3, 22, 2, 'regress_rls_bob', 'my science fiction'), (4, 44, 1, 'regress_rls_bob', 'my first manga'), (5, 44, 2, 'regress_rls_bob', 'my second manga'), (6, 22, 1, 'regress_rls_carol', 'great science fiction'), (7, 33, 2, 'regress_rls_carol', 'great technology book'), (8, 44, 1, 'regress_rls_carol', 'great manga'), (9, 22, 1, 'regress_rls_dave', 'awesome science fiction'), (10, 33, 2, 'regress_rls_dave', 'awesome technology book'), (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies'), (11, 33, 1, 'tester', 'hoge')]"
postgresql,postgresql,SELECT * FROM category,rowsecurity.sql,SAME,,"[(11, 'novel'), (22, 'science fiction'), (33, 'technology'), (44, 'manga')]"
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document,rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel'), (3, 22, 2, 'regress_rls_bob', 'my science fiction'), (4, 44, 1, 'regress_rls_bob', 'my first manga'), (5, 44, 2, 'regress_rls_bob', 'my second manga'), (6, 22, 1, 'regress_rls_carol', 'great science fiction'), (7, 33, 2, 'regress_rls_carol', 'great technology book'), (8, 44, 1, 'regress_rls_carol', 'great manga'), (9, 22, 1, 'regress_rls_dave', 'awesome science fiction'), (10, 33, 2, 'regress_rls_dave', 'awesome technology book'), (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies'), (11, 33, 1, 'tester', 'hoge')]"
postgresql,postgresql,SELECT * FROM category,rowsecurity.sql,SAME,,"[(11, 'novel'), (22, 'science fiction'), (33, 'technology'), (44, 'manga')]"
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document,rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel'), (3, 22, 2, 'regress_rls_bob', 'my science fiction'), (4, 44, 1, 'regress_rls_bob', 'my first manga'), (5, 44, 2, 'regress_rls_bob', 'my second manga'), (6, 22, 1, 'regress_rls_carol', 'great science fiction'), (7, 33, 2, 'regress_rls_carol', 'great technology book'), (8, 44, 1, 'regress_rls_carol', 'great manga'), (9, 22, 1, 'regress_rls_dave', 'awesome science fiction'), (10, 33, 2, 'regress_rls_dave', 'awesome technology book'), (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies'), (11, 33, 1, 'tester', 'hoge')]"
postgresql,postgresql,SELECT * FROM category,rowsecurity.sql,SAME,,"[(11, 'novel'), (22, 'science fiction'), (33, 'technology'), (44, 'manga')]"
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document,rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel'), (3, 22, 2, 'regress_rls_bob', 'my science fiction'), (4, 44, 1, 'regress_rls_bob', 'my first manga'), (5, 44, 2, 'regress_rls_bob', 'my second manga'), (6, 22, 1, 'regress_rls_carol', 'great science fiction'), (7, 33, 2, 'regress_rls_carol', 'great technology book'), (8, 44, 1, 'regress_rls_carol', 'great manga'), (9, 22, 1, 'regress_rls_dave', 'awesome science fiction'), (10, 33, 2, 'regress_rls_dave', 'awesome technology book'), (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies'), (11, 33, 1, 'tester', 'hoge')]"
postgresql,postgresql,SELECT * FROM category,rowsecurity.sql,SAME,,"[(11, 'novel'), (22, 'science fiction'), (33, 'technology'), (44, 'manga')]"
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t1 DROP COLUMN junk1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON t1 TO public,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM t1,rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,"SELECT tableoid::regclass, * FROM t1",rowsecurity.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT *, t1 FROM t1",rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,"SELECT *, t1 FROM t1",rowsecurity.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT *, t1 FROM t1",rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,SELECT * FROM t1 FOR SHARE,rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM t1 FOR SHARE,rowsecurity.sql,SAME,,"[('LockRows',), ('  ->  Seq Scan on t1',)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON part_document TO public,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON part_document_fiction TO public,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON part_document_satire TO public,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON part_document_nonfiction TO public,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_document ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY pp1 ON part_document AS PERMISSIVE     USING (dlevel <= (SELECT seclv FROM uaccount WHERE pguser = current_user)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM pg_policies WHERE schemaname = 'regress_rls_schema' AND tablename like '%part_document%' ORDER BY policyname,rowsecurity.sql,SAME,,"[('regress_rls_schema', 'part_document', 'pp1', 'PERMISSIVE', ['public'], 'ALL', '(dlevel <= ( SELECT uaccount.seclv\n   FROM uaccount\n  WHERE (uaccount.pguser = CURRENT_USER)))', None)]"
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_document_satire ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY pp3 ON part_document_satire AS RESTRICTIVE     USING (cid < 55),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER POLICY pp1 ON part_document USING (true),rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY pp1 ON part_document,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM part_document ORDER BY did,rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel'), (3, 99, 2, 'regress_rls_bob', 'my science textbook'), (4, 55, 1, 'regress_rls_bob', 'my first satire'), (5, 99, 2, 'regress_rls_bob', 'my history book'), (6, 11, 1, 'regress_rls_carol', 'great science fiction'), (7, 99, 2, 'regress_rls_carol', 'great technology book'), (8, 55, 2, 'regress_rls_carol', 'great satire'), (9, 11, 1, 'regress_rls_dave', 'awesome science fiction'), (10, 99, 2, 'regress_rls_dave', 'awesome technology book'), (100, 99, 1, 'regress_rls_dave', 'testing pp1r'), (100, 11, 5, 'regress_rls_dave', 'testing pp1'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions')]"
postgresql,postgresql,SELECT * FROM part_document_satire ORDER by did,rowsecurity.sql,SAME,,"[(4, 55, 1, 'regress_rls_bob', 'my first satire'), (8, 55, 2, 'regress_rls_carol', 'great satire'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions')]"
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM part_document ORDER BY did,rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel'), (3, 99, 2, 'regress_rls_bob', 'my science textbook'), (4, 55, 1, 'regress_rls_bob', 'my first satire'), (5, 99, 2, 'regress_rls_bob', 'my history book'), (6, 11, 1, 'regress_rls_carol', 'great science fiction'), (7, 99, 2, 'regress_rls_carol', 'great technology book'), (8, 55, 2, 'regress_rls_carol', 'great satire'), (9, 11, 1, 'regress_rls_dave', 'awesome science fiction'), (10, 99, 2, 'regress_rls_dave', 'awesome technology book'), (100, 99, 1, 'regress_rls_dave', 'testing pp1r'), (100, 11, 5, 'regress_rls_dave', 'testing pp1'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions')]"
postgresql,postgresql,SELECT * FROM part_document_satire ORDER by did,rowsecurity.sql,SAME,,"[(4, 55, 1, 'regress_rls_bob', 'my first satire'), (8, 55, 2, 'regress_rls_carol', 'great satire'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions')]"
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM part_document ORDER by did,rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel'), (3, 99, 2, 'regress_rls_bob', 'my science textbook'), (4, 55, 1, 'regress_rls_bob', 'my first satire'), (5, 99, 2, 'regress_rls_bob', 'my history book'), (6, 11, 1, 'regress_rls_carol', 'great science fiction'), (7, 99, 2, 'regress_rls_carol', 'great technology book'), (8, 55, 2, 'regress_rls_carol', 'great satire'), (9, 11, 1, 'regress_rls_dave', 'awesome science fiction'), (10, 99, 2, 'regress_rls_dave', 'awesome technology book'), (100, 99, 1, 'regress_rls_dave', 'testing pp1r'), (100, 11, 5, 'regress_rls_dave', 'testing pp1'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions')]"
postgresql,postgresql,SELECT * FROM part_document_satire ORDER by did,rowsecurity.sql,SAME,,"[(4, 55, 1, 'regress_rls_bob', 'my first satire'), (8, 55, 2, 'regress_rls_carol', 'great satire'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions')]"
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM part_document ORDER by did,rowsecurity.sql,SAME,,"[(1, 11, 1, 'regress_rls_bob', 'my first novel'), (2, 11, 2, 'regress_rls_bob', 'my second novel'), (3, 99, 2, 'regress_rls_bob', 'my science textbook'), (4, 55, 1, 'regress_rls_bob', 'my first satire'), (5, 99, 2, 'regress_rls_bob', 'my history book'), (6, 11, 1, 'regress_rls_carol', 'great science fiction'), (7, 99, 2, 'regress_rls_carol', 'great technology book'), (8, 55, 2, 'regress_rls_carol', 'great satire'), (9, 11, 1, 'regress_rls_dave', 'awesome science fiction'), (10, 99, 2, 'regress_rls_dave', 'awesome technology book'), (100, 99, 1, 'regress_rls_dave', 'testing pp1r'), (100, 11, 5, 'regress_rls_dave', 'testing pp1'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions')]"
postgresql,postgresql,SELECT * FROM part_document_satire ORDER by did,rowsecurity.sql,SAME,,"[(4, 55, 1, 'regress_rls_bob', 'my first satire'), (8, 55, 2, 'regress_rls_carol', 'great satire'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'), (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions')]"
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY pp3 ON part_document AS RESTRICTIVE     USING ((SELECT dlevel <= seclv FROM uaccount WHERE pguser = current_user)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY d1 ON dependent FOR ALL     TO PUBLIC     USING (x = (SELECT d.x FROM dependee d WHERE d.y = y)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM dependent,rowsecurity.sql,SAME,,"[('Seq Scan on dependent',)]"
postgresql,postgresql,CREATE POLICY r1 ON rec1 USING (x = (SELECT r.x FROM rec1 r WHERE y = r.y)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rec1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rec1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER POLICY r1 ON rec1 USING (x = (SELECT a FROM rec2 WHERE b = y)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY r2 ON rec2 USING (a = (SELECT x FROM rec1 WHERE y = b)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rec2 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rec1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rec1v AS SELECT * FROM rec1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rec2v AS SELECT * FROM rec2,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER POLICY r1 ON rec1 USING (x = (SELECT a FROM rec2v WHERE b = y)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER POLICY r2 ON rec2 USING (a = (SELECT x FROM rec1v WHERE y = b)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rec1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"DROP VIEW rec1v, rec2v CASCADE",rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rec1v WITH (security_barrier) AS SELECT * FROM rec1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rec2v WITH (security_barrier) AS SELECT * FROM rec2,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY r1 ON rec1 USING (x = (SELECT a FROM rec2v WHERE b = y)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY r2 ON rec2 USING (a = (SELECT x FROM rec1v WHERE y = b)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rec1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON s1 USING (a in (select x from s2 where y like '%2f%')),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON s2 USING (x in (select a from s1 where b like '%22%')),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON s1 FOR INSERT WITH CHECK (a = (SELECT a FROM s1)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE s1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE s2 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v2 AS SELECT * FROM s2 WHERE y like '%af%',rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p3 on s1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER POLICY p2 ON s2 USING (x % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER POLICY p1 ON s1 USING (a in (select x from v2)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,"SELECT (SELECT x FROM s1 LIMIT 1) xx, * FROM s2 WHERE y like '%28%'",rowsecurity.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT (SELECT x FROM s1 LIMIT 1) xx, * FROM s2 WHERE y like '%28%'",rowsecurity.sql,SAME,,"[('Seq Scan on s2',), (""  Filter: (y ~~ '%28%'::text)"",), ('  SubPlan 1',), ('    ->  Limit',), ('          ->  Seq Scan on s1',)]"
postgresql,postgresql,ALTER POLICY p2 ON s2 USING (x in (select a from s1 where b like '%d2%')),rowsecurity.sql,SAME,,[]
postgresql,postgresql,PREPARE p1(int) AS SELECT * FROM t1 WHERE a <= $1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXECUTE p1(2),rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) EXECUTE p1(2),rowsecurity.sql,SAME,,"[('Seq Scan on t1',), ('  Filter: (a <= 2)',)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXECUTE p1(2),rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) EXECUTE p1(2),rowsecurity.sql,SAME,,"[('Seq Scan on t1',), ('  Filter: (a <= 2)',)]"
postgresql,postgresql,PREPARE p2(int) AS SELECT * FROM t1 WHERE a = $1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXECUTE p2(2),rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) EXECUTE p2(2),rowsecurity.sql,SAME,,"[('Seq Scan on t1',), ('  Filter: (a = 2)',)]"
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXECUTE p2(2),rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) EXECUTE p2(2),rowsecurity.sql,SAME,,"[('Seq Scan on t1',), ('  Filter: (a = 2)',)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM t1 ORDER BY a,b",rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON b1 USING (a % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE b1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW bv1 WITH (security_barrier) AS SELECT * FROM b1 WHERE a > 0 WITH CHECK OPTION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM b1,rowsecurity.sql,SAME,,"[(11, 'xxx'), (12, 'xxx')]"
postgresql,postgresql,CREATE POLICY p1 ON document FOR SELECT USING (true),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON document FOR INSERT WITH CHECK (dauthor = current_user),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON document FOR UPDATE   USING (cid = (SELECT cid from category WHERE cname = 'novel'))   WITH CHECK (dauthor = current_user),rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document WHERE did = 2,rowsecurity.sql,SAME,,"[(2, 11, 2, 'regress_rls_bob', 'my second novel')]"
postgresql,postgresql,DROP POLICY p1 ON document,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p2 ON document,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p3 ON document,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3_with_default ON document FOR UPDATE   USING (cid = (SELECT cid from category WHERE cname = 'novel')),rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p3_with_default ON document,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3_with_all ON document FOR ALL   USING (cid = (SELECT cid from category WHERE cname = 'novel'))   WITH CHECK (dauthor = current_user),rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p3_with_all ON document,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE document ADD COLUMN dnotes text DEFAULT '',rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON document FOR SELECT USING (true),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON document FOR INSERT WITH CHECK (dauthor = current_user),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON document FOR UPDATE   USING (cid = (SELECT cid from category WHERE cname = 'novel'))   WITH CHECK (dlevel > 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p4 ON document FOR DELETE   USING (cid = (SELECT cid from category WHERE cname = 'manga')),rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document,rowsecurity.sql,SAME,,"[(3, 22, 2, 'regress_rls_bob', 'my science fiction', ''), (5, 44, 2, 'regress_rls_bob', 'my second manga', ''), (6, 22, 1, 'regress_rls_carol', 'great science fiction', ''), (7, 33, 2, 'regress_rls_carol', 'great technology book', ''), (8, 44, 1, 'regress_rls_carol', 'great manga', ''), (9, 22, 1, 'regress_rls_dave', 'awesome science fiction', ''), (10, 33, 2, 'regress_rls_dave', 'awesome technology book', ''), (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies', ''), (11, 33, 1, 'tester', 'hoge', ''), (33, 22, 1, 'regress_rls_bob', 'Some novel, replaces sci-fi', ''), (78, 33, 1, 'regress_rls_bob', 'some technology novel', ''), (79, 33, 1, 'regress_rls_bob', 'technology book, can only insert', ''), (2, 33, 2, 'regress_rls_carol', 'my first novel', ''), (80, 11, 1, 'regress_rls_carol', 'my first novel', ''), (4, 44, 1, 'regress_rls_bob', 'my first novel', ''), (1, 11, 1, 'regress_rls_carol', 'my first novel', '')]"
postgresql,postgresql,"MERGE INTO document d USING (SELECT 1 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge1 ', dlevel = 0",rowsecurity.sql,SAME,,[]
postgresql,postgresql,MERGE INTO document d USING (SELECT 1 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge2 ',rowsecurity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO document d USING (SELECT 1 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge3 ', dlevel = 1",rowsecurity.sql,SAME,,[]
postgresql,postgresql,MERGE INTO document d USING (SELECT 3 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge ',rowsecurity.sql,SAME,,[]
postgresql,postgresql,MERGE INTO document d USING (SELECT 3 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	DELETE,rowsecurity.sql,SAME,,[]
postgresql,postgresql,MERGE INTO document d USING (SELECT 4 as sdid) s ON did = s.sdid WHEN MATCHED AND dnotes = '' THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge ' WHEN MATCHED THEN 	DELETE,rowsecurity.sql,SAME,,[]
postgresql,postgresql,MERGE INTO document d USING (SELECT 4 as sdid) s ON did = s.sdid WHEN MATCHED AND dnotes <> '' THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge ' WHEN MATCHED THEN 	DELETE,rowsecurity.sql,SAME,,[]
postgresql,postgresql,MERGE INTO document d USING (SELECT 4 as sdid) s ON did = s.sdid WHEN MATCHED AND dnotes <> '' THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge ' WHEN MATCHED THEN 	DO NOTHING,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document WHERE did = 4,rowsecurity.sql,SAME,,"[(4, 44, 1, 'regress_rls_bob', 'my first novel', ' notes added by merge  notes added by merge  notes added by merge ')]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,MERGE INTO document d USING (SELECT 4 as sdid) s ON did = s.sdid WHEN MATCHED AND dnotes <> '' THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge ' WHEN MATCHED THEN 	DELETE,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO document d USING (SELECT 12 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	DELETE WHEN NOT MATCHED THEN 	INSERT VALUES (12, 11, 1, 'regress_rls_dave', 'another novel')",rowsecurity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO document d USING (SELECT 12 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	DELETE WHEN NOT MATCHED THEN 	INSERT VALUES (12, 11, 1, 'regress_rls_bob', 'another novel')",rowsecurity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO document d USING (SELECT 1 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge4 ' WHEN NOT MATCHED THEN 	INSERT VALUES (12, 11, 1, 'regress_rls_bob', 'another novel')",rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p1 ON document,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON document FOR SELECT   USING (cid = (SELECT cid from category WHERE cname = 'novel')),rowsecurity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO document d USING (SELECT 7 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge5 ' WHEN NOT MATCHED THEN 	INSERT VALUES (12, 11, 1, 'regress_rls_bob', 'another novel')",rowsecurity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO document d USING (SELECT 1 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge6 ', 			   cid = (SELECT cid from category WHERE cname = 'technology')",rowsecurity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO document d USING (SELECT 1 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge7 ', 			   cid = (SELECT cid from category WHERE cname = 'novel')",rowsecurity.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO document d USING (SELECT 13 as sdid) s ON did = s.sdid WHEN MATCHED THEN 	UPDATE SET dnotes = dnotes || ' notes added by merge8 ' WHEN NOT MATCHED THEN 	INSERT VALUES (13, 44, 1, 'regress_rls_bob', 'new manga')",rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document WHERE did = 13,rowsecurity.sql,SAME,,"[(13, 44, 1, 'regress_rls_bob', 'new manga', '')]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p1 ON document,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM document,rowsecurity.sql,SAME,,"[(5, 44, 2, 'regress_rls_bob', 'my second manga', ''), (6, 22, 1, 'regress_rls_carol', 'great science fiction', ''), (8, 44, 1, 'regress_rls_carol', 'great manga', ''), (9, 22, 1, 'regress_rls_dave', 'awesome science fiction', ''), (10, 33, 2, 'regress_rls_dave', 'awesome technology book', ''), (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies', ''), (11, 33, 1, 'tester', 'hoge', ''), (33, 22, 1, 'regress_rls_bob', 'Some novel, replaces sci-fi', ''), (78, 33, 1, 'regress_rls_bob', 'some technology novel', ''), (79, 33, 1, 'regress_rls_bob', 'technology book, can only insert', ''), (2, 33, 2, 'regress_rls_carol', 'my first novel', ''), (80, 11, 1, 'regress_rls_carol', 'my first novel', ''), (4, 44, 1, 'regress_rls_bob', 'my first novel', ' notes added by merge  notes added by merge  notes added by merge  notes added by merge '), (7, 33, 2, 'regress_rls_carol', 'great technology book', ' notes added by merge5 '), (1, 11, 1, 'regress_rls_carol', 'my first novel', ' notes added by merge1  notes added by merge2  notes added by merge3  notes added by merge4  notes added by merge6  notes added by merge7 '), (13, 44, 1, 'regress_rls_bob', 'new manga', '')]"
postgresql,postgresql,ALTER TABLE z1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON z1 AS RESTRICTIVE USING (a NOT IN (SELECT a FROM z1_blacklist)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p3 ON z1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON z1 AS RESTRICTIVE USING (a NOT IN (SELECT a FROM z1_blacklist)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON x1 TO PUBLIC,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p0 ON x1 FOR ALL USING (c = current_user),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON x1 FOR SELECT USING (a % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON x1 FOR INSERT WITH CHECK (a % 2 = 1),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON x1 FOR UPDATE USING (a % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p4 ON x1 FOR DELETE USING (a < 8),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE x1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON y1 FOR ALL USING (a % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON y1 FOR SELECT USING (a > 2),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON y2 FOR ALL USING (a % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE y1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE y2 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON y2 USING (a % 3 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON y2 USING (a % 4 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,PREPARE role_inval AS SELECT * FROM t1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) EXECUTE role_inval,rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) EXECUTE role_inval,rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) EXECUTE role_inval,rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON t1 USING (a % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,WITH cte1 AS (UPDATE t1 SET a = a + 1 RETURNING *) SELECT * FROM cte1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,WITH cte1 AS (UPDATE t1 SET a = a RETURNING *) SELECT * FROM cte1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"SELECT polname, relname     FROM pg_policy pol     JOIN pg_class pc ON (pc.oid = pol.polrelid)     WHERE relname = 't1'",rowsecurity.sql,SAME,,"[('p1', 't1')]"
postgresql,postgresql,ALTER POLICY p1 ON t1 RENAME TO p2,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"SELECT polname, relname     FROM pg_policy pol     JOIN pg_class pc ON (pc.oid = pol.polrelid)     WHERE relname = 't1'",rowsecurity.sql,SAME,,"[('p2', 't1')]"
postgresql,postgresql,SELECT * FROM t2,rowsecurity.sql,SAME,,"[(21, 'Fail'), (20, 'Success')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM t2,rowsecurity.sql,SAME,,"[('Seq Scan on t2',)]"
postgresql,postgresql,SELECT * FROM t3,rowsecurity.sql,SAME,,"[(21, 'Fail'), (20, 'Success')]"
postgresql,postgresql,SELECT * INTO t4 FROM t1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t4,rowsecurity.sql,SAME,,"[(21, 'Fail'), (20, 'Success')]"
postgresql,postgresql,CREATE POLICY blog_1 ON blog USING (id % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE blog ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"SELECT id, author, message FROM blog JOIN comment ON id = blog_id",rowsecurity.sql,SAME,,"[(1, 'alice', 'cool blog'), (1, 'alice', 'fun blog'), (2, 'bob', 'who did it?'), (3, 'alice', 'crazy blog'), (4, 'alice', 'insane!'), (5, 'john', 'what?')]"
postgresql,postgresql,"SELECT id, author, message FROM comment JOIN blog ON id = blog_id",rowsecurity.sql,SAME,,"[(1, 'alice', 'cool blog'), (1, 'alice', 'fun blog'), (2, 'bob', 'who did it?'), (3, 'alice', 'crazy blog'), (4, 'alice', 'insane!'), (5, 'john', 'what?')]"
postgresql,postgresql,CREATE POLICY comment_1 ON comment USING (blog_id < 4),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE comment ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"SELECT id, author, message FROM blog JOIN comment ON id = blog_id",rowsecurity.sql,SAME,,"[(1, 'alice', 'cool blog'), (1, 'alice', 'fun blog'), (2, 'bob', 'who did it?'), (3, 'alice', 'crazy blog'), (4, 'alice', 'insane!'), (5, 'john', 'what?')]"
postgresql,postgresql,"SELECT id, author, message FROM comment JOIN blog ON id = blog_id",rowsecurity.sql,SAME,,"[(1, 'alice', 'cool blog'), (1, 'alice', 'fun blog'), (2, 'bob', 'who did it?'), (3, 'alice', 'crazy blog'), (4, 'alice', 'insane!'), (5, 'john', 'what?')]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p2 ON t1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t1,rowsecurity.sql,SAME,,"[(21, 'Fail'), (20, 'Success')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM t1,rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,SELECT * FROM t1,rowsecurity.sql,SAME,,"[(21, 'Fail'), (20, 'Success')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM t1,rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t1,rowsecurity.sql,SAME,,"[(21, 'Fail'), (20, 'Success')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM t1,rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,SELECT * FROM t1,rowsecurity.sql,SAME,,"[(21, 'Fail'), (20, 'Success')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM t1,rowsecurity.sql,SAME,,"[('Seq Scan on t1',)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON copy_t USING (a % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE copy_t ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON copy_rel_to USING (a % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE copy_rel_to ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO OFF,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON current_check TO PUBLIC,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON current_check FOR SELECT USING (currentid % 2 = 0),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON current_check FOR DELETE USING (currentid = 4 AND rlsuser = current_user),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON current_check FOR UPDATE USING (currentid = 4) WITH CHECK (rlsuser = current_user),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE current_check ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM current_check,rowsecurity.sql,SAME,,"[(1, 'abc', 'regress_rls_bob'), (2, 'bcd', 'regress_rls_bob'), (3, 'cde', 'regress_rls_bob'), (4, 'def', 'regress_rls_bob')]"
postgresql,postgresql,UPDATE current_check SET payload = payload || '_new' WHERE currentid = 2 RETURNING *,rowsecurity.sql,SAME,,"[(2, 'bcd_new', 'regress_rls_bob')]"
postgresql,postgresql,BEGIN,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DECLARE current_check_cursor SCROLL CURSOR FOR SELECT * FROM current_check,rowsecurity.sql,SAME,,[]
postgresql,postgresql,FETCH ABSOLUTE 1 FROM current_check_cursor,rowsecurity.sql,SAME,,"[(1, 'abc', 'regress_rls_bob')]"
postgresql,postgresql,UPDATE current_check SET payload = payload || '_new' WHERE CURRENT OF current_check_cursor RETURNING *,rowsecurity.sql,SAME,,"[(1, 'abc_new', 'regress_rls_bob')]"
postgresql,postgresql,FETCH RELATIVE 1 FROM current_check_cursor,rowsecurity.sql,SAME,,"[(3, 'cde', 'regress_rls_bob')]"
postgresql,postgresql,UPDATE current_check SET payload = payload || '_new' WHERE CURRENT OF current_check_cursor RETURNING *,rowsecurity.sql,SAME,,"[(3, 'cde_new', 'regress_rls_bob')]"
postgresql,postgresql,SELECT * FROM current_check,rowsecurity.sql,SAME,,"[(4, 'def', 'regress_rls_bob'), (2, 'bcd_new', 'regress_rls_bob'), (1, 'abc_new', 'regress_rls_bob'), (3, 'cde_new', 'regress_rls_bob')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) UPDATE current_check SET payload = payload WHERE CURRENT OF current_check_cursor,rowsecurity.sql,SAME,,"[('Update on current_check',), ('  ->  Tid Scan on current_check',), ('        TID Cond: CURRENT OF current_check_cursor',)]"
postgresql,postgresql,FETCH ABSOLUTE 1 FROM current_check_cursor,rowsecurity.sql,SAME,,"[(1, 'abc', 'regress_rls_bob')]"
postgresql,postgresql,DELETE FROM current_check WHERE CURRENT OF current_check_cursor RETURNING *,rowsecurity.sql,SAME,,"[(1, 'abc_new', 'regress_rls_bob')]"
postgresql,postgresql,FETCH RELATIVE 1 FROM current_check_cursor,rowsecurity.sql,SAME,,"[(3, 'cde', 'regress_rls_bob')]"
postgresql,postgresql,DELETE FROM current_check WHERE CURRENT OF current_check_cursor RETURNING *,rowsecurity.sql,SAME,,"[(3, 'cde_new', 'regress_rls_bob')]"
postgresql,postgresql,SELECT * FROM current_check,rowsecurity.sql,SAME,,"[(4, 'def', 'regress_rls_bob'), (2, 'bcd_new', 'regress_rls_bob')]"
postgresql,postgresql,COMMIT,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security TO ON,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ANALYZE current_check,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT row_security_active('current_check'),rowsecurity.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT attname, most_common_vals FROM pg_stats   WHERE tablename = 'current_check'   ORDER BY 1",rowsecurity.sql,SAME,,"[('currentid', None), ('payload', None), ('rlsuser', '{regress_rls_bob}')]"
postgresql,postgresql,SELECT row_security_active('current_check'),rowsecurity.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT attname, most_common_vals FROM pg_stats   WHERE tablename = 'current_check'   ORDER BY 1",rowsecurity.sql,SAME,,"[('currentid', None), ('payload', None), ('rlsuser', '{regress_rls_bob}')]"
postgresql,postgresql,BEGIN,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"CREATE POLICY coll_p ON coll_t USING (c < ('foo'::text COLLATE ""C""))",rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE coll_t ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,BEGIN,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,rowsecurity.sql,SAME,,[]
postgresql,postgresql,BEGIN,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON r1 USING (true),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON r2 FOR SELECT USING (true),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON r2 FOR INSERT WITH CHECK (false),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON r2 FOR UPDATE USING (false),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p4 ON r2 FOR DELETE USING (false),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM r1,rowsecurity.sql,SAME,,"[(10,), (20,)]"
postgresql,postgresql,SELECT * FROM r2,rowsecurity.sql,SAME,,"[(10,), (20,)]"
postgresql,postgresql,UPDATE r2 SET a = 2 RETURNING *,rowsecurity.sql,SAME,,"[(2,), (2,), (2,)]"
postgresql,postgresql,DELETE FROM r2 RETURNING *,rowsecurity.sql,SAME,,"[(2,), (2,), (2,)]"
postgresql,postgresql,UPDATE r1 SET a = r2.a + 2 FROM r2 WHERE r1.a = r2.a RETURNING *,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DELETE FROM r1 USING r2 WHERE r1.a = r2.a + 2 RETURNING *,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM r1,rowsecurity.sql,SAME,,"[(10,), (20,)]"
postgresql,postgresql,SELECT * FROM r2,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security = on,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON r1 USING (false),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,TABLE r1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,UPDATE r1 SET a = 1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,TABLE r1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DELETE FROM r1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,TABLE r1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security = off,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security = on,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON r2 USING (false),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP POLICY p1 ON r2,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 NO FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 DISABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DELETE FROM r2,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON r1 USING (false),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,TABLE r1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON r2 USING (false),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DELETE FROM r1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 NO FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,TABLE r2,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON r2 USING (false),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,UPDATE r1 SET a = a+5,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r2 NO FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,TABLE r2,rowsecurity.sql,SAME,,"[(15,), (25,)]"
postgresql,postgresql,SET row_security = on,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON r1 FOR SELECT USING (false),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON r1 FOR INSERT WITH CHECK (true),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,TABLE r1,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security = off,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security = on,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SET row_security = on,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON r1 FOR SELECT USING (a < 20),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON r1 FOR UPDATE USING (a < 20) WITH CHECK (true),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON r1 FOR INSERT WITH CHECK (true),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,UPDATE r1 SET a = 30,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE r1 NO FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,TABLE r1,rowsecurity.sql,SAME,,"[(30,)]"
postgresql,postgresql,UPDATE r1 SET a = 10,rowsecurity.sql,SAME,,[]
postgresql,postgresql,TABLE r1,rowsecurity.sql,SAME,,"[(10,)]"
postgresql,postgresql,ALTER TABLE r1 FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) = 1 FROM pg_depend 				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1') 					 AND refobjid = (SELECT oid FROM pg_class WHERE relname = 'dep2'),rowsecurity.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT count(*) = 0 FROM pg_depend 				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1') 					 AND refobjid = (SELECT oid FROM pg_class WHERE relname = 'dep2'),rowsecurity.sql,SAME,,"[(True,)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rls_tbl ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON rls_tbl USING (EXISTS (SELECT 1 FROM ref_tbl)),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rls_view AS SELECT * FROM rls_tbl,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ref_tbl,rowsecurity.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT * FROM rls_tbl,rowsecurity.sql,SAME,,"[(10,)]"
postgresql,postgresql,SELECT * FROM rls_view,rowsecurity.sql,SAME,,"[(10,)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP VIEW rls_view,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ANALYZE rls_tbl,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rls_tbl ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"CREATE POLICY p1 ON rls_tbl USING (rls_tbl >= ROW(1,1,1))",rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rls_tbl ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rls_tbl FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rls_tbl,rowsecurity.sql,SAME,,"[(10, 20, 30), (20, 30, None)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,alter table rls_t enable row level security,rowsecurity.sql,SAME,,[]
postgresql,postgresql,create function rls_f () returns setof rls_t   stable language sql   as $$ select * from rls_t $$,rowsecurity.sql,SAME,,[]
postgresql,postgresql,"prepare q as select current_user, * from rls_f()",rowsecurity.sql,SAME,,[]
postgresql,postgresql,execute q,rowsecurity.sql,SAME,,"[('tester', 'invisible to bob')]"
postgresql,postgresql,execute q,rowsecurity.sql,SAME,,"[('tester', 'invisible to bob')]"
postgresql,postgresql,RESET ROLE,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION rls_f(),rowsecurity.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rowsecurity.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA regress_rls_schema CASCADE,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA regress_rls_schema,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rls_tbl ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON rls_tbl USING (c1 > 5),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON rls_tbl FOR SELECT USING (c1 <= 3),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON rls_tbl FOR UPDATE USING (c1 <= 3) WITH CHECK (c1 > 5),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p4 ON rls_tbl FOR DELETE USING (c1 <= 3),rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rls_tbl_force ENABLE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rls_tbl_force FORCE ROW LEVEL SECURITY,rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p1 ON rls_tbl_force USING (c1 = 5) WITH CHECK (c1 < 5),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p2 ON rls_tbl_force FOR SELECT USING (c1 = 8),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p3 ON rls_tbl_force FOR UPDATE USING (c1 = 8) WITH CHECK (c1 >= 5),rowsecurity.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY p4 ON rls_tbl_force FOR DELETE USING (c1 = 8),rowsecurity.sql,SAME,,[]
postgresql,postgresql,"create type complex as (r float8, i float8)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"create temp table fullname (first text, last text)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"create type quad as (c1 complex, c2 complex)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"select (1.1,2.2)::complex, row((3.3,4.4),(5.5,null))::quad",rowtypes.sql,SAME,,"[('(1.1,2.2)', '(""(3.3,4.4)"",""(5.5,)"")')]"
postgresql,postgresql,"select row('Joe', 'Blow')::fullname, '(Joe,Blow)'::fullname",rowtypes.sql,SAME,,"[('(Joe,Blow)', '(Joe,Blow)')]"
postgresql,postgresql,"select '(Joe,von Blow)'::fullname, '(Joe,d''Blow)'::fullname",rowtypes.sql,SAME,,"[('(Joe,""von Blow"")', ""(Joe,d'Blow)"")]"
postgresql,postgresql,"select '(Joe,""von""""Blow"")'::fullname, E'(Joe,d\\\\Blow)'::fullname",rowtypes.sql,SAME,,"[('(Joe,""von""""Blow"")', '(Joe,""d\\\\Blow"")')]"
postgresql,postgresql,"select '(Joe,""Blow,Jr"")'::fullname",rowtypes.sql,SAME,,"[('(Joe,""Blow,Jr"")',)]"
postgresql,postgresql,"select '(Joe,)'::fullname",rowtypes.sql,SAME,,"[('(Joe,)',)]"
postgresql,postgresql,"select ' (Joe,Blow)  '::fullname",rowtypes.sql,SAME,,"[('(Joe,Blow)',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('(1,2)', 'complex')",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('(1,2', 'complex')",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('(1,zed)', 'complex')",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('(1,zed)', 'complex')",rowtypes.sql,SAME,,"[('invalid input syntax for type double precision: ""zed""', None, None, '22P02')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('(1,1e400)', 'complex')",rowtypes.sql,SAME,,"[('""1e400"" is out of range for type double precision', None, None, '22003')]"
postgresql,postgresql,"create temp table quadtable(f1 int, q quad)",rowtypes.sql,SAME,,[]
postgresql,postgresql,select * from quadtable,rowtypes.sql,SAME,,"[(1, '(""(3.3,4.4)"",""(5.5,6.6)"")'), (2, '(""(,4.4)"",""(5.5,6.6)"")')]"
postgresql,postgresql,"select f1, (q).c1, (qq.q).c1.i from quadtable qq",rowtypes.sql,SAME,,"[(1, '(3.3,4.4)', 4.4), (2, '(,4.4)', 4.4)]"
postgresql,postgresql,"create temp table people (fn fullname, bd date)",rowtypes.sql,SAME,,[]
postgresql,postgresql,select * from people,rowtypes.sql,SAME,,"[('(Joe,Blow)', datetime.date(1984, 1, 10))]"
postgresql,postgresql,alter table fullname add column suffix text default null,rowtypes.sql,SAME,,[]
postgresql,postgresql,select * from people,rowtypes.sql,SAME,,"[('(Joe,Blow,)', datetime.date(1984, 1, 10))]"
postgresql,postgresql,update people set fn.suffix = 'Jr',rowtypes.sql,SAME,,[]
postgresql,postgresql,select * from people,rowtypes.sql,SAME,,"[('(Joe,Blow,Jr)', datetime.date(1984, 1, 10))]"
postgresql,postgresql,update quadtable set q.c1.r = 12 where f1 = 2,rowtypes.sql,SAME,,[]
postgresql,postgresql,select * from quadtable,rowtypes.sql,SAME,,"[(1, '(""(3.3,4.4)"",""(5.5,6.6)"")'), (44, '(""(55,)"",""(,66)"")'), (2, '(""(12,4.4)"",""(5.5,6.6)"")')]"
postgresql,postgresql,create temp table pp (f1 text),rowtypes.sql,SAME,,[]
postgresql,postgresql,"select (fn).first, substr((fn).last, 1, 20), length((fn).last) from people",rowtypes.sql,SAME,,"[('Joe', 'Blow', 4), ('Jim', 'abcdefghijklabcdefgh', 1200000)]"
postgresql,postgresql,update people set fn.first = 'Jack',rowtypes.sql,SAME,,[]
postgresql,postgresql,"select (fn).first, substr((fn).last, 1, 20), length((fn).last) from people",rowtypes.sql,SAME,,"[('Jack', 'Blow', 4), ('Jack', 'abcdefghijklabcdefgh', 1200000)]"
postgresql,postgresql,"select ROW(1,2) < ROW(1,3) as true",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select ROW(1,2) < ROW(1,1) as false",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select ROW(1,2) < ROW(1,NULL) as null",rowtypes.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ROW(1,2,3) < ROW(1,3,NULL) as true",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select ROW(11,'ABC') < ROW(11,'DEF') as true",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select ROW(11,'ABC') > ROW(11,'DEF') as false",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select ROW(12,'ABC') > ROW(11,'DEF') as true",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select ROW(1,2,3) < ROW(1,NULL,4) as null",rowtypes.sql,SAME,,"[(None,)]"
postgresql,postgresql,"select ROW(1,2,3) = ROW(1,NULL,4) as false",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select ROW(1,2,3) <> ROW(1,NULL,4) as true",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select ROW('ABC','DEF') ~<=~ ROW('DEF','ABC') as true",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select ROW('ABC','DEF') ~>=~ ROW('DEF','ABC') as false",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select ROW(1,2) = ROW(1,2::int8)",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select ROW(1,2) in (ROW(3,4), ROW(1,2))",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select ROW(1,2) in (ROW(3,4), ROW(1,2::int8))",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"create temp table test_table (a text, b text)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"create index on test_table (a,b)",rowtypes.sql,SAME,,[]
postgresql,postgresql,set enable_sort = off,rowtypes.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select a,b from test_table where (a,b) > ('a','a') order by a,b",rowtypes.sql,SAME,,"[('Index Only Scan using test_table_a_b_idx on test_table',), (""  Index Cond: (ROW(a, b) > ROW('a'::text, 'a'::text))"",)]"
postgresql,postgresql,"select a,b from test_table where (a,b) > ('a','a') order by a,b",rowtypes.sql,SAME,,"[('a', 'b'), ('b', 'a')]"
postgresql,postgresql,reset enable_sort,rowtypes.sql,SAME,,[]
postgresql,postgresql,"select (row(1, 2.0)).f1",rowtypes.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select (row(1, 2.0)).f2",rowtypes.sql,SAME,,"[(Decimal('2.0'),)]"
postgresql,postgresql,"select (row(1, 2.0)).*",rowtypes.sql,SAME,,"[(1, Decimal('2.0'))]"
postgresql,postgresql,"select (r).f1 from (select row(1, 2.0) as r) ss",rowtypes.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select (r).* from (select row(1, 2.0) as r) ss",rowtypes.sql,SAME,,"[(1, Decimal('2.0'))]"
postgresql,postgresql,select ROW(),rowtypes.sql,SAME,,"[('()',)]"
postgresql,postgresql,select ROW() IS NULL,rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select array[ row(1,2), row(3,4), row(5,6) ]",rowtypes.sql,SAME,,"[('{""(1,2)"",""(3,4)"",""(5,6)""}',)]"
postgresql,postgresql,"select row(1,1.1) = any (array[ row(7,7.7), row(1,1.1), row(0,0.0) ])",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1,1.1) = any (array[ row(7,7.7), row(1,1.0), row(0,0.0) ])",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"create type cantcompare as (p point, r float8)",rowtypes.sql,SAME,,[]
postgresql,postgresql,create temp table cc (f1 cantcompare),rowtypes.sql,SAME,,[]
postgresql,postgresql,"create type testtype1 as (a int, b int)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"select row(1, 2)::testtype1 < row(1, 3)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 2)::testtype1 <= row(1, 3)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 2)::testtype1 = row(1, 2)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 2)::testtype1 <> row(1, 3)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 3)::testtype1 >= row(1, 2)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 3)::testtype1 > row(1, 2)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 < row(1, -3)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 <= row(1, -3)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 = row(1, -3)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 <> row(1, -2)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -3)::testtype1 >= row(1, -2)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -3)::testtype1 > row(1, -2)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 < row(1, 3)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"create type testtype3 as (a int, b text)",rowtypes.sql,SAME,,[]
postgresql,postgresql,create type testtype5 as (a int),rowtypes.sql,SAME,,[]
postgresql,postgresql,"create type testtype6 as (a int, b point)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"drop type testtype1, testtype3, testtype5, testtype6",rowtypes.sql,SAME,,[]
postgresql,postgresql,"create type testtype1 as (a int, b int)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"select row(1, 2)::testtype1 *< row(1, 3)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 2)::testtype1 *<= row(1, 3)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 2)::testtype1 *= row(1, 2)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 2)::testtype1 *<> row(1, 3)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 3)::testtype1 *>= row(1, 2)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 3)::testtype1 *> row(1, 2)::testtype1",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 *< row(1, -3)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 *<= row(1, -3)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 *= row(1, -3)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 *<> row(1, -2)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -3)::testtype1 *>= row(1, -2)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -3)::testtype1 *> row(1, -2)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, -2)::testtype1 *< row(1, 3)::testtype1",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"create type testtype2 as (a smallint, b bool)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"select row(1, true)::testtype2 *< row(2, true)::testtype2",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(-2, true)::testtype2 *< row(-1, true)::testtype2",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(0, false)::testtype2 *< row(0, true)::testtype2",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(0, false)::testtype2 *<> row(0, true)::testtype2",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"create type testtype3 as (a int, b text)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"select row(1, 'abc')::testtype3 *< row(1, 'abd')::testtype3",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 'abc')::testtype3 *< row(1, 'abcd')::testtype3",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, 'abc')::testtype3 *> row(1, 'abd')::testtype3",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, 'abc')::testtype3 *<> row(1, 'abd')::testtype3",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"create type testtype4 as (a int, b point)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"select row(1, '(1,2)')::testtype4 *< row(1, '(1,3)')::testtype4",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, '(1,2)')::testtype4 *<> row(1, '(1,3)')::testtype4",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,create type testtype5 as (a int),rowtypes.sql,SAME,,[]
postgresql,postgresql,"create type testtype6 as (a int, b point)",rowtypes.sql,SAME,,[]
postgresql,postgresql,"select row(1, '(1,2)')::testtype6 *< row(1, '(1,3)')::testtype6",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select row(1, '(1,2)')::testtype6 *>= row(1, '(1,3)')::testtype6",rowtypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select row(1, '(1,2)')::testtype6 *<> row(1, '(1,3)')::testtype6",rowtypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select q.a, q.b = row(2), q.c = array[row(3)], q.d = row(row(4)) from     unnest(array[row(1, row(2), array[row(3)], row(row(4))),                  row(2, row(3), array[row(4)], row(row(5)))])       as q(a int, b record, c record[], d record)",rowtypes.sql,SAME,,"[(1, True, True, True), (2, False, False, False)]"
postgresql,postgresql,"drop type testtype1, testtype2, testtype3, testtype4, testtype5, testtype6",rowtypes.sql,SAME,,[]
postgresql,postgresql,BEGIN,rowtypes.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE price_input AS (     id INTEGER,     price NUMERIC )",rowtypes.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE price_key AS (     id INTEGER ),rowtypes.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION price_key_from_table(price) RETURNS price_key AS $$     SELECT $1.id $$ LANGUAGE SQL,rowtypes.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION price_key_from_input(price_input) RETURNS price_key AS $$     SELECT $1.id $$ LANGUAGE SQL,rowtypes.sql,SAME,,[]
postgresql,postgresql,"UPDATE price     SET active = true, price = input_prices.price     FROM unnest(ARRAY[(10, 123.00), (11, 99.99)]::price_input[]) input_prices     WHERE price_key_from_table(price.*) = price_key_from_input(input_prices.*)",rowtypes.sql,SAME,,[]
postgresql,postgresql,select * from price,rowtypes.sql,SAME,,"[(1, False, Decimal('42')), (10, True, Decimal('123.00')), (11, True, Decimal('99.99'))]"
postgresql,postgresql,rollback,rowtypes.sql,SAME,,[]
postgresql,postgresql,"create temp table compos (f1 int, f2 text)",rowtypes.sql,SAME,,[]
postgresql,postgresql,select * from compos,rowtypes.sql,SAME,,[]
postgresql,postgresql,select cast (fullname as text) from fullname,rowtypes.sql,SAME,,[]
postgresql,postgresql,select fullname::text from fullname,rowtypes.sql,SAME,,[]
postgresql,postgresql,"select cast (row('Jim', 'Beam') as text)",rowtypes.sql,SAME,,"[('(Jim,Beam)',)]"
postgresql,postgresql,"select (row('Jim', 'Beam'))::text",rowtypes.sql,SAME,,"[('(Jim,Beam)',)]"
postgresql,postgresql,select f.last from fullname f,rowtypes.sql,SAME,,"[('Blow',)]"
postgresql,postgresql,select last(f) from fullname f,rowtypes.sql,SAME,,"[('Blow',)]"
postgresql,postgresql,create function longname(fullname) returns text language sql as $$select $1.first || ' ' || $1.last$$,rowtypes.sql,SAME,,[]
postgresql,postgresql,select f.longname from fullname f,rowtypes.sql,SAME,,"[('Joe Blow',)]"
postgresql,postgresql,select longname(f) from fullname f,rowtypes.sql,SAME,,"[('Joe Blow',)]"
postgresql,postgresql,alter table fullname add column longname text,rowtypes.sql,SAME,,[]
postgresql,postgresql,select f.longname from fullname f,rowtypes.sql,SAME,,"[(None,)]"
postgresql,postgresql,select longname(f) from fullname f,rowtypes.sql,SAME,,"[('Joe Blow',)]"
postgresql,postgresql,"explain (verbose, costs off) select r, r is null as isnull, r is not null as isnotnull from (values (1,row(1,2)), (1,row(null,null)), (1,null),              (null,row(1,2)), (null,row(null,null)), (null,null) ) r(a,b)",rowtypes.sql,SAME,,"[('Values Scan on ""*VALUES*""',), ('  Output: ROW(""*VALUES*"".column1, ""*VALUES*"".column2), ((""*VALUES*"".column1 IS NULL) AND (""*VALUES*"".column2 IS NOT DISTINCT FROM NULL)), ((""*VALUES*"".column1 IS NOT NULL) AND (""*VALUES*"".column2 IS DISTINCT FROM NULL))',)]"
postgresql,postgresql,"select r, r is null as isnull, r is not null as isnotnull from (values (1,row(1,2)), (1,row(null,null)), (1,null),              (null,row(1,2)), (null,row(null,null)), (null,null) ) r(a,b)",rowtypes.sql,SAME,,"[('(1,""(1,2)"")', False, True), ('(1,""(,)"")', False, True), ('(1,)', False, False), ('(,""(1,2)"")', False, False), ('(,""(,)"")', False, False), ('(,)', True, False)]"
postgresql,postgresql,"explain (verbose, costs off) with r(a,b) as materialized   (values (1,row(1,2)), (1,row(null,null)), (1,null),           (null,row(1,2)), (null,row(null,null)), (null,null) ) select r, r is null as isnull, r is not null as isnotnull from r",rowtypes.sql,SAME,,"[('CTE Scan on r',), ('  Output: r.*, (r.* IS NULL), (r.* IS NOT NULL)',), ('  CTE r',), ('    ->  Values Scan on ""*VALUES*""',), ('          Output: ""*VALUES*"".column1, ""*VALUES*"".column2',)]"
postgresql,postgresql,"with r(a,b) as materialized   (values (1,row(1,2)), (1,row(null,null)), (1,null),           (null,row(1,2)), (null,row(null,null)), (null,null) ) select r, r is null as isnull, r is not null as isnotnull from r",rowtypes.sql,SAME,,"[('(1,""(1,2)"")', False, True), ('(1,""(,)"")', False, True), ('(1,)', False, False), ('(,""(1,2)"")', False, False), ('(,""(,)"")', False, False), ('(,)', True, False)]"
postgresql,postgresql,"explain (verbose, costs off) with cte(c) as materialized (select row(1, 2)),      cte2(c) as (select * from cte) select * from cte2 as t where (select * from (select c as c1) s        where (select (c1).f1 > 0)) is not null",rowtypes.sql,SAME,,"[('CTE Scan on cte',), ('  Output: cte.c',), ('  Filter: ((SubPlan 3) IS NOT NULL)',), ('  CTE cte',), ('    ->  Result',), (""          Output: '(1,2)'::record"",), ('  SubPlan 3',), ('    ->  Result',), ('          Output: cte.c',), ('          One-Time Filter: $2',), ('          InitPlan 2 (returns $2)',), ('            ->  Result',), ('                  Output: ((cte.c).f1 > 0)',)]"
postgresql,postgresql,"with cte(c) as materialized (select row(1, 2)),      cte2(c) as (select * from cte) select * from cte2 as t where (select * from (select c as c1) s        where (select (c1).f1 > 0)) is not null",rowtypes.sql,SAME,,"[('(1,2)',)]"
postgresql,postgresql,"create view composite_v as with cte(c) as materialized (select row(1, 2)),      cte2(c) as (select * from cte) select 1 as one from cte2 as t where (select * from (select c as c1) s        where (select (c1).f1 > 0)) is not null",rowtypes.sql,SAME,,[]
postgresql,postgresql,"select pg_get_viewdef('composite_v', true)",rowtypes.sql,SAME,,"[(' WITH cte(c) AS MATERIALIZED (\n         SELECT ROW(1, 2) AS ""row""\n        ), cte2(c) AS (\n         SELECT cte.c\n           FROM cte\n        )\n SELECT 1 AS one\n   FROM cte2 t\n  WHERE (( SELECT s.c1\n           FROM ( SELECT t.c AS c1) s\n          WHERE ( SELECT (s.c1).f1 > 0))) IS NOT NULL;',)]"
postgresql,postgresql,drop view composite_v,rowtypes.sql,SAME,,[]
postgresql,postgresql,"SELECT (d).a, (d).b FROM (SELECT compositetable AS d FROM compositetable) s",rowtypes.sql,SAME,,"[('fa', 'fb')]"
postgresql,postgresql,SELECT (NULL::compositetable).a,rowtypes.sql,SAME,,"[(None,)]"
postgresql,postgresql,create view rtest_v1 as select * from rtest_t1,rules.sql,SAME,,[]
postgresql,postgresql,"create rule rtest_v1_upd as on update to rtest_v1 do instead 	update rtest_t1 set a = new.a, b = new.b 	where a = old.a",rules.sql,SAME,,[]
postgresql,postgresql,create rule rtest_v1_del as on delete to rtest_v1 do instead 	delete from rtest_t1 where a = old.a,rules.sql,SAME,,[]
postgresql,postgresql,COMMENT ON RULE rtest_v1_del ON rtest_v1 IS 'delete rule',rules.sql,SAME,,[]
postgresql,postgresql,COMMENT ON RULE rtest_v1_del ON rtest_v1 IS NULL,rules.sql,SAME,,[]
postgresql,postgresql,create rule rtest_pers_upd as on update to rtest_person do also 	update rtest_admin set pname = new.pname where pname = old.pname,rules.sql,SAME,,[]
postgresql,postgresql,create rule rtest_pers_del as on delete to rtest_person do also 	delete from rtest_admin where pname = old.pname,rules.sql,SAME,,[]
postgresql,postgresql,create sequence rtest_seq,rules.sql,SAME,,[]
postgresql,postgresql,create rule rtest_nothn_r1 as on insert to rtest_nothn1 	where new.a >= 10 and new.a < 20 do instead nothing,rules.sql,SAME,,[]
postgresql,postgresql,create rule rtest_nothn_r2 as on insert to rtest_nothn1 	where new.a >= 30 and new.a < 40 do instead nothing,rules.sql,SAME,,[]
postgresql,postgresql,create rule rtest_nothn_r4 as on insert to rtest_nothn2 	do instead nothing,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 11), (2, 12)]"
postgresql,postgresql,delete from rtest_v1 where a = 1,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(2, 12)]"
postgresql,postgresql,delete from rtest_v1 where b = 12,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 11)]"
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 11), (2, 12), (2, 13)]"
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 11), (2, 12), (2, 13)]"
postgresql,postgresql,delete from rtest_v1,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (2, 22), (3, 23)]"
postgresql,postgresql,delete from rtest_v1,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (2, 22), (3, 23)]"
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (2, 22), (3, 23), (1, None), (2, None), (3, None), (4, None), (5, None)]"
postgresql,postgresql,select * from rtest_v1 where b isnull,rules.sql,SAME,,"[(1, None), (2, None), (3, None), (4, None), (5, None)]"
postgresql,postgresql,update rtest_t1 set a = a + 10 where b isnull,rules.sql,SAME,,[]
postgresql,postgresql,delete from rtest_v1 where b isnull,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (2, 22), (3, 23)]"
postgresql,postgresql,update rtest_v1 set b = 42 where a = 2,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (3, 23), (2, 42)]"
postgresql,postgresql,update rtest_v1 set b = 99 where b = 42,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (3, 23), (2, 99)]"
postgresql,postgresql,update rtest_v1 set b = 88 where b < 50,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(2, 99), (1, 88), (3, 88)]"
postgresql,postgresql,delete from rtest_v1,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 31), (2, 32), (3, 33)]"
postgresql,postgresql,update rtest_v1 set b = rtest_t2.b from rtest_t2 where rtest_v1.a = rtest_t2.a,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (2, 22), (3, 23)]"
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (2, 22), (3, 23), (1, 31), (2, 32), (3, 33), (4, 34), (5, 35)]"
postgresql,postgresql,update rtest_t1 set a = a + 10 where b > 30,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (2, 22), (3, 23), (11, 31), (12, 32), (13, 33), (14, 34), (15, 35)]"
postgresql,postgresql,update rtest_v1 set a = rtest_t3.a + 20 from rtest_t3 where rtest_v1.b = rtest_t3.b,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_v1,rules.sql,SAME,,"[(1, 21), (2, 22), (3, 23), (21, 31), (22, 32), (23, 33), (24, 34), (25, 35)]"
postgresql,postgresql,update rtest_system set sysname = 'pluto' where sysname = 'neptun',rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_interface,rules.sql,SAME,,"[('orion', 'eth0'), ('orion', 'eth1'), ('notjw', 'eth0'), ('neptun', 'eth0')]"
postgresql,postgresql,select * from rtest_admin,rules.sql,SAME,,"[('jw', 'orion'), ('jw', 'notjw'), ('bm', 'neptun')]"
postgresql,postgresql,update rtest_person set pname = 'jwieck' where pdesc = 'Jan Wieck',rules.sql,SAME,,[]
postgresql,postgresql,"select * from rtest_admin order by pname, sysname",rules.sql,SAME,,"[('bm', 'neptun'), ('jwieck', 'notjw'), ('jwieck', 'orion')]"
postgresql,postgresql,delete from rtest_system where sysname = 'orion',rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_interface,rules.sql,SAME,,"[('orion', 'eth0'), ('orion', 'eth1'), ('notjw', 'eth0'), ('neptun', 'eth0')]"
postgresql,postgresql,select * from rtest_admin,rules.sql,SAME,,"[('bm', 'neptun'), ('jwieck', 'orion'), ('jwieck', 'notjw')]"
postgresql,postgresql,update rtest_emp set ename = 'wiecx' where ename = 'wiecc',rules.sql,SAME,,[]
postgresql,postgresql,"update rtest_emp set ename = 'wieck', salary = '6000.00' where ename = 'wiecx'",rules.sql,SAME,,[]
postgresql,postgresql,update rtest_emp set salary = '7000.00' where ename = 'wieck',rules.sql,SAME,,[]
postgresql,postgresql,delete from rtest_emp where ename = 'gates',rules.sql,SAME,,[]
postgresql,postgresql,"select ename, who = current_user as ""matches user"", action, newsal, oldsal from rtest_emplog order by ename, action, newsal",rules.sql,SAME,,"[('gates               ', True, 'fired     ', Decimal('0.00'), Decimal('80000.00')), ('gates               ', True, 'hired     ', Decimal('80000.00'), Decimal('0.00')), ('wiecc               ', True, 'hired     ', Decimal('5000.00'), Decimal('0.00')), ('wieck               ', True, 'honored   ', Decimal('6000.00'), Decimal('5000.00')), ('wieck               ', True, 'honored   ', Decimal('7000.00'), Decimal('6000.00'))]"
postgresql,postgresql,"select ename, who = current_user as ""matches user"", action, newsal, oldsal from rtest_emplog order by ename, action, newsal",rules.sql,SAME,,"[('gates               ', True, 'fired     ', Decimal('0.00'), Decimal('80000.00')), ('gates               ', True, 'hired     ', Decimal('80000.00'), Decimal('0.00')), ('maier               ', True, 'hired     ', Decimal('5000.00'), Decimal('0.00')), ('mayr                ', True, 'hired     ', Decimal('6000.00'), Decimal('0.00')), ('meyer               ', True, 'hired     ', Decimal('4000.00'), Decimal('0.00')), ('wiecc               ', True, 'hired     ', Decimal('5000.00'), Decimal('0.00')), ('wieck               ', True, 'honored   ', Decimal('6000.00'), Decimal('5000.00')), ('wieck               ', True, 'honored   ', Decimal('7000.00'), Decimal('6000.00'))]"
postgresql,postgresql,update rtest_empmass set salary = salary + '1000.00',rules.sql,SAME,,[]
postgresql,postgresql,update rtest_emp set salary = rtest_empmass.salary from rtest_empmass where rtest_emp.ename = rtest_empmass.ename,rules.sql,SAME,,[]
postgresql,postgresql,"select ename, who = current_user as ""matches user"", action, newsal, oldsal from rtest_emplog order by ename, action, newsal",rules.sql,SAME,,"[('gates               ', True, 'fired     ', Decimal('0.00'), Decimal('80000.00')), ('gates               ', True, 'hired     ', Decimal('80000.00'), Decimal('0.00')), ('maier               ', True, 'hired     ', Decimal('5000.00'), Decimal('0.00')), ('maier               ', True, 'honored   ', Decimal('6000.00'), Decimal('5000.00')), ('mayr                ', True, 'hired     ', Decimal('6000.00'), Decimal('0.00')), ('mayr                ', True, 'honored   ', Decimal('7000.00'), Decimal('6000.00')), ('meyer               ', True, 'hired     ', Decimal('4000.00'), Decimal('0.00')), ('meyer               ', True, 'honored   ', Decimal('5000.00'), Decimal('4000.00')), ('wiecc               ', True, 'hired     ', Decimal('5000.00'), Decimal('0.00')), ('wieck               ', True, 'honored   ', Decimal('6000.00'), Decimal('5000.00')), ('wieck               ', True, 'honored   ', Decimal('7000.00'), Decimal('6000.00'))]"
postgresql,postgresql,delete from rtest_emp using rtest_empmass where rtest_emp.ename = rtest_empmass.ename,rules.sql,SAME,,[]
postgresql,postgresql,"select ename, who = current_user as ""matches user"", action, newsal, oldsal from rtest_emplog order by ename, action, newsal",rules.sql,SAME,,"[('gates               ', True, 'fired     ', Decimal('0.00'), Decimal('80000.00')), ('gates               ', True, 'hired     ', Decimal('80000.00'), Decimal('0.00')), ('maier               ', True, 'fired     ', Decimal('0.00'), Decimal('6000.00')), ('maier               ', True, 'hired     ', Decimal('5000.00'), Decimal('0.00')), ('maier               ', True, 'honored   ', Decimal('6000.00'), Decimal('5000.00')), ('mayr                ', True, 'fired     ', Decimal('0.00'), Decimal('7000.00')), ('mayr                ', True, 'hired     ', Decimal('6000.00'), Decimal('0.00')), ('mayr                ', True, 'honored   ', Decimal('7000.00'), Decimal('6000.00')), ('meyer               ', True, 'fired     ', Decimal('0.00'), Decimal('5000.00')), ('meyer               ', True, 'hired     ', Decimal('4000.00'), Decimal('0.00')), ('meyer               ', True, 'honored   ', Decimal('5000.00'), Decimal('4000.00')), ('wiecc               ', True, 'hired     ', Decimal('5000.00'), Decimal('0.00')), ('wieck               ', True, 'honored   ', Decimal('6000.00'), Decimal('5000.00')), ('wieck               ', True, 'honored   ', Decimal('7000.00'), Decimal('6000.00'))]"
postgresql,postgresql,select * from rtest_t4,rules.sql,SAME,,"[(1, 'Record should go to rtest_t4'), (2, 'Record should go to rtest_t4'), (20, 'Record should go to rtest_t4 and t6'), (26, 'Record should go to rtest_t4 and t8'), (28, 'Record should go to rtest_t4 and t8'), (30, 'Record should go to rtest_t4'), (40, 'Record should go to rtest_t4')]"
postgresql,postgresql,select * from rtest_t5,rules.sql,SAME,,"[(10, 'Record should go to rtest_t5'), (15, 'Record should go to rtest_t5'), (19, 'Record should go to rtest_t5 and t7')]"
postgresql,postgresql,select * from rtest_t6,rules.sql,SAME,,"[(20, 'Record should go to rtest_t4 and t6')]"
postgresql,postgresql,select * from rtest_t7,rules.sql,SAME,,"[(19, 'Record should go to rtest_t5 and t7')]"
postgresql,postgresql,select * from rtest_t8,rules.sql,SAME,,"[(26, 'Record should go to rtest_t4 and t8'), (28, 'Record should go to rtest_t4 and t8')]"
postgresql,postgresql,delete from rtest_t4,rules.sql,SAME,,[]
postgresql,postgresql,delete from rtest_t5,rules.sql,SAME,,[]
postgresql,postgresql,delete from rtest_t6,rules.sql,SAME,,[]
postgresql,postgresql,delete from rtest_t7,rules.sql,SAME,,[]
postgresql,postgresql,delete from rtest_t8,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_t4,rules.sql,SAME,,"[(1, 'Record should go to rtest_t4'), (2, 'Record should go to rtest_t4')]"
postgresql,postgresql,select * from rtest_t5,rules.sql,SAME,,"[(10, 'Record should go to rtest_t5'), (15, 'Record should go to rtest_t5'), (19, 'Record should go to rtest_t5 and t7')]"
postgresql,postgresql,select * from rtest_t6,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_t7,rules.sql,SAME,,"[(19, 'Record should go to rtest_t5 and t7')]"
postgresql,postgresql,select * from rtest_t8,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_t4,rules.sql,SAME,,"[(1, 'Record should go to rtest_t4'), (2, 'Record should go to rtest_t4'), (26, 'Record should go to rtest_t4 and t8'), (28, 'Record should go to rtest_t4 and t8')]"
postgresql,postgresql,select * from rtest_t5,rules.sql,SAME,,"[(10, 'Record should go to rtest_t5'), (15, 'Record should go to rtest_t5'), (19, 'Record should go to rtest_t5 and t7')]"
postgresql,postgresql,select * from rtest_t6,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_t7,rules.sql,SAME,,"[(19, 'Record should go to rtest_t5 and t7')]"
postgresql,postgresql,select * from rtest_t8,rules.sql,SAME,,"[(26, 'Record should go to rtest_t4 and t8'), (28, 'Record should go to rtest_t4 and t8')]"
postgresql,postgresql,select * from rtest_t4,rules.sql,SAME,,"[(1, 'Record should go to rtest_t4'), (2, 'Record should go to rtest_t4'), (26, 'Record should go to rtest_t4 and t8'), (28, 'Record should go to rtest_t4 and t8'), (21, 'Record should go to rtest_t4 and t6'), (31, 'Record should go to rtest_t4'), (41, 'Record should go to rtest_t4')]"
postgresql,postgresql,select * from rtest_t5,rules.sql,SAME,,"[(10, 'Record should go to rtest_t5'), (15, 'Record should go to rtest_t5'), (19, 'Record should go to rtest_t5 and t7')]"
postgresql,postgresql,select * from rtest_t6,rules.sql,SAME,,"[(21, 'Record should go to rtest_t4 and t6')]"
postgresql,postgresql,select * from rtest_t7,rules.sql,SAME,,"[(19, 'Record should go to rtest_t5 and t7')]"
postgresql,postgresql,select * from rtest_t8,rules.sql,SAME,,"[(26, 'Record should go to rtest_t4 and t8'), (28, 'Record should go to rtest_t4 and t8')]"
postgresql,postgresql,select * from rtest_order2,rules.sql,SAME,,"[(1, 1, 'rule 1 - this should run 1st'), (1, 2, 'rule 2 - this should run 2nd'), (1, 3, 'rule 3 - this should run 3rd'), (1, 4, 'rule 4 - this should run 4th')]"
postgresql,postgresql,select * from rtest_nothn1,rules.sql,SAME,,"[(1, 'want this'), (2, 'want this'), (20, 'want this'), (29, 'want this'), (40, 'want this'), (50, 'want this'), (60, 'want this')]"
postgresql,postgresql,select * from rtest_nothn2,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_nothn3,rules.sql,SAME,,"[(100, 'OK'), (200, 'OK')]"
postgresql,postgresql,delete from rtest_nothn1,rules.sql,SAME,,[]
postgresql,postgresql,delete from rtest_nothn2,rules.sql,SAME,,[]
postgresql,postgresql,delete from rtest_nothn3,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_nothn1,rules.sql,SAME,,"[(1, 'want this'), (2, 'want this'), (20, 'want this'), (29, 'want this'), (40, 'want this'), (50, 'want this'), (60, 'want this')]"
postgresql,postgresql,delete from rtest_nothn4,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_nothn2,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_nothn3,rules.sql,SAME,,"[(100, 'OK'), (200, 'OK')]"
postgresql,postgresql,"create view rtest_vview1 as select a, b from rtest_view1 X 	where 0 < (select count(*) from rtest_view2 Y where Y.a = X.a)",rules.sql,SAME,,[]
postgresql,postgresql,"create view rtest_vview2 as select a, b from rtest_view1 where v",rules.sql,SAME,,[]
postgresql,postgresql,"create view rtest_vview3 as select a, b from rtest_vview2 X 	where 0 < (select count(*) from rtest_view2 Y where Y.a = X.a)",rules.sql,SAME,,[]
postgresql,postgresql,"create view rtest_vview4 as select X.a, X.b, count(Y.a) as refcount 	from rtest_view1 X, rtest_view2 Y 	where X.a = Y.a 	group by X.a, X.b",rules.sql,SAME,,[]
postgresql,postgresql,create function rtest_viewfunc1(int4) returns int4 as 	'select count(*)::int4 from rtest_view2 where a = $1' 	language sql,rules.sql,SAME,,[]
postgresql,postgresql,"create view rtest_vview5 as select a, b, rtest_viewfunc1(a) as refcount 	from rtest_view1",rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_vview1,rules.sql,SAME,,"[(2, 'item 2'), (4, 'item 4'), (5, 'item 5'), (7, 'item 7')]"
postgresql,postgresql,select * from rtest_vview2,rules.sql,SAME,,"[(1, 'item 1'), (2, 'item 2'), (3, 'item 3'), (5, 'item 5'), (7, 'item 7'), (8, 'item 8')]"
postgresql,postgresql,select * from rtest_vview3,rules.sql,SAME,,"[(2, 'item 2'), (5, 'item 5'), (7, 'item 7')]"
postgresql,postgresql,"select * from rtest_vview4 order by a, b",rules.sql,SAME,,"[(2, 'item 2', 2), (4, 'item 4', 1), (5, 'item 5', 1), (7, 'item 7', 4)]"
postgresql,postgresql,select * from rtest_vview5,rules.sql,SAME,,"[(1, 'item 1', 0), (2, 'item 2', 2), (3, 'item 3', 0), (4, 'item 4', 1), (5, 'item 5', 1), (6, 'item 6', 0), (7, 'item 7', 4), (8, 'item 8', 0)]"
postgresql,postgresql,select * from rtest_view3,rules.sql,SAME,,"[(2, 'item 2'), (4, 'item 4'), (5, 'item 5')]"
postgresql,postgresql,delete from rtest_view3,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_view3,rules.sql,SAME,,"[(1, 'item 1'), (3, 'item 3'), (7, 'item 7'), (8, 'item 8')]"
postgresql,postgresql,delete from rtest_view3,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_view3,rules.sql,SAME,,"[(2, 'item 2'), (5, 'item 5'), (7, 'item 7')]"
postgresql,postgresql,delete from rtest_view3,rules.sql,SAME,,[]
postgresql,postgresql,"select * from rtest_view4 order by a, b",rules.sql,SAME,,"[(2, 'item 2', 2), (4, 'item 4', 1), (5, 'item 5', 1)]"
postgresql,postgresql,delete from rtest_view4,rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_view4,rules.sql,SAME,,"[(3, 'item 3', 0), (6, 'item 6', 0), (8, 'item 8', 0)]"
postgresql,postgresql,delete from rtest_view4,rules.sql,SAME,,[]
postgresql,postgresql,"create view rtest_vcomp as 	select X.part, (X.size * Y.factor) as size_in_cm 			from rtest_comp X, rtest_unitfact Y 			where X.unit = Y.unit",rules.sql,SAME,,[]
postgresql,postgresql,select * from rtest_vcomp order by part,rules.sql,SAME,,"[('p1', 500.0), ('p2', 300.0), ('p3', 5.0), ('p4', 15.0), ('p5', 17.78), ('p6', 11.176000000000002)]"
postgresql,postgresql,select * from rtest_vcomp where size_in_cm > 10.0 order by size_in_cm using >,rules.sql,SAME,,"[('p1', 500.0), ('p2', 300.0), ('p5', 17.78), ('p4', 15.0), ('p6', 11.176000000000002)]"
postgresql,postgresql,"CREATE VIEW shoe AS 	SELECT sh.shoename, 		   sh.sh_avail, 		   sh.slcolor, 		   sh.slminlen, 		   sh.slminlen * un.un_fact AS slminlen_cm, 		   sh.slmaxlen, 		   sh.slmaxlen * un.un_fact AS slmaxlen_cm, 		   sh.slunit 	  FROM shoe_data sh, unit un 	 WHERE sh.slunit = un.un_name",rules.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW shoelace AS 	SELECT s.sl_name, 		   s.sl_avail, 		   s.sl_color, 		   s.sl_len, 		   s.sl_unit, 		   s.sl_len * u.un_fact AS sl_len_cm 	  FROM shoelace_data s, unit u 	 WHERE s.sl_unit = u.un_name",rules.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW shoe_ready AS 	SELECT rsh.shoename, 		   rsh.sh_avail, 		   rsl.sl_name, 		   rsl.sl_avail, 		   int4smaller(rsh.sh_avail, rsl.sl_avail) AS total_avail 	  FROM shoe rsh, shoelace rsl 	 WHERE rsl.sl_color = rsh.slcolor 	   AND rsl.sl_len_cm >= rsh.slminlen_cm 	   AND rsl.sl_len_cm <= rsh.slmaxlen_cm",rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM shoelace ORDER BY sl_name,rules.sql,SAME,,"[('sl1       ', 5, 'black     ', 80.0, 'cm      ', 80.0), ('sl2       ', 6, 'black     ', 100.0, 'cm      ', 100.0), ('sl3       ', 0, 'black     ', 35.0, 'inch    ', 88.9), ('sl4       ', 8, 'black     ', 40.0, 'inch    ', 101.6), ('sl5       ', 4, 'brown     ', 1.0, 'm       ', 100.0), ('sl6       ', 0, 'brown     ', 0.9, 'm       ', 90.0), ('sl7       ', 7, 'brown     ', 60.0, 'cm      ', 60.0), ('sl8       ', 1, 'brown     ', 40.0, 'inch    ', 101.6)]"
postgresql,postgresql,SELECT * FROM shoe_ready WHERE total_avail >= 2 ORDER BY 1,rules.sql,SAME,,"[('sh1       ', 2, 'sl1       ', 5, 2), ('sh3       ', 4, 'sl7       ', 7, 4)]"
postgresql,postgresql,UPDATE shoelace_data SET sl_avail = 6 WHERE  sl_name = 'sl7',rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM shoelace_log,rules.sql,SAME,,"[('sl7       ', 6, 'Al Bundy', datetime.datetime(1970, 1, 1, 0, 0))]"
postgresql,postgresql,"CREATE RULE shoelace_upd AS ON UPDATE TO shoelace         DO INSTEAD         UPDATE shoelace_data SET                sl_name = NEW.sl_name,                sl_avail = NEW.sl_avail,                sl_color = NEW.sl_color,                sl_len = NEW.sl_len,                sl_unit = NEW.sl_unit          WHERE sl_name = OLD.sl_name",rules.sql,SAME,,[]
postgresql,postgresql,CREATE RULE shoelace_del AS ON DELETE TO shoelace         DO INSTEAD         DELETE FROM shoelace_data          WHERE sl_name = OLD.sl_name,rules.sql,SAME,,[]
postgresql,postgresql,CREATE RULE shoelace_ok_ins AS ON INSERT TO shoelace_ok         DO INSTEAD         UPDATE shoelace SET                sl_avail = sl_avail + NEW.ok_quant          WHERE sl_name = NEW.ok_name,rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM shoelace ORDER BY sl_name,rules.sql,SAME,,"[('sl1       ', 5, 'black     ', 80.0, 'cm      ', 80.0), ('sl2       ', 6, 'black     ', 100.0, 'cm      ', 100.0), ('sl3       ', 0, 'black     ', 35.0, 'inch    ', 88.9), ('sl4       ', 8, 'black     ', 40.0, 'inch    ', 101.6), ('sl5       ', 4, 'brown     ', 1.0, 'm       ', 100.0), ('sl6       ', 0, 'brown     ', 0.9, 'm       ', 90.0), ('sl7       ', 6, 'brown     ', 60.0, 'cm      ', 60.0), ('sl8       ', 1, 'brown     ', 40.0, 'inch    ', 101.6)]"
postgresql,postgresql,SELECT * FROM shoelace ORDER BY sl_name,rules.sql,SAME,,"[('sl1       ', 5, 'black     ', 80.0, 'cm      ', 80.0), ('sl2       ', 6, 'black     ', 100.0, 'cm      ', 100.0), ('sl3       ', 10, 'black     ', 35.0, 'inch    ', 88.9), ('sl4       ', 8, 'black     ', 40.0, 'inch    ', 101.6), ('sl5       ', 4, 'brown     ', 1.0, 'm       ', 100.0), ('sl6       ', 20, 'brown     ', 0.9, 'm       ', 90.0), ('sl7       ', 6, 'brown     ', 60.0, 'cm      ', 60.0), ('sl8       ', 21, 'brown     ', 40.0, 'inch    ', 101.6)]"
postgresql,postgresql,SELECT * FROM shoelace_log ORDER BY sl_name,rules.sql,SAME,,"[('sl3       ', 10, 'Al Bundy', datetime.datetime(1970, 1, 1, 0, 0)), ('sl6       ', 20, 'Al Bundy', datetime.datetime(1970, 1, 1, 0, 0)), ('sl7       ', 6, 'Al Bundy', datetime.datetime(1970, 1, 1, 0, 0)), ('sl8       ', 21, 'Al Bundy', datetime.datetime(1970, 1, 1, 0, 0))]"
postgresql,postgresql,CREATE VIEW shoelace_obsolete AS 	SELECT * FROM shoelace WHERE NOT EXISTS 	    (SELECT shoename FROM shoe WHERE slcolor = sl_color),rules.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW shoelace_candelete AS 	SELECT * FROM shoelace_obsolete WHERE sl_avail = 0,rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM shoelace_obsolete ORDER BY sl_len_cm,rules.sql,SAME,,"[('sl9       ', 0, 'pink      ', 35.0, 'inch    ', 88.9), ('sl10      ', 1000, 'magenta   ', 40.0, 'inch    ', 101.6)]"
postgresql,postgresql,SELECT * FROM shoelace_candelete,rules.sql,SAME,,"[('sl9       ', 0, 'pink      ', 35.0, 'inch    ', 88.9)]"
postgresql,postgresql,DELETE FROM shoelace WHERE EXISTS     (SELECT * FROM shoelace_candelete              WHERE sl_name = shoelace.sl_name),rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM shoelace ORDER BY sl_name,rules.sql,SAME,,"[('sl1       ', 5, 'black     ', 80.0, 'cm      ', 80.0), ('sl10      ', 1000, 'magenta   ', 40.0, 'inch    ', 101.6), ('sl2       ', 6, 'black     ', 100.0, 'cm      ', 100.0), ('sl3       ', 10, 'black     ', 35.0, 'inch    ', 88.9), ('sl4       ', 8, 'black     ', 40.0, 'inch    ', 101.6), ('sl5       ', 4, 'brown     ', 1.0, 'm       ', 100.0), ('sl6       ', 20, 'brown     ', 0.9, 'm       ', 90.0), ('sl7       ', 6, 'brown     ', 60.0, 'cm      ', 60.0), ('sl8       ', 21, 'brown     ', 40.0, 'inch    ', 101.6)]"
postgresql,postgresql,SELECT * FROM shoe ORDER BY shoename,rules.sql,SAME,,"[('sh1       ', 2, 'black     ', 70.0, 70.0, 90.0, 90.0, 'cm      '), ('sh2       ', 0, 'black     ', 30.0, 76.2, 40.0, 101.6, 'inch    '), ('sh3       ', 4, 'brown     ', 50.0, 50.0, 65.0, 65.0, 'cm      '), ('sh4       ', 3, 'brown     ', 40.0, 101.6, 50.0, 127.0, 'inch    ')]"
postgresql,postgresql,SELECT count(*) FROM shoe,rules.sql,SAME,,"[(4,)]"
postgresql,postgresql,create rule rules_foorule as on insert to rules_foo where f1 < 100 do instead nothing,rules.sql,SAME,,[]
postgresql,postgresql,select * from rules_foo,rules.sql,SAME,,"[(1001,)]"
postgresql,postgresql,drop rule rules_foorule on rules_foo,rules.sql,SAME,,[]
postgresql,postgresql,select * from rules_foo,rules.sql,SAME,,"[(1001,), (100,)]"
postgresql,postgresql,select * from rules_foo2,rules.sql,SAME,,"[(2,)]"
postgresql,postgresql,drop rule rules_foorule on rules_foo,rules.sql,SAME,,[]
postgresql,postgresql,"create view vview as   select pparent.pid, txt, descrip from     pparent left join cchild using (pid)",rules.sql,SAME,,[]
postgresql,postgresql,select * from vview,rules.sql,SAME,,"[(1, 'parent1', 'descrip1'), (2, 'parent2', None)]"
postgresql,postgresql,select * from vview,rules.sql,SAME,,"[(1, 'parent1', 'descrip1'), (2, 'parent2', None)]"
postgresql,postgresql,select * from vview,rules.sql,SAME,,"[(1, 'parent1', 'descrip1'), (2, 'parent2', None)]"
postgresql,postgresql,select * from vview,rules.sql,SAME,,"[(1, 'parent1', 'descrip1'), (2, 'parent2', None)]"
postgresql,postgresql,select * from cchild,rules.sql,SAME,,"[(1, 'descrip1')]"
postgresql,postgresql,drop view vview,rules.sql,SAME,,[]
postgresql,postgresql,"SELECT viewname, definition FROM pg_views WHERE schemaname = 'pg_catalog' ORDER BY viewname",rules.sql,SAME,,"[('pg_available_extension_versions', ' SELECT e.name,\n    e.version,\n    (x.extname IS NOT NULL) AS installed,\n    e.superuser,\n    e.trusted,\n    e.relocatable,\n    e.schema,\n    e.requires,\n    e.comment\n   FROM (pg_available_extension_versions() e(name, version, superuser, trusted, relocatable, schema, requires, comment)\n     LEFT JOIN pg_extension x ON (((e.name = x.extname) AND (e.version = x.extversion))));'), ('pg_available_extensions', ' SELECT e.name,\n    e.default_version,\n    x.extversion AS installed_version,\n    e.comment\n   FROM (pg_available_extensions() e(name, default_version, comment)\n     LEFT JOIN pg_extension x ON ((e.name = x.extname)));'), ('pg_backend_memory_contexts', ' SELECT name,\n    ident,\n    parent,\n    level,\n    total_bytes,\n    total_nblocks,\n    free_bytes,\n    free_chunks,\n    used_bytes\n   FROM pg_get_backend_memory_contexts() pg_get_backend_memory_contexts(name, ident, parent, level, total_bytes, total_nblocks, free_bytes, free_chunks, used_bytes);'), ('pg_config', ' SELECT name,\n    setting\n   FROM pg_config() pg_config(name, setting);'), ('pg_cursors', ' SELECT name,\n    statement,\n    is_holdable,\n    is_binary,\n    is_scrollable,\n    creation_time\n   FROM pg_cursor() c(name, statement, is_holdable, is_binary, is_scrollable, creation_time);'), ('pg_file_settings', ' SELECT sourcefile,\n    sourceline,\n    seqno,\n    name,\n    setting,\n    applied,\n    error\n   FROM pg_show_all_file_settings() a(sourcefile, sourceline, seqno, name, setting, applied, error);'), ('pg_group', ' SELECT rolname AS groname,\n    oid AS grosysid,\n    ARRAY( SELECT pg_auth_members.member\n           FROM pg_auth_members\n          WHERE (pg_auth_members.roleid = pg_authid.oid)) AS grolist\n   FROM pg_authid\n  WHERE (NOT rolcanlogin);'), ('pg_hba_file_rules', ' SELECT rule_number,\n    file_name,\n    line_number,\n    type,\n    database,\n    user_name,\n    address,\n    netmask,\n    auth_method,\n    options,\n    error\n   FROM pg_hba_file_rules() a(rule_number, file_name, line_number, type, database, user_name, address, netmask, auth_method, options, error);'), ('pg_ident_file_mappings', ' SELECT map_number,\n    file_name,\n    line_number,\n    map_name,\n    sys_name,\n    pg_username,\n    error\n   FROM pg_ident_file_mappings() a(map_number, file_name, line_number, map_name, sys_name, pg_username, error);'), ('pg_indexes', ' SELECT n.nspname AS schemaname,\n    c.relname AS tablename,\n    i.relname AS indexname,\n    t.spcname AS tablespace,\n    pg_get_indexdef(i.oid) AS indexdef\n   FROM ((((pg_index x\n     JOIN pg_class c ON ((c.oid = x.indrelid)))\n     JOIN pg_class i ON ((i.oid = x.indexrelid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n     LEFT JOIN pg_tablespace t ON ((t.oid = i.reltablespace)))\n  WHERE ((c.relkind = ANY (ARRAY[\'r\'::""char"", \'m\'::""char"", \'p\'::""char""])) AND (i.relkind = ANY (ARRAY[\'i\'::""char"", \'I\'::""char""])));'), ('pg_locks', ' SELECT locktype,\n    database,\n    relation,\n    page,\n    tuple,\n    virtualxid,\n    transactionid,\n    classid,\n    objid,\n    objsubid,\n    virtualtransaction,\n    pid,\n    mode,\n    granted,\n    fastpath,\n    waitstart\n   FROM pg_lock_status() l(locktype, database, relation, page, tuple, virtualxid, transactionid, classid, objid, objsubid, virtualtransaction, pid, mode, granted, fastpath, waitstart);'), ('pg_matviews', ' SELECT n.nspname AS schemaname,\n    c.relname AS matviewname,\n    pg_get_userbyid(c.relowner) AS matviewowner,\n    t.spcname AS tablespace,\n    c.relhasindex AS hasindexes,\n    c.relispopulated AS ispopulated,\n    pg_get_viewdef(c.oid) AS definition\n   FROM ((pg_class c\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n     LEFT JOIN pg_tablespace t ON ((t.oid = c.reltablespace)))\n  WHERE (c.relkind = \'m\'::""char"");'), ('pg_policies', ' SELECT n.nspname AS schemaname,\n    c.relname AS tablename,\n    pol.polname AS policyname,\n        CASE\n            WHEN pol.polpermissive THEN \'PERMISSIVE\'::text\n            ELSE \'RESTRICTIVE\'::text\n        END AS permissive,\n        CASE\n            WHEN (pol.polroles = \'{0}\'::oid[]) THEN (string_to_array(\'public\'::text, \'\'::text))::name[]\n            ELSE ARRAY( SELECT pg_authid.rolname\n               FROM pg_authid\n              WHERE (pg_authid.oid = ANY (pol.polroles))\n              ORDER BY pg_authid.rolname)\n        END AS roles,\n        CASE pol.polcmd\n            WHEN \'r\'::""char"" THEN \'SELECT\'::text\n            WHEN \'a\'::""char"" THEN \'INSERT\'::text\n            WHEN \'w\'::""char"" THEN \'UPDATE\'::text\n            WHEN \'d\'::""char"" THEN \'DELETE\'::text\n            WHEN \'*\'::""char"" THEN \'ALL\'::text\n            ELSE NULL::text\n        END AS cmd,\n    pg_get_expr(pol.polqual, pol.polrelid) AS qual,\n    pg_get_expr(pol.polwithcheck, pol.polrelid) AS with_check\n   FROM ((pg_policy pol\n     JOIN pg_class c ON ((c.oid = pol.polrelid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)));'), ('pg_prepared_statements', ' SELECT name,\n    statement,\n    prepare_time,\n    parameter_types,\n    result_types,\n    from_sql,\n    generic_plans,\n    custom_plans\n   FROM pg_prepared_statement() p(name, statement, prepare_time, parameter_types, result_types, from_sql, generic_plans, custom_plans);'), ('pg_prepared_xacts', ' SELECT p.transaction,\n    p.gid,\n    p.prepared,\n    u.rolname AS owner,\n    d.datname AS database\n   FROM ((pg_prepared_xact() p(transaction, gid, prepared, ownerid, dbid)\n     LEFT JOIN pg_authid u ON ((p.ownerid = u.oid)))\n     LEFT JOIN pg_database d ON ((p.dbid = d.oid)));'), ('pg_publication_tables', ' SELECT p.pubname,\n    n.nspname AS schemaname,\n    c.relname AS tablename,\n    ( SELECT array_agg(a.attname ORDER BY a.attnum) AS array_agg\n           FROM pg_attribute a\n          WHERE ((a.attrelid = gpt.relid) AND (a.attnum = ANY ((gpt.attrs)::smallint[])))) AS attnames,\n    pg_get_expr(gpt.qual, gpt.relid) AS rowfilter\n   FROM pg_publication p,\n    LATERAL pg_get_publication_tables(VARIADIC ARRAY[(p.pubname)::text]) gpt(pubid, relid, attrs, qual),\n    (pg_class c\n     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE (c.oid = gpt.relid);'), ('pg_replication_origin_status', ' SELECT local_id,\n    external_id,\n    remote_lsn,\n    local_lsn\n   FROM pg_show_replication_origin_status() pg_show_replication_origin_status(local_id, external_id, remote_lsn, local_lsn);'), ('pg_replication_slots', ' SELECT l.slot_name,\n    l.plugin,\n    l.slot_type,\n    l.datoid,\n    d.datname AS database,\n    l.temporary,\n    l.active,\n    l.active_pid,\n    l.xmin,\n    l.catalog_xmin,\n    l.restart_lsn,\n    l.confirmed_flush_lsn,\n    l.wal_status,\n    l.safe_wal_size,\n    l.two_phase,\n    l.conflicting\n   FROM (pg_get_replication_slots() l(slot_name, plugin, slot_type, datoid, temporary, active, active_pid, xmin, catalog_xmin, restart_lsn, confirmed_flush_lsn, wal_status, safe_wal_size, two_phase, conflicting)\n     LEFT JOIN pg_database d ON ((l.datoid = d.oid)));'), ('pg_roles', "" SELECT pg_authid.rolname,\n    pg_authid.rolsuper,\n    pg_authid.rolinherit,\n    pg_authid.rolcreaterole,\n    pg_authid.rolcreatedb,\n    pg_authid.rolcanlogin,\n    pg_authid.rolreplication,\n    pg_authid.rolconnlimit,\n    '********'::text AS rolpassword,\n    pg_authid.rolvaliduntil,\n    pg_authid.rolbypassrls,\n    s.setconfig AS rolconfig,\n    pg_authid.oid\n   FROM (pg_authid\n     LEFT JOIN pg_db_role_setting s ON (((pg_authid.oid = s.setrole) AND (s.setdatabase = (0)::oid))));""), ('pg_rules', "" SELECT n.nspname AS schemaname,\n    c.relname AS tablename,\n    r.rulename,\n    pg_get_ruledef(r.oid) AS definition\n   FROM ((pg_rewrite r\n     JOIN pg_class c ON ((c.oid = r.ev_class)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE (r.rulename <> '_RETURN'::name);""), ('pg_seclabels', ' SELECT l.objoid,\n    l.classoid,\n    l.objsubid,\n        CASE\n            WHEN (rel.relkind = ANY (ARRAY[\'r\'::""char"", \'p\'::""char""])) THEN \'table\'::text\n            WHEN (rel.relkind = \'v\'::""char"") THEN \'view\'::text\n            WHEN (rel.relkind = \'m\'::""char"") THEN \'materialized view\'::text\n            WHEN (rel.relkind = \'S\'::""char"") THEN \'sequence\'::text\n            WHEN (rel.relkind = \'f\'::""char"") THEN \'foreign table\'::text\n            ELSE NULL::text\n        END AS objtype,\n    rel.relnamespace AS objnamespace,\n        CASE\n            WHEN pg_table_is_visible(rel.oid) THEN quote_ident((rel.relname)::text)\n            ELSE ((quote_ident((nsp.nspname)::text) || \'.\'::text) || quote_ident((rel.relname)::text))\n        END AS objname,\n    l.provider,\n    l.label\n   FROM ((pg_seclabel l\n     JOIN pg_class rel ON (((l.classoid = rel.tableoid) AND (l.objoid = rel.oid))))\n     JOIN pg_namespace nsp ON ((rel.relnamespace = nsp.oid)))\n  WHERE (l.objsubid = 0)\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    l.objsubid,\n    \'column\'::text AS objtype,\n    rel.relnamespace AS objnamespace,\n    ((\n        CASE\n            WHEN pg_table_is_visible(rel.oid) THEN quote_ident((rel.relname)::text)\n            ELSE ((quote_ident((nsp.nspname)::text) || \'.\'::text) || quote_ident((rel.relname)::text))\n        END || \'.\'::text) || (att.attname)::text) AS objname,\n    l.provider,\n    l.label\n   FROM (((pg_seclabel l\n     JOIN pg_class rel ON (((l.classoid = rel.tableoid) AND (l.objoid = rel.oid))))\n     JOIN pg_attribute att ON (((rel.oid = att.attrelid) AND (l.objsubid = att.attnum))))\n     JOIN pg_namespace nsp ON ((rel.relnamespace = nsp.oid)))\n  WHERE (l.objsubid <> 0)\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    l.objsubid,\n        CASE pro.prokind\n            WHEN \'a\'::""char"" THEN \'aggregate\'::text\n            WHEN \'f\'::""char"" THEN \'function\'::text\n            WHEN \'p\'::""char"" THEN \'procedure\'::text\n            WHEN \'w\'::""char"" THEN \'window\'::text\n            ELSE NULL::text\n        END AS objtype,\n    pro.pronamespace AS objnamespace,\n    (((\n        CASE\n            WHEN pg_function_is_visible(pro.oid) THEN quote_ident((pro.proname)::text)\n            ELSE ((quote_ident((nsp.nspname)::text) || \'.\'::text) || quote_ident((pro.proname)::text))\n        END || \'(\'::text) || pg_get_function_arguments(pro.oid)) || \')\'::text) AS objname,\n    l.provider,\n    l.label\n   FROM ((pg_seclabel l\n     JOIN pg_proc pro ON (((l.classoid = pro.tableoid) AND (l.objoid = pro.oid))))\n     JOIN pg_namespace nsp ON ((pro.pronamespace = nsp.oid)))\n  WHERE (l.objsubid = 0)\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    l.objsubid,\n        CASE\n            WHEN (typ.typtype = \'d\'::""char"") THEN \'domain\'::text\n            ELSE \'type\'::text\n        END AS objtype,\n    typ.typnamespace AS objnamespace,\n        CASE\n            WHEN pg_type_is_visible(typ.oid) THEN quote_ident((typ.typname)::text)\n            ELSE ((quote_ident((nsp.nspname)::text) || \'.\'::text) || quote_ident((typ.typname)::text))\n        END AS objname,\n    l.provider,\n    l.label\n   FROM ((pg_seclabel l\n     JOIN pg_type typ ON (((l.classoid = typ.tableoid) AND (l.objoid = typ.oid))))\n     JOIN pg_namespace nsp ON ((typ.typnamespace = nsp.oid)))\n  WHERE (l.objsubid = 0)\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    l.objsubid,\n    \'large object\'::text AS objtype,\n    NULL::oid AS objnamespace,\n    (l.objoid)::text AS objname,\n    l.provider,\n    l.label\n   FROM (pg_seclabel l\n     JOIN pg_largeobject_metadata lom ON ((l.objoid = lom.oid)))\n  WHERE ((l.classoid = (\'pg_largeobject\'::regclass)::oid) AND (l.objsubid = 0))\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    l.objsubid,\n    \'language\'::text AS objtype,\n    NULL::oid AS objnamespace,\n    quote_ident((lan.lanname)::text) AS objname,\n    l.provider,\n    l.label\n   FROM (pg_seclabel l\n     JOIN pg_language lan ON (((l.classoid = lan.tableoid) AND (l.objoid = lan.oid))))\n  WHERE (l.objsubid = 0)\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    l.objsubid,\n    \'schema\'::text AS objtype,\n    nsp.oid AS objnamespace,\n    quote_ident((nsp.nspname)::text) AS objname,\n    l.provider,\n    l.label\n   FROM (pg_seclabel l\n     JOIN pg_namespace nsp ON (((l.classoid = nsp.tableoid) AND (l.objoid = nsp.oid))))\n  WHERE (l.objsubid = 0)\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    l.objsubid,\n    \'event trigger\'::text AS objtype,\n    NULL::oid AS objnamespace,\n    quote_ident((evt.evtname)::text) AS objname,\n    l.provider,\n    l.label\n   FROM (pg_seclabel l\n     JOIN pg_event_trigger evt ON (((l.classoid = evt.tableoid) AND (l.objoid = evt.oid))))\n  WHERE (l.objsubid = 0)\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    l.objsubid,\n    \'publication\'::text AS objtype,\n    NULL::oid AS objnamespace,\n    quote_ident((p.pubname)::text) AS objname,\n    l.provider,\n    l.label\n   FROM (pg_seclabel l\n     JOIN pg_publication p ON (((l.classoid = p.tableoid) AND (l.objoid = p.oid))))\n  WHERE (l.objsubid = 0)\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    0 AS objsubid,\n    \'subscription\'::text AS objtype,\n    NULL::oid AS objnamespace,\n    quote_ident((s.subname)::text) AS objname,\n    l.provider,\n    l.label\n   FROM (pg_shseclabel l\n     JOIN pg_subscription s ON (((l.classoid = s.tableoid) AND (l.objoid = s.oid))))\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    0 AS objsubid,\n    \'database\'::text AS objtype,\n    NULL::oid AS objnamespace,\n    quote_ident((dat.datname)::text) AS objname,\n    l.provider,\n    l.label\n   FROM (pg_shseclabel l\n     JOIN pg_database dat ON (((l.classoid = dat.tableoid) AND (l.objoid = dat.oid))))\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    0 AS objsubid,\n    \'tablespace\'::text AS objtype,\n    NULL::oid AS objnamespace,\n    quote_ident((spc.spcname)::text) AS objname,\n    l.provider,\n    l.label\n   FROM (pg_shseclabel l\n     JOIN pg_tablespace spc ON (((l.classoid = spc.tableoid) AND (l.objoid = spc.oid))))\nUNION ALL\n SELECT l.objoid,\n    l.classoid,\n    0 AS objsubid,\n    \'role\'::text AS objtype,\n    NULL::oid AS objnamespace,\n    quote_ident((rol.rolname)::text) AS objname,\n    l.provider,\n    l.label\n   FROM (pg_shseclabel l\n     JOIN pg_authid rol ON (((l.classoid = rol.tableoid) AND (l.objoid = rol.oid))));'), ('pg_sequences', ' SELECT n.nspname AS schemaname,\n    c.relname AS sequencename,\n    pg_get_userbyid(c.relowner) AS sequenceowner,\n    (s.seqtypid)::regtype AS data_type,\n    s.seqstart AS start_value,\n    s.seqmin AS min_value,\n    s.seqmax AS max_value,\n    s.seqincrement AS increment_by,\n    s.seqcycle AS cycle,\n    s.seqcache AS cache_size,\n        CASE\n            WHEN has_sequence_privilege(c.oid, \'SELECT,USAGE\'::text) THEN pg_sequence_last_value((c.oid)::regclass)\n            ELSE NULL::bigint\n        END AS last_value\n   FROM ((pg_sequence s\n     JOIN pg_class c ON ((c.oid = s.seqrelid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE ((NOT pg_is_other_temp_schema(n.oid)) AND (c.relkind = \'S\'::""char""));'), ('pg_settings', ' SELECT name,\n    setting,\n    unit,\n    category,\n    short_desc,\n    extra_desc,\n    context,\n    vartype,\n    source,\n    min_val,\n    max_val,\n    enumvals,\n    boot_val,\n    reset_val,\n    sourcefile,\n    sourceline,\n    pending_restart\n   FROM pg_show_all_settings() a(name, setting, unit, category, short_desc, extra_desc, context, vartype, source, min_val, max_val, enumvals, boot_val, reset_val, sourcefile, sourceline, pending_restart);'), ('pg_shadow', ' SELECT pg_authid.rolname AS usename,\n    pg_authid.oid AS usesysid,\n    pg_authid.rolcreatedb AS usecreatedb,\n    pg_authid.rolsuper AS usesuper,\n    pg_authid.rolreplication AS userepl,\n    pg_authid.rolbypassrls AS usebypassrls,\n    pg_authid.rolpassword AS passwd,\n    pg_authid.rolvaliduntil AS valuntil,\n    s.setconfig AS useconfig\n   FROM (pg_authid\n     LEFT JOIN pg_db_role_setting s ON (((pg_authid.oid = s.setrole) AND (s.setdatabase = (0)::oid))))\n  WHERE pg_authid.rolcanlogin;'), ('pg_shmem_allocations', ' SELECT name,\n    off,\n    size,\n    allocated_size\n   FROM pg_get_shmem_allocations() pg_get_shmem_allocations(name, off, size, allocated_size);'), ('pg_stat_activity', ' SELECT s.datid,\n    d.datname,\n    s.pid,\n    s.leader_pid,\n    s.usesysid,\n    u.rolname AS usename,\n    s.application_name,\n    s.client_addr,\n    s.client_hostname,\n    s.client_port,\n    s.backend_start,\n    s.xact_start,\n    s.query_start,\n    s.state_change,\n    s.wait_event_type,\n    s.wait_event,\n    s.state,\n    s.backend_xid,\n    s.backend_xmin,\n    s.query_id,\n    s.query,\n    s.backend_type\n   FROM ((pg_stat_get_activity(NULL::integer) s(datid, pid, usesysid, application_name, state, query, wait_event_type, wait_event, xact_start, query_start, backend_start, state_change, client_addr, client_hostname, client_port, backend_xid, backend_xmin, backend_type, ssl, sslversion, sslcipher, sslbits, ssl_client_dn, ssl_client_serial, ssl_issuer_dn, gss_auth, gss_princ, gss_enc, gss_delegation, leader_pid, query_id)\n     LEFT JOIN pg_database d ON ((s.datid = d.oid)))\n     LEFT JOIN pg_authid u ON ((s.usesysid = u.oid)));'), ('pg_stat_all_indexes', ' SELECT c.oid AS relid,\n    i.oid AS indexrelid,\n    n.nspname AS schemaname,\n    c.relname,\n    i.relname AS indexrelname,\n    pg_stat_get_numscans(i.oid) AS idx_scan,\n    pg_stat_get_lastscan(i.oid) AS last_idx_scan,\n    pg_stat_get_tuples_returned(i.oid) AS idx_tup_read,\n    pg_stat_get_tuples_fetched(i.oid) AS idx_tup_fetch\n   FROM (((pg_class c\n     JOIN pg_index x ON ((c.oid = x.indrelid)))\n     JOIN pg_class i ON ((i.oid = x.indexrelid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE (c.relkind = ANY (ARRAY[\'r\'::""char"", \'t\'::""char"", \'m\'::""char""]));'), ('pg_stat_all_tables', ' SELECT c.oid AS relid,\n    n.nspname AS schemaname,\n    c.relname,\n    pg_stat_get_numscans(c.oid) AS seq_scan,\n    pg_stat_get_lastscan(c.oid) AS last_seq_scan,\n    pg_stat_get_tuples_returned(c.oid) AS seq_tup_read,\n    (sum(pg_stat_get_numscans(i.indexrelid)))::bigint AS idx_scan,\n    max(pg_stat_get_lastscan(i.indexrelid)) AS last_idx_scan,\n    ((sum(pg_stat_get_tuples_fetched(i.indexrelid)))::bigint + pg_stat_get_tuples_fetched(c.oid)) AS idx_tup_fetch,\n    pg_stat_get_tuples_inserted(c.oid) AS n_tup_ins,\n    pg_stat_get_tuples_updated(c.oid) AS n_tup_upd,\n    pg_stat_get_tuples_deleted(c.oid) AS n_tup_del,\n    pg_stat_get_tuples_hot_updated(c.oid) AS n_tup_hot_upd,\n    pg_stat_get_tuples_newpage_updated(c.oid) AS n_tup_newpage_upd,\n    pg_stat_get_live_tuples(c.oid) AS n_live_tup,\n    pg_stat_get_dead_tuples(c.oid) AS n_dead_tup,\n    pg_stat_get_mod_since_analyze(c.oid) AS n_mod_since_analyze,\n    pg_stat_get_ins_since_vacuum(c.oid) AS n_ins_since_vacuum,\n    pg_stat_get_last_vacuum_time(c.oid) AS last_vacuum,\n    pg_stat_get_last_autovacuum_time(c.oid) AS last_autovacuum,\n    pg_stat_get_last_analyze_time(c.oid) AS last_analyze,\n    pg_stat_get_last_autoanalyze_time(c.oid) AS last_autoanalyze,\n    pg_stat_get_vacuum_count(c.oid) AS vacuum_count,\n    pg_stat_get_autovacuum_count(c.oid) AS autovacuum_count,\n    pg_stat_get_analyze_count(c.oid) AS analyze_count,\n    pg_stat_get_autoanalyze_count(c.oid) AS autoanalyze_count\n   FROM ((pg_class c\n     LEFT JOIN pg_index i ON ((c.oid = i.indrelid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE (c.relkind = ANY (ARRAY[\'r\'::""char"", \'t\'::""char"", \'m\'::""char"", \'p\'::""char""]))\n  GROUP BY c.oid, n.nspname, c.relname;'), ('pg_stat_archiver', ' SELECT archived_count,\n    last_archived_wal,\n    last_archived_time,\n    failed_count,\n    last_failed_wal,\n    last_failed_time,\n    stats_reset\n   FROM pg_stat_get_archiver() s(archived_count, last_archived_wal, last_archived_time, failed_count, last_failed_wal, last_failed_time, stats_reset);'), ('pg_stat_bgwriter', ' SELECT pg_stat_get_bgwriter_timed_checkpoints() AS checkpoints_timed,\n    pg_stat_get_bgwriter_requested_checkpoints() AS checkpoints_req,\n    pg_stat_get_checkpoint_write_time() AS checkpoint_write_time,\n    pg_stat_get_checkpoint_sync_time() AS checkpoint_sync_time,\n    pg_stat_get_bgwriter_buf_written_checkpoints() AS buffers_checkpoint,\n    pg_stat_get_bgwriter_buf_written_clean() AS buffers_clean,\n    pg_stat_get_bgwriter_maxwritten_clean() AS maxwritten_clean,\n    pg_stat_get_buf_written_backend() AS buffers_backend,\n    pg_stat_get_buf_fsync_backend() AS buffers_backend_fsync,\n    pg_stat_get_buf_alloc() AS buffers_alloc,\n    pg_stat_get_bgwriter_stat_reset_time() AS stats_reset;'), ('pg_stat_database', ' SELECT oid AS datid,\n    datname,\n        CASE\n            WHEN (oid = (0)::oid) THEN 0\n            ELSE pg_stat_get_db_numbackends(oid)\n        END AS numbackends,\n    pg_stat_get_db_xact_commit(oid) AS xact_commit,\n    pg_stat_get_db_xact_rollback(oid) AS xact_rollback,\n    (pg_stat_get_db_blocks_fetched(oid) - pg_stat_get_db_blocks_hit(oid)) AS blks_read,\n    pg_stat_get_db_blocks_hit(oid) AS blks_hit,\n    pg_stat_get_db_tuples_returned(oid) AS tup_returned,\n    pg_stat_get_db_tuples_fetched(oid) AS tup_fetched,\n    pg_stat_get_db_tuples_inserted(oid) AS tup_inserted,\n    pg_stat_get_db_tuples_updated(oid) AS tup_updated,\n    pg_stat_get_db_tuples_deleted(oid) AS tup_deleted,\n    pg_stat_get_db_conflict_all(oid) AS conflicts,\n    pg_stat_get_db_temp_files(oid) AS temp_files,\n    pg_stat_get_db_temp_bytes(oid) AS temp_bytes,\n    pg_stat_get_db_deadlocks(oid) AS deadlocks,\n    pg_stat_get_db_checksum_failures(oid) AS checksum_failures,\n    pg_stat_get_db_checksum_last_failure(oid) AS checksum_last_failure,\n    pg_stat_get_db_blk_read_time(oid) AS blk_read_time,\n    pg_stat_get_db_blk_write_time(oid) AS blk_write_time,\n    pg_stat_get_db_session_time(oid) AS session_time,\n    pg_stat_get_db_active_time(oid) AS active_time,\n    pg_stat_get_db_idle_in_transaction_time(oid) AS idle_in_transaction_time,\n    pg_stat_get_db_sessions(oid) AS sessions,\n    pg_stat_get_db_sessions_abandoned(oid) AS sessions_abandoned,\n    pg_stat_get_db_sessions_fatal(oid) AS sessions_fatal,\n    pg_stat_get_db_sessions_killed(oid) AS sessions_killed,\n    pg_stat_get_db_stat_reset_time(oid) AS stats_reset\n   FROM ( SELECT 0 AS oid,\n            NULL::name AS datname\n        UNION ALL\n         SELECT pg_database.oid,\n            pg_database.datname\n           FROM pg_database) d;'), ('pg_stat_database_conflicts', ' SELECT oid AS datid,\n    datname,\n    pg_stat_get_db_conflict_tablespace(oid) AS confl_tablespace,\n    pg_stat_get_db_conflict_lock(oid) AS confl_lock,\n    pg_stat_get_db_conflict_snapshot(oid) AS confl_snapshot,\n    pg_stat_get_db_conflict_bufferpin(oid) AS confl_bufferpin,\n    pg_stat_get_db_conflict_startup_deadlock(oid) AS confl_deadlock,\n    pg_stat_get_db_conflict_logicalslot(oid) AS confl_active_logicalslot\n   FROM pg_database d;'), ('pg_stat_gssapi', ' SELECT pid,\n    gss_auth AS gss_authenticated,\n    gss_princ AS principal,\n    gss_enc AS encrypted,\n    gss_delegation AS credentials_delegated\n   FROM pg_stat_get_activity(NULL::integer) s(datid, pid, usesysid, application_name, state, query, wait_event_type, wait_event, xact_start, query_start, backend_start, state_change, client_addr, client_hostname, client_port, backend_xid, backend_xmin, backend_type, ssl, sslversion, sslcipher, sslbits, ssl_client_dn, ssl_client_serial, ssl_issuer_dn, gss_auth, gss_princ, gss_enc, gss_delegation, leader_pid, query_id)\n  WHERE (client_port IS NOT NULL);'), ('pg_stat_io', ' SELECT backend_type,\n    object,\n    context,\n    reads,\n    read_time,\n    writes,\n    write_time,\n    writebacks,\n    writeback_time,\n    extends,\n    extend_time,\n    op_bytes,\n    hits,\n    evictions,\n    reuses,\n    fsyncs,\n    fsync_time,\n    stats_reset\n   FROM pg_stat_get_io() b(backend_type, object, context, reads, read_time, writes, write_time, writebacks, writeback_time, extends, extend_time, op_bytes, hits, evictions, reuses, fsyncs, fsync_time, stats_reset);'), ('pg_stat_progress_analyze', "" SELECT s.pid,\n    s.datid,\n    d.datname,\n    s.relid,\n        CASE s.param1\n            WHEN 0 THEN 'initializing'::text\n            WHEN 1 THEN 'acquiring sample rows'::text\n            WHEN 2 THEN 'acquiring inherited sample rows'::text\n            WHEN 3 THEN 'computing statistics'::text\n            WHEN 4 THEN 'computing extended statistics'::text\n            WHEN 5 THEN 'finalizing analyze'::text\n            ELSE NULL::text\n        END AS phase,\n    s.param2 AS sample_blks_total,\n    s.param3 AS sample_blks_scanned,\n    s.param4 AS ext_stats_total,\n    s.param5 AS ext_stats_computed,\n    s.param6 AS child_tables_total,\n    s.param7 AS child_tables_done,\n    (s.param8)::oid AS current_child_table_relid\n   FROM (pg_stat_get_progress_info('ANALYZE'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)\n     LEFT JOIN pg_database d ON ((s.datid = d.oid)));""), ('pg_stat_progress_basebackup', "" SELECT pid,\n        CASE param1\n            WHEN 0 THEN 'initializing'::text\n            WHEN 1 THEN 'waiting for checkpoint to finish'::text\n            WHEN 2 THEN 'estimating backup size'::text\n            WHEN 3 THEN 'streaming database files'::text\n            WHEN 4 THEN 'waiting for wal archiving to finish'::text\n            WHEN 5 THEN 'transferring wal files'::text\n            ELSE NULL::text\n        END AS phase,\n        CASE param2\n            WHEN '-1'::integer THEN NULL::bigint\n            ELSE param2\n        END AS backup_total,\n    param3 AS backup_streamed,\n    param4 AS tablespaces_total,\n    param5 AS tablespaces_streamed\n   FROM pg_stat_get_progress_info('BASEBACKUP'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);""), ('pg_stat_progress_cluster', "" SELECT s.pid,\n    s.datid,\n    d.datname,\n    s.relid,\n        CASE s.param1\n            WHEN 1 THEN 'CLUSTER'::text\n            WHEN 2 THEN 'VACUUM FULL'::text\n            ELSE NULL::text\n        END AS command,\n        CASE s.param2\n            WHEN 0 THEN 'initializing'::text\n            WHEN 1 THEN 'seq scanning heap'::text\n            WHEN 2 THEN 'index scanning heap'::text\n            WHEN 3 THEN 'sorting tuples'::text\n            WHEN 4 THEN 'writing new heap'::text\n            WHEN 5 THEN 'swapping relation files'::text\n            WHEN 6 THEN 'rebuilding index'::text\n            WHEN 7 THEN 'performing final cleanup'::text\n            ELSE NULL::text\n        END AS phase,\n    (s.param3)::oid AS cluster_index_relid,\n    s.param4 AS heap_tuples_scanned,\n    s.param5 AS heap_tuples_written,\n    s.param6 AS heap_blks_total,\n    s.param7 AS heap_blks_scanned,\n    s.param8 AS index_rebuild_count\n   FROM (pg_stat_get_progress_info('CLUSTER'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)\n     LEFT JOIN pg_database d ON ((s.datid = d.oid)));""), ('pg_stat_progress_copy', "" SELECT s.pid,\n    s.datid,\n    d.datname,\n    s.relid,\n        CASE s.param5\n            WHEN 1 THEN 'COPY FROM'::text\n            WHEN 2 THEN 'COPY TO'::text\n            ELSE NULL::text\n        END AS command,\n        CASE s.param6\n            WHEN 1 THEN 'FILE'::text\n            WHEN 2 THEN 'PROGRAM'::text\n            WHEN 3 THEN 'PIPE'::text\n            WHEN 4 THEN 'CALLBACK'::text\n            ELSE NULL::text\n        END AS type,\n    s.param1 AS bytes_processed,\n    s.param2 AS bytes_total,\n    s.param3 AS tuples_processed,\n    s.param4 AS tuples_excluded\n   FROM (pg_stat_get_progress_info('COPY'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)\n     LEFT JOIN pg_database d ON ((s.datid = d.oid)));""), ('pg_stat_progress_create_index', "" SELECT s.pid,\n    s.datid,\n    d.datname,\n    s.relid,\n    (s.param7)::oid AS index_relid,\n        CASE s.param1\n            WHEN 1 THEN 'CREATE INDEX'::text\n            WHEN 2 THEN 'CREATE INDEX CONCURRENTLY'::text\n            WHEN 3 THEN 'REINDEX'::text\n            WHEN 4 THEN 'REINDEX CONCURRENTLY'::text\n            ELSE NULL::text\n        END AS command,\n        CASE s.param10\n            WHEN 0 THEN 'initializing'::text\n            WHEN 1 THEN 'waiting for writers before build'::text\n            WHEN 2 THEN ('building index'::text || COALESCE((': '::text || pg_indexam_progress_phasename((s.param9)::oid, s.param11)), ''::text))\n            WHEN 3 THEN 'waiting for writers before validation'::text\n            WHEN 4 THEN 'index validation: scanning index'::text\n            WHEN 5 THEN 'index validation: sorting tuples'::text\n            WHEN 6 THEN 'index validation: scanning table'::text\n            WHEN 7 THEN 'waiting for old snapshots'::text\n            WHEN 8 THEN 'waiting for readers before marking dead'::text\n            WHEN 9 THEN 'waiting for readers before dropping'::text\n            ELSE NULL::text\n        END AS phase,\n    s.param4 AS lockers_total,\n    s.param5 AS lockers_done,\n    s.param6 AS current_locker_pid,\n    s.param16 AS blocks_total,\n    s.param17 AS blocks_done,\n    s.param12 AS tuples_total,\n    s.param13 AS tuples_done,\n    s.param14 AS partitions_total,\n    s.param15 AS partitions_done\n   FROM (pg_stat_get_progress_info('CREATE INDEX'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)\n     LEFT JOIN pg_database d ON ((s.datid = d.oid)));""), ('pg_stat_progress_vacuum', "" SELECT s.pid,\n    s.datid,\n    d.datname,\n    s.relid,\n        CASE s.param1\n            WHEN 0 THEN 'initializing'::text\n            WHEN 1 THEN 'scanning heap'::text\n            WHEN 2 THEN 'vacuuming indexes'::text\n            WHEN 3 THEN 'vacuuming heap'::text\n            WHEN 4 THEN 'cleaning up indexes'::text\n            WHEN 5 THEN 'truncating heap'::text\n            WHEN 6 THEN 'performing final cleanup'::text\n            ELSE NULL::text\n        END AS phase,\n    s.param2 AS heap_blks_total,\n    s.param3 AS heap_blks_scanned,\n    s.param4 AS heap_blks_vacuumed,\n    s.param5 AS index_vacuum_count,\n    s.param6 AS max_dead_tuples,\n    s.param7 AS num_dead_tuples\n   FROM (pg_stat_get_progress_info('VACUUM'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)\n     LEFT JOIN pg_database d ON ((s.datid = d.oid)));""), ('pg_stat_recovery_prefetch', ' SELECT stats_reset,\n    prefetch,\n    hit,\n    skip_init,\n    skip_new,\n    skip_fpw,\n    skip_rep,\n    wal_distance,\n    block_distance,\n    io_depth\n   FROM pg_stat_get_recovery_prefetch() s(stats_reset, prefetch, hit, skip_init, skip_new, skip_fpw, skip_rep, wal_distance, block_distance, io_depth);'), ('pg_stat_replication', ' SELECT s.pid,\n    s.usesysid,\n    u.rolname AS usename,\n    s.application_name,\n    s.client_addr,\n    s.client_hostname,\n    s.client_port,\n    s.backend_start,\n    s.backend_xmin,\n    w.state,\n    w.sent_lsn,\n    w.write_lsn,\n    w.flush_lsn,\n    w.replay_lsn,\n    w.write_lag,\n    w.flush_lag,\n    w.replay_lag,\n    w.sync_priority,\n    w.sync_state,\n    w.reply_time\n   FROM ((pg_stat_get_activity(NULL::integer) s(datid, pid, usesysid, application_name, state, query, wait_event_type, wait_event, xact_start, query_start, backend_start, state_change, client_addr, client_hostname, client_port, backend_xid, backend_xmin, backend_type, ssl, sslversion, sslcipher, sslbits, ssl_client_dn, ssl_client_serial, ssl_issuer_dn, gss_auth, gss_princ, gss_enc, gss_delegation, leader_pid, query_id)\n     JOIN pg_stat_get_wal_senders() w(pid, state, sent_lsn, write_lsn, flush_lsn, replay_lsn, write_lag, flush_lag, replay_lag, sync_priority, sync_state, reply_time) ON ((s.pid = w.pid)))\n     LEFT JOIN pg_authid u ON ((s.usesysid = u.oid)));'), ('pg_stat_replication_slots', ' SELECT s.slot_name,\n    s.spill_txns,\n    s.spill_count,\n    s.spill_bytes,\n    s.stream_txns,\n    s.stream_count,\n    s.stream_bytes,\n    s.total_txns,\n    s.total_bytes,\n    s.stats_reset\n   FROM pg_replication_slots r,\n    LATERAL pg_stat_get_replication_slot((r.slot_name)::text) s(slot_name, spill_txns, spill_count, spill_bytes, stream_txns, stream_count, stream_bytes, total_txns, total_bytes, stats_reset)\n  WHERE (r.datoid IS NOT NULL);'), ('pg_stat_slru', ' SELECT name,\n    blks_zeroed,\n    blks_hit,\n    blks_read,\n    blks_written,\n    blks_exists,\n    flushes,\n    truncates,\n    stats_reset\n   FROM pg_stat_get_slru() s(name, blks_zeroed, blks_hit, blks_read, blks_written, blks_exists, flushes, truncates, stats_reset);'), ('pg_stat_ssl', ' SELECT pid,\n    ssl,\n    sslversion AS version,\n    sslcipher AS cipher,\n    sslbits AS bits,\n    ssl_client_dn AS client_dn,\n    ssl_client_serial AS client_serial,\n    ssl_issuer_dn AS issuer_dn\n   FROM pg_stat_get_activity(NULL::integer) s(datid, pid, usesysid, application_name, state, query, wait_event_type, wait_event, xact_start, query_start, backend_start, state_change, client_addr, client_hostname, client_port, backend_xid, backend_xmin, backend_type, ssl, sslversion, sslcipher, sslbits, ssl_client_dn, ssl_client_serial, ssl_issuer_dn, gss_auth, gss_princ, gss_enc, gss_delegation, leader_pid, query_id)\n  WHERE (client_port IS NOT NULL);'), ('pg_stat_subscription', ' SELECT su.oid AS subid,\n    su.subname,\n    st.pid,\n    st.leader_pid,\n    st.relid,\n    st.received_lsn,\n    st.last_msg_send_time,\n    st.last_msg_receipt_time,\n    st.latest_end_lsn,\n    st.latest_end_time\n   FROM (pg_subscription su\n     LEFT JOIN pg_stat_get_subscription(NULL::oid) st(subid, relid, pid, leader_pid, received_lsn, last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time) ON ((st.subid = su.oid)));'), ('pg_stat_subscription_stats', ' SELECT ss.subid,\n    s.subname,\n    ss.apply_error_count,\n    ss.sync_error_count,\n    ss.stats_reset\n   FROM pg_subscription s,\n    LATERAL pg_stat_get_subscription_stats(s.oid) ss(subid, apply_error_count, sync_error_count, stats_reset);'), ('pg_stat_sys_indexes', "" SELECT relid,\n    indexrelid,\n    schemaname,\n    relname,\n    indexrelname,\n    idx_scan,\n    last_idx_scan,\n    idx_tup_read,\n    idx_tup_fetch\n   FROM pg_stat_all_indexes\n  WHERE ((schemaname = ANY (ARRAY['pg_catalog'::name, 'information_schema'::name])) OR (schemaname ~ '^pg_toast'::text));""), ('pg_stat_sys_tables', "" SELECT relid,\n    schemaname,\n    relname,\n    seq_scan,\n    last_seq_scan,\n    seq_tup_read,\n    idx_scan,\n    last_idx_scan,\n    idx_tup_fetch,\n    n_tup_ins,\n    n_tup_upd,\n    n_tup_del,\n    n_tup_hot_upd,\n    n_tup_newpage_upd,\n    n_live_tup,\n    n_dead_tup,\n    n_mod_since_analyze,\n    n_ins_since_vacuum,\n    last_vacuum,\n    last_autovacuum,\n    last_analyze,\n    last_autoanalyze,\n    vacuum_count,\n    autovacuum_count,\n    analyze_count,\n    autoanalyze_count\n   FROM pg_stat_all_tables\n  WHERE ((schemaname = ANY (ARRAY['pg_catalog'::name, 'information_schema'::name])) OR (schemaname ~ '^pg_toast'::text));""), ('pg_stat_user_functions', ' SELECT p.oid AS funcid,\n    n.nspname AS schemaname,\n    p.proname AS funcname,\n    pg_stat_get_function_calls(p.oid) AS calls,\n    pg_stat_get_function_total_time(p.oid) AS total_time,\n    pg_stat_get_function_self_time(p.oid) AS self_time\n   FROM (pg_proc p\n     LEFT JOIN pg_namespace n ON ((n.oid = p.pronamespace)))\n  WHERE ((p.prolang <> (12)::oid) AND (pg_stat_get_function_calls(p.oid) IS NOT NULL));'), ('pg_stat_user_indexes', "" SELECT relid,\n    indexrelid,\n    schemaname,\n    relname,\n    indexrelname,\n    idx_scan,\n    last_idx_scan,\n    idx_tup_read,\n    idx_tup_fetch\n   FROM pg_stat_all_indexes\n  WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));""), ('pg_stat_user_tables', "" SELECT relid,\n    schemaname,\n    relname,\n    seq_scan,\n    last_seq_scan,\n    seq_tup_read,\n    idx_scan,\n    last_idx_scan,\n    idx_tup_fetch,\n    n_tup_ins,\n    n_tup_upd,\n    n_tup_del,\n    n_tup_hot_upd,\n    n_tup_newpage_upd,\n    n_live_tup,\n    n_dead_tup,\n    n_mod_since_analyze,\n    n_ins_since_vacuum,\n    last_vacuum,\n    last_autovacuum,\n    last_analyze,\n    last_autoanalyze,\n    vacuum_count,\n    autovacuum_count,\n    analyze_count,\n    autoanalyze_count\n   FROM pg_stat_all_tables\n  WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));""), ('pg_stat_wal', ' SELECT wal_records,\n    wal_fpi,\n    wal_bytes,\n    wal_buffers_full,\n    wal_write,\n    wal_sync,\n    wal_write_time,\n    wal_sync_time,\n    stats_reset\n   FROM pg_stat_get_wal() w(wal_records, wal_fpi, wal_bytes, wal_buffers_full, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset);'), ('pg_stat_wal_receiver', ' SELECT pid,\n    status,\n    receive_start_lsn,\n    receive_start_tli,\n    written_lsn,\n    flushed_lsn,\n    received_tli,\n    last_msg_send_time,\n    last_msg_receipt_time,\n    latest_end_lsn,\n    latest_end_time,\n    slot_name,\n    sender_host,\n    sender_port,\n    conninfo\n   FROM pg_stat_get_wal_receiver() s(pid, status, receive_start_lsn, receive_start_tli, written_lsn, flushed_lsn, received_tli, last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time, slot_name, sender_host, sender_port, conninfo)\n  WHERE (pid IS NOT NULL);'), ('pg_stat_xact_all_tables', ' SELECT c.oid AS relid,\n    n.nspname AS schemaname,\n    c.relname,\n    pg_stat_get_xact_numscans(c.oid) AS seq_scan,\n    pg_stat_get_xact_tuples_returned(c.oid) AS seq_tup_read,\n    (sum(pg_stat_get_xact_numscans(i.indexrelid)))::bigint AS idx_scan,\n    ((sum(pg_stat_get_xact_tuples_fetched(i.indexrelid)))::bigint + pg_stat_get_xact_tuples_fetched(c.oid)) AS idx_tup_fetch,\n    pg_stat_get_xact_tuples_inserted(c.oid) AS n_tup_ins,\n    pg_stat_get_xact_tuples_updated(c.oid) AS n_tup_upd,\n    pg_stat_get_xact_tuples_deleted(c.oid) AS n_tup_del,\n    pg_stat_get_xact_tuples_hot_updated(c.oid) AS n_tup_hot_upd,\n    pg_stat_get_xact_tuples_newpage_updated(c.oid) AS n_tup_newpage_upd\n   FROM ((pg_class c\n     LEFT JOIN pg_index i ON ((c.oid = i.indrelid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE (c.relkind = ANY (ARRAY[\'r\'::""char"", \'t\'::""char"", \'m\'::""char"", \'p\'::""char""]))\n  GROUP BY c.oid, n.nspname, c.relname;'), ('pg_stat_xact_sys_tables', "" SELECT relid,\n    schemaname,\n    relname,\n    seq_scan,\n    seq_tup_read,\n    idx_scan,\n    idx_tup_fetch,\n    n_tup_ins,\n    n_tup_upd,\n    n_tup_del,\n    n_tup_hot_upd,\n    n_tup_newpage_upd\n   FROM pg_stat_xact_all_tables\n  WHERE ((schemaname = ANY (ARRAY['pg_catalog'::name, 'information_schema'::name])) OR (schemaname ~ '^pg_toast'::text));""), ('pg_stat_xact_user_functions', ' SELECT p.oid AS funcid,\n    n.nspname AS schemaname,\n    p.proname AS funcname,\n    pg_stat_get_xact_function_calls(p.oid) AS calls,\n    pg_stat_get_xact_function_total_time(p.oid) AS total_time,\n    pg_stat_get_xact_function_self_time(p.oid) AS self_time\n   FROM (pg_proc p\n     LEFT JOIN pg_namespace n ON ((n.oid = p.pronamespace)))\n  WHERE ((p.prolang <> (12)::oid) AND (pg_stat_get_xact_function_calls(p.oid) IS NOT NULL));'), ('pg_stat_xact_user_tables', "" SELECT relid,\n    schemaname,\n    relname,\n    seq_scan,\n    seq_tup_read,\n    idx_scan,\n    idx_tup_fetch,\n    n_tup_ins,\n    n_tup_upd,\n    n_tup_del,\n    n_tup_hot_upd,\n    n_tup_newpage_upd\n   FROM pg_stat_xact_all_tables\n  WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));""), ('pg_statio_all_indexes', ' SELECT c.oid AS relid,\n    i.oid AS indexrelid,\n    n.nspname AS schemaname,\n    c.relname,\n    i.relname AS indexrelname,\n    (pg_stat_get_blocks_fetched(i.oid) - pg_stat_get_blocks_hit(i.oid)) AS idx_blks_read,\n    pg_stat_get_blocks_hit(i.oid) AS idx_blks_hit\n   FROM (((pg_class c\n     JOIN pg_index x ON ((c.oid = x.indrelid)))\n     JOIN pg_class i ON ((i.oid = x.indexrelid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE (c.relkind = ANY (ARRAY[\'r\'::""char"", \'t\'::""char"", \'m\'::""char""]));'), ('pg_statio_all_sequences', ' SELECT c.oid AS relid,\n    n.nspname AS schemaname,\n    c.relname,\n    (pg_stat_get_blocks_fetched(c.oid) - pg_stat_get_blocks_hit(c.oid)) AS blks_read,\n    pg_stat_get_blocks_hit(c.oid) AS blks_hit\n   FROM (pg_class c\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE (c.relkind = \'S\'::""char"");'), ('pg_statio_all_tables', ' SELECT c.oid AS relid,\n    n.nspname AS schemaname,\n    c.relname,\n    (pg_stat_get_blocks_fetched(c.oid) - pg_stat_get_blocks_hit(c.oid)) AS heap_blks_read,\n    pg_stat_get_blocks_hit(c.oid) AS heap_blks_hit,\n    i.idx_blks_read,\n    i.idx_blks_hit,\n    (pg_stat_get_blocks_fetched(t.oid) - pg_stat_get_blocks_hit(t.oid)) AS toast_blks_read,\n    pg_stat_get_blocks_hit(t.oid) AS toast_blks_hit,\n    x.idx_blks_read AS tidx_blks_read,\n    x.idx_blks_hit AS tidx_blks_hit\n   FROM ((((pg_class c\n     LEFT JOIN pg_class t ON ((c.reltoastrelid = t.oid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n     LEFT JOIN LATERAL ( SELECT (sum((pg_stat_get_blocks_fetched(pg_index.indexrelid) - pg_stat_get_blocks_hit(pg_index.indexrelid))))::bigint AS idx_blks_read,\n            (sum(pg_stat_get_blocks_hit(pg_index.indexrelid)))::bigint AS idx_blks_hit\n           FROM pg_index\n          WHERE (pg_index.indrelid = c.oid)) i ON (true))\n     LEFT JOIN LATERAL ( SELECT (sum((pg_stat_get_blocks_fetched(pg_index.indexrelid) - pg_stat_get_blocks_hit(pg_index.indexrelid))))::bigint AS idx_blks_read,\n            (sum(pg_stat_get_blocks_hit(pg_index.indexrelid)))::bigint AS idx_blks_hit\n           FROM pg_index\n          WHERE (pg_index.indrelid = t.oid)) x ON (true))\n  WHERE (c.relkind = ANY (ARRAY[\'r\'::""char"", \'t\'::""char"", \'m\'::""char""]));'), ('pg_statio_sys_indexes', "" SELECT relid,\n    indexrelid,\n    schemaname,\n    relname,\n    indexrelname,\n    idx_blks_read,\n    idx_blks_hit\n   FROM pg_statio_all_indexes\n  WHERE ((schemaname = ANY (ARRAY['pg_catalog'::name, 'information_schema'::name])) OR (schemaname ~ '^pg_toast'::text));""), ('pg_statio_sys_sequences', "" SELECT relid,\n    schemaname,\n    relname,\n    blks_read,\n    blks_hit\n   FROM pg_statio_all_sequences\n  WHERE ((schemaname = ANY (ARRAY['pg_catalog'::name, 'information_schema'::name])) OR (schemaname ~ '^pg_toast'::text));""), ('pg_statio_sys_tables', "" SELECT relid,\n    schemaname,\n    relname,\n    heap_blks_read,\n    heap_blks_hit,\n    idx_blks_read,\n    idx_blks_hit,\n    toast_blks_read,\n    toast_blks_hit,\n    tidx_blks_read,\n    tidx_blks_hit\n   FROM pg_statio_all_tables\n  WHERE ((schemaname = ANY (ARRAY['pg_catalog'::name, 'information_schema'::name])) OR (schemaname ~ '^pg_toast'::text));""), ('pg_statio_user_indexes', "" SELECT relid,\n    indexrelid,\n    schemaname,\n    relname,\n    indexrelname,\n    idx_blks_read,\n    idx_blks_hit\n   FROM pg_statio_all_indexes\n  WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));""), ('pg_statio_user_sequences', "" SELECT relid,\n    schemaname,\n    relname,\n    blks_read,\n    blks_hit\n   FROM pg_statio_all_sequences\n  WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));""), ('pg_statio_user_tables', "" SELECT relid,\n    schemaname,\n    relname,\n    heap_blks_read,\n    heap_blks_hit,\n    idx_blks_read,\n    idx_blks_hit,\n    toast_blks_read,\n    toast_blks_hit,\n    tidx_blks_read,\n    tidx_blks_hit\n   FROM pg_statio_all_tables\n  WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));""), ('pg_stats', "" SELECT n.nspname AS schemaname,\n    c.relname AS tablename,\n    a.attname,\n    s.stainherit AS inherited,\n    s.stanullfrac AS null_frac,\n    s.stawidth AS avg_width,\n    s.stadistinct AS n_distinct,\n        CASE\n            WHEN (s.stakind1 = 1) THEN s.stavalues1\n            WHEN (s.stakind2 = 1) THEN s.stavalues2\n            WHEN (s.stakind3 = 1) THEN s.stavalues3\n            WHEN (s.stakind4 = 1) THEN s.stavalues4\n            WHEN (s.stakind5 = 1) THEN s.stavalues5\n            ELSE NULL::anyarray\n        END AS most_common_vals,\n        CASE\n            WHEN (s.stakind1 = 1) THEN s.stanumbers1\n            WHEN (s.stakind2 = 1) THEN s.stanumbers2\n            WHEN (s.stakind3 = 1) THEN s.stanumbers3\n            WHEN (s.stakind4 = 1) THEN s.stanumbers4\n            WHEN (s.stakind5 = 1) THEN s.stanumbers5\n            ELSE NULL::real[]\n        END AS most_common_freqs,\n        CASE\n            WHEN (s.stakind1 = 2) THEN s.stavalues1\n            WHEN (s.stakind2 = 2) THEN s.stavalues2\n            WHEN (s.stakind3 = 2) THEN s.stavalues3\n            WHEN (s.stakind4 = 2) THEN s.stavalues4\n            WHEN (s.stakind5 = 2) THEN s.stavalues5\n            ELSE NULL::anyarray\n        END AS histogram_bounds,\n        CASE\n            WHEN (s.stakind1 = 3) THEN s.stanumbers1[1]\n            WHEN (s.stakind2 = 3) THEN s.stanumbers2[1]\n            WHEN (s.stakind3 = 3) THEN s.stanumbers3[1]\n            WHEN (s.stakind4 = 3) THEN s.stanumbers4[1]\n            WHEN (s.stakind5 = 3) THEN s.stanumbers5[1]\n            ELSE NULL::real\n        END AS correlation,\n        CASE\n            WHEN (s.stakind1 = 4) THEN s.stavalues1\n            WHEN (s.stakind2 = 4) THEN s.stavalues2\n            WHEN (s.stakind3 = 4) THEN s.stavalues3\n            WHEN (s.stakind4 = 4) THEN s.stavalues4\n            WHEN (s.stakind5 = 4) THEN s.stavalues5\n            ELSE NULL::anyarray\n        END AS most_common_elems,\n        CASE\n            WHEN (s.stakind1 = 4) THEN s.stanumbers1\n            WHEN (s.stakind2 = 4) THEN s.stanumbers2\n            WHEN (s.stakind3 = 4) THEN s.stanumbers3\n            WHEN (s.stakind4 = 4) THEN s.stanumbers4\n            WHEN (s.stakind5 = 4) THEN s.stanumbers5\n            ELSE NULL::real[]\n        END AS most_common_elem_freqs,\n        CASE\n            WHEN (s.stakind1 = 5) THEN s.stanumbers1\n            WHEN (s.stakind2 = 5) THEN s.stanumbers2\n            WHEN (s.stakind3 = 5) THEN s.stanumbers3\n            WHEN (s.stakind4 = 5) THEN s.stanumbers4\n            WHEN (s.stakind5 = 5) THEN s.stanumbers5\n            ELSE NULL::real[]\n        END AS elem_count_histogram\n   FROM (((pg_statistic s\n     JOIN pg_class c ON ((c.oid = s.starelid)))\n     JOIN pg_attribute a ON (((c.oid = a.attrelid) AND (a.attnum = s.staattnum))))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE ((NOT a.attisdropped) AND has_column_privilege(c.oid, a.attnum, 'select'::text) AND ((c.relrowsecurity = false) OR (NOT row_security_active(c.oid))));""), ('pg_stats_ext', ' SELECT cn.nspname AS schemaname,\n    c.relname AS tablename,\n    sn.nspname AS statistics_schemaname,\n    s.stxname AS statistics_name,\n    pg_get_userbyid(s.stxowner) AS statistics_owner,\n    ( SELECT array_agg(a.attname ORDER BY a.attnum) AS array_agg\n           FROM (unnest(s.stxkeys) k(k)\n             JOIN pg_attribute a ON (((a.attrelid = s.stxrelid) AND (a.attnum = k.k))))) AS attnames,\n    pg_get_statisticsobjdef_expressions(s.oid) AS exprs,\n    s.stxkind AS kinds,\n    sd.stxdinherit AS inherited,\n    sd.stxdndistinct AS n_distinct,\n    sd.stxddependencies AS dependencies,\n    m.most_common_vals,\n    m.most_common_val_nulls,\n    m.most_common_freqs,\n    m.most_common_base_freqs\n   FROM (((((pg_statistic_ext s\n     JOIN pg_class c ON ((c.oid = s.stxrelid)))\n     JOIN pg_statistic_ext_data sd ON ((s.oid = sd.stxoid)))\n     LEFT JOIN pg_namespace cn ON ((cn.oid = c.relnamespace)))\n     LEFT JOIN pg_namespace sn ON ((sn.oid = s.stxnamespace)))\n     LEFT JOIN LATERAL ( SELECT array_agg(pg_mcv_list_items.""values"") AS most_common_vals,\n            array_agg(pg_mcv_list_items.nulls) AS most_common_val_nulls,\n            array_agg(pg_mcv_list_items.frequency) AS most_common_freqs,\n            array_agg(pg_mcv_list_items.base_frequency) AS most_common_base_freqs\n           FROM pg_mcv_list_items(sd.stxdmcv) pg_mcv_list_items(index, ""values"", nulls, frequency, base_frequency)) m ON ((sd.stxdmcv IS NOT NULL)))\n  WHERE ((NOT (EXISTS ( SELECT 1\n           FROM (unnest(s.stxkeys) k(k)\n             JOIN pg_attribute a ON (((a.attrelid = s.stxrelid) AND (a.attnum = k.k))))\n          WHERE (NOT has_column_privilege(c.oid, a.attnum, \'select\'::text))))) AND ((c.relrowsecurity = false) OR (NOT row_security_active(c.oid))));'), ('pg_stats_ext_exprs', ' SELECT cn.nspname AS schemaname,\n    c.relname AS tablename,\n    sn.nspname AS statistics_schemaname,\n    s.stxname AS statistics_name,\n    pg_get_userbyid(s.stxowner) AS statistics_owner,\n    stat.expr,\n    sd.stxdinherit AS inherited,\n    (stat.a).stanullfrac AS null_frac,\n    (stat.a).stawidth AS avg_width,\n    (stat.a).stadistinct AS n_distinct,\n        CASE\n            WHEN ((stat.a).stakind1 = 1) THEN (stat.a).stavalues1\n            WHEN ((stat.a).stakind2 = 1) THEN (stat.a).stavalues2\n            WHEN ((stat.a).stakind3 = 1) THEN (stat.a).stavalues3\n            WHEN ((stat.a).stakind4 = 1) THEN (stat.a).stavalues4\n            WHEN ((stat.a).stakind5 = 1) THEN (stat.a).stavalues5\n            ELSE NULL::anyarray\n        END AS most_common_vals,\n        CASE\n            WHEN ((stat.a).stakind1 = 1) THEN (stat.a).stanumbers1\n            WHEN ((stat.a).stakind2 = 1) THEN (stat.a).stanumbers2\n            WHEN ((stat.a).stakind3 = 1) THEN (stat.a).stanumbers3\n            WHEN ((stat.a).stakind4 = 1) THEN (stat.a).stanumbers4\n            WHEN ((stat.a).stakind5 = 1) THEN (stat.a).stanumbers5\n            ELSE NULL::real[]\n        END AS most_common_freqs,\n        CASE\n            WHEN ((stat.a).stakind1 = 2) THEN (stat.a).stavalues1\n            WHEN ((stat.a).stakind2 = 2) THEN (stat.a).stavalues2\n            WHEN ((stat.a).stakind3 = 2) THEN (stat.a).stavalues3\n            WHEN ((stat.a).stakind4 = 2) THEN (stat.a).stavalues4\n            WHEN ((stat.a).stakind5 = 2) THEN (stat.a).stavalues5\n            ELSE NULL::anyarray\n        END AS histogram_bounds,\n        CASE\n            WHEN ((stat.a).stakind1 = 3) THEN (stat.a).stanumbers1[1]\n            WHEN ((stat.a).stakind2 = 3) THEN (stat.a).stanumbers2[1]\n            WHEN ((stat.a).stakind3 = 3) THEN (stat.a).stanumbers3[1]\n            WHEN ((stat.a).stakind4 = 3) THEN (stat.a).stanumbers4[1]\n            WHEN ((stat.a).stakind5 = 3) THEN (stat.a).stanumbers5[1]\n            ELSE NULL::real\n        END AS correlation,\n        CASE\n            WHEN ((stat.a).stakind1 = 4) THEN (stat.a).stavalues1\n            WHEN ((stat.a).stakind2 = 4) THEN (stat.a).stavalues2\n            WHEN ((stat.a).stakind3 = 4) THEN (stat.a).stavalues3\n            WHEN ((stat.a).stakind4 = 4) THEN (stat.a).stavalues4\n            WHEN ((stat.a).stakind5 = 4) THEN (stat.a).stavalues5\n            ELSE NULL::anyarray\n        END AS most_common_elems,\n        CASE\n            WHEN ((stat.a).stakind1 = 4) THEN (stat.a).stanumbers1\n            WHEN ((stat.a).stakind2 = 4) THEN (stat.a).stanumbers2\n            WHEN ((stat.a).stakind3 = 4) THEN (stat.a).stanumbers3\n            WHEN ((stat.a).stakind4 = 4) THEN (stat.a).stanumbers4\n            WHEN ((stat.a).stakind5 = 4) THEN (stat.a).stanumbers5\n            ELSE NULL::real[]\n        END AS most_common_elem_freqs,\n        CASE\n            WHEN ((stat.a).stakind1 = 5) THEN (stat.a).stanumbers1\n            WHEN ((stat.a).stakind2 = 5) THEN (stat.a).stanumbers2\n            WHEN ((stat.a).stakind3 = 5) THEN (stat.a).stanumbers3\n            WHEN ((stat.a).stakind4 = 5) THEN (stat.a).stanumbers4\n            WHEN ((stat.a).stakind5 = 5) THEN (stat.a).stanumbers5\n            ELSE NULL::real[]\n        END AS elem_count_histogram\n   FROM (((((pg_statistic_ext s\n     JOIN pg_class c ON ((c.oid = s.stxrelid)))\n     LEFT JOIN pg_statistic_ext_data sd ON ((s.oid = sd.stxoid)))\n     LEFT JOIN pg_namespace cn ON ((cn.oid = c.relnamespace)))\n     LEFT JOIN pg_namespace sn ON ((sn.oid = s.stxnamespace)))\n     JOIN LATERAL ( SELECT unnest(pg_get_statisticsobjdef_expressions(s.oid)) AS expr,\n            unnest(sd.stxdexpr) AS a) stat ON ((stat.expr IS NOT NULL)));'), ('pg_tables', ' SELECT n.nspname AS schemaname,\n    c.relname AS tablename,\n    pg_get_userbyid(c.relowner) AS tableowner,\n    t.spcname AS tablespace,\n    c.relhasindex AS hasindexes,\n    c.relhasrules AS hasrules,\n    c.relhastriggers AS hastriggers,\n    c.relrowsecurity AS rowsecurity\n   FROM ((pg_class c\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n     LEFT JOIN pg_tablespace t ON ((t.oid = c.reltablespace)))\n  WHERE (c.relkind = ANY (ARRAY[\'r\'::""char"", \'p\'::""char""]));'), ('pg_timezone_abbrevs', ' SELECT abbrev,\n    utc_offset,\n    is_dst\n   FROM pg_timezone_abbrevs() pg_timezone_abbrevs(abbrev, utc_offset, is_dst);'), ('pg_timezone_names', ' SELECT name,\n    abbrev,\n    utc_offset,\n    is_dst\n   FROM pg_timezone_names() pg_timezone_names(name, abbrev, utc_offset, is_dst);'), ('pg_user', "" SELECT usename,\n    usesysid,\n    usecreatedb,\n    usesuper,\n    userepl,\n    usebypassrls,\n    '********'::text AS passwd,\n    valuntil,\n    useconfig\n   FROM pg_shadow;""), ('pg_user_mappings', "" SELECT u.oid AS umid,\n    s.oid AS srvid,\n    s.srvname,\n    u.umuser,\n        CASE\n            WHEN (u.umuser = (0)::oid) THEN 'public'::name\n            ELSE a.rolname\n        END AS usename,\n        CASE\n            WHEN (((u.umuser <> (0)::oid) AND (a.rolname = CURRENT_USER) AND (pg_has_role(s.srvowner, 'USAGE'::text) OR has_server_privilege(s.oid, 'USAGE'::text))) OR ((u.umuser = (0)::oid) AND pg_has_role(s.srvowner, 'USAGE'::text)) OR ( SELECT pg_authid.rolsuper\n               FROM pg_authid\n              WHERE (pg_authid.rolname = CURRENT_USER))) THEN u.umoptions\n            ELSE NULL::text[]\n        END AS umoptions\n   FROM ((pg_user_mapping u\n     JOIN pg_foreign_server s ON ((u.umserver = s.oid)))\n     LEFT JOIN pg_authid a ON ((a.oid = u.umuser)));""), ('pg_views', ' SELECT n.nspname AS schemaname,\n    c.relname AS viewname,\n    pg_get_userbyid(c.relowner) AS viewowner,\n    pg_get_viewdef(c.oid) AS definition\n   FROM (pg_class c\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE (c.relkind = \'v\'::""char"");')]"
postgresql,postgresql,"SELECT tablename, rulename, definition FROM pg_rules WHERE schemaname = 'pg_catalog' ORDER BY tablename, rulename",rules.sql,SAME,,"[('pg_settings', 'pg_settings_n', 'CREATE RULE pg_settings_n AS\n    ON UPDATE TO pg_catalog.pg_settings DO INSTEAD NOTHING;'), ('pg_settings', 'pg_settings_u', 'CREATE RULE pg_settings_u AS\n    ON UPDATE TO pg_catalog.pg_settings\n   WHERE (new.name = old.name) DO  SELECT set_config(old.name, new.setting, false) AS set_config;')]"
postgresql,postgresql,SELECT * FROM ruletest_tbl2,rules.sql,SAME,,"[(10, 10), (1000, 1000)]"
postgresql,postgresql,create rule rule_and_refint_t3_ins as on insert to rule_and_refint_t3 	where (exists (select 1 from rule_and_refint_t3 			where (((rule_and_refint_t3.id3a = new.id3a) 			and (rule_and_refint_t3.id3b = new.id3b)) 			and (rule_and_refint_t3.id3c = new.id3c)))) 	do instead update rule_and_refint_t3 set data = new.data 	where (((rule_and_refint_t3.id3a = new.id3a) 	and (rule_and_refint_t3.id3b = new.id3b)) 	and (rule_and_refint_t3.id3c = new.id3c)),rules.sql,SAME,,[]
postgresql,postgresql,create view rules_fooview as select 'rules_foo'::text,rules.sql,SAME,,[]
postgresql,postgresql,drop view rules_fooview,rules.sql,SAME,,[]
postgresql,postgresql,create view id_ordered as select * from id order by id,rules.sql,SAME,,[]
postgresql,postgresql,create rule update_id_ordered as on update to id_ordered 	do instead update id set name = new.name where id = old.id,rules.sql,SAME,,[]
postgresql,postgresql,select * from id_ordered,rules.sql,SAME,,"[(1, 'Test 1'), (2, 'Test 2'), (3, 'Test 3'), (4, 'Test 4'), (5, 'Test 5'), (6, 'Test 6')]"
postgresql,postgresql,update id_ordered set name = 'update 2' where id = 2,rules.sql,SAME,,[]
postgresql,postgresql,update id_ordered set name = 'update 4' where id = 4,rules.sql,SAME,,[]
postgresql,postgresql,update id_ordered set name = 'update 5' where id = 5,rules.sql,SAME,,[]
postgresql,postgresql,select * from id_ordered,rules.sql,SAME,,"[(1, 'Test 1'), (2, 'update 2'), (3, 'Test 3'), (4, 'update 4'), (5, 'update 5'), (6, 'Test 6')]"
postgresql,postgresql,create temp table t1 (a integer primary key),rules.sql,SAME,,[]
postgresql,postgresql,create temp table t1_1 (check (a >= 0 and a < 10)) inherits (t1),rules.sql,SAME,,[]
postgresql,postgresql,create temp table t1_2 (check (a >= 10 and a < 20)) inherits (t1),rules.sql,SAME,,[]
postgresql,postgresql,create rule t1_upd_1 as on update to t1 	where old.a >= 0 and old.a < 10 	do instead 	update t1_1 set a = new.a where a = old.a,rules.sql,SAME,,[]
postgresql,postgresql,create rule t1_upd_2 as on update to t1 	where old.a >= 10 and old.a < 20 	do instead 	update t1_2 set a = new.a where a = old.a,rules.sql,SAME,,[]
postgresql,postgresql,set constraint_exclusion = on,rules.sql,SAME,,[]
postgresql,postgresql,update t1 set a = 4 where a = 5,rules.sql,SAME,,[]
postgresql,postgresql,select * from only t1,rules.sql,SAME,,[]
postgresql,postgresql,select * from only t1_1,rules.sql,SAME,,"[(6,), (7,), (8,), (9,), (4,)]"
postgresql,postgresql,select * from only t1_2,rules.sql,SAME,,"[(10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,)]"
postgresql,postgresql,reset constraint_exclusion,rules.sql,SAME,,[]
postgresql,postgresql,create rule r1 as on update to rules_base do instead   select * from rules_base where f1 = 1 for update,rules.sql,SAME,,[]
postgresql,postgresql,update rules_base set f2 = f2 + 1,rules.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,create or replace rule r1 as on update to rules_base do instead   select * from rules_base where f1 = 11 for update of rules_base,rules.sql,SAME,,[]
postgresql,postgresql,update rules_base set f2 = f2 + 1,rules.sql,SAME,,"[(11, 12)]"
postgresql,postgresql,select pg_get_viewdef('shoe'::regclass) as unpretty,rules.sql,SAME,,"[(' SELECT sh.shoename,\n    sh.sh_avail,\n    sh.slcolor,\n    sh.slminlen,\n    (sh.slminlen * un.un_fact) AS slminlen_cm,\n    sh.slmaxlen,\n    (sh.slmaxlen * un.un_fact) AS slmaxlen_cm,\n    sh.slunit\n   FROM shoe_data sh,\n    unit un\n  WHERE (sh.slunit = un.un_name);',)]"
postgresql,postgresql,"select pg_get_viewdef('shoe'::regclass,true) as pretty",rules.sql,SAME,,"[(' SELECT sh.shoename,\n    sh.sh_avail,\n    sh.slcolor,\n    sh.slminlen,\n    sh.slminlen * un.un_fact AS slminlen_cm,\n    sh.slmaxlen,\n    sh.slmaxlen * un.un_fact AS slmaxlen_cm,\n    sh.slunit\n   FROM shoe_data sh,\n    unit un\n  WHERE sh.slunit = un.un_name;',)]"
postgresql,postgresql,"select pg_get_viewdef('shoe'::regclass,0) as prettier",rules.sql,SAME,,"[(' SELECT sh.shoename,\n    sh.sh_avail,\n    sh.slcolor,\n    sh.slminlen,\n    sh.slminlen * un.un_fact AS slminlen_cm,\n    sh.slmaxlen,\n    sh.slmaxlen * un.un_fact AS slmaxlen_cm,\n    sh.slunit\n   FROM shoe_data sh,\n    unit un\n  WHERE sh.slunit = un.un_name;',)]"
postgresql,postgresql,update rules_src set f2 = f2 + 1,rules.sql,SAME,,[]
postgresql,postgresql,update rules_src set f2 = f2 * 10,rules.sql,SAME,,[]
postgresql,postgresql,select * from rules_src,rules.sql,SAME,,"[(1, 30), (11, 130)]"
postgresql,postgresql,select * from rules_log,rules.sql,SAME,,"[(1, 2, 'old', 1), (1, 3, 'new', 2), (11, 12, 'old', 3), (11, 13, 'new', 4), (1, 3, 'old', 5), (1, 30, 'new', 6), (11, 13, 'old', 7), (11, 130, 'new', 8)]"
postgresql,postgresql,"create rule r2 as on update to rules_src do also   values(old.*, 'old'), (new.*, 'new')",rules.sql,SAME,,[]
postgresql,postgresql,update rules_src set f2 = f2 / 10,rules.sql,SAME,,"[(1, 30, 'old'), (1, 3, 'new'), (11, 130, 'old'), (11, 13, 'new')]"
postgresql,postgresql,select * from rules_src,rules.sql,SAME,,"[(1, 3), (11, 13), (22, 23), (33, 0)]"
postgresql,postgresql,select * from rules_log,rules.sql,SAME,,"[(1, 2, 'old', 1), (1, 3, 'new', 2), (11, 12, 'old', 3), (11, 13, 'new', 4), (1, 3, 'old', 5), (1, 30, 'new', 6), (11, 13, 'old', 7), (11, 130, 'new', 8), (1, 30, 'old', 9), (1, 3, 'new', 10), (11, 130, 'old', 11), (11, 13, 'new', 12), (None, None, '-', 13), (22, 23, 'new', 14), (None, None, '-', 15), (33, 0, 'new', 16)]"
postgresql,postgresql,create rule r4 as on delete to rules_src do notify rules_src_deletion,rules.sql,SAME,,[]
postgresql,postgresql,create rule r6 as on update to rules_src do instead UPDATE rules_log AS trgt SET tag = 'updated' WHERE trgt.f1 = new.f1,rules.sql,SAME,,[]
postgresql,postgresql,"create rule rr as on update to rule_t1 do instead UPDATE rule_dest trgt   SET (f2[1], f1, tag) = (SELECT new.f2, new.f1, 'updated'::varchar)   WHERE trgt.f1 = new.f1 RETURNING new.*",rules.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rule_v1 AS SELECT * FROM rule_t1,rules.sql,SAME,,[]
postgresql,postgresql,CREATE RULE v1_upd AS ON UPDATE TO rule_v1   DO ALSO UPDATE rule_t1 t   SET c = tt.a * 10   FROM (SELECT a FROM rule_t1 WHERE a = OLD.a) tt WHERE t.a = tt.a,rules.sql,SAME,,[]
postgresql,postgresql,UPDATE rule_v1 SET b = upper(b),rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rule_t1,rules.sql,SAME,,"[(1, 'A', 10), (2, 'B', 20), (11, 'XXX', 110), (12, 'XXX', 120)]"
postgresql,postgresql,CREATE VIEW rule_v1 AS SELECT * FROM rule_t1,rules.sql,SAME,,[]
postgresql,postgresql,ALTER RULE InsertRule ON rule_v1 RENAME to NewInsertRule,rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rule_v1,rules.sql,SAME,,"[(1,)]"
postgresql,postgresql,DROP VIEW rule_v1,rules.sql,SAME,,[]
postgresql,postgresql,"create view rule_v1 as values(1,2)",rules.sql,SAME,,[]
postgresql,postgresql,alter table rule_v1 rename column column2 to q2,rules.sql,SAME,,[]
postgresql,postgresql,drop view rule_v1,rules.sql,SAME,,[]
postgresql,postgresql,"create view rule_v1(x) as values(1,2)",rules.sql,SAME,,[]
postgresql,postgresql,drop view rule_v1,rules.sql,SAME,,[]
postgresql,postgresql,"create view rule_v1(x) as select * from (values(1,2)) v",rules.sql,SAME,,[]
postgresql,postgresql,drop view rule_v1,rules.sql,SAME,,[]
postgresql,postgresql,"create view rule_v1(x) as select * from (values(1,2)) v(q,w)",rules.sql,SAME,,[]
postgresql,postgresql,drop view rule_v1,rules.sql,SAME,,[]
postgresql,postgresql,"create unique index hat_data_unique_idx   on hat_data (hat_name COLLATE ""C"" bpchar_pattern_ops)",rules.sql,SAME,,[]
postgresql,postgresql,SELECT definition FROM pg_rules WHERE tablename = 'hats' ORDER BY rulename,rules.sql,SAME,,"[('CREATE RULE hat_nosert AS\n    ON INSERT TO public.hats DO INSTEAD  INSERT INTO hat_data (hat_name, hat_color)\n  VALUES (new.hat_name, new.hat_color) ON CONFLICT(hat_name COLLATE ""C"" bpchar_pattern_ops)\n  WHERE (hat_color = \'green\'::bpchar) DO NOTHING\n  RETURNING hat_data.hat_name,\n    hat_data.hat_color;',)]"
postgresql,postgresql,"SELECT tablename, rulename, definition FROM pg_rules 	WHERE tablename = 'hats'",rules.sql,SAME,,"[('hats', 'hat_nosert', 'CREATE RULE hat_nosert AS\n    ON INSERT TO public.hats DO INSTEAD  INSERT INTO hat_data (hat_name, hat_color)\n  VALUES (new.hat_name, new.hat_color) ON CONFLICT(hat_name COLLATE ""C"" bpchar_pattern_ops)\n  WHERE (hat_color = \'green\'::bpchar) DO NOTHING\n  RETURNING hat_data.hat_name,\n    hat_data.hat_color;')]"
postgresql,postgresql,DROP RULE hat_nosert ON hats,rules.sql,SAME,,[]
postgresql,postgresql,SELECT definition FROM pg_rules WHERE tablename = 'hats' ORDER BY rulename,rules.sql,SAME,,"[('CREATE RULE hat_nosert_all AS\n    ON INSERT TO public.hats DO INSTEAD  INSERT INTO hat_data (hat_name, hat_color)\n  VALUES (new.hat_name, new.hat_color) ON CONFLICT DO NOTHING\n  RETURNING hat_data.hat_name,\n    hat_data.hat_color;',)]"
postgresql,postgresql,DROP RULE hat_nosert_all ON hats,rules.sql,SAME,,[]
postgresql,postgresql,SELECT definition FROM pg_rules WHERE tablename = 'hats' ORDER BY rulename,rules.sql,SAME,,"[(""CREATE RULE hat_upsert AS\n    ON INSERT TO public.hats DO INSTEAD  INSERT INTO hat_data (hat_name, hat_color)\n  VALUES (new.hat_name, new.hat_color) ON CONFLICT(hat_name) DO UPDATE SET hat_name = hat_data.hat_name, hat_color = excluded.hat_color\n  WHERE ((excluded.hat_color <> 'forbidden'::bpchar) AND (hat_data.* <> excluded.*))\n  RETURNING hat_data.hat_name,\n    hat_data.hat_color;"",)]"
postgresql,postgresql,SELECT * FROM hat_data WHERE hat_name = 'h8',rules.sql,SAME,,"[('h8        ', 'black     ')]"
postgresql,postgresql,SELECT * FROM hat_data WHERE hat_name = 'h8',rules.sql,SAME,,"[('h8        ', 'white     ')]"
postgresql,postgresql,SELECT * FROM hat_data WHERE hat_name = 'h8',rules.sql,SAME,,"[('h8        ', 'white     ')]"
postgresql,postgresql,"SELECT tablename, rulename, definition FROM pg_rules 	WHERE tablename = 'hats'",rules.sql,SAME,,"[('hats', 'hat_upsert', ""CREATE RULE hat_upsert AS\n    ON INSERT TO public.hats DO INSTEAD  INSERT INTO hat_data (hat_name, hat_color)\n  VALUES (new.hat_name, new.hat_color) ON CONFLICT(hat_name) DO UPDATE SET hat_name = hat_data.hat_name, hat_color = excluded.hat_color\n  WHERE ((excluded.hat_color <> 'forbidden'::bpchar) AND (hat_data.* <> excluded.*))\n  RETURNING hat_data.hat_name,\n    hat_data.hat_color;"")]"
postgresql,postgresql,"SELECT * FROM hat_data WHERE hat_name IN ('h8', 'h9', 'h7') ORDER BY hat_name",rules.sql,SAME,,"[('h7        ', 'black     '), ('h8        ', 'green     '), ('h9        ', 'blue      ')]"
postgresql,postgresql,DROP RULE hat_upsert ON hats,rules.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_constraintdef(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_functiondef(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_indexdef(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_ruledef(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_statisticsobjdef(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_triggerdef(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_viewdef(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_function_arguments(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_function_identity_arguments(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_function_result(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT pg_get_function_arg_default(0, 0)",rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT pg_get_function_arg_default('pg_class'::regclass, 0)",rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_get_partkeydef(0),rules.sql,SAME,,"[(None,)]"
postgresql,postgresql,ALTER RULE rules_parted_table_insert ON rules_parted_table RENAME TO rules_parted_table_insert_redirect,rules.sql,SAME,,[]
postgresql,postgresql,"CREATE RULE rule2 AS ON UPDATE TO rule_merge1 	DO INSTEAD UPDATE rule_merge2 SET a = NEW.a, b = NEW.b 	WHERE a = OLD.a",rules.sql,SAME,,[]
postgresql,postgresql,CREATE RULE rule3 AS ON DELETE TO rule_merge1 	DO INSTEAD DELETE FROM rule_merge2 WHERE a = OLD.a,rules.sql,SAME,,[]
postgresql,postgresql,"MERGE INTO rule_merge2 t USING (SELECT 1 AS a) s 	ON t.a = s.a 	WHEN MATCHED AND t.a < 2 THEN 		UPDATE SET b = b || ' updated by merge' 	WHEN MATCHED AND t.a > 2 THEN 		DELETE 	WHEN NOT MATCHED THEN 		INSERT VALUES (s.a, '')",rules.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rule_merge1 DISABLE RULE rule1,rules.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rule_merge1 DISABLE RULE rule2,rules.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE rule_merge1 DISABLE RULE rule3,rules.sql,SAME,,[]
postgresql,postgresql,END,rules.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ruletest1 DISABLE RULE rule1,rules.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ruletest1 ENABLE RULE rule1,rules.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ruletest1 ENABLE REPLICA RULE rule1,rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ruletest1,rules.sql,SAME,,"[(2,), (4,), (5,)]"
postgresql,postgresql,SELECT * FROM ruletest2,rules.sql,SAME,,"[(1,), (3,)]"
postgresql,postgresql,CREATE VIEW ruletest_v1 WITH (security_invoker=true) AS     SELECT * FROM ruletest_t1,rules.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rules.sql,SAME,,[]
postgresql,postgresql,UPDATE ruletest_t1 t1 SET x = 0 FROM ruletest_t3 t3 WHERE t1.x = t3.x,rules.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ruletest_t1,rules.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ruletest_t2,rules.sql,SAME,,"[(1,)]"
postgresql,postgresql,DROP VIEW ruletest_v1,rules.sql,SAME,,[]
postgresql,postgresql,DROP RULE rule2 ON ruletest_t1,rules.sql,SAME,,[]
postgresql,postgresql,VACUUM,sanity_check.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, nspname  FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = relnamespace JOIN pg_attribute a ON (attrelid = c.oid AND attname = 'oid')  WHERE relkind = 'r' and c.oid < 16384      AND ((nspname ~ '^pg_') IS NOT FALSE)      AND NOT EXISTS (SELECT 1 FROM pg_index i WHERE indrelid = c.oid                      AND indkey[0] = a.attnum AND indnatts = 1                      AND indisunique AND indimmediate)",sanity_check.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relkind   FROM pg_class  WHERE relkind IN ('v', 'c', 'f', 'p', 'I')        AND relfilenode <> 0",sanity_check.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages TO 'warning',security_label.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,security_label.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW seclabel_view1 AS SELECT * FROM seclabel_tbl2,security_label.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION seclabel_four() RETURNS integer AS $$SELECT 4$$ language sql,security_label.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN seclabel_domain AS text,security_label.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION seclabel_four(),security_label.sql,SAME,,[]
postgresql,postgresql,DROP DOMAIN seclabel_domain,security_label.sql,SAME,,[]
postgresql,postgresql,DROP VIEW seclabel_view1,security_label.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO off,select.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan TO off,select.sql,SAME,,[]
postgresql,postgresql,SET enable_sort TO off,select.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,select.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,select.sql,SAME,,[]
postgresql,postgresql,RESET enable_sort,select.sql,SAME,,[]
postgresql,postgresql,select foo from (select 1 offset 0) as foo,select.sql,SAME,,"[('(1)',)]"
postgresql,postgresql,select foo from (select null offset 0) as foo,select.sql,SAME,,"[('()',)]"
postgresql,postgresql,"select foo from (select 'xyzzy',1,null offset 0) as foo",select.sql,SAME,,"[('(xyzzy,1,)',)]"
postgresql,postgresql,"VALUES (1,2), (3,4+4), (7,77.7)",select.sql,SAME,,"[(1, Decimal('2')), (3, Decimal('8')), (7, Decimal('77.7'))]"
postgresql,postgresql,CREATE TEMP TABLE nocols(),select.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM nocols n, LATERAL (VALUES(n.*)) v",select.sql,SAME,,[()]
postgresql,postgresql,CREATE TEMP TABLE foo (f1 int),select.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM foo ORDER BY f1,select.sql,SAME,,"[(1,), (3,), (7,), (10,), (42,), (None,), (None,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 ASC,select.sql,SAME,,"[(1,), (3,), (7,), (10,), (42,), (None,), (None,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 NULLS FIRST,select.sql,SAME,,"[(None,), (None,), (1,), (3,), (7,), (10,), (42,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 DESC,select.sql,SAME,,"[(None,), (None,), (42,), (10,), (7,), (3,), (1,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 DESC NULLS LAST,select.sql,SAME,,"[(42,), (10,), (7,), (3,), (1,), (None,), (None,)]"
postgresql,postgresql,CREATE INDEX fooi ON foo (f1),select.sql,SAME,,[]
postgresql,postgresql,SET enable_sort = false,select.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM foo ORDER BY f1,select.sql,SAME,,"[(1,), (3,), (7,), (10,), (42,), (None,), (None,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 NULLS FIRST,select.sql,SAME,,"[(None,), (None,), (1,), (3,), (7,), (10,), (42,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 DESC,select.sql,SAME,,"[(None,), (None,), (42,), (10,), (7,), (3,), (1,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 DESC NULLS LAST,select.sql,SAME,,"[(42,), (10,), (7,), (3,), (1,), (None,), (None,)]"
postgresql,postgresql,DROP INDEX fooi,select.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX fooi ON foo (f1 DESC),select.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM foo ORDER BY f1,select.sql,SAME,,"[(1,), (3,), (7,), (10,), (42,), (None,), (None,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 NULLS FIRST,select.sql,SAME,,"[(None,), (None,), (1,), (3,), (7,), (10,), (42,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 DESC,select.sql,SAME,,"[(None,), (None,), (42,), (10,), (7,), (3,), (1,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 DESC NULLS LAST,select.sql,SAME,,"[(42,), (10,), (7,), (3,), (1,), (None,), (None,)]"
postgresql,postgresql,DROP INDEX fooi,select.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX fooi ON foo (f1 DESC NULLS LAST),select.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM foo ORDER BY f1,select.sql,SAME,,"[(1,), (3,), (7,), (10,), (42,), (None,), (None,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 NULLS FIRST,select.sql,SAME,,"[(None,), (None,), (1,), (3,), (7,), (10,), (42,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 DESC,select.sql,SAME,,"[(None,), (None,), (42,), (10,), (7,), (3,), (1,)]"
postgresql,postgresql,SELECT * FROM foo ORDER BY f1 DESC NULLS LAST,select.sql,SAME,,"[(42,), (10,), (7,), (3,), (1,), (None,), (None,)]"
postgresql,postgresql,SET enable_indexscan TO off,select.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,select.sql,SAME,,[]
postgresql,postgresql,SELECT 1 AS x ORDER BY x,select.sql,SAME,,"[(1,)]"
postgresql,postgresql,"create function sillysrf(int) returns setof int as   'values (1),(10),(2),($1)' language sql immutable",select.sql,SAME,,[]
postgresql,postgresql,select sillysrf(42),select.sql,SAME,,"[(1,), (10,), (2,), (42,)]"
postgresql,postgresql,select sillysrf(-1) order by 1,select.sql,SAME,,"[(-1,), (1,), (2,), (10,)]"
postgresql,postgresql,drop function sillysrf(int),select.sql,SAME,,[]
postgresql,postgresql,"select * from (values (2),(null),(1)) v(k) where k = k order by k",select.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,"select * from (values (2),(null),(1)) v(k) where k = k",select.sql,SAME,,"[(2,), (1,)]"
postgresql,postgresql,explain (costs off) select * from list_parted_tbl,select.sql,SAME,,"[('Result',), ('  One-Time Filter: false',)]"
postgresql,postgresql,SET work_mem='64kB',select_distinct.sql,SAME,,[]
postgresql,postgresql,SET enable_hashagg=FALSE,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET jit_above_cost=0,select_distinct.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (costs off) SELECT DISTINCT g%1000 FROM generate_series(0,9999) g",select_distinct.sql,SAME,,"[('Unique',), ('  ->  Sort',), ('        Sort Key: ((g % 1000))',), ('        ->  Function Scan on generate_series g',)]"
postgresql,postgresql,SET jit_above_cost TO DEFAULT,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan = 0,select_distinct.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET enable_hashagg=TRUE,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET enable_sort=FALSE,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET jit_above_cost=0,select_distinct.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (costs off) SELECT DISTINCT g%1000 FROM generate_series(0,9999) g",select_distinct.sql,SAME,,"[('HashAggregate',), ('  Group Key: (g % 1000)',), ('  ->  Function Scan on generate_series g',)]"
postgresql,postgresql,SET jit_above_cost TO DEFAULT,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET enable_sort=TRUE,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET work_mem TO DEFAULT,select_distinct.sql,SAME,,[]
postgresql,postgresql,(SELECT * FROM distinct_hash_1 EXCEPT SELECT * FROM distinct_group_1)   UNION ALL (SELECT * FROM distinct_group_1 EXCEPT SELECT * FROM distinct_hash_1),select_distinct.sql,SAME,,[]
postgresql,postgresql,(SELECT * FROM distinct_hash_1 EXCEPT SELECT * FROM distinct_group_1)   UNION ALL (SELECT * FROM distinct_group_1 EXCEPT SELECT * FROM distinct_hash_1),select_distinct.sql,SAME,,[]
postgresql,postgresql,SET parallel_tuple_cost=0,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET parallel_setup_cost=0,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET min_parallel_table_scan_size=0,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET max_parallel_workers_per_gather=2,select_distinct.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE FUNCTION distinct_func(a INT) RETURNS INT AS $$   BEGIN     RETURN a;   END; $$ LANGUAGE plpgsql PARALLEL UNSAFE,select_distinct.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE FUNCTION distinct_func(a INT) RETURNS INT AS $$   BEGIN     RETURN a;   END; $$ LANGUAGE plpgsql PARALLEL SAFE,select_distinct.sql,SAME,,[]
postgresql,postgresql,RESET max_parallel_workers_per_gather,select_distinct.sql,SAME,,[]
postgresql,postgresql,RESET min_parallel_table_scan_size,select_distinct.sql,SAME,,[]
postgresql,postgresql,RESET parallel_setup_cost,select_distinct.sql,SAME,,[]
postgresql,postgresql,RESET parallel_tuple_cost,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET parallel_setup_cost=0,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET min_parallel_table_scan_size=0,select_distinct.sql,SAME,,[]
postgresql,postgresql,SET max_parallel_workers_per_gather=2,select_distinct.sql,SAME,,[]
postgresql,postgresql,RESET max_parallel_workers_per_gather,select_distinct.sql,SAME,,[]
postgresql,postgresql,RESET min_parallel_table_scan_size,select_distinct.sql,SAME,,[]
postgresql,postgresql,RESET parallel_setup_cost,select_distinct.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE disttable (f1 integer),select_distinct.sql,SAME,,[]
postgresql,postgresql,"SELECT f1, f1 IS DISTINCT FROM 2 as ""not 2"" FROM disttable",select_distinct.sql,SAME,,"[(1, True), (2, False), (3, True), (None, True)]"
postgresql,postgresql,"SELECT f1, f1 IS DISTINCT FROM NULL as ""not null"" FROM disttable",select_distinct.sql,SAME,,"[(1, True), (2, True), (3, True), (None, False)]"
postgresql,postgresql,"SELECT f1, f1 IS DISTINCT FROM f1 as ""false"" FROM disttable",select_distinct.sql,SAME,,"[(1, False), (2, False), (3, False), (None, False)]"
postgresql,postgresql,"SELECT f1, f1 IS DISTINCT FROM f1+1 as ""not null"" FROM disttable",select_distinct.sql,SAME,,"[(1, True), (2, True), (3, True), (None, False)]"
postgresql,postgresql,"SELECT 1 IS DISTINCT FROM 2 as ""yes""",select_distinct.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 2 IS DISTINCT FROM 2 as ""no""",select_distinct.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 2 IS DISTINCT FROM null as ""yes""",select_distinct.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT null IS DISTINCT FROM null as ""no""",select_distinct.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 1 IS NOT DISTINCT FROM 2 as ""no""",select_distinct.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 2 IS NOT DISTINCT FROM 2 as ""yes""",select_distinct.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 2 IS NOT DISTINCT FROM null as ""no""",select_distinct.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT null IS NOT DISTINCT FROM null as ""yes""",select_distinct.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT b, c FROM test_having 	GROUP BY b, c HAVING count(*) = 1 ORDER BY b, c",select_having.sql,SAME,,"[(1, 'XXXX    '), (3, 'bbbb    ')]"
postgresql,postgresql,"SELECT b, c FROM test_having 	GROUP BY b, c HAVING b = 3 ORDER BY b, c",select_having.sql,SAME,,"[(3, 'BBBB    '), (3, 'bbbb    ')]"
postgresql,postgresql,"SELECT lower(c), count(c) FROM test_having 	GROUP BY lower(c) HAVING count(*) > 2 OR min(a) = max(a) 	ORDER BY lower(c)",select_having.sql,SAME,,"[('bbbb', 3), ('cccc', 4), ('xxxx', 1)]"
postgresql,postgresql,"SELECT c, max(a) FROM test_having 	GROUP BY c HAVING count(*) > 2 OR min(a) = max(a) 	ORDER BY c",select_having.sql,SAME,,"[('XXXX    ', 0), ('bbbb    ', 5)]"
postgresql,postgresql,"SELECT min(a), max(a) FROM test_having HAVING min(a) = max(a)",select_having.sql,SAME,,[]
postgresql,postgresql,"SELECT min(a), max(a) FROM test_having HAVING min(a) < max(a)",select_having.sql,SAME,,"[(0, 9)]"
postgresql,postgresql,SELECT 1 AS one FROM test_having HAVING 1 > 2,select_having.sql,SAME,,[]
postgresql,postgresql,SELECT 1 AS one FROM test_having HAVING 1 < 2,select_having.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT 1 AS one FROM test_having WHERE 1/a = 1 HAVING 1 < 2,select_having.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT c, count(*) FROM test_missing_target GROUP BY test_missing_target.c ORDER BY c",select_implicit.sql,SAME,,"[('ABAB    ', 2), ('BBBB    ', 2), ('CCCC    ', 2), ('XXXX    ', 1), ('bbbb    ', 1), ('cccc    ', 2)]"
postgresql,postgresql,SELECT count(*) FROM test_missing_target GROUP BY test_missing_target.c ORDER BY c,select_implicit.sql,SAME,,"[(2,), (2,), (2,), (1,), (1,), (2,)]"
postgresql,postgresql,SELECT count(*) FROM test_missing_target GROUP BY b ORDER BY b,select_implicit.sql,SAME,,"[(1,), (2,), (3,), (4,)]"
postgresql,postgresql,"SELECT test_missing_target.b, count(*)   FROM test_missing_target GROUP BY b ORDER BY b",select_implicit.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4)]"
postgresql,postgresql,SELECT c FROM test_missing_target ORDER BY a,select_implicit.sql,SAME,,"[('XXXX    ',), ('ABAB    ',), ('ABAB    ',), ('BBBB    ',), ('BBBB    ',), ('bbbb    ',), ('cccc    ',), ('cccc    ',), ('CCCC    ',), ('CCCC    ',)]"
postgresql,postgresql,SELECT count(*) FROM test_missing_target GROUP BY b ORDER BY b desc,select_implicit.sql,SAME,,"[(4,), (3,), (2,), (1,)]"
postgresql,postgresql,SELECT count(*) FROM test_missing_target ORDER BY 1 desc,select_implicit.sql,SAME,,"[(10,)]"
postgresql,postgresql,"SELECT c, count(*) FROM test_missing_target GROUP BY 1 ORDER BY 1",select_implicit.sql,SAME,,"[('ABAB    ', 2), ('BBBB    ', 2), ('CCCC    ', 2), ('XXXX    ', 1), ('bbbb    ', 1), ('cccc    ', 2)]"
postgresql,postgresql,"SELECT a, a FROM test_missing_target 	ORDER BY a",select_implicit.sql,SAME,,"[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]"
postgresql,postgresql,"SELECT a/2, a/2 FROM test_missing_target 	ORDER BY a/2",select_implicit.sql,SAME,,"[(0, 0), (0, 0), (1, 1), (1, 1), (2, 2), (2, 2), (3, 3), (3, 3), (4, 4), (4, 4)]"
postgresql,postgresql,"SELECT a/2, a/2 FROM test_missing_target 	GROUP BY a/2 ORDER BY a/2",select_implicit.sql,SAME,,"[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]"
postgresql,postgresql,"SELECT x.b, count(*) FROM test_missing_target x, test_missing_target y 	WHERE x.a = y.a 	GROUP BY x.b ORDER BY x.b",select_implicit.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4)]"
postgresql,postgresql,"SELECT count(*) FROM test_missing_target x, test_missing_target y 	WHERE x.a = y.a 	GROUP BY x.b ORDER BY x.b",select_implicit.sql,SAME,,"[(1,), (2,), (3,), (4,)]"
postgresql,postgresql,SELECT * FROM test_missing_target2,select_implicit.sql,SAME,,"[(1,), (2,), (3,), (4,)]"
postgresql,postgresql,"SELECT a%2, count(b) FROM test_missing_target GROUP BY test_missing_target.a%2 ORDER BY test_missing_target.a%2",select_implicit.sql,SAME,,"[(0, 5), (1, 5)]"
postgresql,postgresql,SELECT count(c) FROM test_missing_target GROUP BY lower(test_missing_target.c) ORDER BY lower(test_missing_target.c),select_implicit.sql,SAME,,"[(2,), (3,), (4,), (1,)]"
postgresql,postgresql,SELECT count(b) FROM test_missing_target GROUP BY b/2 ORDER BY b/2,select_implicit.sql,SAME,,"[(1,), (5,), (4,)]"
postgresql,postgresql,"SELECT lower(test_missing_target.c), count(c)   FROM test_missing_target GROUP BY lower(c) ORDER BY lower(c)",select_implicit.sql,SAME,,"[('abab', 2), ('bbbb', 3), ('cccc', 4), ('xxxx', 1)]"
postgresql,postgresql,SELECT a FROM test_missing_target ORDER BY upper(d),select_implicit.sql,SAME,,"[(0,), (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,)]"
postgresql,postgresql,SELECT count(b) FROM test_missing_target 	GROUP BY (b + 1) / 2 ORDER BY (b + 1) / 2 desc,select_implicit.sql,SAME,,"[(7,), (3,)]"
postgresql,postgresql,"SELECT x.b/2, count(x.b) FROM test_missing_target x, test_missing_target y 	WHERE x.a = y.a 	GROUP BY x.b/2 ORDER BY x.b/2",select_implicit.sql,SAME,,"[(0, 1), (1, 5), (2, 4)]"
postgresql,postgresql,SELECT * FROM test_missing_target3,select_implicit.sql,SAME,,"[(1,), (5,), (4,)]"
postgresql,postgresql,CREATE SCHEMA selinto_schema,select_into.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON SCHEMA selinto_schema TO public,select_into.sql,SAME,,[]
postgresql,postgresql,"PREPARE data_sel AS SELECT generate_series(1,3)",select_into.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,select_into.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,select_into.sql,SAME,,[]
postgresql,postgresql,DEALLOCATE data_sel,select_into.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA selinto_schema CASCADE,select_into.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ctas_nodata,select_into.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,SELECT * FROM ctas_nodata_2,select_into.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ctas_nodata_3,select_into.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,SELECT * FROM ctas_nodata_4,select_into.sql,SAME,,[]
postgresql,postgresql,PREPARE ctas_ine_query AS SELECT 1 / 0,select_into.sql,SAME,,[]
postgresql,postgresql,begin,select_parallel.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost=0,select_parallel.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost=0,select_parallel.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size=0,select_parallel.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather=4,select_parallel.sql,SAME,,[]
postgresql,postgresql,rollback,select_parallel.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW my_property_normal AS        SELECT * FROM customer WHERE name = current_user,select_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW my_property_secure WITH (security_barrier) AS        SELECT * FROM customer WHERE name = current_user,select_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW my_credit_card_normal AS        SELECT * FROM customer l NATURAL JOIN credit_card r        WHERE l.name = current_user,select_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW my_credit_card_secure WITH (security_barrier) AS        SELECT * FROM customer l NATURAL JOIN credit_card r        WHERE l.name = current_user,select_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW my_credit_card_usage_normal AS        SELECT * FROM my_credit_card_secure l NATURAL JOIN credit_usage r,select_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW my_credit_card_usage_secure WITH (security_barrier) AS        SELECT * FROM my_credit_card_secure l NATURAL JOIN credit_usage r,select_views.sql,SAME,,[]
postgresql,postgresql,GRANT SELECT ON my_property_normal TO public,select_views.sql,SAME,,[]
postgresql,postgresql,GRANT SELECT ON my_property_secure TO public,select_views.sql,SAME,,[]
postgresql,postgresql,GRANT SELECT ON my_credit_card_normal TO public,select_views.sql,SAME,,[]
postgresql,postgresql,GRANT SELECT ON my_credit_card_secure TO public,select_views.sql,SAME,,[]
postgresql,postgresql,GRANT SELECT ON my_credit_card_usage_normal TO public,select_views.sql,SAME,,[]
postgresql,postgresql,GRANT SELECT ON my_credit_card_usage_secure TO public,select_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,select_views.sql,SAME,,[]
postgresql,postgresql,ALTER VIEW my_property_normal SET (security_barrier=true),select_views.sql,SAME,,[]
postgresql,postgresql,ALTER VIEW my_property_secure SET (security_barrier=false),select_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,select_views.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test5 AS integer,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test6 AS smallint,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test7 AS bigint,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test8 AS integer MAXVALUE 100000,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test9 AS integer INCREMENT BY -1,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test10 AS integer MINVALUE -100000 START 1,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test11 AS smallint,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test12 AS smallint INCREMENT -1,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test13 AS smallint MINVALUE -32768,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test14 AS smallint MAXVALUE 32767 INCREMENT -1,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test5 AS smallint,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test8 AS smallint MAXVALUE 20000,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test9 AS smallint,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test10 AS smallint MINVALUE -20000,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test11 AS int,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test12 AS int,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test13 AS int,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test14 AS int,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM serialTest1,sequence.sql,SAME,,"[('foo', 1), ('bar', 2), ('force', 100)]"
postgresql,postgresql,"SELECT pg_get_serial_sequence('serialTest1', 'f2')",sequence.sql,SAME,,"[('public.serialtest1_f2_seq',)]"
postgresql,postgresql,SELECT * FROM serialTest2 ORDER BY f2 ASC,sequence.sql,SAME,,"[('test_min_vals', -2147483648, -32768, -32768, -9223372036854775808, -9223372036854775808), ('test_defaults', 1, 1, 1, 1, 1), ('test_max_vals', 2147483647, 32767, 32767, 9223372036854775807, 9223372036854775807)]"
postgresql,postgresql,SELECT nextval('serialTest2_f2_seq'),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT nextval('serialTest2_f3_seq'),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT nextval('serialTest2_f4_seq'),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT nextval('serialTest2_f5_seq'),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT nextval('serialTest2_f6_seq'),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,CREATE SEQUENCE sequence_test,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE IF NOT EXISTS sequence_test,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('sequence_test'::text),sequence.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT nextval('sequence_test'::regclass),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT currval('sequence_test'::text),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT currval('sequence_test'::regclass),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT setval('sequence_test'::text, 32)",sequence.sql,SAME,,"[(32,)]"
postgresql,postgresql,SELECT nextval('sequence_test'::regclass),sequence.sql,SAME,,"[(33,)]"
postgresql,postgresql,"SELECT setval('sequence_test'::text, 99, false)",sequence.sql,SAME,,"[(99,)]"
postgresql,postgresql,SELECT nextval('sequence_test'::regclass),sequence.sql,SAME,,"[(99,)]"
postgresql,postgresql,"SELECT setval('sequence_test'::regclass, 32)",sequence.sql,SAME,,"[(32,)]"
postgresql,postgresql,SELECT nextval('sequence_test'::text),sequence.sql,SAME,,"[(33,)]"
postgresql,postgresql,"SELECT setval('sequence_test'::regclass, 99, false)",sequence.sql,SAME,,"[(99,)]"
postgresql,postgresql,SELECT nextval('sequence_test'::text),sequence.sql,SAME,,"[(99,)]"
postgresql,postgresql,DISCARD SEQUENCES,sequence.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE sequence_test,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE foo_seq,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE foo_seq RENAME TO foo_seq_new,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM foo_seq_new,sequence.sql,SAME,,"[(1, 0, False)]"
postgresql,postgresql,SELECT nextval('foo_seq_new'),sequence.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT nextval('foo_seq_new'),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT last_value, log_cnt IN (31, 32) AS log_cnt_ok, is_called FROM foo_seq_new",sequence.sql,SAME,,"[(2, True, True)]"
postgresql,postgresql,DROP SEQUENCE foo_seq_new,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE serialtest1_f2_seq RENAME TO serialtest1_f2_foo,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM serialTest1,sequence.sql,SAME,,"[('foo', 1), ('bar', 2), ('force', 100), ('more', 3)]"
postgresql,postgresql,CREATE TEMP SEQUENCE myseq2,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP SEQUENCE myseq3,sequence.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE t1 (   f1 serial,   f2 int DEFAULT nextval('myseq2'),   f3 int DEFAULT nextval('myseq3'::text) )",sequence.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE myseq3,sequence.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE myseq2,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE IF EXISTS sequence_test2 RESTART WITH 24   INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test2 START WITH 32,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE sequence_test4 INCREMENT BY -1,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(32,)]"
postgresql,postgresql,SELECT nextval('sequence_test4'),sequence.sql,SAME,,"[(-1,)]"
postgresql,postgresql,ALTER SEQUENCE sequence_test2 RESTART,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(32,)]"
postgresql,postgresql,ALTER SEQUENCE sequence_test2 RESTART WITH 24   INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(24,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(28,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(32,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(36,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(5,)]"
postgresql,postgresql,ALTER SEQUENCE sequence_test2 RESTART WITH 24   NO CYCLE,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(24,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(28,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(32,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(36,)]"
postgresql,postgresql,ALTER SEQUENCE sequence_test2 RESTART WITH -24 START WITH -24   INCREMENT BY -4 MINVALUE -36 MAXVALUE -5 CYCLE,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(-24,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(-28,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(-32,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(-36,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(-5,)]"
postgresql,postgresql,ALTER SEQUENCE sequence_test2 RESTART WITH -24   NO CYCLE,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(-24,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(-28,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(-32,)]"
postgresql,postgresql,SELECT nextval('sequence_test2'),sequence.sql,SAME,,"[(-36,)]"
postgresql,postgresql,ALTER SEQUENCE IF EXISTS sequence_test2 RESTART WITH 32 START WITH 32   INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE,sequence.sql,SAME,,[]
postgresql,postgresql,"SELECT setval('sequence_test2', 5)",sequence.sql,SAME,,"[(5,)]"
postgresql,postgresql,CREATE SEQUENCE sequence_test3,sequence.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.sequences   WHERE sequence_name ~ ANY(ARRAY['sequence_test', 'serialtest'])   ORDER BY sequence_name ASC",sequence.sql,SAME,,"[('test_db', 'public', 'sequence_test10', 'smallint', 16, 2, 0, '1', '-20000', '32767', '1', 'NO'), ('test_db', 'public', 'sequence_test11', 'integer', 32, 2, 0, '1', '1', '2147483647', '1', 'NO'), ('test_db', 'public', 'sequence_test12', 'integer', 32, 2, 0, '-1', '-2147483648', '-1', '-1', 'NO'), ('test_db', 'public', 'sequence_test13', 'integer', 32, 2, 0, '-32768', '-2147483648', '2147483647', '1', 'NO'), ('test_db', 'public', 'sequence_test14', 'integer', 32, 2, 0, '32767', '-2147483648', '2147483647', '-1', 'NO'), ('test_db', 'public', 'sequence_test2', 'bigint', 64, 2, 0, '32', '5', '36', '4', 'YES'), ('test_db', 'public', 'sequence_test3', 'bigint', 64, 2, 0, '1', '1', '9223372036854775807', '1', 'NO'), ('test_db', 'public', 'sequence_test4', 'bigint', 64, 2, 0, '-1', '-9223372036854775808', '-1', '-1', 'NO'), ('test_db', 'public', 'sequence_test5', 'smallint', 16, 2, 0, '1', '1', '32767', '1', 'NO'), ('test_db', 'public', 'sequence_test6', 'smallint', 16, 2, 0, '1', '1', '32767', '1', 'NO'), ('test_db', 'public', 'sequence_test7', 'bigint', 64, 2, 0, '1', '1', '9223372036854775807', '1', 'NO'), ('test_db', 'public', 'sequence_test8', 'smallint', 16, 2, 0, '1', '1', '20000', '1', 'NO'), ('test_db', 'public', 'sequence_test9', 'smallint', 16, 2, 0, '-1', '-32768', '-1', '-1', 'NO'), ('test_db', 'public', 'serialtest1_f2_foo', 'integer', 32, 2, 0, '1', '1', '2147483647', '1', 'NO'), ('test_db', 'public', 'serialtest2_f2_seq', 'integer', 32, 2, 0, '1', '1', '2147483647', '1', 'NO'), ('test_db', 'public', 'serialtest2_f3_seq', 'smallint', 16, 2, 0, '1', '1', '32767', '1', 'NO'), ('test_db', 'public', 'serialtest2_f4_seq', 'smallint', 16, 2, 0, '1', '1', '32767', '1', 'NO'), ('test_db', 'public', 'serialtest2_f5_seq', 'bigint', 64, 2, 0, '1', '1', '9223372036854775807', '1', 'NO'), ('test_db', 'public', 'serialtest2_f6_seq', 'bigint', 64, 2, 0, '1', '1', '9223372036854775807', '1', 'NO')]"
postgresql,postgresql,"SELECT schemaname, sequencename, start_value, min_value, max_value, increment_by, cycle, cache_size, last_value FROM pg_sequences WHERE sequencename ~ ANY(ARRAY['sequence_test', 'serialtest'])   ORDER BY sequencename ASC",sequence.sql,SAME,,"[('public', 'sequence_test10', 1, -20000, 32767, 1, False, 1, None), ('public', 'sequence_test11', 1, 1, 2147483647, 1, False, 1, None), ('public', 'sequence_test12', -1, -2147483648, -1, -1, False, 1, None), ('public', 'sequence_test13', -32768, -2147483648, 2147483647, 1, False, 1, None), ('public', 'sequence_test14', 32767, -2147483648, 2147483647, -1, False, 1, None), ('public', 'sequence_test2', 32, 5, 36, 4, True, 1, 5), ('public', 'sequence_test3', 1, 1, 9223372036854775807, 1, False, 1, None), ('public', 'sequence_test4', -1, -9223372036854775808, -1, -1, False, 1, -1), ('public', 'sequence_test5', 1, 1, 32767, 1, False, 1, None), ('public', 'sequence_test6', 1, 1, 32767, 1, False, 1, None), ('public', 'sequence_test7', 1, 1, 9223372036854775807, 1, False, 1, None), ('public', 'sequence_test8', 1, 1, 20000, 1, False, 1, None), ('public', 'sequence_test9', -1, -32768, -1, -1, False, 1, None), ('public', 'serialtest1_f2_foo', 1, 1, 2147483647, 1, False, 1, 3), ('public', 'serialtest2_f2_seq', 1, 1, 2147483647, 1, False, 1, 2), ('public', 'serialtest2_f3_seq', 1, 1, 32767, 1, False, 1, 2), ('public', 'serialtest2_f4_seq', 1, 1, 32767, 1, False, 1, 2), ('public', 'serialtest2_f5_seq', 1, 1, 9223372036854775807, 1, False, 1, 2), ('public', 'serialtest2_f6_seq', 1, 1, 9223372036854775807, 1, False, 1, 2)]"
postgresql,postgresql,SELECT * FROM pg_sequence_parameters('sequence_test4'::regclass),sequence.sql,SAME,,"[(-1, -9223372036854775808, -1, -1, False, 1, 20)]"
postgresql,postgresql,COMMENT ON SEQUENCE sequence_test2 IS 'will work',sequence.sql,SAME,,[]
postgresql,postgresql,COMMENT ON SEQUENCE sequence_test2 IS NULL,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE seq,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('seq'),sequence.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT lastval(),sequence.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT setval('seq', 99)",sequence.sql,SAME,,"[(99,)]"
postgresql,postgresql,SELECT lastval(),sequence.sql,SAME,,"[(99,)]"
postgresql,postgresql,DISCARD SEQUENCES,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE seq2,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('seq2'),sequence.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT lastval(),sequence.sql,SAME,,"[(1,)]"
postgresql,postgresql,DROP SEQUENCE seq2,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE UNLOGGED SEQUENCE sequence_test_unlogged,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test_unlogged SET LOGGED,sequence.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE sequence_test_unlogged SET UNLOGGED,sequence.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE sequence_test_unlogged,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE TEMPORARY SEQUENCE sequence_test_temp1,sequence.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('sequence_test_temp1'),sequence.sql,SAME,,"[(1,)]"
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ ONLY,sequence.sql,SAME,,[]
postgresql,postgresql,"SELECT setval('sequence_test_temp1', 1)",sequence.sql,SAME,,"[(1,)]"
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,BEGIN,sequence.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,sequence.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM information_schema.sequences WHERE sequence_name IN   ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',    'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')   ORDER BY sequence_name ASC",sequence.sql,SAME,,"[('test_db', 'public', 'sequence_test2', 'bigint', 64, 2, 0, '32', '5', '36', '4', 'YES')]"
postgresql,postgresql,DROP SEQUENCE seq,sequence.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE test_seq1 CACHE 10,sequence.sql,SAME,,[]
postgresql,postgresql,SELECT nextval('test_seq1'),sequence.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT nextval('test_seq1'),sequence.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT nextval('test_seq1'),sequence.sql,SAME,,"[(3,)]"
postgresql,postgresql,DROP SEQUENCE test_seq1,sequence.sql,SAME,,[]
postgresql,postgresql,create index spgist_point_idx on spgist_point_tbl using spgist(p) with (fillfactor = 75),spgist.sql,SAME,,[]
postgresql,postgresql,delete from spgist_point_tbl where id < 5,spgist.sql,SAME,,[]
postgresql,postgresql,vacuum spgist_point_tbl,spgist.sql,SAME,,[]
postgresql,postgresql,delete from spgist_point_tbl where id % 2 = 1,spgist.sql,SAME,,[]
postgresql,postgresql,delete from spgist_point_tbl where id < 10000,spgist.sql,SAME,,[]
postgresql,postgresql,vacuum spgist_point_tbl,spgist.sql,SAME,,[]
postgresql,postgresql,create index spgist_box_idx on spgist_box_tbl using spgist (b),spgist.sql,SAME,,[]
postgresql,postgresql,"select count(*)   from (values (point(5,5)),(point(8,8)),(point(12,12))) v(p)  where exists(select * from spgist_box_tbl b where b.b && box(v.p,v.p))",spgist.sql,SAME,,"[(3,)]"
postgresql,postgresql,create index spgist_text_idx on spgist_text_tbl using spgist(t),spgist.sql,SAME,,[]
postgresql,postgresql,alter index spgist_point_idx set (fillfactor = 90),spgist.sql,SAME,,[]
postgresql,postgresql,reindex index spgist_point_idx,spgist.sql,SAME,,[]
postgresql,postgresql,create domain spgist_text as varchar,spgist.sql,SAME,,[]
postgresql,postgresql,create index spgist_domain_idx on spgist_domain_tbl using spgist(f1),spgist.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from spgist_domain_tbl where f1 = 'fo',spgist.sql,SAME,,"[('Bitmap Heap Scan on spgist_domain_tbl',), (""  Recheck Cond: ((f1)::text = 'fo'::text)"",), ('  ->  Bitmap Index Scan on spgist_domain_idx',), (""        Index Cond: ((f1)::text = 'fo'::text)"",)]"
postgresql,postgresql,select * from spgist_domain_tbl where f1 = 'fo',spgist.sql,SAME,,"[('fo',)]"
postgresql,postgresql,"create unlogged table spgist_unlogged_tbl(id serial, b box)",spgist.sql,SAME,,[]
postgresql,postgresql,create index spgist_unlogged_idx on spgist_unlogged_tbl using spgist (b),spgist.sql,SAME,,[]
postgresql,postgresql,SELECT JSON(NULL),sqljson.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT JSON('{ ""a"" : 1 } ')",sqljson.sql,SAME,,"[({'a': 1},)]"
postgresql,postgresql,"SELECT pg_typeof(JSON('{ ""a"" : 1 } '))",sqljson.sql,SAME,,"[('json',)]"
postgresql,postgresql,SELECT JSON('   1   '::json),sqljson.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT JSON('   1   '::jsonb),sqljson.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT JSON('{""a"": 1, ""a"": 2}')",sqljson.sql,SAME,,"[({'a': 2},)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123')",sqljson.sql,SAME,,"[('Result',), (""  Output: '123'::json"",)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123')",sqljson.sql,SAME,,"[('Result',), (""  Output: '123'::json"",)]"
postgresql,postgresql,SELECT pg_typeof(JSON('123')),sqljson.sql,SAME,,"[('json',)]"
postgresql,postgresql,SELECT JSON_OBJECT(),sqljson.sql,SAME,,"[({},)]"
postgresql,postgresql,SELECT JSON_OBJECT(RETURNING json),sqljson.sql,SAME,,"[({},)]"
postgresql,postgresql,SELECT JSON_OBJECT(RETURNING json FORMAT JSON),sqljson.sql,SAME,,"[({},)]"
postgresql,postgresql,SELECT JSON_OBJECT(RETURNING jsonb),sqljson.sql,SAME,,"[({},)]"
postgresql,postgresql,SELECT JSON_OBJECT(RETURNING jsonb FORMAT JSON),sqljson.sql,SAME,,"[({},)]"
postgresql,postgresql,SELECT JSON_OBJECT(RETURNING text),sqljson.sql,SAME,,"[('{}',)]"
postgresql,postgresql,SELECT JSON_OBJECT(RETURNING text FORMAT JSON),sqljson.sql,SAME,,"[('{}',)]"
postgresql,postgresql,SELECT JSON_OBJECT(RETURNING bytea),sqljson.sql,SAME,,"[(<memory at 0x126577b80>,)]"
postgresql,postgresql,SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON),sqljson.sql,SAME,,"[(<memory at 0x126577940>,)]"
postgresql,postgresql,SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF8),sqljson.sql,SAME,,"[(<memory at 0x126577dc0>,)]"
postgresql,postgresql,SELECT JSON_OBJECT('foo': NULL::json FORMAT JSON),sqljson.sql,SAME,,"[({'foo': None},)]"
postgresql,postgresql,SELECT JSON_OBJECT('foo': NULL::jsonb FORMAT JSON),sqljson.sql,SAME,,"[({'foo': None},)]"
postgresql,postgresql,SELECT JSON_OBJECT('a': 2 + 3),sqljson.sql,SAME,,"[({'a': 5},)]"
postgresql,postgresql,SELECT JSON_OBJECT('a' VALUE 2 + 3),sqljson.sql,SAME,,"[({'a': 5},)]"
postgresql,postgresql,SELECT JSON_OBJECT('a' || 2: 1),sqljson.sql,SAME,,"[({'a2': 1},)]"
postgresql,postgresql,SELECT JSON_OBJECT(('a' || 2) VALUE 1),sqljson.sql,SAME,,"[({'a2': 1},)]"
postgresql,postgresql,SELECT JSON_OBJECT('a': 2::text),sqljson.sql,SAME,,"[({'a': '2'},)]"
postgresql,postgresql,SELECT JSON_OBJECT('a' VALUE 2::text),sqljson.sql,SAME,,"[({'a': '2'},)]"
postgresql,postgresql,SELECT JSON_OBJECT(1::text: 2),sqljson.sql,SAME,,"[({'1': 2},)]"
postgresql,postgresql,SELECT JSON_OBJECT((1::text) VALUE 2),sqljson.sql,SAME,,"[({'1': 2},)]"
postgresql,postgresql,"SELECT JSON_OBJECT( 	'a': '123', 	1.23: 123, 	'c': json '[ 1,true,{ } ]', 	'd': jsonb '{ ""x"" : 123.45 }' )",sqljson.sql,SAME,,"[({'a': '123', 'c': [1, True, {}], 'd': {'x': 123.45}, '1.23': 123},)]"
postgresql,postgresql,"SELECT JSON_OBJECT( 	'a': '123', 	1.23: 123, 	'c': json '[ 1,true,{ } ]', 	'd': jsonb '{ ""x"" : 123.45 }' 	RETURNING jsonb )",sqljson.sql,SAME,,"[({'a': '123', 'c': [1, True, {}], 'd': {'x': 123.45}, '1.23': 123},)]"
postgresql,postgresql,"SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa' RETURNING jsonb))",sqljson.sql,SAME,,"[({'a': '123', 'b': {'a': 111, 'b': 'aaa'}},)]"
postgresql,postgresql,SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text)),sqljson.sql,SAME,,"[({'a': '{""b"" : 1}'},)]"
postgresql,postgresql,SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text) FORMAT JSON),sqljson.sql,SAME,,"[({'a': {'b': 1}},)]"
postgresql,postgresql,SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea)),sqljson.sql,SAME,,"[({'a': '\\x7b226222203a20317d'},)]"
postgresql,postgresql,SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea) FORMAT JSON),sqljson.sql,SAME,,"[({'a': {'b': 1}},)]"
postgresql,postgresql,"SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2)",sqljson.sql,SAME,,"[({'a': '1', 'b': None, 'c': 2},)]"
postgresql,postgresql,"SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 NULL ON NULL)",sqljson.sql,SAME,,"[({'a': '1', 'b': None, 'c': 2},)]"
postgresql,postgresql,"SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 ABSENT ON NULL)",sqljson.sql,SAME,,"[({'a': '1', 'c': 2},)]"
postgresql,postgresql,"SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE)",sqljson.sql,SAME,,"[({'1': 1},)]"
postgresql,postgresql,"SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE RETURNING jsonb)",sqljson.sql,SAME,,"[({'1': 1},)]"
postgresql,postgresql,"SELECT JSON_OBJECT(1: 1, '2': NULL, '3': 1, 4: NULL, '5': 'a' ABSENT ON NULL WITH UNIQUE RETURNING jsonb)",sqljson.sql,SAME,,"[({'1': 1, '3': 1, '5': 'a'},)]"
postgresql,postgresql,SELECT JSON_ARRAY(),sqljson.sql,SAME,,"[([],)]"
postgresql,postgresql,SELECT JSON_ARRAY(RETURNING json),sqljson.sql,SAME,,"[([],)]"
postgresql,postgresql,SELECT JSON_ARRAY(RETURNING json FORMAT JSON),sqljson.sql,SAME,,"[([],)]"
postgresql,postgresql,SELECT JSON_ARRAY(RETURNING jsonb),sqljson.sql,SAME,,"[([],)]"
postgresql,postgresql,SELECT JSON_ARRAY(RETURNING jsonb FORMAT JSON),sqljson.sql,SAME,,"[([],)]"
postgresql,postgresql,SELECT JSON_ARRAY(RETURNING text),sqljson.sql,SAME,,"[('[]',)]"
postgresql,postgresql,SELECT JSON_ARRAY(RETURNING text FORMAT JSON),sqljson.sql,SAME,,"[('[]',)]"
postgresql,postgresql,SELECT JSON_ARRAY(RETURNING bytea),sqljson.sql,SAME,,"[(<memory at 0x126577d00>,)]"
postgresql,postgresql,SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON),sqljson.sql,SAME,,"[(<memory at 0x126577e80>,)]"
postgresql,postgresql,SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF8),sqljson.sql,SAME,,"[(<memory at 0x126577880>,)]"
postgresql,postgresql,"SELECT JSON_ARRAY('aaa', 111, true, array[1,2,3], NULL, json '{""a"": [1]}', jsonb '[""a"",3]')",sqljson.sql,SAME,,"[(['aaa', 111, True, [1, 2, 3], {'a': [1]}, ['a', 3]],)]"
postgresql,postgresql,"SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL)",sqljson.sql,SAME,,"[(['a', None, 'b'],)]"
postgresql,postgresql,"SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL)",sqljson.sql,SAME,,"[(['a', 'b'],)]"
postgresql,postgresql,"SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL)",sqljson.sql,SAME,,"[(['b'],)]"
postgresql,postgresql,"SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL RETURNING jsonb)",sqljson.sql,SAME,,"[(['a', None, 'b'],)]"
postgresql,postgresql,"SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL RETURNING jsonb)",sqljson.sql,SAME,,"[(['a', 'b'],)]"
postgresql,postgresql,"SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL RETURNING jsonb)",sqljson.sql,SAME,,"[(['b'],)]"
postgresql,postgresql,"SELECT JSON_ARRAY(JSON_ARRAY('{ ""a"" : 123 }' RETURNING text))",sqljson.sql,SAME,,"[(['[""{ \\""a\\"" : 123 }""]'],)]"
postgresql,postgresql,"SELECT JSON_ARRAY(JSON_ARRAY('{ ""a"" : 123 }' FORMAT JSON RETURNING text))",sqljson.sql,SAME,,"[(['[{ ""a"" : 123 }]'],)]"
postgresql,postgresql,"SELECT JSON_ARRAY(JSON_ARRAY('{ ""a"" : 123 }' FORMAT JSON RETURNING text) FORMAT JSON)",sqljson.sql,SAME,,"[([[{'a': 123}]],)]"
postgresql,postgresql,"SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i))",sqljson.sql,SAME,,"[([1, 2, 4],)]"
postgresql,postgresql,"SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i))",sqljson.sql,SAME,,"[([[1, 2], [3, 4]],)]"
postgresql,postgresql,"SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i) RETURNING jsonb)",sqljson.sql,SAME,,"[([[1, 2], [3, 4]],)]"
postgresql,postgresql,"SELECT JSON_ARRAY(SELECT i FROM (VALUES (3), (1), (NULL), (2)) foo(i) ORDER BY i)",sqljson.sql,SAME,,"[([1, 2, 3],)]"
postgresql,postgresql,"SELECT	JSON_ARRAYAGG(i) IS NULL, 		JSON_ARRAYAGG(i RETURNING jsonb) IS NULL FROM generate_series(1, 0) i",sqljson.sql,SAME,,"[(True, True)]"
postgresql,postgresql,"SELECT	JSON_ARRAYAGG(i), 		JSON_ARRAYAGG(i RETURNING jsonb) FROM generate_series(1, 5) i",sqljson.sql,SAME,,"[([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])]"
postgresql,postgresql,"SELECT JSON_ARRAYAGG(i ORDER BY i DESC) FROM generate_series(1, 5) i",sqljson.sql,SAME,,"[([5, 4, 3, 2, 1],)]"
postgresql,postgresql,"SELECT JSON_ARRAYAGG(i::text::json) FROM generate_series(1, 5) i",sqljson.sql,SAME,,"[([1, 2, 3, 4, 5],)]"
postgresql,postgresql,"SELECT JSON_ARRAYAGG(JSON_ARRAY(i, i + 1 RETURNING text) FORMAT JSON) FROM generate_series(1, 5) i",sqljson.sql,SAME,,"[([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]],)]"
postgresql,postgresql,"SELECT	JSON_ARRAYAGG(NULL), 		JSON_ARRAYAGG(NULL RETURNING jsonb) FROM generate_series(1, 5)",sqljson.sql,SAME,,"[([], [])]"
postgresql,postgresql,"SELECT	JSON_ARRAYAGG(NULL NULL ON NULL), 		JSON_ARRAYAGG(NULL NULL ON NULL RETURNING jsonb) FROM generate_series(1, 5)",sqljson.sql,SAME,,"[([None, None, None, None, None], [None, None, None, None, None])]"
postgresql,postgresql,"SELECT 	JSON_ARRAYAGG(bar) as no_options, 	JSON_ARRAYAGG(bar RETURNING jsonb) as returning_jsonb, 	JSON_ARRAYAGG(bar ABSENT ON NULL) as absent_on_null, 	JSON_ARRAYAGG(bar ABSENT ON NULL RETURNING jsonb) as absentonnull_returning_jsonb, 	JSON_ARRAYAGG(bar NULL ON NULL) as null_on_null, 	JSON_ARRAYAGG(bar NULL ON NULL RETURNING jsonb) as nullonnull_returning_jsonb, 	JSON_ARRAYAGG(foo) as row_no_options, 	JSON_ARRAYAGG(foo RETURNING jsonb) as row_returning_jsonb, 	JSON_ARRAYAGG(foo ORDER BY bar) FILTER (WHERE bar > 2) as row_filtered_agg, 	JSON_ARRAYAGG(foo ORDER BY bar RETURNING jsonb) FILTER (WHERE bar > 2) as row_filtered_agg_returning_jsonb FROM 	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL)) foo(bar)",sqljson.sql,SAME,,"[([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, None, None, None, None], [1, 2, 3, 4, 5, None, None, None, None], [{'bar': 1}, {'bar': 2}, {'bar': 3}, {'bar': 4}, {'bar': 5}, {'bar': None}, {'bar': None}, {'bar': None}, {'bar': None}], [{'bar': 1}, {'bar': 2}, {'bar': 3}, {'bar': 4}, {'bar': 5}, {'bar': None}, {'bar': None}, {'bar': None}, {'bar': None}], [{'bar': 3}, {'bar': 4}, {'bar': 5}], [{'bar': 3}, {'bar': 4}, {'bar': 5}])]"
postgresql,postgresql,"SELECT 	bar, JSON_ARRAYAGG(bar) FILTER (WHERE bar > 2) OVER (PARTITION BY foo.bar % 2) FROM 	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL), (5), (4)) foo(bar)",sqljson.sql,SAME,,"[(4, [4, 4]), (4, [4, 4]), (2, [4, 4]), (5, [5, 3, 5]), (3, [5, 3, 5]), (1, [5, 3, 5]), (5, [5, 3, 5]), (None, None), (None, None), (None, None), (None, None)]"
postgresql,postgresql,"SELECT	JSON_OBJECTAGG('key': 1) IS NULL, 		JSON_OBJECTAGG('key': 1 RETURNING jsonb) IS NULL WHERE FALSE",sqljson.sql,SAME,,"[(True, True)]"
postgresql,postgresql,"SELECT 	JSON_OBJECTAGG(i: i), 	JSON_OBJECTAGG(i: i RETURNING jsonb) FROM 	generate_series(1, 5) i",sqljson.sql,SAME,,"[({'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}, {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5})]"
postgresql,postgresql,"SELECT 	JSON_OBJECTAGG(k: v), 	JSON_OBJECTAGG(k: v NULL ON NULL), 	JSON_OBJECTAGG(k: v ABSENT ON NULL), 	JSON_OBJECTAGG(k: v RETURNING jsonb), 	JSON_OBJECTAGG(k: v NULL ON NULL RETURNING jsonb), 	JSON_OBJECTAGG(k: v ABSENT ON NULL RETURNING jsonb) FROM 	(VALUES (1, 1), (1, NULL), (2, NULL), (3, 3)) foo(k, v)",sqljson.sql,SAME,,"[({'1': None, '2': None, '3': 3}, {'1': None, '2': None, '3': 3}, {'1': 1, '3': 3}, {'1': None, '2': None, '3': 3}, {'1': None, '2': None, '3': 3}, {'1': 1, '3': 3})]"
postgresql,postgresql,"SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS) FROM (VALUES (1, 1), (0, NULL), (3, NULL), (2, 2), (4, NULL)) foo(k, v)",sqljson.sql,SAME,,"[({'1': 1, '2': 2},)]"
postgresql,postgresql,"SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS RETURNING jsonb) FROM (VALUES (1, 1), (0, NULL),(4, null), (5, null),(6, null),(2, 2)) foo(k, v)",sqljson.sql,SAME,,"[({'1': 1, '2': 2},)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_OBJECT('foo' : '1' FORMAT JSON, 'bar' : 'baz' RETURNING json)",sqljson.sql,SAME,,"[('Result',), (""  Output: JSON_OBJECT('foo' : '1'::json, 'bar' : 'baz'::text RETURNING json)"",)]"
postgresql,postgresql,"CREATE VIEW json_object_view AS SELECT JSON_OBJECT('foo' : '1' FORMAT JSON, 'bar' : 'baz' RETURNING json)",sqljson.sql,SAME,,[]
postgresql,postgresql,DROP VIEW json_object_view,sqljson.sql,SAME,,[]
postgresql,postgresql,"SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v WITH UNIQUE KEYS) OVER (ORDER BY k) FROM (VALUES (1,1), (2,2)) a(k,v)",sqljson.sql,SAME,,"[({'k': 1, 'v': 1}, {'1': 1}), ({'k': 2, 'v': 2}, {'1': 1, '2': 2})]"
postgresql,postgresql,"SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v ABSENT ON NULL) OVER (ORDER BY k) FROM (VALUES (1,1), (1,null), (2,2)) a(k,v)",sqljson.sql,SAME,,"[({'k': 1, 'v': 1}, {'1': 1}), ({'k': 1, 'v': None}, {'1': 1}), ({'k': 2, 'v': 2}, {'1': 1, '2': 2})]"
postgresql,postgresql,"SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v ABSENT ON NULL) OVER (ORDER BY k RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) FROM (VALUES (1,1), (1,null), (2,2)) a(k,v)",sqljson.sql,SAME,,"[({'k': 1, 'v': 1}, {'1': 1, '2': 2}), ({'k': 1, 'v': None}, {'1': 1, '2': 2}), ({'k': 2, 'v': 2}, {'1': 1, '2': 2})]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_ARRAY('1' FORMAT JSON, 2 RETURNING json)",sqljson.sql,SAME,,"[('Result',), (""  Output: JSON_ARRAY('1'::json, 2 RETURNING json)"",)]"
postgresql,postgresql,"CREATE VIEW json_array_view AS SELECT JSON_ARRAY('1' FORMAT JSON, 2 RETURNING json)",sqljson.sql,SAME,,[]
postgresql,postgresql,DROP VIEW json_array_view,sqljson.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_OBJECTAGG(i: ('111' || i)::bytea FORMAT JSON WITH UNIQUE RETURNING text) FILTER (WHERE i > 3) FROM generate_series(1,5) i",sqljson.sql,SAME,,"[('Aggregate',), (""  Output: JSON_OBJECTAGG(i : (('111'::text || (i)::text))::bytea FORMAT JSON WITH UNIQUE KEYS RETURNING text) FILTER (WHERE (i > 3))"",), ('  ->  Function Scan on pg_catalog.generate_series i',), ('        Output: i',), ('        Function Call: generate_series(1, 5)',)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_OBJECTAGG(i: ('111' || i)::bytea FORMAT JSON WITH UNIQUE RETURNING text) OVER (PARTITION BY i % 2) FROM generate_series(1,5) i",sqljson.sql,SAME,,"[('WindowAgg',), (""  Output: JSON_OBJECTAGG(i : (('111'::text || (i)::text))::bytea FORMAT JSON WITH UNIQUE KEYS RETURNING text) OVER (?), ((i % 2))"",), ('  ->  Sort',), ('        Output: ((i % 2)), i',), ('        Sort Key: ((i.i % 2))',), ('        ->  Function Scan on pg_catalog.generate_series i',), ('              Output: (i % 2), i',), ('              Function Call: generate_series(1, 5)',)]"
postgresql,postgresql,"CREATE VIEW json_objectagg_view AS SELECT JSON_OBJECTAGG(i: ('111' || i)::bytea FORMAT JSON WITH UNIQUE RETURNING text) FILTER (WHERE i > 3) FROM generate_series(1,5) i",sqljson.sql,SAME,,[]
postgresql,postgresql,DROP VIEW json_objectagg_view,sqljson.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_ARRAYAGG(('111' || i)::bytea FORMAT JSON NULL ON NULL RETURNING text) FILTER (WHERE i > 3) FROM generate_series(1,5) i",sqljson.sql,SAME,,"[('Aggregate',), (""  Output: JSON_ARRAYAGG((('111'::text || (i)::text))::bytea FORMAT JSON NULL ON NULL RETURNING text) FILTER (WHERE (i > 3))"",), ('  ->  Function Scan on pg_catalog.generate_series i',), ('        Output: i',), ('        Function Call: generate_series(1, 5)',)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_ARRAYAGG(('111' || i)::bytea FORMAT JSON NULL ON NULL RETURNING text) OVER (PARTITION BY i % 2) FROM generate_series(1,5) i",sqljson.sql,SAME,,"[('WindowAgg',), (""  Output: JSON_ARRAYAGG((('111'::text || (i)::text))::bytea FORMAT JSON NULL ON NULL RETURNING text) OVER (?), ((i % 2))"",), ('  ->  Sort',), ('        Output: ((i % 2)), i',), ('        Sort Key: ((i.i % 2))',), ('        ->  Function Scan on pg_catalog.generate_series i',), ('              Output: (i % 2), i',), ('              Function Call: generate_series(1, 5)',)]"
postgresql,postgresql,"CREATE VIEW json_arrayagg_view AS SELECT JSON_ARRAYAGG(('111' || i)::bytea FORMAT JSON NULL ON NULL RETURNING text) FILTER (WHERE i > 3) FROM generate_series(1,5) i",sqljson.sql,SAME,,[]
postgresql,postgresql,DROP VIEW json_arrayagg_view,sqljson.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i) RETURNING jsonb)",sqljson.sql,SAME,,"[('Result',), ('  Output: $0',), ('  InitPlan 1 (returns $0)',), ('    ->  Aggregate',), ('          Output: JSON_ARRAYAGG(""*VALUES*"".column1 RETURNING jsonb)',), ('          ->  Values Scan on ""*VALUES*""',), ('                Output: ""*VALUES*"".column1',)]"
postgresql,postgresql,"CREATE VIEW json_array_subquery_view AS SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i) RETURNING jsonb)",sqljson.sql,SAME,,[]
postgresql,postgresql,DROP VIEW json_array_subquery_view,sqljson.sql,SAME,,[]
postgresql,postgresql,SELECT NULL IS JSON,sqljson.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT NULL IS NOT JSON,sqljson.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT NULL::json IS JSON,sqljson.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT NULL::jsonb IS JSON,sqljson.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT NULL::text IS JSON,sqljson.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT NULL::bytea IS JSON,sqljson.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT '' IS JSON,sqljson.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 	js, 	js IS JSON ""IS JSON"", 	js IS NOT JSON ""IS NOT JSON"", 	js IS JSON VALUE ""IS VALUE"", 	js IS JSON OBJECT ""IS OBJECT"", 	js IS JSON ARRAY ""IS ARRAY"", 	js IS JSON SCALAR ""IS SCALAR"", 	js IS JSON WITHOUT UNIQUE KEYS ""WITHOUT UNIQUE"", 	js IS JSON WITH UNIQUE KEYS ""WITH UNIQUE"" FROM 	test_is_json",sqljson.sql,SAME,,"[(None, None, None, None, None, None, None, None, None), ('', False, True, False, False, False, False, False, False), ('123', True, False, True, False, False, True, True, True), ('""aaa ""', True, False, True, False, False, True, True, True), ('true', True, False, True, False, False, True, True, True), ('null', True, False, True, False, False, True, True, True), ('[]', True, False, True, False, True, False, True, True), ('[1, ""2"", {}]', True, False, True, False, True, False, True, True), ('{}', True, False, True, True, False, False, True, True), ('{ ""a"": 1, ""b"": null }', True, False, True, True, False, False, True, True), ('{ ""a"": 1, ""a"": null }', True, False, True, True, False, False, True, False), ('{ ""a"": 1, ""b"": [{ ""a"": 1 }, { ""a"": 2 }] }', True, False, True, True, False, False, True, True), ('{ ""a"": 1, ""b"": [{ ""a"": 1, ""b"": 0, ""a"": 2 }] }', True, False, True, True, False, False, True, False), ('aaa', False, True, False, False, False, False, False, False), ('{a:1}', False, True, False, False, False, False, False, False), ('[""a"",]', False, True, False, False, False, False, False, False)]"
postgresql,postgresql,"SELECT 	js, 	js IS JSON ""IS JSON"", 	js IS NOT JSON ""IS NOT JSON"", 	js IS JSON VALUE ""IS VALUE"", 	js IS JSON OBJECT ""IS OBJECT"", 	js IS JSON ARRAY ""IS ARRAY"", 	js IS JSON SCALAR ""IS SCALAR"", 	js IS JSON WITHOUT UNIQUE KEYS ""WITHOUT UNIQUE"", 	js IS JSON WITH UNIQUE KEYS ""WITH UNIQUE"" FROM 	(SELECT js::json FROM test_is_json WHERE js IS JSON) foo(js)",sqljson.sql,SAME,,"[(123, True, False, True, False, False, True, True, True), ('aaa ', True, False, True, False, False, True, True, True), (True, True, False, True, False, False, True, True, True), (None, True, False, True, False, False, True, True, True), ([], True, False, True, False, True, False, True, True), ([1, '2', {}], True, False, True, False, True, False, True, True), ({}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': None}, True, False, True, True, False, False, True, True), ({'a': None}, True, False, True, True, False, False, True, False), ({'a': 1, 'b': [{'a': 1}, {'a': 2}]}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': [{'a': 2, 'b': 0}]}, True, False, True, True, False, False, True, False)]"
postgresql,postgresql,"SELECT 	js0, 	js IS JSON ""IS JSON"", 	js IS NOT JSON ""IS NOT JSON"", 	js IS JSON VALUE ""IS VALUE"", 	js IS JSON OBJECT ""IS OBJECT"", 	js IS JSON ARRAY ""IS ARRAY"", 	js IS JSON SCALAR ""IS SCALAR"", 	js IS JSON WITHOUT UNIQUE KEYS ""WITHOUT UNIQUE"", 	js IS JSON WITH UNIQUE KEYS ""WITH UNIQUE"" FROM 	(SELECT js, js::bytea FROM test_is_json WHERE js IS JSON) foo(js0, js)",sqljson.sql,SAME,,"[('123', True, False, True, False, False, True, True, True), ('""aaa ""', True, False, True, False, False, True, True, True), ('true', True, False, True, False, False, True, True, True), ('null', True, False, True, False, False, True, True, True), ('[]', True, False, True, False, True, False, True, True), ('[1, ""2"", {}]', True, False, True, False, True, False, True, True), ('{}', True, False, True, True, False, False, True, True), ('{ ""a"": 1, ""b"": null }', True, False, True, True, False, False, True, True), ('{ ""a"": 1, ""a"": null }', True, False, True, True, False, False, True, False), ('{ ""a"": 1, ""b"": [{ ""a"": 1 }, { ""a"": 2 }] }', True, False, True, True, False, False, True, True), ('{ ""a"": 1, ""b"": [{ ""a"": 1, ""b"": 0, ""a"": 2 }] }', True, False, True, True, False, False, True, False)]"
postgresql,postgresql,"SELECT 	js, 	js IS JSON ""IS JSON"", 	js IS NOT JSON ""IS NOT JSON"", 	js IS JSON VALUE ""IS VALUE"", 	js IS JSON OBJECT ""IS OBJECT"", 	js IS JSON ARRAY ""IS ARRAY"", 	js IS JSON SCALAR ""IS SCALAR"", 	js IS JSON WITHOUT UNIQUE KEYS ""WITHOUT UNIQUE"", 	js IS JSON WITH UNIQUE KEYS ""WITH UNIQUE"" FROM 	(SELECT js::jsonb FROM test_is_json WHERE js IS JSON) foo(js)",sqljson.sql,SAME,,"[(123, True, False, True, False, False, True, True, True), ('aaa ', True, False, True, False, False, True, True, True), (True, True, False, True, False, False, True, True, True), (None, True, False, True, False, False, True, True, True), ([], True, False, True, False, True, False, True, True), ([1, '2', {}], True, False, True, False, True, False, True, True), ({}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': None}, True, False, True, True, False, False, True, True), ({'a': None}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': [{'a': 1}, {'a': 2}]}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': [{'a': 2, 'b': 0}]}, True, False, True, True, False, False, True, True)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT '1' IS JSON AS ""any"", ('1' || i) IS JSON SCALAR AS ""scalar"", '[]' IS NOT JSON ARRAY AS ""array"", '{}' IS JSON OBJECT WITH UNIQUE AS ""object"" FROM generate_series(1, 3) i",sqljson.sql,SAME,,"[('Function Scan on pg_catalog.generate_series i',), (""  Output: ('1'::text IS JSON), (('1'::text || (i)::text) IS JSON SCALAR), (NOT ('[]'::text IS JSON ARRAY)), ('{}'::text IS JSON OBJECT WITH UNIQUE KEYS)"",), ('  Function Call: generate_series(1, 3)',)]"
postgresql,postgresql,"CREATE VIEW is_json_view AS SELECT '1' IS JSON AS ""any"", ('1' || i) IS JSON SCALAR AS ""scalar"", '[]' IS NOT JSON ARRAY AS ""array"", '{}' IS JSON OBJECT WITH UNIQUE AS ""object"" FROM generate_series(1, 3) i",sqljson.sql,SAME,,[]
postgresql,postgresql,DROP VIEW is_json_view,sqljson.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN sqljsonb_int_not_null AS int NOT NULL,sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple')",sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE DOMAIN rgb AS rainbow CHECK (VALUE IN ('red', 'green', 'blue'))",sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE comp_abc AS (a text, b int, c timestamp)",sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,DROP TYPE comp_abc,sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE sqljsonb_rec AS (a int, t text, js json, jb jsonb, jsa json[])",sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,CREATE TYPE sqljsonb_reca AS (reca sqljsonb_rec[]),sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,SELECT check_clause FROM information_schema.check_constraints WHERE constraint_name LIKE 'test_jsonb_constraint%' ORDER BY 1,sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE FUNCTION ret_setint() RETURNS SETOF integer AS $$ BEGIN     RETURN QUERY EXECUTE 'select 1 union all select 1'; END; $$ LANGUAGE plpgsql IMMUTABLE,sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION ret_setint,sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE jsonpaths (path) AS SELECT '$',sqljson_queryfuncs.sql,SAME,,[]
postgresql,postgresql,SHOW track_counts,stats.sql,SAME,,"[('on',)]"
postgresql,postgresql,SET enable_seqscan TO on,stats.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan TO on,stats.sql,SAME,,[]
postgresql,postgresql,SET enable_indexonlyscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL stats_fetch_consistency = snapshot,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,TRUNCATE trunc_stats_test,stats.sql,SAME,,[]
postgresql,postgresql,"UPDATE trunc_stats_test1 SET id = id + 10 WHERE id IN (1, 2)",stats.sql,SAME,,[]
postgresql,postgresql,DELETE FROM trunc_stats_test1 WHERE id = 3,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,UPDATE trunc_stats_test1 SET id = id + 100,stats.sql,SAME,,[]
postgresql,postgresql,TRUNCATE trunc_stats_test1,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT p1,stats.sql,SAME,,[]
postgresql,postgresql,TRUNCATE trunc_stats_test2,stats.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT p1,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT p1,stats.sql,SAME,,[]
postgresql,postgresql,TRUNCATE trunc_stats_test3,stats.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT p1,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,TRUNCATE trunc_stats_test4,stats.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,stats.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL stats_fetch_consistency = snapshot,stats.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, n_tup_ins, n_tup_upd, n_tup_del, n_live_tup, n_dead_tup   FROM pg_stat_user_tables  WHERE relname like 'trunc_stats_test%' order by relname",stats.sql,SAME,,"[('trunc_stats_test', 3, 0, 0, 0, 0), ('trunc_stats_test1', 4, 2, 1, 1, 0), ('trunc_stats_test2', 1, 0, 0, 1, 0), ('trunc_stats_test3', 4, 0, 0, 2, 2), ('trunc_stats_test4', 2, 0, 0, 0, 2)]"
postgresql,postgresql,"SELECT st.seq_scan >= pr.seq_scan + 1,        st.seq_tup_read >= pr.seq_tup_read + cl.reltuples,        st.idx_scan >= pr.idx_scan + 1,        st.idx_tup_fetch >= pr.idx_tup_fetch + 1   FROM pg_stat_user_tables AS st, pg_class AS cl, prevstats AS pr  WHERE st.relname='tenk2' AND cl.relname='tenk2'",stats.sql,SAME,,[]
postgresql,postgresql,"SELECT st.heap_blks_read + st.heap_blks_hit >= pr.heap_blks + cl.relpages,        st.idx_blks_read + st.idx_blks_hit >= pr.idx_blks + 1   FROM pg_statio_user_tables AS st, pg_class AS cl, prevstats AS pr  WHERE st.relname='tenk2' AND cl.relname='tenk2'",stats.sql,SAME,,[]
postgresql,postgresql,SELECT pr.snap_ts < pg_stat_get_snapshot_timestamp() as snapshot_newer FROM prevstats AS pr,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL stats_fetch_consistency = none,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT sp1,stats.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT sp1,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT sp1,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMPORARY TABLE test_last_scan(idx_col int primary key, noidx_col int)",stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT last_seq_scan, last_idx_scan FROM pg_stat_all_tables WHERE relid = 'test_last_scan'::regclass",stats.sql,SAME,,"[(None, None)]"
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,"SELECT seq_scan, idx_scan FROM pg_stat_all_tables WHERE relid = 'test_last_scan'::regclass",stats.sql,SAME,,"[(1, 0)]"
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_seqscan TO on,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan TO on,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_bitmapscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS off) SELECT count(*) FROM test_last_scan WHERE noidx_col = 1,stats.sql,SAME,,"[('Aggregate',), ('  ->  Seq Scan on test_last_scan',), ('        Filter: (noidx_col = 1)',)]"
postgresql,postgresql,SELECT count(*) FROM test_last_scan WHERE noidx_col = 1,stats.sql,SAME,,"[(1,)]"
postgresql,postgresql,SET LOCAL enable_seqscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS off) SELECT count(*) FROM test_last_scan WHERE idx_col = 1,stats.sql,SAME,,"[('Aggregate',), ('  ->  Index Scan using test_last_scan_pkey on test_last_scan',), ('        Index Cond: (idx_col = 1)',)]"
postgresql,postgresql,SELECT count(*) FROM test_last_scan WHERE idx_col = 1,stats.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_seqscan TO on,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_bitmapscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS off) SELECT count(*) FROM test_last_scan WHERE noidx_col = 1,stats.sql,SAME,,"[('Aggregate',), ('  ->  Seq Scan on test_last_scan',), ('        Filter: (noidx_col = 1)',)]"
postgresql,postgresql,SELECT count(*) FROM test_last_scan WHERE noidx_col = 1,stats.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_seqscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan TO on,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_bitmapscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS off) SELECT count(*) FROM test_last_scan WHERE idx_col = 1,stats.sql,SAME,,"[('Aggregate',), ('  ->  Index Scan using test_last_scan_pkey on test_last_scan',), ('        Index Cond: (idx_col = 1)',)]"
postgresql,postgresql,SELECT count(*) FROM test_last_scan WHERE idx_col = 1,stats.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_seqscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan TO off,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_bitmapscan TO on,stats.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS off) SELECT count(*) FROM test_last_scan WHERE idx_col = 1,stats.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on test_last_scan',), ('        Recheck Cond: (idx_col = 1)',), ('        ->  Bitmap Index Scan on test_last_scan_pkey',), ('              Index Cond: (idx_col = 1)',)]"
postgresql,postgresql,SELECT count(*) FROM test_last_scan WHERE idx_col = 1,stats.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,SELECT (n_tup_ins + n_tup_upd) > 0 AS has_data FROM pg_stat_all_tables   WHERE relid = 'pg_shdescription'::regclass,stats.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT (n_tup_ins + n_tup_upd) > 0 AS has_data FROM pg_stat_all_tables   WHERE relid = 'pg_shdescription'::regclass,stats.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT (current_schemas(true))[1] = ('pg_temp_' || beid::text) AS match FROM pg_stat_get_backend_idset() beid WHERE pg_stat_get_backend_pid(beid) = pg_backend_pid(),stats.sql,SAME,,"[(True,)]"
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL stats_fetch_consistency = snapshot,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_get_snapshot_timestamp(),stats.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_stat_get_function_calls(0),stats.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_stat_get_snapshot_timestamp() >= NOW(),stats.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT pg_stat_clear_snapshot(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT pg_stat_get_snapshot_timestamp(),stats.sql,SAME,,"[(None,)]"
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL stats_fetch_consistency = cache,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_get_function_calls(0),stats.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_stat_get_snapshot_timestamp() IS NOT NULL AS snapshot_ok,stats.sql,SAME,,"[(False,)]"
postgresql,postgresql,SET LOCAL stats_fetch_consistency = snapshot,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_get_snapshot_timestamp() IS NOT NULL AS snapshot_ok,stats.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT pg_stat_get_function_calls(0),stats.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_stat_get_snapshot_timestamp() IS NOT NULL AS snapshot_ok,stats.sql,SAME,,"[(True,)]"
postgresql,postgresql,SET LOCAL stats_fetch_consistency = none,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_get_snapshot_timestamp() IS NOT NULL AS snapshot_ok,stats.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT pg_stat_get_function_calls(0),stats.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_stat_get_snapshot_timestamp() IS NOT NULL AS snapshot_ok,stats.sql,SAME,,"[(False,)]"
postgresql,postgresql,ROLLBACK,stats.sql,SAME,,[]
postgresql,postgresql,CREATE index stats_test_idx1 on stats_test_tab1(a),stats.sql,SAME,,[]
postgresql,postgresql,select a from stats_test_tab1 where a = 3,stats.sql,SAME,,"[(3,)]"
postgresql,postgresql,DROP index stats_test_idx1,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,CREATE index stats_test_idx1 on stats_test_tab1(a),stats.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,stats.sql,SAME,,[]
postgresql,postgresql,CREATE index stats_test_idx1 on stats_test_tab1(a),stats.sql,SAME,,[]
postgresql,postgresql,REINDEX index CONCURRENTLY stats_test_idx1,stats.sql,SAME,,[]
postgresql,postgresql,BEGIN,stats.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,stats.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO on,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_get_replication_slot(NULL),stats.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_stat_get_subscription_stats(NULL),stats.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,SET LOCAL enable_nestloop TO on,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_mergejoin TO off,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_hashjoin TO off,stats.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_material TO off,stats.sql,SAME,,[]
postgresql,postgresql,COMMIT,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,"CREATE TEMPORARY TABLE test_io_local(a int, b TEXT)",stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_relation_size('test_io_local') / current_setting('block_size')::int8 > 100,stats.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,RESET temp_buffers,stats.sql,SAME,,[]
postgresql,postgresql,SET wal_skip_threshold = '1 kB',stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,RESET wal_skip_threshold,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_force_next_flush(),stats.sql,SAME,,"[('',)]"
postgresql,postgresql,CREATE INDEX val_brin ON brin_hot using brin(val),stats.sql,SAME,,[]
postgresql,postgresql,UPDATE brin_hot SET val = -3 WHERE id = 42,stats.sql,SAME,,[]
postgresql,postgresql,SELECT pg_stat_get_tuples_hot_updated('brin_hot'::regclass::oid),stats.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE INDEX ON brin_hot_2 USING brin (b) WHERE a = 2,stats.sql,SAME,,[]
postgresql,postgresql,UPDATE brin_hot_2 SET a = 2,stats.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brin_hot_2 WHERE a = 2 AND b = 100,stats.sql,SAME,,"[('Seq Scan on brin_hot_2',), ('  Filter: ((a = 2) AND (b = 100))',)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_hot_2 WHERE a = 2 AND b = 100,stats.sql,SAME,,"[(1,)]"
postgresql,postgresql,SET enable_seqscan = off,stats.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brin_hot_2 WHERE a = 2 AND b = 100,stats.sql,SAME,,"[('Bitmap Heap Scan on brin_hot_2',), ('  Recheck Cond: ((b = 100) AND (a = 2))',), ('  ->  Bitmap Index Scan on brin_hot_2_b_idx',), ('        Index Cond: (b = 100)',)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_hot_2 WHERE a = 2 AND b = 100,stats.sql,SAME,,"[(1,)]"
postgresql,postgresql,CREATE INDEX ON brin_hot_3 USING brin (a) WITH (pages_per_range = 1),stats.sql,SAME,,[]
postgresql,postgresql,UPDATE brin_hot_3 SET a = 2,stats.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM brin_hot_3 WHERE a = 2,stats.sql,SAME,,"[('Bitmap Heap Scan on brin_hot_3',), ('  Recheck Cond: (a = 2)',), ('  ->  Bitmap Index Scan on brin_hot_3_a_idx',), ('        Index Cond: (a = 2)',)]"
postgresql,postgresql,SELECT COUNT(*) FROM brin_hot_3 WHERE a = 2,stats.sql,SAME,,"[(20,)]"
postgresql,postgresql,SET enable_seqscan = on,stats.sql,SAME,,[]
postgresql,postgresql,end,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS IF NOT EXISTS ab1_a_b_stats ON a, b FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,COMMENT ON STATISTICS ab1_a_b_stats IS 'new comment',stats_ext.sql,SAME,,[]
postgresql,postgresql,COMMENT ON STATISTICS ab1_a_b_stats IS 'changed comment',stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS ab1_a_b_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS IF NOT EXISTS ab1_a_b_stats ON a, b FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS ab1_a_b_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA regress_schema_2,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS regress_schema_2.ab1_a_b_stats ON a, b FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_statisticsobjdef(oid) FROM pg_statistic_ext WHERE stxname = 'ab1_a_b_stats',stats_ext.sql,SAME,,"[('CREATE STATISTICS regress_schema_2.ab1_a_b_stats ON a, b FROM ab1',)]"
postgresql,postgresql,DROP STATISTICS regress_schema_2.ab1_a_b_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS ab1_b_c_stats ON b, c FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS ab1_a_b_c_stats ON a, b, c FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS ab1_b_a_stats ON b, a FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ab1 DROP COLUMN a,stats_ext.sql,SAME,,[]
postgresql,postgresql,SELECT stxname FROM pg_statistic_ext WHERE stxname LIKE 'ab1%',stats_ext.sql,SAME,,"[('ab1_b_c_stats',)]"
postgresql,postgresql,SELECT stxname FROM pg_statistic_ext WHERE stxname LIKE 'ab1%',stats_ext.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ab1 ALTER a SET STATISTICS 0,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS ab1_a_b_stats ON a, b FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ab1,stats_ext.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE ab1 ALTER a SET STATISTICS -1,stats_ext.sql,SAME,,[]
postgresql,postgresql,ALTER STATISTICS ab1_a_b_stats SET STATISTICS 0,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ab1,stats_ext.sql,SAME,,[]
postgresql,postgresql,ALTER STATISTICS ab1_a_b_stats SET STATISTICS -1,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ab1 (a),stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ab1,stats_ext.sql,SAME,,[]
postgresql,postgresql,ALTER STATISTICS IF EXISTS ab1_a_b_stats SET STATISTICS 0,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS ab1_a_b_stats ON a, b FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ab1,stats_ext.sql,SAME,,[]
postgresql,postgresql,"VACUUM ANALYZE stxdinh, stxdinh1, stxdinh2",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS stxdinh ON a, b FROM stxdinh",stats_ext.sql,SAME,,[]
postgresql,postgresql,"VACUUM ANALYZE stxdinh, stxdinh1, stxdinh2",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS stxdinp ON (a + 1), a, b FROM stxdinp",stats_ext.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE stxdinp,stats_ext.sql,SAME,,[]
postgresql,postgresql,SELECT 1 FROM pg_statistic_ext WHERE stxrelid = 'stxdinp'::regclass,stats_ext.sql,SAME,,"[(1,)]"
postgresql,postgresql,CREATE STATISTICS ab1_exprstat_1 ON (a+b) FROM ab1,stats_ext.sql,SAME,,[]
postgresql,postgresql,CREATE STATISTICS ab1_exprstat_2 ON (a+b) FROM ab1,stats_ext.sql,SAME,,[]
postgresql,postgresql,SELECT stxkind FROM pg_statistic_ext WHERE stxname = 'ab1_exprstat_2',stats_ext.sql,SAME,,"[(['e'],)]"
postgresql,postgresql,"CREATE STATISTICS ab1_exprstat_3 ON (a+b), a FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,SELECT stxkind FROM pg_statistic_ext WHERE stxname = 'ab1_exprstat_3',stats_ext.sql,SAME,,"[(['d', 'f', 'm', 'e'],)]"
postgresql,postgresql,"CREATE STATISTICS ab1_exprstat_4 ON date_trunc('day', d) FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS ab1_exprstat_5 ON date_trunc('day', c) FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS ab1_exprstat_6 ON   (case a when 1 then true else false end), b FROM ab1",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ab1,stats_ext.sql,SAME,,[]
postgresql,postgresql,CREATE schema tststats,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX ti ON tststats.t (a, b)",stats_ext.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE tststats.s,stats_ext.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW tststats.v AS SELECT * FROM tststats.t,stats_ext.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW tststats.mv AS SELECT * FROM tststats.t,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE tststats.ty AS (a int, b int, c text)",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS tststats.s1 ON a, b FROM tststats.t",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS tststats.s5 ON a, b FROM tststats.mv",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS tststats.s8 ON a, b FROM tststats.pt",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS tststats.s9 ON a, b FROM tststats.pt1",stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA tststats CASCADE,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s10 ON a, b, c FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s10,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s10 (ndistinct) ON (a+1), (b+100), (2*c) FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s10,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s10 (ndistinct) ON a, b, (2*c) FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s10,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s11 (ndistinct) ON a, b FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s12 (ndistinct) ON c, d FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s12,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s12 (ndistinct) ON (c * 10), (d - 1) FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s12,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s12 (ndistinct) ON c, d, (c * 10), (d - 1) FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s11,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s11 (ndistinct) ON a, b, (a*5), (b+1) FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s11,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s12,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s11 (ndistinct) ON a, b, (a*5), (b+1) FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS s12 (ndistinct) ON a, (b+1), (c * 10) FROM ndistinct",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE ndistinct,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s11,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS s12,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX fdeps_ab_idx ON functional_dependencies (a, b)",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX fdeps_abc_idx ON functional_dependencies (a, b, c)",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS func_deps_stat (dependencies) ON a, b, c FROM functional_dependencies",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS func_deps_stat,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS func_deps_stat (dependencies) ON (mod(a,11)), (mod(b::int, 13)), (mod(c, 7)) FROM functional_dependencies",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS func_deps_stat,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS func_deps_stat (dependencies) ON a, b, c FROM functional_dependencies",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,SELECT dependencies FROM pg_stats_ext WHERE statistics_name = 'func_deps_stat',stats_ext.sql,SAME,,"[('{""3 => 4"": 1.000000, ""3 => 6"": 1.000000, ""4 => 6"": 1.000000, ""3, 4 => 6"": 1.000000, ""3, 6 => 4"": 1.000000}',)]"
postgresql,postgresql,ALTER TABLE functional_dependencies ALTER COLUMN c TYPE numeric,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS func_deps_stat,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS func_deps_stat (dependencies) ON (a * 2), upper(b), (c + 1) FROM functional_dependencies",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE functional_dependencies,stats_ext.sql,SAME,,[]
postgresql,postgresql,SELECT dependencies FROM pg_stats_ext WHERE statistics_name = 'func_deps_stat',stats_ext.sql,SAME,,"[('{""-1 => -2"": 1.000000, ""-1 => -3"": 1.000000, ""-2 => -3"": 1.000000, ""-1, -2 => -3"": 1.000000, ""-1, -3 => -2"": 1.000000}',)]"
postgresql,postgresql,ANALYZE functional_dependencies_multi,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS functional_dependencies_multi_1 (dependencies) ON a, b FROM functional_dependencies_multi",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS functional_dependencies_multi_2 (dependencies) ON c, d FROM functional_dependencies_multi",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE functional_dependencies_multi,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_stats (mcv) ON a, b, c FROM mcv_lists",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS mcv_lists_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_stats (mcv) ON (mod(a,7)), (mod(b::int,11)), (mod(c,13)) FROM mcv_lists",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS mcv_lists_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_stats (mcv) ON a, b, c, ia FROM mcv_lists",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE mcv_lists ALTER COLUMN d TYPE VARCHAR(64),stats_ext.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE mcv_lists ALTER COLUMN c TYPE numeric,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS mcv_lists_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_stats_1 ON (mod(a,20)) FROM mcv_lists",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_stats_2 ON (mod(b::int,10)) FROM mcv_lists",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_stats_3 ON (mod(c,5)) FROM mcv_lists",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS mcv_lists_stats_1,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS mcv_lists_stats_2,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS mcv_lists_stats_3,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_stats (mcv) ON (mod(a,20)), (mod(b::int,10)), (mod(c,5)) FROM mcv_lists",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS mcv_lists_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_stats (mcv) ON a, b, c FROM mcv_lists",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,TRUNCATE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS mcv_lists_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_stats (mcv) ON a, b, d FROM mcv_lists",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists_uuid,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_uuid_stats (mcv) ON a, b, c   FROM mcv_lists_uuid",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists_uuid,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_arrays_stats (mcv) ON a, b, c   FROM mcv_lists_arrays",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists_arrays,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists_bool,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_bool_stats (mcv) ON a, b, c   FROM mcv_lists_bool",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists_bool,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists_partial,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_partial_stats (mcv) ON a, b, c   FROM mcv_lists_partial",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists_partial,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists_multi,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_multi_1 (mcv) ON a, b FROM mcv_lists_multi",stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS mcv_lists_multi_2 (mcv) ON c, d FROM mcv_lists_multi",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE mcv_lists_multi,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE expr_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS expr_stats_1 (mcv) ON (a+b), (a-b), (2*a), (3*b) FROM expr_stats",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE expr_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP STATISTICS expr_stats_1,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE expr_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS expr_stats_1 (mcv) ON a, b, (2*a), (3*b), (a+b), (a-b) FROM expr_stats",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE expr_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE expr_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS expr_stats_1 (mcv) ON a, b, (b || c), (c || b) FROM expr_stats",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE expr_stats,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS expr_stat_comp_1 ON c0, c1 FROM expr_stats_incompatible_test",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE expr_stats_incompatible_test,stats_ext.sql,SAME,,[]
postgresql,postgresql,"SELECT c0 FROM ONLY expr_stats_incompatible_test WHERE (   upper('x') LIKE ('x'||('[0,1]'::int4range))   AND   (c0 IN (0, 1) OR c1) )",stats_ext.sql,SAME,,[]
postgresql,postgresql,CREATE SCHEMA tststats,stats_ext.sql,SAME,,[]
postgresql,postgresql,"CREATE STATISTICS tststats.priv_test_stats (mcv) ON a, b   FROM tststats.priv_test_tbl",stats_ext.sql,SAME,,[]
postgresql,postgresql,ANALYZE tststats.priv_test_tbl,stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics (ndistinct) on a, b from stts_t1",stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics (ndistinct, dependencies) on a, b from stts_t1",stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics (ndistinct, dependencies, mcv) on a, b from stts_t1",stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics on b, c from stts_t2",stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics stts_hoge on col1, col2, col3 from stts_t3",stats_ext.sql,SAME,,[]
postgresql,postgresql,create schema stts_s1,stats_ext.sql,SAME,,[]
postgresql,postgresql,create schema stts_s2,stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics stts_s1.stts_foo on col1, col2 from stts_t3",stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics stts_s2.stts_yama (dependencies, mcv) on col1, col3 from stts_t3",stats_ext.sql,SAME,,[]
postgresql,postgresql,analyze stts_t1,stats_ext.sql,SAME,,[]
postgresql,postgresql,"set search_path to public, stts_s1, stts_s2, tststats",stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics (mcv) ON a, b, (a+b), (a-b) FROM stts_t1",stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics (mcv) ON a, b, (a+b), (a-b) FROM stts_t1",stats_ext.sql,SAME,,[]
postgresql,postgresql,"create statistics (mcv) ON (a+b), (a-b) FROM stts_t1",stats_ext.sql,SAME,,[]
postgresql,postgresql,drop statistics stts_t1_a_b_expr_expr_stat,stats_ext.sql,SAME,,[]
postgresql,postgresql,drop statistics stts_t1_a_b_expr_expr_stat1,stats_ext.sql,SAME,,[]
postgresql,postgresql,drop statistics stts_t1_expr_expr_stat,stats_ext.sql,SAME,,[]
postgresql,postgresql,"set search_path to public, stts_s1",stats_ext.sql,SAME,,[]
postgresql,postgresql,reset role,stats_ext.sql,SAME,,[]
postgresql,postgresql,"drop schema stts_s1, stts_s2 cascade",stats_ext.sql,SAME,,[]
postgresql,postgresql,reset search_path,stats_ext.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM tststats.priv_test_tbl,stats_ext.sql,SAME,,"[(1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (0, 0)]"
postgresql,postgresql,"SELECT * FROM tststats.priv_test_tbl   WHERE a = 1 and tststats.priv_test_tbl.* > (1, 1) is not null",stats_ext.sql,SAME,,"[(1, 1), (1, 6), (1, 1), (1, 6), (1, 1), (1, 6), (1, 1), (1, 6), (1, 1), (1, 6), (1, 1), (1, 6), (1, 1), (1, 6), (1, 1), (1, 6), (1, 1), (1, 6), (1, 1), (1, 6)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,stats_ext.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW tststats.priv_test_view WITH (security_barrier=true)     AS SELECT * FROM tststats.priv_test_tbl WHERE false,stats_ext.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,stats_ext.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tststats.priv_test_tbl ENABLE ROW LEVEL SECURITY,stats_ext.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,stats_ext.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA tststats CASCADE,stats_ext.sql,SAME,,[]
postgresql,postgresql,"SELECT 'first line' ' - next line' 	' - third line' 	AS ""Three lines to one""",strings.sql,SAME,,"[('first line - next line - third line',)]"
postgresql,postgresql,SET standard_conforming_strings TO on,strings.sql,SAME,,[]
postgresql,postgresql,"SELECT U&'d\0061t\+000061' AS U&""d\0061t\+000061""",strings.sql,SAME,,"[('data',)]"
postgresql,postgresql,"SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&""d*0061t\+000061"" UESCAPE '*'",strings.sql,SAME,,"[('dat\\+000061',)]"
postgresql,postgresql,"SELECT U&'a\\b' AS ""a\b""",strings.sql,SAME,,"[('a\\b',)]"
postgresql,postgresql,"SELECT U&' \' UESCAPE '!' AS ""tricky""",strings.sql,SAME,,"[(' \\',)]"
postgresql,postgresql,"SELECT 'tricky' AS U&""\"" UESCAPE '!'",strings.sql,SAME,,"[('tricky',)]"
postgresql,postgresql,"SELECT E'd\u0061t\U00000061' AS ""data""",strings.sql,SAME,,"[('data',)]"
postgresql,postgresql,"SELECT E'a\\b' AS ""a\b""",strings.sql,SAME,,"[('a\\b',)]"
postgresql,postgresql,SET standard_conforming_strings TO off,strings.sql,SAME,,[]
postgresql,postgresql,"SELECT 'tricky' AS U&""\"" UESCAPE '!'",strings.sql,SAME,,"[('tricky',)]"
postgresql,postgresql,RESET standard_conforming_strings,strings.sql,SAME,,[]
postgresql,postgresql,SET bytea_output TO hex,strings.sql,SAME,,[]
postgresql,postgresql,SELECT E'\\xDeAdBeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x105c79c00>,)]"
postgresql,postgresql,SELECT E'\\x De Ad Be Ef '::bytea,strings.sql,SAME,,"[(<memory at 0x126577dc0>,)]"
postgresql,postgresql,SELECT E'\\xDe00BeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126577d00>,)]"
postgresql,postgresql,SELECT E'DeAdBeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126577880>,)]"
postgresql,postgresql,SELECT E'De\\000dBeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126577b80>,)]"
postgresql,postgresql,SELECT E'De\123dBeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126577e80>,)]"
postgresql,postgresql,SELECT E'De\\123dBeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126577a00>,)]"
postgresql,postgresql,SET bytea_output TO escape,strings.sql,SAME,,[]
postgresql,postgresql,SELECT E'\\xDeAdBeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126577c40>,)]"
postgresql,postgresql,SELECT E'\\x De Ad Be Ef '::bytea,strings.sql,SAME,,"[(<memory at 0x126577ac0>,)]"
postgresql,postgresql,SELECT E'\\xDe00BeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126577f40>,)]"
postgresql,postgresql,SELECT E'DeAdBeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126577940>,)]"
postgresql,postgresql,SELECT E'De\\000dBeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126577640>,)]"
postgresql,postgresql,SELECT E'De\\123dBeEf'::bytea,strings.sql,SAME,,"[(<memory at 0x126f84040>,)]"
postgresql,postgresql,"SELECT pg_input_is_valid(E'\\xDeAdBeE', 'bytea')",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info(E'\\xDeAdBeE', 'bytea')",strings.sql,SAME,,"[('invalid hexadecimal data: odd number of digits', None, None, '22023')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info(E'\\xDeAdBeEx', 'bytea')",strings.sql,SAME,,"[('invalid hexadecimal digit: ""x""', None, None, '22023')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info(E'foo\\99bar', 'bytea')",strings.sql,SAME,,"[('invalid input syntax for type bytea', None, None, '22P02')]"
postgresql,postgresql,"SELECT CAST(name 'namefield' AS text) AS ""text(name)""",strings.sql,SAME,,"[('namefield',)]"
postgresql,postgresql,"SELECT CAST(name 'namefield' AS char(10)) AS ""char(name)""",strings.sql,SAME,,"[('namefield ',)]"
postgresql,postgresql,"SELECT CAST(name 'namefield' AS varchar) AS ""varchar(name)""",strings.sql,SAME,,"[('namefield',)]"
postgresql,postgresql,"SELECT TRIM(BOTH FROM '  bunch o blanks  ') = 'bunch o blanks' AS ""bunch o blanks""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT TRIM(LEADING FROM '  bunch o blanks  ') = 'bunch o blanks  ' AS ""bunch o blanks  """,strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT TRIM(TRAILING FROM '  bunch o blanks  ') = '  bunch o blanks' AS ""  bunch o blanks""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT TRIM(BOTH 'x' FROM 'xxxxxsome Xsxxxxx') = 'some Xs' AS ""some Xs""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT SUBSTRING('1234567890' FROM 3) = '34567890' AS ""34567890""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT SUBSTRING('1234567890' FROM 4 FOR 3) = '456' AS ""456""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT SUBSTRING('string' FROM 2 FOR 2147483646) AS ""tring""",strings.sql,SAME,,"[('tring',)]"
postgresql,postgresql,"SELECT SUBSTRING('string' FROM -10 FOR 2147483646) AS ""string""",strings.sql,SAME,,"[('string',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR 'a#""(b_d)#""%' ESCAPE '#') AS ""bcd""",strings.sql,SAME,,"[('bcd',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' FROM 'a#""(b_d)#""%' FOR '#') AS ""bcd""",strings.sql,SAME,,"[('bcd',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR '#""(b_d)#""%' ESCAPE '#') IS NULL AS ""True""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR '%' ESCAPE NULL) IS NULL AS ""True""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT SUBSTRING(NULL SIMILAR '%' ESCAPE '#') IS NULL AS ""True""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR NULL ESCAPE '#') IS NULL AS ""True""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR 'a#""%#""g' ESCAPE '#') AS ""bcdef""",strings.sql,SAME,,"[('bcdef',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR 'a*#""%#""g*' ESCAPE '#') AS ""abcdefg""",strings.sql,SAME,,"[('abcdefg',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR 'a|b#""%#""g' ESCAPE '#') AS ""bcdef""",strings.sql,SAME,,"[('bcdef',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR 'a#""%#""x|g' ESCAPE '#') AS ""bcdef""",strings.sql,SAME,,"[('bcdef',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR 'a#""%|ab#""g' ESCAPE '#') AS ""bcdef""",strings.sql,SAME,,"[('bcdef',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR 'a#""%g' ESCAPE '#') AS ""bcdefg""",strings.sql,SAME,,"[('bcdefg',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' SIMILAR 'a%g' ESCAPE '#') AS ""abcdefg""",strings.sql,SAME,,"[('abcdefg',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' FROM 'c.e') AS ""cde""",strings.sql,SAME,,"[('cde',)]"
postgresql,postgresql,"SELECT SUBSTRING('abcdefg' FROM 'b(.*)f') AS ""cde""",strings.sql,SAME,,"[('cde',)]"
postgresql,postgresql,SELECT SUBSTRING('foo' FROM 'foo(bar)?') IS NULL AS t,strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT 'abcdefg' SIMILAR TO '_bcd%' AS true,strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT 'abcdefg' SIMILAR TO 'bcd%' AS false,strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 'abcdefg' SIMILAR TO '_bcd#%' ESCAPE '#' AS false,strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 'abcd%' SIMILAR TO '_bcd#%' ESCAPE '#' AS true,strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT 'abcdefg' SIMILAR TO '_bcd\%' AS false,strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT 'abcd\efg' SIMILAR TO '_bcd\%' ESCAPE '' AS true,strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT 'abcdefg' SIMILAR TO '_bcd%' ESCAPE NULL AS null,strings.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT regexp_replace('1112223333', E'(\\d{3})(\\d{3})(\\d{4})', E'(\\1) \\2-\\3')",strings.sql,SAME,,"[('(111) 222-3333',)]"
postgresql,postgresql,"SELECT regexp_replace('foobarrbazz', E'(.)\\1', E'X\\&Y', 'g')",strings.sql,SAME,,"[('fXooYbaXrrYbaXzzY',)]"
postgresql,postgresql,"SELECT regexp_replace('foobarrbazz', E'(.)\\1', E'X\\\\Y', 'g')",strings.sql,SAME,,"[('fX\\YbaX\\YbaX\\Y',)]"
postgresql,postgresql,"SELECT regexp_replace('foobarrbazz', E'(.)\\1', E'X\\Y\\1Z\\')",strings.sql,SAME,,"[('fX\\YoZ\\barrbazz',)]"
postgresql,postgresql,"SELECT regexp_replace('AAA   BBB   CCC   ', E'\\s+', ' ', 'g')",strings.sql,SAME,,"[('AAA BBB CCC ',)]"
postgresql,postgresql,"SELECT regexp_replace('AAA', '^|$', 'Z', 'g')",strings.sql,SAME,,"[('ZAAAZ',)]"
postgresql,postgresql,"SELECT regexp_replace('AAA aaa', 'A+', 'Z', 'gi')",strings.sql,SAME,,"[('Z Z',)]"
postgresql,postgresql,"SELECT regexp_replace('A PostgreSQL function', 'A|e|i|o|u', 'X', 1)",strings.sql,SAME,,"[('X PostgreSQL function',)]"
postgresql,postgresql,"SELECT regexp_replace('A PostgreSQL function', 'A|e|i|o|u', 'X', 1, 2)",strings.sql,SAME,,"[('A PXstgreSQL function',)]"
postgresql,postgresql,"SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 0, 'i')",strings.sql,SAME,,"[('X PXstgrXSQL fXnctXXn',)]"
postgresql,postgresql,"SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 1, 'i')",strings.sql,SAME,,"[('X PostgreSQL function',)]"
postgresql,postgresql,"SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 2, 'i')",strings.sql,SAME,,"[('A PXstgreSQL function',)]"
postgresql,postgresql,"SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 3, 'i')",strings.sql,SAME,,"[('A PostgrXSQL function',)]"
postgresql,postgresql,"SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 9, 'i')",strings.sql,SAME,,"[('A PostgreSQL function',)]"
postgresql,postgresql,"SELECT regexp_replace('A PostgreSQL function', 'A|e|i|o|u', 'X', 7, 0, 'i')",strings.sql,SAME,,"[('A PostgrXSQL fXnctXXn',)]"
postgresql,postgresql,"SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 1, 'g')",strings.sql,SAME,,"[('A PXstgreSQL function',)]"
postgresql,postgresql,"SELECT regexp_count('123123123123123', '(12)3')",strings.sql,SAME,,"[(5,)]"
postgresql,postgresql,"SELECT regexp_count('123123123123', '123', 1)",strings.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT regexp_count('123123123123', '123', 3)",strings.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT regexp_count('123123123123', '123', 33)",strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT regexp_count('ABCABCABCABC', 'Abc', 1, '')",strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT regexp_count('ABCABCABCABC', 'Abc', 1, 'i')",strings.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT regexp_like('Steven', '^Ste(v|ph)en$')",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT regexp_like('a'||CHR(10)||'d', 'a.d', 'n')",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT regexp_like('a'||CHR(10)||'d', 'a.d', 's')",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT regexp_like('abc', ' a . c ', 'x')",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT regexp_instr('abcdefghi', 'd.f')",strings.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT regexp_instr('abcdefghi', 'd.q')",strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT regexp_instr('abcabcabc', 'a.c')",strings.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT regexp_instr('abcabcabc', 'a.c', 2)",strings.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT regexp_instr('abcabcabc', 'a.c', 1, 3)",strings.sql,SAME,,"[(7,)]"
postgresql,postgresql,"SELECT regexp_instr('abcabcabc', 'a.c', 1, 4)",strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT regexp_instr('abcabcabc', 'A.C', 1, 2, 0, 'i')",strings.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 0)",strings.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 1)",strings.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 2)",strings.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 3)",strings.sql,SAME,,"[(5,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 4)",strings.sql,SAME,,"[(7,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 5)",strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 0)",strings.sql,SAME,,"[(9,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 1)",strings.sql,SAME,,"[(4,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 2)",strings.sql,SAME,,"[(9,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 3)",strings.sql,SAME,,"[(7,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 4)",strings.sql,SAME,,"[(9,)]"
postgresql,postgresql,"SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 5)",strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT regexp_instr('foo', 'foo(bar)?', 1, 1, 0, '', 1)",strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT regexp_substr('abcdefghi', 'd.f')",strings.sql,SAME,,"[('def',)]"
postgresql,postgresql,"SELECT regexp_substr('abcdefghi', 'd.q') IS NULL AS t",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT regexp_substr('abcabcabc', 'a.c')",strings.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT regexp_substr('abcabcabc', 'a.c', 2)",strings.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT regexp_substr('abcabcabc', 'a.c', 1, 3)",strings.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT regexp_substr('abcabcabc', 'a.c', 1, 4) IS NULL AS t",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT regexp_substr('abcabcabc', 'A.C', 1, 2, 'i')",strings.sql,SAME,,"[('abc',)]"
postgresql,postgresql,"SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 0)",strings.sql,SAME,,"[('12345678',)]"
postgresql,postgresql,"SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 1)",strings.sql,SAME,,"[('123',)]"
postgresql,postgresql,"SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 2)",strings.sql,SAME,,"[('45678',)]"
postgresql,postgresql,"SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 3)",strings.sql,SAME,,"[('56',)]"
postgresql,postgresql,"SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 4)",strings.sql,SAME,,"[('78',)]"
postgresql,postgresql,"SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 5) IS NULL AS t",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT regexp_substr('foo', 'foo(bar)?', 1, 1, '', 1) IS NULL AS t",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT regexp_matches('foobarbequebaz', $re$(bar)(beque)$re$)",strings.sql,SAME,,"[(['bar', 'beque'],)]"
postgresql,postgresql,"SELECT regexp_matches('foObARbEqUEbAz', $re$(bar)(beque)$re$, 'i')",strings.sql,SAME,,"[(['bAR', 'bEqUE'],)]"
postgresql,postgresql,"SELECT regexp_matches('foobarbequebazilbarfbonk', $re$(b[^b]+)(b[^b]+)$re$, 'g')",strings.sql,SAME,,"[(['bar', 'beque'],), (['bazil', 'barf'],)]"
postgresql,postgresql,"SELECT regexp_matches('foobarbequebaz', $re$(bar)(.*)(beque)$re$)",strings.sql,SAME,,"[(['bar', '', 'beque'],)]"
postgresql,postgresql,"SELECT regexp_matches('foobarbequebaz', $re$(bar)(.+)(beque)$re$)",strings.sql,SAME,,[]
postgresql,postgresql,"SELECT regexp_matches('foobarbequebaz', $re$(bar)(.+)?(beque)$re$)",strings.sql,SAME,,"[(['bar', None, 'beque'],)]"
postgresql,postgresql,"SELECT regexp_matches('foobarbequebaz', $re$barbeque$re$)",strings.sql,SAME,,"[(['barbeque'],)]"
postgresql,postgresql,"SELECT regexp_matches('foo' || chr(10) || 'bar' || chr(10) || 'bequq' || chr(10) || 'baz', '^', 'mg')",strings.sql,SAME,,"[([''],), ([''],), ([''],), ([''],)]"
postgresql,postgresql,"SELECT regexp_matches('foo' || chr(10) || 'bar' || chr(10) || 'bequq' || chr(10) || 'baz', '$', 'mg')",strings.sql,SAME,,"[([''],), ([''],), ([''],), ([''],)]"
postgresql,postgresql,"SELECT regexp_matches('1' || chr(10) || '2' || chr(10) || '3' || chr(10) || '4' || chr(10), '^.?', 'mg')",strings.sql,SAME,,"[(['1'],), (['2'],), (['3'],), (['4'],), ([''],)]"
postgresql,postgresql,"SELECT regexp_matches(chr(10) || '1' || chr(10) || '2' || chr(10) || '3' || chr(10) || '4' || chr(10), '.?$', 'mg')",strings.sql,SAME,,"[([''],), (['1'],), ([''],), (['2'],), ([''],), (['3'],), ([''],), (['4'],), ([''],), ([''],)]"
postgresql,postgresql,"SELECT regexp_matches(chr(10) || '1' || chr(10) || '2' || chr(10) || '3' || chr(10) || '4', '.?$', 'mg')",strings.sql,SAME,,"[([''],), (['1'],), ([''],), (['2'],), ([''],), (['3'],), ([''],), (['4'],), ([''],)]"
postgresql,postgresql,"SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', $re$\s+$re$) AS foo",strings.sql,SAME,,"[('the', 3), ('quick', 5), ('brown', 5), ('fox', 3), ('jumps', 5), ('over', 4), ('the', 3), ('lazy', 4), ('dog', 3)]"
postgresql,postgresql,"SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', $re$\s+$re$)",strings.sql,SAME,,"[(['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog'],)]"
postgresql,postgresql,"SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', $re$\s*$re$) AS foo",strings.sql,SAME,,"[('t', 1), ('h', 1), ('e', 1), ('q', 1), ('u', 1), ('i', 1), ('c', 1), ('k', 1), ('b', 1), ('r', 1), ('o', 1), ('w', 1), ('n', 1), ('f', 1), ('o', 1), ('x', 1), ('j', 1), ('u', 1), ('m', 1), ('p', 1), ('s', 1), ('o', 1), ('v', 1), ('e', 1), ('r', 1), ('t', 1), ('h', 1), ('e', 1), ('l', 1), ('a', 1), ('z', 1), ('y', 1), ('d', 1), ('o', 1), ('g', 1)]"
postgresql,postgresql,"SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', $re$\s*$re$)",strings.sql,SAME,,"[(['t', 'h', 'e', 'q', 'u', 'i', 'c', 'k', 'b', 'r', 'o', 'w', 'n', 'f', 'o', 'x', 'j', 'u', 'm', 'p', 's', 'o', 'v', 'e', 'r', 't', 'h', 'e', 'l', 'a', 'z', 'y', 'd', 'o', 'g'],)]"
postgresql,postgresql,"SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', '') AS foo",strings.sql,SAME,,"[('t', 1), ('h', 1), ('e', 1), (' ', 1), ('q', 1), ('u', 1), ('i', 1), ('c', 1), ('k', 1), (' ', 1), ('b', 1), ('r', 1), ('o', 1), ('w', 1), ('n', 1), (' ', 1), ('f', 1), ('o', 1), ('x', 1), (' ', 1), ('j', 1), ('u', 1), ('m', 1), ('p', 1), ('s', 1), (' ', 1), ('o', 1), ('v', 1), ('e', 1), ('r', 1), (' ', 1), ('t', 1), ('h', 1), ('e', 1), (' ', 1), ('l', 1), ('a', 1), ('z', 1), ('y', 1), (' ', 1), ('d', 1), ('o', 1), ('g', 1)]"
postgresql,postgresql,"SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', '')",strings.sql,SAME,,"[(['t', 'h', 'e', ' ', 'q', 'u', 'i', 'c', 'k', ' ', 'b', 'r', 'o', 'w', 'n', ' ', 'f', 'o', 'x', ' ', 'j', 'u', 'm', 'p', 's', ' ', 'o', 'v', 'e', 'r', ' ', 't', 'h', 'e', ' ', 'l', 'a', 'z', 'y', ' ', 'd', 'o', 'g'],)]"
postgresql,postgresql,"SELECT foo, length(foo) FROM regexp_split_to_table('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'i') AS foo",strings.sql,SAME,,"[('th', 2), (' QUick bROWn FOx jUMPs ov', 25), ('r Th', 4), (' lazy dOG', 9)]"
postgresql,postgresql,"SELECT regexp_split_to_array('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'i')",strings.sql,SAME,,"[(['th', ' QUick bROWn FOx jUMPs ov', 'r Th', ' lazy dOG'],)]"
postgresql,postgresql,"SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', 'nomatch') AS foo",strings.sql,SAME,,"[('the quick brown fox jumps over the lazy dog', 43)]"
postgresql,postgresql,"SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', 'nomatch')",strings.sql,SAME,,"[(['the quick brown fox jumps over the lazy dog'],)]"
postgresql,postgresql,"SELECT regexp_split_to_array('123456','1')",strings.sql,SAME,,"[(['', '23456'],)]"
postgresql,postgresql,"SELECT regexp_split_to_array('123456','6')",strings.sql,SAME,,"[(['12345', ''],)]"
postgresql,postgresql,"SELECT regexp_split_to_array('123456','.')",strings.sql,SAME,,"[(['', '', '', '', '', '', ''],)]"
postgresql,postgresql,"SELECT regexp_split_to_array('123456','')",strings.sql,SAME,,"[(['1', '2', '3', '4', '5', '6'],)]"
postgresql,postgresql,"SELECT regexp_split_to_array('123456','(?:)')",strings.sql,SAME,,"[(['1', '2', '3', '4', '5', '6'],)]"
postgresql,postgresql,"SELECT regexp_split_to_array('1','')",strings.sql,SAME,,"[(['1'],)]"
postgresql,postgresql,"SELECT POSITION('4' IN '1234567890') = '4' AS ""4""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT POSITION('5' IN '1234567890') = '5' AS ""5""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT OVERLAY('abcdef' PLACING '45' FROM 4) AS ""abc45f""",strings.sql,SAME,,"[('abc45f',)]"
postgresql,postgresql,"SELECT OVERLAY('yabadoo' PLACING 'daba' FROM 5) AS ""yabadaba""",strings.sql,SAME,,"[('yabadaba',)]"
postgresql,postgresql,"SELECT OVERLAY('yabadoo' PLACING 'daba' FROM 5 FOR 0) AS ""yabadabadoo""",strings.sql,SAME,,"[('yabadabadoo',)]"
postgresql,postgresql,"SELECT OVERLAY('babosa' PLACING 'ubb' FROM 2 FOR 4) AS ""bubba""",strings.sql,SAME,,"[('bubba',)]"
postgresql,postgresql,"SELECT 'hawkeye' LIKE 'h%' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'hawkeye' NOT LIKE 'h%' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'hawkeye' LIKE 'H%' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'hawkeye' NOT LIKE 'H%' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'hawkeye' LIKE 'indio%' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'hawkeye' NOT LIKE 'indio%' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'hawkeye' LIKE 'h%eye' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'hawkeye' NOT LIKE 'h%eye' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'indio' LIKE '_ndio' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'indio' NOT LIKE '_ndio' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'indio' LIKE 'in__o' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'indio' NOT LIKE 'in__o' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'indio' LIKE 'in_o' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'indio' NOT LIKE 'in_o' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'abc'::name LIKE '_b_' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'abc'::name NOT LIKE '_b_' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'abc'::bytea LIKE '_b_'::bytea AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'abc'::bytea NOT LIKE '_b_'::bytea AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'hawkeye' LIKE 'h%' ESCAPE '#' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'hawkeye' NOT LIKE 'h%' ESCAPE '#' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'indio' LIKE 'ind_o' ESCAPE '$' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'indio' NOT LIKE 'ind_o' ESCAPE '$' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'h%' LIKE 'h#%' ESCAPE '#' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'h%' NOT LIKE 'h#%' ESCAPE '#' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'h%wkeye' LIKE 'h#%' ESCAPE '#' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'h%wkeye' NOT LIKE 'h#%' ESCAPE '#' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'h%wkeye' LIKE 'h#%%' ESCAPE '#' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'h%wkeye' NOT LIKE 'h#%%' ESCAPE '#' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'h%awkeye' LIKE 'h#%a%k%e' ESCAPE '#' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'h%awkeye' NOT LIKE 'h#%a%k%e' ESCAPE '#' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'indio' LIKE '_ndio' ESCAPE '$' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'indio' NOT LIKE '_ndio' ESCAPE '$' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'i_dio' LIKE 'i$_d_o' ESCAPE '$' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'i_dio' NOT LIKE 'i$_d_o' ESCAPE '$' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'i_dio' LIKE 'i$_nd_o' ESCAPE '$' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'i_dio' NOT LIKE 'i$_nd_o' ESCAPE '$' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'i_dio' LIKE 'i$_d%o' ESCAPE '$' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'i_dio' NOT LIKE 'i$_d%o' ESCAPE '$' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a_c'::bytea LIKE 'a$__'::bytea ESCAPE '$'::bytea AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a_c'::bytea NOT LIKE 'a$__'::bytea ESCAPE '$'::bytea AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'maca' LIKE 'm%aca' ESCAPE '%' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'maca' NOT LIKE 'm%aca' ESCAPE '%' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'ma%a' LIKE 'm%a%%a' ESCAPE '%' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'ma%a' NOT LIKE 'm%a%%a' ESCAPE '%' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'bear' LIKE 'b_ear' ESCAPE '_' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'bear' NOT LIKE 'b_ear' ESCAPE '_' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'be_r' LIKE 'b_e__r' ESCAPE '_' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'be_r' NOT LIKE 'b_e__r' ESCAPE '_' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'be_r' LIKE '__e__r' ESCAPE '_' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'be_r' NOT LIKE '__e__r' ESCAPE '_' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'hawkeye' ILIKE 'h%' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'hawkeye' NOT ILIKE 'h%' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'hawkeye' ILIKE 'H%' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'hawkeye' NOT ILIKE 'H%' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'hawkeye' ILIKE 'H%Eye' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'hawkeye' NOT ILIKE 'H%Eye' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'Hawkeye' ILIKE 'h%' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'Hawkeye' NOT ILIKE 'h%' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'ABC'::name ILIKE '_b_' AS ""true""",strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'ABC'::name NOT ILIKE '_b_' AS ""false""",strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'foo' LIKE '_%' as t, 'f' LIKE '_%' as t, '' LIKE '_%' as f",strings.sql,SAME,,"[(True, True, False)]"
postgresql,postgresql,"SELECT 'foo' LIKE '%_' as t, 'f' LIKE '%_' as t, '' LIKE '%_' as f",strings.sql,SAME,,"[(True, True, False)]"
postgresql,postgresql,"SELECT 'foo' LIKE '__%' as t, 'foo' LIKE '___%' as t, 'foo' LIKE '____%' as f",strings.sql,SAME,,"[(True, True, False)]"
postgresql,postgresql,"SELECT 'foo' LIKE '%__' as t, 'foo' LIKE '%___' as t, 'foo' LIKE '%____' as f",strings.sql,SAME,,"[(True, True, False)]"
postgresql,postgresql,SELECT 'jack' LIKE '%____%' AS t,strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT * FROM texttest WHERE a LIKE '%1%',strings.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM byteatest WHERE a LIKE '%1%',strings.sql,SAME,,[]
postgresql,postgresql,"SELECT 'unknown' || ' and unknown' AS ""Concat unknown types""",strings.sql,SAME,,"[('unknown and unknown',)]"
postgresql,postgresql,"SELECT text 'text' || ' and unknown' AS ""Concat text to unknown type""",strings.sql,SAME,,"[('text and unknown',)]"
postgresql,postgresql,"SELECT char(20) 'characters' || ' and text' AS ""Concat char to unknown type""",strings.sql,SAME,,"[('characters and text',)]"
postgresql,postgresql,"SELECT text 'text' || char(20) ' and characters' AS ""Concat text to char""",strings.sql,SAME,,"[('text and characters',)]"
postgresql,postgresql,"SELECT text 'text' || varchar ' and varchar' AS ""Concat text to varchar""",strings.sql,SAME,,"[('text and varchar',)]"
postgresql,postgresql,alter table toasttest alter column f1 set storage external,strings.sql,SAME,,[]
postgresql,postgresql,"SELECT substr(f1, -1, 5) from toasttest",strings.sql,SAME,,"[('123',), ('123',), ('123',), ('123',)]"
postgresql,postgresql,"SELECT substr(f1, 99995) from toasttest",strings.sql,SAME,,"[('567890',), ('567890',), ('567890',), ('567890',)]"
postgresql,postgresql,"SELECT substr(f1, 99995, 10) from toasttest",strings.sql,SAME,,"[('567890',), ('567890',), ('567890',), ('567890',)]"
postgresql,postgresql,TRUNCATE TABLE toasttest,strings.sql,SAME,,[]
postgresql,postgresql,SELECT pg_relation_size(reltoastrelid) = 0 AS is_empty   FROM pg_class where relname = 'toasttest',strings.sql,SAME,,"[(False,)]"
postgresql,postgresql,TRUNCATE TABLE toasttest,strings.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE toasttest set (toast_tuple_target = 4080),strings.sql,SAME,,[]
postgresql,postgresql,SELECT pg_relation_size(reltoastrelid) = 0 AS is_empty   FROM pg_class where relname = 'toasttest',strings.sql,SAME,,"[(True,)]"
postgresql,postgresql,alter table toasttest alter column f1 set storage external,strings.sql,SAME,,[]
postgresql,postgresql,"SELECT substr(f1, -1, 5) from toasttest",strings.sql,SAME,,"[(<memory at 0x126f84100>,), (<memory at 0x126f841c0>,), (<memory at 0x126f84280>,), (<memory at 0x126f84340>,)]"
postgresql,postgresql,"SELECT substr(f1, 99995) from toasttest",strings.sql,SAME,,"[(<memory at 0x126f84400>,), (<memory at 0x126f844c0>,), (<memory at 0x126f84580>,), (<memory at 0x126f84640>,)]"
postgresql,postgresql,"SELECT substr(f1, 99995, 10) from toasttest",strings.sql,SAME,,"[(<memory at 0x126f84700>,), (<memory at 0x126f847c0>,), (<memory at 0x126f84880>,), (<memory at 0x126f84940>,)]"
postgresql,postgresql,"SELECT length(c), c::text FROM toasttest",strings.sql,SAME,,"[(1, 'x')]"
postgresql,postgresql,SELECT c FROM toasttest,strings.sql,SAME,,"[('x                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ',)]"
postgresql,postgresql,"SELECT length('abcdef') AS ""length_6""",strings.sql,SAME,,"[(6,)]"
postgresql,postgresql,"SELECT strpos('abcdef', 'cd') AS ""pos_3""",strings.sql,SAME,,"[(3,)]"
postgresql,postgresql,"SELECT strpos('abcdef', 'xy') AS ""pos_0""",strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT strpos('abcdef', '') AS ""pos_1""",strings.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT strpos('', 'xy') AS ""pos_0""",strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT strpos('', '') AS ""pos_1""",strings.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT replace('abcdef', 'de', '45') AS ""abc45f""",strings.sql,SAME,,"[('abc45f',)]"
postgresql,postgresql,"SELECT replace('yabadabadoo', 'ba', '123') AS ""ya123da123doo""",strings.sql,SAME,,"[('ya123da123doo',)]"
postgresql,postgresql,"SELECT replace('yabadoo', 'bad', '') AS ""yaoo""",strings.sql,SAME,,"[('yaoo',)]"
postgresql,postgresql,"select split_part('','@',1) AS ""empty string""",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"select split_part('','@',-1) AS ""empty string""",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','',1) AS ""joeuser@mydatabase""",strings.sql,SAME,,"[('joeuser@mydatabase',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','',2) AS ""empty string""",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','',-1) AS ""joeuser@mydatabase""",strings.sql,SAME,,"[('joeuser@mydatabase',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','',-2) AS ""empty string""",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','@@',1) AS ""joeuser@mydatabase""",strings.sql,SAME,,"[('joeuser@mydatabase',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','@@',2) AS ""empty string""",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','@',1) AS ""joeuser""",strings.sql,SAME,,"[('joeuser',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','@',2) AS ""mydatabase""",strings.sql,SAME,,"[('mydatabase',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','@',3) AS ""empty string""",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"select split_part('@joeuser@mydatabase@','@',2) AS ""joeuser""",strings.sql,SAME,,"[('joeuser',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','@',-1) AS ""mydatabase""",strings.sql,SAME,,"[('mydatabase',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','@',-2) AS ""joeuser""",strings.sql,SAME,,"[('joeuser',)]"
postgresql,postgresql,"select split_part('joeuser@mydatabase','@',-3) AS ""empty string""",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"select split_part('@joeuser@mydatabase@','@',-2) AS ""mydatabase""",strings.sql,SAME,,"[('mydatabase',)]"
postgresql,postgresql,"select to_hex(-1234) AS ""fffffb2e""",strings.sql,SAME,,"[('fffffb2e',)]"
postgresql,postgresql,"select to_hex(-1234::bigint) AS ""fffffffffffffb2e""",strings.sql,SAME,,"[('fffffffffffffb2e',)]"
postgresql,postgresql,"select to_hex(256*256*256 - 1) AS ""ffffff""",strings.sql,SAME,,"[('ffffff',)]"
postgresql,postgresql,"select to_hex(256::bigint*256::bigint*256::bigint*256::bigint - 1) AS ""ffffffff""",strings.sql,SAME,,"[('ffffffff',)]"
postgresql,postgresql,SET bytea_output TO hex,strings.sql,SAME,,[]
postgresql,postgresql,SELECT sha224(''),strings.sql,SAME,,"[(<memory at 0x126f84a00>,)]"
postgresql,postgresql,SELECT sha224('The quick brown fox jumps over the lazy dog.'),strings.sql,SAME,,"[(<memory at 0x126f84ac0>,)]"
postgresql,postgresql,SELECT sha256(''),strings.sql,SAME,,"[(<memory at 0x126f84b80>,)]"
postgresql,postgresql,SELECT sha256('The quick brown fox jumps over the lazy dog.'),strings.sql,SAME,,"[(<memory at 0x126f84c40>,)]"
postgresql,postgresql,SELECT sha384(''),strings.sql,SAME,,"[(<memory at 0x126f84d00>,)]"
postgresql,postgresql,SELECT sha384('The quick brown fox jumps over the lazy dog.'),strings.sql,SAME,,"[(<memory at 0x126f84dc0>,)]"
postgresql,postgresql,SELECT sha512(''),strings.sql,SAME,,"[(<memory at 0x126f84e80>,)]"
postgresql,postgresql,SELECT sha512('The quick brown fox jumps over the lazy dog.'),strings.sql,SAME,,"[(<memory at 0x126f84f40>,)]"
postgresql,postgresql,"SELECT encode('\x1234567890abcdef00', 'hex')",strings.sql,SAME,,"[('1234567890abcdef00',)]"
postgresql,postgresql,"SELECT decode('1234567890abcdef00', 'hex')",strings.sql,SAME,,"[(<memory at 0x126f85000>,)]"
postgresql,postgresql,"SELECT encode(('\x' || repeat('1234567890abcdef0001', 7))::bytea, 'base64')",strings.sql,SAME,,"[('EjRWeJCrze8AARI0VniQq83vAAESNFZ4kKvN7wABEjRWeJCrze8AARI0VniQq83vAAESNFZ4kKvN\n7wABEjRWeJCrze8AAQ==',)]"
postgresql,postgresql,"SELECT decode(encode(('\x' || repeat('1234567890abcdef0001', 7))::bytea,                      'base64'), 'base64')",strings.sql,SAME,,"[(<memory at 0x126f850c0>,)]"
postgresql,postgresql,"SELECT encode('\x1234567890abcdef00', 'escape')",strings.sql,SAME,,"[('\x124Vx\\220\\253\\315\\357\\000',)]"
postgresql,postgresql,"SELECT decode(encode('\x1234567890abcdef00', 'escape'), 'escape')",strings.sql,SAME,,"[(<memory at 0x126f85180>,)]"
postgresql,postgresql,"SELECT get_bit('\x1234567890abcdef00'::bytea, 43)",strings.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT set_bit('\x1234567890abcdef00'::bytea, 43, 0)",strings.sql,SAME,,"[(<memory at 0x126f85240>,)]"
postgresql,postgresql,"SELECT get_byte('\x1234567890abcdef00'::bytea, 3)",strings.sql,SAME,,"[(120,)]"
postgresql,postgresql,"SELECT set_byte('\x1234567890abcdef00'::bytea, 7, 11)",strings.sql,SAME,,"[(<memory at 0x126f85300>,)]"
postgresql,postgresql,set escape_string_warning = off,strings.sql,SAME,,[]
postgresql,postgresql,set standard_conforming_strings = off,strings.sql,SAME,,[]
postgresql,postgresql,show escape_string_warning,strings.sql,SAME,,"[('off',)]"
postgresql,postgresql,show standard_conforming_strings,strings.sql,SAME,,"[('off',)]"
postgresql,postgresql,set escape_string_warning = on,strings.sql,SAME,,[]
postgresql,postgresql,set standard_conforming_strings = on,strings.sql,SAME,,[]
postgresql,postgresql,show escape_string_warning,strings.sql,SAME,,"[('on',)]"
postgresql,postgresql,show standard_conforming_strings,strings.sql,SAME,,"[('on',)]"
postgresql,postgresql,"select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6",strings.sql,SAME,,"[('a\\bcd', ""a\\b'cd"", ""a\\b''cd"", 'abcd\\', ""ab\\'cd"", '\\\\')]"
postgresql,postgresql,set standard_conforming_strings = off,strings.sql,SAME,,[]
postgresql,postgresql,"select 'a\\bcd' as f1, 'a\\b\'cd' as f2, 'a\\b\'''cd' as f3, 'abcd\\'   as f4, 'ab\\\'cd' as f5, '\\\\' as f6",strings.sql,SAME,,"[('a\\bcd', ""a\\b'cd"", ""a\\b''cd"", 'abcd\\', ""ab\\'cd"", '\\\\')]"
postgresql,postgresql,set escape_string_warning = off,strings.sql,SAME,,[]
postgresql,postgresql,set standard_conforming_strings = on,strings.sql,SAME,,[]
postgresql,postgresql,"select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6",strings.sql,SAME,,"[('a\\bcd', ""a\\b'cd"", ""a\\b''cd"", 'abcd\\', ""ab\\'cd"", '\\\\')]"
postgresql,postgresql,set standard_conforming_strings = off,strings.sql,SAME,,[]
postgresql,postgresql,"select 'a\\bcd' as f1, 'a\\b\'cd' as f2, 'a\\b\'''cd' as f3, 'abcd\\'   as f4, 'ab\\\'cd' as f5, '\\\\' as f6",strings.sql,SAME,,"[('a\\bcd', ""a\\b'cd"", ""a\\b''cd"", 'abcd\\', ""ab\\'cd"", '\\\\')]"
postgresql,postgresql,reset standard_conforming_strings,strings.sql,SAME,,[]
postgresql,postgresql,SET bytea_output TO escape,strings.sql,SAME,,[]
postgresql,postgresql,SELECT initcap('hi THOMAS'),strings.sql,SAME,,"[('Hi Thomas',)]"
postgresql,postgresql,"SELECT lpad('hi', 5, 'xy')",strings.sql,SAME,,"[('xyxhi',)]"
postgresql,postgresql,"SELECT lpad('hi', 5)",strings.sql,SAME,,"[('   hi',)]"
postgresql,postgresql,"SELECT lpad('hi', -5, 'xy')",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT lpad('hello', 2)",strings.sql,SAME,,"[('he',)]"
postgresql,postgresql,"SELECT lpad('hi', 5, '')",strings.sql,SAME,,"[('hi',)]"
postgresql,postgresql,"SELECT rpad('hi', 5, 'xy')",strings.sql,SAME,,"[('hixyx',)]"
postgresql,postgresql,"SELECT rpad('hi', 5)",strings.sql,SAME,,"[('hi   ',)]"
postgresql,postgresql,"SELECT rpad('hi', -5, 'xy')",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT rpad('hello', 2)",strings.sql,SAME,,"[('he',)]"
postgresql,postgresql,"SELECT rpad('hi', 5, '')",strings.sql,SAME,,"[('hi',)]"
postgresql,postgresql,"SELECT ltrim('zzzytrim', 'xyz')",strings.sql,SAME,,"[('trim',)]"
postgresql,postgresql,"SELECT translate('', '14', 'ax')",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT translate('12345', '14', 'ax')",strings.sql,SAME,,"[('a23x5',)]"
postgresql,postgresql,"SELECT translate('12345', '134', 'a')",strings.sql,SAME,,"[('a25',)]"
postgresql,postgresql,SELECT ascii('x'),strings.sql,SAME,,"[(120,)]"
postgresql,postgresql,SELECT ascii(''),strings.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT chr(65),strings.sql,SAME,,"[('A',)]"
postgresql,postgresql,"SELECT repeat('Pg', 4)",strings.sql,SAME,,"[('PgPgPgPg',)]"
postgresql,postgresql,"SELECT repeat('Pg', -4)",strings.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT SUBSTRING('1234567890'::bytea FROM 3) ""34567890""",strings.sql,SAME,,"[(<memory at 0x126f853c0>,)]"
postgresql,postgresql,"SELECT SUBSTRING('1234567890'::bytea FROM 4 FOR 3) AS ""456""",strings.sql,SAME,,"[(<memory at 0x126f85480>,)]"
postgresql,postgresql,"SELECT SUBSTRING('string'::bytea FROM 2 FOR 2147483646) AS ""tring""",strings.sql,SAME,,"[(<memory at 0x126f85540>,)]"
postgresql,postgresql,"SELECT SUBSTRING('string'::bytea FROM -10 FOR 2147483646) AS ""string""",strings.sql,SAME,,"[(<memory at 0x126f85600>,)]"
postgresql,postgresql,SELECT trim(E'\\000'::bytea from E'\\000Tom\\000'::bytea),strings.sql,SAME,,"[(<memory at 0x126f856c0>,)]"
postgresql,postgresql,SELECT trim(leading E'\\000'::bytea from E'\\000Tom\\000'::bytea),strings.sql,SAME,,"[(<memory at 0x126f85780>,)]"
postgresql,postgresql,SELECT trim(trailing E'\\000'::bytea from E'\\000Tom\\000'::bytea),strings.sql,SAME,,"[(<memory at 0x126f85840>,)]"
postgresql,postgresql,"SELECT btrim(E'\\000trim\\000'::bytea, E'\\000'::bytea)",strings.sql,SAME,,"[(<memory at 0x126f85900>,)]"
postgresql,postgresql,"SELECT btrim(''::bytea, E'\\000'::bytea)",strings.sql,SAME,,"[(<memory at 0x126f859c0>,)]"
postgresql,postgresql,"SELECT btrim(E'\\000trim\\000'::bytea, ''::bytea)",strings.sql,SAME,,"[(<memory at 0x126f85a80>,)]"
postgresql,postgresql,"SELECT encode(overlay(E'Th\\000omas'::bytea placing E'Th\\001omas'::bytea from 2),'escape')",strings.sql,SAME,,"[('TTh\x01omas',)]"
postgresql,postgresql,"SELECT encode(overlay(E'Th\\000omas'::bytea placing E'\\002\\003'::bytea from 8),'escape')",strings.sql,SAME,,"[('Th\\000omas\x02\x03',)]"
postgresql,postgresql,"SELECT encode(overlay(E'Th\\000omas'::bytea placing E'\\002\\003'::bytea from 5 for 3),'escape')",strings.sql,SAME,,"[('Th\\000o\x02\x03',)]"
postgresql,postgresql,SELECT bit_count('\x1234567890'::bytea),strings.sql,SAME,,"[(15,)]"
postgresql,postgresql,SELECT unistr('\0064at\+0000610'),strings.sql,SAME,,"[('data0',)]"
postgresql,postgresql,SELECT unistr('d\u0061t\U000000610'),strings.sql,SAME,,"[('data0',)]"
postgresql,postgresql,SELECT unistr('a\\b'),strings.sql,SAME,,"[('a\\b',)]"
postgresql,postgresql,BEGIN,subscription.sql,SAME,,[]
postgresql,postgresql,COMMIT,subscription.sql,SAME,,[]
postgresql,postgresql,"SELECT obj_description(s.oid, 'pg_subscription') FROM pg_subscription s",subscription.sql,SAME,,[]
postgresql,postgresql,"SELECT subname, stats_reset IS NULL stats_reset_is_null FROM pg_stat_subscription_stats WHERE subname = 'regress_testsub'",subscription.sql,SAME,,[]
postgresql,postgresql,"SELECT subname, stats_reset IS NULL stats_reset_is_null FROM pg_stat_subscription_stats WHERE subname = 'regress_testsub'",subscription.sql,SAME,,[]
postgresql,postgresql,BEGIN,subscription.sql,SAME,,[]
postgresql,postgresql,COMMIT,subscription.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,subscription.sql,SAME,,[]
postgresql,postgresql,BEGIN,subscription.sql,SAME,,[]
postgresql,postgresql,COMMIT,subscription.sql,SAME,,[]
postgresql,postgresql,BEGIN,subscription.sql,SAME,,[]
postgresql,postgresql,COMMIT,subscription.sql,SAME,,[]
postgresql,postgresql,DROP SUBSCRIPTION IF EXISTS regress_testsub,subscription.sql,SAME,,[]
postgresql,postgresql,BEGIN,subscription.sql,SAME,,[]
postgresql,postgresql,END,subscription.sql,SAME,,[]
postgresql,postgresql,BEGIN,subscription.sql,SAME,,[]
postgresql,postgresql,END,subscription.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION func() RETURNS VOID AS $$ ALTER SUBSCRIPTION regress_testsub SET PUBLICATION mypub WITH (refresh = true) $$ LANGUAGE SQL,subscription.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION func,subscription.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,subscription.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,subscription.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,subscription.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,subscription.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,subscription.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,subscription.sql,SAME,,[]
postgresql,postgresql,SELECT 1 AS one WHERE 1 IN (SELECT 1),subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT 1 AS zero WHERE 1 NOT IN (SELECT 1),subselect.sql,SAME,,[]
postgresql,postgresql,SELECT 1 AS zero WHERE 1 IN (SELECT 2),subselect.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM (SELECT 1 AS x) ss,subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT * FROM ((SELECT 1 AS x)) ss,subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT * FROM ((SELECT 1 AS x)), ((SELECT * FROM ((SELECT 2 AS y))))",subselect.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,(SELECT 2) UNION SELECT 2,subselect.sql,SAME,,"[(2,)]"
postgresql,postgresql,((SELECT 2)) UNION SELECT 2,subselect.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT ((SELECT 2) UNION SELECT 2),subselect.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT (((SELECT 2)) UNION SELECT 2),subselect.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT (SELECT ARRAY[1,2,3])[1]",subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT ((SELECT ARRAY[1,2,3]))[2]",subselect.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT (((SELECT ARRAY[1,2,3])))[3]",subselect.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT * FROM SUBSELECT_TBL,subselect.sql,SAME,,"[(1, 2, 3.0), (2, 3, 4.0), (3, 4, 5.0), (1, 1, 1.0), (2, 2, 2.0), (3, 3, 3.0), (6, 7, 8.0), (8, 9, None)]"
postgresql,postgresql,"SELECT f1 AS ""Constant Select"" FROM SUBSELECT_TBL   WHERE f1 IN (SELECT 1)",subselect.sql,SAME,,"[(1,), (1,)]"
postgresql,postgresql,"SELECT f1 AS ""Uncorrelated Field"" FROM SUBSELECT_TBL   WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL)",subselect.sql,SAME,,"[(1,), (2,), (3,), (1,), (2,), (3,)]"
postgresql,postgresql,"SELECT f1 AS ""Uncorrelated Field"" FROM SUBSELECT_TBL   WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE     f2 IN (SELECT f1 FROM SUBSELECT_TBL))",subselect.sql,SAME,,"[(1,), (2,), (3,), (1,), (2,), (3,)]"
postgresql,postgresql,"SELECT f1, f2   FROM SUBSELECT_TBL   WHERE (f1, f2) NOT IN (SELECT f2, CAST(f3 AS int4) FROM SUBSELECT_TBL                          WHERE f3 IS NOT NULL)",subselect.sql,SAME,,"[(1, 2), (6, 7), (8, 9)]"
postgresql,postgresql,"SELECT f1 AS ""Correlated Field"", f2 AS ""Second Field""   FROM SUBSELECT_TBL upper   WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE f1 = upper.f1)",subselect.sql,SAME,,"[(1, 2), (2, 3), (3, 4), (1, 1), (2, 2), (3, 3)]"
postgresql,postgresql,"SELECT f1 AS ""Correlated Field"", f3 AS ""Second Field""   FROM SUBSELECT_TBL upper   WHERE f1 IN     (SELECT f2 FROM SUBSELECT_TBL WHERE CAST(upper.f2 AS float) = f3)",subselect.sql,SAME,,"[(2, 4.0), (3, 5.0), (1, 1.0), (2, 2.0), (3, 3.0)]"
postgresql,postgresql,"SELECT f1 AS ""Correlated Field"", f3 AS ""Second Field""   FROM SUBSELECT_TBL upper   WHERE f3 IN (SELECT upper.f1 + f2 FROM SUBSELECT_TBL                WHERE f2 = CAST(f3 AS integer))",subselect.sql,SAME,,"[(1, 3.0), (2, 4.0), (3, 5.0), (6, 8.0)]"
postgresql,postgresql,"SELECT f1 AS ""Correlated Field""   FROM SUBSELECT_TBL   WHERE (f1, f2) IN (SELECT f2, CAST(f3 AS int4) FROM SUBSELECT_TBL                      WHERE f3 IS NOT NULL)",subselect.sql,SAME,,"[(2,), (3,), (1,), (2,), (3,)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT ROW(1, 2) = (SELECT f1, f2) AS eq FROM SUBSELECT_TBL",subselect.sql,SAME,,"[('Seq Scan on public.subselect_tbl',), ('  Output: (SubPlan 1)',), ('  SubPlan 1',), ('    ->  Result',), ('          Output: subselect_tbl.f1, subselect_tbl.f2',)]"
postgresql,postgresql,"SELECT ROW(1, 2) = (SELECT f1, f2) AS eq FROM SUBSELECT_TBL",subselect.sql,SAME,,"[(True,), (False,), (False,), (False,), (False,), (False,), (False,), (False,)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT ROW(1, 2) = (SELECT 3, 4) AS eq FROM SUBSELECT_TBL",subselect.sql,SAME,,"[('Seq Scan on public.subselect_tbl',), ('  Output: ((1 = $0) AND (2 = $1))',), ('  InitPlan 1 (returns $0,$1)',), ('    ->  Result',), ('          Output: 3, 4',)]"
postgresql,postgresql,"SELECT ROW(1, 2) = (SELECT 3, 4) AS eq FROM SUBSELECT_TBL",subselect.sql,SAME,,"[(False,), (False,), (False,), (False,), (False,), (False,), (False,), (False,)]"
postgresql,postgresql,"SELECT *, pg_typeof(f1) FROM   (SELECT 'foo' AS f1 FROM generate_series(1,3)) ss ORDER BY 1",subselect.sql,SAME,,"[('foo', 'text'), ('foo', 'text'), ('foo', 'text')]"
postgresql,postgresql,"explain (verbose, costs off) select '42' union all select '43'",subselect.sql,SAME,,"[('Append',), ('  ->  Result',), (""        Output: '42'::text"",), ('  ->  Result',), (""        Output: '43'::text"",)]"
postgresql,postgresql,"explain (verbose, costs off) select '42' union all select 43",subselect.sql,SAME,,"[('Append',), ('  ->  Result',), ('        Output: 42',), ('  ->  Result',), ('        Output: 43',)]"
postgresql,postgresql,"explain (verbose, costs off) select 1 = all (select (select 1))",subselect.sql,SAME,,"[('Result',), ('  Output: (SubPlan 2)',), ('  SubPlan 2',), ('    ->  Materialize',), ('          Output: ($0)',), ('          InitPlan 1 (returns $0)',), ('            ->  Result',), ('                  Output: 1',), ('          ->  Result',), ('                Output: $0',)]"
postgresql,postgresql,select 1 = all (select (select 1)),subselect.sql,SAME,,"[(True,)]"
postgresql,postgresql,CREATE TEMP TABLE foo (id integer),subselect.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE bar (id1 integer, id2 integer)",subselect.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM foo WHERE id IN     (SELECT id2 FROM (SELECT DISTINCT id1, id2 FROM bar) AS s)",subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT * FROM foo WHERE id IN     (SELECT id2 FROM (SELECT id1,id2 FROM bar GROUP BY id1,id2) AS s)",subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT * FROM foo WHERE id IN     (SELECT id2 FROM (SELECT id1, id2 FROM bar UNION                       SELECT id1, id2 FROM bar) AS s)",subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT * FROM foo WHERE id IN     (SELECT id2 FROM (SELECT DISTINCT ON (id2) id1, id2 FROM bar) AS s)",subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT * FROM foo WHERE id IN     (SELECT id2 FROM (SELECT id2 FROM bar GROUP BY id2) AS s),subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT * FROM foo WHERE id IN     (SELECT id2 FROM (SELECT id2 FROM bar UNION                       SELECT id2 FROM bar) AS s),subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,"create temp table parts (     partnum     text,     cost        float8 )",subselect.sql,SAME,,[]
postgresql,postgresql,"create temp table shipped (     ttype       char(2),     ordnum      int4,     partnum     text,     value       float8 )",subselect.sql,SAME,,[]
postgresql,postgresql,create temp view shipped_view as     select * from shipped where ttype = 'wt',subselect.sql,SAME,,[]
postgresql,postgresql,select * from shipped_view,subselect.sql,SAME,,"[('wt', 0, '1', 1234.56)]"
postgresql,postgresql,"create rule shipped_view_update as on update to shipped_view do instead     update shipped set partnum = new.partnum, value = new.value         where ttype = new.ttype and ordnum = new.ordnum",subselect.sql,SAME,,[]
postgresql,postgresql,select * from shipped_view,subselect.sql,SAME,,"[('wt', 0, '1', 1234.56)]"
postgresql,postgresql,create temp table numeric_table (num_col numeric),subselect.sql,SAME,,[]
postgresql,postgresql,create temp table float_table (float_col float8),subselect.sql,SAME,,[]
postgresql,postgresql,select * from float_table   where float_col in (select num_col from numeric_table),subselect.sql,SAME,,"[(1.0,), (2.0,), (3.0,)]"
postgresql,postgresql,select * from numeric_table   where num_col in (select float_col from float_table),subselect.sql,SAME,,"[(Decimal('1'),), (Decimal('1.000000000000000000001'),), (Decimal('2'),), (Decimal('3'),)]"
postgresql,postgresql,"create temp table ta (id int primary key, val int)",subselect.sql,SAME,,[]
postgresql,postgresql,"create temp table tb (id int primary key, aval int)",subselect.sql,SAME,,[]
postgresql,postgresql,"create temp table tc (id int primary key, aid int)",subselect.sql,SAME,,[]
postgresql,postgresql,select   ( select min(tb.id) from tb     where tb.aval = (select ta.val from ta where ta.id = tc.aid) ) as min_tb_id from tc,subselect.sql,SAME,,"[(1,), (3,)]"
postgresql,postgresql,"create temp table t1 (f1 numeric(14,0), f2 varchar(30))",subselect.sql,SAME,,[]
postgresql,postgresql,"select * from   (select distinct f1, f2, (select f2 from t1 x where x.f1 = up.f1) as fs    from t1 up) ss group by f1,f2,fs",subselect.sql,SAME,,[]
postgresql,postgresql,create temp table table_a(id integer),subselect.sql,SAME,,[]
postgresql,postgresql,create temp view view_a as select * from table_a,subselect.sql,SAME,,[]
postgresql,postgresql,select view_a from view_a,subselect.sql,SAME,,"[('(42)',)]"
postgresql,postgresql,select (select view_a) from view_a,subselect.sql,SAME,,"[('(42)',)]"
postgresql,postgresql,select (select (select view_a)) from view_a,subselect.sql,SAME,,"[('(42)',)]"
postgresql,postgresql,select (select (a.*)::text) from view_a a,subselect.sql,SAME,,"[('(42)',)]"
postgresql,postgresql,begin,subselect.sql,SAME,,[]
postgresql,postgresql,rollback,subselect.sql,SAME,,[]
postgresql,postgresql,"create temp table upsert(key int4 primary key, val text)",subselect.sql,SAME,,[]
postgresql,postgresql,select * from upsert,subselect.sql,SAME,,"[(1, 'val')]"
postgresql,postgresql,"create temp table outer_7597 (f1 int4, f2 int4)",subselect.sql,SAME,,[]
postgresql,postgresql,"create temp table inner_7597(c1 int8, c2 int8)",subselect.sql,SAME,,[]
postgresql,postgresql,"select * from outer_7597 where (f1, f2) not in (select * from inner_7597)",subselect.sql,SAME,,"[(1, 0), (1, None)]"
postgresql,postgresql,"create temp table outer_text (f1 text, f2 text)",subselect.sql,SAME,,[]
postgresql,postgresql,"create temp table inner_text (c1 text, c2 text)",subselect.sql,SAME,,[]
postgresql,postgresql,"select * from outer_text where (f1, f2) not in (select * from inner_text)",subselect.sql,SAME,,"[('b', 'a'), ('b', None)]"
postgresql,postgresql,"explain (verbose, costs off) select 'foo'::text in (select 'bar'::name union all select 'bar'::name)",subselect.sql,SAME,,"[('Result',), ('  Output: (hashed SubPlan 1)',), ('  SubPlan 1',), ('    ->  Append',), ('          ->  Result',), (""                Output: 'bar'::name"",), ('          ->  Result',), (""                Output: 'bar'::name"",)]"
postgresql,postgresql,select 'foo'::text in (select 'bar'::name union all select 'bar'::name),subselect.sql,SAME,,"[(False,)]"
postgresql,postgresql,"explain (verbose, costs off) select row(row(row(1))) = any (select row(row(1)))",subselect.sql,SAME,,"[('Result',), ('  Output: (SubPlan 1)',), ('  SubPlan 1',), ('    ->  Materialize',), ('          Output: \'(""(1)"")\'::record',), ('          ->  Result',), ('                Output: \'(""(1)"")\'::record',)]"
postgresql,postgresql,select row(row(row(1))) = any (select row(row(1))),subselect.sql,SAME,,"[(True,)]"
postgresql,postgresql,select '1'::text in (select '1'::name union all select '1'::name),subselect.sql,SAME,,"[(True,)]"
postgresql,postgresql,begin,subselect.sql,SAME,,[]
postgresql,postgresql,"create function bogus_int8_text_eq(int8, text) returns boolean language sql as 'select $1::text = $2'",subselect.sql,SAME,,[]
postgresql,postgresql,"create operator = (procedure=bogus_int8_text_eq, leftarg=int8, rightarg=text)",subselect.sql,SAME,,[]
postgresql,postgresql,rollback,subselect.sql,SAME,,[]
postgresql,postgresql,"create temp table exists_tbl (c1 int, c2 int, c3 int) partition by list (c1)",subselect.sql,SAME,,[]
postgresql,postgresql,create temp table exists_tbl_null partition of exists_tbl for values in (null),subselect.sql,SAME,,[]
postgresql,postgresql,create temp table exists_tbl_def partition of exists_tbl default,subselect.sql,SAME,,[]
postgresql,postgresql,analyze exists_tbl,subselect.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from exists_tbl t1   where (exists(select 1 from exists_tbl t2 where t1.c1 = t2.c2) or c3 < 0),subselect.sql,SAME,,"[('Append',), ('  ->  Seq Scan on exists_tbl_null t1_1',), ('        Filter: ((SubPlan 1) OR (c3 < 0))',), ('        SubPlan 1',), ('          ->  Append',), ('                ->  Seq Scan on exists_tbl_null t2_1',), ('                      Filter: (t1_1.c1 = c2)',), ('                ->  Seq Scan on exists_tbl_def t2_2',), ('                      Filter: (t1_1.c1 = c2)',), ('  ->  Seq Scan on exists_tbl_def t1_2',), ('        Filter: ((hashed SubPlan 2) OR (c3 < 0))',), ('        SubPlan 2',), ('          ->  Append',), ('                ->  Seq Scan on exists_tbl_null t2_4',), ('                ->  Seq Scan on exists_tbl_def t2_5',)]"
postgresql,postgresql,select * from exists_tbl t1   where (exists(select 1 from exists_tbl t2 where t1.c1 = t2.c2) or c3 < 0),subselect.sql,SAME,,"[(0, 0, 1), (1, 0, 2), (2, 1, 3), (3, 1, 4), (4, 2, 5), (5, 2, 6)]"
postgresql,postgresql,"explain (verbose, costs off)   select x, x from     (select (select now()) as x from (values(1),(2)) v(y)) ss",subselect.sql,SAME,,"[('Values Scan on ""*VALUES*""',), ('  Output: $0, $1',), ('  InitPlan 1 (returns $0)',), ('    ->  Result',), ('          Output: now()',), ('  InitPlan 2 (returns $1)',), ('    ->  Result',), ('          Output: now()',)]"
postgresql,postgresql,"explain (verbose, costs off)   select x, x from     (select (select random()) as x from (values(1),(2)) v(y)) ss",subselect.sql,SAME,,"[('Subquery Scan on ss',), ('  Output: ss.x, ss.x',), ('  ->  Values Scan on ""*VALUES*""',), ('        Output: $0',), ('        InitPlan 1 (returns $0)',), ('          ->  Result',), ('                Output: random()',)]"
postgresql,postgresql,"explain (verbose, costs off)   select x, x from     (select (select now() where y=y) as x from (values(1),(2)) v(y)) ss",subselect.sql,SAME,,"[('Values Scan on ""*VALUES*""',), ('  Output: (SubPlan 1), (SubPlan 2)',), ('  SubPlan 1',), ('    ->  Result',), ('          Output: now()',), ('          One-Time Filter: (""*VALUES*"".column1 = ""*VALUES*"".column1)',), ('  SubPlan 2',), ('    ->  Result',), ('          Output: now()',), ('          One-Time Filter: (""*VALUES*"".column1 = ""*VALUES*"".column1)',)]"
postgresql,postgresql,"explain (verbose, costs off)   select x, x from     (select (select random() where y=y) as x from (values(1),(2)) v(y)) ss",subselect.sql,SAME,,"[('Subquery Scan on ss',), ('  Output: ss.x, ss.x',), ('  ->  Values Scan on ""*VALUES*""',), ('        Output: (SubPlan 1)',), ('        SubPlan 1',), ('          ->  Result',), ('                Output: random()',), ('                One-Time Filter: (""*VALUES*"".column1 = ""*VALUES*"".column1)',)]"
postgresql,postgresql,create temp table notinouter (a int),subselect.sql,SAME,,[]
postgresql,postgresql,create temp table notininner (b int not null),subselect.sql,SAME,,[]
postgresql,postgresql,select * from notinouter where a not in (select b from notininner),subselect.sql,SAME,,"[(None,), (1,)]"
postgresql,postgresql,create temp table nocolumns(),subselect.sql,SAME,,[]
postgresql,postgresql,select exists(select * from nocolumns),subselect.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select val.x   from generate_series(1,10) as s(i),   lateral (     values ((select s.i + 1)), (s.i + 101)   ) as val(x) where s.i < 10 and (select val.x) < 110",subselect.sql,SAME,,"[(2,), (102,), (3,), (103,), (4,), (104,), (5,), (105,), (6,), (106,), (7,), (107,), (8,), (108,), (9,), (109,), (10,)]"
postgresql,postgresql,"explain (verbose, costs off) select * from (values   (3 not in (select * from (values (1), (2)) ss1)),   (false) ) ss",subselect.sql,SAME,,"[('Values Scan on ""*VALUES*""',), ('  Output: ""*VALUES*"".column1',), ('  SubPlan 1',), ('    ->  Values Scan on ""*VALUES*_1""',), ('          Output: ""*VALUES*_1"".column1',)]"
postgresql,postgresql,"select * from (values   (3 not in (select * from (values (1), (2)) ss1)),   (false) ) ss",subselect.sql,SAME,,"[(True,), (False,)]"
postgresql,postgresql,create temp sequence ts1,subselect.sql,SAME,,[]
postgresql,postgresql,select nextval('ts1'),subselect.sql,SAME,,"[(1,)]"
postgresql,postgresql,"select * from (select pk,c2 from sq_limit order by c1,pk) as x limit 3",subselect.sql,SAME,,"[(1, 1), (5, 1), (2, 2)]"
postgresql,postgresql,begin,subselect.sql,SAME,,[]
postgresql,postgresql,"declare c1 scroll cursor for  select * from generate_series(1,4) i   where i <> all (values (2),(3))",subselect.sql,SAME,,[]
postgresql,postgresql,move forward all in c1,subselect.sql,SAME,,[]
postgresql,postgresql,fetch backward all in c1,subselect.sql,SAME,,"[(4,), (1,)]"
postgresql,postgresql,commit,subselect.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) with x as (select * from (select f1 from subselect_tbl) ss) select * from x where f1 = 1",subselect.sql,SAME,,"[('Seq Scan on public.subselect_tbl',), ('  Output: subselect_tbl.f1',), ('  Filter: (subselect_tbl.f1 = 1)',)]"
postgresql,postgresql,"explain (verbose, costs off) with x as materialized (select * from (select f1 from subselect_tbl) ss) select * from x where f1 = 1",subselect.sql,SAME,,"[('CTE Scan on x',), ('  Output: x.f1',), ('  Filter: (x.f1 = 1)',), ('  CTE x',), ('    ->  Seq Scan on public.subselect_tbl',), ('          Output: subselect_tbl.f1',)]"
postgresql,postgresql,"explain (verbose, costs off) with x as (select * from (select f1, now() from subselect_tbl) ss) select * from x where f1 = 1",subselect.sql,SAME,,"[('Seq Scan on public.subselect_tbl',), ('  Output: subselect_tbl.f1, now()',), ('  Filter: (subselect_tbl.f1 = 1)',)]"
postgresql,postgresql,"explain (verbose, costs off) with x as (select * from (select f1, random() from subselect_tbl) ss) select * from x where f1 = 1",subselect.sql,SAME,,"[('CTE Scan on x',), ('  Output: x.f1, x.random',), ('  Filter: (x.f1 = 1)',), ('  CTE x',), ('    ->  Seq Scan on public.subselect_tbl',), ('          Output: subselect_tbl.f1, random()',)]"
postgresql,postgresql,"explain (verbose, costs off) with x as (select * from (select f1 from subselect_tbl for update) ss) select * from x where f1 = 1",subselect.sql,SAME,,"[('CTE Scan on x',), ('  Output: x.f1',), ('  Filter: (x.f1 = 1)',), ('  CTE x',), ('    ->  Subquery Scan on ss',), ('          Output: ss.f1',), ('          ->  LockRows',), ('                Output: subselect_tbl.f1, subselect_tbl.ctid',), ('                ->  Seq Scan on public.subselect_tbl',), ('                      Output: subselect_tbl.f1, subselect_tbl.ctid',)]"
postgresql,postgresql,"explain (verbose, costs off) with x as (select * from (select f1, now() as n from subselect_tbl) ss) select * from x, x x2 where x.n = x2.n",subselect.sql,SAME,,"[('Merge Join',), ('  Output: x.f1, x.n, x2.f1, x2.n',), ('  Merge Cond: (x.n = x2.n)',), ('  CTE x',), ('    ->  Seq Scan on public.subselect_tbl',), ('          Output: subselect_tbl.f1, now()',), ('  ->  Sort',), ('        Output: x.f1, x.n',), ('        Sort Key: x.n',), ('        ->  CTE Scan on x',), ('              Output: x.f1, x.n',), ('  ->  Sort',), ('        Output: x2.f1, x2.n',), ('        Sort Key: x2.n',), ('        ->  CTE Scan on x x2',), ('              Output: x2.f1, x2.n',)]"
postgresql,postgresql,"explain (verbose, costs off) with x as not materialized (select * from (select f1, now() as n from subselect_tbl) ss) select * from x, x x2 where x.n = x2.n",subselect.sql,SAME,,"[('Result',), ('  Output: subselect_tbl.f1, now(), subselect_tbl_1.f1, now()',), ('  One-Time Filter: (now() = now())',), ('  ->  Nested Loop',), ('        Output: subselect_tbl.f1, subselect_tbl_1.f1',), ('        ->  Seq Scan on public.subselect_tbl',), ('              Output: subselect_tbl.f1, subselect_tbl.f2, subselect_tbl.f3',), ('        ->  Materialize',), ('              Output: subselect_tbl_1.f1',), ('              ->  Seq Scan on public.subselect_tbl subselect_tbl_1',), ('                    Output: subselect_tbl_1.f1',)]"
postgresql,postgresql,"explain (verbose, costs off) with recursive x(a) as   ((values ('a'), ('b'))    union all    (with z as not materialized (select * from x)     select z.a || z1.a as a from z cross join z as z1     where length(z.a || z1.a) < 5)) select * from x",subselect.sql,SAME,,"[('CTE Scan on x',), ('  Output: x.a',), ('  CTE x',), ('    ->  Recursive Union',), ('          ->  Values Scan on ""*VALUES*""',), ('                Output: ""*VALUES*"".column1',), ('          ->  Nested Loop',), ('                Output: (z.a || z1.a)',), ('                Join Filter: (length((z.a || z1.a)) < 5)',), ('                CTE z',), ('                  ->  WorkTable Scan on x x_1',), ('                        Output: x_1.a',), ('                ->  CTE Scan on z',), ('                      Output: z.a',), ('                ->  CTE Scan on z z1',), ('                      Output: z1.a',)]"
postgresql,postgresql,"with recursive x(a) as   ((values ('a'), ('b'))    union all    (with z as not materialized (select * from x)     select z.a || z1.a as a from z cross join z as z1     where length(z.a || z1.a) < 5)) select * from x",subselect.sql,SAME,,"[('a',), ('b',), ('aa',), ('ab',), ('ba',), ('bb',), ('aaaa',), ('aaab',), ('aaba',), ('aabb',), ('abaa',), ('abab',), ('abba',), ('abbb',), ('baaa',), ('baab',), ('baba',), ('babb',), ('bbaa',), ('bbab',), ('bbba',), ('bbbb',)]"
postgresql,postgresql,"explain (verbose, costs off) with recursive x(a) as   ((values ('a'), ('b'))    union all    (with z as not materialized (select * from x)     select z.a || z.a as a from z     where length(z.a || z.a) < 5)) select * from x",subselect.sql,SAME,,"[('CTE Scan on x',), ('  Output: x.a',), ('  CTE x',), ('    ->  Recursive Union',), ('          ->  Values Scan on ""*VALUES*""',), ('                Output: ""*VALUES*"".column1',), ('          ->  WorkTable Scan on x x_1',), ('                Output: (x_1.a || x_1.a)',), ('                Filter: (length((x_1.a || x_1.a)) < 5)',)]"
postgresql,postgresql,"with recursive x(a) as   ((values ('a'), ('b'))    union all    (with z as not materialized (select * from x)     select z.a || z.a as a from z     where length(z.a || z.a) < 5)) select * from x",subselect.sql,SAME,,"[('a',), ('b',), ('aa',), ('bb',), ('aaaa',), ('bbbb',)]"
postgresql,postgresql,"explain (verbose, costs off) with x as (select 1 as y) select * from (with x as (select 2 as y) select * from x) ss",subselect.sql,SAME,,"[('Result',), ('  Output: 2',)]"
postgresql,postgresql,"explain (verbose, costs off) with x as (select * from subselect_tbl) select * from x for update",subselect.sql,SAME,,"[('Seq Scan on public.subselect_tbl',), ('  Output: subselect_tbl.f1, subselect_tbl.f2, subselect_tbl.f3',)]"
postgresql,postgresql,select count(*) >= 0 as ok from pg_available_extension_versions,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,select count(*) >= 0 as ok from pg_available_extensions,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,select count(*) = 0 as ok from pg_cursors,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,select count(*) > 0 as ok from pg_locks,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,select count(*) = 0 as ok from pg_prepared_statements,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,select count(*) >= 0 as ok from pg_prepared_xacts,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,select count(*) > 0 as ok from pg_stat_slru,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,select count(*) = 1 as ok from pg_stat_wal,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,select count(*) = 0 as ok from pg_stat_wal_receiver,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select name, setting from pg_settings where name like 'enable%'",sysviews.sql,SAME,,"[('enable_async_append', 'on'), ('enable_bitmapscan', 'on'), ('enable_gathermerge', 'on'), ('enable_hashagg', 'on'), ('enable_hashjoin', 'on'), ('enable_incremental_sort', 'on'), ('enable_indexonlyscan', 'on'), ('enable_indexscan', 'on'), ('enable_material', 'on'), ('enable_memoize', 'on'), ('enable_mergejoin', 'on'), ('enable_nestloop', 'on'), ('enable_parallel_append', 'on'), ('enable_parallel_hash', 'on'), ('enable_partition_pruning', 'on'), ('enable_partitionwise_aggregate', 'off'), ('enable_partitionwise_join', 'off'), ('enable_presorted_aggregate', 'on'), ('enable_seqscan', 'on'), ('enable_sort', 'on'), ('enable_tidscan', 'on')]"
postgresql,postgresql,select count(distinct utc_offset) >= 24 as ok from pg_timezone_names,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,select count(distinct utc_offset) >= 24 as ok from pg_timezone_abbrevs,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,set timezone_abbreviations = 'Australia',sysviews.sql,SAME,,[]
postgresql,postgresql,select count(distinct utc_offset) >= 24 as ok from pg_timezone_abbrevs,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,set timezone_abbreviations = 'India',sysviews.sql,SAME,,[]
postgresql,postgresql,select count(distinct utc_offset) >= 24 as ok from pg_timezone_abbrevs,sysviews.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT t.id FROM test_tablesample AS t TABLESAMPLE SYSTEM (50) REPEATABLE (0),tablesample.sql,SAME,,"[(3,), (4,), (5,), (6,), (7,), (8,)]"
postgresql,postgresql,SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (100.0/11) REPEATABLE (0),tablesample.sql,SAME,,[]
postgresql,postgresql,SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (50) REPEATABLE (0),tablesample.sql,SAME,,"[(3,), (4,), (5,), (6,), (7,), (8,)]"
postgresql,postgresql,SELECT id FROM test_tablesample TABLESAMPLE BERNOULLI (50) REPEATABLE (0),tablesample.sql,SAME,,"[(4,), (5,), (6,), (7,), (8,)]"
postgresql,postgresql,SELECT id FROM test_tablesample TABLESAMPLE BERNOULLI (5.5) REPEATABLE (0),tablesample.sql,SAME,,"[(7,)]"
postgresql,postgresql,SELECT count(*) FROM test_tablesample TABLESAMPLE SYSTEM (100),tablesample.sql,SAME,,"[(10,)]"
postgresql,postgresql,SELECT count(*) FROM test_tablesample TABLESAMPLE SYSTEM (100) REPEATABLE (1+2),tablesample.sql,SAME,,"[(10,)]"
postgresql,postgresql,SELECT count(*) FROM test_tablesample TABLESAMPLE SYSTEM (100) REPEATABLE (0.4),tablesample.sql,SAME,,"[(10,)]"
postgresql,postgresql,CREATE VIEW test_tablesample_v1 AS   SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (10*2) REPEATABLE (2),tablesample.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW test_tablesample_v2 AS   SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (99),tablesample.sql,SAME,,[]
postgresql,postgresql,BEGIN,tablesample.sql,SAME,,[]
postgresql,postgresql,DECLARE tablesample_cur SCROLL CURSOR FOR   SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (50) REPEATABLE (0),tablesample.sql,SAME,,[]
postgresql,postgresql,FETCH FIRST FROM tablesample_cur,tablesample.sql,SAME,,"[(3,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(4,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (50) REPEATABLE (0),tablesample.sql,SAME,,"[(3,), (4,), (5,), (6,), (7,), (8,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(6,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(7,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(8,)]"
postgresql,postgresql,FETCH FIRST FROM tablesample_cur,tablesample.sql,SAME,,"[(3,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(4,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(5,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(6,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(7,)]"
postgresql,postgresql,FETCH NEXT FROM tablesample_cur,tablesample.sql,SAME,,"[(8,)]"
postgresql,postgresql,CLOSE tablesample_cur,tablesample.sql,SAME,,[]
postgresql,postgresql,END,tablesample.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF)   SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (50) REPEATABLE (2),tablesample.sql,SAME,,"[('Sample Scan on test_tablesample',), (""  Sampling: system ('50'::real) REPEATABLE ('2'::double precision)"",)]"
postgresql,postgresql,EXPLAIN (COSTS OFF)   SELECT * FROM test_tablesample_v1,tablesample.sql,SAME,,"[('Sample Scan on test_tablesample',), (""  Sampling: system ('20'::real) REPEATABLE ('2'::double precision)"",)]"
postgresql,postgresql,SELECT count(*) FROM test_tablesample TABLESAMPLE bernoulli (('1'::text < '0'::text)::int),tablesample.sql,SAME,,"[(0,)]"
postgresql,postgresql,explain (costs off)   select * from parted_sample tablesample bernoulli (100),tablesample.sql,SAME,,"[('Append',), ('  ->  Sample Scan on parted_sample_1',), (""        Sampling: bernoulli ('100'::real)"",), ('  ->  Sample Scan on parted_sample_2',), (""        Sampling: bernoulli ('100'::real)"",)]"
postgresql,postgresql,SELECT spcoptions FROM pg_tablespace WHERE spcname = 'regress_tblspacewith',tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT regexp_replace(pg_tablespace_location(oid), '(pg_tblspc)/(\d+)', '\1/NNN')   FROM pg_tablespace  WHERE spcname = 'regress_tblspace'",tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX regress_tblspace_test_tbl_idx ON regress_tblspace_test_tbl (num1),tablespace.sql,SAME,,[]
postgresql,postgresql,BEGIN,tablespace.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT c.relname FROM pg_class c, pg_tablespace s   WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'",tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT c.relname FROM pg_class c, pg_tablespace s   WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'   ORDER BY c.relname",tablespace.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE regress_tblspace_test_tbl SET TABLESPACE pg_default,tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT c.relname FROM pg_class c, pg_tablespace s   WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'   ORDER BY c.relname",tablespace.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX regress_tblspace_test_tbl_idx SET TABLESPACE pg_default,tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT c.relname FROM pg_class c, pg_tablespace s   WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'   ORDER BY c.relname",tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT c.relname FROM pg_class c, pg_tablespace s   WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'   ORDER BY c.relname",tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX tbspace_reindex_part_index ON ONLY tbspace_reindex_part (c1),tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX tbspace_reindex_part_index_0 ON ONLY tbspace_reindex_part_0 (c1),tablespace.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX tbspace_reindex_part_index ATTACH PARTITION tbspace_reindex_part_index_0,tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX tbspace_reindex_part_index_10 ON ONLY tbspace_reindex_part_10 (c1),tablespace.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX tbspace_reindex_part_index ATTACH PARTITION tbspace_reindex_part_index_10,tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX tbspace_reindex_part_index_0_1 ON ONLY tbspace_reindex_part_0_1 (c1),tablespace.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX tbspace_reindex_part_index_0 ATTACH PARTITION tbspace_reindex_part_index_0_1,tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX tbspace_reindex_part_index_0_2 ON ONLY tbspace_reindex_part_0_2 (c1),tablespace.sql,SAME,,[]
postgresql,postgresql,ALTER INDEX tbspace_reindex_part_index_0 ATTACH PARTITION tbspace_reindex_part_index_0_2,tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT relid, parentrelid, level FROM pg_partition_tree('tbspace_reindex_part_index')   ORDER BY relid, level",tablespace.sql,SAME,,"[('tbspace_reindex_part_index', None, 0), ('tbspace_reindex_part_index_0', 'tbspace_reindex_part_index', 1), ('tbspace_reindex_part_index_10', 'tbspace_reindex_part_index', 1), ('tbspace_reindex_part_index_0_1', 'tbspace_reindex_part_index_0', 2), ('tbspace_reindex_part_index_0_2', 'tbspace_reindex_part_index_0', 2)]"
postgresql,postgresql,"CREATE TEMP TABLE reindex_temp_before AS   SELECT oid, relname, relfilenode, reltablespace   FROM pg_class     WHERE relname ~ 'tbspace_reindex_part_index'",tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT b.relname,        CASE WHEN a.relfilenode = b.relfilenode THEN 'relfilenode is unchanged'        ELSE 'relfilenode has changed' END AS filenode,        CASE WHEN a.reltablespace = b.reltablespace THEN 'reltablespace is unchanged'        ELSE 'reltablespace has changed' END AS tbspace   FROM reindex_temp_before b JOIN pg_class a ON b.relname = a.relname   ORDER BY 1",tablespace.sql,SAME,,"[('tbspace_reindex_part_index', 'relfilenode is unchanged', 'reltablespace is unchanged'), ('tbspace_reindex_part_index_0', 'relfilenode is unchanged', 'reltablespace is unchanged'), ('tbspace_reindex_part_index_0_1', 'relfilenode is unchanged', 'reltablespace is unchanged'), ('tbspace_reindex_part_index_0_2', 'relfilenode is unchanged', 'reltablespace is unchanged'), ('tbspace_reindex_part_index_10', 'relfilenode is unchanged', 'reltablespace is unchanged')]"
postgresql,postgresql,CREATE SCHEMA testschema,tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c     where c.reltablespace = t.oid AND c.relname = 'foo'",tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c     where c.reltablespace = t.oid AND c.relname = 'asselect'",tablespace.sql,SAME,,[]
postgresql,postgresql,PREPARE selectsource(int) AS SELECT $1,tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c     where c.reltablespace = t.oid AND c.relname = 'asexecute'",tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c     where c.reltablespace = t.oid AND c.relname = 'foo_idx'",tablespace.sql,SAME,,[]
postgresql,postgresql,SET default_tablespace TO pg_global,tablespace.sql,SAME,,[]
postgresql,postgresql,RESET default_tablespace,tablespace.sql,SAME,,[]
postgresql,postgresql,SET default_tablespace TO pg_global,tablespace.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testschema.part SET TABLESPACE pg_default,tablespace.sql,SAME,,[]
postgresql,postgresql,RESET default_tablespace,tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, spcname FROM pg_catalog.pg_class c     JOIN pg_catalog.pg_namespace n ON (c.relnamespace = n.oid)     LEFT JOIN pg_catalog.pg_tablespace t ON c.reltablespace = t.oid     where c.relname LIKE 'part%' AND n.nspname = 'testschema' order by relname",tablespace.sql,SAME,,"[('part', None), ('part_1', None), ('part_2', None), ('part_4', None), ('part_78', None)]"
postgresql,postgresql,RESET default_tablespace,tablespace.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c     where c.reltablespace = t.oid AND c.relname LIKE 'part%_idx' ORDER BY relname",tablespace.sql,SAME,,[]
postgresql,postgresql,SET default_tablespace TO 'pg_default',tablespace.sql,SAME,,[]
postgresql,postgresql,SET default_tablespace TO '',tablespace.sql,SAME,,[]
postgresql,postgresql,SET default_tablespace TO '',tablespace.sql,SAME,,[]
postgresql,postgresql,SET default_tablespace TO '',tablespace.sql,SAME,,[]
postgresql,postgresql,SET default_tablespace TO '',tablespace.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testschema.test_tab ADD CONSTRAINT test_tab_unique UNIQUE (a),tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX test_tab_a_idx ON testschema.test_tab (a),tablespace.sql,SAME,,[]
postgresql,postgresql,SET default_tablespace TO '',tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX test_tab_b_idx ON testschema.test_tab (b),tablespace.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE testschema.test_tab ALTER b TYPE bigint, ADD UNIQUE (c)",tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX anindex ON testschema.atable(column1),tablespace.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM testschema.atable,tablespace.sql,SAME,,"[(3,)]"
postgresql,postgresql,CREATE MATERIALIZED VIEW testschema.amv AS SELECT * FROM testschema.atable,tablespace.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW testschema.amv,tablespace.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM testschema.amv,tablespace.sql,SAME,,"[(3,)]"
postgresql,postgresql,ALTER TABLE testschema.tablespace_acl ALTER c TYPE bigint,tablespace.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,tablespace.sql,SAME,,[]
postgresql,postgresql,DROP SCHEMA testschema CASCADE,tablespace.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX i_temptest ON temptest(col),temp.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temptest(tcol int),temp.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX i_temptest ON temptest(tcol),temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,[]
postgresql,postgresql,DROP INDEX i_temptest,temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,[]
postgresql,postgresql,DROP INDEX i_temptest,temp.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temptest(tcol float),temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,"[(2.1,)]"
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,"[(1,)]"
postgresql,postgresql,CREATE TEMP TABLE temptest(col int),temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON temptest(bit_length('')),temp.sql,SAME,,[]
postgresql,postgresql,BEGIN,temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,COMMIT,temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,BEGIN,temp.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temptest(col) ON COMMIT DELETE ROWS AS SELECT 1,temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,"[(1,)]"
postgresql,postgresql,COMMIT,temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,[]
postgresql,postgresql,BEGIN,temp.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temptest(col int) ON COMMIT DROP,temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,COMMIT,temp.sql,SAME,,[]
postgresql,postgresql,BEGIN,temp.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temptest(col) ON COMMIT DROP AS SELECT 1,temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest,temp.sql,SAME,,"[(1,)]"
postgresql,postgresql,COMMIT,temp.sql,SAME,,[]
postgresql,postgresql,BEGIN,temp.sql,SAME,,[]
postgresql,postgresql,COMMIT,temp.sql,SAME,,[]
postgresql,postgresql,BEGIN,temp.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temptest1(col int PRIMARY KEY),temp.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temptest2(col int REFERENCES temptest1)   ON COMMIT DELETE ROWS,temp.sql,SAME,,[]
postgresql,postgresql,COMMIT,temp.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM temptest1,temp.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT * FROM temptest2,temp.sql,SAME,,[]
postgresql,postgresql,BEGIN,temp.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temptest3(col int PRIMARY KEY) ON COMMIT DELETE ROWS,temp.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE temptest4(col int REFERENCES temptest3),temp.sql,SAME,,[]
postgresql,postgresql,create temp table whereami (f1 text),temp.sql,SAME,,[]
postgresql,postgresql,create function public.whoami() returns text   as $$select 'public'::text$$ language sql,temp.sql,SAME,,[]
postgresql,postgresql,create function pg_temp.whoami() returns text   as $$select 'temp'::text$$ language sql,temp.sql,SAME,,[]
postgresql,postgresql,select * from whereami,temp.sql,SAME,,"[('temp',)]"
postgresql,postgresql,select whoami(),temp.sql,SAME,,"[('public',)]"
postgresql,postgresql,"set search_path = pg_temp, public",temp.sql,SAME,,[]
postgresql,postgresql,select * from whereami,temp.sql,SAME,,"[('temp',)]"
postgresql,postgresql,select whoami(),temp.sql,SAME,,"[('public',)]"
postgresql,postgresql,"set search_path = public, pg_temp",temp.sql,SAME,,[]
postgresql,postgresql,select * from whereami,temp.sql,SAME,,"[('public',)]"
postgresql,postgresql,select whoami(),temp.sql,SAME,,"[('public',)]"
postgresql,postgresql,select pg_temp.whoami(),temp.sql,SAME,,"[('temp',)]"
postgresql,postgresql,"set search_path = pg_temp, public",temp.sql,SAME,,[]
postgresql,postgresql,create domain pg_temp.nonempty as text check (value <> ''),temp.sql,SAME,,[]
postgresql,postgresql,reset search_path,temp.sql,SAME,,[]
postgresql,postgresql,begin,temp.sql,SAME,,[]
postgresql,postgresql,create temp table temp_parted_oncommit (a int)   partition by list (a) on commit delete rows,temp.sql,SAME,,[]
postgresql,postgresql,create temp table temp_parted_oncommit_1   partition of temp_parted_oncommit   for values in (1) on commit delete rows,temp.sql,SAME,,[]
postgresql,postgresql,begin,temp.sql,SAME,,[]
postgresql,postgresql,create temp table temp_parted_oncommit_test (a int)   partition by list (a) on commit drop,temp.sql,SAME,,[]
postgresql,postgresql,create temp table temp_parted_oncommit_test1   partition of temp_parted_oncommit_test   for values in (1) on commit delete rows,temp.sql,SAME,,[]
postgresql,postgresql,create temp table temp_parted_oncommit_test2   partition of temp_parted_oncommit_test   for values in (2) on commit drop,temp.sql,SAME,,[]
postgresql,postgresql,select relname from pg_class where relname ~ '^temp_parted_oncommit_test',temp.sql,SAME,,"[('temp_parted_oncommit_test',), ('temp_parted_oncommit_test1',), ('temp_parted_oncommit_test2',)]"
postgresql,postgresql,begin,temp.sql,SAME,,[]
postgresql,postgresql,select relname from pg_class where relname ~ '^temp_parted_oncommit_test'   order by relname,temp.sql,SAME,,"[('temp_parted_oncommit_test',), ('temp_parted_oncommit_test1',), ('temp_parted_oncommit_test2',)]"
postgresql,postgresql,begin,temp.sql,SAME,,[]
postgresql,postgresql,create temp table temp_inh_oncommit_test (a int) on commit drop,temp.sql,SAME,,[]
postgresql,postgresql,create temp table temp_inh_oncommit_test1 ()   inherits(temp_inh_oncommit_test) on commit delete rows,temp.sql,SAME,,[]
postgresql,postgresql,commit,temp.sql,ERROR,FeatureNotSupported,"unsupported ON COMMIT and foreign key combination DETAIL:  Table ""temptest4"" references ""temptest3"", but they do not have the same ON COMMIT setting."
postgresql,postgresql,select relname from pg_class where relname ~ '^temp_inh_oncommit_test',temp.sql,SAME,,[]
postgresql,postgresql,begin,temp.sql,SAME,,[]
postgresql,postgresql,create temp table temp_inh_oncommit_test (a int) on commit delete rows,temp.sql,SAME,,[]
postgresql,postgresql,create temp table temp_inh_oncommit_test1 ()   inherits(temp_inh_oncommit_test) on commit drop,temp.sql,SAME,,[]
postgresql,postgresql,commit,temp.sql,SAME,,[]
postgresql,postgresql,select * from temp_inh_oncommit_test,temp.sql,SAME,,[]
postgresql,postgresql,select relname from pg_class where relname ~ '^temp_inh_oncommit_test',temp.sql,SAME,,"[('temp_inh_oncommit_test',)]"
postgresql,postgresql,begin,temp.sql,SAME,,[]
postgresql,postgresql,create function pg_temp.twophase_func() returns void as   $$ select '2pc_func'::text $$ language sql,temp.sql,SAME,,[]
postgresql,postgresql,SET synchronous_commit = on,test_setup.sql,SAME,,[]
postgresql,postgresql,GRANT ALL ON SCHEMA public TO public,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM CHAR_TBL,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM FLOAT8_TBL,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM INT2_TBL,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM INT4_TBL,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM INT8_TBL,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM TEXT_TBL,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM VARCHAR_TBL,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE onek,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE onek2,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE tenk1,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE tenk2,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE person,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE emp,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE student,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE stud_emp,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE road,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE ihighway,test_setup.sql,SAME,,[]
postgresql,postgresql,VACUUM ANALYZE shighway,test_setup.sql,SAME,,[]
postgresql,postgresql,"create type stoplight as enum ('red', 'yellow', 'green')",test_setup.sql,SAME,,[]
postgresql,postgresql,"create type float8range as range (subtype = float8, subtype_diff = float8mi)",test_setup.sql,SAME,,[]
postgresql,postgresql,"create type textrange as range (subtype = text, collation = ""C"")",test_setup.sql,SAME,,[]
postgresql,postgresql,"create function part_hashtext_length(value text, seed int8)     returns int8 as $$     select length(coalesce(value, ''))::int8     $$ language sql strict immutable parallel safe",test_setup.sql,SAME,,[]
postgresql,postgresql,SELECT text 'this is a text string' = text 'this is a text string' AS true,text.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT text 'this is a text string' = text 'this is a text strin' AS false,text.sql,SAME,,"[(False,)]"
postgresql,postgresql,select 'four: '::text || 2+2,text.sql,SAME,,"[('four: 4',)]"
postgresql,postgresql,select 'four: ' || 2+2,text.sql,SAME,,"[('four: 4',)]"
postgresql,postgresql,/*  * various string functions  */ select concat('one'),text.sql,SAME,,"[('one',)]"
postgresql,postgresql,"select concat(1,2,3,'hello',true, false, to_date('20100309','YYYYMMDD'))",text.sql,SAME,,"[('123hellotf2010-03-09',)]"
postgresql,postgresql,"select concat_ws('#','one')",text.sql,SAME,,"[('one',)]"
postgresql,postgresql,"select concat_ws('#',1,2,3,'hello',true, false, to_date('20100309','YYYYMMDD'))",text.sql,SAME,,"[('1#2#3#hello#t#f#2010-03-09',)]"
postgresql,postgresql,"select concat_ws(',',10,20,null,30)",text.sql,SAME,,"[('10,20,30',)]"
postgresql,postgresql,"select concat_ws('',10,20,null,30)",text.sql,SAME,,"[('102030',)]"
postgresql,postgresql,"select concat_ws(NULL,10,20,null,30) is null",text.sql,SAME,,"[(True,)]"
postgresql,postgresql,select reverse('abcde'),text.sql,SAME,,"[('edcba',)]"
postgresql,postgresql,"select i, left('ahoj', i), right('ahoj', i) from generate_series(-5, 5) t(i) order by i",text.sql,SAME,,"[(-5, '', ''), (-4, '', ''), (-3, 'a', 'j'), (-2, 'ah', 'oj'), (-1, 'aho', 'hoj'), (0, '', ''), (1, 'a', 'j'), (2, 'ah', 'oj'), (3, 'aho', 'hoj'), (4, 'ahoj', 'ahoj'), (5, 'ahoj', 'ahoj')]"
postgresql,postgresql,select quote_literal(''),text.sql,SAME,,"[(""''"",)]"
postgresql,postgresql,select quote_literal('abc'''),text.sql,SAME,,"[(""'abc'''"",)]"
postgresql,postgresql,select quote_literal(e'\\'),text.sql,SAME,,"[(""E'\\\\'"",)]"
postgresql,postgresql,"select concat(variadic array[1,2,3])",text.sql,SAME,,"[('123',)]"
postgresql,postgresql,"select concat_ws(',', variadic array[1,2,3])",text.sql,SAME,,"[('1,2,3',)]"
postgresql,postgresql,"select concat_ws(',', variadic NULL::int[])",text.sql,SAME,,"[(None,)]"
postgresql,postgresql,select concat(variadic NULL::int[]) is NULL,text.sql,SAME,,"[(True,)]"
postgresql,postgresql,select concat(variadic '{}'::int[]) = '',text.sql,SAME,,"[(True,)]"
postgresql,postgresql,/*  * format  */ select format(NULL),text.sql,SAME,,"[(None,)]"
postgresql,postgresql,select format('Hello'),text.sql,SAME,,"[('Hello',)]"
postgresql,postgresql,"select format('Hello %s', 'World')",text.sql,SAME,,"[('Hello World',)]"
postgresql,postgresql,select format('Hello %%'),text.sql,SAME,,"[('Hello %',)]"
postgresql,postgresql,select format('Hello %%%%'),text.sql,SAME,,"[('Hello %%',)]"
postgresql,postgresql,"select format('%s%s%s','Hello', NULL,'World')",text.sql,SAME,,"[('HelloWorld',)]"
postgresql,postgresql,"select format('%1$s %3$s', 1, 2, 3)",text.sql,SAME,,"[('1 3',)]"
postgresql,postgresql,"select format('%1$s %12$s', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)",text.sql,SAME,,"[('1 12',)]"
postgresql,postgresql,"select format('Hello %s %1$s %s', 'World', 'Hello again')",text.sql,SAME,,"[('Hello World World Hello again',)]"
postgresql,postgresql,"select format('Hello %s %s, %2$s %2$s', 'World', 'Hello again')",text.sql,SAME,,"[('Hello World Hello again, Hello again Hello again',)]"
postgresql,postgresql,"select format('%s, %s', variadic array['Hello','World'])",text.sql,SAME,,"[('Hello, World',)]"
postgresql,postgresql,"select format('%s, %s', variadic array[1, 2])",text.sql,SAME,,"[('1, 2',)]"
postgresql,postgresql,"select format('%s, %s', variadic array[true, false])",text.sql,SAME,,"[('t, f',)]"
postgresql,postgresql,"select format('%s, %s', variadic array[true, false]::text[])",text.sql,SAME,,"[('true, false',)]"
postgresql,postgresql,"select format('%2$s, %1$s', variadic array['first', 'second'])",text.sql,SAME,,"[('second, first',)]"
postgresql,postgresql,"select format('%2$s, %1$s', variadic array[1, 2])",text.sql,SAME,,"[('2, 1',)]"
postgresql,postgresql,"select format('Hello', variadic NULL::int[])",text.sql,SAME,,"[('Hello',)]"
postgresql,postgresql,"select format(string_agg('%s',','), variadic array_agg(i)) from generate_series(1,200) g(i)",text.sql,SAME,,"[('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200',)]"
postgresql,postgresql,"select format('>>%10s<<', 'Hello')",text.sql,SAME,,"[('>>     Hello<<',)]"
postgresql,postgresql,"select format('>>%10s<<', NULL)",text.sql,SAME,,"[('>>          <<',)]"
postgresql,postgresql,"select format('>>%10s<<', '')",text.sql,SAME,,"[('>>          <<',)]"
postgresql,postgresql,"select format('>>%-10s<<', '')",text.sql,SAME,,"[('>>          <<',)]"
postgresql,postgresql,"select format('>>%-10s<<', 'Hello')",text.sql,SAME,,"[('>>Hello     <<',)]"
postgresql,postgresql,"select format('>>%-10s<<', NULL)",text.sql,SAME,,"[('>>          <<',)]"
postgresql,postgresql,"select format('>>%1$10s<<', 'Hello')",text.sql,SAME,,"[('>>     Hello<<',)]"
postgresql,postgresql,"select format('>>%1$-10I<<', 'Hello')",text.sql,SAME,,"[('>>""Hello""   <<',)]"
postgresql,postgresql,"select format('>>%2$*1$L<<', 10, 'Hello')",text.sql,SAME,,"[("">>   'Hello'<<"",)]"
postgresql,postgresql,"select format('>>%2$*1$L<<', 10, NULL)",text.sql,SAME,,"[('>>      NULL<<',)]"
postgresql,postgresql,"select format('>>%2$*1$L<<', -10, NULL)",text.sql,SAME,,"[('>>NULL      <<',)]"
postgresql,postgresql,"select format('>>%*s<<', 10, 'Hello')",text.sql,SAME,,"[('>>     Hello<<',)]"
postgresql,postgresql,"select format('>>%*1$s<<', 10, 'Hello')",text.sql,SAME,,"[('>>     Hello<<',)]"
postgresql,postgresql,"select format('>>%-s<<', 'Hello')",text.sql,SAME,,"[('>>Hello<<',)]"
postgresql,postgresql,"select format('>>%10L<<', NULL)",text.sql,SAME,,"[('>>      NULL<<',)]"
postgresql,postgresql,"select format('>>%2$*1$L<<', NULL, 'Hello')",text.sql,SAME,,"[("">>'Hello'<<"",)]"
postgresql,postgresql,"select format('>>%2$*1$L<<', 0, 'Hello')",text.sql,SAME,,"[("">>'Hello'<<"",)]"
postgresql,postgresql,"SELECT   '(0,0)'::tid as tid00,   '(0,1)'::tid as tid01,   '(-1,0)'::tid as tidm10,   '(4294967295,65535)'::tid as tidmax",tid.sql,SAME,,"[('(0,0)', '(0,1)', '(4294967295,0)', '(4294967295,65535)')]"
postgresql,postgresql,"SELECT pg_input_is_valid('(0)', 'tid')",tid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('(0)', 'tid')",tid.sql,SAME,,"[('invalid input syntax for type tid: ""(0)""', None, None, '22P02')]"
postgresql,postgresql,"SELECT pg_input_is_valid('(0,-1)', 'tid')",tid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('(0,-1)', 'tid')",tid.sql,SAME,,"[('invalid input syntax for type tid: ""(0,-1)""', None, None, '22P02')]"
postgresql,postgresql,SELECT min(ctid) FROM tid_tab,tid.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,SELECT max(ctid) FROM tid_tab,tid.sql,SAME,,"[('(0,2)',)]"
postgresql,postgresql,TRUNCATE tid_tab,tid.sql,SAME,,[]
postgresql,postgresql,CREATE MATERIALIZED VIEW tid_matview AS SELECT a FROM tid_tab,tid.sql,SAME,,[]
postgresql,postgresql,REFRESH MATERIALIZED VIEW tid_matview,tid.sql,SAME,,[]
postgresql,postgresql,"SELECT currtid2('tid_matview'::text, '(0,1)'::tid)",tid.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,DROP MATERIALIZED VIEW tid_matview,tid.sql,SAME,,[]
postgresql,postgresql,TRUNCATE tid_tab,tid.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE tid_seq,tid.sql,SAME,,[]
postgresql,postgresql,"SELECT currtid2('tid_seq'::text, '(0,1)'::tid)",tid.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,DROP SEQUENCE tid_seq,tid.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX tid_ind ON tid_tab(a),tid.sql,SAME,,[]
postgresql,postgresql,DROP INDEX tid_ind,tid.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW tid_view_no_ctid AS SELECT a FROM tid_tab,tid.sql,SAME,,[]
postgresql,postgresql,DROP VIEW tid_view_no_ctid,tid.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW tid_view_with_ctid AS SELECT ctid, a FROM tid_tab",tid.sql,SAME,,[]
postgresql,postgresql,"SELECT currtid2('tid_view_with_ctid'::text, '(0,1)'::tid)",tid.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,DROP VIEW tid_view_with_ctid,tid.sql,SAME,,[]
postgresql,postgresql,TRUNCATE tid_tab,tid.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW tid_view_fake_ctid AS SELECT 1 AS ctid, 2 AS a",tid.sql,SAME,,[]
postgresql,postgresql,DROP VIEW tid_view_fake_ctid,tid.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan TO off,tidrangescan.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE ctid < '(1, 0)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (ctid < '(1,0)'::tid)"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid < '(1, 0)'",tidrangescan.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE ctid > '(9, 0)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (ctid > '(9,0)'::tid)"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid > '(9, 0)'",tidrangescan.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM tidrangescan WHERE substring(ctid::text FROM ',(\d+)\)')::integer > 10 OR substring(ctid::text FROM '\((\d+),')::integer > 2",tidrangescan.sql,SAME,,[]
postgresql,postgresql,VACUUM tidrangescan,tidrangescan.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (ctid < '(1,0)'::tid)"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)'",tidrangescan.sql,SAME,,"[('(0,1)',), ('(0,2)',), ('(0,3)',), ('(0,4)',), ('(0,5)',), ('(0,6)',), ('(0,7)',), ('(0,8)',), ('(0,9)',), ('(0,10)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (ctid <= '(1,5)'::tid)"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)'",tidrangescan.sql,SAME,,"[('(0,1)',), ('(0,2)',), ('(0,3)',), ('(0,4)',), ('(0,5)',), ('(0,6)',), ('(0,7)',), ('(0,8)',), ('(0,9)',), ('(0,10)',), ('(1,1)',), ('(1,2)',), ('(1,3)',), ('(1,4)',), ('(1,5)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (ctid < '(0,0)'::tid)"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)'",tidrangescan.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE ctid > '(2,8)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (ctid > '(2,8)'::tid)"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid > '(2,8)'",tidrangescan.sql,SAME,,"[('(2,9)',), ('(2,10)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE '(2,8)' < ctid",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: ('(2,8)'::tid < ctid)"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE '(2,8)' < ctid",tidrangescan.sql,SAME,,"[('(2,9)',), ('(2,10)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE ctid >= '(2,8)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (ctid >= '(2,8)'::tid)"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid >= '(2,8)'",tidrangescan.sql,SAME,,"[('(2,8)',), ('(2,9)',), ('(2,10)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (ctid >= '(100,0)'::tid)"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)'",tidrangescan.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE ctid > '(1,4)' AND '(1,7)' >= ctid",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: ((ctid > '(1,4)'::tid) AND ('(1,7)'::tid >= ctid))"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid > '(1,4)' AND '(1,7)' >= ctid",tidrangescan.sql,SAME,,"[('(1,5)',), ('(1,6)',), ('(1,7)',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid FROM tidrangescan WHERE '(1,7)' >= ctid AND ctid > '(1,4)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (('(1,7)'::tid >= ctid) AND (ctid > '(1,4)'::tid))"",)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE '(1,7)' >= ctid AND ctid > '(1,4)'",tidrangescan.sql,SAME,,"[('(1,5)',), ('(1,6)',), ('(1,7)',)]"
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid > '(0,65535)' AND ctid < '(1,0)' LIMIT 1",tidrangescan.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)' LIMIT 1",tidrangescan.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid > '(4294967295,65535)'",tidrangescan.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)'",tidrangescan.sql,SAME,,[]
postgresql,postgresql,SELECT ctid FROM tidrangescan WHERE ctid >= (SELECT NULL::tid),tidrangescan.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t.ctid,t2.c FROM tidrangescan t, LATERAL (SELECT count(*) c FROM tidrangescan t2 WHERE t2.ctid <= t.ctid) t2 WHERE t.ctid < '(1,0)'",tidrangescan.sql,SAME,,"[('Nested Loop',), ('  ->  Tid Range Scan on tidrangescan t',), (""        TID Cond: (ctid < '(1,0)'::tid)"",), ('  ->  Aggregate',), ('        ->  Tid Range Scan on tidrangescan t2',), ('              TID Cond: (ctid <= t.ctid)',)]"
postgresql,postgresql,"SELECT t.ctid,t2.c FROM tidrangescan t, LATERAL (SELECT count(*) c FROM tidrangescan t2 WHERE t2.ctid <= t.ctid) t2 WHERE t.ctid < '(1,0)'",tidrangescan.sql,SAME,,"[('(0,1)', 1), ('(0,2)', 2), ('(0,3)', 3), ('(0,4)', 4), ('(0,5)', 5), ('(0,6)', 6), ('(0,7)', 7), ('(0,8)', 8), ('(0,9)', 9), ('(0,10)', 10)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) DECLARE c SCROLL CURSOR FOR SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)'",tidrangescan.sql,SAME,,"[('Tid Range Scan on tidrangescan',), (""  TID Cond: (ctid < '(1,0)'::tid)"",)]"
postgresql,postgresql,BEGIN,tidrangescan.sql,SAME,,[]
postgresql,postgresql,"DECLARE c SCROLL CURSOR FOR SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)'",tidrangescan.sql,SAME,,[]
postgresql,postgresql,FETCH NEXT c,tidrangescan.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,FETCH NEXT c,tidrangescan.sql,SAME,,"[('(0,2)',)]"
postgresql,postgresql,FETCH PRIOR c,tidrangescan.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,FETCH FIRST c,tidrangescan.sql,SAME,,"[('(0,1)',)]"
postgresql,postgresql,FETCH LAST c,tidrangescan.sql,SAME,,"[('(0,10)',)]"
postgresql,postgresql,COMMIT,tidrangescan.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,tidrangescan.sql,SAME,,[]
postgresql,postgresql,"SELECT ctid, * FROM tidscan",tidscan.sql,SAME,,"[('(0,1)', 1), ('(0,2)', 2), ('(0,3)', 3)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid, * FROM tidscan WHERE ctid = '(0,1)'",tidscan.sql,SAME,,"[('Tid Scan on tidscan',), (""  TID Cond: (ctid = '(0,1)'::tid)"",)]"
postgresql,postgresql,"SELECT ctid, * FROM tidscan WHERE ctid = '(0,1)'",tidscan.sql,SAME,,"[('(0,1)', 1)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid, * FROM tidscan WHERE '(0,1)' = ctid",tidscan.sql,SAME,,"[('Tid Scan on tidscan',), (""  TID Cond: ('(0,1)'::tid = ctid)"",)]"
postgresql,postgresql,"SELECT ctid, * FROM tidscan WHERE '(0,1)' = ctid",tidscan.sql,SAME,,"[('(0,1)', 1)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid, * FROM tidscan WHERE ctid = '(0,2)' OR '(0,1)' = ctid",tidscan.sql,SAME,,"[('Tid Scan on tidscan',), (""  TID Cond: ((ctid = '(0,2)'::tid) OR ('(0,1)'::tid = ctid))"",)]"
postgresql,postgresql,"SELECT ctid, * FROM tidscan WHERE ctid = '(0,2)' OR '(0,1)' = ctid",tidscan.sql,SAME,,"[('(0,1)', 1), ('(0,2)', 2)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid, * FROM tidscan WHERE ctid = ANY(ARRAY['(0,1)', '(0,2)']::tid[])",tidscan.sql,SAME,,"[('Tid Scan on tidscan',), ('  TID Cond: (ctid = ANY (\'{""(0,1)"",""(0,2)""}\'::tid[]))',)]"
postgresql,postgresql,"SELECT ctid, * FROM tidscan WHERE ctid = ANY(ARRAY['(0,1)', '(0,2)']::tid[])",tidscan.sql,SAME,,"[('(0,1)', 1), ('(0,2)', 2)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid, * FROM tidscan WHERE ctid != ANY(ARRAY['(0,1)', '(0,2)']::tid[])",tidscan.sql,SAME,,"[('Seq Scan on tidscan',), ('  Filter: (ctid <> ANY (\'{""(0,1)"",""(0,2)""}\'::tid[]))',)]"
postgresql,postgresql,"SELECT ctid, * FROM tidscan WHERE ctid != ANY(ARRAY['(0,1)', '(0,2)']::tid[])",tidscan.sql,SAME,,"[('(0,1)', 1), ('(0,2)', 2), ('(0,3)', 3)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT ctid, * FROM tidscan WHERE (id = 3 AND ctid IN ('(0,2)', '(0,3)')) OR (ctid = '(0,1)' AND id = 1)",tidscan.sql,SAME,,"[('Tid Scan on tidscan',), ('  TID Cond: ((ctid = ANY (\'{""(0,2)"",""(0,3)""}\'::tid[])) OR (ctid = \'(0,1)\'::tid))',), ('  Filter: (((id = 3) AND (ctid = ANY (\'{""(0,2)"",""(0,3)""}\'::tid[]))) OR ((ctid = \'(0,1)\'::tid) AND (id = 1)))',)]"
postgresql,postgresql,"SELECT ctid, * FROM tidscan WHERE (id = 3 AND ctid IN ('(0,2)', '(0,3)')) OR (ctid = '(0,1)' AND id = 1)",tidscan.sql,SAME,,"[('(0,1)', 1), ('(0,3)', 3)]"
postgresql,postgresql,SET enable_hashjoin TO off,tidscan.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.ctid, t1.*, t2.ctid, t2.* FROM tidscan t1 JOIN tidscan t2 ON t1.ctid = t2.ctid WHERE t1.id = 1",tidscan.sql,SAME,,"[('Nested Loop',), ('  ->  Seq Scan on tidscan t1',), ('        Filter: (id = 1)',), ('  ->  Tid Scan on tidscan t2',), ('        TID Cond: (t1.ctid = ctid)',)]"
postgresql,postgresql,"SELECT t1.ctid, t1.*, t2.ctid, t2.* FROM tidscan t1 JOIN tidscan t2 ON t1.ctid = t2.ctid WHERE t1.id = 1",tidscan.sql,SAME,,"[('(0,1)', 1, '(0,1)', 1)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT t1.ctid, t1.*, t2.ctid, t2.* FROM tidscan t1 LEFT JOIN tidscan t2 ON t1.ctid = t2.ctid WHERE t1.id = 1",tidscan.sql,SAME,,"[('Nested Loop Left Join',), ('  ->  Seq Scan on tidscan t1',), ('        Filter: (id = 1)',), ('  ->  Tid Scan on tidscan t2',), ('        TID Cond: (t1.ctid = ctid)',)]"
postgresql,postgresql,"SELECT t1.ctid, t1.*, t2.ctid, t2.* FROM tidscan t1 LEFT JOIN tidscan t2 ON t1.ctid = t2.ctid WHERE t1.id = 1",tidscan.sql,SAME,,"[('(0,1)', 1, '(0,1)', 1)]"
postgresql,postgresql,RESET enable_hashjoin,tidscan.sql,SAME,,[]
postgresql,postgresql,BEGIN,tidscan.sql,SAME,,[]
postgresql,postgresql,"DECLARE c CURSOR FOR SELECT ctid, * FROM tidscan WHERE ctid = ANY(ARRAY['(0,1)', '(0,2)']::tid[])",tidscan.sql,SAME,,[]
postgresql,postgresql,FETCH ALL FROM c,tidscan.sql,SAME,,"[('(0,1)', 1), ('(0,2)', 2)]"
postgresql,postgresql,FETCH BACKWARD 1 FROM c,tidscan.sql,SAME,,"[('(0,2)', 2)]"
postgresql,postgresql,FETCH FIRST FROM c,tidscan.sql,SAME,,"[('(0,1)', 1)]"
postgresql,postgresql,ROLLBACK,tidscan.sql,SAME,,[]
postgresql,postgresql,BEGIN,tidscan.sql,SAME,,[]
postgresql,postgresql,"DECLARE c CURSOR FOR SELECT ctid, * FROM tidscan",tidscan.sql,SAME,,[]
postgresql,postgresql,FETCH NEXT FROM c,tidscan.sql,SAME,,"[('(0,1)', 1)]"
postgresql,postgresql,FETCH NEXT FROM c,tidscan.sql,SAME,,"[('(0,2)', 2)]"
postgresql,postgresql,"EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF) UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *",tidscan.sql,SAME,,"[('Update on tidscan (actual rows=1 loops=1)',), ('  ->  Tid Scan on tidscan (actual rows=1 loops=1)',), ('        TID Cond: CURRENT OF c',)]"
postgresql,postgresql,FETCH NEXT FROM c,tidscan.sql,SAME,,"[('(0,3)', 3)]"
postgresql,postgresql,"EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF) UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *",tidscan.sql,SAME,,"[('Update on tidscan (actual rows=1 loops=1)',), ('  ->  Tid Scan on tidscan (actual rows=1 loops=1)',), ('        TID Cond: CURRENT OF c',)]"
postgresql,postgresql,SELECT * FROM tidscan,tidscan.sql,SAME,,"[(1,), (-2,), (-3,)]"
postgresql,postgresql,FETCH NEXT FROM c,tidscan.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,tidscan.sql,SAME,,[]
postgresql,postgresql,SET enable_hashjoin TO off,tidscan.sql,SAME,,[]
postgresql,postgresql,RESET enable_hashjoin,tidscan.sql,SAME,,[]
postgresql,postgresql,BEGIN ISOLATION LEVEL SERIALIZABLE,tidscan.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM tidscan WHERE ctid = '(0,1)'",tidscan.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT locktype, mode FROM pg_locks WHERE pid = pg_backend_pid() AND mode = 'SIReadLock'",tidscan.sql,SAME,,"[('tuple', 'SIReadLock')]"
postgresql,postgresql,ROLLBACK,tidscan.sql,SAME,,[]
postgresql,postgresql,"SELECT f1 AS ""Time"" FROM TIME_TBL",time.sql,SAME,,"[(datetime.time(0, 0),), (datetime.time(1, 0),), (datetime.time(2, 3),), (datetime.time(11, 59),), (datetime.time(12, 0),), (datetime.time(12, 1),), (datetime.time(23, 59),), (datetime.time(23, 59, 59, 990000),), (datetime.time(15, 36, 39),), (datetime.time(15, 36, 39),)]"
postgresql,postgresql,"SELECT f1 AS ""Three"" FROM TIME_TBL WHERE f1 < '05:06:07'",time.sql,SAME,,"[(datetime.time(0, 0),), (datetime.time(1, 0),), (datetime.time(2, 3),)]"
postgresql,postgresql,"SELECT f1 AS ""Five"" FROM TIME_TBL WHERE f1 > '05:06:07'",time.sql,SAME,,"[(datetime.time(11, 59),), (datetime.time(12, 0),), (datetime.time(12, 1),), (datetime.time(23, 59),), (datetime.time(23, 59, 59, 990000),), (datetime.time(15, 36, 39),), (datetime.time(15, 36, 39),)]"
postgresql,postgresql,"SELECT f1 AS ""None"" FROM TIME_TBL WHERE f1 < '00:00'",time.sql,SAME,,[]
postgresql,postgresql,"SELECT f1 AS ""Eight"" FROM TIME_TBL WHERE f1 >= '00:00'",time.sql,SAME,,"[(datetime.time(0, 0),), (datetime.time(1, 0),), (datetime.time(2, 3),), (datetime.time(11, 59),), (datetime.time(12, 0),), (datetime.time(12, 1),), (datetime.time(23, 59),), (datetime.time(23, 59, 59, 990000),), (datetime.time(15, 36, 39),), (datetime.time(15, 36, 39),)]"
postgresql,postgresql,SELECT '23:59:59.999999'::time,time.sql,SAME,,"[(datetime.time(23, 59, 59, 999999),)]"
postgresql,postgresql,SELECT '23:59:59.9999999'::time,time.sql,SAME,,"[(datetime.time(0, 0),)]"
postgresql,postgresql,SELECT '23:59:60'::time,time.sql,SAME,,"[(datetime.time(0, 0),)]"
postgresql,postgresql,SELECT '24:00:00'::time,time.sql,SAME,,"[(datetime.time(0, 0),)]"
postgresql,postgresql,"SELECT pg_input_is_valid('12:00:00', 'time')",time.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('25:00:00', 'time')",time.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('15:36:39 America/New_York', 'time')",time.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('25:00:00', 'time')",time.sql,SAME,,"[('date/time field value out of range: ""25:00:00""', None, None, '22008')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('15:36:39 America/New_York', 'time')",time.sql,SAME,,"[('invalid input syntax for type time: ""15:36:39 America/New_York""', None, None, '22007')]"
postgresql,postgresql,SELECT EXTRACT(MICROSECOND FROM TIME '2020-05-26 13:30:25.575401'),time.sql,SAME,,"[(Decimal('25575401'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLISECOND FROM TIME '2020-05-26 13:30:25.575401'),time.sql,SAME,,"[(Decimal('25575.401'),)]"
postgresql,postgresql,SELECT EXTRACT(SECOND      FROM TIME '2020-05-26 13:30:25.575401'),time.sql,SAME,,"[(Decimal('25.575401'),)]"
postgresql,postgresql,SELECT EXTRACT(MINUTE      FROM TIME '2020-05-26 13:30:25.575401'),time.sql,SAME,,"[(Decimal('30'),)]"
postgresql,postgresql,SELECT EXTRACT(HOUR        FROM TIME '2020-05-26 13:30:25.575401'),time.sql,SAME,,"[(Decimal('13'),)]"
postgresql,postgresql,SELECT EXTRACT(EPOCH       FROM TIME '2020-05-26 13:30:25.575401'),time.sql,SAME,,"[(Decimal('48625.575401'),)]"
postgresql,postgresql,"SELECT date_part('microsecond', TIME '2020-05-26 13:30:25.575401')",time.sql,SAME,,"[(25575401.0,)]"
postgresql,postgresql,"SELECT date_part('millisecond', TIME '2020-05-26 13:30:25.575401')",time.sql,SAME,,"[(25575.401,)]"
postgresql,postgresql,"SELECT date_part('second',      TIME '2020-05-26 13:30:25.575401')",time.sql,SAME,,"[(25.575401,)]"
postgresql,postgresql,"SELECT date_part('epoch',       TIME '2020-05-26 13:30:25.575401')",time.sql,SAME,,"[(48625.575401,)]"
postgresql,postgresql,BEGIN,timestamp.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'today',timestamp.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT count(*) AS Three FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'tomorrow',timestamp.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'yesterday',timestamp.sql,SAME,,"[(1,)]"
postgresql,postgresql,COMMIT,timestamp.sql,SAME,,[]
postgresql,postgresql,DELETE FROM TIMESTAMP_TBL,timestamp.sql,SAME,,[]
postgresql,postgresql,SELECT pg_sleep(0.1),timestamp.sql,SAME,,"[('',)]"
postgresql,postgresql,BEGIN,timestamp.sql,SAME,,[]
postgresql,postgresql,SELECT pg_sleep(0.1),timestamp.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT pg_sleep(0.1),timestamp.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT count(*) AS two FROM TIMESTAMP_TBL WHERE d1 = timestamp(2) without time zone 'now',timestamp.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT count(d1) AS three, count(DISTINCT d1) AS two FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(3, 2)]"
postgresql,postgresql,COMMIT,timestamp.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TIMESTAMP_TBL,timestamp.sql,SAME,,[]
postgresql,postgresql,SELECT timestamp 'infinity' = timestamp '+infinity' AS t,timestamp.sql,SAME,,"[(True,)]"
postgresql,postgresql,set datestyle to ymd,timestamp.sql,SAME,,[]
postgresql,postgresql,reset datestyle,timestamp.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_input_is_valid('now', 'timestamp')",timestamp.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('garbage', 'timestamp')",timestamp.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('2001-01-01 00:00 Nehwon/Lankhmar', 'timestamp')",timestamp.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('garbage', 'timestamp')",timestamp.sql,SAME,,"[('invalid input syntax for type timestamp: ""garbage""', None, None, '22007')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('2001-01-01 00:00 Nehwon/Lankhmar', 'timestamp')",timestamp.sql,SAME,,"[('time zone ""nehwon/lankhmar"" not recognized', None, None, '22023')]"
postgresql,postgresql,SELECT d1 FROM TIMESTAMP_TBL    WHERE d1 > timestamp without time zone '1997-01-02',timestamp.sql,SAME,,"[(datetime.datetime(9999, 12, 31, 23, 59, 59, 999999),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 2),), (datetime.datetime(1997, 2, 10, 17, 32, 1, 400000),), (datetime.datetime(1997, 2, 10, 17, 32, 1, 500000),), (datetime.datetime(1997, 2, 10, 17, 32, 1, 600000),), (datetime.datetime(1997, 1, 2, 3, 4, 5),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 6, 10, 17, 32, 1),), (datetime.datetime(2001, 9, 22, 18, 19, 20),), (datetime.datetime(2000, 3, 15, 8, 14, 1),), (datetime.datetime(2000, 3, 15, 13, 14, 2),), (datetime.datetime(2000, 3, 15, 12, 14, 3),), (datetime.datetime(2000, 3, 15, 3, 14, 4),), (datetime.datetime(2000, 3, 15, 2, 14, 5),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 6, 10, 18, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 11, 17, 32, 1),), (datetime.datetime(1997, 2, 12, 17, 32, 1),), (datetime.datetime(1997, 2, 13, 17, 32, 1),), (datetime.datetime(1997, 2, 14, 17, 32, 1),), (datetime.datetime(1997, 2, 15, 17, 32, 1),), (datetime.datetime(1997, 2, 16, 17, 32, 1),), (datetime.datetime(1997, 2, 16, 17, 32, 1),), (datetime.datetime(2097, 2, 16, 17, 32, 1),), (datetime.datetime(1997, 2, 28, 17, 32, 1),), (datetime.datetime(1997, 3, 1, 17, 32, 1),), (datetime.datetime(1997, 12, 30, 17, 32, 1),), (datetime.datetime(1997, 12, 31, 17, 32, 1),), (datetime.datetime(1999, 12, 31, 17, 32, 1),), (datetime.datetime(2000, 1, 1, 17, 32, 1),), (datetime.datetime(2000, 12, 31, 17, 32, 1),), (datetime.datetime(2001, 1, 1, 17, 32, 1),)]"
postgresql,postgresql,SELECT d1 FROM TIMESTAMP_TBL    WHERE d1 = timestamp without time zone '1997-01-02',timestamp.sql,SAME,,"[(datetime.datetime(1997, 1, 2, 0, 0),)]"
postgresql,postgresql,SELECT d1 FROM TIMESTAMP_TBL    WHERE d1 >= timestamp without time zone '1997-01-02',timestamp.sql,SAME,,"[(datetime.datetime(9999, 12, 31, 23, 59, 59, 999999),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 2),), (datetime.datetime(1997, 2, 10, 17, 32, 1, 400000),), (datetime.datetime(1997, 2, 10, 17, 32, 1, 500000),), (datetime.datetime(1997, 2, 10, 17, 32, 1, 600000),), (datetime.datetime(1997, 1, 2, 0, 0),), (datetime.datetime(1997, 1, 2, 3, 4, 5),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 6, 10, 17, 32, 1),), (datetime.datetime(2001, 9, 22, 18, 19, 20),), (datetime.datetime(2000, 3, 15, 8, 14, 1),), (datetime.datetime(2000, 3, 15, 13, 14, 2),), (datetime.datetime(2000, 3, 15, 12, 14, 3),), (datetime.datetime(2000, 3, 15, 3, 14, 4),), (datetime.datetime(2000, 3, 15, 2, 14, 5),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 6, 10, 18, 32, 1),), (datetime.datetime(1997, 2, 10, 17, 32, 1),), (datetime.datetime(1997, 2, 11, 17, 32, 1),), (datetime.datetime(1997, 2, 12, 17, 32, 1),), (datetime.datetime(1997, 2, 13, 17, 32, 1),), (datetime.datetime(1997, 2, 14, 17, 32, 1),), (datetime.datetime(1997, 2, 15, 17, 32, 1),), (datetime.datetime(1997, 2, 16, 17, 32, 1),), (datetime.datetime(1997, 2, 16, 17, 32, 1),), (datetime.datetime(2097, 2, 16, 17, 32, 1),), (datetime.datetime(1997, 2, 28, 17, 32, 1),), (datetime.datetime(1997, 3, 1, 17, 32, 1),), (datetime.datetime(1997, 12, 30, 17, 32, 1),), (datetime.datetime(1997, 12, 31, 17, 32, 1),), (datetime.datetime(1999, 12, 31, 17, 32, 1),), (datetime.datetime(2000, 1, 1, 17, 32, 1),), (datetime.datetime(2000, 12, 31, 17, 32, 1),), (datetime.datetime(2001, 1, 1, 17, 32, 1),)]"
postgresql,postgresql,SELECT d1 - timestamp without time zone '1997-01-02' AS diff    FROM TIMESTAMP_TBL WHERE d1 BETWEEN '1902-01-01' AND '2038-01-01',timestamp.sql,SAME,,"[(datetime.timedelta(days=-9863),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63122),), (datetime.timedelta(days=39, seconds=63121, microseconds=400000),), (datetime.timedelta(days=39, seconds=63121, microseconds=500000),), (datetime.timedelta(days=39, seconds=63121, microseconds=600000),), (datetime.timedelta(0),), (datetime.timedelta(seconds=11045),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=159, seconds=63121),), (datetime.timedelta(days=1724, seconds=65960),), (datetime.timedelta(days=1168, seconds=29641),), (datetime.timedelta(days=1168, seconds=47642),), (datetime.timedelta(days=1168, seconds=44043),), (datetime.timedelta(days=1168, seconds=11644),), (datetime.timedelta(days=1168, seconds=8045),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63120),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=159, seconds=66721),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=40, seconds=63121),), (datetime.timedelta(days=41, seconds=63121),), (datetime.timedelta(days=42, seconds=63121),), (datetime.timedelta(days=43, seconds=63121),), (datetime.timedelta(days=44, seconds=63121),), (datetime.timedelta(days=45, seconds=63121),), (datetime.timedelta(days=45, seconds=63121),), (datetime.timedelta(days=-309, seconds=63121),), (datetime.timedelta(days=-308, seconds=63121),), (datetime.timedelta(days=-307, seconds=63121),), (datetime.timedelta(days=-3, seconds=63121),), (datetime.timedelta(days=-2, seconds=63121),), (datetime.timedelta(days=-1, seconds=63121),), (datetime.timedelta(days=57, seconds=63121),), (datetime.timedelta(days=58, seconds=63121),), (datetime.timedelta(days=362, seconds=63121),), (datetime.timedelta(days=363, seconds=63121),), (datetime.timedelta(days=1093, seconds=63121),), (datetime.timedelta(days=1094, seconds=63121),), (datetime.timedelta(days=1459, seconds=63121),), (datetime.timedelta(days=1460, seconds=63121),)]"
postgresql,postgresql,"SELECT date_trunc( 'week', timestamp '2004-02-29 15:44:17.71393' ) AS week_trunc",timestamp.sql,SAME,,"[(datetime.datetime(2004, 2, 23, 0, 0),)]"
postgresql,postgresql,"SELECT   str,   interval,   date_trunc(str, ts) = date_bin(interval::interval, ts, timestamp '2001-01-01') AS equal FROM (   VALUES   ('week', '7 d'),   ('day', '1 d'),   ('hour', '1 h'),   ('minute', '1 m'),   ('second', '1 s'),   ('millisecond', '1 ms'),   ('microsecond', '1 us') ) intervals (str, interval), (VALUES (timestamp '2020-02-29 15:44:17.71393')) ts (ts)",timestamp.sql,SAME,,"[('week', '7 d', True), ('day', '1 d', True), ('hour', '1 h', True), ('minute', '1 m', True), ('second', '1 s', True), ('millisecond', '1 ms', True), ('microsecond', '1 us', True)]"
postgresql,postgresql,"SELECT   str,   interval,   date_trunc(str, ts) = date_bin(interval::interval, ts, timestamp '2000-01-01 BC') AS equal FROM (   VALUES   ('week', '7 d'),   ('day', '1 d'),   ('hour', '1 h'),   ('minute', '1 m'),   ('second', '1 s'),   ('millisecond', '1 ms'),   ('microsecond', '1 us') ) intervals (str, interval), (VALUES (timestamp '0055-6-10 15:44:17.71393 BC')) ts (ts)",timestamp.sql,SAME,,"[('week', '7 d', True), ('day', '1 d', True), ('hour', '1 h', True), ('minute', '1 m', True), ('second', '1 s', True), ('millisecond', '1 ms', True), ('microsecond', '1 us', True)]"
postgresql,postgresql,"SELECT   str,   interval,   date_trunc(str, ts) = date_bin(interval::interval, ts, timestamp '2020-03-02') AS equal FROM (   VALUES   ('week', '7 d'),   ('day', '1 d'),   ('hour', '1 h'),   ('minute', '1 m'),   ('second', '1 s'),   ('millisecond', '1 ms'),   ('microsecond', '1 us') ) intervals (str, interval), (VALUES (timestamp '2020-02-29 15:44:17.71393')) ts (ts)",timestamp.sql,SAME,,"[('week', '7 d', True), ('day', '1 d', True), ('hour', '1 h', True), ('minute', '1 m', True), ('second', '1 s', True), ('millisecond', '1 ms', True), ('microsecond', '1 us', True)]"
postgresql,postgresql,"SELECT   str,   interval,   date_trunc(str, ts) = date_bin(interval::interval, ts, timestamp '0055-06-17 BC') AS equal FROM (   VALUES   ('week', '7 d'),   ('day', '1 d'),   ('hour', '1 h'),   ('minute', '1 m'),   ('second', '1 s'),   ('millisecond', '1 ms'),   ('microsecond', '1 us') ) intervals (str, interval), (VALUES (timestamp '0055-6-10 15:44:17.71393 BC')) ts (ts)",timestamp.sql,SAME,,"[('week', '7 d', True), ('day', '1 d', True), ('hour', '1 h', True), ('minute', '1 m', True), ('second', '1 s', True), ('millisecond', '1 ms', True), ('microsecond', '1 us', True)]"
postgresql,postgresql,"SELECT   interval,   ts,   origin,   date_bin(interval::interval, ts, origin) FROM (   VALUES   ('15 days'),   ('2 hours'),   ('1 hour 30 minutes'),   ('15 minutes'),   ('10 seconds'),   ('100 milliseconds'),   ('250 microseconds') ) intervals (interval), (VALUES (timestamp '2020-02-11 15:44:17.71393')) ts (ts), (VALUES (timestamp '2001-01-01')) origin (origin)",timestamp.sql,SAME,,"[('15 days', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930), datetime.datetime(2001, 1, 1, 0, 0), datetime.datetime(2020, 2, 6, 0, 0)), ('2 hours', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930), datetime.datetime(2001, 1, 1, 0, 0), datetime.datetime(2020, 2, 11, 14, 0)), ('1 hour 30 minutes', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930), datetime.datetime(2001, 1, 1, 0, 0), datetime.datetime(2020, 2, 11, 15, 0)), ('15 minutes', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930), datetime.datetime(2001, 1, 1, 0, 0), datetime.datetime(2020, 2, 11, 15, 30)), ('10 seconds', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930), datetime.datetime(2001, 1, 1, 0, 0), datetime.datetime(2020, 2, 11, 15, 44, 10)), ('100 milliseconds', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930), datetime.datetime(2001, 1, 1, 0, 0), datetime.datetime(2020, 2, 11, 15, 44, 17, 700000)), ('250 microseconds', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930), datetime.datetime(2001, 1, 1, 0, 0), datetime.datetime(2020, 2, 11, 15, 44, 17, 713750))]"
postgresql,postgresql,"SELECT date_bin('5 min'::interval, timestamp '2020-02-01 01:01:01', timestamp '2020-02-01 00:02:30')",timestamp.sql,SAME,,"[(datetime.datetime(2020, 2, 1, 0, 57, 30),)]"
postgresql,postgresql,"SELECT date_bin('30 minutes'::interval, timestamp '2024-02-01 15:00:00', timestamp '2024-02-01 17:00:00')",timestamp.sql,SAME,,"[(datetime.datetime(2024, 2, 1, 15, 0),)]"
postgresql,postgresql,SELECT d1 - timestamp without time zone '1997-01-02' AS diff   FROM TIMESTAMP_TBL   WHERE d1 BETWEEN timestamp without time zone '1902-01-01'    AND timestamp without time zone '2038-01-01',timestamp.sql,SAME,,"[(datetime.timedelta(days=-9863),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63122),), (datetime.timedelta(days=39, seconds=63121, microseconds=400000),), (datetime.timedelta(days=39, seconds=63121, microseconds=500000),), (datetime.timedelta(days=39, seconds=63121, microseconds=600000),), (datetime.timedelta(0),), (datetime.timedelta(seconds=11045),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=159, seconds=63121),), (datetime.timedelta(days=1724, seconds=65960),), (datetime.timedelta(days=1168, seconds=29641),), (datetime.timedelta(days=1168, seconds=47642),), (datetime.timedelta(days=1168, seconds=44043),), (datetime.timedelta(days=1168, seconds=11644),), (datetime.timedelta(days=1168, seconds=8045),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63120),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=159, seconds=66721),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=40, seconds=63121),), (datetime.timedelta(days=41, seconds=63121),), (datetime.timedelta(days=42, seconds=63121),), (datetime.timedelta(days=43, seconds=63121),), (datetime.timedelta(days=44, seconds=63121),), (datetime.timedelta(days=45, seconds=63121),), (datetime.timedelta(days=45, seconds=63121),), (datetime.timedelta(days=-309, seconds=63121),), (datetime.timedelta(days=-308, seconds=63121),), (datetime.timedelta(days=-307, seconds=63121),), (datetime.timedelta(days=-3, seconds=63121),), (datetime.timedelta(days=-2, seconds=63121),), (datetime.timedelta(days=-1, seconds=63121),), (datetime.timedelta(days=57, seconds=63121),), (datetime.timedelta(days=58, seconds=63121),), (datetime.timedelta(days=362, seconds=63121),), (datetime.timedelta(days=363, seconds=63121),), (datetime.timedelta(days=1093, seconds=63121),), (datetime.timedelta(days=1094, seconds=63121),), (datetime.timedelta(days=1459, seconds=63121),), (datetime.timedelta(days=1460, seconds=63121),)]"
postgresql,postgresql,"SELECT date_part('epoch', '294270-01-01 00:00:00'::timestamp)",timestamp.sql,SAME,,"[(9224097091200.0,)]"
postgresql,postgresql,SELECT extract(epoch from '294270-01-01 00:00:00'::timestamp),timestamp.sql,SAME,,"[(Decimal('9224097091200.000000'),)]"
postgresql,postgresql,SELECT extract(epoch from '5000-01-01 00:00:00'::timestamp),timestamp.sql,SAME,,"[(Decimal('95617584000.000000'),)]"
postgresql,postgresql,SELECT timestamp '294276-12-31 23:59:59' - timestamp '1999-12-23 19:59:04.224193' AS ok,timestamp.sql,SAME,,"[(datetime.timedelta(days=106751991, seconds=14454, microseconds=775807),)]"
postgresql,postgresql,"SELECT to_char(d1, 'DAY Day day DY Dy dy MONTH Month month RM MON Mon mon')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('THURSDAY  Thursday  thursday  THU Thu thu JANUARY   January   january   I    JAN Jan jan',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu JANUARY   January   january   I    JAN Jan jan',), ('THURSDAY  Thursday  thursday  THU Thu thu JANUARY   January   january   I    JAN Jan jan',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue JUNE      June      june      VI   JUN Jun jun',), ('SATURDAY  Saturday  saturday  SAT Sat sat SEPTEMBER September september IX   SEP Sep sep',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue JUNE      June      june      VI   JUN Jun jun',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('WEDNESDAY Wednesday wednesday WED Wed wed FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu FEBRUARY  February  february  II   FEB Feb feb',), ('FRIDAY    Friday    friday    FRI Fri fri FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat FEBRUARY  February  february  II   FEB Feb feb',), ('SUNDAY    Sunday    sunday    SUN Sun sun FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('SUNDAY    Sunday    sunday    SUN Sun sun FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat FEBRUARY  February  february  II   FEB Feb feb',), ('WEDNESDAY Wednesday wednesday WED Wed wed FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu FEBRUARY  February  february  II   FEB Feb feb',), ('FRIDAY    Friday    friday    FRI Fri fri MARCH     March     march     III  MAR Mar mar',), ('MONDAY    Monday    monday    MON Mon mon DECEMBER  December  december  XII  DEC Dec dec',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue DECEMBER  December  december  XII  DEC Dec dec',), ('WEDNESDAY Wednesday wednesday WED Wed wed JANUARY   January   january   I    JAN Jan jan',), ('FRIDAY    Friday    friday    FRI Fri fri FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat MARCH     March     march     III  MAR Mar mar',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue DECEMBER  December  december  XII  DEC Dec dec',), ('WEDNESDAY Wednesday wednesday WED Wed wed DECEMBER  December  december  XII  DEC Dec dec',), ('FRIDAY    Friday    friday    FRI Fri fri DECEMBER  December  december  XII  DEC Dec dec',), ('SATURDAY  Saturday  saturday  SAT Sat sat JANUARY   January   january   I    JAN Jan jan',), ('SUNDAY    Sunday    sunday    SUN Sun sun DECEMBER  December  december  XII  DEC Dec dec',), ('MONDAY    Monday    monday    MON Mon mon JANUARY   January   january   I    JAN Jan jan',)]"
postgresql,postgresql,"SELECT to_char(d1, 'FMDAY FMDay FMday FMMONTH FMMonth FMmonth FMRM')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('THURSDAY Thursday thursday JANUARY January january I',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('THURSDAY Thursday thursday JANUARY January january I',), ('THURSDAY Thursday thursday JANUARY January january I',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday JUNE June june VI',), ('SATURDAY Saturday saturday SEPTEMBER September september IX',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday JUNE June june VI',), ('MONDAY Monday monday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('WEDNESDAY Wednesday wednesday FEBRUARY February february II',), ('THURSDAY Thursday thursday FEBRUARY February february II',), ('FRIDAY Friday friday FEBRUARY February february II',), ('SATURDAY Saturday saturday FEBRUARY February february II',), ('SUNDAY Sunday sunday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('SATURDAY Saturday saturday FEBRUARY February february II',), ('THURSDAY Thursday thursday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('SATURDAY Saturday saturday FEBRUARY February february II',), ('THURSDAY Thursday thursday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('SUNDAY Sunday sunday FEBRUARY February february II',), ('SATURDAY Saturday saturday FEBRUARY February february II',), ('WEDNESDAY Wednesday wednesday FEBRUARY February february II',), ('THURSDAY Thursday thursday FEBRUARY February february II',), ('FRIDAY Friday friday MARCH March march III',), ('MONDAY Monday monday DECEMBER December december XII',), ('TUESDAY Tuesday tuesday DECEMBER December december XII',), ('WEDNESDAY Wednesday wednesday JANUARY January january I',), ('FRIDAY Friday friday FEBRUARY February february II',), ('SATURDAY Saturday saturday MARCH March march III',), ('TUESDAY Tuesday tuesday DECEMBER December december XII',), ('WEDNESDAY Wednesday wednesday DECEMBER December december XII',), ('FRIDAY Friday friday DECEMBER December december XII',), ('SATURDAY Saturday saturday JANUARY January january I',), ('SUNDAY Sunday sunday DECEMBER December december XII',), ('MONDAY Monday monday JANUARY January january I',)]"
postgresql,postgresql,"SELECT to_char(d1, 'Y,YYY YYYY YYY YY Y CC Q MM WW DDD DD D J')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('1,970 1970 970 70 0 20 1 01 01 001 01 5 2440588',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 01 01 002 02 5 2450451',), ('1,997 1997 997 97 7 20 1 01 01 002 02 5 2450451',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 2 06 23 161 10 3 2450610',), ('2,001 2001 001 01 1 21 3 09 38 265 22 7 2452175',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 2 06 23 161 10 3 2450610',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 07 043 12 4 2450492',), ('1,997 1997 997 97 7 20 1 02 07 044 13 5 2450493',), ('1,997 1997 997 97 7 20 1 02 07 045 14 6 2450494',), ('1,997 1997 997 97 7 20 1 02 07 046 15 7 2450495',), ('1,997 1997 997 97 7 20 1 02 07 047 16 1 2450496',), ('0,097 0097 097 97 7 -01 1 02 07 047 16 3 1686042',), ('0,097 0097 097 97 7 01 1 02 07 047 16 7 1756536',), ('0,597 0597 597 97 7 06 1 02 07 047 16 5 1939157',), ('1,097 1097 097 97 7 11 1 02 07 047 16 3 2121778',), ('1,697 1697 697 97 7 17 1 02 07 047 16 7 2340924',), ('1,797 1797 797 97 7 18 1 02 07 047 16 5 2377448',), ('1,897 1897 897 97 7 19 1 02 07 047 16 3 2413972',), ('1,997 1997 997 97 7 20 1 02 07 047 16 1 2450496',), ('2,097 2097 097 97 7 21 1 02 07 047 16 7 2487021',), ('1,996 1996 996 96 6 20 1 02 09 059 28 4 2450142',), ('1,996 1996 996 96 6 20 1 02 09 060 29 5 2450143',), ('1,996 1996 996 96 6 20 1 03 09 061 01 6 2450144',), ('1,996 1996 996 96 6 20 4 12 53 365 30 2 2450448',), ('1,996 1996 996 96 6 20 4 12 53 366 31 3 2450449',), ('1,997 1997 997 97 7 20 1 01 01 001 01 4 2450450',), ('1,997 1997 997 97 7 20 1 02 09 059 28 6 2450508',), ('1,997 1997 997 97 7 20 1 03 09 060 01 7 2450509',), ('1,997 1997 997 97 7 20 4 12 52 364 30 3 2450813',), ('1,997 1997 997 97 7 20 4 12 53 365 31 4 2450814',), ('1,999 1999 999 99 9 20 4 12 53 365 31 6 2451544',), ('2,000 2000 000 00 0 20 1 01 01 001 01 7 2451545',), ('2,000 2000 000 00 0 20 4 12 53 366 31 1 2451910',), ('2,001 2001 001 01 1 21 1 01 01 001 01 2 2451911',)]"
postgresql,postgresql,"SELECT to_char(d1, 'FMY,YYY FMYYYY FMYYY FMYY FMY FMCC FMQ FMMM FMWW FMDDD FMDD FMD FMJ')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('1,970 1970 970 70 0 20 1 1 1 1 1 5 2440588',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 1 1 2 2 5 2450451',), ('1,997 1997 997 97 7 20 1 1 1 2 2 5 2450451',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 2 6 23 161 10 3 2450610',), ('2,001 2001 1 1 1 21 3 9 38 265 22 7 2452175',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 2 6 23 161 10 3 2450610',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 7 43 12 4 2450492',), ('1,997 1997 997 97 7 20 1 2 7 44 13 5 2450493',), ('1,997 1997 997 97 7 20 1 2 7 45 14 6 2450494',), ('1,997 1997 997 97 7 20 1 2 7 46 15 7 2450495',), ('1,997 1997 997 97 7 20 1 2 7 47 16 1 2450496',), ('0,097 97 97 97 7 -1 1 2 7 47 16 3 1686042',), ('0,097 97 97 97 7 1 1 2 7 47 16 7 1756536',), ('0,597 597 597 97 7 6 1 2 7 47 16 5 1939157',), ('1,097 1097 97 97 7 11 1 2 7 47 16 3 2121778',), ('1,697 1697 697 97 7 17 1 2 7 47 16 7 2340924',), ('1,797 1797 797 97 7 18 1 2 7 47 16 5 2377448',), ('1,897 1897 897 97 7 19 1 2 7 47 16 3 2413972',), ('1,997 1997 997 97 7 20 1 2 7 47 16 1 2450496',), ('2,097 2097 97 97 7 21 1 2 7 47 16 7 2487021',), ('1,996 1996 996 96 6 20 1 2 9 59 28 4 2450142',), ('1,996 1996 996 96 6 20 1 2 9 60 29 5 2450143',), ('1,996 1996 996 96 6 20 1 3 9 61 1 6 2450144',), ('1,996 1996 996 96 6 20 4 12 53 365 30 2 2450448',), ('1,996 1996 996 96 6 20 4 12 53 366 31 3 2450449',), ('1,997 1997 997 97 7 20 1 1 1 1 1 4 2450450',), ('1,997 1997 997 97 7 20 1 2 9 59 28 6 2450508',), ('1,997 1997 997 97 7 20 1 3 9 60 1 7 2450509',), ('1,997 1997 997 97 7 20 4 12 52 364 30 3 2450813',), ('1,997 1997 997 97 7 20 4 12 53 365 31 4 2450814',), ('1,999 1999 999 99 9 20 4 12 53 365 31 6 2451544',), ('2,000 2000 0 0 0 20 1 1 1 1 1 7 2451545',), ('2,000 2000 0 0 0 20 4 12 53 366 31 1 2451910',), ('2,001 2001 1 1 1 21 1 1 1 1 1 2 2451911',)]"
postgresql,postgresql,"SELECT to_char(d1, 'HH HH12 HH24 MI SS SSSS')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('12 12 00 00 00 0',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 02 63122',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('12 12 00 00 00 0',), ('03 03 03 04 05 11045',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('06 06 18 19 20 65960',), ('08 08 08 14 01 29641',), ('01 01 13 14 02 47642',), ('12 12 12 14 03 44043',), ('03 03 03 14 04 11644',), ('02 02 02 14 05 8045',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 00 63120',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('06 06 18 32 01 66721',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',)]"
postgresql,postgresql,"SELECT to_char(d1, E'""HH:MI:SS is"" HH:MI:SS ""\\""text between quote marks\\""""')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('HH:MI:SS is 12:00:00 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:02 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 12:00:00 ""text between quote marks""',), ('HH:MI:SS is 03:04:05 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 06:19:20 ""text between quote marks""',), ('HH:MI:SS is 08:14:01 ""text between quote marks""',), ('HH:MI:SS is 01:14:02 ""text between quote marks""',), ('HH:MI:SS is 12:14:03 ""text between quote marks""',), ('HH:MI:SS is 03:14:04 ""text between quote marks""',), ('HH:MI:SS is 02:14:05 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:00 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 06:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',)]"
postgresql,postgresql,"SELECT to_char(d1, 'YYYYTH YYYYth Jth')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('1970TH 1970th 2440588th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450451st',), ('1997TH 1997th 2450451st',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450610th',), ('2001ST 2001st 2452175th',), ('2000TH 2000th 2451619th',), ('2000TH 2000th 2451619th',), ('2000TH 2000th 2451619th',), ('2000TH 2000th 2451619th',), ('2000TH 2000th 2451619th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450610th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450492nd',), ('1997TH 1997th 2450493rd',), ('1997TH 1997th 2450494th',), ('1997TH 1997th 2450495th',), ('1997TH 1997th 2450496th',), ('0097TH 0097th 1686042nd',), ('0097TH 0097th 1756536th',), ('0597TH 0597th 1939157th',), ('1097TH 1097th 2121778th',), ('1697TH 1697th 2340924th',), ('1797TH 1797th 2377448th',), ('1897TH 1897th 2413972nd',), ('1997TH 1997th 2450496th',), ('2097TH 2097th 2487021st',), ('1996TH 1996th 2450142nd',), ('1996TH 1996th 2450143rd',), ('1996TH 1996th 2450144th',), ('1996TH 1996th 2450448th',), ('1996TH 1996th 2450449th',), ('1997TH 1997th 2450450th',), ('1997TH 1997th 2450508th',), ('1997TH 1997th 2450509th',), ('1997TH 1997th 2450813th',), ('1997TH 1997th 2450814th',), ('1999TH 1999th 2451544th',), ('2000TH 2000th 2451545th',), ('2000TH 2000th 2451910th',), ('2001ST 2001st 2451911th',)]"
postgresql,postgresql,"SELECT to_char(d1, 'YYYY A.D. YYYY a.d. YYYY bc HH:MI:SS P.M. HH:MI:SS p.m. HH:MI:SS pm')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('1970 A.D. 1970 a.d. 1970 ad 12:00:00 A.M. 12:00:00 a.m. 12:00:00 am',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:02 P.M. 05:32:02 p.m. 05:32:02 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 12:00:00 A.M. 12:00:00 a.m. 12:00:00 am',), ('1997 A.D. 1997 a.d. 1997 ad 03:04:05 A.M. 03:04:05 a.m. 03:04:05 am',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('2001 A.D. 2001 a.d. 2001 ad 06:19:20 P.M. 06:19:20 p.m. 06:19:20 pm',), ('2000 A.D. 2000 a.d. 2000 ad 08:14:01 A.M. 08:14:01 a.m. 08:14:01 am',), ('2000 A.D. 2000 a.d. 2000 ad 01:14:02 P.M. 01:14:02 p.m. 01:14:02 pm',), ('2000 A.D. 2000 a.d. 2000 ad 12:14:03 P.M. 12:14:03 p.m. 12:14:03 pm',), ('2000 A.D. 2000 a.d. 2000 ad 03:14:04 A.M. 03:14:04 a.m. 03:14:04 am',), ('2000 A.D. 2000 a.d. 2000 ad 02:14:05 A.M. 02:14:05 a.m. 02:14:05 am',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:00 P.M. 05:32:00 p.m. 05:32:00 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 06:32:01 P.M. 06:32:01 p.m. 06:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('0097 B.C. 0097 b.c. 0097 bc 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('0097 A.D. 0097 a.d. 0097 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('0597 A.D. 0597 a.d. 0597 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1097 A.D. 1097 a.d. 1097 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1697 A.D. 1697 a.d. 1697 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1797 A.D. 1797 a.d. 1797 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1897 A.D. 1897 a.d. 1897 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('2097 A.D. 2097 a.d. 2097 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1999 A.D. 1999 a.d. 1999 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('2000 A.D. 2000 a.d. 2000 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('2000 A.D. 2000 a.d. 2000 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('2001 A.D. 2001 a.d. 2001 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',)]"
postgresql,postgresql,"SELECT to_char(d1, 'IYYY IYY IY I IW IDDD ID')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('1970 970 70 0 01 004 4',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 01 004 4',), ('1997 997 97 7 01 004 4',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 24 163 2',), ('2001 001 01 1 38 265 6',), ('2000 000 00 0 11 073 3',), ('2000 000 00 0 11 073 3',), ('2000 000 00 0 11 073 3',), ('2000 000 00 0 11 073 3',), ('2000 000 00 0 11 073 3',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 24 163 2',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 045 3',), ('1997 997 97 7 07 046 4',), ('1997 997 97 7 07 047 5',), ('1997 997 97 7 07 048 6',), ('1997 997 97 7 07 049 7',), ('0097 097 97 7 07 044 2',), ('0097 097 97 7 07 048 6',), ('0597 597 97 7 07 046 4',), ('1097 097 97 7 07 044 2',), ('1697 697 97 7 07 048 6',), ('1797 797 97 7 07 046 4',), ('1897 897 97 7 07 044 2',), ('1997 997 97 7 07 049 7',), ('2097 097 97 7 07 048 6',), ('1996 996 96 6 09 059 3',), ('1996 996 96 6 09 060 4',), ('1996 996 96 6 09 061 5',), ('1997 997 97 7 01 001 1',), ('1997 997 97 7 01 002 2',), ('1997 997 97 7 01 003 3',), ('1997 997 97 7 09 061 5',), ('1997 997 97 7 09 062 6',), ('1998 998 98 8 01 002 2',), ('1998 998 98 8 01 003 3',), ('1999 999 99 9 52 362 5',), ('1999 999 99 9 52 363 6',), ('2000 000 00 0 52 364 7',), ('2001 001 01 1 01 001 1',)]"
postgresql,postgresql,"SELECT to_char(d1, 'FMIYYY FMIYY FMIY FMI FMIW FMIDDD FMID')    FROM TIMESTAMP_TBL",timestamp.sql,SAME,,"[(None,), (None,), ('1970 970 70 0 1 4 4',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 1 4 4',), ('1997 997 97 7 1 4 4',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 24 163 2',), ('2001 1 1 1 38 265 6',), ('2000 0 0 0 11 73 3',), ('2000 0 0 0 11 73 3',), ('2000 0 0 0 11 73 3',), ('2000 0 0 0 11 73 3',), ('2000 0 0 0 11 73 3',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 24 163 2',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 45 3',), ('1997 997 97 7 7 46 4',), ('1997 997 97 7 7 47 5',), ('1997 997 97 7 7 48 6',), ('1997 997 97 7 7 49 7',), ('97 97 97 7 7 44 2',), ('97 97 97 7 7 48 6',), ('597 597 97 7 7 46 4',), ('1097 97 97 7 7 44 2',), ('1697 697 97 7 7 48 6',), ('1797 797 97 7 7 46 4',), ('1897 897 97 7 7 44 2',), ('1997 997 97 7 7 49 7',), ('2097 97 97 7 7 48 6',), ('1996 996 96 6 9 59 3',), ('1996 996 96 6 9 60 4',), ('1996 996 96 6 9 61 5',), ('1997 997 97 7 1 1 1',), ('1997 997 97 7 1 2 2',), ('1997 997 97 7 1 3 3',), ('1997 997 97 7 9 61 5',), ('1997 997 97 7 9 62 6',), ('1998 998 98 8 1 2 2',), ('1998 998 98 8 1 3 3',), ('1999 999 99 9 52 362 5',), ('1999 999 99 9 52 363 6',), ('2000 0 0 0 52 364 7',), ('2001 1 1 1 1 1 1',)]"
postgresql,postgresql,"SELECT to_char(d, 'FF1 FF2 FF3 FF4 FF5 FF6  ff1 ff2 ff3 ff4 ff5 ff6  MS US')    FROM (VALUES        ('2018-11-02 12:34:56'::timestamp),        ('2018-11-02 12:34:56.78'),        ('2018-11-02 12:34:56.78901'),        ('2018-11-02 12:34:56.78901234')    ) d(d)",timestamp.sql,SAME,,"[('0 00 000 0000 00000 000000  0 00 000 0000 00000 000000  000 000000',), ('7 78 780 7800 78000 780000  7 78 780 7800 78000 780000  780 780000',), ('7 78 789 7890 78901 789010  7 78 789 7890 78901 789010  789 789010',), ('7 78 789 7890 78901 789012  7 78 789 7890 78901 789012  789 789012',)]"
postgresql,postgresql,"SELECT i,        to_char(i * interval '1mon', 'rm'),        to_char(i * interval '1mon', 'RM')     FROM generate_series(-13, 13) i",timestamp.sql,SAME,,"[(-13, 'xii ', 'XII '), (-12, 'i   ', 'I   '), (-11, 'ii  ', 'II  '), (-10, 'iii ', 'III '), (-9, 'iv  ', 'IV  '), (-8, 'v   ', 'V   '), (-7, 'vi  ', 'VI  '), (-6, 'vii ', 'VII '), (-5, 'viii', 'VIII'), (-4, 'ix  ', 'IX  '), (-3, 'x   ', 'X   '), (-2, 'xi  ', 'XI  '), (-1, 'xii ', 'XII '), (0, '', ''), (1, 'i   ', 'I   '), (2, 'ii  ', 'II  '), (3, 'iii ', 'III '), (4, 'iv  ', 'IV  '), (5, 'v   ', 'V   '), (6, 'vi  ', 'VI  '), (7, 'vii ', 'VII '), (8, 'viii', 'VIII'), (9, 'ix  ', 'IX  '), (10, 'x   ', 'X   '), (11, 'xi  ', 'XI  '), (12, 'xii ', 'XII '), (13, 'i   ', 'I   ')]"
postgresql,postgresql,"SELECT make_timestamp(2014, 12, 28, 6, 30, 45.887)",timestamp.sql,SAME,,"[(datetime.datetime(2014, 12, 28, 6, 30, 45, 887000),)]"
postgresql,postgresql,"select * from generate_series('2020-01-01 00:00'::timestamp,                               '2020-01-02 03:00'::timestamp,                               '1 hour'::interval)",timestamp.sql,SAME,,"[(datetime.datetime(2020, 1, 1, 0, 0),), (datetime.datetime(2020, 1, 1, 1, 0),), (datetime.datetime(2020, 1, 1, 2, 0),), (datetime.datetime(2020, 1, 1, 3, 0),), (datetime.datetime(2020, 1, 1, 4, 0),), (datetime.datetime(2020, 1, 1, 5, 0),), (datetime.datetime(2020, 1, 1, 6, 0),), (datetime.datetime(2020, 1, 1, 7, 0),), (datetime.datetime(2020, 1, 1, 8, 0),), (datetime.datetime(2020, 1, 1, 9, 0),), (datetime.datetime(2020, 1, 1, 10, 0),), (datetime.datetime(2020, 1, 1, 11, 0),), (datetime.datetime(2020, 1, 1, 12, 0),), (datetime.datetime(2020, 1, 1, 13, 0),), (datetime.datetime(2020, 1, 1, 14, 0),), (datetime.datetime(2020, 1, 1, 15, 0),), (datetime.datetime(2020, 1, 1, 16, 0),), (datetime.datetime(2020, 1, 1, 17, 0),), (datetime.datetime(2020, 1, 1, 18, 0),), (datetime.datetime(2020, 1, 1, 19, 0),), (datetime.datetime(2020, 1, 1, 20, 0),), (datetime.datetime(2020, 1, 1, 21, 0),), (datetime.datetime(2020, 1, 1, 22, 0),), (datetime.datetime(2020, 1, 1, 23, 0),), (datetime.datetime(2020, 1, 2, 0, 0),), (datetime.datetime(2020, 1, 2, 1, 0),), (datetime.datetime(2020, 1, 2, 2, 0),), (datetime.datetime(2020, 1, 2, 3, 0),)]"
postgresql,postgresql,"select generate_series('2022-01-01 00:00'::timestamp,                        'infinity'::timestamp,                        '1 month'::interval) limit 10",timestamp.sql,SAME,,"[(datetime.datetime(2022, 1, 1, 0, 0),), (datetime.datetime(2022, 2, 1, 0, 0),), (datetime.datetime(2022, 3, 1, 0, 0),), (datetime.datetime(2022, 4, 1, 0, 0),), (datetime.datetime(2022, 5, 1, 0, 0),), (datetime.datetime(2022, 6, 1, 0, 0),), (datetime.datetime(2022, 7, 1, 0, 0),), (datetime.datetime(2022, 8, 1, 0, 0),), (datetime.datetime(2022, 9, 1, 0, 0),), (datetime.datetime(2022, 10, 1, 0, 0),)]"
postgresql,postgresql,select age(timestamp 'infinity'),timestamp.sql,SAME,,"[(datetime.timedelta(days=-106672206, seconds=71945, microseconds=224193),)]"
postgresql,postgresql,"select age(timestamp 'infinity', timestamp 'infinity')",timestamp.sql,SAME,,"[(datetime.timedelta(0),)]"
postgresql,postgresql,BEGIN,timestamptz.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'today',timestamptz.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'tomorrow',timestamptz.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'yesterday',timestamptz.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'tomorrow EST',timestamptz.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'tomorrow zulu',timestamptz.sql,SAME,,"[(1,)]"
postgresql,postgresql,COMMIT,timestamptz.sql,SAME,,[]
postgresql,postgresql,DELETE FROM TIMESTAMPTZ_TBL,timestamptz.sql,SAME,,[]
postgresql,postgresql,SELECT pg_sleep(0.1),timestamptz.sql,SAME,,"[('',)]"
postgresql,postgresql,BEGIN,timestamptz.sql,SAME,,[]
postgresql,postgresql,SELECT pg_sleep(0.1),timestamptz.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT pg_sleep(0.1),timestamptz.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT count(*) AS two FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp(2) with time zone 'now',timestamptz.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT count(d1) AS three, count(DISTINCT d1) AS two FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(3, 2)]"
postgresql,postgresql,COMMIT,timestamptz.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TIMESTAMPTZ_TBL,timestamptz.sql,SAME,,[]
postgresql,postgresql,SELECT timestamptz 'infinity' = timestamptz '+infinity' AS t,timestamptz.sql,SAME,,"[(True,)]"
postgresql,postgresql,set datestyle to ymd,timestamptz.sql,SAME,,[]
postgresql,postgresql,reset datestyle,timestamptz.sql,SAME,,[]
postgresql,postgresql,SELECT '19970210 173201' AT TIME ZONE 'America/New_York',timestamptz.sql,SAME,,"[(datetime.datetime(1997, 2, 10, 11, 32, 1),)]"
postgresql,postgresql,SELECT '19970710 173201' AT TIME ZONE 'America/New_York',timestamptz.sql,SAME,,"[(datetime.datetime(1997, 7, 10, 11, 32, 1),)]"
postgresql,postgresql,SELECT '20500710 173201 Europe/Helsinki'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2050, 7, 10, 16, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SELECT '20500110 173201 Europe/Helsinki'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2050, 1, 10, 16, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT pg_input_is_valid('now', 'timestamptz')",timestamptz.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('garbage', 'timestamptz')",timestamptz.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('2001-01-01 00:00 Nehwon/Lankhmar', 'timestamptz')",timestamptz.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('garbage', 'timestamptz')",timestamptz.sql,SAME,,"[('invalid input syntax for type timestamp with time zone: ""garbage""', None, None, '22007')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('2001-01-01 00:00 Nehwon/Lankhmar', 'timestamptz')",timestamptz.sql,SAME,,"[('time zone ""nehwon/lankhmar"" not recognized', None, None, '22023')]"
postgresql,postgresql,SELECT 'Wed Jul 11 10:51:14 America/New_York 2001'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2001, 7, 11, 16, 51, 14, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SELECT 'Wed Jul 11 10:51:14 GMT-4 2001'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2001, 7, 11, 8, 51, 14, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SELECT 'Wed Jul 11 10:51:14 GMT+4 2001'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2001, 7, 11, 16, 51, 14, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SELECT 'Wed Jul 11 10:51:14 PST-03:00 2001'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2001, 7, 11, 9, 51, 14, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SELECT 'Wed Jul 11 10:51:14 PST+03:00 2001'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2001, 7, 11, 15, 51, 14, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SELECT d1 FROM TIMESTAMPTZ_TBL    WHERE d1 > timestamp with time zone '1997-01-02',timestamptz.sql,SAME,,"[(datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=datetime.timezone.utc),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 2, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, 400000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, 500000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, 600000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 1, 2, 3, 4, 5, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 6, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2001, 9, 22, 18, 19, 20, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2000, 3, 15, 17, 14, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 3, 15, 13, 14, 2, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 3, 15, 11, 14, 3, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 3, 15, 12, 14, 4, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 3, 15, 10, 14, 5, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 17, 32, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 18, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 18, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 18, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 23, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 7, 10, 23, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(1997, 6, 11, 3, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(1997, 2, 10, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 12, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 13, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 14, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 15, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 16, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 16, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2097, 2, 16, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 28, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 3, 1, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 12, 30, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 12, 31, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1999, 12, 31, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 1, 1, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 12, 31, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2001, 1, 1, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT d1 FROM TIMESTAMPTZ_TBL    WHERE d1 = timestamp with time zone '1997-01-02',timestamptz.sql,SAME,,"[(datetime.datetime(1997, 1, 2, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT d1 FROM TIMESTAMPTZ_TBL    WHERE d1 >= timestamp with time zone '1997-01-02',timestamptz.sql,SAME,,"[(datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=datetime.timezone.utc),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 2, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, 400000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, 500000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, 600000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 1, 2, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 1, 2, 3, 4, 5, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 6, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2001, 9, 22, 18, 19, 20, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2000, 3, 15, 17, 14, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 3, 15, 13, 14, 2, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 3, 15, 11, 14, 3, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 3, 15, 12, 14, 4, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 3, 15, 10, 14, 5, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 17, 32, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 2, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 18, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 18, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 18, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 10, 23, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 7, 10, 23, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(1997, 6, 11, 3, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(1997, 2, 10, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 11, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 12, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 13, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 14, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 15, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 16, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 16, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2097, 2, 16, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 2, 28, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 3, 1, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 12, 30, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1997, 12, 31, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(1999, 12, 31, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 1, 1, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2000, 12, 31, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2001, 1, 1, 17, 32, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT d1 - timestamp with time zone '1997-01-02' AS diff    FROM TIMESTAMPTZ_TBL WHERE d1 BETWEEN '1902-01-01' AND '2038-01-01',timestamptz.sql,SAME,,"[(datetime.timedelta(days=-9863, seconds=3600),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9122),), (datetime.timedelta(days=40, seconds=9121, microseconds=400000),), (datetime.timedelta(days=40, seconds=9121, microseconds=500000),), (datetime.timedelta(days=40, seconds=9121, microseconds=600000),), (datetime.timedelta(0),), (datetime.timedelta(seconds=11045),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=160, seconds=5521),), (datetime.timedelta(days=1724, seconds=62360),), (datetime.timedelta(days=1168, seconds=62041),), (datetime.timedelta(days=1168, seconds=47642),), (datetime.timedelta(days=1168, seconds=40443),), (datetime.timedelta(days=1168, seconds=44044),), (datetime.timedelta(days=1168, seconds=36845),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63120),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=39, seconds=66721),), (datetime.timedelta(days=39, seconds=66721),), (datetime.timedelta(days=39, seconds=66721),), (datetime.timedelta(days=39, seconds=84721),), (datetime.timedelta(days=189, seconds=81121),), (datetime.timedelta(days=160, seconds=9121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=40, seconds=63121),), (datetime.timedelta(days=41, seconds=63121),), (datetime.timedelta(days=42, seconds=63121),), (datetime.timedelta(days=43, seconds=63121),), (datetime.timedelta(days=44, seconds=63121),), (datetime.timedelta(days=45, seconds=63121),), (datetime.timedelta(days=45, seconds=63121),), (datetime.timedelta(days=-309, seconds=63121),), (datetime.timedelta(days=-308, seconds=63121),), (datetime.timedelta(days=-307, seconds=63121),), (datetime.timedelta(days=-3, seconds=63121),), (datetime.timedelta(days=-2, seconds=63121),), (datetime.timedelta(days=-1, seconds=63121),), (datetime.timedelta(days=57, seconds=63121),), (datetime.timedelta(days=58, seconds=63121),), (datetime.timedelta(days=362, seconds=63121),), (datetime.timedelta(days=363, seconds=63121),), (datetime.timedelta(days=1093, seconds=63121),), (datetime.timedelta(days=1094, seconds=63121),), (datetime.timedelta(days=1459, seconds=63121),), (datetime.timedelta(days=1460, seconds=63121),)]"
postgresql,postgresql,"SELECT date_trunc( 'week', timestamp with time zone '2004-02-29 15:44:17.71393' ) AS week_trunc",timestamptz.sql,SAME,,"[(datetime.datetime(2004, 2, 23, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT date_trunc('day', timestamp with time zone '2001-02-16 20:38:40+00', 'Australia/Sydney') as sydney_trunc",timestamptz.sql,SAME,,"[(datetime.datetime(2001, 2, 16, 14, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT date_trunc('day', timestamp with time zone '2001-02-16 20:38:40+00', 'GMT') as gmt_trunc",timestamptz.sql,SAME,,"[(datetime.datetime(2001, 2, 16, 1, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT date_trunc('day', timestamp with time zone '2001-02-16 20:38:40+00', 'VET') as vet_trunc",timestamptz.sql,SAME,,"[(datetime.datetime(2001, 2, 16, 5, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT   str,   interval,   date_trunc(str, ts, 'Australia/Sydney') = date_bin(interval::interval, ts, timestamp with time zone '2001-01-01+11') AS equal FROM (   VALUES   ('day', '1 d'),   ('hour', '1 h'),   ('minute', '1 m'),   ('second', '1 s'),   ('millisecond', '1 ms'),   ('microsecond', '1 us') ) intervals (str, interval), (VALUES (timestamptz '2020-02-29 15:44:17.71393+00')) ts (ts)",timestamptz.sql,SAME,,"[('day', '1 d', True), ('hour', '1 h', True), ('minute', '1 m', True), ('second', '1 s', True), ('millisecond', '1 ms', True), ('microsecond', '1 us', True)]"
postgresql,postgresql,"SELECT   interval,   ts,   origin,   date_bin(interval::interval, ts, origin) FROM (   VALUES   ('15 days'),   ('2 hours'),   ('1 hour 30 minutes'),   ('15 minutes'),   ('10 seconds'),   ('100 milliseconds'),   ('250 microseconds') ) intervals (interval), (VALUES (timestamptz '2020-02-11 15:44:17.71393')) ts (ts), (VALUES (timestamptz '2001-01-01')) origin (origin)",timestamptz.sql,SAME,,"[('15 days', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2020, 2, 6, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), ('2 hours', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2020, 2, 11, 14, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), ('1 hour 30 minutes', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2020, 2, 11, 15, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), ('15 minutes', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2020, 2, 11, 15, 30, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), ('10 seconds', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2020, 2, 11, 15, 44, 10, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), ('100 milliseconds', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2020, 2, 11, 15, 44, 17, 700000, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))), ('250 microseconds', datetime.datetime(2020, 2, 11, 15, 44, 17, 713930, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), datetime.datetime(2020, 2, 11, 15, 44, 17, 713750, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))))]"
postgresql,postgresql,"SELECT date_bin('5 min'::interval, timestamptz '2020-02-01 01:01:01+00', timestamptz '2020-02-01 00:02:30+00')",timestamptz.sql,SAME,,"[(datetime.datetime(2020, 2, 1, 1, 57, 30, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"SELECT date_bin('30 minutes'::interval, timestamptz '2024-02-01 15:00:00', timestamptz '2024-02-01 17:00:00')",timestamptz.sql,SAME,,"[(datetime.datetime(2024, 2, 1, 15, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT d1 - timestamp with time zone '1997-01-02' AS diff   FROM TIMESTAMPTZ_TBL   WHERE d1 BETWEEN timestamp with time zone '1902-01-01' AND timestamp with time zone '2038-01-01',timestamptz.sql,SAME,,"[(datetime.timedelta(days=-9863, seconds=3600),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9122),), (datetime.timedelta(days=40, seconds=9121, microseconds=400000),), (datetime.timedelta(days=40, seconds=9121, microseconds=500000),), (datetime.timedelta(days=40, seconds=9121, microseconds=600000),), (datetime.timedelta(0),), (datetime.timedelta(seconds=11045),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=160, seconds=5521),), (datetime.timedelta(days=1724, seconds=62360),), (datetime.timedelta(days=1168, seconds=62041),), (datetime.timedelta(days=1168, seconds=47642),), (datetime.timedelta(days=1168, seconds=40443),), (datetime.timedelta(days=1168, seconds=44044),), (datetime.timedelta(days=1168, seconds=36845),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=39, seconds=63120),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=40, seconds=9121),), (datetime.timedelta(days=39, seconds=66721),), (datetime.timedelta(days=39, seconds=66721),), (datetime.timedelta(days=39, seconds=66721),), (datetime.timedelta(days=39, seconds=84721),), (datetime.timedelta(days=189, seconds=81121),), (datetime.timedelta(days=160, seconds=9121),), (datetime.timedelta(days=39, seconds=63121),), (datetime.timedelta(days=40, seconds=63121),), (datetime.timedelta(days=41, seconds=63121),), (datetime.timedelta(days=42, seconds=63121),), (datetime.timedelta(days=43, seconds=63121),), (datetime.timedelta(days=44, seconds=63121),), (datetime.timedelta(days=45, seconds=63121),), (datetime.timedelta(days=45, seconds=63121),), (datetime.timedelta(days=-309, seconds=63121),), (datetime.timedelta(days=-308, seconds=63121),), (datetime.timedelta(days=-307, seconds=63121),), (datetime.timedelta(days=-3, seconds=63121),), (datetime.timedelta(days=-2, seconds=63121),), (datetime.timedelta(days=-1, seconds=63121),), (datetime.timedelta(days=57, seconds=63121),), (datetime.timedelta(days=58, seconds=63121),), (datetime.timedelta(days=362, seconds=63121),), (datetime.timedelta(days=363, seconds=63121),), (datetime.timedelta(days=1093, seconds=63121),), (datetime.timedelta(days=1094, seconds=63121),), (datetime.timedelta(days=1459, seconds=63121),), (datetime.timedelta(days=1460, seconds=63121),)]"
postgresql,postgresql,"SELECT date_part('epoch', '294270-01-01 00:00:00+00'::timestamptz)",timestamptz.sql,SAME,,"[(9224097091200.0,)]"
postgresql,postgresql,SELECT extract(epoch from '294270-01-01 00:00:00+00'::timestamptz),timestamptz.sql,SAME,,"[(Decimal('9224097091200.000000'),)]"
postgresql,postgresql,SELECT extract(epoch from '5000-01-01 00:00:00+00'::timestamptz),timestamptz.sql,SAME,,"[(Decimal('95617584000.000000'),)]"
postgresql,postgresql,SELECT timestamptz '294276-12-31 23:59:59 UTC' - timestamptz '1999-12-23 19:59:04.224193 UTC' AS ok,timestamptz.sql,SAME,,"[(datetime.timedelta(days=106751991, seconds=14454, microseconds=775807),)]"
postgresql,postgresql,"SELECT to_char(d1, 'DAY Day day DY Dy dy MONTH Month month RM MON Mon mon')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('THURSDAY  Thursday  thursday  THU Thu thu JANUARY   January   january   I    JAN Jan jan',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu JANUARY   January   january   I    JAN Jan jan',), ('THURSDAY  Thursday  thursday  THU Thu thu JANUARY   January   january   I    JAN Jan jan',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('WEDNESDAY Wednesday wednesday WED Wed wed JUNE      June      june      VI   JUN Jun jun',), ('SATURDAY  Saturday  saturday  SAT Sat sat SEPTEMBER September september IX   SEP Sep sep',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('WEDNESDAY Wednesday wednesday WED Wed wed MARCH     March     march     III  MAR Mar mar',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu JULY      July      july      VII  JUL Jul jul',), ('WEDNESDAY Wednesday wednesday WED Wed wed JUNE      June      june      VI   JUN Jun jun',), ('MONDAY    Monday    monday    MON Mon mon FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('WEDNESDAY Wednesday wednesday WED Wed wed FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu FEBRUARY  February  february  II   FEB Feb feb',), ('FRIDAY    Friday    friday    FRI Fri fri FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat FEBRUARY  February  february  II   FEB Feb feb',), ('SUNDAY    Sunday    sunday    SUN Sun sun FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu FEBRUARY  February  february  II   FEB Feb feb',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue FEBRUARY  February  february  II   FEB Feb feb',), ('SUNDAY    Sunday    sunday    SUN Sun sun FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat FEBRUARY  February  february  II   FEB Feb feb',), ('WEDNESDAY Wednesday wednesday WED Wed wed FEBRUARY  February  february  II   FEB Feb feb',), ('THURSDAY  Thursday  thursday  THU Thu thu FEBRUARY  February  february  II   FEB Feb feb',), ('FRIDAY    Friday    friday    FRI Fri fri MARCH     March     march     III  MAR Mar mar',), ('MONDAY    Monday    monday    MON Mon mon DECEMBER  December  december  XII  DEC Dec dec',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue DECEMBER  December  december  XII  DEC Dec dec',), ('WEDNESDAY Wednesday wednesday WED Wed wed JANUARY   January   january   I    JAN Jan jan',), ('FRIDAY    Friday    friday    FRI Fri fri FEBRUARY  February  february  II   FEB Feb feb',), ('SATURDAY  Saturday  saturday  SAT Sat sat MARCH     March     march     III  MAR Mar mar',), ('TUESDAY   Tuesday   tuesday   TUE Tue tue DECEMBER  December  december  XII  DEC Dec dec',), ('WEDNESDAY Wednesday wednesday WED Wed wed DECEMBER  December  december  XII  DEC Dec dec',), ('FRIDAY    Friday    friday    FRI Fri fri DECEMBER  December  december  XII  DEC Dec dec',), ('SATURDAY  Saturday  saturday  SAT Sat sat JANUARY   January   january   I    JAN Jan jan',), ('SUNDAY    Sunday    sunday    SUN Sun sun DECEMBER  December  december  XII  DEC Dec dec',), ('MONDAY    Monday    monday    MON Mon mon JANUARY   January   january   I    JAN Jan jan',)]"
postgresql,postgresql,"SELECT to_char(d1, 'FMDAY FMDay FMday FMMONTH FMMonth FMmonth FMRM')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('THURSDAY Thursday thursday JANUARY January january I',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('THURSDAY Thursday thursday JANUARY January january I',), ('THURSDAY Thursday thursday JANUARY January january I',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('WEDNESDAY Wednesday wednesday JUNE June june VI',), ('SATURDAY Saturday saturday SEPTEMBER September september IX',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('WEDNESDAY Wednesday wednesday MARCH March march III',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('MONDAY Monday monday FEBRUARY February february II',), ('THURSDAY Thursday thursday JULY July july VII',), ('WEDNESDAY Wednesday wednesday JUNE June june VI',), ('MONDAY Monday monday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('WEDNESDAY Wednesday wednesday FEBRUARY February february II',), ('THURSDAY Thursday thursday FEBRUARY February february II',), ('FRIDAY Friday friday FEBRUARY February february II',), ('SATURDAY Saturday saturday FEBRUARY February february II',), ('SUNDAY Sunday sunday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('SATURDAY Saturday saturday FEBRUARY February february II',), ('THURSDAY Thursday thursday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('SATURDAY Saturday saturday FEBRUARY February february II',), ('THURSDAY Thursday thursday FEBRUARY February february II',), ('TUESDAY Tuesday tuesday FEBRUARY February february II',), ('SUNDAY Sunday sunday FEBRUARY February february II',), ('SATURDAY Saturday saturday FEBRUARY February february II',), ('WEDNESDAY Wednesday wednesday FEBRUARY February february II',), ('THURSDAY Thursday thursday FEBRUARY February february II',), ('FRIDAY Friday friday MARCH March march III',), ('MONDAY Monday monday DECEMBER December december XII',), ('TUESDAY Tuesday tuesday DECEMBER December december XII',), ('WEDNESDAY Wednesday wednesday JANUARY January january I',), ('FRIDAY Friday friday FEBRUARY February february II',), ('SATURDAY Saturday saturday MARCH March march III',), ('TUESDAY Tuesday tuesday DECEMBER December december XII',), ('WEDNESDAY Wednesday wednesday DECEMBER December december XII',), ('FRIDAY Friday friday DECEMBER December december XII',), ('SATURDAY Saturday saturday JANUARY January january I',), ('SUNDAY Sunday sunday DECEMBER December december XII',), ('MONDAY Monday monday JANUARY January january I',)]"
postgresql,postgresql,"SELECT to_char(d1, 'Y,YYY YYYY YYY YY Y CC Q MM WW DDD DD D J')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('1,970 1970 970 70 0 20 1 01 01 001 01 5 2440588',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 01 01 002 02 5 2450451',), ('1,997 1997 997 97 7 20 1 01 01 002 02 5 2450451',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 2 06 24 162 11 4 2450611',), ('2,001 2001 001 01 1 21 3 09 38 265 22 7 2452175',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('2,000 2000 000 00 0 20 1 03 11 075 15 4 2451619',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 3 07 28 191 10 5 2450640',), ('1,997 1997 997 97 7 20 2 06 24 162 11 4 2450611',), ('1,997 1997 997 97 7 20 1 02 06 041 10 2 2450490',), ('1,997 1997 997 97 7 20 1 02 06 042 11 3 2450491',), ('1,997 1997 997 97 7 20 1 02 07 043 12 4 2450492',), ('1,997 1997 997 97 7 20 1 02 07 044 13 5 2450493',), ('1,997 1997 997 97 7 20 1 02 07 045 14 6 2450494',), ('1,997 1997 997 97 7 20 1 02 07 046 15 7 2450495',), ('1,997 1997 997 97 7 20 1 02 07 047 16 1 2450496',), ('0,097 0097 097 97 7 -01 1 02 07 047 16 3 1686042',), ('0,097 0097 097 97 7 01 1 02 07 047 16 7 1756536',), ('0,597 0597 597 97 7 06 1 02 07 047 16 5 1939157',), ('1,097 1097 097 97 7 11 1 02 07 047 16 3 2121778',), ('1,697 1697 697 97 7 17 1 02 07 047 16 7 2340924',), ('1,797 1797 797 97 7 18 1 02 07 047 16 5 2377448',), ('1,897 1897 897 97 7 19 1 02 07 047 16 3 2413972',), ('1,997 1997 997 97 7 20 1 02 07 047 16 1 2450496',), ('2,097 2097 097 97 7 21 1 02 07 047 16 7 2487021',), ('1,996 1996 996 96 6 20 1 02 09 059 28 4 2450142',), ('1,996 1996 996 96 6 20 1 02 09 060 29 5 2450143',), ('1,996 1996 996 96 6 20 1 03 09 061 01 6 2450144',), ('1,996 1996 996 96 6 20 4 12 53 365 30 2 2450448',), ('1,996 1996 996 96 6 20 4 12 53 366 31 3 2450449',), ('1,997 1997 997 97 7 20 1 01 01 001 01 4 2450450',), ('1,997 1997 997 97 7 20 1 02 09 059 28 6 2450508',), ('1,997 1997 997 97 7 20 1 03 09 060 01 7 2450509',), ('1,997 1997 997 97 7 20 4 12 52 364 30 3 2450813',), ('1,997 1997 997 97 7 20 4 12 53 365 31 4 2450814',), ('1,999 1999 999 99 9 20 4 12 53 365 31 6 2451544',), ('2,000 2000 000 00 0 20 1 01 01 001 01 7 2451545',), ('2,000 2000 000 00 0 20 4 12 53 366 31 1 2451910',), ('2,001 2001 001 01 1 21 1 01 01 001 01 2 2451911',)]"
postgresql,postgresql,"SELECT to_char(d1, 'FMY,YYY FMYYYY FMYYY FMYY FMY FMCC FMQ FMMM FMWW FMDDD FMDD FMD FMJ')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('1,970 1970 970 70 0 20 1 1 1 1 1 5 2440588',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 1 1 2 2 5 2450451',), ('1,997 1997 997 97 7 20 1 1 1 2 2 5 2450451',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 2 6 24 162 11 4 2450611',), ('2,001 2001 1 1 1 21 3 9 38 265 22 7 2452175',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('2,000 2000 0 0 0 20 1 3 11 75 15 4 2451619',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 3 7 28 191 10 5 2450640',), ('1,997 1997 997 97 7 20 2 6 24 162 11 4 2450611',), ('1,997 1997 997 97 7 20 1 2 6 41 10 2 2450490',), ('1,997 1997 997 97 7 20 1 2 6 42 11 3 2450491',), ('1,997 1997 997 97 7 20 1 2 7 43 12 4 2450492',), ('1,997 1997 997 97 7 20 1 2 7 44 13 5 2450493',), ('1,997 1997 997 97 7 20 1 2 7 45 14 6 2450494',), ('1,997 1997 997 97 7 20 1 2 7 46 15 7 2450495',), ('1,997 1997 997 97 7 20 1 2 7 47 16 1 2450496',), ('0,097 97 97 97 7 -1 1 2 7 47 16 3 1686042',), ('0,097 97 97 97 7 1 1 2 7 47 16 7 1756536',), ('0,597 597 597 97 7 6 1 2 7 47 16 5 1939157',), ('1,097 1097 97 97 7 11 1 2 7 47 16 3 2121778',), ('1,697 1697 697 97 7 17 1 2 7 47 16 7 2340924',), ('1,797 1797 797 97 7 18 1 2 7 47 16 5 2377448',), ('1,897 1897 897 97 7 19 1 2 7 47 16 3 2413972',), ('1,997 1997 997 97 7 20 1 2 7 47 16 1 2450496',), ('2,097 2097 97 97 7 21 1 2 7 47 16 7 2487021',), ('1,996 1996 996 96 6 20 1 2 9 59 28 4 2450142',), ('1,996 1996 996 96 6 20 1 2 9 60 29 5 2450143',), ('1,996 1996 996 96 6 20 1 3 9 61 1 6 2450144',), ('1,996 1996 996 96 6 20 4 12 53 365 30 2 2450448',), ('1,996 1996 996 96 6 20 4 12 53 366 31 3 2450449',), ('1,997 1997 997 97 7 20 1 1 1 1 1 4 2450450',), ('1,997 1997 997 97 7 20 1 2 9 59 28 6 2450508',), ('1,997 1997 997 97 7 20 1 3 9 60 1 7 2450509',), ('1,997 1997 997 97 7 20 4 12 52 364 30 3 2450813',), ('1,997 1997 997 97 7 20 4 12 53 365 31 4 2450814',), ('1,999 1999 999 99 9 20 4 12 53 365 31 6 2451544',), ('2,000 2000 0 0 0 20 1 1 1 1 1 7 2451545',), ('2,000 2000 0 0 0 20 4 12 53 366 31 1 2451910',), ('2,001 2001 1 1 1 21 1 1 1 1 1 2 2451911',)]"
postgresql,postgresql,"SELECT to_char(d1, 'HH HH12 HH24 MI SS SSSS')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('01 01 01 00 00 3600',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('02 02 02 32 02 9122',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('12 12 00 00 00 0',), ('03 03 03 04 05 11045',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('06 06 18 19 20 65960',), ('05 05 17 14 01 62041',), ('01 01 13 14 02 47642',), ('11 11 11 14 03 40443',), ('12 12 12 14 04 44044',), ('10 10 10 14 05 36845',), ('02 02 02 32 01 9121',), ('05 05 17 32 01 63121',), ('05 05 17 32 00 63120',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('02 02 02 32 01 9121',), ('06 06 18 32 01 66721',), ('06 06 18 32 01 66721',), ('06 06 18 32 01 66721',), ('11 11 23 32 01 84721',), ('11 11 23 32 01 84721',), ('03 03 03 32 01 12721',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',), ('05 05 17 32 01 63121',)]"
postgresql,postgresql,"SELECT to_char(d1, E'""HH:MI:SS is"" HH:MI:SS ""\\""text between quote marks\\""""')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('HH:MI:SS is 01:00:00 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:02 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 12:00:00 ""text between quote marks""',), ('HH:MI:SS is 03:04:05 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 06:19:20 ""text between quote marks""',), ('HH:MI:SS is 05:14:01 ""text between quote marks""',), ('HH:MI:SS is 01:14:02 ""text between quote marks""',), ('HH:MI:SS is 11:14:03 ""text between quote marks""',), ('HH:MI:SS is 12:14:04 ""text between quote marks""',), ('HH:MI:SS is 10:14:05 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:00 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 02:32:01 ""text between quote marks""',), ('HH:MI:SS is 06:32:01 ""text between quote marks""',), ('HH:MI:SS is 06:32:01 ""text between quote marks""',), ('HH:MI:SS is 06:32:01 ""text between quote marks""',), ('HH:MI:SS is 11:32:01 ""text between quote marks""',), ('HH:MI:SS is 11:32:01 ""text between quote marks""',), ('HH:MI:SS is 03:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',), ('HH:MI:SS is 05:32:01 ""text between quote marks""',)]"
postgresql,postgresql,"SELECT to_char(d1, 'YYYYTH YYYYth Jth')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('1970TH 1970th 2440588th',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450451st',), ('1997TH 1997th 2450451st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450611th',), ('2001ST 2001st 2452175th',), ('2000TH 2000th 2451619th',), ('2000TH 2000th 2451619th',), ('2000TH 2000th 2451619th',), ('2000TH 2000th 2451619th',), ('2000TH 2000th 2451619th',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450640th',), ('1997TH 1997th 2450611th',), ('1997TH 1997th 2450490th',), ('1997TH 1997th 2450491st',), ('1997TH 1997th 2450492nd',), ('1997TH 1997th 2450493rd',), ('1997TH 1997th 2450494th',), ('1997TH 1997th 2450495th',), ('1997TH 1997th 2450496th',), ('0097TH 0097th 1686042nd',), ('0097TH 0097th 1756536th',), ('0597TH 0597th 1939157th',), ('1097TH 1097th 2121778th',), ('1697TH 1697th 2340924th',), ('1797TH 1797th 2377448th',), ('1897TH 1897th 2413972nd',), ('1997TH 1997th 2450496th',), ('2097TH 2097th 2487021st',), ('1996TH 1996th 2450142nd',), ('1996TH 1996th 2450143rd',), ('1996TH 1996th 2450144th',), ('1996TH 1996th 2450448th',), ('1996TH 1996th 2450449th',), ('1997TH 1997th 2450450th',), ('1997TH 1997th 2450508th',), ('1997TH 1997th 2450509th',), ('1997TH 1997th 2450813th',), ('1997TH 1997th 2450814th',), ('1999TH 1999th 2451544th',), ('2000TH 2000th 2451545th',), ('2000TH 2000th 2451910th',), ('2001ST 2001st 2451911th',)]"
postgresql,postgresql,"SELECT to_char(d1, 'YYYY A.D. YYYY a.d. YYYY bc HH:MI:SS P.M. HH:MI:SS p.m. HH:MI:SS pm')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('1970 A.D. 1970 a.d. 1970 ad 01:00:00 A.M. 01:00:00 a.m. 01:00:00 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:02 A.M. 02:32:02 a.m. 02:32:02 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 12:00:00 A.M. 12:00:00 a.m. 12:00:00 am',), ('1997 A.D. 1997 a.d. 1997 ad 03:04:05 A.M. 03:04:05 a.m. 03:04:05 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('2001 A.D. 2001 a.d. 2001 ad 06:19:20 P.M. 06:19:20 p.m. 06:19:20 pm',), ('2000 A.D. 2000 a.d. 2000 ad 05:14:01 P.M. 05:14:01 p.m. 05:14:01 pm',), ('2000 A.D. 2000 a.d. 2000 ad 01:14:02 P.M. 01:14:02 p.m. 01:14:02 pm',), ('2000 A.D. 2000 a.d. 2000 ad 11:14:03 A.M. 11:14:03 a.m. 11:14:03 am',), ('2000 A.D. 2000 a.d. 2000 ad 12:14:04 P.M. 12:14:04 p.m. 12:14:04 pm',), ('2000 A.D. 2000 a.d. 2000 ad 10:14:05 A.M. 10:14:05 a.m. 10:14:05 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:00 P.M. 05:32:00 p.m. 05:32:00 pm',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 02:32:01 A.M. 02:32:01 a.m. 02:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 06:32:01 P.M. 06:32:01 p.m. 06:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 06:32:01 P.M. 06:32:01 p.m. 06:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 06:32:01 P.M. 06:32:01 p.m. 06:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 11:32:01 P.M. 11:32:01 p.m. 11:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 11:32:01 P.M. 11:32:01 p.m. 11:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 03:32:01 A.M. 03:32:01 a.m. 03:32:01 am',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('0097 B.C. 0097 b.c. 0097 bc 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('0097 A.D. 0097 a.d. 0097 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('0597 A.D. 0597 a.d. 0597 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1097 A.D. 1097 a.d. 1097 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1697 A.D. 1697 a.d. 1697 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1797 A.D. 1797 a.d. 1797 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1897 A.D. 1897 a.d. 1897 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('2097 A.D. 2097 a.d. 2097 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1996 A.D. 1996 a.d. 1996 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1997 A.D. 1997 a.d. 1997 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('1999 A.D. 1999 a.d. 1999 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('2000 A.D. 2000 a.d. 2000 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('2000 A.D. 2000 a.d. 2000 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',), ('2001 A.D. 2001 a.d. 2001 ad 05:32:01 P.M. 05:32:01 p.m. 05:32:01 pm',)]"
postgresql,postgresql,"SELECT to_char(d1, 'IYYY IYY IY I IW IDDD ID')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('1970 970 70 0 01 004 4',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 01 004 4',), ('1997 997 97 7 01 004 4',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 24 164 3',), ('2001 001 01 1 38 265 6',), ('2000 000 00 0 11 073 3',), ('2000 000 00 0 11 073 3',), ('2000 000 00 0 11 073 3',), ('2000 000 00 0 11 073 3',), ('2000 000 00 0 11 073 3',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 28 193 4',), ('1997 997 97 7 24 164 3',), ('1997 997 97 7 07 043 1',), ('1997 997 97 7 07 044 2',), ('1997 997 97 7 07 045 3',), ('1997 997 97 7 07 046 4',), ('1997 997 97 7 07 047 5',), ('1997 997 97 7 07 048 6',), ('1997 997 97 7 07 049 7',), ('0097 097 97 7 07 044 2',), ('0097 097 97 7 07 048 6',), ('0597 597 97 7 07 046 4',), ('1097 097 97 7 07 044 2',), ('1697 697 97 7 07 048 6',), ('1797 797 97 7 07 046 4',), ('1897 897 97 7 07 044 2',), ('1997 997 97 7 07 049 7',), ('2097 097 97 7 07 048 6',), ('1996 996 96 6 09 059 3',), ('1996 996 96 6 09 060 4',), ('1996 996 96 6 09 061 5',), ('1997 997 97 7 01 001 1',), ('1997 997 97 7 01 002 2',), ('1997 997 97 7 01 003 3',), ('1997 997 97 7 09 061 5',), ('1997 997 97 7 09 062 6',), ('1998 998 98 8 01 002 2',), ('1998 998 98 8 01 003 3',), ('1999 999 99 9 52 362 5',), ('1999 999 99 9 52 363 6',), ('2000 000 00 0 52 364 7',), ('2001 001 01 1 01 001 1',)]"
postgresql,postgresql,"SELECT to_char(d1, 'FMIYYY FMIYY FMIY FMI FMIW FMIDDD FMID')    FROM TIMESTAMPTZ_TBL",timestamptz.sql,SAME,,"[(None,), (None,), ('1970 970 70 0 1 4 4',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 1 4 4',), ('1997 997 97 7 1 4 4',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 24 164 3',), ('2001 1 1 1 38 265 6',), ('2000 0 0 0 11 73 3',), ('2000 0 0 0 11 73 3',), ('2000 0 0 0 11 73 3',), ('2000 0 0 0 11 73 3',), ('2000 0 0 0 11 73 3',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 28 193 4',), ('1997 997 97 7 24 164 3',), ('1997 997 97 7 7 43 1',), ('1997 997 97 7 7 44 2',), ('1997 997 97 7 7 45 3',), ('1997 997 97 7 7 46 4',), ('1997 997 97 7 7 47 5',), ('1997 997 97 7 7 48 6',), ('1997 997 97 7 7 49 7',), ('97 97 97 7 7 44 2',), ('97 97 97 7 7 48 6',), ('597 597 97 7 7 46 4',), ('1097 97 97 7 7 44 2',), ('1697 697 97 7 7 48 6',), ('1797 797 97 7 7 46 4',), ('1897 897 97 7 7 44 2',), ('1997 997 97 7 7 49 7',), ('2097 97 97 7 7 48 6',), ('1996 996 96 6 9 59 3',), ('1996 996 96 6 9 60 4',), ('1996 996 96 6 9 61 5',), ('1997 997 97 7 1 1 1',), ('1997 997 97 7 1 2 2',), ('1997 997 97 7 1 3 3',), ('1997 997 97 7 9 61 5',), ('1997 997 97 7 9 62 6',), ('1998 998 98 8 1 2 2',), ('1998 998 98 8 1 3 3',), ('1999 999 99 9 52 362 5',), ('1999 999 99 9 52 363 6',), ('2000 0 0 0 52 364 7',), ('2001 1 1 1 1 1 1',)]"
postgresql,postgresql,"SELECT to_char(d, 'FF1 FF2 FF3 FF4 FF5 FF6  ff1 ff2 ff3 ff4 ff5 ff6  MS US')    FROM (VALUES        ('2018-11-02 12:34:56'::timestamptz),        ('2018-11-02 12:34:56.78'),        ('2018-11-02 12:34:56.78901'),        ('2018-11-02 12:34:56.78901234')    ) d(d)",timestamptz.sql,SAME,,"[('0 00 000 0000 00000 000000  0 00 000 0000 00000 000000  000 000000',), ('7 78 780 7800 78000 780000  7 78 780 7800 78000 780000  780 780000',), ('7 78 789 7890 78901 789010  7 78 789 7890 78901 789010  789 789010',), ('7 78 789 7890 78901 789012  7 78 789 7890 78901 789012  789 789012',)]"
postgresql,postgresql,SET timezone = '00:00',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'OF') as ""OF"", to_char(now(), 'TZH:TZM') as ""TZH:TZM""",timestamptz.sql,SAME,,"[('+00', '+00:00')]"
postgresql,postgresql,SET timezone = '+02:00',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'OF') as ""OF"", to_char(now(), 'TZH:TZM') as ""TZH:TZM""",timestamptz.sql,SAME,,"[('-02', '-02:00')]"
postgresql,postgresql,SET timezone = '-13:00',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'OF') as ""OF"", to_char(now(), 'TZH:TZM') as ""TZH:TZM""",timestamptz.sql,SAME,,"[('+13', '+13:00')]"
postgresql,postgresql,SET timezone = '-00:30',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'OF') as ""OF"", to_char(now(), 'TZH:TZM') as ""TZH:TZM""",timestamptz.sql,SAME,,"[('+00:30', '+00:30')]"
postgresql,postgresql,SET timezone = '00:30',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'OF') as ""OF"", to_char(now(), 'TZH:TZM') as ""TZH:TZM""",timestamptz.sql,SAME,,"[('-00:30', '-00:30')]"
postgresql,postgresql,SET timezone = '-04:30',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'OF') as ""OF"", to_char(now(), 'TZH:TZM') as ""TZH:TZM""",timestamptz.sql,SAME,,"[('+04:30', '+04:30')]"
postgresql,postgresql,SET timezone = '04:30',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'OF') as ""OF"", to_char(now(), 'TZH:TZM') as ""TZH:TZM""",timestamptz.sql,SAME,,"[('-04:30', '-04:30')]"
postgresql,postgresql,SET timezone = '-04:15',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'OF') as ""OF"", to_char(now(), 'TZH:TZM') as ""TZH:TZM""",timestamptz.sql,SAME,,"[('+04:15', '+04:15')]"
postgresql,postgresql,SET timezone = '04:15',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'OF') as ""OF"", to_char(now(), 'TZH:TZM') as ""TZH:TZM""",timestamptz.sql,SAME,,"[('-04:15', '-04:15')]"
postgresql,postgresql,RESET timezone,timestamptz.sql,SAME,,[]
postgresql,postgresql,SET timezone = '00:00',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'of') as ""Of"", to_char(now(), 'tzh:tzm') as ""tzh:tzm""",timestamptz.sql,SAME,,"[('+00', '+00:00')]"
postgresql,postgresql,SET timezone = '+02:00',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'of') as ""of"", to_char(now(), 'tzh:tzm') as ""tzh:tzm""",timestamptz.sql,SAME,,"[('-02', '-02:00')]"
postgresql,postgresql,SET timezone = '-13:00',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'of') as ""of"", to_char(now(), 'tzh:tzm') as ""tzh:tzm""",timestamptz.sql,SAME,,"[('+13', '+13:00')]"
postgresql,postgresql,SET timezone = '-00:30',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'of') as ""of"", to_char(now(), 'tzh:tzm') as ""tzh:tzm""",timestamptz.sql,SAME,,"[('+00:30', '+00:30')]"
postgresql,postgresql,SET timezone = '00:30',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'of') as ""of"", to_char(now(), 'tzh:tzm') as ""tzh:tzm""",timestamptz.sql,SAME,,"[('-00:30', '-00:30')]"
postgresql,postgresql,SET timezone = '-04:30',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'of') as ""of"", to_char(now(), 'tzh:tzm') as ""tzh:tzm""",timestamptz.sql,SAME,,"[('+04:30', '+04:30')]"
postgresql,postgresql,SET timezone = '04:30',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'of') as ""of"", to_char(now(), 'tzh:tzm') as ""tzh:tzm""",timestamptz.sql,SAME,,"[('-04:30', '-04:30')]"
postgresql,postgresql,SET timezone = '-04:15',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'of') as ""of"", to_char(now(), 'tzh:tzm') as ""tzh:tzm""",timestamptz.sql,SAME,,"[('+04:15', '+04:15')]"
postgresql,postgresql,SET timezone = '04:15',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT to_char(now(), 'of') as ""of"", to_char(now(), 'tzh:tzm') as ""tzh:tzm""",timestamptz.sql,SAME,,"[('-04:15', '-04:15')]"
postgresql,postgresql,RESET timezone,timestamptz.sql,SAME,,[]
postgresql,postgresql,set TimeZone to 'America/New_York',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT make_timestamptz(1973, 07, 15, 08, 15, 55.33)",timestamptz.sql,SAME,,"[(datetime.datetime(1973, 7, 15, 8, 15, 55, 330000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),)]"
postgresql,postgresql,"SELECT make_timestamptz(1973, 07, 15, 08, 15, 55.33, '+2')",timestamptz.sql,SAME,,"[(datetime.datetime(1973, 7, 15, 2, 15, 55, 330000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),)]"
postgresql,postgresql,"SELECT make_timestamptz(1973, 07, 15, 08, 15, 55.33, '-2')",timestamptz.sql,SAME,,"[(datetime.datetime(1973, 7, 15, 6, 15, 55, 330000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),)]"
postgresql,postgresql,"WITH tzs (tz) AS (VALUES     ('+1'), ('+1:'), ('+1:0'), ('+100'), ('+1:00'), ('+01:00'),     ('+10'), ('+1000'), ('+10:'), ('+10:0'), ('+10:00'), ('+10:00:'),     ('+10:00:1'), ('+10:00:01'),     ('+10:00:10'))      SELECT make_timestamptz(2010, 2, 27, 3, 45, 00, tz), tz FROM tzs",timestamptz.sql,SAME,,"[(datetime.datetime(2010, 2, 26, 21, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+1'), (datetime.datetime(2010, 2, 26, 21, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+1:'), (datetime.datetime(2010, 2, 26, 21, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+1:0'), (datetime.datetime(2010, 2, 26, 21, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+100'), (datetime.datetime(2010, 2, 26, 21, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+1:00'), (datetime.datetime(2010, 2, 26, 21, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+01:00'), (datetime.datetime(2010, 2, 26, 12, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+10'), (datetime.datetime(2010, 2, 26, 12, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+1000'), (datetime.datetime(2010, 2, 26, 12, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+10:'), (datetime.datetime(2010, 2, 26, 12, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+10:0'), (datetime.datetime(2010, 2, 26, 12, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+10:00'), (datetime.datetime(2010, 2, 26, 12, 45, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+10:00:'), (datetime.datetime(2010, 2, 26, 12, 44, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+10:00:1'), (datetime.datetime(2010, 2, 26, 12, 44, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+10:00:01'), (datetime.datetime(2010, 2, 26, 12, 44, 50, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), '+10:00:10')]"
postgresql,postgresql,"SELECT make_timestamptz(1973, 07, 15, 08, 15, 55.33, '+2') = '1973-07-15 08:15:55.33+02'::timestamptz",timestamptz.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT make_timestamptz(2014, 12, 10, 0, 0, 0, 'Europe/Prague') = timestamptz '2014-12-10 00:00:00 Europe/Prague'",timestamptz.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT make_timestamptz(2014, 12, 10, 0, 0, 0, 'Europe/Prague') AT TIME ZONE 'UTC'",timestamptz.sql,SAME,,"[(datetime.datetime(2014, 12, 9, 23, 0),)]"
postgresql,postgresql,"SELECT make_timestamptz(1846, 12, 10, 0, 0, 0, 'Asia/Manila') AT TIME ZONE 'UTC'",timestamptz.sql,SAME,,"[(datetime.datetime(1846, 12, 9, 15, 56),)]"
postgresql,postgresql,"SELECT make_timestamptz(1881, 12, 10, 0, 0, 0, 'Europe/Paris') AT TIME ZONE 'UTC'",timestamptz.sql,SAME,,"[(datetime.datetime(1881, 12, 9, 23, 50, 39),)]"
postgresql,postgresql,"SELECT make_timestamptz(2008, 12, 10, 10, 10, 10, 'EST')",timestamptz.sql,SAME,,"[(datetime.datetime(2008, 12, 10, 10, 10, 10, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))),)]"
postgresql,postgresql,"SELECT make_timestamptz(2008, 12, 10, 10, 10, 10, 'EDT')",timestamptz.sql,SAME,,"[(datetime.datetime(2008, 12, 10, 9, 10, 10, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))),)]"
postgresql,postgresql,"SELECT make_timestamptz(2014, 12, 10, 10, 10, 10, 'PST8PDT')",timestamptz.sql,SAME,,"[(datetime.datetime(2014, 12, 10, 13, 10, 10, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))),)]"
postgresql,postgresql,RESET TimeZone,timestamptz.sql,SAME,,[]
postgresql,postgresql,"select * from generate_series('2020-01-01 00:00'::timestamptz,                               '2020-01-02 03:00'::timestamptz,                               '1 hour'::interval)",timestamptz.sql,SAME,,"[(datetime.datetime(2020, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 1, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 2, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 3, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 4, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 5, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 6, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 7, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 8, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 9, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 10, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 11, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 12, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 13, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 14, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 15, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 16, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 17, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 18, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 19, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 20, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 21, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 22, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 1, 23, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 2, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 2, 1, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 2, 2, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2020, 1, 2, 3, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,"select generate_series('2022-01-01 00:00'::timestamptz,                        'infinity'::timestamptz,                        '1 month'::interval) limit 10",timestamptz.sql,SAME,,"[(datetime.datetime(2022, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2022, 2, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2022, 3, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),), (datetime.datetime(2022, 4, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2022, 5, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2022, 6, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2022, 7, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2022, 8, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2022, 9, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),), (datetime.datetime(2022, 10, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200))),)]"
postgresql,postgresql,SET TimeZone to 'UTC',timestamptz.sql,SAME,,[]
postgresql,postgresql,"SELECT date_add('2022-10-30 00:00:00+01'::timestamptz,                 '1 day'::interval)",timestamptz.sql,SAME,,"[(datetime.datetime(2022, 10, 30, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,"SELECT date_add('2021-10-31 00:00:00+02'::timestamptz,                 '1 day'::interval,                 'Europe/Warsaw')",timestamptz.sql,SAME,,"[(datetime.datetime(2021, 10, 31, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,"SELECT date_subtract('2022-10-30 00:00:00+01'::timestamptz,                      '1 day'::interval)",timestamptz.sql,SAME,,"[(datetime.datetime(2022, 10, 28, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,"SELECT date_subtract('2021-10-31 00:00:00+02'::timestamptz,                      '1 day'::interval,                      'Europe/Warsaw')",timestamptz.sql,SAME,,"[(datetime.datetime(2021, 10, 29, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,"SELECT * FROM generate_series('2021-12-31 23:00:00+00'::timestamptz,                               '2020-12-31 23:00:00+00'::timestamptz,                               '-1 month'::interval,                               'Europe/Warsaw')",timestamptz.sql,SAME,,"[(datetime.datetime(2021, 12, 31, 23, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 11, 30, 23, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 10, 31, 23, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 9, 30, 22, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 8, 31, 22, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 7, 31, 22, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 6, 30, 22, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 5, 31, 22, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 4, 30, 22, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 3, 31, 22, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 2, 28, 23, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2021, 1, 31, 23, 0, tzinfo=datetime.timezone.utc),), (datetime.datetime(2020, 12, 31, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,RESET TimeZone,timestamptz.sql,SAME,,[]
postgresql,postgresql,SET TimeZone to 'UTC',timestamptz.sql,SAME,,[]
postgresql,postgresql,SELECT '2011-03-27 00:00:00 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 21, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 01:00:00 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 01:59:59 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:00:00 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:00:01 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:59:59 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 03:00:00 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 03:00:01 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 04:00:00 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 0, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 00:00:00 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 21, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 01:00:00 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 01:59:59 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:00:00 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:00:01 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:59:59 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 03:00:00 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 03:00:01 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 04:00:00 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 0, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 00:00:00 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 20, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 00:59:59 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 20, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 01:00:00 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 01:00:01 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 22, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 02:00:00 Europe/Moscow'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 00:00:00 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 20, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 00:59:59 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 20, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 01:00:00 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 01:00:01 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 22, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 02:00:00 MSK'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 00:00:00'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 21, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 01:00:00'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 01:59:59'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:00:00'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:00:01'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:59:59'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 03:00:00'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 03:00:01'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 04:00:00'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 0, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 00:00:00'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 21, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 01:00:00'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 01:59:59'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:00:00'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:00:01'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 02:59:59'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 22, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 03:00:00'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 03:00:01'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 26, 23, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2011-03-27 04:00:00'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 0, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 00:00:00'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 20, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 00:59:59'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 20, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 01:00:00'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 01:00:01'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 22, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 02:00:00'::timestamp AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 00:00:00'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 20, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 00:59:59'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 20, 59, 59, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 01:00:00'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 01:00:01'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 22, 0, 1, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT '2014-10-26 02:00:00'::timestamp AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 23, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,"SELECT make_timestamptz(2014, 10, 26, 0, 0, 0, 'MSK')",timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 20, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,"SELECT make_timestamptz(2014, 10, 26, 1, 0, 0, 'MSK')",timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 25, 22, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT to_timestamp(         0),timestamptz.sql,SAME,,"[(datetime.datetime(1970, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT to_timestamp( 946684800),timestamptz.sql,SAME,,"[(datetime.datetime(2000, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT to_timestamp(1262349296.7890123),timestamptz.sql,SAME,,"[(datetime.datetime(2010, 1, 1, 12, 34, 56, 789012, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT to_timestamp(' Infinity'::float),timestamptz.sql,SAME,,"[(datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SELECT to_timestamp('-Infinity'::float),timestamptz.sql,SAME,,"[(datetime.datetime(1, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),)]"
postgresql,postgresql,SET TimeZone to 'Europe/Moscow',timestamptz.sql,SAME,,[]
postgresql,postgresql,SELECT '2011-03-26 21:00:00 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=10800))),)]"
postgresql,postgresql,SELECT '2011-03-26 22:00:00 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 1, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=10800))),)]"
postgresql,postgresql,SELECT '2011-03-26 22:59:59 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 1, 59, 59, tzinfo=datetime.timezone(datetime.timedelta(seconds=10800))),)]"
postgresql,postgresql,SELECT '2011-03-26 23:00:00 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 3, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400))),)]"
postgresql,postgresql,SELECT '2011-03-26 23:00:01 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 3, 0, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400))),)]"
postgresql,postgresql,SELECT '2011-03-26 23:59:59 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 3, 59, 59, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400))),)]"
postgresql,postgresql,SELECT '2011-03-27 00:00:00 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 4, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400))),)]"
postgresql,postgresql,SELECT '2014-10-25 21:00:00 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400))),)]"
postgresql,postgresql,SELECT '2014-10-25 21:59:59 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 59, 59, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400))),)]"
postgresql,postgresql,SELECT '2014-10-25 22:00:00 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=10800))),)]"
postgresql,postgresql,SELECT '2014-10-25 22:00:01 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 0, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=10800))),)]"
postgresql,postgresql,SELECT '2014-10-25 23:00:00 UTC'::timestamptz,timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 2, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=10800))),)]"
postgresql,postgresql,RESET TimeZone,timestamptz.sql,SAME,,[]
postgresql,postgresql,SELECT '2011-03-26 21:00:00 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 0, 0),)]"
postgresql,postgresql,SELECT '2011-03-26 22:00:00 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 1, 0),)]"
postgresql,postgresql,SELECT '2011-03-26 22:59:59 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 1, 59, 59),)]"
postgresql,postgresql,SELECT '2011-03-26 23:00:00 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 3, 0),)]"
postgresql,postgresql,SELECT '2011-03-26 23:00:01 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 3, 0, 1),)]"
postgresql,postgresql,SELECT '2011-03-26 23:59:59 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 3, 59, 59),)]"
postgresql,postgresql,SELECT '2011-03-27 00:00:00 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 4, 0),)]"
postgresql,postgresql,SELECT '2014-10-25 21:00:00 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 0),)]"
postgresql,postgresql,SELECT '2014-10-25 21:59:59 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 59, 59),)]"
postgresql,postgresql,SELECT '2014-10-25 22:00:00 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 0),)]"
postgresql,postgresql,SELECT '2014-10-25 22:00:01 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 0, 1),)]"
postgresql,postgresql,SELECT '2014-10-25 23:00:00 UTC'::timestamptz AT TIME ZONE 'Europe/Moscow',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 2, 0),)]"
postgresql,postgresql,SELECT '2011-03-26 21:00:00 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 0, 0),)]"
postgresql,postgresql,SELECT '2011-03-26 22:00:00 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 1, 0),)]"
postgresql,postgresql,SELECT '2011-03-26 22:59:59 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 1, 59, 59),)]"
postgresql,postgresql,SELECT '2011-03-26 23:00:00 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 3, 0),)]"
postgresql,postgresql,SELECT '2011-03-26 23:00:01 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 3, 0, 1),)]"
postgresql,postgresql,SELECT '2011-03-26 23:59:59 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 3, 59, 59),)]"
postgresql,postgresql,SELECT '2011-03-27 00:00:00 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2011, 3, 27, 4, 0),)]"
postgresql,postgresql,SELECT '2014-10-25 21:00:00 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 0),)]"
postgresql,postgresql,SELECT '2014-10-25 21:59:59 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 59, 59),)]"
postgresql,postgresql,SELECT '2014-10-25 22:00:00 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 0),)]"
postgresql,postgresql,SELECT '2014-10-25 22:00:01 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 1, 0, 1),)]"
postgresql,postgresql,SELECT '2014-10-25 23:00:00 UTC'::timestamptz AT TIME ZONE 'MSK',timestamptz.sql,SAME,,"[(datetime.datetime(2014, 10, 26, 2, 0),)]"
postgresql,postgresql,BEGIN,timestamptz.sql,SAME,,[]
postgresql,postgresql,SET LOCAL TIME ZONE 'Europe/Paris',timestamptz.sql,SAME,,[]
postgresql,postgresql,COMMIT,timestamptz.sql,SAME,,[]
postgresql,postgresql,create temp table tmptz (f1 timestamptz primary key),timestamptz.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select * from tmptz where f1 at time zone 'utc' = '2017-01-18 00:00',timestamptz.sql,SAME,,"[('Seq Scan on tmptz',), (""  Filter: ((f1 AT TIME ZONE 'utc'::text) = '2017-01-18 00:00:00'::timestamp without time zone)"",)]"
postgresql,postgresql,select * from tmptz where f1 at time zone 'utc' = '2017-01-18 00:00',timestamptz.sql,SAME,,"[(datetime.datetime(2017, 1, 18, 1, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),)]"
postgresql,postgresql,SELECT age(timestamptz 'infinity'),timestamptz.sql,SAME,,"[(datetime.timedelta(days=-106672206, seconds=68345, microseconds=224193),)]"
postgresql,postgresql,"SELECT age(timestamptz 'infinity', timestamptz 'infinity')",timestamptz.sql,SAME,,"[(datetime.timedelta(0),)]"
postgresql,postgresql,"SELECT f1 AS ""Time TZ"" FROM TIMETZ_TBL",timetz.sql,SAME,,"[(datetime.time(0, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(1, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(2, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(7, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),), (datetime.time(8, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),), (datetime.time(11, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),)]"
postgresql,postgresql,"SELECT f1 AS ""Three"" FROM TIMETZ_TBL WHERE f1 < '05:06:07-07'",timetz.sql,SAME,,"[(datetime.time(0, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(1, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(2, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]"
postgresql,postgresql,"SELECT f1 AS ""Seven"" FROM TIMETZ_TBL WHERE f1 > '05:06:07-07'",timetz.sql,SAME,,"[(datetime.time(7, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),), (datetime.time(8, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),), (datetime.time(11, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),)]"
postgresql,postgresql,"SELECT f1 AS ""None"" FROM TIMETZ_TBL WHERE f1 < '00:00-07'",timetz.sql,SAME,,[]
postgresql,postgresql,"SELECT f1 AS ""Ten"" FROM TIMETZ_TBL WHERE f1 >= '00:00-07'",timetz.sql,SAME,,"[(datetime.time(0, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(1, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(2, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(7, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),), (datetime.time(8, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),), (datetime.time(11, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),)]"
postgresql,postgresql,SELECT '23:59:59.999999 PDT'::timetz,timetz.sql,SAME,,"[(datetime.time(23, 59, 59, 999999, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]"
postgresql,postgresql,SELECT '23:59:59.9999999 PDT'::timetz,timetz.sql,SAME,,"[(datetime.time(0, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]"
postgresql,postgresql,SELECT '23:59:60 PDT'::timetz,timetz.sql,SAME,,"[(datetime.time(0, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]"
postgresql,postgresql,SELECT '24:00:00 PDT'::timetz,timetz.sql,SAME,,"[(datetime.time(0, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]"
postgresql,postgresql,"SELECT pg_input_is_valid('12:00:00 PDT', 'timetz')",timetz.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('25:00:00 PDT', 'timetz')",timetz.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('15:36:39 America/New_York', 'timetz')",timetz.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('25:00:00 PDT', 'timetz')",timetz.sql,SAME,,"[('date/time field value out of range: ""25:00:00 PDT""', None, None, '22008')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('15:36:39 America/New_York', 'timetz')",timetz.sql,SAME,,"[('invalid input syntax for type time with time zone: ""15:36:39 America/New_York""', None, None, '22007')]"
postgresql,postgresql,SELECT EXTRACT(MICROSECOND FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04'),timetz.sql,SAME,,"[(Decimal('25575401'),)]"
postgresql,postgresql,SELECT EXTRACT(MILLISECOND FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04'),timetz.sql,SAME,,"[(Decimal('25575.401'),)]"
postgresql,postgresql,SELECT EXTRACT(SECOND      FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04'),timetz.sql,SAME,,"[(Decimal('25.575401'),)]"
postgresql,postgresql,SELECT EXTRACT(MINUTE      FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04'),timetz.sql,SAME,,"[(Decimal('30'),)]"
postgresql,postgresql,SELECT EXTRACT(HOUR        FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04'),timetz.sql,SAME,,"[(Decimal('13'),)]"
postgresql,postgresql,SELECT EXTRACT(TIMEZONE    FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04:30'),timetz.sql,SAME,,"[(Decimal('-16200'),)]"
postgresql,postgresql,SELECT EXTRACT(TIMEZONE_HOUR   FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04:30'),timetz.sql,SAME,,"[(Decimal('-4'),)]"
postgresql,postgresql,SELECT EXTRACT(TIMEZONE_MINUTE FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04:30'),timetz.sql,SAME,,"[(Decimal('-30'),)]"
postgresql,postgresql,SELECT EXTRACT(EPOCH       FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04'),timetz.sql,SAME,,"[(Decimal('63025.575401'),)]"
postgresql,postgresql,"SELECT date_part('microsecond', TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')",timetz.sql,SAME,,"[(25575401.0,)]"
postgresql,postgresql,"SELECT date_part('millisecond', TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')",timetz.sql,SAME,,"[(25575.401,)]"
postgresql,postgresql,"SELECT date_part('second',      TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')",timetz.sql,SAME,,"[(25.575401,)]"
postgresql,postgresql,"SELECT date_part('epoch',       TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')",timetz.sql,SAME,,"[(63025.575401,)]"
postgresql,postgresql,BEGIN,timetz.sql,SAME,,[]
postgresql,postgresql,SET LOCAL TimeZone TO 'UTC',timetz.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,timetz.sql,SAME,,[]
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,END,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT a FROM xacttest WHERE a > 100,transactions.sql,SAME,,"[(777,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,DELETE FROM xacttest,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM xacttest,transactions.sql,SAME,,[]
postgresql,postgresql,ABORT,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT oid FROM pg_class WHERE relname = 'disappear',transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM xacttest,transactions.sql,SAME,,"[(56, 7.8), (100, 99.097), (0, 0.09561), (42, 324.78), (777, 777.777)]"
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM xacttest,transactions.sql,SAME,,"[(5,)]"
postgresql,postgresql,END,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM xacttest,transactions.sql,SAME,,"[(5,)]"
postgresql,postgresql,END,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION DEFERRABLE,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT COUNT(*) FROM xacttest,transactions.sql,SAME,,"[(5,)]"
postgresql,postgresql,END,transactions.sql,SAME,,[]
postgresql,postgresql,CREATE TEMPORARY TABLE temptest (a int),transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,"SET TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ ONLY, DEFERRABLE",transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM writetest,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ WRITE,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM writetest,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT x,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM writetest,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ WRITE,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT x,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ WRITE,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM writetest,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ WRITE,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT x,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM writetest,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT x,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SAVEPOINT y,transactions.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM writetest,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT y,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SET SESSION CHARACTERISTICS AS TRANSACTION READ ONLY,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM writetest,transactions.sql,SAME,,[]
postgresql,postgresql,DELETE FROM temptest,transactions.sql,SAME,,[]
postgresql,postgresql,UPDATE temptest SET a = 0 FROM writetest WHERE temptest.a = 1 AND writetest.a = temptest.a,transactions.sql,SAME,,[]
postgresql,postgresql,PREPARE test AS UPDATE writetest SET a = 0,transactions.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM writetest, temptest",transactions.sql,SAME,,[]
postgresql,postgresql,START TRANSACTION READ WRITE,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SET SESSION CHARACTERISTICS AS TRANSACTION READ WRITE,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT two,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT two,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trans_foo,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trans_barbaz,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trans_baz,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO one,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT two,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE two,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT three,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT four,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT four,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT three,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT three,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trans_foo,transactions.sql,SAME,,"[(1,), (3,)]"
postgresql,postgresql,SELECT * FROM trans_barbaz,transactions.sql,SAME,,"[(1,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT two,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT three,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT four,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT five,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT five,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM savepoints,transactions.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,DELETE FROM savepoints WHERE a=1,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT two,transactions.sql,SAME,,[]
postgresql,postgresql,DELETE FROM savepoints WHERE a=1,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT three,transactions.sql,SAME,,[]
postgresql,postgresql,DELETE FROM savepoints WHERE a=2,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM savepoints,transactions.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM savepoints,transactions.sql,SAME,,"[(1,), (2,), (4,), (5,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,RELEASE SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,"SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=8",transactions.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=7",transactions.sql,SAME,,"[(False,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,"SELECT a FROM savepoints WHERE a in (9, 10, 11)",transactions.sql,SAME,,"[(9,), (11,)]"
postgresql,postgresql,"SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=9 AND b.a=11",transactions.sql,SAME,,"[(False,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT two,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT two,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT three,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT a FROM savepoints WHERE a BETWEEN 12 AND 17,transactions.sql,SAME,,"[(12,), (15,), (16,), (17,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT two,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT a FROM savepoints WHERE a BETWEEN 18 AND 22,transactions.sql,SAME,,"[(18,), (22,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK TO SAVEPOINT one,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT 1,transactions.sql,SAME,,"[(1,)]"
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT 1,transactions.sql,SAME,,"[(1,)]"
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,select * from xacttest,transactions.sql,SAME,,"[(56, 7.8), (100, 99.097), (0, 0.09561), (42, 324.78), (777, 777.777)]"
postgresql,postgresql,create or replace function max_xacttest() returns smallint language sql as 'select max(a) from xacttest' stable,transactions.sql,SAME,,[]
postgresql,postgresql,begin,transactions.sql,SAME,,[]
postgresql,postgresql,update xacttest set a = max_xacttest() + 10 where a > 0,transactions.sql,SAME,,[]
postgresql,postgresql,select * from xacttest,transactions.sql,SAME,,"[(0, 0.09561), (787, 7.8), (787, 99.097), (787, 324.78), (787, 777.777)]"
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,create or replace function max_xacttest() returns smallint language sql as 'select max(a) from xacttest' volatile,transactions.sql,SAME,,[]
postgresql,postgresql,begin,transactions.sql,SAME,,[]
postgresql,postgresql,update xacttest set a = max_xacttest() + 10 where a > 0,transactions.sql,SAME,,[]
postgresql,postgresql,select * from xacttest,transactions.sql,SAME,,"[(0, 0.09561), (787, 7.8), (797, 99.097), (807, 324.78), (817, 777.777)]"
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,begin,transactions.sql,SAME,,[]
postgresql,postgresql,update xacttest set a = max_xacttest() + 10 where a > 0,transactions.sql,SAME,,[]
postgresql,postgresql,select * from xacttest,transactions.sql,SAME,,"[(0, 0.09561), (787, 7.8), (797, 99.097), (807, 324.78), (817, 777.777)]"
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,begin,transactions.sql,SAME,,[]
postgresql,postgresql,update xacttest set a = max_xacttest() + 10 where a > 0,transactions.sql,SAME,,[]
postgresql,postgresql,select * from xacttest,transactions.sql,SAME,,"[(0, 0.09561), (787, 7.8), (797, 99.097), (807, 324.78), (817, 777.777)]"
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,savepoint x,transactions.sql,SAME,,[]
postgresql,postgresql,rollback to x,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,transactions.sql,SAME,,[]
postgresql,postgresql,begin,transactions.sql,SAME,,[]
postgresql,postgresql,savepoint x,transactions.sql,SAME,,[]
postgresql,postgresql,declare foo cursor for select * from trans_abc,transactions.sql,SAME,,[]
postgresql,postgresql,fetch from foo,transactions.sql,SAME,,"[(5,)]"
postgresql,postgresql,rollback to x,transactions.sql,SAME,,[]
postgresql,postgresql,commit,transactions.sql,SAME,,[]
postgresql,postgresql,begin,transactions.sql,SAME,,[]
postgresql,postgresql,declare foo cursor for select * from trans_abc,transactions.sql,SAME,,[]
postgresql,postgresql,fetch from foo,transactions.sql,SAME,,"[(5,)]"
postgresql,postgresql,savepoint x,transactions.sql,SAME,,[]
postgresql,postgresql,fetch from foo,transactions.sql,SAME,,"[(10,)]"
postgresql,postgresql,rollback to x,transactions.sql,SAME,,[]
postgresql,postgresql,fetch from foo,transactions.sql,SAME,,"[(15,)]"
postgresql,postgresql,abort,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SET default_transaction_read_only = on,transactions.sql,SAME,,[]
postgresql,postgresql,"START TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ WRITE, DEFERRABLE",transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('repeatable read',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('on',)]"
postgresql,postgresql,COMMIT AND CHAIN,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('repeatable read',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('on',)]"
postgresql,postgresql,COMMIT AND CHAIN,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('repeatable read',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('on',)]"
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,"START TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ WRITE, DEFERRABLE",transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('repeatable read',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('on',)]"
postgresql,postgresql,SAVEPOINT x,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT AND CHAIN,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('repeatable read',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('on',)]"
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,"START TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ WRITE, DEFERRABLE",transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('repeatable read',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('on',)]"
postgresql,postgresql,SAVEPOINT x,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT AND CHAIN,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('repeatable read',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('on',)]"
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,"START TRANSACTION ISOLATION LEVEL READ COMMITTED, READ WRITE, DEFERRABLE",transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('read committed',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('on',)]"
postgresql,postgresql,SAVEPOINT x,transactions.sql,SAME,,[]
postgresql,postgresql,COMMIT AND CHAIN,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('read committed',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('on',)]"
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,"START TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ WRITE, NOT DEFERRABLE",transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('serializable',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,ROLLBACK AND CHAIN,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('serializable',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,ROLLBACK AND CHAIN,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('serializable',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_deferrable,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,ROLLBACK,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trans_abc ORDER BY 1,transactions.sql,SAME,,"[(1,), (2,), (4,), (5,)]"
postgresql,postgresql,RESET default_transaction_read_only,transactions.sql,SAME,,[]
postgresql,postgresql,create temp table i_table (f1 int),transactions.sql,SAME,,[]
postgresql,postgresql,SELECT 3,transactions.sql,SAME,,"[(3,)]"
postgresql,postgresql,select * from i_table,transactions.sql,SAME,,[]
postgresql,postgresql,select * from i_table,transactions.sql,SAME,,[]
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,commit,transactions.sql,SAME,,[]
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,commit,transactions.sql,SAME,,[]
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,select 2,transactions.sql,SAME,,"[(2,)]"
postgresql,postgresql,select * from i_table,transactions.sql,SAME,,"[(5,), (6,)]"
postgresql,postgresql,rollback,transactions.sql,SAME,,[]
postgresql,postgresql,VACUUM,transactions.sql,SAME,,[]
postgresql,postgresql,VACUUM,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT 2,transactions.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT 3,transactions.sql,SAME,,"[(3,)]"
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,SHOW transaction_read_only,transactions.sql,SAME,,"[('off',)]"
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('read committed',)]"
postgresql,postgresql,COMMIT,transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('read committed',)]"
postgresql,postgresql,ROLLBACK,transactions.sql,SAME,,[]
postgresql,postgresql,SET default_transaction_isolation = 'read committed',transactions.sql,SAME,,[]
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('read committed',)]"
postgresql,postgresql,SHOW transaction_isolation,transactions.sql,SAME,,"[('read committed',)]"
postgresql,postgresql,RESET default_transaction_isolation,transactions.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trans_abc ORDER BY 1,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,transactions.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ,transactions.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,transactions.sql,SAME,,[]
postgresql,postgresql,begin,transactions.sql,SAME,,[]
postgresql,postgresql,"create index fkeys_i on fkeys (fkey1, fkey2)",triggers.sql,SAME,,[]
postgresql,postgresql,"create index fkeys2_i on fkeys2 (fkey21, fkey22)",triggers.sql,SAME,,[]
postgresql,postgresql,create index fkeys2p_i on fkeys2 (pkey23),triggers.sql,SAME,,[]
postgresql,postgresql,"create unique index pkeys_i on pkeys (pkey1, pkey2)",triggers.sql,SAME,,[]
postgresql,postgresql,delete from pkeys where pkey1 = 30 and pkey2 = '3',triggers.sql,SAME,,[]
postgresql,postgresql,delete from pkeys where pkey1 = 40 and pkey2 = '4',triggers.sql,SAME,,[]
postgresql,postgresql,"update pkeys set pkey1 = 7, pkey2 = '70' where pkey1 = 50 and pkey2 = '5'",triggers.sql,SAME,,[]
postgresql,postgresql,"SELECT trigger_name, event_manipulation, event_object_schema, event_object_table,        action_order, action_condition, action_orientation, action_timing,        action_reference_old_table, action_reference_new_table   FROM information_schema.triggers   WHERE event_object_table in ('pkeys', 'fkeys', 'fkeys2')   ORDER BY trigger_name COLLATE ""C"", 2",triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, 'foo')]"
postgresql,postgresql,update trigtest set f2 = f2 || 'bar',triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, 'foobar')]"
postgresql,postgresql,delete from trigtest,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, 'foo')]"
postgresql,postgresql,update trigtest set f2 = f2 || 'bar',triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, 'foobar')]"
postgresql,postgresql,delete from trigtest,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, 'foo')]"
postgresql,postgresql,update trigtest set f2 = f2 || 'bar',triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, 'foobar')]"
postgresql,postgresql,delete from trigtest,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, 'foo')]"
postgresql,postgresql,update trigtest set f2 = f2 || 'bar',triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, 'foobar')]"
postgresql,postgresql,delete from trigtest,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, True, 'xyzzy')]"
postgresql,postgresql,alter table trigtest add column d integer default 42 not null,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(1, True, 'xyzzy', 42)]"
postgresql,postgresql,update trigtest set a = 2 where a = 1 returning *,triggers.sql,SAME,,"[(2, True, 'xyzzy', 42)]"
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(2, True, 'xyzzy', 42)]"
postgresql,postgresql,alter table trigtest drop column b,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(2, 'xyzzy', 42)]"
postgresql,postgresql,update trigtest set a = 2 where a = 1 returning *,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest,triggers.sql,SAME,,"[(2, 'xyzzy', 42)]"
postgresql,postgresql,create sequence ttdummy_seq increment 10 start 0 minvalue 0,triggers.sql,SAME,,[]
postgresql,postgresql,select * from tttest,triggers.sql,SAME,,"[(1, 1, None, 999999), (2, 2, None, 999999), (3, 3, 0, 999999)]"
postgresql,postgresql,delete from tttest where price_id = 2,triggers.sql,SAME,,[]
postgresql,postgresql,select * from tttest,triggers.sql,SAME,,"[(1, 1, None, 999999), (3, 3, 0, 999999)]"
postgresql,postgresql,select * from tttest where price_off = 999999,triggers.sql,SAME,,"[(1, 1, None, 999999), (3, 3, 0, 999999)]"
postgresql,postgresql,update tttest set price_val = 30 where price_id = 3,triggers.sql,SAME,,[]
postgresql,postgresql,select * from tttest,triggers.sql,SAME,,"[(1, 1, None, 999999), (3, 30, 0, 999999)]"
postgresql,postgresql,update tttest set price_id = 5 where price_id = 3,triggers.sql,SAME,,[]
postgresql,postgresql,select * from tttest,triggers.sql,SAME,,"[(1, 1, None, 999999), (5, 30, 0, 999999)]"
postgresql,postgresql,delete from tttest where price_id = 5,triggers.sql,SAME,,[]
postgresql,postgresql,update tttest set price_off = 999999 where price_val = 30,triggers.sql,SAME,,[]
postgresql,postgresql,select * from tttest,triggers.sql,SAME,,"[(1, 1, None, 999999)]"
postgresql,postgresql,update tttest set price_id = 5 where price_id = 3,triggers.sql,SAME,,[]
postgresql,postgresql,select * from tttest,triggers.sql,SAME,,"[(1, 1, None, 999999)]"
postgresql,postgresql,update tttest set price_on = -1 where price_id = 1,triggers.sql,SAME,,[]
postgresql,postgresql,update tttest set price_on = -1 where price_id = 1,triggers.sql,SAME,,[]
postgresql,postgresql,select * from tttest,triggers.sql,SAME,,"[(1, 1, -1, 999999)]"
postgresql,postgresql,select * from tttest where price_on <= 35 and price_off > 35 and price_id = 5,triggers.sql,SAME,,[]
postgresql,postgresql,drop sequence ttdummy_seq,triggers.sql,SAME,,[]
postgresql,postgresql,END,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE main_table SET a = a + 1 WHERE b < 30,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE main_table SET a = a + 2 WHERE b > 100,triggers.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE main_table DROP CONSTRAINT main_table_a_key,triggers.sql,SAME,,[]
postgresql,postgresql,"SELECT trigger_name, event_manipulation, event_object_schema, event_object_table,        action_order, action_condition, action_orientation, action_timing,        action_reference_old_table, action_reference_new_table   FROM information_schema.triggers   WHERE event_object_table IN ('main_table')   ORDER BY trigger_name COLLATE ""C"", 2",triggers.sql,SAME,,[]
postgresql,postgresql,"UPDATE main_table SET a = 50, b = 60",triggers.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM main_table ORDER BY a, b",triggers.sql,SAME,,"[(50, 60), (50, 60), (50, 60), (50, 60)]"
postgresql,postgresql,"SELECT pg_get_triggerdef(oid, true) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_a'",triggers.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_get_triggerdef(oid, false) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_a'",triggers.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_get_triggerdef(oid, true) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_any'",triggers.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_a',triggers.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_modified_a',triggers.sql,SAME,,"[(0,)]"
postgresql,postgresql,update table_with_oids set a = a + 1,triggers.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_triggerdef(oid) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'after_upd_a_b_row_trig',triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE main_table SET a = 50,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE main_table SET b = 10,triggers.sql,SAME,,[]
postgresql,postgresql,END,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE some_t SET some_col = TRUE,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE some_t SET some_col = FALSE,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE some_t SET some_col = TRUE,triggers.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE main_table DROP COLUMN b,triggers.sql,SAME,,[]
postgresql,postgresql,begin,triggers.sql,SAME,,[]
postgresql,postgresql,rollback,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,alter table trigtest disable trigger user,triggers.sql,SAME,,[]
postgresql,postgresql,delete from trigtest where i=2,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest2,triggers.sql,SAME,,"[(1,)]"
postgresql,postgresql,delete from trigtest where i=1,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trigtest2,triggers.sql,SAME,,[]
postgresql,postgresql,select *  from trigtest,triggers.sql,SAME,,"[(3,), (4,), (5,), (6,), (7,)]"
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update trigger_test set v = 'update' where i = 1,triggers.sql,SAME,,[]
postgresql,postgresql,delete from trigger_test,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE trigger_test SET f3 = 'bar',triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE trigger_test SET f3 = NULL,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE trigger_test SET f3 = NULL,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE trigger_test SET f3 = 'bar',triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE trigger_test SET f3 = NULL,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE trigger_test SET f3 = NULL,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,BEGIN,triggers.sql,SAME,,[]
postgresql,postgresql,SET TRANSACTION ISOLATION LEVEL SERIALIZABLE,triggers.sql,SAME,,[]
postgresql,postgresql,"UPDATE serializable_update_tab SET description = 'no no', id = 1 WHERE id = 1",triggers.sql,SAME,,[]
postgresql,postgresql,COMMIT,triggers.sql,SAME,,[]
postgresql,postgresql,SELECT description FROM serializable_update_tab WHERE id = 1,triggers.sql,SAME,,"[('no no',)]"
postgresql,postgresql,CREATE TRIGGER z_min_update BEFORE UPDATE ON min_updates_test FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger(),triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE min_updates_test SET f1 = f1,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE min_updates_test SET f2 = f2 + 1,triggers.sql,SAME,,[]
postgresql,postgresql,UPDATE min_updates_test SET f3 = 2 WHERE f3 is null,triggers.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM min_updates_test,triggers.sql,SAME,,"[('a', 2, 2), ('b', 3, 2)]"
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW city_view AS     SELECT city_id, city_name, population, country_name, continent     FROM city_table ci     LEFT JOIN country_table co ON co.country_id = ci.country_id",triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW european_city_view AS     SELECT * FROM city_view WHERE continent = 'Europe',triggers.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM european_city_view,triggers.sql,SAME,,"[(0,)]"
postgresql,postgresql,"CREATE RULE european_city_update_rule AS ON UPDATE TO european_city_view DO INSTEAD UPDATE city_view SET     city_name = NEW.city_name,     population = NEW.population,     country_name = NEW.country_name WHERE city_id = OLD.city_id RETURNING NEW.*",triggers.sql,SAME,,[]
postgresql,postgresql,CREATE RULE european_city_delete_rule AS ON DELETE TO european_city_view DO INSTEAD DELETE FROM city_view WHERE city_id = OLD.city_id RETURNING *,triggers.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM city_view,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,select pg_trigger_depth(),triggers.sql,SAME,,"[(0,)]"
postgresql,postgresql,select pg_trigger_depth(),triggers.sql,SAME,,"[(0,)]"
postgresql,postgresql,select pg_trigger_depth(),triggers.sql,SAME,,"[(0,)]"
postgresql,postgresql,"create temp table parent (     aid int not null primary key,     val1 text,     val2 text,     val3 text,     val4 text,     bcnt int not null default 0)",triggers.sql,SAME,,[]
postgresql,postgresql,"create temp table child (     bid int not null primary key,     aid int not null,     val1 text)",triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,select * from parent,triggers.sql,SAME,,"[(1, 'a', 'a', 'a', 'a', 0)]"
postgresql,postgresql,select * from child,triggers.sql,SAME,,"[(10, 1, 'b')]"
postgresql,postgresql,update parent set val1 = 'b' where aid = 1,triggers.sql,SAME,,[]
postgresql,postgresql,merge into parent p using (values (1)) as v(id) on p.aid = v.id   when matched then update set val1 = 'b',triggers.sql,SAME,,[]
postgresql,postgresql,select * from parent,triggers.sql,SAME,,"[(1, 'b', 'a', 'a', 'a', 0)]"
postgresql,postgresql,select * from child,triggers.sql,SAME,,"[(10, 1, 'b')]"
postgresql,postgresql,delete from parent where aid = 1,triggers.sql,SAME,,[]
postgresql,postgresql,merge into parent p using (values (1)) as v(id) on p.aid = v.id   when matched then delete,triggers.sql,SAME,,[]
postgresql,postgresql,select * from parent,triggers.sql,SAME,,[]
postgresql,postgresql,select * from child,triggers.sql,SAME,,"[(10, 1, 'b')]"
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,delete from parent where aid = 1,triggers.sql,SAME,,[]
postgresql,postgresql,select * from parent,triggers.sql,SAME,,[]
postgresql,postgresql,select * from child,triggers.sql,SAME,,"[(10, 1, 'b')]"
postgresql,postgresql,"create temp table self_ref_trigger (     id int primary key,     parent int references self_ref_trigger,     data text,     nchildren int not null default 0 )",triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update self_ref_trigger set data = 'root!' where id = 1,triggers.sql,SAME,,[]
postgresql,postgresql,select * from self_ref_trigger,triggers.sql,SAME,,"[(2, 1, 'root child A', 0), (3, 1, 'root child B', 0), (4, 2, 'grandchild 1', 0), (5, 3, 'grandchild 2', 0), (1, None, 'root!', 0)]"
postgresql,postgresql,delete from self_ref_trigger,triggers.sql,SAME,,[]
postgresql,postgresql,select * from self_ref_trigger,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update stmt_trig_on_empty_upd set a = a where false returning a+1 as aa,triggers.sql,SAME,,[]
postgresql,postgresql,update stmt_trig_on_empty_upd1 set a = a where false returning a+1 as aa,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,select * from upsert,triggers.sql,SAME,,"[(1, 'black'), (2, 'red'), (3, 'orange'), (4, 'green'), (5, 'purple'), (6, 'white'), (7, 'pink'), (8, 'yellow')]"
postgresql,postgresql,create view my_view as select * from my_table,triggers.sql,SAME,,[]
postgresql,postgresql,drop view my_view,triggers.sql,SAME,,[]
postgresql,postgresql,alter table trigpart attach partition trigpart3 for values from (2000) to (3000),triggers.sql,SAME,,[]
postgresql,postgresql,alter table trigpart4 attach partition trigpart42 for values from (3500) to (4000),triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, tgfoid::regproc from pg_trigger   where tgrelid::regclass::text like 'trigpart%' order by tgrelid::regclass::text",triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, tgfoid::regproc from pg_trigger   where tgrelid::regclass::text like 'trigpart%' order by tgrelid::regclass::text",triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, tgfoid::regproc from pg_trigger   where tgrelid::regclass::text like 'trigpart%' order by tgrelid::regclass::text",triggers.sql,SAME,,[]
postgresql,postgresql,alter table trigpart detach partition trigpart3,triggers.sql,SAME,,[]
postgresql,postgresql,alter table trigpart detach partition trigpart4,triggers.sql,SAME,,[]
postgresql,postgresql,alter table trigpart attach partition trigpart3 for values from (2000) to (3000),triggers.sql,SAME,,[]
postgresql,postgresql,alter table trigpart detach partition trigpart3,triggers.sql,SAME,,[]
postgresql,postgresql,alter table trigpart attach partition trigpart3 for values from (2000) to (3000),triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass::text, tgname, tgfoid::regproc, tgenabled, tgisinternal from pg_trigger   where tgname ~ '^trg1' order by 1",triggers.sql,SAME,,[]
postgresql,postgresql,alter table trigpart attach partition trigpart3 FOR VALUES FROM (2000) to (3000),triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,with upd as (   update parted2_stmt_trig set a = a ) update parted_stmt_trig  set a = a,triggers.sql,SAME,,[]
postgresql,postgresql,delete from parted_stmt_trig,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update parted_trig set a = 2 where a = 1,triggers.sql,SAME,,[]
postgresql,postgresql,merge into parted_trig using (select 1) as ss on true   when matched and a = 2 then update set a = 1,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trig attach partition parted_trig3 for values in (3),triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,"alter table parted_irreg_ancestor drop column fd,   drop column fd2, drop column fd3",triggers.sql,SAME,,[]
postgresql,postgresql,"alter table parted_irreg drop column fd, drop column fd2",triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_irreg_ancestor attach partition parted_irreg   for values from ('aaaa') to ('zzzz'),triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted1_irreg drop column fd,triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_irreg attach partition parted1_irreg   for values from ('aaaa') to ('bbbb'),triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update parted set c = c || 'v3',triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update parted set c = c || 'v5',triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update parted set c = c || ' v6',triggers.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from parted",triggers.sql,SAME,,"[('parted_1_1', 1, 1, 'uno uno v1v3v5 v6'), ('parted_1_1', 1, 1, 'uno uno v2v3v5 v6'), ('parted_1_1', 1, 1, 'uno uno v4v5 v6'), ('parted_1_1', 1, 1, 'uno uno v6')]"
postgresql,postgresql,truncate table parted,triggers.sql,SAME,,[]
postgresql,postgresql,update parted set a = 2,triggers.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from parted",triggers.sql,SAME,,"[('parted_2', 2, 1, 'uno uno v5')]"
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,truncate table parted,triggers.sql,SAME,,[]
postgresql,postgresql,update parted set a = a + 1,triggers.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from parted",triggers.sql,SAME,,"[('parted_2', 2, 1, 'uno uno v6')]"
postgresql,postgresql,"select tableoid::regclass, * from parted",triggers.sql,SAME,,"[('parted_2', 2, 1, 'uno uno v6')]"
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,select * from parted,triggers.sql,SAME,,"[(0, 1, 'zero win'), (1, 1, 'one fail'), (1, 2, 'two fail')]"
postgresql,postgresql,alter table parted_constr_ancestor attach partition parted_constr   for values from ('aaaa') to ('zzzz'),triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_constr attach partition parted1_constr   for values from ('aaaa') to ('bbbb'),triggers.sql,SAME,,[]
postgresql,postgresql,begin,triggers.sql,SAME,,[]
postgresql,postgresql,commit,triggers.sql,SAME,,[]
postgresql,postgresql,begin,triggers.sql,SAME,,[]
postgresql,postgresql,commit,triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trigger_2 drop column drp,triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trigger attach partition parted_trigger_2 for values from (1000) to (2000),triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trigger attach partition parted_trigger_3 for values from (2000) to (3000),triggers.sql,SAME,,[]
postgresql,postgresql,update parted_trigger set a = a + 2,triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trigger_2 drop column drp,triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trigger attach partition parted_trigger_2 for values from (1000) to (2000),triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trigger attach partition parted_trigger_3 for values from (2000) to (3000),triggers.sql,SAME,,[]
postgresql,postgresql,"select tgname, conname, t.tgrelid::regclass, t.tgconstrrelid::regclass,   c.conrelid::regclass, c.confrelid::regclass   from pg_trigger t join pg_constraint c on (t.tgconstraint = c.oid)   where tgname = 'parted_trigger'   order by t.tgrelid::regclass::text",triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trigger_2 drop column drp,triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trigger attach partition parted_trigger_2 for values from (1000) to (2000),triggers.sql,SAME,,[]
postgresql,postgresql,alter table parted_trigger attach partition parted_trigger_3 for values from (2000) to (3000),triggers.sql,SAME,,[]
postgresql,postgresql,update parted_trigger set a = a + 2,triggers.sql,SAME,,[]
postgresql,postgresql,update parted_trigger set b = b || 'b',triggers.sql,SAME,,[]
postgresql,postgresql,alter table trg_clone add constraint uniq unique (a) deferrable,triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, count(*) from pg_trigger   where tgrelid::regclass in ('trg_clone', 'trg_clone1', 'trg_clone2', 	'trg_clone3', 'trg_clone_3_3')   group by tgrelid::regclass order by tgrelid::regclass",triggers.sql,SAME,,"[('trg_clone', 1), ('trg_clone1', 1), ('trg_clone2', 1), ('trg_clone3', 1), ('trg_clone_3_3', 1)]"
postgresql,postgresql,"select tgrelid::regclass, tgname, tgenabled from pg_trigger   where tgrelid in ('parent'::regclass, 'child1'::regclass)   order by tgrelid::regclass::text",triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, tgenabled from pg_trigger   where tgrelid in ('parent'::regclass, 'child1'::regclass)   order by tgrelid::regclass::text",triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, tgenabled from pg_trigger   where tgrelid in ('parent'::regclass, 'child1'::regclass)   order by tgrelid::regclass::text, tgname",triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, tgenabled from pg_trigger   where tgrelid in ('parent'::regclass, 'child1'::regclass)   order by tgrelid::regclass::text, tgname",triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, tgenabled from pg_trigger   where tgrelid in ('parent'::regclass, 'child1'::regclass)   order by tgrelid::regclass::text, tgname",triggers.sql,SAME,,[]
postgresql,postgresql,alter table parent disable trigger user,triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, tgenabled from pg_trigger   where tgrelid in ('parent'::regclass, 'child1'::regclass)   order by tgrelid::regclass::text, tgname",triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, rtrim(tgname, '0123456789') as tgname,   tgfoid::regproc, tgenabled   from pg_trigger where tgrelid in ('parent'::regclass, 'child1'::regclass)   order by tgrelid::regclass::text, tgfoid",triggers.sql,SAME,,"[('child1', 'RI_ConstraintTrigger_c_', '""RI_FKey_check_ins""', 'O'), ('child1', 'RI_ConstraintTrigger_c_', '""RI_FKey_check_upd""', 'O'), ('parent', 'RI_ConstraintTrigger_c_', '""RI_FKey_check_ins""', 'O'), ('parent', 'RI_ConstraintTrigger_c_', '""RI_FKey_check_upd""', 'O'), ('parent', 'RI_ConstraintTrigger_a_', '""RI_FKey_noaction_del""', 'O'), ('parent', 'RI_ConstraintTrigger_a_', '""RI_FKey_noaction_upd""', 'O')]"
postgresql,postgresql,"select tgrelid::regclass, rtrim(tgname, '0123456789') as tgname,   tgfoid::regproc, tgenabled   from pg_trigger where tgrelid in ('parent'::regclass, 'child1'::regclass)   order by tgrelid::regclass::text, tgfoid",triggers.sql,SAME,,"[('child1', 'RI_ConstraintTrigger_c_', '""RI_FKey_check_ins""', 'O'), ('child1', 'RI_ConstraintTrigger_c_', '""RI_FKey_check_upd""', 'O'), ('parent', 'RI_ConstraintTrigger_c_', '""RI_FKey_check_ins""', 'O'), ('parent', 'RI_ConstraintTrigger_c_', '""RI_FKey_check_upd""', 'O'), ('parent', 'RI_ConstraintTrigger_a_', '""RI_FKey_noaction_del""', 'O'), ('parent', 'RI_ConstraintTrigger_a_', '""RI_FKey_noaction_upd""', 'O')]"
postgresql,postgresql,ALTER TABLE trgfire ATTACH PARTITION trgfire3 FOR VALUES FROM (20) TO (30),triggers.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE trgfire ATTACH PARTITION trgfire5 FOR VALUES FROM (40) TO (50),triggers.sql,SAME,,[]
postgresql,postgresql,"SELECT tgrelid::regclass, tgenabled FROM pg_trigger   WHERE tgrelid::regclass IN (SELECT oid from pg_class where relname LIKE 'trgfire%')   ORDER BY tgrelid::regclass::text",triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,alter table child2 drop column x,triggers.sql,SAME,,[]
postgresql,postgresql,alter table parent attach partition child2 for values in ('BBB'),triggers.sql,SAME,,[]
postgresql,postgresql,alter table parent attach partition child3 for values in ('CCC'),triggers.sql,SAME,,[]
postgresql,postgresql,"SELECT trigger_name, event_manipulation, event_object_schema, event_object_table,        action_order, action_condition, action_orientation, action_timing,        action_reference_old_table, action_reference_new_table   FROM information_schema.triggers   WHERE event_object_table IN ('parent', 'child1', 'child2', 'child3')   ORDER BY trigger_name COLLATE ""C"", 2",triggers.sql,SAME,,[]
postgresql,postgresql,update parent set b = b + 1,triggers.sql,SAME,,[]
postgresql,postgresql,delete from parent,triggers.sql,SAME,,[]
postgresql,postgresql,delete from child1,triggers.sql,SAME,,[]
postgresql,postgresql,delete from child2,triggers.sql,SAME,,[]
postgresql,postgresql,delete from child3,triggers.sql,SAME,,[]
postgresql,postgresql,delete from parent,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update parent set b = b + 1,triggers.sql,SAME,,[]
postgresql,postgresql,delete from parent,triggers.sql,SAME,,[]
postgresql,postgresql,delete from child1,triggers.sql,SAME,,[]
postgresql,postgresql,delete from child2,triggers.sql,SAME,,[]
postgresql,postgresql,delete from child3,triggers.sql,SAME,,[]
postgresql,postgresql,delete from parent,triggers.sql,SAME,,[]
postgresql,postgresql,alter table child no inherit parent,triggers.sql,SAME,,[]
postgresql,postgresql,alter table child inherit parent,triggers.sql,SAME,,[]
postgresql,postgresql,select * from table1,triggers.sql,SAME,,"[(42,), (44,), (43,)]"
postgresql,postgresql,select * from table2,triggers.sql,SAME,,"[('hello world',)]"
postgresql,postgresql,update refd_table set a = 11 where b = 'one',triggers.sql,SAME,,[]
postgresql,postgresql,select * from trig_table,triggers.sql,SAME,,"[(2, 'two a'), (2, 'two b'), (3, 'three a'), (3, 'three b'), (11, 'one a'), (11, 'one b')]"
postgresql,postgresql,delete from refd_table where length(b) = 3,triggers.sql,SAME,,[]
postgresql,postgresql,select * from trig_table,triggers.sql,SAME,,"[(3, 'three a'), (3, 'three b')]"
postgresql,postgresql,delete from self_ref where a = 1,triggers.sql,SAME,,[]
postgresql,postgresql,delete from self_ref where a = 1,triggers.sql,SAME,,[]
postgresql,postgresql,"merge into merge_target_table t using merge_source_table s on t.a = s.a when not matched then   insert values (a, b)",triggers.sql,SAME,,[]
postgresql,postgresql,"merge into merge_target_table t using merge_source_table s on t.a = s.a when matched and s.a <= 2 then 	update set b = t.b || ' updated by merge' when matched and s.a > 2 then 	delete when not matched then   insert values (a, b)",triggers.sql,SAME,,[]
postgresql,postgresql,"merge into merge_target_table t using merge_source_table s on t.a = s.a when matched and s.a <= 2 then 	update set b = t.b || ' updated again by merge' when matched and s.a > 2 then 	delete when not matched then   insert values (a, b)",triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,table my_table,triggers.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,alter table convslot_test_child add column col2 text not null default 'tutu',triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update convslot_test_parent set col1 = col1 || '1',triggers.sql,SAME,,[]
postgresql,postgresql,end,triggers.sql,SAME,,[]
postgresql,postgresql,update convslot_test_parent set col1 = col1 || '1',triggers.sql,SAME,,[]
postgresql,postgresql,delete from convslot_test_parent,triggers.sql,SAME,,[]
postgresql,postgresql,alter table convslot_test_parent   attach partition convslot_test_part for values from (1) to (1000),triggers.sql,SAME,,[]
postgresql,postgresql,create function convslot_trig4() returns trigger as $$begin raise exception 'BOOM!'; end$$ language plpgsql,triggers.sql,SAME,,[]
postgresql,postgresql,create trigger convslot_test_parent_update     after update on convslot_test_parent     referencing old table as old_rows new table as new_rows     for each statement execute procedure convslot_trig4(),triggers.sql,SAME,,[]
postgresql,postgresql,begin,triggers.sql,SAME,,[]
postgresql,postgresql,savepoint svp,triggers.sql,SAME,,[]
postgresql,postgresql,rollback to savepoint svp,triggers.sql,SAME,,[]
postgresql,postgresql,rollback,triggers.sql,SAME,,[]
postgresql,postgresql,drop function convslot_trig4(),triggers.sql,SAME,,[]
postgresql,postgresql,create function f () returns trigger as $$ begin return new; end; $$ language plpgsql,triggers.sql,SAME,,[]
postgresql,postgresql,create trigger a after insert on grandparent for each row execute procedure f(),triggers.sql,SAME,,[]
postgresql,postgresql,alter trigger a on grandparent rename to b,triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, (select tgname from pg_trigger tr where tr.oid = pg_trigger.tgparentid) parent_tgname from pg_trigger where tgrelid in (select relid from pg_partition_tree('grandparent')) order by tgname, tgrelid::regclass::text COLLATE ""C""",triggers.sql,SAME,,"[('chi', 'b', 'b'), ('cho', 'b', 'b'), ('grandparent', 'b', None), ('middle', 'b', 'b')]"
postgresql,postgresql,create trigger c after insert on middle for each row execute procedure f(),triggers.sql,SAME,,[]
postgresql,postgresql,create trigger p after insert on grandparent for each statement execute function f(),triggers.sql,SAME,,[]
postgresql,postgresql,create trigger p after insert on middle for each statement execute function f(),triggers.sql,SAME,,[]
postgresql,postgresql,alter trigger p on grandparent rename to q,triggers.sql,SAME,,[]
postgresql,postgresql,"select tgrelid::regclass, tgname, (select tgname from pg_trigger tr where tr.oid = pg_trigger.tgparentid) parent_tgname from pg_trigger where tgrelid in (select relid from pg_partition_tree('grandparent')) order by tgname, tgrelid::regclass::text COLLATE ""C""",triggers.sql,SAME,,"[('chi', 'b', 'b'), ('cho', 'b', 'b'), ('grandparent', 'b', None), ('middle', 'b', 'b'), ('chi', 'c', 'c'), ('cho', 'c', 'c'), ('middle', 'c', None), ('middle', 'p', None), ('grandparent', 'q', None)]"
postgresql,postgresql,create trigger parenttrig after insert on parent for each row execute procedure f(),triggers.sql,SAME,,[]
postgresql,postgresql,create trigger parenttrig after insert on child for each row execute procedure f(),triggers.sql,SAME,,[]
postgresql,postgresql,alter trigger parenttrig on parent rename to anothertrig,triggers.sql,SAME,,[]
postgresql,postgresql,drop function f(),triggers.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a,truncate.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,BEGIN,truncate.sql,SAME,,[]
postgresql,postgresql,TRUNCATE truncate_a,truncate.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a,truncate.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,BEGIN,truncate.sql,SAME,,[]
postgresql,postgresql,TRUNCATE truncate_a,truncate.sql,SAME,,[]
postgresql,postgresql,COMMIT,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a,truncate.sql,SAME,,[]
postgresql,postgresql,"TRUNCATE TABLE truncate_a,trunc_b,trunc_e",truncate.sql,SAME,,[]
postgresql,postgresql,"TRUNCATE TABLE trunc_c,trunc_d,trunc_e",truncate.sql,SAME,,[]
postgresql,postgresql,"TRUNCATE TABLE trunc_c,trunc_d,trunc_e,truncate_a,trunc_b",truncate.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE truncate_a CASCADE,truncate.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE truncate_a ADD FOREIGN KEY (col1) REFERENCES trunc_c,truncate.sql,SAME,,[]
postgresql,postgresql,"TRUNCATE TABLE trunc_c,truncate_a,trunc_d,trunc_e,trunc_b",truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a    UNION ALL  SELECT * FROM trunc_c    UNION ALL  SELECT * FROM trunc_b    UNION ALL  SELECT * FROM trunc_d,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_e,truncate.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE trunc_c CASCADE,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a    UNION ALL  SELECT * FROM trunc_c    UNION ALL  SELECT * FROM trunc_b    UNION ALL  SELECT * FROM trunc_d,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_e,truncate.sql,SAME,,[]
postgresql,postgresql,BEGIN,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_f,truncate.sql,SAME,,"[(1,), (2,), (3,), (4,), (5,)]"
postgresql,postgresql,TRUNCATE trunc_f,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_f,truncate.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,truncate.sql,SAME,,[]
postgresql,postgresql,BEGIN,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_f,truncate.sql,SAME,,"[(1,), (2,), (3,), (4,), (5,)]"
postgresql,postgresql,TRUNCATE ONLY trunc_f,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_f,truncate.sql,SAME,,"[(3,), (4,), (5,)]"
postgresql,postgresql,ROLLBACK,truncate.sql,SAME,,[]
postgresql,postgresql,BEGIN,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_f,truncate.sql,SAME,,"[(1,), (2,), (3,), (4,), (5,)]"
postgresql,postgresql,SELECT * FROM trunc_fa,truncate.sql,SAME,,"[(3, 'three'), (5, 'five')]"
postgresql,postgresql,SELECT * FROM trunc_faa,truncate.sql,SAME,,"[(5, 'five', 'FIVE')]"
postgresql,postgresql,"TRUNCATE ONLY trunc_fb, ONLY trunc_fa",truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_f,truncate.sql,SAME,,"[(1,), (2,), (5,)]"
postgresql,postgresql,SELECT * FROM trunc_fa,truncate.sql,SAME,,"[(5, 'five')]"
postgresql,postgresql,SELECT * FROM trunc_faa,truncate.sql,SAME,,"[(5, 'five', 'FIVE')]"
postgresql,postgresql,ROLLBACK,truncate.sql,SAME,,[]
postgresql,postgresql,BEGIN,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_f,truncate.sql,SAME,,"[(1,), (2,), (3,), (4,), (5,)]"
postgresql,postgresql,SELECT * FROM trunc_fa,truncate.sql,SAME,,"[(3, 'three'), (5, 'five')]"
postgresql,postgresql,SELECT * FROM trunc_faa,truncate.sql,SAME,,"[(5, 'five', 'FIVE')]"
postgresql,postgresql,"TRUNCATE ONLY trunc_fb, trunc_fa",truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_f,truncate.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,SELECT * FROM trunc_fa,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM trunc_faa,truncate.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,truncate.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) as ""Row count in test table"" FROM trunc_trigger_test",truncate.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT * FROM trunc_trigger_log,truncate.sql,SAME,,[]
postgresql,postgresql,TRUNCATE trunc_trigger_test,truncate.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) as ""Row count in test table"" FROM trunc_trigger_test",truncate.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT * FROM trunc_trigger_log,truncate.sql,SAME,,[]
postgresql,postgresql,truncate trunc_trigger_log,truncate.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) as ""Row count in test table"" FROM trunc_trigger_test",truncate.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT * FROM trunc_trigger_log,truncate.sql,SAME,,[]
postgresql,postgresql,TRUNCATE trunc_trigger_test,truncate.sql,SAME,,[]
postgresql,postgresql,"SELECT count(*) as ""Row count in test table"" FROM trunc_trigger_test",truncate.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT * FROM trunc_trigger_log,truncate.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE truncate_a_id1 START WITH 33,truncate.sql,SAME,,[]
postgresql,postgresql,ALTER SEQUENCE truncate_a_id1 OWNED BY truncate_a.id1,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a,truncate.sql,SAME,,"[(1, 33), (2, 34)]"
postgresql,postgresql,TRUNCATE truncate_a,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a,truncate.sql,SAME,,"[(3, 35), (4, 36)]"
postgresql,postgresql,TRUNCATE truncate_a RESTART IDENTITY,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a,truncate.sql,SAME,,"[(1, 33), (2, 34)]"
postgresql,postgresql,SELECT * FROM truncate_b,truncate.sql,SAME,,"[(44,), (45,)]"
postgresql,postgresql,TRUNCATE truncate_b,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_b,truncate.sql,SAME,,"[(46,), (47,)]"
postgresql,postgresql,TRUNCATE truncate_b RESTART IDENTITY,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_b,truncate.sql,SAME,,"[(44,), (45,)]"
postgresql,postgresql,BEGIN,truncate.sql,SAME,,[]
postgresql,postgresql,TRUNCATE truncate_a RESTART IDENTITY,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a,truncate.sql,SAME,,"[(1, 33)]"
postgresql,postgresql,ROLLBACK,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM truncate_a,truncate.sql,SAME,,"[(1, 33), (2, 34), (3, 35), (4, 36)]"
postgresql,postgresql,TRUNCATE truncparted,truncate.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION tp_chk_data(OUT pktb regclass, OUT pkval int, OUT fktb regclass, OUT fkval int)   RETURNS SETOF record LANGUAGE plpgsql AS $$   BEGIN     RETURN QUERY SELECT       pk.tableoid::regclass, pk.a, fk.tableoid::regclass, fk.a     FROM truncprim pk FULL JOIN truncpart fk USING (a)     ORDER BY 2, 4;   END $$",truncate.sql,SAME,,[]
postgresql,postgresql,select tp_ins_data(),truncate.sql,SAME,,"[('',)]"
postgresql,postgresql,"TRUNCATE TABLE truncprim, truncpart",truncate.sql,SAME,,[]
postgresql,postgresql,select * from tp_chk_data(),truncate.sql,SAME,,[]
postgresql,postgresql,select tp_ins_data(),truncate.sql,SAME,,"[('',)]"
postgresql,postgresql,TRUNCATE TABLE truncprim CASCADE,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM tp_chk_data(),truncate.sql,SAME,,[]
postgresql,postgresql,SELECT tp_ins_data(),truncate.sql,SAME,,"[('',)]"
postgresql,postgresql,TRUNCATE TABLE truncpart,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM tp_chk_data(),truncate.sql,SAME,,"[('truncprim', 1, None, None), ('truncprim', 100, None, None), ('truncprim', 150, None, None)]"
postgresql,postgresql,"DROP FUNCTION tp_ins_data(), tp_chk_data()",truncate.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE trunc_a1 CASCADE,truncate.sql,SAME,,[]
postgresql,postgresql,SELECT a FROM ref_b,truncate.sql,SAME,,[]
postgresql,postgresql,TRUNCATE TABLE trunc_a21 CASCADE,truncate.sql,SAME,,[]
postgresql,postgresql,"SELECT a as ""from table ref_c"" FROM ref_c",truncate.sql,SAME,,[]
postgresql,postgresql,"SELECT a as ""from table trunc_a"" FROM trunc_a ORDER BY a",truncate.sql,SAME,,"[(15,), (20,), (25,)]"
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY ispell (                         Template=ispell,                         DictFile=ispell_sample,                         AffFile=ispell_sample )",tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_lexize('ispell', 'skies')",tsdicts.sql,SAME,,"[(['sky'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'bookings')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'booking')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'foot')",tsdicts.sql,SAME,,"[(['foot'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'foots')",tsdicts.sql,SAME,,"[(['foot'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'rebookings')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'rebooking')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'rebook')",tsdicts.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'unbookings')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'unbooking')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'unbook')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'footklubber')",tsdicts.sql,SAME,,"[(['foot', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'footballklubber')",tsdicts.sql,SAME,,"[(['footballklubber', 'foot', 'ball', 'klubber', 'football', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'ballyklubber')",tsdicts.sql,SAME,,"[(['ball', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('ispell', 'footballyklubber')",tsdicts.sql,SAME,,"[(['foot', 'ball', 'klubber'],)]"
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY hunspell (                         Template=ispell,                         DictFile=ispell_sample,                         AffFile=hunspell_sample )",tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'skies')",tsdicts.sql,SAME,,"[(['sky'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'bookings')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'booking')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'foot')",tsdicts.sql,SAME,,"[(['foot'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'foots')",tsdicts.sql,SAME,,"[(['foot'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'rebookings')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'rebooking')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'rebook')",tsdicts.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'unbookings')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'unbooking')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'unbook')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'footklubber')",tsdicts.sql,SAME,,"[(['foot', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'footballklubber')",tsdicts.sql,SAME,,"[(['footballklubber', 'foot', 'ball', 'klubber', 'football', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'ballyklubber')",tsdicts.sql,SAME,,"[(['ball', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell', 'footballyklubber')",tsdicts.sql,SAME,,"[(['foot', 'ball', 'klubber'],)]"
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY hunspell_long (                         Template=ispell,                         DictFile=hunspell_sample_long,                         AffFile=hunspell_sample_long )",tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'skies')",tsdicts.sql,SAME,,"[(['sky'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'bookings')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'booking')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'foot')",tsdicts.sql,SAME,,"[(['foot'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'foots')",tsdicts.sql,SAME,,"[(['foot'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'rebookings')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'rebooking')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'rebook')",tsdicts.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'unbookings')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'unbooking')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'unbook')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'booked')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'footklubber')",tsdicts.sql,SAME,,"[(['foot', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'footballklubber')",tsdicts.sql,SAME,,"[(['footballklubber', 'foot', 'ball', 'klubber', 'football', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'ballyklubber')",tsdicts.sql,SAME,,"[(['ball', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'ballsklubber')",tsdicts.sql,SAME,,"[(['ball', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'footballyklubber')",tsdicts.sql,SAME,,"[(['foot', 'ball', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_long', 'ex-machina')",tsdicts.sql,SAME,,"[(['ex-', 'machina'],)]"
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY hunspell_num (                         Template=ispell,                         DictFile=hunspell_sample_num,                         AffFile=hunspell_sample_num )",tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'skies')",tsdicts.sql,SAME,,"[(['sky'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'sk')",tsdicts.sql,SAME,,"[(['sky'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'bookings')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'booking')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'foot')",tsdicts.sql,SAME,,"[(['foot'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'foots')",tsdicts.sql,SAME,,"[(['foot'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'rebookings')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'rebooking')",tsdicts.sql,SAME,,"[(['booking', 'book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'rebook')",tsdicts.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'unbookings')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'unbooking')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'unbook')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'booked')",tsdicts.sql,SAME,,"[(['book'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'footklubber')",tsdicts.sql,SAME,,"[(['foot', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'footballklubber')",tsdicts.sql,SAME,,"[(['footballklubber', 'foot', 'ball', 'klubber', 'football', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'ballyklubber')",tsdicts.sql,SAME,,"[(['ball', 'klubber'],)]"
postgresql,postgresql,"SELECT ts_lexize('hunspell_num', 'footballyklubber')",tsdicts.sql,SAME,,"[(['foot', 'ball', 'klubber'],)]"
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY hunspell_invalid_1 ( 						Template=ispell, 						DictFile=hunspell_sample_long, 						AffFile=ispell_sample )",tsdicts.sql,SAME,,[]
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY hunspell_invalid_2 ( 						Template=ispell, 						DictFile=hunspell_sample_long, 						AffFile=hunspell_sample_num )",tsdicts.sql,SAME,,[]
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY hunspell_invalid_3 ( 						Template=ispell, 						DictFile=hunspell_sample_num, 						AffFile=ispell_sample )",tsdicts.sql,SAME,,[]
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY synonym ( 						Template=synonym, 						Synonyms=synonym_sample )",tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_lexize('synonym', 'PoStGrEs')",tsdicts.sql,SAME,,"[(['pgsql'],)]"
postgresql,postgresql,"SELECT ts_lexize('synonym', 'Gogle')",tsdicts.sql,SAME,,"[(['googl'],)]"
postgresql,postgresql,"SELECT ts_lexize('synonym', 'indices')",tsdicts.sql,SAME,,"[(['index'],)]"
postgresql,postgresql,SELECT dictinitoption FROM pg_ts_dict WHERE dictname = 'synonym',tsdicts.sql,SAME,,"[(""synonyms = 'synonym_sample'"",)]"
postgresql,postgresql,ALTER TEXT SEARCH DICTIONARY synonym (CaseSensitive = 1),tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_lexize('synonym', 'PoStGrEs')",tsdicts.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT dictinitoption FROM pg_ts_dict WHERE dictname = 'synonym',tsdicts.sql,SAME,,"[(""synonyms = 'synonym_sample', casesensitive = 1"",)]"
postgresql,postgresql,ALTER TEXT SEARCH DICTIONARY synonym (CaseSensitive = off),tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_lexize('synonym', 'PoStGrEs')",tsdicts.sql,SAME,,"[(['pgsql'],)]"
postgresql,postgresql,SELECT dictinitoption FROM pg_ts_dict WHERE dictname = 'synonym',tsdicts.sql,SAME,,"[(""synonyms = 'synonym_sample', casesensitive = 'off'"",)]"
postgresql,postgresql,"CREATE TEXT SEARCH DICTIONARY thesaurus (                         Template=thesaurus, 						DictFile=thesaurus_sample, 						Dictionary=english_stem )",tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_lexize('thesaurus', 'one')",tsdicts.sql,SAME,,"[(['1'],)]"
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION ispell_tst ( 						COPY=english ),tsdicts.sql,SAME,,[]
postgresql,postgresql,"ALTER TEXT SEARCH CONFIGURATION ispell_tst ALTER MAPPING FOR 	word, numword, asciiword, hword, numhword, asciihword, hword_part, hword_numpart, hword_asciipart 	WITH ispell, english_stem",tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT to_tsvector('ispell_tst', 'Booking the skies after rebookings for footballklubber from a foot')",tsdicts.sql,SAME,,"[(""'ball':7 'book':1,5 'booking':1,5 'foot':7,10 'football':7 'footballklubber':7 'klubber':7 'sky':3"",)]"
postgresql,postgresql,"SELECT to_tsquery('ispell_tst', 'footballklubber')",tsdicts.sql,SAME,,"[(""'footballklubber' | 'foot' & 'ball' & 'klubber' | 'football' & 'klubber'"",)]"
postgresql,postgresql,"SELECT to_tsquery('ispell_tst', 'footballyklubber:b & rebookings:A & sky')",tsdicts.sql,SAME,,"[(""'foot':B & 'ball':B & 'klubber':B & ( 'booking':A | 'book':A ) & 'sky'"",)]"
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION hunspell_tst ( 						COPY=ispell_tst ),tsdicts.sql,SAME,,[]
postgresql,postgresql,ALTER TEXT SEARCH CONFIGURATION hunspell_tst ALTER MAPPING 	REPLACE ispell WITH hunspell,tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT to_tsvector('hunspell_tst', 'Booking the skies after rebookings for footballklubber from a foot')",tsdicts.sql,SAME,,"[(""'ball':7 'book':1,5 'booking':1,5 'foot':7,10 'football':7 'footballklubber':7 'klubber':7 'sky':3"",)]"
postgresql,postgresql,"SELECT to_tsquery('hunspell_tst', 'footballklubber')",tsdicts.sql,SAME,,"[(""'footballklubber' | 'foot' & 'ball' & 'klubber' | 'football' & 'klubber'"",)]"
postgresql,postgresql,"SELECT to_tsquery('hunspell_tst', 'footballyklubber:b & rebookings:A & sky')",tsdicts.sql,SAME,,"[(""'foot':B & 'ball':B & 'klubber':B & ( 'booking':A | 'book':A ) & 'sky'"",)]"
postgresql,postgresql,"SELECT to_tsquery('hunspell_tst', 'footballyklubber:b <-> sky')",tsdicts.sql,SAME,,"[(""( 'foot':B & 'ball':B & 'klubber':B ) <-> 'sky'"",)]"
postgresql,postgresql,"SELECT phraseto_tsquery('hunspell_tst', 'footballyklubber sky')",tsdicts.sql,SAME,,"[(""( 'foot' & 'ball' & 'klubber' ) <-> 'sky'"",)]"
postgresql,postgresql,ALTER TEXT SEARCH CONFIGURATION hunspell_tst ALTER MAPPING 	REPLACE hunspell WITH hunspell_long,tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT to_tsvector('hunspell_tst', 'Booking the skies after rebookings for footballklubber from a foot')",tsdicts.sql,SAME,,"[(""'ball':7 'book':1,5 'booking':1,5 'foot':7,10 'football':7 'footballklubber':7 'klubber':7 'sky':3"",)]"
postgresql,postgresql,"SELECT to_tsquery('hunspell_tst', 'footballklubber')",tsdicts.sql,SAME,,"[(""'footballklubber' | 'foot' & 'ball' & 'klubber' | 'football' & 'klubber'"",)]"
postgresql,postgresql,"SELECT to_tsquery('hunspell_tst', 'footballyklubber:b & rebookings:A & sky')",tsdicts.sql,SAME,,"[(""'foot':B & 'ball':B & 'klubber':B & ( 'booking':A | 'book':A ) & 'sky'"",)]"
postgresql,postgresql,ALTER TEXT SEARCH CONFIGURATION hunspell_tst ALTER MAPPING 	REPLACE hunspell_long WITH hunspell_num,tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT to_tsvector('hunspell_tst', 'Booking the skies after rebookings for footballklubber from a foot')",tsdicts.sql,SAME,,"[(""'ball':7 'book':1,5 'booking':1,5 'foot':7,10 'football':7 'footballklubber':7 'klubber':7 'sky':3"",)]"
postgresql,postgresql,"SELECT to_tsquery('hunspell_tst', 'footballklubber')",tsdicts.sql,SAME,,"[(""'footballklubber' | 'foot' & 'ball' & 'klubber' | 'football' & 'klubber'"",)]"
postgresql,postgresql,"SELECT to_tsquery('hunspell_tst', 'footballyklubber:b & rebookings:A & sky')",tsdicts.sql,SAME,,"[(""'foot':B & 'ball':B & 'klubber':B & ( 'booking':A | 'book':A ) & 'sky'"",)]"
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION synonym_tst ( 						COPY=english ),tsdicts.sql,SAME,,[]
postgresql,postgresql,"ALTER TEXT SEARCH CONFIGURATION synonym_tst ALTER MAPPING FOR 	asciiword, hword_asciipart, asciihword 	WITH synonym, english_stem",tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT to_tsvector('synonym_tst', 'Postgresql is often called as postgres or pgsql and pronounced as postgre')",tsdicts.sql,SAME,,"[(""'call':4 'often':3 'pgsql':1,6,8,12 'pronounc':10"",)]"
postgresql,postgresql,"SELECT to_tsvector('synonym_tst', 'Most common mistake is to write Gogle instead of Google')",tsdicts.sql,SAME,,"[(""'common':2 'googl':7,10 'instead':8 'mistak':3 'write':6"",)]"
postgresql,postgresql,"SELECT to_tsvector('synonym_tst', 'Indexes or indices - Which is right plural form of index?')",tsdicts.sql,SAME,,"[(""'form':8 'index':1,3,10 'plural':7 'right':6"",)]"
postgresql,postgresql,"SELECT to_tsquery('synonym_tst', 'Index & indices')",tsdicts.sql,SAME,,"[(""'index' & 'index':*"",)]"
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION thesaurus_tst ( 						COPY=synonym_tst ),tsdicts.sql,SAME,,[]
postgresql,postgresql,"ALTER TEXT SEARCH CONFIGURATION thesaurus_tst ALTER MAPPING FOR 	asciiword, hword_asciipart, asciihword 	WITH synonym, thesaurus, english_stem",tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT to_tsvector('thesaurus_tst', 'one postgres one two one two three one')",tsdicts.sql,SAME,,"[(""'1':1,5 '12':3 '123':4 'pgsql':2"",)]"
postgresql,postgresql,"SELECT to_tsvector('thesaurus_tst', 'Supernovae star is very new star and usually called supernovae (abbreviation SN)')",tsdicts.sql,SAME,,"[(""'abbrevi':10 'call':8 'new':4 'sn':1,9,11 'star':5 'usual':7"",)]"
postgresql,postgresql,"SELECT to_tsvector('thesaurus_tst', 'Booking tickets is looking like a booking a tickets')",tsdicts.sql,SAME,,"[(""'card':3,10 'invit':2,9 'like':6 'look':5 'order':1,8"",)]"
postgresql,postgresql,CREATE TEXT SEARCH CONFIGURATION dummy_tst (COPY=english),tsdicts.sql,SAME,,[]
postgresql,postgresql,"ALTER TEXT SEARCH CONFIGURATION dummy_tst   ALTER MAPPING FOR word, word WITH ispell",tsdicts.sql,SAME,,[]
postgresql,postgresql,"ALTER TEXT SEARCH CONFIGURATION dummy_tst   DROP MAPPING FOR word, word",tsdicts.sql,SAME,,[]
postgresql,postgresql,"ALTER TEXT SEARCH CONFIGURATION dummy_tst   DROP MAPPING IF EXISTS FOR word, word",tsdicts.sql,SAME,,[]
postgresql,postgresql,"ALTER TEXT SEARCH CONFIGURATION dummy_tst   ADD MAPPING FOR word, word WITH ispell",tsdicts.sql,SAME,,[]
postgresql,postgresql,DROP TEXT SEARCH CONFIGURATION dummy_tst,tsdicts.sql,SAME,,[]
postgresql,postgresql,"SELECT oid, prsname FROM pg_ts_parser WHERE prsnamespace = 0 OR prsstart = 0 OR prstoken = 0 OR prsend = 0 OR       prslextype = 0",tsearch.sql,SAME,,[]
postgresql,postgresql,"SELECT oid, dictname FROM pg_ts_dict WHERE dictnamespace = 0 OR dictowner = 0 OR dicttemplate = 0",tsearch.sql,SAME,,[]
postgresql,postgresql,"SELECT oid, tmplname FROM pg_ts_template WHERE tmplnamespace = 0 OR tmpllexize = 0",tsearch.sql,SAME,,[]
postgresql,postgresql,"SELECT oid, cfgname FROM pg_ts_config WHERE cfgnamespace = 0 OR cfgowner = 0 OR cfgparser = 0",tsearch.sql,SAME,,[]
postgresql,postgresql,"SELECT mapcfg, maptokentype, mapseqno FROM pg_ts_config_map WHERE mapcfg = 0 OR mapdict = 0",tsearch.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM   ( SELECT oid AS cfgid, (ts_token_type(cfgparser)).tokid AS tokid     FROM pg_ts_config ) AS tt RIGHT JOIN pg_ts_config_map AS m     ON (tt.cfgid=m.mapcfg AND tt.tokid=m.maptokentype) WHERE     tt.cfgid IS NULL OR tt.tokid IS NULL",tsearch.sql,SAME,,[]
postgresql,postgresql,ANALYZE test_tsvector,tsearch.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}')",tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,create index wowidx on test_tsvector using gist (a),tsearch.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan=OFF,tsearch.sql,SAME,,[]
postgresql,postgresql,SET enable_indexscan=ON,tsearch.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan=OFF,tsearch.sql,SAME,,[]
postgresql,postgresql,explain (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[('Aggregate',), ('  ->  Index Scan using wowidx on test_tsvector',), (""        Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)"",)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}')",tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SET enable_indexscan=OFF,tsearch.sql,SAME,,[]
postgresql,postgresql,SET enable_bitmapscan=ON,tsearch.sql,SAME,,[]
postgresql,postgresql,explain (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), (""        Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)"",), ('        ->  Bitmap Index Scan on wowidx',), (""              Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)"",)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}')",tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,CREATE INDEX wowidx2 ON test_tsvector USING gist (a tsvector_ops(siglen=1)),tsearch.sql,SAME,,[]
postgresql,postgresql,DROP INDEX wowidx,tsearch.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), (""        Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)"",), ('        ->  Bitmap Index Scan on wowidx2',), (""              Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)"",)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}')",tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,DROP INDEX wowidx2,tsearch.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX wowidx ON test_tsvector USING gist (a tsvector_ops(siglen=484)),tsearch.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), (""        Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)"",), ('        ->  Bitmap Index Scan on wowidx',), (""              Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)"",)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}')",tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,RESET enable_seqscan,tsearch.sql,SAME,,[]
postgresql,postgresql,RESET enable_indexscan,tsearch.sql,SAME,,[]
postgresql,postgresql,RESET enable_bitmapscan,tsearch.sql,SAME,,[]
postgresql,postgresql,DROP INDEX wowidx,tsearch.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX wowidx ON test_tsvector USING gin (a),tsearch.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan=OFF,tsearch.sql,SAME,,[]
postgresql,postgresql,explain (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), (""        Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)"",), ('        ->  Bitmap Index Scan on wowidx',), (""              Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)"",)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}')",tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT count(*) FROM test_tsvector WHERE a @@ '!qh',tsearch.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), (""        Recheck Cond: (a @@ '!''qh'''::tsquery)"",), ('        ->  Bitmap Index Scan on wowidx',), (""              Index Cond: (a @@ '!''qh'''::tsquery)"",)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ '!qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr' AND a @@ '!qh',tsearch.sql,SAME,,"[('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), (""        Recheck Cond: ((a @@ '''wr'''::tsquery) AND (a @@ '!''qh'''::tsquery))"",), ('        ->  Bitmap Index Scan on wowidx',), (""              Index Cond: ((a @@ '''wr'''::tsquery) AND (a @@ '!''qh'''::tsquery))"",)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ 'wr' AND a @@ '!qh',tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,RESET enable_seqscan,tsearch.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM ts_stat('SELECT a FROM test_tsvector') ORDER BY ndoc DESC, nentry DESC, word LIMIT 10",tsearch.sql,SAME,,"[('DFG', 1, 4), ('FGH', 1, 1)]"
postgresql,postgresql,"SELECT * FROM ts_stat('SELECT a FROM test_tsvector', 'AB') ORDER BY ndoc DESC, nentry DESC, word",tsearch.sql,SAME,,"[('DFG', 1, 2)]"
postgresql,postgresql,"SELECT ts_lexize('english_stem', 'skies')",tsearch.sql,SAME,,"[(['sky'],)]"
postgresql,postgresql,"SELECT ts_lexize('english_stem', 'identity')",tsearch.sql,SAME,,"[(['ident'],)]"
postgresql,postgresql,SELECT * FROM ts_token_type('default'),tsearch.sql,SAME,,"[(1, 'asciiword', 'Word, all ASCII'), (2, 'word', 'Word, all letters'), (3, 'numword', 'Word, letters and digits'), (4, 'email', 'Email address'), (5, 'url', 'URL'), (6, 'host', 'Host'), (7, 'sfloat', 'Scientific notation'), (8, 'version', 'Version number'), (9, 'hword_numpart', 'Hyphenated word part, letters and digits'), (10, 'hword_part', 'Hyphenated word part, all letters'), (11, 'hword_asciipart', 'Hyphenated word part, all ASCII'), (12, 'blank', 'Space symbols'), (13, 'tag', 'XML tag'), (14, 'protocol', 'Protocol head'), (15, 'numhword', 'Hyphenated word, letters and digits'), (16, 'asciihword', 'Hyphenated word, all ASCII'), (17, 'hword', 'Hyphenated word, all letters'), (18, 'url_path', 'URL path'), (19, 'file', 'File or path name'), (20, 'float', 'Decimal notation'), (21, 'int', 'Signed integer'), (22, 'uint', 'Unsigned integer'), (23, 'entity', 'XML entity')]"
postgresql,postgresql,"SELECT * FROM ts_parse('default', '345 qwe@efd.r '' http://www.com/ http://aew.werc.ewr/?ad=qwe&dw 1aew.werc.ewr/?ad=qwe&dw 2aew.werc.ewr http://3aew.werc.ewr/?ad=qwe&dw http://4aew.werc.ewr http://5aew.werc.ewr:8100/?  ad=qwe&dw 6aew.werc.ewr:8100/?ad=qwe&dw 7aew.werc.ewr:8100/?ad=qwe&dw=%20%32 +4.0e-10 qwe qwe qwqwe 234.435 455 5.005 teodor@stack.net teodor@123-stack.net 123_teodor@stack.net 123-teodor@stack.net qwe-wer asdf <fr>qwer jf sdjk<we hjwer <werrwe> ewr1> ewri2 <a href=""qwe<qwe>""> /usr/local/fff /awdf/dwqe/4325 rewt/ewr wefjn /wqe-324/ewr gist.h gist.h.c gist.c. readline 4.2 4.2. 4.2, readline-4.2 readline-4.2. 234 <i <b> wow  < jqw <> qwerty')",tsearch.sql,SAME,,"[(22, '345'), (12, ' '), (1, 'qwe'), (12, '@'), (19, 'efd.r'), (12, "" ' ""), (14, 'http://'), (6, 'www.com'), (12, '/ '), (14, 'http://'), (5, 'aew.werc.ewr/?ad=qwe&dw'), (6, 'aew.werc.ewr'), (18, '/?ad=qwe&dw'), (12, ' '), (5, '1aew.werc.ewr/?ad=qwe&dw'), (6, '1aew.werc.ewr'), (18, '/?ad=qwe&dw'), (12, ' '), (6, '2aew.werc.ewr'), (12, ' '), (14, 'http://'), (5, '3aew.werc.ewr/?ad=qwe&dw'), (6, '3aew.werc.ewr'), (18, '/?ad=qwe&dw'), (12, ' '), (14, 'http://'), (6, '4aew.werc.ewr'), (12, ' '), (14, 'http://'), (5, '5aew.werc.ewr:8100/?'), (6, '5aew.werc.ewr:8100'), (18, '/?'), (12, '  '), (1, 'ad'), (12, '='), (1, 'qwe'), (12, '&'), (1, 'dw'), (12, ' '), (5, '6aew.werc.ewr:8100/?ad=qwe&dw'), (6, '6aew.werc.ewr:8100'), (18, '/?ad=qwe&dw'), (12, ' '), (5, '7aew.werc.ewr:8100/?ad=qwe&dw=%20%32'), (6, '7aew.werc.ewr:8100'), (18, '/?ad=qwe&dw=%20%32'), (12, ' '), (7, '+4.0e-10'), (12, ' '), (1, 'qwe'), (12, ' '), (1, 'qwe'), (12, ' '), (1, 'qwqwe'), (12, ' '), (20, '234.435'), (12, ' '), (22, '455'), (12, ' '), (20, '5.005'), (12, ' '), (4, 'teodor@stack.net'), (12, ' '), (4, 'teodor@123-stack.net'), (12, ' '), (4, '123_teodor@stack.net'), (12, ' '), (4, '123-teodor@stack.net'), (12, ' '), (16, 'qwe-wer'), (11, 'qwe'), (12, '-'), (11, 'wer'), (12, ' '), (1, 'asdf'), (12, ' '), (13, '<fr>'), (1, 'qwer'), (12, ' '), (1, 'jf'), (12, ' '), (1, 'sdjk'), (12, '<'), (1, 'we'), (12, ' '), (1, 'hjwer'), (12, ' '), (13, '<werrwe>'), (12, ' '), (3, 'ewr1'), (12, '> '), (3, 'ewri2'), (12, ' '), (13, '<a href=""qwe<qwe>"">'), (12, '\n'), (19, '/usr/local/fff'), (12, ' '), (19, '/awdf/dwqe/4325'), (12, ' '), (19, 'rewt/ewr'), (12, ' '), (1, 'wefjn'), (12, ' '), (19, '/wqe-324/ewr'), (12, ' '), (19, 'gist.h'), (12, ' '), (19, 'gist.h.c'), (12, ' '), (19, 'gist.c'), (12, '. '), (1, 'readline'), (12, ' '), (20, '4.2'), (12, ' '), (20, '4.2'), (12, '. '), (20, '4.2'), (12, ', '), (1, 'readline'), (20, '-4.2'), (12, ' '), (1, 'readline'), (20, '-4.2'), (12, '. '), (22, '234'), (12, '\n'), (12, '<'), (1, 'i'), (12, ' '), (13, '<b>'), (12, ' '), (1, 'wow'), (12, '  '), (12, '< '), (1, 'jqw'), (12, ' '), (12, '<> '), (1, 'qwerty')]"
postgresql,postgresql,"SELECT to_tsvector('english', '345 qwe@efd.r '' http://www.com/ http://aew.werc.ewr/?ad=qwe&dw 1aew.werc.ewr/?ad=qwe&dw 2aew.werc.ewr http://3aew.werc.ewr/?ad=qwe&dw http://4aew.werc.ewr http://5aew.werc.ewr:8100/?  ad=qwe&dw 6aew.werc.ewr:8100/?ad=qwe&dw 7aew.werc.ewr:8100/?ad=qwe&dw=%20%32 +4.0e-10 qwe qwe qwqwe 234.435 455 5.005 teodor@stack.net teodor@123-stack.net 123_teodor@stack.net 123-teodor@stack.net qwe-wer asdf <fr>qwer jf sdjk<we hjwer <werrwe> ewr1> ewri2 <a href=""qwe<qwe>""> /usr/local/fff /awdf/dwqe/4325 rewt/ewr wefjn /wqe-324/ewr gist.h gist.h.c gist.c. readline 4.2 4.2. 4.2, readline-4.2 readline-4.2. 234 <i <b> wow  < jqw <> qwerty')",tsearch.sql,SAME,,"[(""'+4.0e-10':28 '-4.2':63,65 '/?':18 '/?ad=qwe&dw':7,10,14,24 '/?ad=qwe&dw=%20%32':27 '/awdf/dwqe/4325':51 '/usr/local/fff':50 '/wqe-324/ewr':54 '123-teodor@stack.net':38 '123_teodor@stack.net':37 '1aew.werc.ewr':9 '1aew.werc.ewr/?ad=qwe&dw':8 '234':66 '234.435':32 '2aew.werc.ewr':11 '345':1 '3aew.werc.ewr':13 '3aew.werc.ewr/?ad=qwe&dw':12 '4.2':59,60,61 '455':33 '4aew.werc.ewr':15 '5.005':34 '5aew.werc.ewr:8100':17 '5aew.werc.ewr:8100/?':16 '6aew.werc.ewr:8100':23 '6aew.werc.ewr:8100/?ad=qwe&dw':22 '7aew.werc.ewr:8100':26 '7aew.werc.ewr:8100/?ad=qwe&dw=%20%32':25 'ad':19 'aew.werc.ewr':6 'aew.werc.ewr/?ad=qwe&dw':5 'asdf':42 'dw':21 'efd.r':3 'ewr1':48 'ewri2':49 'gist.c':57 'gist.h':55 'gist.h.c':56 'hjwer':47 'jf':44 'jqw':69 'qwe':2,20,29,30,40 'qwe-wer':39 'qwer':43 'qwerti':70 'qwqwe':31 'readlin':58,62,64 'rewt/ewr':52 'sdjk':45 'teodor@123-stack.net':36 'teodor@stack.net':35 'wefjn':53 'wer':41 'wow':68 'www.com':4"",)]"
postgresql,postgresql,"SELECT length(to_tsvector('english', '345 qwe@efd.r '' http://www.com/ http://aew.werc.ewr/?ad=qwe&dw 1aew.werc.ewr/?ad=qwe&dw 2aew.werc.ewr http://3aew.werc.ewr/?ad=qwe&dw http://4aew.werc.ewr http://5aew.werc.ewr:8100/?  ad=qwe&dw 6aew.werc.ewr:8100/?ad=qwe&dw 7aew.werc.ewr:8100/?ad=qwe&dw=%20%32 +4.0e-10 qwe qwe qwqwe 234.435 455 5.005 teodor@stack.net teodor@123-stack.net 123_teodor@stack.net 123-teodor@stack.net qwe-wer asdf <fr>qwer jf sdjk<we hjwer <werrwe> ewr1> ewri2 <a href=""qwe<qwe>""> /usr/local/fff /awdf/dwqe/4325 rewt/ewr wefjn /wqe-324/ewr gist.h gist.h.c gist.c. readline 4.2 4.2. 4.2, readline-4.2 readline-4.2. 234 <i <b> wow  < jqw <> qwerty'))",tsearch.sql,SAME,,"[(56,)]"
postgresql,postgresql,"SELECT * from ts_debug('english', 'http://www.harewoodsolutions.co.uk/press.aspx</span>')",tsearch.sql,SAME,,"[('protocol', 'Protocol head', 'http://', '{}', None, None), ('url', 'URL', 'www.harewoodsolutions.co.uk/press.aspx', '{simple}', 'simple', ['www.harewoodsolutions.co.uk/press.aspx']), ('host', 'Host', 'www.harewoodsolutions.co.uk', '{simple}', 'simple', ['www.harewoodsolutions.co.uk']), ('url_path', 'URL path', '/press.aspx', '{simple}', 'simple', ['/press.aspx']), ('tag', 'XML tag', '</span>', '{}', None, None)]"
postgresql,postgresql,"SELECT * from ts_debug('english', 'http://aew.wer0c.ewr/id?ad=qwe&dw<span>')",tsearch.sql,SAME,,"[('protocol', 'Protocol head', 'http://', '{}', None, None), ('url', 'URL', 'aew.wer0c.ewr/id?ad=qwe&dw', '{simple}', 'simple', ['aew.wer0c.ewr/id?ad=qwe&dw']), ('host', 'Host', 'aew.wer0c.ewr', '{simple}', 'simple', ['aew.wer0c.ewr']), ('url_path', 'URL path', '/id?ad=qwe&dw', '{simple}', 'simple', ['/id?ad=qwe&dw']), ('tag', 'XML tag', '<span>', '{}', None, None)]"
postgresql,postgresql,"SELECT * from ts_debug('english', 'http://5aew.werc.ewr:8100/?')",tsearch.sql,SAME,,"[('protocol', 'Protocol head', 'http://', '{}', None, None), ('url', 'URL', '5aew.werc.ewr:8100/?', '{simple}', 'simple', ['5aew.werc.ewr:8100/?']), ('host', 'Host', '5aew.werc.ewr:8100', '{simple}', 'simple', ['5aew.werc.ewr:8100']), ('url_path', 'URL path', '/?', '{simple}', 'simple', ['/?'])]"
postgresql,postgresql,"SELECT * from ts_debug('english', '5aew.werc.ewr:8100/?xx')",tsearch.sql,SAME,,"[('url', 'URL', '5aew.werc.ewr:8100/?xx', '{simple}', 'simple', ['5aew.werc.ewr:8100/?xx']), ('host', 'Host', '5aew.werc.ewr:8100', '{simple}', 'simple', ['5aew.werc.ewr:8100']), ('url_path', 'URL path', '/?xx', '{simple}', 'simple', ['/?xx'])]"
postgresql,postgresql,"SELECT token, alias,   dictionaries, dictionaries is null as dnull, array_dims(dictionaries) as ddims,   lexemes, lexemes is null as lnull, array_dims(lexemes) as ldims from ts_debug('english', 'a title')",tsearch.sql,SAME,,"[('a', 'asciiword', '{english_stem}', False, '[1:1]', [], False, None), (' ', 'blank', '{}', False, None, None, True, None), ('title', 'asciiword', '{english_stem}', False, '[1:1]', ['titl'], False, '[1:1]')]"
postgresql,postgresql,"SELECT to_tsquery('english', 'qwe & sKies ')",tsearch.sql,SAME,,"[(""'qwe' & 'sky'"",)]"
postgresql,postgresql,"SELECT to_tsquery('simple', 'qwe & sKies ')",tsearch.sql,SAME,,"[(""'qwe' & 'skies'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '''the wether'':dc & ''           sKies '':BC ')",tsearch.sql,SAME,,"[(""'wether':CD & 'sky':BC"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 'asd&(and|fghj)')",tsearch.sql,SAME,,"[(""'asd' & 'fghj'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(asd&and)|fghj')",tsearch.sql,SAME,,"[(""'asd' | 'fghj'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(asd&!and)|fghj')",tsearch.sql,SAME,,"[(""'asd' | 'fghj'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(the|and&(i&1))&fghj')",tsearch.sql,SAME,,"[(""'1' & 'fghj'"",)]"
postgresql,postgresql,"SELECT plainto_tsquery('english', 'the and z 1))& fghj')",tsearch.sql,SAME,,"[(""'z' & '1' & 'fghj'"",)]"
postgresql,postgresql,"SELECT plainto_tsquery('english', 'foo bar') && plainto_tsquery('english', 'asd')",tsearch.sql,SAME,,"[(""'foo' & 'bar' & 'asd'"",)]"
postgresql,postgresql,"SELECT plainto_tsquery('english', 'foo bar') || plainto_tsquery('english', 'asd fg')",tsearch.sql,SAME,,"[(""'foo' & 'bar' | 'asd' & 'fg'"",)]"
postgresql,postgresql,"SELECT plainto_tsquery('english', 'foo bar') || !!plainto_tsquery('english', 'asd fg')",tsearch.sql,SAME,,"[(""'foo' & 'bar' | !( 'asd' & 'fg' )"",)]"
postgresql,postgresql,"SELECT plainto_tsquery('english', 'foo bar') && 'asd | fg'",tsearch.sql,SAME,,"[(""'foo' & 'bar' & ( 'asd' | 'fg' )"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '!(a & !b) & c')",tsearch.sql,SAME,,"[(""!!'b' & 'c'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '!(a & !b)')",tsearch.sql,SAME,,"[(""!!'b'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(1 <-> 2) <-> a')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(1 <-> a) <-> 2')",tsearch.sql,SAME,,"[(""'1' <2> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(a <-> 1) <-> 2')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 'a <-> (1 <-> 2)')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '1 <-> (a <-> 2)')",tsearch.sql,SAME,,"[(""'1' <2> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '1 <-> (2 <-> a)')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(1 <-> 2) <3> a')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(1 <-> a) <3> 2')",tsearch.sql,SAME,,"[(""'1' <4> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(a <-> 1) <3> 2')",tsearch.sql,SAME,,"[(""'1' <3> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 'a <3> (1 <-> 2)')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '1 <3> (a <-> 2)')",tsearch.sql,SAME,,"[(""'1' <4> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '1 <3> (2 <-> a)')",tsearch.sql,SAME,,"[(""'1' <3> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(1 <3> 2) <-> a')",tsearch.sql,SAME,,"[(""'1' <3> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(1 <3> a) <-> 2')",tsearch.sql,SAME,,"[(""'1' <4> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(a <3> 1) <-> 2')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 'a <-> (1 <3> 2)')",tsearch.sql,SAME,,"[(""'1' <3> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '1 <-> (a <3> 2)')",tsearch.sql,SAME,,"[(""'1' <4> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '1 <-> (2 <3> a)')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '((a <-> 1) <-> 2) <-> s')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(2 <-> (a <-> 1)) <-> s')",tsearch.sql,SAME,,"[(""'2' <2> '1'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '((1 <-> a) <-> 2) <-> s')",tsearch.sql,SAME,,"[(""'1' <2> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(2 <-> (1 <-> a)) <-> s')",tsearch.sql,SAME,,"[(""'2' <-> '1'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 's <-> ((a <-> 1) <-> 2)')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 's <-> (2 <-> (a <-> 1))')",tsearch.sql,SAME,,"[(""'2' <2> '1'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 's <-> ((1 <-> a) <-> 2)')",tsearch.sql,SAME,,"[(""'1' <2> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 's <-> (2 <-> (1 <-> a))')",tsearch.sql,SAME,,"[(""'2' <-> '1'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '((a <-> 1) <-> s) <-> 2')",tsearch.sql,SAME,,"[(""'1' <2> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(s <-> (a <-> 1)) <-> 2')",tsearch.sql,SAME,,"[(""'1' <-> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '((1 <-> a) <-> s) <-> 2')",tsearch.sql,SAME,,"[(""'1' <3> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '(s <-> (1 <-> a)) <-> 2')",tsearch.sql,SAME,,"[(""'1' <2> '2'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '2 <-> ((a <-> 1) <-> s)')",tsearch.sql,SAME,,"[(""'2' <2> '1'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '2 <-> (s <-> (a <-> 1))')",tsearch.sql,SAME,,"[(""'2' <3> '1'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '2 <-> ((1 <-> a) <-> s)')",tsearch.sql,SAME,,"[(""'2' <-> '1'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '2 <-> (s <-> (1 <-> a))')",tsearch.sql,SAME,,"[(""'2' <2> '1'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 'foo <-> (a <-> (the <-> bar))')",tsearch.sql,SAME,,"[(""'foo' <3> 'bar'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', '((foo <-> a) <-> the) <-> bar')",tsearch.sql,SAME,,"[(""'foo' <3> 'bar'"",)]"
postgresql,postgresql,"SELECT to_tsquery('english', 'foo <-> a <-> the <-> bar')",tsearch.sql,SAME,,"[(""'foo' <3> 'bar'"",)]"
postgresql,postgresql,"SELECT phraseto_tsquery('english', 'PostgreSQL can be extended by the user in many ways')",tsearch.sql,SAME,,"[(""'postgresql' <3> 'extend' <3> 'user' <2> 'mani' <-> 'way'"",)]"
postgresql,postgresql,"SELECT ts_rank_cd(strip(to_tsvector('both stripped')),                   to_tsquery('both & stripped'))",tsearch.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT ts_rank_cd(to_tsvector('unstripped') || strip(to_tsvector('stripped')),                   to_tsquery('unstripped & stripped'))",tsearch.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT ts_headline('english', 'Lorem ipsum urna.  Nullam nullam ullamcorper urna.', to_tsquery('english','Lorem') && phraseto_tsquery('english','ullamcorper urna'), 'MaxWords=100, MinWords=1')",tsearch.sql,SAME,,"[('<b>Lorem</b> ipsum <b>urna</b>.  Nullam nullam <b>ullamcorper</b> <b>urna</b>',)]"
postgresql,postgresql,"SELECT ts_headline('english', 'Lorem ipsum urna.  Nullam nullam ullamcorper urna.', phraseto_tsquery('english','ullamcorper urna'), 'MaxWords=100, MinWords=5')",tsearch.sql,SAME,,"[('<b>urna</b>.  Nullam nullam <b>ullamcorper</b> <b>urna</b>.',)]"
postgresql,postgresql,"SELECT ts_headline('simple', '1 2 3 1 3'::text, '1 <-> 3', 'MaxWords=2, MinWords=1')",tsearch.sql,SAME,,"[('<b>1</b> <b>3</b>',)]"
postgresql,postgresql,"SELECT ts_headline('simple', '1 2 3 1 3'::text, '1 & 3', 'MaxWords=4, MinWords=1')",tsearch.sql,SAME,,"[('<b>1</b> 2 <b>3</b>',)]"
postgresql,postgresql,"SELECT ts_headline('simple', '1 2 3 1 3'::text, '1 <-> 3', 'MaxWords=4, MinWords=1')",tsearch.sql,SAME,,"[('<b>1</b> <b>3</b>',)]"
postgresql,postgresql,"SELECT ts_headline('english', 'Lorem ipsum urna.  Nullam nullam ullamcorper urna.', to_tsquery('english','Lorem') && phraseto_tsquery('english','ullamcorper urna'), 'MaxFragments=100, MaxWords=100, MinWords=1')",tsearch.sql,SAME,,"[('<b>Lorem</b> ipsum <b>urna</b>.  Nullam nullam <b>ullamcorper</b> <b>urna</b>',)]"
postgresql,postgresql,"SELECT ts_headline('english', '', to_tsquery('english', ''))",tsearch.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT ts_headline('english', 'foo bar', to_tsquery('english', ''))",tsearch.sql,SAME,,"[('foo bar',)]"
postgresql,postgresql,ALTER TABLE test_tsquery ADD COLUMN sample tsquery,tsearch.sql,SAME,,[]
postgresql,postgresql,"UPDATE test_tsquery SET sample = to_tsquery('english', txtsample::text)",tsearch.sql,SAME,,[]
postgresql,postgresql,SET enable_seqscan=OFF,tsearch.sql,SAME,,[]
postgresql,postgresql,RESET enable_seqscan,tsearch.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_rewrite('foo & bar & qq & new & york',  'new & york'::tsquery, 'big & apple | nyc | new & york & city')",tsearch.sql,SAME,,"[(""'foo' & 'bar' & 'qq' & ( 'city' & 'new' & 'york' | 'nyc' | 'big' & 'apple' )"",)]"
postgresql,postgresql,"SELECT ts_rewrite(ts_rewrite('new & !york ', 'york', '!jersey'),                   'jersey', 'mexico')",tsearch.sql,SAME,,"[(""'new' & !!'mexico'"",)]"
postgresql,postgresql,"SELECT ts_rewrite(to_tsquery('5 & (6 | 5)'), to_tsquery('5'), to_tsquery(''))",tsearch.sql,SAME,,"[(""'6'"",)]"
postgresql,postgresql,"SELECT ts_rewrite(to_tsquery('!5'), to_tsquery('5'), to_tsquery(''))",tsearch.sql,SAME,,"[('',)]"
postgresql,postgresql,SET enable_seqscan=OFF,tsearch.sql,SAME,,[]
postgresql,postgresql,"SELECT ts_rewrite(tsquery_phrase('foo', 'foo'), 'foo', 'bar | baz')",tsearch.sql,SAME,,"[(""( 'bar' | 'baz' ) <-> ( 'bar' | 'baz' )"",)]"
postgresql,postgresql,"SELECT to_tsvector('foo bar') @@   ts_rewrite(tsquery_phrase('foo', 'foo'), 'foo', 'bar | baz')",tsearch.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT to_tsvector('bar baz') @@   ts_rewrite(tsquery_phrase('foo', 'foo'), 'foo', 'bar | baz')",tsearch.sql,SAME,,"[(True,)]"
postgresql,postgresql,RESET enable_seqscan,tsearch.sql,SAME,,[]
postgresql,postgresql,SET default_text_search_config=simple,tsearch.sql,SAME,,[]
postgresql,postgresql,SELECT to_tsvector('SKIES My booKs'),tsearch.sql,SAME,,"[(""'books':3 'my':2 'skies':1"",)]"
postgresql,postgresql,SELECT plainto_tsquery('SKIES My booKs'),tsearch.sql,SAME,,"[(""'skies' & 'my' & 'books'"",)]"
postgresql,postgresql,SELECT to_tsquery('SKIES & My | booKs'),tsearch.sql,SAME,,"[(""'skies' & 'my' | 'books'"",)]"
postgresql,postgresql,SET default_text_search_config=english,tsearch.sql,SAME,,[]
postgresql,postgresql,SELECT to_tsvector('SKIES My booKs'),tsearch.sql,SAME,,"[(""'book':3 'sky':1"",)]"
postgresql,postgresql,SELECT plainto_tsquery('SKIES My booKs'),tsearch.sql,SAME,,"[(""'sky' & 'book'"",)]"
postgresql,postgresql,SELECT to_tsquery('SKIES & My | booKs'),tsearch.sql,SAME,,"[(""'sky' | 'book'"",)]"
postgresql,postgresql,"CREATE TRIGGER tsvectorupdate BEFORE UPDATE OR INSERT ON test_tsvector FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger(a, 'pg_catalog.english', t)",tsearch.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ to_tsquery('345&qwerty'),tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ to_tsquery('345&qwerty'),tsearch.sql,SAME,,"[(1,)]"
postgresql,postgresql,UPDATE test_tsvector SET t = null WHERE t = '345 qwerty',tsearch.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ to_tsquery('345&qwerty'),tsearch.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT count(*) FROM test_tsvector WHERE a @@ to_tsquery('345&qwerty'),tsearch.sql,SAME,,"[(1,)]"
postgresql,postgresql,"explain (costs off) select * from test_tsquery, to_tsquery('new') q where txtsample @@ q",tsearch.sql,SAME,,"[('Nested Loop',), ('  Join Filter: (test_tsquery.txtsample @@ q.q)',), ('  ->  Function Scan on to_tsquery q',), ('  ->  Seq Scan on test_tsquery',)]"
postgresql,postgresql,"explain (costs off) select * from test_tsquery, to_tsquery('english', 'new') q where txtsample @@ q",tsearch.sql,SAME,,"[('Seq Scan on test_tsquery',), (""  Filter: (txtsample @@ '''new'''::tsquery)"",)]"
postgresql,postgresql,create temp table pendtest (ts tsvector),tsearch.sql,SAME,,[]
postgresql,postgresql,create index pendtest_idx on pendtest using gin(ts),tsearch.sql,SAME,,[]
postgresql,postgresql,select * from pendtest where 'ipsu:*'::tsquery @@ ts,tsearch.sql,SAME,,"[(""'ipsum':2 'lore':1"",)]"
postgresql,postgresql,select * from pendtest where 'ipsa:*'::tsquery @@ ts,tsearch.sql,SAME,,"[(""'ipsam':2 'lore':1"",)]"
postgresql,postgresql,select * from pendtest where 'ips:*'::tsquery @@ ts,tsearch.sql,SAME,,"[(""'ipsam':2 'lore':1"",), (""'ipsum':2 'lore':1"",)]"
postgresql,postgresql,select * from pendtest where 'ipt:*'::tsquery @@ ts,tsearch.sql,SAME,,[]
postgresql,postgresql,select * from pendtest where 'ipi:*'::tsquery @@ ts,tsearch.sql,SAME,,[]
postgresql,postgresql,create temp table phrase_index_test(fts tsvector),tsearch.sql,SAME,,[]
postgresql,postgresql,create index phrase_index_test_idx on phrase_index_test using gin(fts),tsearch.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan = off,tsearch.sql,SAME,,[]
postgresql,postgresql,"select * from phrase_index_test where fts @@ phraseto_tsquery('english', 'fat cat')",tsearch.sql,SAME,,"[(""'cat':3 'eaten':6 'fat':2 'rat':8"",)]"
postgresql,postgresql,set enable_seqscan = on,tsearch.sql,SAME,,[]
postgresql,postgresql,"select websearch_to_tsquery('simple', 'I have a fat:*ABCD cat')",tsearch.sql,SAME,,"[(""'i' & 'have' & 'a' & 'fat' & 'abcd' & 'cat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'orange:**AABBCCDD')",tsearch.sql,SAME,,"[(""'orange' & 'aabbccdd'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat:A!cat:B|rat:C<')",tsearch.sql,SAME,,"[(""'fat' & 'a' & 'cat' & 'b' & 'rat' & 'c'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat:A : cat:B')",tsearch.sql,SAME,,"[(""'fat' & 'a' & 'cat' & 'b'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat*rat')",tsearch.sql,SAME,,"[(""'fat' <-> 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat-rat')",tsearch.sql,SAME,,"[(""'fat-rat' <-> 'fat' <-> 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat_rat')",tsearch.sql,SAME,,"[(""'fat' <-> 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc : def')",tsearch.sql,SAME,,"[(""'abc' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc:def')",tsearch.sql,SAME,,"[(""'abc' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'a:::b')",tsearch.sql,SAME,,"[(""'a' & 'b'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc:d')",tsearch.sql,SAME,,"[(""'abc' & 'd'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', ':')",tsearch.sql,SAME,,"[('',)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc & def')",tsearch.sql,SAME,,"[(""'abc' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc | def')",tsearch.sql,SAME,,"[(""'abc' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc <-> def')",tsearch.sql,SAME,,"[(""'abc' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc (pg or class)')",tsearch.sql,SAME,,"[(""'abc' & 'pg' | 'class'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'My brand new smartphone')",tsearch.sql,SAME,,"[(""'brand' & 'new' & 'smartphon'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'My brand ""new smartphone""')",tsearch.sql,SAME,,"[(""'brand' & 'new' <-> 'smartphon'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'My brand ""new -smartphone""')",tsearch.sql,SAME,,"[(""'brand' & 'new' <-> 'smartphon'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'cat or rat')",tsearch.sql,SAME,,"[(""'cat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'cat OR rat')",tsearch.sql,SAME,,"[(""'cat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'cat ""OR"" rat')",tsearch.sql,SAME,,"[(""'cat' & 'or' & 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'cat OR')",tsearch.sql,SAME,,"[(""'cat' & 'or'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'OR rat')",tsearch.sql,SAME,,"[(""'or' & 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', '""fat cat OR rat""')",tsearch.sql,SAME,,"[(""'fat' <-> 'cat' <-> 'or' <-> 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat (cat OR rat')",tsearch.sql,SAME,,"[(""'fat' & 'cat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'or OR or')",tsearch.sql,SAME,,"[(""'or' | 'or'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', '""fat cat""or""fat rat""')",tsearch.sql,SAME,,"[(""'fat' <-> 'cat' | 'fat' <-> 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat or(rat')",tsearch.sql,SAME,,"[(""'fat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat or)rat')",tsearch.sql,SAME,,"[(""'fat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat or&rat')",tsearch.sql,SAME,,"[(""'fat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat or|rat')",tsearch.sql,SAME,,"[(""'fat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat or!rat')",tsearch.sql,SAME,,"[(""'fat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat or<rat')",tsearch.sql,SAME,,"[(""'fat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat or>rat')",tsearch.sql,SAME,,"[(""'fat' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'fat or ')",tsearch.sql,SAME,,"[(""'fat' & 'or'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc orange')",tsearch.sql,SAME,,"[(""'abc' & 'orange'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc OR1234')",tsearch.sql,SAME,,"[(""'abc' & 'or1234'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc or-abc')",tsearch.sql,SAME,,"[(""'abc' & 'or-abc' <-> 'or' <-> 'abc'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('simple', 'abc OR_abc')",tsearch.sql,SAME,,"[(""'abc' & 'or' <-> 'abc'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""pg_class pg')",tsearch.sql,SAME,,"[(""'pg' <-> 'class' <-> 'pg'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'pg_class pg""')",tsearch.sql,SAME,,"[(""'pg' <-> 'class' & 'pg'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""pg_class pg""')",tsearch.sql,SAME,,"[(""'pg' <-> 'class' <-> 'pg'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""pg_class : pg""')",tsearch.sql,SAME,,"[(""'pg' <-> 'class' <-> 'pg'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'abc ""pg_class pg""')",tsearch.sql,SAME,,"[(""'abc' & 'pg' <-> 'class' <-> 'pg'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""pg_class pg"" def')",tsearch.sql,SAME,,"[(""'pg' <-> 'class' <-> 'pg' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'abc ""pg pg_class pg"" def')",tsearch.sql,SAME,,"[(""'abc' & 'pg' <-> 'pg' <-> 'class' <-> 'pg' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', ' or ""pg pg_class pg"" or ')",tsearch.sql,SAME,,"[(""'pg' <-> 'pg' <-> 'class' <-> 'pg'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""""pg pg_class pg""""')",tsearch.sql,SAME,,"[(""'pg' & 'pg' <-> 'class' & 'pg'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'abc """""""""" def')",tsearch.sql,SAME,,"[(""'abc' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'cat -""fat rat""')",tsearch.sql,SAME,,"[(""'cat' & !( 'fat' <-> 'rat' )"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'cat -""fat rat"" cheese')",tsearch.sql,SAME,,"[(""'cat' & !( 'fat' <-> 'rat' ) & 'chees'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'abc ""def -""')",tsearch.sql,SAME,,"[(""'abc' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'abc ""def :""')",tsearch.sql,SAME,,"[(""'abc' & 'def'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""A fat cat"" has just eaten a -rat.')",tsearch.sql,SAME,,"[(""'fat' <-> 'cat' & 'eaten' & !'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""A fat cat"" has just eaten OR !rat.')",tsearch.sql,SAME,,"[(""'fat' <-> 'cat' & 'eaten' | 'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""A fat cat"" has just (+eaten OR -rat)')",tsearch.sql,SAME,,"[(""'fat' <-> 'cat' & 'eaten' | !'rat'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', 'an old <-> cat "" is fine &&& too')",tsearch.sql,SAME,,"[(""'old' & 'cat' & 'fine'"",)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""A the"" OR just on')",tsearch.sql,SAME,,"[('',)]"
postgresql,postgresql,"select websearch_to_tsquery('english', '""a fat cat"" ate a rat')",tsearch.sql,SAME,,"[(""'fat' <-> 'cat' & 'ate' & 'rat'"",)]"
postgresql,postgresql,"select to_tsvector('english', 'A fat cat ate a rat') @@ 	websearch_to_tsquery('english', '""a fat cat"" ate a rat')",tsearch.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('english', 'A fat grey cat ate a rat') @@ 	websearch_to_tsquery('english', '""a fat cat"" ate a rat')",tsearch.sql,SAME,,"[(False,)]"
postgresql,postgresql,select websearch_to_tsquery(''''),tsearch.sql,SAME,,"[('',)]"
postgresql,postgresql,select websearch_to_tsquery('''abc''''def'''),tsearch.sql,SAME,,"[(""'abc' <-> 'def'"",)]"
postgresql,postgresql,select websearch_to_tsquery('\abc'),tsearch.sql,SAME,,"[(""'abc'"",)]"
postgresql,postgresql,select websearch_to_tsquery('\'),tsearch.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT generate_series(1, 3)",tsrf.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,"SELECT generate_series(1, 3), generate_series(3,5)",tsrf.sql,SAME,,"[(1, 3), (2, 4), (3, 5)]"
postgresql,postgresql,"SELECT generate_series(1, 2), generate_series(1,4)",tsrf.sql,SAME,,"[(1, 1), (2, 2), (None, 3), (None, 4)]"
postgresql,postgresql,"SELECT generate_series(1, generate_series(1, 3))",tsrf.sql,SAME,,"[(1,), (1,), (2,), (1,), (2,), (3,)]"
postgresql,postgresql,"SELECT generate_series(generate_series(1,3), generate_series(2, 4))",tsrf.sql,SAME,,"[(1,), (2,), (2,), (3,), (3,), (4,)]"
postgresql,postgresql,"explain (verbose, costs off) SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4)",tsrf.sql,SAME,,"[('ProjectSet',), ('  Output: generate_series(1, (generate_series(1, 3))), (generate_series(2, 4))',), ('  ->  ProjectSet',), ('        Output: generate_series(1, 3), generate_series(2, 4)',), ('        ->  Result',)]"
postgresql,postgresql,"SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4)",tsrf.sql,SAME,,"[(1, 2), (1, 3), (2, 3), (1, 4), (2, 4), (3, 4)]"
postgresql,postgresql,"explain (verbose, costs off) SELECT unnest(ARRAY[1, 2]) FROM few WHERE false",tsrf.sql,SAME,,"[('ProjectSet',), (""  Output: unnest('{1,2}'::integer[])"",), ('  ->  Result',), ('        One-Time Filter: false',)]"
postgresql,postgresql,"SELECT unnest(ARRAY[1, 2]) FROM few WHERE false",tsrf.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) SELECT * FROM few f1,   (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss",tsrf.sql,SAME,,"[('Result',), ('  Output: f1.id, f1.dataa, f1.datab, ss.unnest',), ('  One-Time Filter: false',)]"
postgresql,postgresql,"SELECT * FROM few f1,   (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss",tsrf.sql,SAME,,[]
postgresql,postgresql,"SELECT few.id, generate_series(1,3) g FROM few ORDER BY id DESC",tsrf.sql,SAME,,"[(3, 1), (3, 2), (3, 3), (2, 1), (2, 2), (2, 3), (1, 1), (1, 2), (1, 3)]"
postgresql,postgresql,"SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, g DESC",tsrf.sql,SAME,,"[(1, 3), (1, 2), (1, 1), (2, 3), (2, 2), (2, 1), (3, 3), (3, 2), (3, 1)]"
postgresql,postgresql,"SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, generate_series(1,3) DESC",tsrf.sql,SAME,,"[(1, 3), (1, 2), (1, 1), (2, 3), (2, 2), (2, 1), (3, 3), (3, 2), (3, 1)]"
postgresql,postgresql,"SELECT few.id FROM few ORDER BY id, generate_series(1,3) DESC",tsrf.sql,SAME,,"[(1,), (1,), (1,), (2,), (2,), (2,), (3,), (3,), (3,)]"
postgresql,postgresql,SET enable_hashagg TO 0,tsrf.sql,SAME,,[]
postgresql,postgresql,"SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa",tsrf.sql,SAME,,"[('a', 1, 1, 1, 1), ('a', 1, 1, 1, 1), ('a', 1, 1, 1, 3)]"
postgresql,postgresql,"SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, unnest('{1,1,3}'::int[])",tsrf.sql,SAME,,"[('a', 2, 1, 1, 1), ('a', 1, 1, 1, 3)]"
postgresql,postgresql,"SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, 5",tsrf.sql,SAME,,"[('a', 2, 1, 1, 1), ('a', 1, 1, 1, 3)]"
postgresql,postgresql,RESET enable_hashagg,tsrf.sql,SAME,,[]
postgresql,postgresql,"SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1 HAVING count(*) > 1",tsrf.sql,SAME,,"[('a', 1, 2)]"
postgresql,postgresql,"SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1, 2 HAVING count(*) > 1",tsrf.sql,SAME,,"[('a', 1, 2)]"
postgresql,postgresql,"SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa ORDER BY 2",tsrf.sql,SAME,,"[('a', 2)]"
postgresql,postgresql,"SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa, unnest('{1,1,3}'::int[]) ORDER BY 2",tsrf.sql,SAME,,"[('a', 2), ('a', 4)]"
postgresql,postgresql,"SELECT sum((3 = ANY(SELECT generate_series(1,4)))::int)",tsrf.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT sum((3 = ANY(SELECT lag(x) over(order by x)                     FROM generate_series(1,4) x))::int)",tsrf.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT id,lag(id) OVER(), count(*) OVER(), generate_series(1,3) FROM few",tsrf.sql,SAME,,"[(1, None, 3, 1), (1, None, 3, 2), (1, None, 3, 3), (2, 1, 3, 1), (2, 1, 3, 2), (2, 1, 3, 3), (3, 2, 3, 1), (3, 2, 3, 2), (3, 2, 3, 3)]"
postgresql,postgresql,"SELECT SUM(count(*)) OVER(PARTITION BY generate_series(1,3) ORDER BY generate_series(1,3)), generate_series(1,3) g FROM few GROUP BY g",tsrf.sql,SAME,,"[(Decimal('3'), 1), (Decimal('3'), 2), (Decimal('3'), 3)]"
postgresql,postgresql,"SELECT few.dataa, count(*), min(id), max(id), generate_series(1,3) FROM few GROUP BY few.dataa ORDER BY 5, 1",tsrf.sql,SAME,,"[('a', 2, 1, 2, 1), ('b', 1, 3, 3, 1), ('a', 2, 1, 2, 2), ('b', 1, 3, 3, 2), ('a', 2, 1, 2, 3), ('b', 1, 3, 3, 3)]"
postgresql,postgresql,set enable_hashagg = false,tsrf.sql,SAME,,[]
postgresql,postgresql,"SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab)",tsrf.sql,SAME,,"[('a', 'bar', 1, 1), ('a', 'bar', 2, 1), ('a', 'foo', 1, 1), ('a', 'foo', 2, 1), ('a', None, 1, 2), ('a', None, 2, 2), ('b', 'bar', 1, 1), ('b', 'bar', 2, 1), ('b', None, 1, 1), ('b', None, 2, 1), (None, None, 1, 3), (None, None, 2, 3), (None, 'bar', 1, 2), (None, 'bar', 2, 2), (None, 'foo', 1, 1), (None, 'foo', 2, 1)]"
postgresql,postgresql,"SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY dataa",tsrf.sql,SAME,,"[('a', 'bar', 1, 1), ('a', 'bar', 2, 1), ('a', 'foo', 1, 1), ('a', 'foo', 2, 1), ('a', None, 1, 2), ('a', None, 2, 2), ('b', 'bar', 1, 1), ('b', 'bar', 2, 1), ('b', None, 1, 1), ('b', None, 2, 1), (None, None, 1, 3), (None, None, 2, 3), (None, 'bar', 1, 2), (None, 'bar', 2, 2), (None, 'foo', 1, 1), (None, 'foo', 2, 1)]"
postgresql,postgresql,"SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY g",tsrf.sql,SAME,,"[('a', 'bar', 1, 1), ('a', 'foo', 1, 1), ('a', None, 1, 2), ('b', 'bar', 1, 1), ('b', None, 1, 1), (None, None, 1, 3), (None, 'bar', 1, 2), (None, 'foo', 1, 1), (None, 'foo', 2, 1), ('a', 'bar', 2, 1), ('b', None, 2, 1), ('a', 'foo', 2, 1), (None, 'bar', 2, 2), ('a', None, 2, 2), (None, None, 2, 3), ('b', 'bar', 2, 1)]"
postgresql,postgresql,"SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g)",tsrf.sql,SAME,,"[('a', 'bar', 1, 1), ('a', 'bar', 2, 1), ('a', 'bar', None, 2), ('a', 'foo', 1, 1), ('a', 'foo', 2, 1), ('a', 'foo', None, 2), ('a', None, None, 4), ('b', 'bar', 1, 1), ('b', 'bar', 2, 1), ('b', 'bar', None, 2), ('b', None, None, 2), (None, None, None, 6), (None, 'bar', 1, 2), (None, 'bar', 2, 2), (None, 'bar', None, 4), (None, 'foo', 1, 1), (None, 'foo', 2, 1), (None, 'foo', None, 2), ('a', None, 1, 2), ('b', None, 1, 1), (None, None, 1, 3), ('a', None, 2, 2), ('b', None, 2, 1), (None, None, 2, 3)]"
postgresql,postgresql,"SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY dataa",tsrf.sql,SAME,,"[('a', 'foo', None, 2), ('a', None, None, 4), ('a', None, 2, 2), ('a', 'bar', 1, 1), ('a', 'bar', 2, 1), ('a', 'bar', None, 2), ('a', 'foo', 1, 1), ('a', 'foo', 2, 1), ('a', None, 1, 2), ('b', 'bar', 1, 1), ('b', None, None, 2), ('b', None, 1, 1), ('b', 'bar', 2, 1), ('b', 'bar', None, 2), ('b', None, 2, 1), (None, None, 2, 3), (None, None, None, 6), (None, 'bar', 1, 2), (None, 'bar', 2, 2), (None, 'bar', None, 4), (None, 'foo', 1, 1), (None, 'foo', 2, 1), (None, 'foo', None, 2), (None, None, 1, 3)]"
postgresql,postgresql,"SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY g",tsrf.sql,SAME,,"[('a', 'bar', 1, 1), ('a', 'foo', 1, 1), ('b', 'bar', 1, 1), (None, 'bar', 1, 2), (None, 'foo', 1, 1), ('a', None, 1, 2), ('b', None, 1, 1), (None, None, 1, 3), ('a', None, 2, 2), ('b', None, 2, 1), (None, 'bar', 2, 2), (None, None, 2, 3), (None, 'foo', 2, 1), ('a', 'bar', 2, 1), ('a', 'foo', 2, 1), ('b', 'bar', 2, 1), ('a', None, None, 4), ('b', 'bar', None, 2), ('b', None, None, 2), (None, None, None, 6), ('a', 'foo', None, 2), ('a', 'bar', None, 2), (None, 'bar', None, 4), (None, 'foo', None, 2)]"
postgresql,postgresql,reset enable_hashagg,tsrf.sql,SAME,,[]
postgresql,postgresql,"explain (verbose, costs off) select 'foo' as f, generate_series(1,2) as g from few order by 1",tsrf.sql,SAME,,"[('ProjectSet',), (""  Output: 'foo'::text, generate_series(1, 2)"",), ('  ->  Seq Scan on public.few',), ('        Output: id, dataa, datab',)]"
postgresql,postgresql,"select 'foo' as f, generate_series(1,2) as g from few order by 1",tsrf.sql,SAME,,"[('foo', 1), ('foo', 2), ('foo', 1), ('foo', 2), ('foo', 1), ('foo', 2)]"
postgresql,postgresql,SELECT * FROM fewmore,tsrf.sql,SAME,,"[(1,), (2,), (3,), (4,), (5,)]"
postgresql,postgresql,"SELECT int4mul(generate_series(1,2), 10)",tsrf.sql,SAME,,"[(10,), (20,)]"
postgresql,postgresql,"SELECT generate_series(1,3) IS DISTINCT FROM 2",tsrf.sql,SAME,,"[(True,), (False,), (True,)]"
postgresql,postgresql,"SELECT DISTINCT ON (a) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)",tsrf.sql,SAME,,"[(1, 1, 1), (3, 2, 1), (5, 3, 1)]"
postgresql,postgresql,"SELECT DISTINCT ON (a) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b) ORDER BY a, b DESC",tsrf.sql,SAME,,"[(1, 4, 1), (1, 4, 2), (1, 4, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (5, 3, 1), (5, 3, 2), (5, 3, 3)]"
postgresql,postgresql,"SELECT DISTINCT ON (a) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b) ORDER BY a, b DESC, g DESC",tsrf.sql,SAME,,"[(1, 4, 3), (3, 2, 3), (5, 3, 3)]"
postgresql,postgresql,"SELECT DISTINCT ON (a, b, g) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b) ORDER BY a, b DESC, g DESC",tsrf.sql,SAME,,"[(1, 4, 3), (1, 4, 2), (1, 4, 1), (1, 1, 3), (1, 1, 2), (1, 1, 1), (3, 2, 3), (3, 2, 2), (3, 2, 1), (3, 1, 3), (3, 1, 2), (3, 1, 1), (5, 3, 3), (5, 3, 2), (5, 3, 1), (5, 1, 3), (5, 1, 2), (5, 1, 1)]"
postgresql,postgresql,"SELECT DISTINCT ON (g) a, b, generate_series(1,3) g FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)",tsrf.sql,SAME,,"[(3, 2, 1), (5, 1, 2), (3, 1, 3)]"
postgresql,postgresql,"SELECT a, generate_series(1,2) FROM (VALUES(1),(2),(3)) r(a) LIMIT 2 OFFSET 2",tsrf.sql,SAME,,"[(2, 1), (2, 2)]"
postgresql,postgresql,"SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET few.id) FROM few",tsrf.sql,SAME,,"[(2,), (3,), (None,)]"
postgresql,postgresql,"SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET g.i) FROM generate_series(0,3) g(i)",tsrf.sql,SAME,,"[(1,), (2,), (3,), (None,)]"
postgresql,postgresql,"CREATE OPERATOR |@| (PROCEDURE = unnest, RIGHTARG = ANYARRAY)",tsrf.sql,SAME,,[]
postgresql,postgresql,"SELECT |@|ARRAY[1,2,3]",tsrf.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,"explain (verbose, costs off) select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1",tsrf.sql,SAME,,"[('Result',), ('  Output: (generate_series(1, 3)), ((generate_series(1, 3)) + 1)',), ('  ->  ProjectSet',), ('        Output: generate_series(1, 3)',), ('        ->  Result',)]"
postgresql,postgresql,"select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1",tsrf.sql,SAME,,"[(1, 2), (2, 3), (3, 4)]"
postgresql,postgresql,"explain (verbose, costs off) select generate_series(1,3)+1 order by generate_series(1,3)",tsrf.sql,SAME,,"[('Sort',), ('  Output: (((generate_series(1, 3)) + 1)), (generate_series(1, 3))',), ('  Sort Key: (generate_series(1, 3))',), ('  ->  Result',), ('        Output: ((generate_series(1, 3)) + 1), (generate_series(1, 3))',), ('        ->  ProjectSet',), ('              Output: generate_series(1, 3)',), ('              ->  Result',)]"
postgresql,postgresql,"select generate_series(1,3)+1 order by generate_series(1,3)",tsrf.sql,SAME,,"[(2,), (3,), (4,)]"
postgresql,postgresql,"explain (verbose, costs off) select generate_series(1,3) as x, generate_series(3,6) + 1 as y",tsrf.sql,SAME,,"[('Result',), ('  Output: (generate_series(1, 3)), ((generate_series(3, 6)) + 1)',), ('  ->  ProjectSet',), ('        Output: generate_series(1, 3), generate_series(3, 6)',), ('        ->  Result',)]"
postgresql,postgresql,"select generate_series(1,3) as x, generate_series(3,6) + 1 as y",tsrf.sql,SAME,,"[(1, 4), (2, 5), (3, 6), (None, 7)]"
postgresql,postgresql,SET extra_float_digits = 0,tstypes.sql,SAME,,[]
postgresql,postgresql,SELECT '1'::tsvector,tstypes.sql,SAME,,"[(""'1'"",)]"
postgresql,postgresql,SELECT '1 '::tsvector,tstypes.sql,SAME,,"[(""'1'"",)]"
postgresql,postgresql,SELECT ' 1'::tsvector,tstypes.sql,SAME,,"[(""'1'"",)]"
postgresql,postgresql,SELECT ' 1 '::tsvector,tstypes.sql,SAME,,"[(""'1'"",)]"
postgresql,postgresql,SELECT '1 2'::tsvector,tstypes.sql,SAME,,"[(""'1' '2'"",)]"
postgresql,postgresql,SELECT '''1 2'''::tsvector,tstypes.sql,SAME,,"[(""'1 2'"",)]"
postgresql,postgresql,SELECT E'''1 \\''2'''::tsvector,tstypes.sql,SAME,,"[(""'1 ''2'"",)]"
postgresql,postgresql,SELECT E'''1 \\''2''3'::tsvector,tstypes.sql,SAME,,"[(""'1 ''2' '3'"",)]"
postgresql,postgresql,SELECT E'''1 \\''2'' 3'::tsvector,tstypes.sql,SAME,,"[(""'1 ''2' '3'"",)]"
postgresql,postgresql,SELECT E'''1 \\''2'' '' 3'' 4 '::tsvector,tstypes.sql,SAME,,"[(""' 3' '1 ''2' '4'"",)]"
postgresql,postgresql,SELECT $$'\\as' ab\c ab\\c AB\\\c ab\\\\c$$::tsvector,tstypes.sql,SAME,,"[(""'AB\\\\c' '\\\\as' 'ab\\\\\\\\c' 'ab\\\\c' 'abc'"",)]"
postgresql,postgresql,SELECT tsvectorin(tsvectorout($$'\\as' ab\c ab\\c AB\\\c ab\\\\c$$::tsvector)),tstypes.sql,SAME,,"[(""'AB\\\\c' '\\\\as' 'ab\\\\\\\\c' 'ab\\\\c' 'abc'"",)]"
postgresql,postgresql,"SELECT '''w'':4A,3B,2C,1D,5 a:8'",tstypes.sql,SAME,,"[(""'w':4A,3B,2C,1D,5 a:8"",)]"
postgresql,postgresql,SELECT 'a:3A b:2a'::tsvector || 'ba:1234 a:1B',tstypes.sql,SAME,,"[(""'a':3A,4B 'b':2A 'ba':1237"",)]"
postgresql,postgresql,"SELECT pg_input_is_valid('foo', 'tsvector')",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid($$''$$, 'tsvector')",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info($$''$$, 'tsvector')",tstypes.sql,SAME,,"[('syntax error in tsvector: ""\'\'""', None, None, '42601')]"
postgresql,postgresql,SELECT '1'::tsquery,tstypes.sql,SAME,,"[(""'1'"",)]"
postgresql,postgresql,SELECT '1 '::tsquery,tstypes.sql,SAME,,"[(""'1'"",)]"
postgresql,postgresql,SELECT ' 1'::tsquery,tstypes.sql,SAME,,"[(""'1'"",)]"
postgresql,postgresql,SELECT ' 1 '::tsquery,tstypes.sql,SAME,,"[(""'1'"",)]"
postgresql,postgresql,SELECT '''1 2'''::tsquery,tstypes.sql,SAME,,"[(""'1 2'"",)]"
postgresql,postgresql,SELECT E'''1 \\''2'''::tsquery,tstypes.sql,SAME,,"[(""'1 ''2'"",)]"
postgresql,postgresql,SELECT '!1'::tsquery,tstypes.sql,SAME,,"[(""!'1'"",)]"
postgresql,postgresql,SELECT '1|2'::tsquery,tstypes.sql,SAME,,"[(""'1' | '2'"",)]"
postgresql,postgresql,SELECT '1|!2'::tsquery,tstypes.sql,SAME,,"[(""'1' | !'2'"",)]"
postgresql,postgresql,SELECT '!1|2'::tsquery,tstypes.sql,SAME,,"[(""!'1' | '2'"",)]"
postgresql,postgresql,SELECT '!1|!2'::tsquery,tstypes.sql,SAME,,"[(""!'1' | !'2'"",)]"
postgresql,postgresql,SELECT '!(!1|!2)'::tsquery,tstypes.sql,SAME,,"[(""!( !'1' | !'2' )"",)]"
postgresql,postgresql,SELECT '!(!1|2)'::tsquery,tstypes.sql,SAME,,"[(""!( !'1' | '2' )"",)]"
postgresql,postgresql,SELECT '!(1|!2)'::tsquery,tstypes.sql,SAME,,"[(""!( '1' | !'2' )"",)]"
postgresql,postgresql,SELECT '!(1|2)'::tsquery,tstypes.sql,SAME,,"[(""!( '1' | '2' )"",)]"
postgresql,postgresql,SELECT '1&2'::tsquery,tstypes.sql,SAME,,"[(""'1' & '2'"",)]"
postgresql,postgresql,SELECT '!1&2'::tsquery,tstypes.sql,SAME,,"[(""!'1' & '2'"",)]"
postgresql,postgresql,SELECT '1&!2'::tsquery,tstypes.sql,SAME,,"[(""'1' & !'2'"",)]"
postgresql,postgresql,SELECT '!1&!2'::tsquery,tstypes.sql,SAME,,"[(""!'1' & !'2'"",)]"
postgresql,postgresql,SELECT '(1&2)'::tsquery,tstypes.sql,SAME,,"[(""'1' & '2'"",)]"
postgresql,postgresql,SELECT '1&(2)'::tsquery,tstypes.sql,SAME,,"[(""'1' & '2'"",)]"
postgresql,postgresql,SELECT '!(1)&2'::tsquery,tstypes.sql,SAME,,"[(""!'1' & '2'"",)]"
postgresql,postgresql,SELECT '!(1&2)'::tsquery,tstypes.sql,SAME,,"[(""!( '1' & '2' )"",)]"
postgresql,postgresql,SELECT '1|2&3'::tsquery,tstypes.sql,SAME,,"[(""'1' | '2' & '3'"",)]"
postgresql,postgresql,SELECT '1|(2&3)'::tsquery,tstypes.sql,SAME,,"[(""'1' | '2' & '3'"",)]"
postgresql,postgresql,SELECT '(1|2)&3'::tsquery,tstypes.sql,SAME,,"[(""( '1' | '2' ) & '3'"",)]"
postgresql,postgresql,SELECT '1|2&!3'::tsquery,tstypes.sql,SAME,,"[(""'1' | '2' & !'3'"",)]"
postgresql,postgresql,SELECT '1|!2&3'::tsquery,tstypes.sql,SAME,,"[(""'1' | !'2' & '3'"",)]"
postgresql,postgresql,SELECT '!1|2&3'::tsquery,tstypes.sql,SAME,,"[(""!'1' | '2' & '3'"",)]"
postgresql,postgresql,SELECT '!1|(2&3)'::tsquery,tstypes.sql,SAME,,"[(""!'1' | '2' & '3'"",)]"
postgresql,postgresql,SELECT '!(1|2)&3'::tsquery,tstypes.sql,SAME,,"[(""!( '1' | '2' ) & '3'"",)]"
postgresql,postgresql,SELECT '(!1|2)&3'::tsquery,tstypes.sql,SAME,,"[(""( !'1' | '2' ) & '3'"",)]"
postgresql,postgresql,SELECT '1|(2|(4|(5|6)))'::tsquery,tstypes.sql,SAME,,"[(""'1' | '2' | '4' | '5' | '6'"",)]"
postgresql,postgresql,SELECT '1|2|4|5|6'::tsquery,tstypes.sql,SAME,,"[(""'1' | '2' | '4' | '5' | '6'"",)]"
postgresql,postgresql,SELECT '1&(2&(4&(5&6)))'::tsquery,tstypes.sql,SAME,,"[(""'1' & '2' & '4' & '5' & '6'"",)]"
postgresql,postgresql,SELECT '1&2&4&5&6'::tsquery,tstypes.sql,SAME,,"[(""'1' & '2' & '4' & '5' & '6'"",)]"
postgresql,postgresql,SELECT '1&(2&(4&(5|6)))'::tsquery,tstypes.sql,SAME,,"[(""'1' & '2' & '4' & ( '5' | '6' )"",)]"
postgresql,postgresql,SELECT '1&(2&(4&(5|!6)))'::tsquery,tstypes.sql,SAME,,"[(""'1' & '2' & '4' & ( '5' | !'6' )"",)]"
postgresql,postgresql,SELECT E'1&(''2''&('' 4''&(\\|5 | ''6 \\'' !|&'')))'::tsquery,tstypes.sql,SAME,,"[(""'1' & '2' & ' 4' & ( '|5' | '6 '' !|&' )"",)]"
postgresql,postgresql,SELECT $$'\\as'$$::tsquery,tstypes.sql,SAME,,"[(""'\\\\as'"",)]"
postgresql,postgresql,SELECT 'a:* & nbb:*ac | doo:a* | goo'::tsquery,tstypes.sql,SAME,,"[(""'a':* & 'nbb':*AC | 'doo':*A | 'goo'"",)]"
postgresql,postgresql,SELECT '!!b'::tsquery,tstypes.sql,SAME,,"[(""!!'b'"",)]"
postgresql,postgresql,SELECT '!!!b'::tsquery,tstypes.sql,SAME,,"[(""!!!'b'"",)]"
postgresql,postgresql,SELECT '!(!b)'::tsquery,tstypes.sql,SAME,,"[(""!!'b'"",)]"
postgresql,postgresql,SELECT 'a & !!b'::tsquery,tstypes.sql,SAME,,"[(""'a' & !!'b'"",)]"
postgresql,postgresql,SELECT '!!a & b'::tsquery,tstypes.sql,SAME,,"[(""!!'a' & 'b'"",)]"
postgresql,postgresql,SELECT '!!a & !!b'::tsquery,tstypes.sql,SAME,,"[(""!!'a' & !!'b'"",)]"
postgresql,postgresql,"SELECT pg_input_is_valid('foo', 'tsquery')",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('foo!', 'tsquery')",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('foo!', 'tsquery')",tstypes.sql,SAME,,"[('syntax error in tsquery: ""foo!""', None, None, '42601')]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('a <100000> b', 'tsquery')",tstypes.sql,SAME,,"[('distance in phrase operator must be an integer value between zero and 16384 inclusive', None, None, '22023')]"
postgresql,postgresql,"SELECT 'a' < 'b & c'::tsquery as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a' > 'b & c'::tsquery as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a | f' < 'b & c'::tsquery as ""false""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a | ff' < 'b & c'::tsquery as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a | f | g' < 'b & c'::tsquery as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT numnode( 'new'::tsquery ),tstypes.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT numnode( 'new & york'::tsquery ),tstypes.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT numnode( 'new & york | qwery'::tsquery ),tstypes.sql,SAME,,"[(5,)]"
postgresql,postgresql,SELECT 'foo & bar'::tsquery && 'asd',tstypes.sql,SAME,,"[(""'foo' & 'bar' & 'asd'"",)]"
postgresql,postgresql,SELECT 'foo & bar'::tsquery || 'asd & fg',tstypes.sql,SAME,,"[(""'foo' & 'bar' | 'asd' & 'fg'"",)]"
postgresql,postgresql,SELECT 'foo & bar'::tsquery || !!'asd & fg'::tsquery,tstypes.sql,SAME,,"[(""'foo' & 'bar' | !( 'asd' & 'fg' )"",)]"
postgresql,postgresql,SELECT 'foo & bar'::tsquery && 'asd | fg',tstypes.sql,SAME,,"[(""'foo' & 'bar' & ( 'asd' | 'fg' )"",)]"
postgresql,postgresql,SELECT 'a' <-> 'b & d'::tsquery,tstypes.sql,SAME,,"[(""'a' <-> ( 'b' & 'd' )"",)]"
postgresql,postgresql,SELECT 'a & g' <-> 'b & d'::tsquery,tstypes.sql,SAME,,"[(""( 'a' & 'g' ) <-> ( 'b' & 'd' )"",)]"
postgresql,postgresql,SELECT 'a & g' <-> 'b | d'::tsquery,tstypes.sql,SAME,,"[(""( 'a' & 'g' ) <-> ( 'b' | 'd' )"",)]"
postgresql,postgresql,SELECT 'a & g' <-> 'b <-> d'::tsquery,tstypes.sql,SAME,,"[(""( 'a' & 'g' ) <-> ( 'b' <-> 'd' )"",)]"
postgresql,postgresql,"SELECT tsquery_phrase('a <3> g', 'b & d', 10)",tstypes.sql,SAME,,"[(""'a' <3> 'g' <10> ( 'b' & 'd' )"",)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca' as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:B' as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:A' as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:C' as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:CB' as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & c:*C' as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & c:*CB' as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64b cb:80c d:34c'::tsvector @@ 'd:AC & c:*C' as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64c cb:80b d:34c'::tsvector @@ 'd:AC & c:*C' as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a b:89  ca:23A,64c cb:80b d:34c'::tsvector @@ 'd:AC & c:*B' as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'wa:1D wb:2A'::tsvector @@ 'w:*D & w:*A'::tsquery as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'wa:1D wb:2A'::tsvector @@ 'w:*D <-> w:*A'::tsquery as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'wa:1A wb:2D'::tsvector @@ 'w:*D <-> w:*A'::tsquery as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'wa:1A'::tsvector @@ 'w:*A'::tsquery as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'wa:1A'::tsvector @@ 'w:*D'::tsquery as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'wa:1A'::tsvector @@ '!w:*A'::tsquery as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'wa:1A'::tsvector @@ '!w:*D'::tsquery as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT strip('wa:1A'::tsvector) @@ 'w:*A'::tsquery as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT strip('wa:1A'::tsvector) @@ 'w:*D'::tsquery as ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT strip('wa:1A'::tsvector) @@ '!w:*A'::tsquery as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT strip('wa:1A'::tsvector) @@ '!w:*D'::tsquery as ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'supernova'::tsvector @@ 'super'::tsquery AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'supeanova supernova'::tsvector @@ 'super'::tsquery AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'supeznova supernova'::tsvector @@ 'super'::tsquery AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'supernova'::tsvector @@ 'super:*'::tsquery AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'supeanova supernova'::tsvector @@ 'super:*'::tsquery AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'supeznova supernova'::tsvector @@ 'super:*'::tsquery AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <-> 2' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <2> 2' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <-> 3' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <2> 3' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 1 2') @@ '1 <3> 2' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 11 3') @@ '1 <-> 3' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 11 3') @@ '1:* <-> 3' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <-> 2 <-> 3' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 3 4') @@ '(1 <-> 2) <-> 3' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <-> (2 <-> 3)' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <2> (2 <-> 3)' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 1 2 3 4') @@ '(1 <-> 2) <-> 3' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT to_tsvector('simple', '1 2 1 2 3 4') @@ '1 <-> 2 <-> 3' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT strip(to_tsvector('simple', '1 2 3 4')) @@ '1 <-> 2 <-> 3' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'q x q y') @@ 'q <-> (x & y)' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'q x') @@ 'q <-> (x | y <-> z)' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'q y') @@ 'q <-> (x | y <-> z)' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'q y z') @@ 'q <-> (x | y <-> z)' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'q y x') @@ 'q <-> (x | y <-> z)' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'q x y') @@ 'q <-> (x | y <-> z)' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'q x') @@ '(x | y <-> z) <-> q' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x q') @@ '(x | y <-> z) <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q') @@ '(x | y <-> z) <-> q' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y z') @@ '(x | y <-> z) <-> q' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y z q') @@ '(x | y <-> z) <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'y z q') @@ '(x | y <-> z) <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'y y q') @@ '(x | y <-> z) <-> q' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'y y q') @@ '(!x | y <-> z) <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q') @@ '(!x | y <-> z) <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'y y q') @@ '(x | y <-> !z) <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x q') @@ '(x | y <-> !z) <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x q') @@ '(!x | y <-> z) <-> q' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'z q') @@ '(!x | y <-> z) <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q') @@ '(!x | y) <-> y <-> q' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q') @@ '(!x | !y) <-> y <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q') @@ '(x | !y) <-> y <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q') @@ '(x | !!z) <-> y <-> q' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q y') @@ '!x <-> y' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q y') @@ '!x <-> !y' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q y') @@ '!x <-> !!y' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q y') @@ '!(x <-> y)' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q y') @@ '!(x <2> y)' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select strip(to_tsvector('simple', 'x y q y')) @@ '!x <-> y' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select strip(to_tsvector('simple', 'x y q y')) @@ '!x <-> !y' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select strip(to_tsvector('simple', 'x y q y')) @@ '!x <-> !!y' AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select strip(to_tsvector('simple', 'x y q y')) @@ '!(x <-> y)' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select strip(to_tsvector('simple', 'x y q y')) @@ '!(x <2> y)' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', 'x y q y') @@ '!foo' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select to_tsvector('simple', '') @@ '!foo' AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT ts_rank(' a:1 s:2C d g'::tsvector, 'a | s')",tstypes.sql,SAME,,"[(0.0911891,)]"
postgresql,postgresql,"SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | s')",tstypes.sql,SAME,,"[(0.0303964,)]"
postgresql,postgresql,"SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | s:*')",tstypes.sql,SAME,,"[(0.0911891,)]"
postgresql,postgresql,"SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | sa:*')",tstypes.sql,SAME,,"[(0.0911891,)]"
postgresql,postgresql,"SELECT ts_rank(' a:1 s:2B d g'::tsvector, 'a | s')",tstypes.sql,SAME,,"[(0.151982,)]"
postgresql,postgresql,"SELECT ts_rank(' a:1 s:2 d g'::tsvector, 'a | s')",tstypes.sql,SAME,,"[(0.0607927,)]"
postgresql,postgresql,"SELECT ts_rank(' a:1 s:2C d g'::tsvector, 'a & s')",tstypes.sql,SAME,,"[(0.140153,)]"
postgresql,postgresql,"SELECT ts_rank(' a:1 s:2B d g'::tsvector, 'a & s')",tstypes.sql,SAME,,"[(0.198206,)]"
postgresql,postgresql,"SELECT ts_rank(' a:1 s:2 d g'::tsvector, 'a & s')",tstypes.sql,SAME,,"[(0.0991032,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a | s')",tstypes.sql,SAME,,"[(0.3,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | s')",tstypes.sql,SAME,,"[(0.1,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | s:*')",tstypes.sql,SAME,,"[(0.3,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | sa:*')",tstypes.sql,SAME,,"[(0.3,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 sa:3C sab:2c d g'::tsvector, 'a | sa:*')",tstypes.sql,SAME,,"[(0.5,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2B d g'::tsvector, 'a | s')",tstypes.sql,SAME,,"[(0.5,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a | s')",tstypes.sql,SAME,,"[(0.2,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a & s')",tstypes.sql,SAME,,"[(0.133333,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2B d g'::tsvector, 'a & s')",tstypes.sql,SAME,,"[(0.16,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a & s')",tstypes.sql,SAME,,"[(0.1,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2A d g'::tsvector, 'a <-> s')",tstypes.sql,SAME,,"[(0.181818,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a <-> s')",tstypes.sql,SAME,,"[(0.133333,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a <-> s')",tstypes.sql,SAME,,"[(0.1,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2 d:2A g'::tsvector, 'a <-> s')",tstypes.sql,SAME,,"[(0.1,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 s:2,3A d:2A g'::tsvector, 'a <2> s:A')",tstypes.sql,SAME,,"[(0.0909091,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 b:2 s:3A d:2A g'::tsvector, 'a <2> s:A')",tstypes.sql,SAME,,"[(0.0909091,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 sa:2D sb:2A g'::tsvector, 'a <-> s:*')",tstypes.sql,SAME,,"[(0.1,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:*')",tstypes.sql,SAME,,"[(0.1,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:* <-> sa:A')",tstypes.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:* <-> sa:B')",tstypes.sql,SAME,,"[(0.0,)]"
postgresql,postgresql,"SELECT 'a:1 b:2'::tsvector @@ 'a <-> b'::tsquery AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a:1 b:2'::tsvector @@ 'a <0> b'::tsquery AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a:1 b:2'::tsvector @@ 'a <1> b'::tsquery AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a:1 b:2'::tsvector @@ 'a <2> b'::tsquery AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a:1 b:3'::tsvector @@ 'a <-> b'::tsquery AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a:1 b:3'::tsvector @@ 'a <0> b'::tsquery AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a:1 b:3'::tsvector @@ 'a <1> b'::tsquery AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a:1 b:3'::tsvector @@ 'a <2> b'::tsquery AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT 'a:1 b:3'::tsvector @@ 'a <3> b'::tsquery AS ""false""",tstypes.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT 'a:1 b:3'::tsvector @@ 'a <0> a:*'::tsquery AS ""true""",tstypes.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT strip('w:12B w:13* w:12,5,6 a:1,3* a:3 w asd:1dc asd'::tsvector)",tstypes.sql,SAME,,"[(""'a' 'asd' 'w'"",)]"
postgresql,postgresql,"SELECT strip('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)",tstypes.sql,SAME,,"[(""'base' 'hidden' 'rebel' 'spaceship' 'strike'"",)]"
postgresql,postgresql,SELECT strip('base hidden rebel spaceship strike'::tsvector),tstypes.sql,SAME,,"[(""'base' 'hidden' 'rebel' 'spaceship' 'strike'"",)]"
postgresql,postgresql,"SELECT ts_delete(to_tsvector('english', 'Rebel spaceships, striking from a hidden base'), 'spaceship')",tstypes.sql,SAME,,"[(""'base':7 'hidden':6 'rebel':1 'strike':3"",)]"
postgresql,postgresql,"SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'base')",tstypes.sql,SAME,,"[(""'hidden':6 'rebel':1 'spaceship':2,33A,34B,35C,36 'strike':3"",)]"
postgresql,postgresql,"SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bas')",tstypes.sql,SAME,,"[(""'base':7 'hidden':6 'rebel':1 'spaceship':2,33A,34B,35C,36 'strike':3"",)]"
postgresql,postgresql,"SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bases')",tstypes.sql,SAME,,"[(""'base':7 'hidden':6 'rebel':1 'spaceship':2,33A,34B,35C,36 'strike':3"",)]"
postgresql,postgresql,"SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'spaceship')",tstypes.sql,SAME,,"[(""'base':7 'hidden':6 'rebel':1 'strike':3"",)]"
postgresql,postgresql,"SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, 'spaceship')",tstypes.sql,SAME,,"[(""'base' 'hidden' 'rebel' 'strike'"",)]"
postgresql,postgresql,"SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceship','rebel'])",tstypes.sql,SAME,,"[(""'base':7 'hidden':6 'strike':3"",)]"
postgresql,postgresql,"SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceships','rebel'])",tstypes.sql,SAME,,"[(""'base':7 'hidden':6 'spaceship':2,33A,34B,35C,36 'strike':3"",)]"
postgresql,postgresql,"SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceshi','rebel'])",tstypes.sql,SAME,,"[(""'base':7 'hidden':6 'spaceship':2,33A,34B,35C,36 'strike':3"",)]"
postgresql,postgresql,"SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceship','leya','rebel'])",tstypes.sql,SAME,,"[(""'base':7 'hidden':6 'strike':3"",)]"
postgresql,postgresql,"SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship','leya','rebel'])",tstypes.sql,SAME,,"[(""'base' 'hidden' 'strike'"",)]"
postgresql,postgresql,"SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship','leya','rebel','rebel'])",tstypes.sql,SAME,,"[(""'base' 'hidden' 'strike'"",)]"
postgresql,postgresql,"SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship','leya','rebel', '', NULL])",tstypes.sql,SAME,,"[(""'base' 'hidden' 'strike'"",)]"
postgresql,postgresql,"SELECT unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)",tstypes.sql,SAME,,"[('(base,{7},{D})',), ('(hidden,{6},{D})',), ('(rebel,{1},{D})',), ('(spaceship,""{2,33,34,35,36}"",""{D,A,B,C,D}"")',), ('(strike,{3},{D})',)]"
postgresql,postgresql,SELECT unnest('base hidden rebel spaceship strike'::tsvector),tstypes.sql,SAME,,"[('(base,,)',), ('(hidden,,)',), ('(rebel,,)',), ('(spaceship,,)',), ('(strike,,)',)]"
postgresql,postgresql,"SELECT * FROM unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)",tstypes.sql,SAME,,"[('base', [7], ['D']), ('hidden', [6], ['D']), ('rebel', [1], ['D']), ('spaceship', [2, 33, 34, 35, 36], ['D', 'A', 'B', 'C', 'D']), ('strike', [3], ['D'])]"
postgresql,postgresql,SELECT * FROM unnest('base hidden rebel spaceship strike'::tsvector),tstypes.sql,SAME,,"[('base', None, None), ('hidden', None, None), ('rebel', None, None), ('spaceship', None, None), ('strike', None, None)]"
postgresql,postgresql,"SELECT lexeme, positions[1] from unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)",tstypes.sql,SAME,,"[('base', 7), ('hidden', 6), ('rebel', 1), ('spaceship', 2), ('strike', 3)]"
postgresql,postgresql,"SELECT tsvector_to_array('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)",tstypes.sql,SAME,,"[(['base', 'hidden', 'rebel', 'spaceship', 'strike'],)]"
postgresql,postgresql,SELECT tsvector_to_array('base hidden rebel spaceship strike'::tsvector),tstypes.sql,SAME,,"[(['base', 'hidden', 'rebel', 'spaceship', 'strike'],)]"
postgresql,postgresql,"SELECT array_to_tsvector(ARRAY['base','hidden','rebel','spaceship','strike'])",tstypes.sql,SAME,,"[(""'base' 'hidden' 'rebel' 'spaceship' 'strike'"",)]"
postgresql,postgresql,"SELECT array_to_tsvector(ARRAY['foo','bar','baz','bar'])",tstypes.sql,SAME,,"[(""'bar' 'baz' 'foo'"",)]"
postgresql,postgresql,"SELECT setweight('w:12B w:13* w:12,5,6 a:1,3* a:3 w asd:1dc asd zxc:81,567,222A'::tsvector, 'c')",tstypes.sql,SAME,,"[(""'a':1C,3C 'asd':1C 'w':5C,6C,12C,13C 'zxc':81C,222C,567C"",)]"
postgresql,postgresql,"SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c')",tstypes.sql,SAME,,"[(""'a':1C,3C 'asd':1C 'w':5C,6C,12C,13C 'zxc':81C,222C,567C"",)]"
postgresql,postgresql,"SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a}')",tstypes.sql,SAME,,"[(""'a':1C,3C 'asd':1C 'w':5,6,12B,13A 'zxc':81,222A,567"",)]"
postgresql,postgresql,"SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a}')",tstypes.sql,SAME,,"[(""'a':1C,3C 'asd':1C 'w':5,6,12B,13A 'zxc':81,222A,567"",)]"
postgresql,postgresql,"SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a,zxc}')",tstypes.sql,SAME,,"[(""'a':1C,3C 'asd':1C 'w':5,6,12B,13A 'zxc':81C,222C,567C"",)]"
postgresql,postgresql,"SELECT setweight('a asd w:5,6,12B,13A zxc'::tsvector, 'c', ARRAY['a', 'zxc', '', NULL])",tstypes.sql,SAME,,"[(""'a' 'asd' 'w':5,6,12B,13A 'zxc'"",)]"
postgresql,postgresql,"SELECT ts_filter('base:7A empir:17 evil:15 first:11 galact:16 hidden:6A rebel:1A spaceship:2A strike:3A victori:12 won:9'::tsvector, '{a}')",tstypes.sql,SAME,,"[(""'base':7A 'hidden':6A 'rebel':1A 'spaceship':2A 'strike':3A"",)]"
postgresql,postgresql,"SELECT ts_filter('base hidden rebel spaceship strike'::tsvector, '{a}')",tstypes.sql,SAME,,"[('',)]"
postgresql,postgresql,SET max_parallel_maintenance_workers = 0,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET max_parallel_workers = 0,tuplesort.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE abbrev_abort_uuids (     id serial not null,     abort_increasing uuid,     abort_decreasing uuid,     noabort_increasing uuid,     noabort_decreasing uuid)",tuplesort.sql,SAME,,[]
postgresql,postgresql,"SELECT abort_increasing, abort_decreasing FROM abbrev_abort_uuids ORDER BY abort_increasing OFFSET 20000 - 4",tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000019992', '00000000-0000-0000-0000-000000000008'), ('00000000-0000-0000-0000-000000019993', '00000000-0000-0000-0000-000000000007'), ('00000000-0000-0000-0000-000000019994', '00000000-0000-0000-0000-000000000006'), ('00000000-0000-0000-0000-000000019994', '00000000-0000-0000-0000-000000000006'), ('00000000-0000-0000-0000-000000019995', '00000000-0000-0000-0000-000000000005'), ('00000000-0000-0000-0000-000000019996', '00000000-0000-0000-0000-000000000004'), ('00000000-0000-0000-0000-000000019997', '00000000-0000-0000-0000-000000000003'), ('00000000-0000-0000-0000-000000019997', '00000000-0000-0000-0000-000000000003'), ('00000000-0000-0000-0000-000000019998', '00000000-0000-0000-0000-000000000002'), ('00000000-0000-0000-0000-000000019999', '00000000-0000-0000-0000-000000000001'), ('00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), ('00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (None, None), (None, None), (None, None)]"
postgresql,postgresql,"SELECT abort_increasing, abort_decreasing FROM abbrev_abort_uuids ORDER BY abort_decreasing NULLS FIRST OFFSET 20000 - 4",tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000011', '00000000-0000-0000-0000-000000019989'), ('00000000-0000-0000-0000-000000000010', '00000000-0000-0000-0000-000000019990'), ('00000000-0000-0000-0000-000000000009', '00000000-0000-0000-0000-000000019991'), ('00000000-0000-0000-0000-000000000008', '00000000-0000-0000-0000-000000019992'), ('00000000-0000-0000-0000-000000000008', '00000000-0000-0000-0000-000000019992'), ('00000000-0000-0000-0000-000000000007', '00000000-0000-0000-0000-000000019993'), ('00000000-0000-0000-0000-000000000006', '00000000-0000-0000-0000-000000019994'), ('00000000-0000-0000-0000-000000000005', '00000000-0000-0000-0000-000000019995'), ('00000000-0000-0000-0000-000000000005', '00000000-0000-0000-0000-000000019995'), ('00000000-0000-0000-0000-000000000004', '00000000-0000-0000-0000-000000019996'), ('00000000-0000-0000-0000-000000000003', '00000000-0000-0000-0000-000000019997'), ('00000000-0000-0000-0000-000000000002', '00000000-0000-0000-0000-000000019998'), ('00000000-0000-0000-0000-000000000002', '00000000-0000-0000-0000-000000019998'), ('00000000-0000-0000-0000-000000000001', '00000000-0000-0000-0000-000000019999'), ('00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000020000')]"
postgresql,postgresql,"SELECT noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_increasing OFFSET 20000 - 4",tuplesort.sql,SAME,,"[('00009997-0000-0000-0000-000000009997', '00010003-0000-0000-0000-000000010003'), ('00009998-0000-0000-0000-000000009998', '00010002-0000-0000-0000-000000010002'), ('00009999-0000-0000-0000-000000009999', '00010001-0000-0000-0000-000000010001'), ('00010000-0000-0000-0000-000000010000', '00010000-0000-0000-0000-000000010000'), ('00010001-0000-0000-0000-000000010001', '00009999-0000-0000-0000-000000009999'), ('00010002-0000-0000-0000-000000010002', '00009998-0000-0000-0000-000000009998'), ('00010003-0000-0000-0000-000000010003', '00009997-0000-0000-0000-000000009997'), ('00010004-0000-0000-0000-000000010004', '00009996-0000-0000-0000-000000009996'), ('00010005-0000-0000-0000-000000010005', '00009995-0000-0000-0000-000000009995'), ('00010006-0000-0000-0000-000000010006', '00009994-0000-0000-0000-000000009994'), ('00010007-0000-0000-0000-000000010007', '00009993-0000-0000-0000-000000009993'), ('00010008-0000-0000-0000-000000010008', '00009992-0000-0000-0000-000000009992'), (None, None), (None, None), (None, None)]"
postgresql,postgresql,"SELECT noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_decreasing NULLS FIRST OFFSET 20000 - 4",tuplesort.sql,SAME,,"[('00010006-0000-0000-0000-000000010006', '00009994-0000-0000-0000-000000009994'), ('00010005-0000-0000-0000-000000010005', '00009995-0000-0000-0000-000000009995'), ('00010004-0000-0000-0000-000000010004', '00009996-0000-0000-0000-000000009996'), ('00010003-0000-0000-0000-000000010003', '00009997-0000-0000-0000-000000009997'), ('00010002-0000-0000-0000-000000010002', '00009998-0000-0000-0000-000000009998'), ('00010001-0000-0000-0000-000000010001', '00009999-0000-0000-0000-000000009999'), ('00010000-0000-0000-0000-000000010000', '00010000-0000-0000-0000-000000010000'), ('00009999-0000-0000-0000-000000009999', '00010001-0000-0000-0000-000000010001'), ('00009998-0000-0000-0000-000000009998', '00010002-0000-0000-0000-000000010002'), ('00009997-0000-0000-0000-000000009997', '00010003-0000-0000-0000-000000010003'), ('00009996-0000-0000-0000-000000009996', '00010004-0000-0000-0000-000000010004'), ('00009995-0000-0000-0000-000000009995', '00010005-0000-0000-0000-000000010005'), ('00009994-0000-0000-0000-000000009994', '00010006-0000-0000-0000-000000010006'), ('00009993-0000-0000-0000-000000009993', '00010007-0000-0000-0000-000000010007'), ('00009992-0000-0000-0000-000000009992', '00010008-0000-0000-0000-000000010008')]"
postgresql,postgresql,"SELECT abort_increasing, noabort_increasing FROM abbrev_abort_uuids ORDER BY abort_increasing LIMIT 5",tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000000000'), ('00000000-0000-0000-0000-000000000001', '00000001-0000-0000-0000-000000000001'), ('00000000-0000-0000-0000-000000000002', '00000002-0000-0000-0000-000000000002'), ('00000000-0000-0000-0000-000000000002', '00000002-0000-0000-0000-000000000002'), ('00000000-0000-0000-0000-000000000003', '00000003-0000-0000-0000-000000000003')]"
postgresql,postgresql,"SELECT abort_increasing, noabort_increasing FROM abbrev_abort_uuids ORDER BY noabort_increasing NULLS FIRST LIMIT 5",tuplesort.sql,SAME,,"[(None, None), (None, None), (None, None), ('00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000000000'), ('00000000-0000-0000-0000-000000010009', '00000000-0000-0000-0000-000000010009')]"
postgresql,postgresql,CREATE INDEX abbrev_abort_uuids__noabort_increasing_idx ON abbrev_abort_uuids (noabort_increasing),tuplesort.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX abbrev_abort_uuids__noabort_decreasing_idx ON abbrev_abort_uuids (noabort_decreasing),tuplesort.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT id, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_increasing LIMIT 5",tuplesort.sql,SAME,,"[('Limit',), ('  ->  Index Scan using abbrev_abort_uuids__noabort_increasing_idx on abbrev_abort_uuids',)]"
postgresql,postgresql,"SELECT id, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_increasing LIMIT 5",tuplesort.sql,SAME,,"[(1, '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000'), (10010, '00000000-0000-0000-0000-000000010009', '00009991-0000-0000-0000-000000009991'), (2, '00000001-0000-0000-0000-000000000001', '00009990-0000-0000-0000-000000019999'), (10011, '00000001-0000-0000-0000-000000010010', '00009990-0000-0000-0000-000000009990'), (3, '00000002-0000-0000-0000-000000000002', '00009989-0000-0000-0000-000000019998')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT id, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_decreasing LIMIT 5",tuplesort.sql,SAME,,"[('Limit',), ('  ->  Index Scan using abbrev_abort_uuids__noabort_decreasing_idx on abbrev_abort_uuids',)]"
postgresql,postgresql,"SELECT id, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_decreasing LIMIT 5",tuplesort.sql,SAME,,"[(20001, '00009991-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (20010, '00009991-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (9992, '00009991-0000-0000-0000-000000009991', '00000000-0000-0000-0000-000000010009'), (20000, '00009990-0000-0000-0000-000000019999', '00000001-0000-0000-0000-000000000001'), (9991, '00009990-0000-0000-0000-000000009990', '00000001-0000-0000-0000-000000010010')]"
postgresql,postgresql,CREATE INDEX abbrev_abort_uuids__abort_increasing_idx ON abbrev_abort_uuids (abort_increasing),tuplesort.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX abbrev_abort_uuids__abort_decreasing_idx ON abbrev_abort_uuids (abort_decreasing),tuplesort.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT id, abort_increasing, abort_decreasing FROM abbrev_abort_uuids ORDER BY abort_increasing LIMIT 5",tuplesort.sql,SAME,,"[('Limit',), ('  ->  Index Scan using abbrev_abort_uuids__abort_increasing_idx on abbrev_abort_uuids',)]"
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing FROM abbrev_abort_uuids ORDER BY abort_increasing LIMIT 5",tuplesort.sql,SAME,,"[(1, '00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000020000'), (2, '00000000-0000-0000-0000-000000000001', '00000000-0000-0000-0000-000000019999'), (3, '00000000-0000-0000-0000-000000000002', '00000000-0000-0000-0000-000000019998'), (20004, '00000000-0000-0000-0000-000000000002', '00000000-0000-0000-0000-000000019998'), (4, '00000000-0000-0000-0000-000000000003', '00000000-0000-0000-0000-000000019997')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT id, abort_increasing, abort_decreasing FROM abbrev_abort_uuids ORDER BY abort_decreasing LIMIT 5",tuplesort.sql,SAME,,"[('Limit',), ('  ->  Index Scan using abbrev_abort_uuids__abort_decreasing_idx on abbrev_abort_uuids',)]"
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing FROM abbrev_abort_uuids ORDER BY abort_decreasing LIMIT 5",tuplesort.sql,SAME,,"[(20001, '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (20010, '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (20000, '00000000-0000-0000-0000-000000019999', '00000000-0000-0000-0000-000000000001'), (19999, '00000000-0000-0000-0000-000000019998', '00000000-0000-0000-0000-000000000002'), (19998, '00000000-0000-0000-0000-000000019997', '00000000-0000-0000-0000-000000000003')]"
postgresql,postgresql,BEGIN,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan = false,tuplesort.sql,SAME,,[]
postgresql,postgresql,CLUSTER abbrev_abort_uuids USING abbrev_abort_uuids__abort_increasing_idx,tuplesort.sql,SAME,,[]
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY ctid LIMIT 5",tuplesort.sql,SAME,,"[(1, '00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000'), (2, '00000000-0000-0000-0000-000000000001', '00000000-0000-0000-0000-000000019999', '00000001-0000-0000-0000-000000000001', '00009990-0000-0000-0000-000000019999'), (3, '00000000-0000-0000-0000-000000000002', '00000000-0000-0000-0000-000000019998', '00000002-0000-0000-0000-000000000002', '00009989-0000-0000-0000-000000019998'), (20004, '00000000-0000-0000-0000-000000000002', '00000000-0000-0000-0000-000000019998', '00000002-0000-0000-0000-000000000002', '00009989-0000-0000-0000-000000019998'), (4, '00000000-0000-0000-0000-000000000003', '00000000-0000-0000-0000-000000019997', '00000003-0000-0000-0000-000000000003', '00009988-0000-0000-0000-000000019997')]"
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY ctid DESC LIMIT 5",tuplesort.sql,SAME,,"[(0, None, None, None, None), (20002, None, None, None, None), (20003, None, None, None, None), (20001, '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (20010, '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000')]"
postgresql,postgresql,ROLLBACK,tuplesort.sql,SAME,,[]
postgresql,postgresql,BEGIN,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan = false,tuplesort.sql,SAME,,[]
postgresql,postgresql,CLUSTER abbrev_abort_uuids USING abbrev_abort_uuids__abort_decreasing_idx,tuplesort.sql,SAME,,[]
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY ctid LIMIT 5",tuplesort.sql,SAME,,"[(20010, '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (20001, '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (20000, '00000000-0000-0000-0000-000000019999', '00000000-0000-0000-0000-000000000001', '00009990-0000-0000-0000-000000019999', '00000001-0000-0000-0000-000000000001'), (19999, '00000000-0000-0000-0000-000000019998', '00000000-0000-0000-0000-000000000002', '00009989-0000-0000-0000-000000019998', '00000002-0000-0000-0000-000000000002'), (20009, '00000000-0000-0000-0000-000000019997', '00000000-0000-0000-0000-000000000003', '00009988-0000-0000-0000-000000019997', '00000003-0000-0000-0000-000000000003')]"
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY ctid DESC LIMIT 5",tuplesort.sql,SAME,,"[(0, None, None, None, None), (20002, None, None, None, None), (20003, None, None, None, None), (1, '00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000'), (2, '00000000-0000-0000-0000-000000000001', '00000000-0000-0000-0000-000000019999', '00000001-0000-0000-0000-000000000001', '00009990-0000-0000-0000-000000019999')]"
postgresql,postgresql,ROLLBACK,tuplesort.sql,SAME,,[]
postgresql,postgresql,BEGIN,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan = false,tuplesort.sql,SAME,,[]
postgresql,postgresql,CLUSTER abbrev_abort_uuids USING abbrev_abort_uuids__noabort_increasing_idx,tuplesort.sql,SAME,,[]
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY ctid LIMIT 5",tuplesort.sql,SAME,,"[(1, '00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000'), (10010, '00000000-0000-0000-0000-000000010009', '00000000-0000-0000-0000-000000009991', '00000000-0000-0000-0000-000000010009', '00009991-0000-0000-0000-000000009991'), (2, '00000000-0000-0000-0000-000000000001', '00000000-0000-0000-0000-000000019999', '00000001-0000-0000-0000-000000000001', '00009990-0000-0000-0000-000000019999'), (10011, '00000000-0000-0000-0000-000000010010', '00000000-0000-0000-0000-000000009990', '00000001-0000-0000-0000-000000010010', '00009990-0000-0000-0000-000000009990'), (20004, '00000000-0000-0000-0000-000000000002', '00000000-0000-0000-0000-000000019998', '00000002-0000-0000-0000-000000000002', '00009989-0000-0000-0000-000000019998')]"
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY ctid DESC LIMIT 5",tuplesort.sql,SAME,,"[(0, None, None, None, None), (20002, None, None, None, None), (20003, None, None, None, None), (10009, '00000000-0000-0000-0000-000000010008', '00000000-0000-0000-0000-000000009992', '00010008-0000-0000-0000-000000010008', '00009992-0000-0000-0000-000000009992'), (10008, '00000000-0000-0000-0000-000000010007', '00000000-0000-0000-0000-000000009993', '00010007-0000-0000-0000-000000010007', '00009993-0000-0000-0000-000000009993')]"
postgresql,postgresql,ROLLBACK,tuplesort.sql,SAME,,[]
postgresql,postgresql,BEGIN,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan = false,tuplesort.sql,SAME,,[]
postgresql,postgresql,CLUSTER abbrev_abort_uuids USING abbrev_abort_uuids__noabort_decreasing_idx,tuplesort.sql,SAME,,[]
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY ctid LIMIT 5",tuplesort.sql,SAME,,"[(20010, '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (20001, '00000000-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000', '00009991-0000-0000-0000-000000020000', '00000000-0000-0000-0000-000000000000'), (9992, '00000000-0000-0000-0000-000000009991', '00000000-0000-0000-0000-000000010009', '00009991-0000-0000-0000-000000009991', '00000000-0000-0000-0000-000000010009'), (20000, '00000000-0000-0000-0000-000000019999', '00000000-0000-0000-0000-000000000001', '00009990-0000-0000-0000-000000019999', '00000001-0000-0000-0000-000000000001'), (9991, '00000000-0000-0000-0000-000000009990', '00000000-0000-0000-0000-000000010010', '00009990-0000-0000-0000-000000009990', '00000001-0000-0000-0000-000000010010')]"
postgresql,postgresql,"SELECT id, abort_increasing, abort_decreasing, noabort_increasing, noabort_decreasing FROM abbrev_abort_uuids ORDER BY ctid DESC LIMIT 5",tuplesort.sql,SAME,,"[(0, None, None, None, None), (20003, None, None, None, None), (20002, None, None, None, None), (9993, '00000000-0000-0000-0000-000000009992', '00000000-0000-0000-0000-000000010008', '00009992-0000-0000-0000-000000009992', '00010008-0000-0000-0000-000000010008'), (9994, '00000000-0000-0000-0000-000000009993', '00000000-0000-0000-0000-000000010007', '00009993-0000-0000-0000-000000009993', '00010007-0000-0000-0000-000000010007')]"
postgresql,postgresql,ROLLBACK,tuplesort.sql,SAME,,[]
postgresql,postgresql,BEGIN,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan = false,tuplesort.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) DECLARE c SCROLL CURSOR FOR SELECT noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_decreasing,tuplesort.sql,SAME,,"[('Sort',), ('  Sort Key: noabort_decreasing',), ('  ->  Seq Scan on abbrev_abort_uuids',)]"
postgresql,postgresql,DECLARE c SCROLL CURSOR FOR SELECT noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_decreasing,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000000',)]"
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000000',)]"
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000000',)]"
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000000',)]"
postgresql,postgresql,FETCH LAST FROM c,tuplesort.sql,SAME,,"[(None,)]"
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,"[(None,)]"
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,"[(None,)]"
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,"[(None,)]"
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,COMMIT,tuplesort.sql,SAME,,[]
postgresql,postgresql,BEGIN,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_indexscan = false,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL work_mem = '100kB',tuplesort.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) DECLARE c SCROLL CURSOR FOR SELECT noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_decreasing,tuplesort.sql,SAME,,"[('Sort',), ('  Sort Key: noabort_decreasing',), ('  ->  Seq Scan on abbrev_abort_uuids',)]"
postgresql,postgresql,DECLARE c SCROLL CURSOR FOR SELECT noabort_decreasing FROM abbrev_abort_uuids ORDER BY noabort_decreasing,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000000',)]"
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000000',)]"
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000000',)]"
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,"[('00000000-0000-0000-0000-000000000000',)]"
postgresql,postgresql,FETCH LAST FROM c,tuplesort.sql,SAME,,"[(None,)]"
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,"[(None,)]"
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,"[(None,)]"
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,FETCH BACKWARD FROM c,tuplesort.sql,SAME,,"[(None,)]"
postgresql,postgresql,FETCH NEXT FROM c,tuplesort.sql,SAME,,[]
postgresql,postgresql,COMMIT,tuplesort.sql,SAME,,[]
postgresql,postgresql,"SELECT     (array_agg(id ORDER BY id DESC NULLS FIRST))[0:5],     (array_agg(abort_increasing ORDER BY abort_increasing DESC NULLS LAST))[0:5],     (array_agg(id::text ORDER BY id::text DESC NULLS LAST))[0:5],     percentile_disc(0.99) WITHIN GROUP (ORDER BY id),     percentile_disc(0.01) WITHIN GROUP (ORDER BY id),     percentile_disc(0.8) WITHIN GROUP (ORDER BY abort_increasing),     percentile_disc(0.2) WITHIN GROUP (ORDER BY id::text),     rank('00000000-0000-0000-0000-000000000000', '2', '2') WITHIN GROUP (ORDER BY noabort_increasing, id, id::text) FROM (     SELECT * FROM abbrev_abort_uuids     UNION ALL     SELECT NULL, NULL, NULL, NULL, NULL) s",tuplesort.sql,SAME,,"[([None, 20010, 20009, 20008, 20007], '{00000000-0000-0000-0000-000000020000,00000000-0000-0000-0000-000000020000,00000000-0000-0000-0000-000000019999,00000000-0000-0000-0000-000000019998,00000000-0000-0000-0000-000000019997}', ['9999', '9998', '9997', '9996', '9995'], 19810, 200, '00000000-0000-0000-0000-000000016003', '136', 2)]"
postgresql,postgresql,BEGIN,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL work_mem = '100kB',tuplesort.sql,SAME,,[]
postgresql,postgresql,"SELECT     (array_agg(id ORDER BY id DESC NULLS FIRST))[0:5],     (array_agg(abort_increasing ORDER BY abort_increasing DESC NULLS LAST))[0:5],     (array_agg(id::text ORDER BY id::text DESC NULLS LAST))[0:5],     percentile_disc(0.99) WITHIN GROUP (ORDER BY id),     percentile_disc(0.01) WITHIN GROUP (ORDER BY id),     percentile_disc(0.8) WITHIN GROUP (ORDER BY abort_increasing),     percentile_disc(0.2) WITHIN GROUP (ORDER BY id::text),     rank('00000000-0000-0000-0000-000000000000', '2', '2') WITHIN GROUP (ORDER BY noabort_increasing, id, id::text) FROM (     SELECT * FROM abbrev_abort_uuids     UNION ALL     SELECT NULL, NULL, NULL, NULL, NULL) s",tuplesort.sql,SAME,,"[([None, 20010, 20009, 20008, 20007], '{00000000-0000-0000-0000-000000020000,00000000-0000-0000-0000-000000020000,00000000-0000-0000-0000-000000019999,00000000-0000-0000-0000-000000019998,00000000-0000-0000-0000-000000019997}', ['9999', '9998', '9997', '9996', '9995'], 19810, 200, '00000000-0000-0000-0000-000000016003', '136', 2)]"
postgresql,postgresql,ROLLBACK,tuplesort.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE test_mark_restore(col1 int, col2 int, col12 int)",tuplesort.sql,SAME,,[]
postgresql,postgresql,BEGIN,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_nestloop = off,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_hashjoin = off,tuplesort.sql,SAME,,[]
postgresql,postgresql,SET LOCAL enable_material = off,tuplesort.sql,SAME,,[]
postgresql,postgresql,COMMIT,tuplesort.sql,SAME,,[]
postgresql,postgresql,select '12:13:'::txid_snapshot,txid.sql,SAME,,"[('12:13:',)]"
postgresql,postgresql,"select '12:18:14,16'::txid_snapshot",txid.sql,SAME,,"[('12:18:14,16',)]"
postgresql,postgresql,"select '12:16:14,14'::txid_snapshot",txid.sql,SAME,,"[('12:16:14',)]"
postgresql,postgresql,"create temp table snapshot_test ( 	nr	integer, 	snap	txid_snapshot )",txid.sql,SAME,,[]
postgresql,postgresql,select snap from snapshot_test order by nr,txid.sql,SAME,,"[('12:13:',), ('12:20:13,15,18',), ('100001:100009:100005,100007,100008',), ('100:150:101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131',)]"
postgresql,postgresql,"select  txid_snapshot_xmin(snap), 	txid_snapshot_xmax(snap), 	txid_snapshot_xip(snap) from snapshot_test order by nr",txid.sql,SAME,,"[(12, 20, 13), (12, 20, 15), (12, 20, 18), (100001, 100009, 100005), (100001, 100009, 100007), (100001, 100009, 100008), (100, 150, 101), (100, 150, 102), (100, 150, 103), (100, 150, 104), (100, 150, 105), (100, 150, 106), (100, 150, 107), (100, 150, 108), (100, 150, 109), (100, 150, 110), (100, 150, 111), (100, 150, 112), (100, 150, 113), (100, 150, 114), (100, 150, 115), (100, 150, 116), (100, 150, 117), (100, 150, 118), (100, 150, 119), (100, 150, 120), (100, 150, 121), (100, 150, 122), (100, 150, 123), (100, 150, 124), (100, 150, 125), (100, 150, 126), (100, 150, 127), (100, 150, 128), (100, 150, 129), (100, 150, 130), (100, 150, 131)]"
postgresql,postgresql,"select id, txid_visible_in_snapshot(id, snap) from snapshot_test, generate_series(11, 21) id where nr = 2",txid.sql,SAME,,"[(11, True), (12, True), (13, False), (14, True), (15, False), (16, True), (17, True), (18, False), (19, True), (20, False), (21, False)]"
postgresql,postgresql,"select id, txid_visible_in_snapshot(id, snap) from snapshot_test, generate_series(90, 160) id where nr = 4",txid.sql,SAME,,"[(90, True), (91, True), (92, True), (93, True), (94, True), (95, True), (96, True), (97, True), (98, True), (99, True), (100, True), (101, False), (102, False), (103, False), (104, False), (105, False), (106, False), (107, False), (108, False), (109, False), (110, False), (111, False), (112, False), (113, False), (114, False), (115, False), (116, False), (117, False), (118, False), (119, False), (120, False), (121, False), (122, False), (123, False), (124, False), (125, False), (126, False), (127, False), (128, False), (129, False), (130, False), (131, False), (132, True), (133, True), (134, True), (135, True), (136, True), (137, True), (138, True), (139, True), (140, True), (141, True), (142, True), (143, True), (144, True), (145, True), (146, True), (147, True), (148, True), (149, True), (150, False), (151, False), (152, False), (153, False), (154, False), (155, False), (156, False), (157, False), (158, False), (159, False), (160, False)]"
postgresql,postgresql,select txid_current() >= txid_snapshot_xmin(txid_current_snapshot()),txid.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select txid_visible_in_snapshot(txid_current(), txid_current_snapshot())",txid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select txid_snapshot '1000100010001000:1000100010001100:1000100010001012,1000100010001013'",txid.sql,SAME,,"[('1000100010001000:1000100010001100:1000100010001012,1000100010001013',)]"
postgresql,postgresql,"select txid_visible_in_snapshot('1000100010001012', '1000100010001000:1000100010001100:1000100010001012,1000100010001013')",txid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select txid_visible_in_snapshot('1000100010001015', '1000100010001000:1000100010001100:1000100010001012,1000100010001013')",txid.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT txid_snapshot '1:9223372036854775807:3',txid.sql,SAME,,"[('1:9223372036854775807:3',)]"
postgresql,postgresql,BEGIN,txid.sql,SAME,,[]
postgresql,postgresql,SELECT txid_current_if_assigned() IS NULL,txid.sql,SAME,,"[(True,)]"
postgresql,postgresql,COMMIT,txid.sql,SAME,,[]
postgresql,postgresql,BEGIN,txid.sql,SAME,,[]
postgresql,postgresql,COMMIT,txid.sql,SAME,,[]
postgresql,postgresql,BEGIN,txid.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION test_future_xid_status(bigint) RETURNS void LANGUAGE plpgsql AS $$ BEGIN   PERFORM txid_status($1);   RAISE EXCEPTION 'didn''t ERROR at xid in the future as expected'; EXCEPTION   WHEN invalid_parameter_value THEN     RAISE NOTICE 'Got expected error for xid in the future'; END; $$,txid.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,txid.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname FROM pg_type as t1 WHERE t1.typnamespace = 0 OR     (t1.typlen <= 0 AND t1.typlen != -1 AND t1.typlen != -2) OR     (t1.typtype not in ('b', 'c', 'd', 'e', 'm', 'p', 'r')) OR     NOT t1.typisdefined OR     (t1.typalign not in ('c', 's', 'i', 'd')) OR     (t1.typstorage not in ('p', 'x', 'e', 'm'))",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname FROM pg_type as t1 WHERE t1.typbyval AND     (t1.typlen != 1 OR t1.typalign != 'c') AND     (t1.typlen != 2 OR t1.typalign != 's') AND     (t1.typlen != 4 OR t1.typalign != 'i') AND     (t1.typlen != 8 OR t1.typalign != 'd')",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname FROM pg_type as t1 WHERE t1.typstorage != 'p' AND     (t1.typbyval OR t1.typlen != -1)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname FROM pg_type as t1 WHERE (t1.typtype = 'c' AND t1.typrelid = 0) OR     (t1.typtype != 'c' AND t1.typrelid != 0)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname FROM pg_type as t1 WHERE t1.typtype not in ('p') AND t1.typname NOT LIKE E'\\_%'     AND NOT EXISTS     (SELECT 1 FROM pg_type as t2      WHERE t2.typname = ('_' || t1.typname)::name AND            t2.typelem = t1.oid and t1.typarray = t2.oid) ORDER BY t1.oid",type_sanity.sql,SAME,,"[(194, 'pg_node_tree'), (3361, 'pg_ndistinct'), (3402, 'pg_dependencies'), (4600, 'pg_brin_bloom_summary'), (4601, 'pg_brin_minmax_multi_summary'), (5017, 'pg_mcv_list')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname as basetype, t2.typname as arraytype,        t2.typsubscript FROM   pg_type t1 LEFT JOIN pg_type t2 ON (t1.typarray = t2.oid) WHERE  t1.typarray <> 0 AND        (t2.oid IS NULL OR         t2.typsubscript <> 'array_subscript_handler'::regproc)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname FROM pg_type as t1 WHERE t1.typtype = 'r' AND    NOT EXISTS(SELECT 1 FROM pg_range r WHERE rngtypid = t1.oid)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, t1.typalign, t2.typname, t2.typalign FROM pg_type as t1      LEFT JOIN pg_range as r ON rngtypid = t1.oid      LEFT JOIN pg_type as t2 ON rngsubtype = t2.oid WHERE t1.typtype = 'r' AND     (t1.typalign != (CASE WHEN t2.typalign = 'd' THEN 'd'::""char""                           ELSE 'i'::""char"" END)      OR t2.oid IS NULL)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname FROM pg_type as t1 WHERE (t1.typinput = 0 OR t1.typoutput = 0)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typinput = p1.oid AND NOT     ((p1.pronargs = 1 AND p1.proargtypes[0] = 'cstring'::regtype) OR      (p1.pronargs = 2 AND p1.proargtypes[0] = 'cstring'::regtype AND       p1.proargtypes[1] = 'oid'::regtype) OR      (p1.pronargs = 3 AND p1.proargtypes[0] = 'cstring'::regtype AND       p1.proargtypes[1] = 'oid'::regtype AND       p1.proargtypes[2] = 'int4'::regtype))",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typinput = p1.oid AND t1.typtype in ('b', 'p') AND NOT     (t1.typelem != 0 AND t1.typlen < 0) AND NOT     (p1.prorettype = t1.oid AND NOT p1.proretset) ORDER BY 1",type_sanity.sql,SAME,,"[(1790, 'refcursor', 46, 'textin')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typinput = p1.oid AND     (t1.typelem != 0 AND t1.typlen < 0) AND NOT     (p1.oid = 'array_in'::regproc) ORDER BY 1",type_sanity.sql,SAME,,"[(22, 'int2vector', 40, 'int2vectorin'), (30, 'oidvector', 54, 'oidvectorin')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typinput = p1.oid AND p1.provolatile NOT IN ('i', 's')",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT typtype, typinput FROM pg_type AS t1 WHERE t1.typtype not in ('b', 'p') ORDER BY 1",type_sanity.sql,SAME,,"[('c', 'record_in'), ('d', 'domain_in'), ('m', 'multirange_in'), ('r', 'range_in')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typoutput = p1.oid AND t1.typtype in ('b', 'p') AND NOT     (p1.pronargs = 1 AND      (p1.proargtypes[0] = t1.oid OR       (p1.oid = 'array_out'::regproc AND        t1.typelem != 0 AND t1.typlen = -1))) ORDER BY 1",type_sanity.sql,SAME,,"[(1790, 'refcursor', 47, 'textout')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typoutput = p1.oid AND NOT     (p1.prorettype = 'cstring'::regtype AND NOT p1.proretset)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typoutput = p1.oid AND p1.provolatile NOT IN ('i', 's')",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT typtype, typoutput FROM pg_type AS t1 WHERE t1.typtype not in ('b', 'd', 'p') ORDER BY 1",type_sanity.sql,SAME,,"[('c', 'record_out'), ('m', 'multirange_out'), ('r', 'range_out')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, t2.oid, t2.typname FROM pg_type AS t1 LEFT JOIN pg_type AS t2 ON t1.typbasetype = t2.oid WHERE t1.typtype = 'd' AND t1.typoutput IS DISTINCT FROM t2.typoutput",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typreceive = p1.oid AND NOT     ((p1.pronargs = 1 AND p1.proargtypes[0] = 'internal'::regtype) OR      (p1.pronargs = 2 AND p1.proargtypes[0] = 'internal'::regtype AND       p1.proargtypes[1] = 'oid'::regtype) OR      (p1.pronargs = 3 AND p1.proargtypes[0] = 'internal'::regtype AND       p1.proargtypes[1] = 'oid'::regtype AND       p1.proargtypes[2] = 'int4'::regtype))",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typreceive = p1.oid AND t1.typtype in ('b', 'p') AND NOT     (t1.typelem != 0 AND t1.typlen < 0) AND NOT     (p1.prorettype = t1.oid AND NOT p1.proretset) ORDER BY 1",type_sanity.sql,SAME,,"[(1790, 'refcursor', 2414, 'textrecv')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typreceive = p1.oid AND     (t1.typelem != 0 AND t1.typlen < 0) AND NOT     (p1.oid = 'array_recv'::regproc) ORDER BY 1",type_sanity.sql,SAME,,"[(22, 'int2vector', 2410, 'int2vectorrecv'), (30, 'oidvector', 2420, 'oidvectorrecv')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname, p2.oid, p2.proname FROM pg_type AS t1, pg_proc AS p1, pg_proc AS p2 WHERE t1.typinput = p1.oid AND t1.typreceive = p2.oid AND     p1.pronargs != p2.pronargs",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typreceive = p1.oid AND p1.provolatile NOT IN ('i', 's')",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT typtype, typreceive FROM pg_type AS t1 WHERE t1.typtype not in ('b', 'p') ORDER BY 1",type_sanity.sql,SAME,,"[('c', 'record_recv'), ('d', 'domain_recv'), ('m', 'multirange_recv'), ('r', 'range_recv')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typsend = p1.oid AND t1.typtype in ('b', 'p') AND NOT     (p1.pronargs = 1 AND      (p1.proargtypes[0] = t1.oid OR       (p1.oid = 'array_send'::regproc AND        t1.typelem != 0 AND t1.typlen = -1))) ORDER BY 1",type_sanity.sql,SAME,,"[(1790, 'refcursor', 2415, 'textsend')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typsend = p1.oid AND NOT     (p1.prorettype = 'bytea'::regtype AND NOT p1.proretset)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typsend = p1.oid AND p1.provolatile NOT IN ('i', 's')",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT DISTINCT typtype, typsend FROM pg_type AS t1 WHERE t1.typtype not in ('b', 'd', 'p') ORDER BY 1",type_sanity.sql,SAME,,"[('c', 'record_send'), ('m', 'multirange_send'), ('r', 'range_send')]"
postgresql,postgresql,"SELECT t1.oid, t1.typname, t2.oid, t2.typname FROM pg_type AS t1 LEFT JOIN pg_type AS t2 ON t1.typbasetype = t2.oid WHERE t1.typtype = 'd' AND t1.typsend IS DISTINCT FROM t2.typsend",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typmodin = p1.oid AND NOT     (p1.pronargs = 1 AND      p1.proargtypes[0] = 'cstring[]'::regtype AND      p1.prorettype = 'int4'::regtype AND NOT p1.proretset)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typmodin = p1.oid AND p1.provolatile NOT IN ('i', 's')",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typmodout = p1.oid AND NOT     (p1.pronargs = 1 AND      p1.proargtypes[0] = 'int4'::regtype AND      p1.prorettype = 'cstring'::regtype AND NOT p1.proretset)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typmodout = p1.oid AND p1.provolatile NOT IN ('i', 's')",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, t2.oid, t2.typname FROM pg_type AS t1, pg_type AS t2 WHERE t1.typelem = t2.oid AND NOT     (t1.typmodin = t2.typmodin AND t1.typmodout = t2.typmodout)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, t2.oid, t2.typname FROM pg_type AS t1, pg_type AS t2 WHERE t1.typarray = t2.oid AND NOT (t1.typdelim = t2.typdelim)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, t1.typalign, t2.typname, t2.typalign FROM pg_type AS t1, pg_type AS t2 WHERE t1.typarray = t2.oid AND     t2.typalign != (CASE WHEN t1.typalign = 'd' THEN 'd'::""char""                          ELSE 'i'::""char"" END)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, t1.typelem FROM pg_type AS t1 WHERE t1.typelem != 0 AND t1.typsubscript = 0",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname,        t1.typelem, t1.typlen, t1.typbyval FROM pg_type AS t1 WHERE t1.typsubscript = 'array_subscript_handler'::regproc AND NOT     (t1.typelem != 0 AND t1.typlen = -1 AND NOT t1.typbyval)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname,        t1.typelem, t1.typlen, t1.typbyval FROM pg_type AS t1 WHERE t1.typsubscript = 'raw_array_subscript_handler'::regproc AND NOT     (t1.typelem != 0 AND t1.typlen > 0 AND NOT t1.typbyval)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t1.oid, t1.typname, p1.oid, p1.proname FROM pg_type AS t1, pg_proc AS p1 WHERE t1.typanalyze = p1.oid AND NOT     (p1.pronargs = 1 AND      p1.proargtypes[0] = 'internal'::regtype AND      p1.prorettype = 'bool'::regtype AND NOT p1.proretset)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT d.oid, d.typname, d.typanalyze, t.oid, t.typname, t.typanalyze FROM pg_type d JOIN pg_type t ON d.typbasetype = t.oid WHERE d.typanalyze != t.typanalyze",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t.oid, t.typname, t.typanalyze FROM pg_type t LEFT JOIN pg_range r on t.oid = r.rngtypid WHERE t.typbasetype = 0 AND     (t.typanalyze = 'range_typanalyze'::regproc) != (r.rngtypid IS NOT NULL)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT t.oid, t.typname, t.typanalyze FROM pg_type t WHERE t.typbasetype = 0 AND     (t.typanalyze = 'array_typanalyze'::regproc) !=     (t.typsubscript = 'array_subscript_handler'::regproc) ORDER BY 1",type_sanity.sql,SAME,,"[(22, 'int2vector', '-'), (30, 'oidvector', '-')]"
postgresql,postgresql,"SELECT c1.oid, c1.relname FROM pg_class as c1 WHERE relkind NOT IN ('r', 'i', 'S', 't', 'v', 'm', 'c', 'f', 'p', 'I') OR     relpersistence NOT IN ('p', 'u', 't') OR     relreplident NOT IN ('d', 'n', 'f', 'i')",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT c1.oid, c1.relname FROM pg_class as c1 WHERE c1.relkind NOT IN ('S', 'v', 'f', 'c', 'p') and     c1.relam = 0",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT c1.oid, c1.relname FROM pg_class as c1 WHERE c1.relkind IN ('S', 'v', 'f', 'c', 'p') and     c1.relam != 0",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT pc.oid, pc.relname, pa.amname, pa.amtype FROM pg_class as pc JOIN pg_am AS pa ON (pc.relam = pa.oid) WHERE pc.relkind IN ('i', 'I') and     pa.amtype != 'i'",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT pc.oid, pc.relname, pa.amname, pa.amtype FROM pg_class as pc JOIN pg_am AS pa ON (pc.relam = pa.oid) WHERE pc.relkind IN ('r', 't', 'm') and     pa.amtype != 't'",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.attrelid, a1.attname FROM pg_attribute as a1 WHERE a1.attrelid = 0 OR a1.atttypid = 0 OR a1.attnum = 0 OR     a1.attcacheoff != -1 OR a1.attinhcount < 0 OR     (a1.attinhcount = 0 AND NOT a1.attislocal)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.attrelid, a1.attname, c1.oid, c1.relname FROM pg_attribute AS a1, pg_class AS c1 WHERE a1.attrelid = c1.oid AND a1.attnum > c1.relnatts",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT c1.oid, c1.relname FROM pg_class AS c1 WHERE c1.relnatts != (SELECT count(*) FROM pg_attribute AS a1                       WHERE a1.attrelid = c1.oid AND a1.attnum > 0)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT a1.attrelid, a1.attname, t1.oid, t1.typname FROM pg_attribute AS a1, pg_type AS t1 WHERE a1.atttypid = t1.oid AND     (a1.attlen != t1.typlen OR      a1.attalign != t1.typalign OR      a1.attbyval != t1.typbyval OR      (a1.attstorage != t1.typstorage AND a1.attstorage != 'p'))",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT r.rngtypid, r.rngsubtype FROM pg_range as r WHERE r.rngtypid = 0 OR r.rngsubtype = 0 OR r.rngsubopc = 0",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT r.rngtypid, r.rngsubtype, r.rngcollation, t.typcollation FROM pg_range r JOIN pg_type t ON t.oid = r.rngsubtype WHERE (rngcollation = 0) != (typcollation = 0)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT r.rngtypid, r.rngsubtype, o.opcmethod, o.opcname FROM pg_range r JOIN pg_opclass o ON o.oid = r.rngsubopc WHERE o.opcmethod != 403 OR     ((o.opcintype != r.rngsubtype) AND NOT      (o.opcintype = 'pg_catalog.anyarray'::regtype AND       EXISTS(select 1 from pg_catalog.pg_type where              oid = r.rngsubtype and typelem != 0 and              typsubscript = 'array_subscript_handler'::regproc)))",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT r.rngtypid, r.rngsubtype, p.proname FROM pg_range r JOIN pg_proc p ON p.oid = r.rngcanonical WHERE pronargs != 1 OR proargtypes[0] != rngtypid OR prorettype != rngtypid",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT r.rngtypid, r.rngsubtype, p.proname FROM pg_range r JOIN pg_proc p ON p.oid = r.rngsubdiff WHERE pronargs != 2     OR proargtypes[0] != rngsubtype OR proargtypes[1] != rngsubtype     OR prorettype != 'pg_catalog.float8'::regtype",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT r.rngtypid, r.rngsubtype, r.rngmultitypid FROM pg_range r WHERE r.rngmultitypid IS NULL OR r.rngmultitypid = 0",type_sanity.sql,SAME,,[]
postgresql,postgresql,"SELECT oid, typname, typtype, typelem, typarray   FROM pg_type t   WHERE oid < 16384 AND     typtype NOT IN ('p', 'c') AND     oid != ALL(ARRAY['regproc', 'regprocedure', 'regoper',                      'regoperator', 'regconfig', 'regdictionary',                      'regnamespace', 'regcollation']::regtype[]) AND     oid != ALL(ARRAY['gtsvector', 'pg_node_tree',                      'pg_ndistinct', 'pg_dependencies', 'pg_mcv_list',                      'pg_brin_bloom_summary',                      'pg_brin_minmax_multi_summary', 'xml']::regtype[]) AND     NOT EXISTS (SELECT 1 FROM pg_type u WHERE u.typarray = t.oid)     AND NOT EXISTS (SELECT 1                     FROM pg_attribute a                     WHERE a.atttypid=t.oid AND                           a.attnum > 0 AND                           a.attrelid='tab_core_types'::regclass)",type_sanity.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE person_type AS (id int, name text)",typed_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM persons,typed_table.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION get_all_persons() RETURNS SETOF person_type LANGUAGE SQL AS $$     SELECT * FROM persons; $$,typed_table.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM get_all_persons(),typed_table.sql,SAME,,[]
postgresql,postgresql,DROP TYPE person_type CASCADE,typed_table.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE person_type AS (id int, name text)",typed_table.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION namelen(person_type) RETURNS int LANGUAGE SQL AS $$ SELECT length($1.name) $$,typed_table.sql,SAME,,[]
postgresql,postgresql,"SELECT id, namelen(persons) FROM persons",typed_table.sql,SAME,,"[(1, 4)]"
postgresql,postgresql,SELECT normalize(''),unicode.sql,SAME,,"[('',)]"
postgresql,postgresql,"SELECT normalize(U&'\0061\0308\24D1c') = U&'\00E4\24D1c' COLLATE ""C"" AS test_default",unicode.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT normalize(U&'\0061\0308\24D1c', NFC) = U&'\00E4\24D1c' COLLATE ""C"" AS test_nfc",unicode.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT normalize(U&'\00E4bc', NFC) = U&'\00E4bc' COLLATE ""C"" AS test_nfc_idem",unicode.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT normalize(U&'\00E4\24D1c', NFD) = U&'\0061\0308\24D1c' COLLATE ""C"" AS test_nfd",unicode.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT normalize(U&'\0061\0308\24D1c', NFKC) = U&'\00E4bc' COLLATE ""C"" AS test_nfkc",unicode.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT normalize(U&'\00E4\24D1c', NFKD) = U&'\0061\0308bc' COLLATE ""C"" AS test_nfkd",unicode.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT U&'\00E4\24D1c' IS NORMALIZED AS test_default,unicode.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT U&'\00E4\24D1c' IS NFC NORMALIZED AS test_nfc,unicode.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT num, val,     val IS NFC NORMALIZED AS NFC,     val IS NFD NORMALIZED AS NFD,     val IS NFKC NORMALIZED AS NFKC,     val IS NFKD NORMALIZED AS NFKD FROM   (VALUES (1, U&'\00E4bc'),           (2, U&'\0061\0308bc'),           (3, U&'\00E4\24D1c'),           (4, U&'\0061\0308\24D1c'),           (5, '')) vals (num, val) ORDER BY num",unicode.sql,SAME,,"[(1, 'äbc', True, False, True, False), (2, 'äbc', False, True, False, True), (3, 'äⓑc', True, False, False, False), (4, 'äⓑc', False, True, False, False), (5, '', True, True, True, True)]"
postgresql,postgresql,SELECT 1 AS two UNION SELECT 2 ORDER BY 1,union.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,SELECT 1 AS one UNION SELECT 1 ORDER BY 1,union.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT 1 AS two UNION ALL SELECT 2,union.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,SELECT 1 AS two UNION ALL SELECT 1,union.sql,SAME,,"[(1,), (1,)]"
postgresql,postgresql,SELECT 1 AS three UNION SELECT 2 UNION SELECT 3 ORDER BY 1,union.sql,SAME,,"[(1,), (2,), (3,)]"
postgresql,postgresql,SELECT 1 AS two UNION SELECT 2 UNION SELECT 2 ORDER BY 1,union.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,SELECT 1 AS three UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1,union.sql,SAME,,"[(1,), (2,), (2,)]"
postgresql,postgresql,SELECT 1.1 AS two UNION SELECT 2.2 ORDER BY 1,union.sql,SAME,,"[(Decimal('1.1'),), (Decimal('2.2'),)]"
postgresql,postgresql,SELECT 1.1 AS two UNION SELECT 2 ORDER BY 1,union.sql,SAME,,"[(Decimal('1.1'),), (Decimal('2'),)]"
postgresql,postgresql,SELECT 1 AS two UNION SELECT 2.2 ORDER BY 1,union.sql,SAME,,"[(Decimal('1'),), (Decimal('2.2'),)]"
postgresql,postgresql,SELECT 1 AS one UNION SELECT 1.0::float8 ORDER BY 1,union.sql,SAME,,"[(1.0,)]"
postgresql,postgresql,SELECT 1.1 AS two UNION ALL SELECT 2 ORDER BY 1,union.sql,SAME,,"[(Decimal('1.1'),), (Decimal('2'),)]"
postgresql,postgresql,SELECT 1.0::float8 AS two UNION ALL SELECT 1 ORDER BY 1,union.sql,SAME,,"[(1.0,), (1.0,)]"
postgresql,postgresql,SELECT 1.1 AS three UNION SELECT 2 UNION SELECT 3 ORDER BY 1,union.sql,SAME,,"[(Decimal('1.1'),), (Decimal('2'),), (Decimal('3'),)]"
postgresql,postgresql,SELECT 1.1::float8 AS two UNION SELECT 2 UNION SELECT 2.0::float8 ORDER BY 1,union.sql,SAME,,"[(1.1,), (2.0,)]"
postgresql,postgresql,SELECT 1.1 AS three UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1,union.sql,SAME,,"[(Decimal('1.1'),), (Decimal('2'),), (Decimal('2'),)]"
postgresql,postgresql,SELECT 1.1 AS two UNION (SELECT 2 UNION ALL SELECT 2) ORDER BY 1,union.sql,SAME,,"[(Decimal('1.1'),), (Decimal('2'),)]"
postgresql,postgresql,"(SELECT 1,2,3 UNION SELECT 4,5,6) INTERSECT SELECT 4,5,6",union.sql,SAME,,"[(4, 5, 6)]"
postgresql,postgresql,"(SELECT 1,2,3 UNION SELECT 4,5,6 ORDER BY 1,2) INTERSECT SELECT 4,5,6",union.sql,SAME,,"[(4, 5, 6)]"
postgresql,postgresql,"(SELECT 1,2,3 UNION SELECT 4,5,6) EXCEPT SELECT 4,5,6",union.sql,SAME,,"[(1, 2, 3)]"
postgresql,postgresql,"(SELECT 1,2,3 UNION SELECT 4,5,6 ORDER BY 1,2) EXCEPT SELECT 4,5,6",union.sql,SAME,,"[(1, 2, 3)]"
postgresql,postgresql,set enable_hashagg to on,union.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg to off,union.sql,SAME,,[]
postgresql,postgresql,reset enable_hashagg,union.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg to on,union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select x from (values ('11'::varbit), ('10'::varbit)) _(x) union select x from (values ('11'::varbit), ('10'::varbit)) _(x)",union.sql,SAME,,"[('Unique',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column1',), ('        ->  Append',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,set enable_hashagg to off,union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select x from (values ('11'::varbit), ('10'::varbit)) _(x) union select x from (values ('11'::varbit), ('10'::varbit)) _(x)",union.sql,SAME,,"[('Unique',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column1',), ('        ->  Append',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,reset enable_hashagg,union.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg to on,union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select x from (values (array[1, 2]), (array[1, 3])) _(x) union select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[('HashAggregate',), ('  Group Key: ""*VALUES*"".column1',), ('  ->  Append',), ('        ->  Values Scan on ""*VALUES*""',), ('        ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (array[1, 2]), (array[1, 3])) _(x) union select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[([1, 4],), ([1, 2],), ([1, 3],)]"
postgresql,postgresql,"explain (costs off) select x from (values (array[1, 2]), (array[1, 3])) _(x) intersect select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[('HashSetOp Intersect',), ('  ->  Append',), ('        ->  Subquery Scan on ""*SELECT* 1""',), ('              ->  Values Scan on ""*VALUES*""',), ('        ->  Subquery Scan on ""*SELECT* 2""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (array[1, 2]), (array[1, 3])) _(x) intersect select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,"explain (costs off) select x from (values (array[1, 2]), (array[1, 3])) _(x) except select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[('HashSetOp Except',), ('  ->  Append',), ('        ->  Subquery Scan on ""*SELECT* 1""',), ('              ->  Values Scan on ""*VALUES*""',), ('        ->  Subquery Scan on ""*SELECT* 2""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (array[1, 2]), (array[1, 3])) _(x) except select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[([1, 3],)]"
postgresql,postgresql,"explain (costs off) select x from (values (array['10'::varbit]), (array['11'::varbit])) _(x) union select x from (values (array['10'::varbit]), (array['01'::varbit])) _(x)",union.sql,SAME,,"[('Unique',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column1',), ('        ->  Append',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (array['10'::varbit]), (array['11'::varbit])) _(x) union select x from (values (array['10'::varbit]), (array['01'::varbit])) _(x)",union.sql,SAME,,"[('{01}',), ('{10}',), ('{11}',)]"
postgresql,postgresql,set enable_hashagg to off,union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select x from (values (array[1, 2]), (array[1, 3])) _(x) union select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[('Unique',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column1',), ('        ->  Append',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (array[1, 2]), (array[1, 3])) _(x) union select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[([1, 2],), ([1, 3],), ([1, 4],)]"
postgresql,postgresql,"explain (costs off) select x from (values (array[1, 2]), (array[1, 3])) _(x) intersect select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[('SetOp Intersect',), ('  ->  Sort',), ('        Sort Key: ""*SELECT* 1"".x',), ('        ->  Append',), ('              ->  Subquery Scan on ""*SELECT* 1""',), ('                    ->  Values Scan on ""*VALUES*""',), ('              ->  Subquery Scan on ""*SELECT* 2""',), ('                    ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (array[1, 2]), (array[1, 3])) _(x) intersect select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[([1, 2],)]"
postgresql,postgresql,"explain (costs off) select x from (values (array[1, 2]), (array[1, 3])) _(x) except select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[('SetOp Except',), ('  ->  Sort',), ('        Sort Key: ""*SELECT* 1"".x',), ('        ->  Append',), ('              ->  Subquery Scan on ""*SELECT* 1""',), ('                    ->  Values Scan on ""*VALUES*""',), ('              ->  Subquery Scan on ""*SELECT* 2""',), ('                    ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (array[1, 2]), (array[1, 3])) _(x) except select x from (values (array[1, 2]), (array[1, 4])) _(x)",union.sql,SAME,,"[([1, 3],)]"
postgresql,postgresql,reset enable_hashagg,union.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg to on,union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select x from (values (row(1, 2)), (row(1, 3))) _(x) union select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('Unique',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column1',), ('        ->  Append',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (row(1, 2)), (row(1, 3))) _(x) union select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('(1,2)',), ('(1,3)',), ('(1,4)',)]"
postgresql,postgresql,"explain (costs off) select x from (values (row(1, 2)), (row(1, 3))) _(x) intersect select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('SetOp Intersect',), ('  ->  Sort',), ('        Sort Key: ""*SELECT* 1"".x',), ('        ->  Append',), ('              ->  Subquery Scan on ""*SELECT* 1""',), ('                    ->  Values Scan on ""*VALUES*""',), ('              ->  Subquery Scan on ""*SELECT* 2""',), ('                    ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (row(1, 2)), (row(1, 3))) _(x) intersect select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('(1,2)',)]"
postgresql,postgresql,"explain (costs off) select x from (values (row(1, 2)), (row(1, 3))) _(x) except select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('SetOp Except',), ('  ->  Sort',), ('        Sort Key: ""*SELECT* 1"".x',), ('        ->  Append',), ('              ->  Subquery Scan on ""*SELECT* 1""',), ('                    ->  Values Scan on ""*VALUES*""',), ('              ->  Subquery Scan on ""*SELECT* 2""',), ('                    ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (row(1, 2)), (row(1, 3))) _(x) except select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('(1,3)',)]"
postgresql,postgresql,"explain (costs off) select x from (values (row('10'::varbit)), (row('11'::varbit))) _(x) union select x from (values (row('10'::varbit)), (row('01'::varbit))) _(x)",union.sql,SAME,,"[('Unique',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column1',), ('        ->  Append',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (row('10'::varbit)), (row('11'::varbit))) _(x) union select x from (values (row('10'::varbit)), (row('01'::varbit))) _(x)",union.sql,SAME,,"[('(01)',), ('(10)',), ('(11)',)]"
postgresql,postgresql,create type ct1 as (f1 varbit),union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select x from (values (row('10'::varbit)::ct1), (row('11'::varbit)::ct1)) _(x) union select x from (values (row('10'::varbit)::ct1), (row('01'::varbit)::ct1)) _(x)",union.sql,SAME,,"[('Unique',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column1',), ('        ->  Append',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (row('10'::varbit)::ct1), (row('11'::varbit)::ct1)) _(x) union select x from (values (row('10'::varbit)::ct1), (row('01'::varbit)::ct1)) _(x)",union.sql,SAME,,"[('(01)',), ('(10)',), ('(11)',)]"
postgresql,postgresql,drop type ct1,union.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg to off,union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select x from (values (row(1, 2)), (row(1, 3))) _(x) union select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('Unique',), ('  ->  Sort',), ('        Sort Key: ""*VALUES*"".column1',), ('        ->  Append',), ('              ->  Values Scan on ""*VALUES*""',), ('              ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (row(1, 2)), (row(1, 3))) _(x) union select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('(1,2)',), ('(1,3)',), ('(1,4)',)]"
postgresql,postgresql,"explain (costs off) select x from (values (row(1, 2)), (row(1, 3))) _(x) intersect select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('SetOp Intersect',), ('  ->  Sort',), ('        Sort Key: ""*SELECT* 1"".x',), ('        ->  Append',), ('              ->  Subquery Scan on ""*SELECT* 1""',), ('                    ->  Values Scan on ""*VALUES*""',), ('              ->  Subquery Scan on ""*SELECT* 2""',), ('                    ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (row(1, 2)), (row(1, 3))) _(x) intersect select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('(1,2)',)]"
postgresql,postgresql,"explain (costs off) select x from (values (row(1, 2)), (row(1, 3))) _(x) except select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('SetOp Except',), ('  ->  Sort',), ('        Sort Key: ""*SELECT* 1"".x',), ('        ->  Append',), ('              ->  Subquery Scan on ""*SELECT* 1""',), ('                    ->  Values Scan on ""*VALUES*""',), ('              ->  Subquery Scan on ""*SELECT* 2""',), ('                    ->  Values Scan on ""*VALUES*_1""',)]"
postgresql,postgresql,"select x from (values (row(1, 2)), (row(1, 3))) _(x) except select x from (values (row(1, 2)), (row(1, 4))) _(x)",union.sql,SAME,,"[('(1,3)',)]"
postgresql,postgresql,reset enable_hashagg,union.sql,SAME,,[]
postgresql,postgresql,select union select,union.sql,SAME,,[()]
postgresql,postgresql,select intersect select,union.sql,SAME,,[()]
postgresql,postgresql,select except select,union.sql,SAME,,[]
postgresql,postgresql,set enable_hashagg = true,union.sql,SAME,,[]
postgresql,postgresql,set enable_sort = false,union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select from generate_series(1,5) intersect select from generate_series(1,3)",union.sql,SAME,,"[('HashSetOp Intersect',), ('  ->  Append',), ('        ->  Subquery Scan on ""*SELECT* 1""',), ('              ->  Function Scan on generate_series',), ('        ->  Subquery Scan on ""*SELECT* 2""',), ('              ->  Function Scan on generate_series generate_series_1',)]"
postgresql,postgresql,"select from generate_series(1,5) union all select from generate_series(1,3)",union.sql,SAME,,"[(), (), (), (), (), (), (), ()]"
postgresql,postgresql,"select from generate_series(1,5) intersect select from generate_series(1,3)",union.sql,SAME,,[()]
postgresql,postgresql,"select from generate_series(1,5) intersect all select from generate_series(1,3)",union.sql,SAME,,"[(), (), ()]"
postgresql,postgresql,"select from generate_series(1,5) except select from generate_series(1,3)",union.sql,SAME,,[]
postgresql,postgresql,"select from generate_series(1,5) except all select from generate_series(1,3)",union.sql,SAME,,"[(), ()]"
postgresql,postgresql,set enable_hashagg = false,union.sql,SAME,,[]
postgresql,postgresql,set enable_sort = true,union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select from generate_series(1,5) union select from generate_series(1,3)",union.sql,SAME,,"[('Unique',), ('  ->  Append',), ('        ->  Function Scan on generate_series',), ('        ->  Function Scan on generate_series generate_series_1',)]"
postgresql,postgresql,"explain (costs off) select from generate_series(1,5) intersect select from generate_series(1,3)",union.sql,SAME,,"[('SetOp Intersect',), ('  ->  Append',), ('        ->  Subquery Scan on ""*SELECT* 1""',), ('              ->  Function Scan on generate_series',), ('        ->  Subquery Scan on ""*SELECT* 2""',), ('              ->  Function Scan on generate_series generate_series_1',)]"
postgresql,postgresql,"select from generate_series(1,5) union select from generate_series(1,3)",union.sql,SAME,,[()]
postgresql,postgresql,"select from generate_series(1,5) union all select from generate_series(1,3)",union.sql,SAME,,"[(), (), (), (), (), (), (), ()]"
postgresql,postgresql,"select from generate_series(1,5) intersect select from generate_series(1,3)",union.sql,SAME,,[()]
postgresql,postgresql,"select from generate_series(1,5) intersect all select from generate_series(1,3)",union.sql,SAME,,"[(), (), ()]"
postgresql,postgresql,"select from generate_series(1,5) except select from generate_series(1,3)",union.sql,SAME,,[]
postgresql,postgresql,"select from generate_series(1,5) except all select from generate_series(1,3)",union.sql,SAME,,"[(), ()]"
postgresql,postgresql,reset enable_hashagg,union.sql,SAME,,[]
postgresql,postgresql,reset enable_sort,union.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE t1 (a text, b text)",union.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX t1_ab_idx on t1 ((a || b)),union.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE t2 (ab text primary key),union.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan = off,union.sql,SAME,,[]
postgresql,postgresql,set enable_indexscan = on,union.sql,SAME,,[]
postgresql,postgresql,set enable_bitmapscan = off,union.sql,SAME,,[]
postgresql,postgresql,set enable_sort = off,union.sql,SAME,,[]
postgresql,postgresql,explain (costs off)  SELECT * FROM  (SELECT a || b AS ab FROM t1   UNION ALL   SELECT * FROM t2) t  WHERE ab = 'ab',union.sql,SAME,,"[('Append',), ('  ->  Index Scan using t1_ab_idx on t1',), (""        Index Cond: ((a || b) = 'ab'::text)"",), ('  ->  Index Only Scan using t2_pkey on t2',), (""        Index Cond: (ab = 'ab'::text)"",)]"
postgresql,postgresql,explain (costs off)  SELECT * FROM  (SELECT a || b AS ab FROM t1   UNION   SELECT * FROM t2) t  WHERE ab = 'ab',union.sql,SAME,,"[('HashAggregate',), ('  Group Key: ((t1.a || t1.b))',), ('  ->  Append',), ('        ->  Index Scan using t1_ab_idx on t1',), (""              Index Cond: ((a || b) = 'ab'::text)"",), ('        ->  Index Only Scan using t2_pkey on t2',), (""              Index Cond: (ab = 'ab'::text)"",)]"
postgresql,postgresql,"CREATE TEMP TABLE t1c (b text, a text)",union.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE t1c INHERIT t1,union.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE t2c (primary key (ab)) INHERITS (t2),union.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX t1c_ab_idx on t1c ((a || b)),union.sql,SAME,,[]
postgresql,postgresql,set enable_seqscan = on,union.sql,SAME,,[]
postgresql,postgresql,set enable_indexonlyscan = off,union.sql,SAME,,[]
postgresql,postgresql,explain (costs off)   SELECT * FROM   (SELECT a || b AS ab FROM t1    UNION ALL    SELECT ab FROM t2) t   ORDER BY 1 LIMIT 8,union.sql,SAME,,"[('Limit',), ('  ->  Merge Append',), ('        Sort Key: ((t1.a || t1.b))',), ('        ->  Index Scan using t1_ab_idx on t1',), ('        ->  Index Scan using t1c_ab_idx on t1c t1_1',), ('        ->  Index Scan using t2_pkey on t2',), ('        ->  Index Scan using t2c_pkey on t2c t2_1',)]"
postgresql,postgresql,SELECT * FROM   (SELECT a || b AS ab FROM t1    UNION ALL    SELECT ab FROM t2) t   ORDER BY 1 LIMIT 8,union.sql,SAME,,"[('ab',), ('ab',), ('cd',), ('dc',), ('ef',), ('fe',), ('mn',), ('nm',)]"
postgresql,postgresql,reset enable_seqscan,union.sql,SAME,,[]
postgresql,postgresql,reset enable_indexscan,union.sql,SAME,,[]
postgresql,postgresql,reset enable_bitmapscan,union.sql,SAME,,[]
postgresql,postgresql,reset enable_sort,union.sql,SAME,,[]
postgresql,postgresql,explain (costs off) select event_id  from (select event_id from events        union all        select event_id from other_events) ss  order by event_id,union.sql,SAME,,"[('Merge Append',), ('  Sort Key: events.event_id',), ('  ->  Index Scan using events_pkey on events',), ('  ->  Sort',), ('        Sort Key: events_1.event_id',), ('        ->  Seq Scan on events_child events_1',), ('  ->  Index Scan using other_events_pkey on other_events',)]"
postgresql,postgresql,reset enable_indexonlyscan,union.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) SELECT * FROM   (SELECT 1 AS t, 2 AS x    UNION    SELECT 2 AS t, 4 AS x) ss WHERE x < 4 ORDER BY x",union.sql,SAME,,"[('Sort',), ('  Sort Key: (2)',), ('  ->  Unique',), ('        ->  Sort',), ('              Sort Key: (1), (2)',), ('              ->  Append',), ('                    ->  Result',), ('                    ->  Result',), ('                          One-Time Filter: false',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT 1 AS t, 2 AS x    UNION    SELECT 2 AS t, 4 AS x) ss WHERE x < 4 ORDER BY x",union.sql,SAME,,"[(1, 2)]"
postgresql,postgresql,"explain (costs off) SELECT * FROM   (SELECT 1 AS t, generate_series(1,10) AS x    UNION    SELECT 2 AS t, 4 AS x) ss WHERE x < 4 ORDER BY x",union.sql,SAME,,"[('Sort',), ('  Sort Key: ss.x',), ('  ->  Subquery Scan on ss',), ('        Filter: (ss.x < 4)',), ('        ->  HashAggregate',), ('              Group Key: (1), (generate_series(1, 10))',), ('              ->  Append',), ('                    ->  ProjectSet',), ('                          ->  Result',), ('                    ->  Result',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT 1 AS t, generate_series(1,10) AS x    UNION    SELECT 2 AS t, 4 AS x) ss WHERE x < 4 ORDER BY x",union.sql,SAME,,"[(1, 1), (1, 2), (1, 3)]"
postgresql,postgresql,"explain (costs off) SELECT * FROM   (SELECT 1 AS t, (random()*3)::int AS x    UNION    SELECT 2 AS t, 4 AS x) ss WHERE x > 3 ORDER BY x",union.sql,SAME,,"[('Sort',), ('  Sort Key: ss.x',), ('  ->  Subquery Scan on ss',), ('        Filter: (ss.x > 3)',), ('        ->  Unique',), ('              ->  Sort',), (""                    Sort Key: (1), (((random() * '3'::double precision))::integer)"",), ('                    ->  Append',), ('                          ->  Result',), ('                          ->  Result',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT 1 AS t, (random()*3)::int AS x    UNION    SELECT 2 AS t, 4 AS x) ss WHERE x > 3 ORDER BY x",union.sql,SAME,,"[(2, 4)]"
postgresql,postgresql,create function expensivefunc(int) returns int language plpgsql immutable strict cost 10000 as $$begin return $1; end$$,union.sql,SAME,,[]
postgresql,postgresql,"create temp table t3 as select generate_series(-1000,1000) as x",union.sql,SAME,,[]
postgresql,postgresql,create index t3i on t3 (expensivefunc(x)),union.sql,SAME,,[]
postgresql,postgresql,analyze t3,union.sql,SAME,,[]
postgresql,postgresql,drop function expensivefunc(int),union.sql,SAME,,[]
postgresql,postgresql,SET extra_float_digits = 0,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view1 AS SELECT DISTINCT a, b FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view2 AS SELECT a, b FROM base_tbl GROUP BY a, b",updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW ro_view3 AS SELECT 1 FROM base_tbl HAVING max(a) > 0,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW ro_view4 AS SELECT count(*) FROM base_tbl,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view5 AS SELECT a, rank() OVER() FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view6 AS SELECT a, b FROM base_tbl UNION SELECT -a, b FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view7 AS WITH t AS (SELECT a, b FROM base_tbl) SELECT * FROM t",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view8 AS SELECT a, b FROM base_tbl ORDER BY a OFFSET 1",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view9 AS SELECT a, b FROM base_tbl ORDER BY a LIMIT 1",updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW ro_view10 AS SELECT 1 AS a,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view11 AS SELECT b1.a, b2.b FROM base_tbl b1, base_tbl b2",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view12 AS SELECT * FROM generate_series(1, 10) AS g(a)",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view13 AS SELECT a, b FROM (SELECT * FROM base_tbl) AS t",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view14 AS SELECT ctid, a, b FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view15 AS SELECT a, upper(b) FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view16 AS SELECT a, b, a AS aa FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW ro_view17 AS SELECT * FROM ro_view1,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW ro_view18 AS SELECT * FROM (VALUES(1)) AS tmp(a),updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE SEQUENCE uv_seq,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW ro_view19 AS SELECT * FROM uv_seq,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW ro_view20 AS SELECT a, b, generate_series(1, a) g FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE E'r_\\_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('ro_view1', 'NO'), ('ro_view10', 'NO'), ('ro_view11', 'NO'), ('ro_view12', 'NO'), ('ro_view13', 'NO'), ('ro_view17', 'NO'), ('ro_view18', 'NO'), ('ro_view19', 'NO'), ('ro_view2', 'NO'), ('ro_view20', 'NO'), ('ro_view3', 'NO'), ('ro_view4', 'NO'), ('ro_view5', 'NO'), ('ro_view6', 'NO'), ('ro_view7', 'NO'), ('ro_view8', 'NO'), ('ro_view9', 'NO'), ('rw_view14', 'YES'), ('rw_view15', 'YES'), ('rw_view16', 'YES')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name LIKE E'r_\\_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('ro_view1', 'NO', 'NO'), ('ro_view10', 'NO', 'NO'), ('ro_view11', 'NO', 'NO'), ('ro_view12', 'NO', 'NO'), ('ro_view13', 'NO', 'NO'), ('ro_view17', 'NO', 'NO'), ('ro_view18', 'NO', 'NO'), ('ro_view19', 'NO', 'NO'), ('ro_view2', 'NO', 'NO'), ('ro_view20', 'NO', 'NO'), ('ro_view3', 'NO', 'NO'), ('ro_view4', 'NO', 'NO'), ('ro_view5', 'NO', 'NO'), ('ro_view6', 'NO', 'NO'), ('ro_view7', 'NO', 'NO'), ('ro_view8', 'NO', 'NO'), ('ro_view9', 'NO', 'NO'), ('rw_view14', 'YES', 'YES'), ('rw_view15', 'YES', 'YES'), ('rw_view16', 'YES', 'YES')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE E'r_\\_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('ro_view1', 'a', 'NO'), ('ro_view1', 'b', 'NO'), ('ro_view10', 'a', 'NO'), ('ro_view11', 'a', 'NO'), ('ro_view11', 'b', 'NO'), ('ro_view12', 'a', 'NO'), ('ro_view13', 'a', 'NO'), ('ro_view13', 'b', 'NO'), ('ro_view17', 'a', 'NO'), ('ro_view17', 'b', 'NO'), ('ro_view18', 'a', 'NO'), ('ro_view19', 'last_value', 'NO'), ('ro_view19', 'log_cnt', 'NO'), ('ro_view19', 'is_called', 'NO'), ('ro_view2', 'a', 'NO'), ('ro_view2', 'b', 'NO'), ('ro_view20', 'a', 'NO'), ('ro_view20', 'b', 'NO'), ('ro_view20', 'g', 'NO'), ('ro_view3', '?column?', 'NO'), ('ro_view4', 'count', 'NO'), ('ro_view5', 'a', 'NO'), ('ro_view5', 'rank', 'NO'), ('ro_view6', 'a', 'NO'), ('ro_view6', 'b', 'NO'), ('ro_view7', 'a', 'NO'), ('ro_view7', 'b', 'NO'), ('ro_view8', 'a', 'NO'), ('ro_view8', 'b', 'NO'), ('ro_view9', 'a', 'NO'), ('ro_view9', 'b', 'NO'), ('rw_view14', 'ctid', 'NO'), ('rw_view14', 'a', 'YES'), ('rw_view14', 'b', 'YES'), ('rw_view15', 'a', 'YES'), ('rw_view15', 'upper', 'NO'), ('rw_view16', 'a', 'YES'), ('rw_view16', 'b', 'YES'), ('rw_view16', 'aa', 'YES')]"
postgresql,postgresql,UPDATE rw_view14 SET b='ROW 3' WHERE a=3,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (2, 'Row 2'), (3, 'ROW 3')]"
postgresql,postgresql,DELETE FROM rw_view14 WHERE a=3,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl ORDER BY a,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (2, 'Row 2')]"
postgresql,postgresql,SELECT * FROM base_tbl ORDER BY a,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (2, 'Row 2')]"
postgresql,postgresql,SELECT * FROM rw_view15,updatable_views.sql,SAME,,"[(-2, 'ROW -2'), (-1, 'ROW -1'), (0, 'ROW 0'), (1, 'ROW 1'), (2, 'ROW 2'), (3, 'UNSPECIFIED')]"
postgresql,postgresql,SELECT * FROM rw_view15,updatable_views.sql,SAME,,"[(-2, 'ROW -2'), (-1, 'ROW -1'), (0, 'ROW 0'), (1, 'ROW 1'), (2, 'ROW 2'), (3, 'UNSPECIFIED')]"
postgresql,postgresql,SELECT * FROM rw_view15,updatable_views.sql,SAME,,"[(-2, 'ROW -2'), (-1, 'ROW -1'), (0, 'ROW 0'), (1, 'ROW 1'), (2, 'ROW 2'), (3, 'UNSPECIFIED')]"
postgresql,postgresql,SELECT * FROM rw_view15,updatable_views.sql,SAME,,"[(-2, 'ROW -2'), (-1, 'ROW -1'), (0, 'ROW 0'), (1, 'ROW 1'), (2, 'ROW 2'), (3, 'UNSPECIFIED')]"
postgresql,postgresql,SELECT * FROM rw_view15,updatable_views.sql,SAME,,"[(-2, 'ROW -2'), (-1, 'ROW -1'), (0, 'ROW 0'), (1, 'ROW 1'), (2, 'ROW 2'), (3, 'UNSPECIFIED')]"
postgresql,postgresql,ALTER VIEW rw_view15 ALTER COLUMN upper SET DEFAULT 'NOT SET',updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view15 SET a=4 WHERE a=3,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (2, 'Row 2'), (4, 'Unspecified')]"
postgresql,postgresql,DELETE FROM rw_view15 WHERE a=4,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view16 SET aa=-3 WHERE a=3,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (2, 'Row 2'), (-3, 'Row 3')]"
postgresql,postgresql,DELETE FROM rw_view16 WHERE a=-3,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE RULE rw_view16_upd_rule AS ON UPDATE TO rw_view16   WHERE OLD.a > 0 DO INSTEAD UPDATE base_tbl SET b=NEW.b WHERE a=OLD.a,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE RULE rw_view16_del_rule AS ON DELETE TO rw_view16   WHERE OLD.a > 0 DO INSTEAD DELETE FROM base_tbl WHERE a=OLD.a,updatable_views.sql,SAME,,[]
postgresql,postgresql,"DROP VIEW ro_view10, ro_view12, ro_view18",updatable_views.sql,SAME,,[]
postgresql,postgresql,DROP SEQUENCE uv_seq CASCADE,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl WHERE a>0,updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name = 'rw_view1'",updatable_views.sql,SAME,,"[('rw_view1', 'YES')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name = 'rw_view1'",updatable_views.sql,SAME,,"[('rw_view1', 'YES', 'YES')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name = 'rw_view1'  ORDER BY ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'a', 'YES'), ('rw_view1', 'b', 'YES')]"
postgresql,postgresql,UPDATE rw_view1 SET a=5 WHERE a=4,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1 WHERE b='Row 2',updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (3, 'Row 3'), (5, 'Unspecified')]"
postgresql,postgresql,SELECT * FROM base_tbl ORDER BY a,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (3, 'Row 3'), (5, 'Unspecified')]"
postgresql,postgresql,EXPLAIN (costs off) UPDATE rw_view1 SET a=6 WHERE a=5,updatable_views.sql,SAME,,"[('Update on base_tbl',), ('  ->  Index Scan using base_tbl_pkey on base_tbl',), ('        Index Cond: ((a > 0) AND (a = 5))',)]"
postgresql,postgresql,EXPLAIN (costs off) DELETE FROM rw_view1 WHERE a=5,updatable_views.sql,SAME,,"[('Delete on base_tbl',), ('  ->  Index Scan using base_tbl_pkey on base_tbl',), ('        Index Cond: ((a > 0) AND (a = 5))',)]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name = 'rw_view1'",updatable_views.sql,SAME,,"[('rw_view1', 'YES', 'YES')]"
postgresql,postgresql,"SELECT a, b FROM base_tbl_hist",updatable_views.sql,SAME,,"[(9, None), (10, None)]"
postgresql,postgresql,"CREATE VIEW rw_view1 AS SELECT b AS bb, a AS aa FROM base_tbl WHERE a>0",updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view2 AS SELECT aa AS aaa, bb AS bbb FROM rw_view1 WHERE aa<10",updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name = 'rw_view2'",updatable_views.sql,SAME,,"[('rw_view2', 'YES')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name = 'rw_view2'",updatable_views.sql,SAME,,"[('rw_view2', 'YES', 'YES')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name = 'rw_view2'  ORDER BY ordinal_position",updatable_views.sql,SAME,,"[('rw_view2', 'aaa', 'YES'), ('rw_view2', 'bbb', 'YES')]"
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'Row 1'), (2, 'Row 2'), (3, 'Row 3'), (4, 'Unspecified')]"
postgresql,postgresql,UPDATE rw_view2 SET bbb='Row 4' WHERE aaa=4,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view2 WHERE aaa=2,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'Row 1'), (3, 'Row 3'), (4, 'Row 4')]"
postgresql,postgresql,SELECT * FROM rw_view2 ORDER BY aaa,updatable_views.sql,SAME,,"[(1, 'Row 1'), (3, 'Row 3'), (4, 'Row 4')]"
postgresql,postgresql,EXPLAIN (costs off) UPDATE rw_view2 SET aaa=5 WHERE aaa=4,updatable_views.sql,SAME,,"[('Update on base_tbl',), ('  ->  Index Scan using base_tbl_pkey on base_tbl',), ('        Index Cond: ((a < 10) AND (a > 0) AND (a = 4))',)]"
postgresql,postgresql,EXPLAIN (costs off) DELETE FROM rw_view2 WHERE aaa=4,updatable_views.sql,SAME,,"[('Delete on base_tbl',), ('  ->  Index Scan using base_tbl_pkey on base_tbl',), ('        Index Cond: ((a < 10) AND (a > 0) AND (a = 4))',)]"
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl WHERE a>0 OFFSET 0,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view2 AS SELECT * FROM rw_view1 WHERE a<10,updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO'), ('rw_view2', 'NO')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO', 'NO'), ('rw_view2', 'NO', 'NO')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'a', 'NO'), ('rw_view1', 'b', 'NO'), ('rw_view2', 'a', 'NO'), ('rw_view2', 'b', 'NO')]"
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'YES'), ('rw_view2', 'YES')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO', 'YES'), ('rw_view2', 'NO', 'YES')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'a', 'NO'), ('rw_view1', 'b', 'NO'), ('rw_view2', 'a', 'NO'), ('rw_view2', 'b', 'NO')]"
postgresql,postgresql,CREATE RULE rw_view1_upd_rule AS ON UPDATE TO rw_view1   DO INSTEAD UPDATE base_tbl SET b=NEW.b WHERE a=OLD.a RETURNING NEW.*,updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'YES'), ('rw_view2', 'YES')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO', 'YES'), ('rw_view2', 'NO', 'YES')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'a', 'NO'), ('rw_view1', 'b', 'NO'), ('rw_view2', 'a', 'NO'), ('rw_view2', 'b', 'NO')]"
postgresql,postgresql,CREATE RULE rw_view1_del_rule AS ON DELETE TO rw_view1   DO INSTEAD DELETE FROM base_tbl WHERE a=OLD.a RETURNING OLD.*,updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'YES'), ('rw_view2', 'YES')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'YES', 'YES'), ('rw_view2', 'YES', 'YES')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'a', 'YES'), ('rw_view1', 'b', 'YES'), ('rw_view2', 'a', 'YES'), ('rw_view2', 'b', 'YES')]"
postgresql,postgresql,UPDATE rw_view2 SET b='Row three' WHERE a=3 RETURNING *,updatable_views.sql,SAME,,"[(3, 'Row three')]"
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'Row 1'), (2, 'Row 2'), (3, 'Row three')]"
postgresql,postgresql,DELETE FROM rw_view2 WHERE a=3 RETURNING *,updatable_views.sql,SAME,,"[(3, 'Row three')]"
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'Row 1'), (2, 'Row 2')]"
postgresql,postgresql,EXPLAIN (costs off) UPDATE rw_view2 SET a=3 WHERE a=2,updatable_views.sql,SAME,,"[('Update on base_tbl',), ('  ->  Nested Loop',), ('        ->  Index Scan using base_tbl_pkey on base_tbl',), ('              Index Cond: (a = 2)',), ('        ->  Subquery Scan on rw_view1',), ('              Filter: ((rw_view1.a < 10) AND (rw_view1.a = 2))',), ('              ->  Bitmap Heap Scan on base_tbl base_tbl_1',), ('                    Recheck Cond: (a > 0)',), ('                    ->  Bitmap Index Scan on base_tbl_pkey',), ('                          Index Cond: (a > 0)',)]"
postgresql,postgresql,EXPLAIN (costs off) DELETE FROM rw_view2 WHERE a=2,updatable_views.sql,SAME,,"[('Delete on base_tbl',), ('  ->  Nested Loop',), ('        ->  Index Scan using base_tbl_pkey on base_tbl',), ('              Index Cond: (a = 2)',), ('        ->  Subquery Scan on rw_view1',), ('              Filter: ((rw_view1.a < 10) AND (rw_view1.a = 2))',), ('              ->  Bitmap Heap Scan on base_tbl base_tbl_1',), ('                    Recheck Cond: (a > 0)',), ('                    ->  Bitmap Index Scan on base_tbl_pkey',), ('                          Index Cond: (a > 0)',)]"
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl WHERE a>0 OFFSET 0,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view2 AS SELECT * FROM rw_view1 WHERE a<10,updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO'), ('rw_view2', 'NO')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into,        is_trigger_updatable, is_trigger_deletable,        is_trigger_insertable_into   FROM information_schema.views  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO', 'NO', 'NO', 'NO', 'NO'), ('rw_view2', 'NO', 'NO', 'NO', 'NO', 'NO')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'a', 'NO'), ('rw_view1', 'b', 'NO'), ('rw_view2', 'a', 'NO'), ('rw_view2', 'b', 'NO')]"
postgresql,postgresql,END,updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO'), ('rw_view2', 'NO')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into,        is_trigger_updatable, is_trigger_deletable,        is_trigger_insertable_into   FROM information_schema.views  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO', 'NO', 'NO', 'NO', 'NO'), ('rw_view2', 'NO', 'NO', 'NO', 'NO', 'NO')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'a', 'NO'), ('rw_view1', 'b', 'NO'), ('rw_view2', 'a', 'NO'), ('rw_view2', 'b', 'NO')]"
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO'), ('rw_view2', 'NO')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into,        is_trigger_updatable, is_trigger_deletable,        is_trigger_insertable_into   FROM information_schema.views  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO', 'NO', 'NO', 'NO', 'NO'), ('rw_view2', 'NO', 'NO', 'NO', 'NO', 'NO')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'a', 'NO'), ('rw_view1', 'b', 'NO'), ('rw_view2', 'a', 'NO'), ('rw_view2', 'b', 'NO')]"
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO'), ('rw_view2', 'NO')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into,        is_trigger_updatable, is_trigger_deletable,        is_trigger_insertable_into   FROM information_schema.views  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'NO', 'NO', 'NO', 'NO', 'NO'), ('rw_view2', 'NO', 'NO', 'NO', 'NO', 'NO')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE 'rw_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'a', 'NO'), ('rw_view1', 'b', 'NO'), ('rw_view2', 'a', 'NO'), ('rw_view2', 'b', 'NO')]"
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'Row 1'), (2, 'Row 2')]"
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'Row 1'), (2, 'Row 2')]"
postgresql,postgresql,SELECT * FROM base_tbl ORDER BY a,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (2, 'Row 2')]"
postgresql,postgresql,SELECT * FROM base_tbl ORDER BY a,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (2, 'Row 2')]"
postgresql,postgresql,"CREATE VIEW rw_view1 AS SELECT b AS bb, a AS aa FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION rw_view1_aa(x rw_view1)   RETURNS int AS $$ SELECT x.aa $$ LANGUAGE sql,updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE rw_view1 v SET bb='Updated row 2' WHERE rw_view1_aa(v)=2   RETURNING rw_view1_aa(v), v.bb",updatable_views.sql,SAME,,"[(2, 'Updated row 2')]"
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(-2, 'Row -2'), (-1, 'Row -1'), (0, 'Row 0'), (1, 'Row 1'), (2, 'Updated row 2')]"
postgresql,postgresql,"EXPLAIN (costs off) UPDATE rw_view1 v SET bb='Updated row 2' WHERE rw_view1_aa(v)=2   RETURNING rw_view1_aa(v), v.bb",updatable_views.sql,SAME,,"[('Update on base_tbl',), ('  ->  Index Scan using base_tbl_pkey on base_tbl',), ('        Index Cond: (a = 2)',)]"
postgresql,postgresql,"CREATE VIEW rw_view1 AS SELECT b AS bb, c AS cc, a AS aa FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view2 AS SELECT b AS bb, c AS cc, a AS aa FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(1, 'Row 1', 1.0), (2, 'Row 2', 2.0)]"
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[('Row 1', 1.0, 1), ('Row 2', 2.0, 2)]"
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[('Row 1', 1.0, 1), ('Row 2', 2.0, 2)]"
postgresql,postgresql,"UPDATE base_tbl SET a=a, c=c",updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE base_tbl SET b=b,updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE rw_view1 SET bb=bb, cc=cc",updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view1 SET aa=aa,updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE rw_view2 SET aa=aa, cc=cc",updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET bb=bb,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM base_tbl,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view2,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM base_tbl WHERE a=1,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1 WHERE aa=2,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view2 WHERE aa=2,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(3, 'Row 3', 3.0), (4, 'Row 4', 4.0), (4, 'Row 4', 4.0)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM base_tbl WHERE a=3,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1 WHERE aa=3,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view2 WHERE aa=4,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(5, 'Row 5', 5.0), (5, 'Row 5', 5.0), (6, 'Row 6', 6.0)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[(1, 'Row 1', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view1 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'Row 1', 1.0)]"
postgresql,postgresql,UPDATE rw_view1 SET b = 'foo' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view2 AS SELECT * FROM rw_view1,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'foo', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view2 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'foo', 1.0)]"
postgresql,postgresql,UPDATE rw_view2 SET b = 'bar' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view1 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,UPDATE rw_view1 SET b = 'foo' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'foo', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view2 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'foo', 1.0)]"
postgresql,postgresql,UPDATE rw_view2 SET b = 'bar' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view2 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,UPDATE rw_view2 SET b = 'bar' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view1 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,UPDATE rw_view1 SET b = 'foo' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'foo', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view2 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'foo', 1.0)]"
postgresql,postgresql,UPDATE rw_view2 SET b = 'bar' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view2 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,UPDATE rw_view2 SET b = 'bar' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view1 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'bar', 1.0)]"
postgresql,postgresql,UPDATE rw_view1 SET b = 'foo' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1, 'foo', 1.0)]"
postgresql,postgresql,SELECT * FROM rw_view2 FOR UPDATE,updatable_views.sql,SAME,,"[(1, 'foo', 1.0)]"
postgresql,postgresql,UPDATE rw_view2 SET b = 'bar' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view1 AS SELECT b AS bb, c AS cc, a AS aa FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,ALTER VIEW rw_view1 SET (security_invoker = true),updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(1, 'Row 1', 1.0), (2, 'Row 2', 2.0)]"
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[('Row 1', 1.0, 1), ('Row 2', 2.0, 2)]"
postgresql,postgresql,UPDATE base_tbl SET a=a,updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE rw_view1 SET bb=bb, cc=cc",updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM base_tbl,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE base_tbl SET a=a, c=c",updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE base_tbl SET b=b,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view1 SET cc=cc,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view1 SET aa=aa,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view1 SET bb=bb,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM base_tbl WHERE a=1,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1 WHERE aa=2,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1 WHERE aa=2,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1 WHERE aa=2,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(3, 'Row 3', 3.0), (4, 'Row 4', 4.0), (4, 'Row 4', 4.0), (4, 'Row 4', 4.0)]"
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view1 AS SELECT b AS bb, c AS cc, a AS aa FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,ALTER VIEW rw_view1 SET (security_invoker = true),updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[('Row 1', 1.0, 1)]"
postgresql,postgresql,UPDATE rw_view1 SET aa=aa,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view2 AS SELECT cc AS ccc, aa AS aaa, bb AS bbb FROM rw_view1",updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[('Row 1', 1.0, 1)]"
postgresql,postgresql,"UPDATE rw_view1 SET aa=aa, bb=bb",updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view1 SET cc=cc,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET bbb=bbb,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET bbb=bbb,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET bbb=bbb,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET ccc=ccc,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET bbb=bbb,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET ccc=ccc,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET bbb=bbb,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET ccc=ccc,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[('Row 1', 1.0, 1)]"
postgresql,postgresql,UPDATE rw_view1 SET aa=aa,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET bbb=bbb,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET ccc=ccc,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET bbb=bbb,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET ccc=ccc,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET bbb=bbb,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET ccc=ccc,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view2,updatable_views.sql,SAME,,"[(1.0, 1, 'Row 1')]"
postgresql,postgresql,UPDATE rw_view2 SET aaa=aaa,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET bbb=bbb,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET ccc=ccc,updatable_views.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view1 AS SELECT a AS aa, b AS bb FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,ALTER VIEW rw_view1 ALTER COLUMN bb SET DEFAULT 'View default',updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(1, 'Row 1', 1), (2, 'Row 2', 2), (3, 'Unspecified', 3), (4, 'Row 4', 4), (5, 'View default', 5)]"
postgresql,postgresql,END,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view1 AS SELECT a AS aa, b AS bb FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from base_tbl,updatable_views.sql,SAME,,"[(1, 'Row 1'), (2, 'Row 2'), (3, 'Row 3')]"
postgresql,postgresql,DROP VIEW rw_view1,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl ORDER BY a+b,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[(3, -3), (1, 2), (4, 5)]"
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[(7, -8), (3, -3), (1, 2), (4, 5)]"
postgresql,postgresql,"EXPLAIN (verbose, costs off) UPDATE rw_view1 SET b = b + 1 RETURNING *",updatable_views.sql,SAME,,"[('Update on public.base_tbl',), ('  Output: base_tbl.a, base_tbl.b',), ('  ->  Seq Scan on public.base_tbl',), ('        Output: (base_tbl.b + 1), base_tbl.ctid',)]"
postgresql,postgresql,UPDATE rw_view1 SET b = b + 1 RETURNING *,updatable_views.sql,SAME,,"[(1, 3), (4, 6), (3, -2), (7, -7)]"
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[(7, -7), (3, -2), (1, 3), (4, 6)]"
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl,updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE rw_view1 SET arr[1] = 42, arr[2] = 77 WHERE a = 3",updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[(1, [2]), (3, [42, 77])]"
postgresql,postgresql,"CREATE VIEW rw_view1 AS   SELECT ctid, sin(a) s, a, cos(a) c   FROM base_tbl   WHERE a != 0   ORDER BY abs(a)",updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view1 SET a = 1.05 WHERE a = 1.1 RETURNING s,updatable_views.sql,SAME,,"[(0.867423225594017,)]"
postgresql,postgresql,DELETE FROM rw_view1 WHERE a = 1.05,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view2 AS   SELECT s, c, s/c t, a base_a, ctid   FROM rw_view1",updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET base_a = 1.05 WHERE base_a = 1.1,updatable_views.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM rw_view2 WHERE base_a = 1.05 RETURNING base_a, s, c, t",updatable_views.sql,SAME,,"[(1.05, 0.867423225594017, 0.497571047891727, 1.74331530998317)]"
postgresql,postgresql,"CREATE VIEW rw_view3 AS   SELECT s, c, s/c t, ctid   FROM rw_view1",updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view3 WHERE s = sin(0.1),updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl ORDER BY a,updatable_views.sql,SAME,,"[(0.2,), (0.3,), (0.4,), (0.5,), (0.6,), (0.7,), (0.8,), (0.9,), (1.0,)]"
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name LIKE E'r_\\_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'YES'), ('rw_view2', 'YES'), ('rw_view3', 'NO')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name LIKE E'r_\\_view%'  ORDER BY table_name",updatable_views.sql,SAME,,"[('rw_view1', 'YES', 'YES'), ('rw_view2', 'YES', 'YES'), ('rw_view3', 'NO', 'NO')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name LIKE E'r_\\_view%'  ORDER BY table_name, ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'ctid', 'NO'), ('rw_view1', 's', 'NO'), ('rw_view1', 'a', 'YES'), ('rw_view1', 'c', 'NO'), ('rw_view2', 's', 'NO'), ('rw_view2', 'c', 'NO'), ('rw_view2', 't', 'NO'), ('rw_view2', 'base_a', 'YES'), ('rw_view2', 'ctid', 'NO'), ('rw_view3', 's', 'NO'), ('rw_view3', 'c', 'NO'), ('rw_view3', 't', 'NO'), ('rw_view3', 'ctid', 'NO')]"
postgresql,postgresql,"SELECT events & 4 != 0 AS upd,        events & 8 != 0 AS ins,        events & 16 != 0 AS del   FROM pg_catalog.pg_relation_is_updatable('rw_view3'::regclass, false) t(events)",updatable_views.sql,SAME,,"[(False, False, True)]"
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(1, 2), (2, 3), (3, 4), (4, 5)]"
postgresql,postgresql,UPDATE base_tbl SET id = 2000 WHERE id = 2,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view1 SET id = 3000 WHERE id = 3,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(1, 2), (4, 5), (2000, 2001), (3000, 3001)]"
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl_parent,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view2 AS SELECT * FROM ONLY base_tbl_parent,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1 ORDER BY a,updatable_views.sql,SAME,,"[(-8,), (-7,), (-6,), (-5,), (-4,), (-3,), (-2,), (-1,), (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,)]"
postgresql,postgresql,SELECT * FROM ONLY rw_view1 ORDER BY a,updatable_views.sql,SAME,,"[(-8,), (-7,), (-6,), (-5,), (-4,), (-3,), (-2,), (-1,), (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,)]"
postgresql,postgresql,SELECT * FROM rw_view2 ORDER BY a,updatable_views.sql,SAME,,"[(-8,), (-7,), (-6,), (-5,), (-4,), (-3,), (-2,), (-1,)]"
postgresql,postgresql,"UPDATE rw_view1 SET a = a*10 WHERE a IN (-1, 1)",updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE ONLY rw_view1 SET a = a*10 WHERE a IN (-2, 2)",updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE rw_view2 SET a = a*10 WHERE a IN (-3, 3)",updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE ONLY rw_view2 SET a = a*10 WHERE a IN (-4, 4)",updatable_views.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM rw_view1 WHERE a IN (-5, 5)",updatable_views.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM ONLY rw_view1 WHERE a IN (-6, 6)",updatable_views.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM rw_view2 WHERE a IN (-7, 7)",updatable_views.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM ONLY rw_view2 WHERE a IN (-8, 8)",updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ONLY base_tbl_parent ORDER BY a,updatable_views.sql,SAME,,"[(-200,), (-100,), (-40,), (-30,), (-20,), (-10,), (100,), (200,)]"
postgresql,postgresql,SELECT * FROM base_tbl_child ORDER BY a,updatable_views.sql,SAME,,"[(3,), (4,), (7,), (8,), (10,), (20,)]"
postgresql,postgresql,SELECT * FROM ONLY base_tbl_parent ORDER BY a,updatable_views.sql,SAME,,"[(-200,), (-100,), (-40,), (-30,), (-20,), (-10,), (100,), (200,)]"
postgresql,postgresql,SELECT * FROM base_tbl_child ORDER BY a,updatable_views.sql,SAME,,"[(3,), (4,), (7,), (8,), (10,), (20,)]"
postgresql,postgresql,EXPLAIN (costs off) UPDATE rw_view1 SET a = a + 1000 FROM other_tbl_parent WHERE a = id,updatable_views.sql,SAME,,"[('Update on base_tbl_parent',), ('  Update on base_tbl_parent base_tbl_parent_1',), ('  Update on base_tbl_child base_tbl_parent_2',), ('  ->  Merge Join',), ('        Merge Cond: (base_tbl_parent.a = other_tbl_parent.id)',), ('        ->  Sort',), ('              Sort Key: base_tbl_parent.a',), ('              ->  Append',), ('                    ->  Seq Scan on base_tbl_parent base_tbl_parent_1',), ('                    ->  Seq Scan on base_tbl_child base_tbl_parent_2',), ('        ->  Sort',), ('              Sort Key: other_tbl_parent.id',), ('              ->  Append',), ('                    ->  Seq Scan on other_tbl_parent other_tbl_parent_1',), ('                    ->  Seq Scan on other_tbl_child other_tbl_parent_2',)]"
postgresql,postgresql,UPDATE rw_view1 SET a = a + 1000 FROM other_tbl_parent WHERE a = id,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM ONLY base_tbl_parent ORDER BY a,updatable_views.sql,SAME,,"[(-200,), (-100,), (-40,), (-30,), (-20,), (-10,), (1100,), (1200,)]"
postgresql,postgresql,SELECT * FROM base_tbl_child ORDER BY a,updatable_views.sql,SAME,,"[(3,), (4,), (10,), (20,), (1007,), (1008,)]"
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl WHERE a < b   WITH LOCAL CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM information_schema.views WHERE table_name = 'rw_view1',updatable_views.sql,SAME,,"[('test_db', 'public', 'rw_view1', ' SELECT a,\n    b\n   FROM base_tbl\n  WHERE (a < b);', 'LOCAL', 'YES', 'YES', 'NO', 'NO', 'NO')]"
postgresql,postgresql,UPDATE rw_view1 SET b = 5 WHERE a = 3,updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT * FROM base_tbl ORDER BY a, b",updatable_views.sql,SAME,,"[(1, -1), (1, 2), (2, 3), (3, 5), (9, 10)]"
postgresql,postgresql,"SELECT * FROM base_tbl ORDER BY a, b",updatable_views.sql,SAME,,"[(1, -1), (1, 2), (2, 3), (3, 5), (9, 10)]"
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl WHERE a > 0,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view2 AS SELECT * FROM rw_view1 WHERE a < 10   WITH CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM information_schema.views WHERE table_name = 'rw_view2',updatable_views.sql,SAME,,"[('test_db', 'public', 'rw_view2', ' SELECT a\n   FROM rw_view1\n  WHERE (a < 10);', 'CASCADED', 'YES', 'YES', 'NO', 'NO', 'NO')]"
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(5,)]"
postgresql,postgresql,CREATE OR REPLACE VIEW rw_view2 AS SELECT * FROM rw_view1 WHERE a < 10   WITH LOCAL CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM information_schema.views WHERE table_name = 'rw_view2',updatable_views.sql,SAME,,"[('test_db', 'public', 'rw_view2', ' SELECT a\n   FROM rw_view1\n  WHERE (a < 10);', 'LOCAL', 'YES', 'YES', 'NO', 'NO', 'NO')]"
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(5,), (-10,)]"
postgresql,postgresql,ALTER VIEW rw_view1 SET (check_option=local),updatable_views.sql,SAME,,[]
postgresql,postgresql,ALTER VIEW rw_view2 RESET (check_option),updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM information_schema.views WHERE table_name = 'rw_view2',updatable_views.sql,SAME,,"[('test_db', 'public', 'rw_view2', ' SELECT a\n   FROM rw_view1\n  WHERE (a < 10);', 'NONE', 'YES', 'YES', 'NO', 'NO', 'NO')]"
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(5,), (-10,), (30,)]"
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl WITH CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view2 AS SELECT * FROM rw_view1 WHERE a > 0,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view3 AS SELECT * FROM rw_view2 WITH CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM information_schema.views WHERE table_name LIKE E'rw\\_view_' ORDER BY table_name,updatable_views.sql,SAME,,"[('test_db', 'public', 'rw_view1', ' SELECT a\n   FROM base_tbl;', 'CASCADED', 'YES', 'YES', 'NO', 'NO', 'NO'), ('test_db', 'public', 'rw_view2', ' SELECT a\n   FROM rw_view1\n  WHERE (a > 0);', 'NONE', 'YES', 'YES', 'NO', 'NO', 'NO'), ('test_db', 'public', 'rw_view3', ' SELECT a\n   FROM rw_view2;', 'CASCADED', 'YES', 'YES', 'NO', 'NO', 'NO')]"
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl WHERE a = ANY (b)   WITH CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view1 SET b[2] = -b[2] WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,"EXECUTE ins(2, ARRAY[1,2,3])",updatable_views.sql,SAME,,[]
postgresql,postgresql,DEALLOCATE PREPARE ins,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view1 AS   SELECT * FROM base_tbl b   WHERE EXISTS(SELECT 1 FROM ref_tbl r WHERE r.a = b.a)   WITH CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view1 SET a = a + 5,updatable_views.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off) UPDATE rw_view1 SET a = a + 5,updatable_views.sql,SAME,,"[('Update on base_tbl b',), ('  ->  Hash Join',), ('        Hash Cond: (b.a = r.a)',), ('        ->  Seq Scan on base_tbl b',), ('        ->  Hash',), ('              ->  Seq Scan on ref_tbl r',), ('  SubPlan 1',), ('    ->  Index Only Scan using ref_tbl_pkey on ref_tbl r_1',), ('          Index Cond: (a = b.a)',)]"
postgresql,postgresql,END,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT * FROM base_tbl WHERE a < b WITH CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,"UPDATE rw_view1 SET a = 20, b = 30",updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view1 AS SELECT a FROM base_tbl WHERE a < b,updatable_views.sql,SAME,,[]
postgresql,postgresql,END,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view2 AS   SELECT * FROM rw_view1 WHERE a > 0 WITH LOCAL CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET a = a - 10,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(5, None), (50, None)]"
postgresql,postgresql,ALTER VIEW rw_view2 SET (check_option=cascaded),updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET a = 200 WHERE a = 5,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(5, None), (50, None)]"
postgresql,postgresql,CREATE RULE rw_view1_upd_rule AS ON UPDATE TO rw_view1   DO INSTEAD UPDATE base_tbl SET a=NEW.a WHERE a=OLD.a,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET a = 30 WHERE a = 5,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE rw_view2 SET a = -5 WHERE a = 5,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(50, None), (-10, 10), (20, 10), (30, None), (30, 10), (-5, 10)]"
postgresql,postgresql,"CREATE VIEW rw_view1 AS SELECT a,10 AS b FROM base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view2 AS   SELECT * FROM rw_view1 WHERE a > b WITH LOCAL CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW rw_view1 AS   SELECT person FROM base_tbl WHERE visibility = 'public',updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION snoop(anyelement) RETURNS boolean AS $$ BEGIN   RAISE NOTICE 'snooped value: %', $1;   RETURN true; END; $$ LANGUAGE plpgsql COST 0.000001",updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1 WHERE snoop(person),updatable_views.sql,SAME,,"[('Tom',), ('Harry',)]"
postgresql,postgresql,UPDATE rw_view1 SET person=person WHERE snoop(person),updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1 WHERE NOT snoop(person),updatable_views.sql,SAME,,[]
postgresql,postgresql,ALTER VIEW rw_view1 SET (security_barrier = true),updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name = 'rw_view1'",updatable_views.sql,SAME,,"[('rw_view1', 'YES')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name = 'rw_view1'",updatable_views.sql,SAME,,"[('rw_view1', 'YES', 'YES')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name = 'rw_view1'  ORDER BY ordinal_position",updatable_views.sql,SAME,,"[('rw_view1', 'person', 'YES')]"
postgresql,postgresql,SELECT * FROM rw_view1 WHERE snoop(person),updatable_views.sql,SAME,,"[('Tom',), ('Harry',)]"
postgresql,postgresql,UPDATE rw_view1 SET person=person WHERE snoop(person),updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view1 WHERE NOT snoop(person),updatable_views.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off) SELECT * FROM rw_view1 WHERE snoop(person),updatable_views.sql,SAME,,"[('Subquery Scan on rw_view1',), ('  Filter: snoop(rw_view1.person)',), ('  ->  Seq Scan on base_tbl',), (""        Filter: (visibility = 'public'::text)"",)]"
postgresql,postgresql,EXPLAIN (costs off) UPDATE rw_view1 SET person=person WHERE snoop(person),updatable_views.sql,SAME,,"[('Update on base_tbl',), ('  ->  Seq Scan on base_tbl',), (""        Filter: ((visibility = 'public'::text) AND snoop(person))"",)]"
postgresql,postgresql,EXPLAIN (costs off) DELETE FROM rw_view1 WHERE NOT snoop(person),updatable_views.sql,SAME,,"[('Delete on base_tbl',), ('  ->  Seq Scan on base_tbl',), (""        Filter: ((visibility = 'public'::text) AND (NOT snoop(person)))"",)]"
postgresql,postgresql,CREATE VIEW rw_view2 WITH (security_barrier = true) AS   SELECT * FROM rw_view1 WHERE snoop(person),updatable_views.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, is_insertable_into   FROM information_schema.tables  WHERE table_name = 'rw_view2'",updatable_views.sql,SAME,,"[('rw_view2', 'YES')]"
postgresql,postgresql,"SELECT table_name, is_updatable, is_insertable_into   FROM information_schema.views  WHERE table_name = 'rw_view2'",updatable_views.sql,SAME,,"[('rw_view2', 'YES', 'YES')]"
postgresql,postgresql,"SELECT table_name, column_name, is_updatable   FROM information_schema.columns  WHERE table_name = 'rw_view2'  ORDER BY ordinal_position",updatable_views.sql,SAME,,"[('rw_view2', 'person', 'YES')]"
postgresql,postgresql,SELECT * FROM rw_view2 WHERE snoop(person),updatable_views.sql,SAME,,"[('Tom',), ('Harry',)]"
postgresql,postgresql,UPDATE rw_view2 SET person=person WHERE snoop(person),updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM rw_view2 WHERE NOT snoop(person),updatable_views.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off) SELECT * FROM rw_view2 WHERE snoop(person),updatable_views.sql,SAME,,"[('Subquery Scan on rw_view2',), ('  Filter: snoop(rw_view2.person)',), ('  ->  Subquery Scan on rw_view1',), ('        Filter: snoop(rw_view1.person)',), ('        ->  Seq Scan on base_tbl',), (""              Filter: (visibility = 'public'::text)"",)]"
postgresql,postgresql,EXPLAIN (costs off) UPDATE rw_view2 SET person=person WHERE snoop(person),updatable_views.sql,SAME,,"[('Update on base_tbl',), ('  ->  Seq Scan on base_tbl',), (""        Filter: ((visibility = 'public'::text) AND snoop(person) AND snoop(person))"",)]"
postgresql,postgresql,EXPLAIN (costs off) DELETE FROM rw_view2 WHERE NOT snoop(person),updatable_views.sql,SAME,,"[('Delete on base_tbl',), ('  ->  Seq Scan on base_tbl',), (""        Filter: ((visibility = 'public'::text) AND snoop(person) AND (NOT snoop(person)))"",)]"
postgresql,postgresql,"CREATE RULE base_tbl_ins_rule AS ON INSERT TO base_tbl   WHERE EXISTS (SELECT 1 FROM base_tbl t WHERE t.id = new.id)   DO INSTEAD     UPDATE base_tbl SET data = new.data, deleted = false WHERE id = new.id",updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE RULE base_tbl_del_rule AS ON DELETE TO base_tbl   DO INSTEAD     UPDATE base_tbl SET deleted = true WHERE id = old.id,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW rw_view1 WITH (security_barrier=true) AS   SELECT id, data FROM base_tbl WHERE NOT deleted",updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM rw_view1,updatable_views.sql,SAME,,"[(1, 'Row 1')]"
postgresql,postgresql,EXPLAIN (costs off) DELETE FROM rw_view1 WHERE id = 1 AND snoop(data),updatable_views.sql,SAME,,"[('Update on base_tbl base_tbl_1',), ('  ->  Nested Loop',), ('        ->  Index Scan using base_tbl_pkey on base_tbl base_tbl_1',), ('              Index Cond: (id = 1)',), ('        ->  Index Scan using base_tbl_pkey on base_tbl',), ('              Index Cond: (id = 1)',), ('              Filter: ((NOT deleted) AND snoop(data))',)]"
postgresql,postgresql,DELETE FROM rw_view1 WHERE id = 1 AND snoop(data),updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM base_tbl,updatable_views.sql,SAME,,"[(1, 'Row 1', True), (2, 'New row 2', False)]"
postgresql,postgresql,CREATE INDEX t1_a_idx ON t1(a),updatable_views.sql,SAME,,[]
postgresql,postgresql,ANALYZE t1,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX t11_a_idx ON t11(a),updatable_views.sql,SAME,,[]
postgresql,postgresql,ANALYZE t11,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX t12_a_idx ON t12(a),updatable_views.sql,SAME,,[]
postgresql,postgresql,ANALYZE t12,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX t111_a_idx ON t111(a),updatable_views.sql,SAME,,[]
postgresql,postgresql,ANALYZE t111,updatable_views.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW v1 WITH (security_barrier=true) AS SELECT *, (SELECT d FROM t11 WHERE t11.a = t1.a LIMIT 1) AS d FROM t1 WHERE a > 5 AND EXISTS(SELECT 1 FROM t12 WHERE t12.a = t1.a)",updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v1 WHERE a=3,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v1 WHERE a=8,updatable_views.sql,SAME,,"[(8, 8.0, 't1', 't11d'), (8, 8.0, 't11', 't11d'), (8, 8.0, 't12', 't11d'), (8, 8.0, 't111', 't11d')]"
postgresql,postgresql,SELECT * FROM v1 WHERE a=100,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM t1 WHERE a=100,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v1 WHERE b=8,updatable_views.sql,SAME,,"[(8, 8.0, 't1', 't11d'), (8, 8.0, 't11', 't11d'), (8, 8.0, 't12', 't11d'), (8, 8.0, 't111', 't11d')]"
postgresql,postgresql,TABLE t1,updatable_views.sql,SAME,,"[(1, 1.0, 't1'), (2, 2.0, 't1'), (3, 3.0, 't1'), (4, 4.0, 't1'), (5, 5.0, 't1'), (6, 6.0, 't1'), (7, 7.0, 't1'), (8, 8.0, 't1'), (9, 9.0, 't1'), (10, 10.0, 't1'), (1, 1.0, 't11'), (2, 2.0, 't11'), (3, 3.0, 't11'), (4, 4.0, 't11'), (5, 5.0, 't11'), (6, 6.0, 't11'), (7, 7.0, 't11'), (8, 8.0, 't11'), (9, 9.0, 't11'), (10, 10.0, 't11'), (1, 1.0, 't12'), (2, 2.0, 't12'), (3, 3.0, 't12'), (4, 4.0, 't12'), (5, 5.0, 't12'), (6, 6.0, 't12'), (7, 7.0, 't12'), (8, 8.0, 't12'), (9, 9.0, 't12'), (10, 10.0, 't12'), (1, 1.0, 't111'), (2, 2.0, 't111'), (3, 3.0, 't111'), (4, 4.0, 't111'), (5, 5.0, 't111'), (6, 6.0, 't111'), (7, 7.0, 't111'), (8, 8.0, 't111'), (9, 9.0, 't111'), (10, 10.0, 't111')]"
postgresql,postgresql,DROP FUNCTION snoop(anyelement),updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW vx1 AS SELECT a FROM tx1 WHERE EXISTS(SELECT 1 FROM tx2 JOIN tx3 ON b=c),updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM tx1,updatable_views.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT * FROM vx1,updatable_views.sql,SAME,,[]
postgresql,postgresql,DROP VIEW vx1,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW vx1 AS SELECT a FROM tx1 WHERE EXISTS(SELECT 1 FROM tx2 JOIN tx3 ON b=c),updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM tx1,updatable_views.sql,SAME,,"[(1,), (1,)]"
postgresql,postgresql,SELECT * FROM vx1,updatable_views.sql,SAME,,[]
postgresql,postgresql,DROP VIEW vx1,updatable_views.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tx1 DROP COLUMN b,updatable_views.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tx2 DROP COLUMN c,updatable_views.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE tx3 DROP COLUMN d,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW vx1 AS SELECT a FROM tx1 WHERE EXISTS(SELECT 1 FROM tx2 JOIN tx3 ON b=c),updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM tx1,updatable_views.sql,SAME,,"[(1,), (1,)]"
postgresql,postgresql,SELECT * FROM vx1,updatable_views.sql,SAME,,[]
postgresql,postgresql,DROP VIEW vx1,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v1 WITH (security_barrier = true) AS   SELECT * FROM t1 WHERE (a > 0)   WITH CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v2 WITH (security_barrier = true) AS   SELECT * FROM v1 WHERE EXISTS (SELECT 1 FROM t2 WHERE t2.cc = v1.c)   WITH CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,UPDATE v2 SET b = 'ONE' WHERE a = 1,updatable_views.sql,SAME,,[]
postgresql,postgresql,DELETE FROM v2 WHERE a = 2,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v2,updatable_views.sql,SAME,,"[(1, 'ONE', 10)]"
postgresql,postgresql,DROP VIEW v2,updatable_views.sql,SAME,,[]
postgresql,postgresql,DROP VIEW v1,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v1 WITH (security_barrier = true) AS   SELECT * FROM t1,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE RULE v1_upd_rule AS ON UPDATE TO v1 DO INSTEAD   UPDATE t1 SET a = NEW.a WHERE a = OLD.a,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v2 WITH (security_barrier = true) AS   SELECT * FROM v1 WHERE EXISTS (SELECT 1),updatable_views.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (COSTS OFF) UPDATE v2 SET a = 1,updatable_views.sql,SAME,,"[('Update on t1',), ('  InitPlan 1 (returns $0)',), ('    ->  Result',), ('  ->  Merge Join',), ('        Merge Cond: (t1.a = v1.a)',), ('        ->  Sort',), ('              Sort Key: t1.a',), ('              ->  Seq Scan on t1',), ('        ->  Sort',), ('              Sort Key: v1.a',), ('              ->  Subquery Scan on v1',), ('                    ->  Result',), ('                          One-Time Filter: $0',), ('                          ->  Seq Scan on t1 t1_1',)]"
postgresql,postgresql,DROP VIEW v2,updatable_views.sql,SAME,,[]
postgresql,postgresql,DROP VIEW v1,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW v1 AS SELECT null::int AS a,updatable_views.sql,SAME,,[]
postgresql,postgresql,CREATE OR REPLACE VIEW v1 AS SELECT * FROM t1 WHERE a > 0 WITH CHECK OPTION,updatable_views.sql,SAME,,[]
postgresql,postgresql,DROP VIEW v1,updatable_views.sql,SAME,,[]
postgresql,postgresql,alter table uv_pt11 drop a,updatable_views.sql,SAME,,[]
postgresql,postgresql,alter table uv_pt11 add a int,updatable_views.sql,SAME,,[]
postgresql,postgresql,alter table uv_pt11 drop a,updatable_views.sql,SAME,,[]
postgresql,postgresql,alter table uv_pt11 add a int not null,updatable_views.sql,SAME,,[]
postgresql,postgresql,alter table uv_pt1 attach partition uv_pt11 for values from (2) to (5),updatable_views.sql,SAME,,[]
postgresql,postgresql,"alter table uv_pt attach partition uv_pt1 for values from (1, 2) to (1, 10)",updatable_views.sql,SAME,,[]
postgresql,postgresql,create view uv_ptv as select * from uv_pt,updatable_views.sql,SAME,,[]
postgresql,postgresql,"select events & 4 != 0 AS upd,        events & 8 != 0 AS ins,        events & 16 != 0 AS del   from pg_catalog.pg_relation_is_updatable('uv_pt'::regclass, false) t(events)",updatable_views.sql,SAME,,"[(True, True, True)]"
postgresql,postgresql,"select pg_catalog.pg_column_is_updatable('uv_pt'::regclass, 1::smallint, false)",updatable_views.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_catalog.pg_column_is_updatable('uv_pt'::regclass, 2::smallint, false)",updatable_views.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select table_name, is_updatable, is_insertable_into   from information_schema.views where table_name = 'uv_ptv'",updatable_views.sql,SAME,,"[('uv_ptv', 'YES', 'YES')]"
postgresql,postgresql,"select table_name, column_name, is_updatable   from information_schema.columns where table_name = 'uv_ptv' order by column_name",updatable_views.sql,SAME,,"[('uv_ptv', 'a', 'YES'), ('uv_ptv', 'b', 'YES'), ('uv_ptv', 'v', 'YES')]"
postgresql,postgresql,"select tableoid::regclass, * from uv_pt",updatable_views.sql,SAME,,"[('uv_pt11', 1, 2, None)]"
postgresql,postgresql,create view uv_ptv_wco as select * from uv_pt where a = 0 with check option,updatable_views.sql,SAME,,[]
postgresql,postgresql,"select tableoid::regclass, * from uv_pt order by a, b",updatable_views.sql,SAME,,"[('uv_pt11', 1, 2, None)]"
postgresql,postgresql,"drop view uv_ptv, uv_ptv_wco",updatable_views.sql,SAME,,[]
postgresql,postgresql,create view wcowrtest_v as select * from wcowrtest where wcowrtest = '(2)'::wcowrtest with check option,updatable_views.sql,SAME,,[]
postgresql,postgresql,alter table wcowrtest add b text,updatable_views.sql,SAME,,[]
postgresql,postgresql,alter table wcowrtest2 drop c,updatable_views.sql,SAME,,[]
postgresql,postgresql,alter table wcowrtest attach partition wcowrtest2 for values in (2),updatable_views.sql,SAME,,[]
postgresql,postgresql,create view wcowrtest_v2 as     select *       from wcowrtest r       where r in (select s from sometable s where r.a = s.a) with check option,updatable_views.sql,SAME,,[]
postgresql,postgresql,"drop view wcowrtest_v, wcowrtest_v2",updatable_views.sql,SAME,,[]
postgresql,postgresql,"create view uv_iocu_view as    select b, b+1 as c, a, '2.0'::text as two from uv_iocu_tab",updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from uv_iocu_tab,updatable_views.sql,SAME,,"[('xyxyxy', 0.0)]"
postgresql,postgresql,select * from uv_iocu_tab,updatable_views.sql,SAME,,"[('xyxyxy', 1.0)]"
postgresql,postgresql,select * from uv_iocu_tab,updatable_views.sql,SAME,,"[('xyxyxy', 2.0)]"
postgresql,postgresql,select * from uv_iocu_tab,updatable_views.sql,SAME,,"[('xyxyxy', 3.0)]"
postgresql,postgresql,drop view uv_iocu_view,updatable_views.sql,SAME,,[]
postgresql,postgresql,"create view uv_iocu_view as     select b as bb, a as aa, uv_iocu_tab::text as cc from uv_iocu_tab",updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from uv_iocu_view,updatable_views.sql,SAME,,"[('Rejected: (y,1,""(1,y)"")', 1, '(1,""Rejected: (y,1,""""(1,y)"""")"")')]"
postgresql,postgresql,delete from uv_iocu_view,updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from uv_iocu_view,updatable_views.sql,SAME,,"[('Rejected: (,1,""(1,)"")', 1, '(1,""Rejected: (,1,""""(1,)"""")"")')]"
postgresql,postgresql,alter table uv_iocu_tab alter column b set default 'table default',updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from uv_iocu_view,updatable_views.sql,SAME,,"[('Rejected: (""table default"",1,""(1,""""table default"""")"")', 1, '(1,""Rejected: (""""table default"""",1,""""(1,""""""""table default"""""""")"""")"")')]"
postgresql,postgresql,alter view uv_iocu_view alter column bb set default 'view default',updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from uv_iocu_view,updatable_views.sql,SAME,,"[('Rejected: (""view default"",1,""(1,""""view default"""")"")', 1, '(1,""Rejected: (""""view default"""",1,""""(1,""""""""view default"""""""")"""")"")')]"
postgresql,postgresql,drop view uv_iocu_view,updatable_views.sql,SAME,,[]
postgresql,postgresql,"create view rw_view1 as select b as bb, c as cc, a as aa from base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,reset session authorization,updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from base_tbl,updatable_views.sql,SAME,,"[(1, 'yyyxxx', 3.0)]"
postgresql,postgresql,"create view rw_view2 as select b as bb, c as cc, a as aa from base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,"create view rw_view3 as select b as bb, a as aa from base_tbl",updatable_views.sql,SAME,,[]
postgresql,postgresql,reset session authorization,updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from base_tbl,updatable_views.sql,SAME,,"[(1, 'xxx', 3.0)]"
postgresql,postgresql,"create view rw_view4 as select aa, bb, cc FROM rw_view1",updatable_views.sql,SAME,,[]
postgresql,postgresql,"create view rw_view5 as select aa, bb FROM rw_view1",updatable_views.sql,SAME,,[]
postgresql,postgresql,reset session authorization,updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from base_tbl,updatable_views.sql,SAME,,"[(1, 'yyy', 3.0)]"
postgresql,postgresql,drop view rw_view5,updatable_views.sql,SAME,,[]
postgresql,postgresql,drop view rw_view4,updatable_views.sql,SAME,,[]
postgresql,postgresql,drop view rw_view3,updatable_views.sql,SAME,,[]
postgresql,postgresql,drop view rw_view2,updatable_views.sql,SAME,,[]
postgresql,postgresql,drop view rw_view1,updatable_views.sql,SAME,,[]
postgresql,postgresql,create view base_tab_def_view as select * from base_tab_def,updatable_views.sql,SAME,,[]
postgresql,postgresql,alter view base_tab_def_view alter b set default 'View default',updatable_views.sql,SAME,,[]
postgresql,postgresql,alter view base_tab_def_view alter d set default 'View default',updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from base_tab_def order by a,updatable_views.sql,SAME,,"[(1, 'Table default', 'Table default', None, None), (2, 'Table default', 'Table default', None, None), (3, 'Table default', 'Table default', None, None), (4, 'Table default', 'Table default', None, None), (5, 'Table default', 'Table default', None, None), (6, 'Table default', 'Table default', None, None), (11, 'View default', 'Table default', 'View default', None), (12, 'View default', 'Table default', 'View default', None), (13, 'View default', 'Table default', 'View default', None), (14, 'View default', 'Table default', 'View default', None), (15, 'View default', 'Table default', 'View default', None), (16, 'View default', 'Table default', 'View default', None), (17, 'View default', 'Table default', 'View default', None), (None, 'View default', 'Table default', 'View default', None)]"
postgresql,postgresql,create trigger base_tab_def_view_instrig instead of insert on base_tab_def_view   for each row execute function base_tab_def_view_instrig_func(),updatable_views.sql,SAME,,[]
postgresql,postgresql,truncate base_tab_def,updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from base_tab_def order by a,updatable_views.sql,SAME,,"[(1, 'Table default', 'Table default', None, None), (2, 'Table default', 'Table default', None, None), (3, 'Table default', 'Table default', None, None), (4, 'Table default', 'Table default', None, None), (5, 'Table default', 'Table default', None, None), (6, 'Table default', 'Table default', None, None), (11, 'View default', None, 'View default', None), (12, 'View default', None, 'View default', None), (13, 'View default', None, 'View default', None), (14, 'View default', None, 'View default', None), (15, 'View default', None, 'View default', None), (16, 'View default', None, 'View default', None), (17, 'View default', None, 'View default', None), (None, 'View default', None, 'View default', None)]"
postgresql,postgresql,drop trigger base_tab_def_view_instrig on base_tab_def_view,updatable_views.sql,SAME,,[]
postgresql,postgresql,drop function base_tab_def_view_instrig_func,updatable_views.sql,SAME,,[]
postgresql,postgresql,truncate base_tab_def,updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from base_tab_def order by a,updatable_views.sql,SAME,,"[(1, 'Table default', 'Table default', None, None), (2, 'Table default', 'Table default', None, None), (3, 'Table default', 'Table default', None, None), (4, 'Table default', 'Table default', None, None), (5, 'Table default', 'Table default', None, None), (6, 'Table default', 'Table default', None, None), (11, 'View default', None, 'View default', None), (12, 'View default', None, 'View default', None), (13, 'View default', None, 'View default', None), (14, 'View default', None, 'View default', None), (15, 'View default', None, 'View default', None), (16, 'View default', None, 'View default', None), (17, 'View default', None, 'View default', None), (None, 'View default', None, 'View default', None)]"
postgresql,postgresql,drop rule base_tab_def_view_ins_rule on base_tab_def_view,updatable_views.sql,SAME,,[]
postgresql,postgresql,truncate base_tab_def,updatable_views.sql,SAME,,[]
postgresql,postgresql,"select * from base_tab_def order by a, c NULLS LAST",updatable_views.sql,SAME,,"[(1, 'Table default', 'Table default', None, None), (2, 'Table default', 'Table default', None, None), (3, 'Table default', 'Table default', None, None), (4, 'Table default', 'Table default', None, None), (5, 'Table default', 'Table default', None, None), (6, 'Table default', 'Table default', None, None), (11, 'View default', 'Table default', 'View default', None), (11, 'View default', None, 'View default', None), (12, 'View default', 'Table default', 'View default', None), (12, 'View default', None, 'View default', None), (13, 'View default', 'Table default', 'View default', None), (13, 'View default', None, 'View default', None), (14, 'View default', 'Table default', 'View default', None), (14, 'View default', None, 'View default', None), (15, 'View default', 'Table default', 'View default', None), (15, 'View default', None, 'View default', None), (16, 'View default', 'Table default', 'View default', None), (16, 'View default', None, 'View default', None), (17, 'View default', 'Table default', 'View default', None), (17, 'View default', None, 'View default', None), (None, 'View default', 'Table default', 'View default', None), (None, 'View default', None, 'View default', None)]"
postgresql,postgresql,drop rule base_tab_def_view_ins_rule on base_tab_def_view,updatable_views.sql,SAME,,[]
postgresql,postgresql,truncate base_tab_def,updatable_views.sql,SAME,,[]
postgresql,postgresql,"select * from base_tab_def order by a, e nulls first",updatable_views.sql,SAME,,"[(1, 'View default', 'Table default', 'View default', None), (1, 'View default', 'Table default', None, 'xxx'), (2, 'View default', 'Table default', 'View default', None), (2, 'View default', 'Table default', None, 'xxx'), (3, 'View default', 'Table default', 'View default', None), (3, 'View default', 'Table default', None, 'xxx')]"
postgresql,postgresql,drop view base_tab_def_view,updatable_views.sql,SAME,,[]
postgresql,postgresql,"create view base_tab_view as select c, a, b from base_tab",updatable_views.sql,SAME,,[]
postgresql,postgresql,alter view base_tab_view alter column c set default 'View default',updatable_views.sql,SAME,,[]
postgresql,postgresql,select * from base_tab order by a,updatable_views.sql,SAME,,"[(1, [1, 2, 3, 4, 5], 'View default', 'Table default'), (100, [10, 11, 12, 13, 14], 'C value', 'Table default')]"
postgresql,postgresql,drop view base_tab_view,updatable_views.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(5, 10, 'foo'), (10, 15, None)]"
postgresql,postgresql,"UPDATE update_test SET a = DEFAULT, b = DEFAULT",update.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(10, None, 'foo'), (10, None, None)]"
postgresql,postgresql,UPDATE update_test AS t SET b = 10 WHERE t.a = 10,update.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(10, 10, 'foo'), (10, 10, None)]"
postgresql,postgresql,UPDATE update_test t SET b = t.b + 10 WHERE t.a = 10,update.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(10, 20, 'foo'), (10, 20, None)]"
postgresql,postgresql,"UPDATE update_test SET a=v.i FROM (VALUES(100, 20)) AS v(i, j)   WHERE update_test.b = v.j",update.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(100, 20, 'foo'), (100, 20, None)]"
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(100, 20, 'foo'), (100, 20, None), (100, 21, 'foo'), (100, 21, None)]"
postgresql,postgresql,"UPDATE update_test SET (c,b,a) = ('bugle', b+11, DEFAULT) WHERE c = 'foo'",update.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(100, 20, None), (100, 21, None), (10, 31, 'bugle'), (10, 32, 'bugle')]"
postgresql,postgresql,"UPDATE update_test SET (c,b) = ('car', a+b), a = a + 1 WHERE a = 10",update.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(100, 20, None), (100, 21, None), (11, 41, 'car'), (11, 42, 'car')]"
postgresql,postgresql,"UPDATE update_test   SET (b,a) = (select a,b from update_test where b = 41 and c = 'car')   WHERE a = 100 AND b = 20",update.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(100, 21, None), (11, 41, 'car'), (11, 42, 'car'), (41, 11, None)]"
postgresql,postgresql,"UPDATE update_test o   SET (b,a) = (select a+1,b from update_test i                where i.a=o.a and i.b=o.b and i.c is not distinct from o.c)",update.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(21, 101, None), (41, 12, 'car'), (42, 12, 'car'), (11, 42, None)]"
postgresql,postgresql,"UPDATE update_test SET (b,a) = (select a+1,b from update_test where a = 1000)   WHERE a = 11",update.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM update_test,update.sql,SAME,,"[(21, 101, None), (41, 12, 'car'), (42, 12, 'car'), (None, None, None)]"
postgresql,postgresql,"UPDATE update_test SET (a,b) = ROW(v.*) FROM (VALUES(21, 100)) AS v(i, j)   WHERE update_test.a = v.i",update.sql,SAME,,[]
postgresql,postgresql,"UPDATE update_test SET c = repeat('x', 10000) WHERE c = 'car'",update.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b, char_length(c) FROM update_test",update.sql,SAME,,"[(None, None, None), (21, 100, None), (41, 12, 10000), (42, 12, 10000)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) UPDATE update_test t   SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a)   WHERE CURRENT_USER = SESSION_USER",update.sql,SAME,,"[('Update on public.update_test t',), ('  ->  Result',), ('        Output: $1, $2, (SubPlan 1 (returns $1,$2)), t.ctid',), ('        One-Time Filter: (CURRENT_USER = SESSION_USER)',), ('        ->  Seq Scan on public.update_test t',), ('              Output: t.a, t.ctid',), ('        SubPlan 1 (returns $1,$2)',), ('          ->  Seq Scan on public.update_test s',), ('                Output: s.b, s.a',), ('                Filter: (s.a = t.a)',)]"
postgresql,postgresql,"UPDATE update_test t   SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a)   WHERE CURRENT_USER = SESSION_USER",update.sql,SAME,,[]
postgresql,postgresql,"SELECT a, b, char_length(c) FROM update_test",update.sql,SAME,,"[(None, None, None), (100, 21, None), (12, 41, 10000), (12, 42, 10000)]"
postgresql,postgresql,ALTER TABLE upsert_test ATTACH PARTITION upsert_test_2 FOR VALUES IN (2),update.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE range_parted ATTACH PARTITION part_b_20_b_30 FOR VALUES FROM ('b', 20) TO ('b', 30)",update.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE range_parted ATTACH PARTITION part_b_10_b_20 FOR VALUES FROM ('b', 10) TO ('b', 20)",update.sql,SAME,,[]
postgresql,postgresql,UPDATE part_b_10_b_20 set b = b - 6,update.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE part_c_100_200 DROP COLUMN e, DROP COLUMN c, DROP COLUMN a",update.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE part_c_100_200 ADD COLUMN c numeric, ADD COLUMN e varchar, ADD COLUMN a text",update.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_c_100_200 DROP COLUMN b,update.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_c_100_200 ADD COLUMN b bigint,update.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_b_10_b_20 ATTACH PARTITION part_c_100_200 FOR VALUES FROM (100) TO (200),update.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE part_b_10_b_20 ATTACH PARTITION part_c_1_100 FOR VALUES FROM (1) TO (100),update.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off) UPDATE range_parted set c = c - 50 WHERE c > 97,update.sql,SAME,,"[('Update on range_parted',), ('  Update on part_a_1_a_10 range_parted_1',), ('  Update on part_a_10_a_20 range_parted_2',), ('  Update on part_b_1_b_10 range_parted_3',), ('  Update on part_c_1_100 range_parted_4',), ('  Update on part_d_1_15 range_parted_5',), ('  Update on part_d_15_20 range_parted_6',), ('  Update on part_b_20_b_30 range_parted_7',), ('  ->  Append',), ('        ->  Seq Scan on part_a_1_a_10 range_parted_1',), (""              Filter: (c > '97'::numeric)"",), ('        ->  Seq Scan on part_a_10_a_20 range_parted_2',), (""              Filter: (c > '97'::numeric)"",), ('        ->  Seq Scan on part_b_1_b_10 range_parted_3',), (""              Filter: (c > '97'::numeric)"",), ('        ->  Seq Scan on part_c_1_100 range_parted_4',), (""              Filter: (c > '97'::numeric)"",), ('        ->  Seq Scan on part_d_1_15 range_parted_5',), (""              Filter: (c > '97'::numeric)"",), ('        ->  Seq Scan on part_d_15_20 range_parted_6',), (""              Filter: (c > '97'::numeric)"",), ('        ->  Seq Scan on part_b_20_b_30 range_parted_7',), (""              Filter: (c > '97'::numeric)"",)]"
postgresql,postgresql,"UPDATE part_c_100_200 set c = c - 20, d = c WHERE c = 105",update.sql,SAME,,[]
postgresql,postgresql,UPDATE part_b_10_b_20 set a = 'a',update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set d = d - 10 WHERE d > 10,update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set e = d,update.sql,SAME,,[]
postgresql,postgresql,UPDATE part_c_1_100 set c = c + 20 WHERE c = 98,update.sql,SAME,,[]
postgresql,postgresql,"UPDATE part_b_10_b_20 set c = c + 20 returning c, b, a",update.sql,SAME,,[]
postgresql,postgresql,UPDATE part_b_10_b_20 set b = b - 6 WHERE c > 116 returning *,update.sql,SAME,,[]
postgresql,postgresql,"UPDATE range_parted set b = b - 6 WHERE c > 116 returning a, b + c",update.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW upview AS SELECT * FROM range_parted WHERE (select c > c1 FROM mintab) WITH CHECK OPTION,update.sql,SAME,,[]
postgresql,postgresql,UPDATE upview set c = 199 WHERE b = 4,update.sql,SAME,,[]
postgresql,postgresql,UPDATE upview set c = 120 WHERE b = 4,update.sql,SAME,,[]
postgresql,postgresql,"UPDATE upview set a = 'b', b = 15, c = 120 WHERE b = 4",update.sql,SAME,,[]
postgresql,postgresql,"UPDATE upview set a = 'b', b = 15 WHERE b = 4",update.sql,SAME,,[]
postgresql,postgresql,DROP VIEW upview,update.sql,SAME,,[]
postgresql,postgresql,"UPDATE range_parted set c = 95 WHERE a = 'b' and b > 10 and c > 100 returning (range_parted), *",update.sql,SAME,,[]
postgresql,postgresql,end,update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set c = (case when c = 96 then 110 else c + 1 end ) WHERE a = 'b' and b > 10 and c >= 96,update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set c = c + 50 WHERE a = 'b' and b > 10 and c >= 96,update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set c = (case when c = 96 then 110 else c + 1 end) WHERE a = 'b' and b > 10 and c >= 96,update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set c = c + 50 WHERE a = 'b' and b > 10 and c >= 96,update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set b = 15 WHERE b = 1,update.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE range_parted ENABLE ROW LEVEL SECURITY,update.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY seeall ON range_parted AS PERMISSIVE FOR SELECT USING (true),update.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY policy_range_parted ON range_parted for UPDATE USING (true) WITH CHECK (c % 2 = 0),update.sql,SAME,,[]
postgresql,postgresql,"UPDATE range_parted set a = 'b', c = 151 WHERE a = 'a' and c = 200",update.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,update.sql,SAME,,[]
postgresql,postgresql,"UPDATE range_parted set a = 'b', c = 151 WHERE a = 'a' and c = 200",update.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,update.sql,SAME,,[]
postgresql,postgresql,"UPDATE range_parted set a = 'b', c = 150 WHERE a = 'a' and c = 200",update.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,update.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,update.sql,SAME,,[]
postgresql,postgresql,CREATE POLICY policy_range_parted_subplan on range_parted     AS RESTRICTIVE for UPDATE USING (true)     WITH CHECK ((SELECT range_parted.c <= c1 FROM mintab)),update.sql,SAME,,[]
postgresql,postgresql,"UPDATE range_parted set a = 'b', c = 122 WHERE a = 'a' and c = 200",update.sql,SAME,,[]
postgresql,postgresql,"UPDATE range_parted set a = 'b', c = 120 WHERE a = 'a' and c = 200",update.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,update.sql,SAME,,[]
postgresql,postgresql,"CREATE POLICY policy_range_parted_wholerow on range_parted AS RESTRICTIVE for UPDATE USING (true)    WITH CHECK (range_parted = row('b', 10, 112, 1, NULL)::range_parted)",update.sql,SAME,,[]
postgresql,postgresql,"UPDATE range_parted set a = 'b', c = 112 WHERE a = 'a' and c = 200",update.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,update.sql,SAME,,[]
postgresql,postgresql,"UPDATE range_parted set a = 'b', c = 116 WHERE a = 'a' and c = 200",update.sql,SAME,,[]
postgresql,postgresql,RESET SESSION AUTHORIZATION,update.sql,SAME,,[]
postgresql,postgresql,DROP POLICY policy_range_parted ON range_parted,update.sql,SAME,,[]
postgresql,postgresql,DROP POLICY policy_range_parted_subplan ON range_parted,update.sql,SAME,,[]
postgresql,postgresql,DROP POLICY policy_range_parted_wholerow ON range_parted,update.sql,SAME,,[]
postgresql,postgresql,end,update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set c = c - 50 WHERE c > 97,update.sql,SAME,,[]
postgresql,postgresql,update part_def set a = 'd' where a = 'c',update.sql,SAME,,[]
postgresql,postgresql,UPDATE part_a_10_a_20 set a = 'ad' WHERE a = 'a',update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set a = 'ad' WHERE a = 'a',update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set a = 'bd' WHERE a = 'b',update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set a = 'a' WHERE a = 'ad',update.sql,SAME,,[]
postgresql,postgresql,UPDATE range_parted set a = 'b' WHERE a = 'bd',update.sql,SAME,,[]
postgresql,postgresql,UPDATE list_default set a = 'x' WHERE a = 'd',update.sql,SAME,,[]
postgresql,postgresql,alter table utr1 drop column q,update.sql,SAME,,[]
postgresql,postgresql,alter table utrtest attach partition utr1 for values in (1),update.sql,SAME,,[]
postgresql,postgresql,alter table utrtest attach partition utr2 for values in (2),update.sql,SAME,,[]
postgresql,postgresql,"update utrtest set b = b || b from (values (1), (2)) s(x) where a = s.x   returning *, tableoid::regclass, xmin = pg_current_xact_id()::xid as xmin_ok",update.sql,SAME,,"[(1, 'foofoo', 1, 'utr1', True), (2, 'barbar', 2, 'utr2', True)]"
postgresql,postgresql,"update utrtest set a = 3 - a from (values (1), (2)) s(x) where a = s.x   returning *, tableoid::regclass",update.sql,SAME,,"[(2, 'foofoo', 1, 'utr2'), (1, 'barbar', 2, 'utr1')]"
postgresql,postgresql,"delete from utrtest   returning *, tableoid::regclass, xmax = pg_current_xact_id()::xid as xmax_ok",update.sql,SAME,,"[(1, 'barbar', 'utr1', True), (2, 'foofoo', 'utr2', True)]"
postgresql,postgresql,ALTER TABLE sub_parted ATTACH PARTITION sub_part1 for VALUES in (1),update.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE sub_parted ATTACH PARTITION sub_part2 for VALUES in (2),update.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE list_parted ATTACH PARTITION list_part1 for VALUES in (2,3)",update.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass::text, * FROM list_parted WHERE a = 2 ORDER BY 1",update.sql,SAME,,"[('list_part1', Decimal('2'), 5, 50)]"
postgresql,postgresql,UPDATE list_parted set b = c + a WHERE a = 2,update.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass::text, * FROM list_parted WHERE a = 2 ORDER BY 1",update.sql,SAME,,"[('list_part1', Decimal('2'), 52, 50)]"
postgresql,postgresql,"SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4",update.sql,SAME,,"[('list_part1', Decimal('2'), 52, 50), ('list_part1', Decimal('3'), 6, 60), ('sub_part1', Decimal('1'), 1, 60), ('sub_part2', Decimal('1'), 2, 10)]"
postgresql,postgresql,UPDATE list_parted set c = 70 WHERE b  = 1,update.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4",update.sql,SAME,,"[('list_part1', Decimal('2'), 52, 50), ('list_part1', Decimal('3'), 6, 60), ('sub_part1', Decimal('1'), 1, 70), ('sub_part2', Decimal('1'), 2, 10)]"
postgresql,postgresql,"CREATE OR REPLACE FUNCTION func_parted_mod_b() returns trigger as $$ BEGIN    raise notice 'Trigger: Got OLD row %, but returning NULL', OLD;    return NULL; END $$ LANGUAGE plpgsql",update.sql,SAME,,[]
postgresql,postgresql,CREATE TRIGGER trig_skip_delete before delete on sub_part2    for each row execute procedure func_parted_mod_b(),update.sql,SAME,,[]
postgresql,postgresql,UPDATE list_parted set b = 1 WHERE c = 70,update.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4",update.sql,SAME,,"[('list_part1', Decimal('2'), 52, 50), ('list_part1', Decimal('3'), 6, 60), ('sub_part1', Decimal('1'), 1, 70), ('sub_part2', Decimal('1'), 2, 10)]"
postgresql,postgresql,DROP TRIGGER trig_skip_delete ON sub_part2,update.sql,SAME,,[]
postgresql,postgresql,UPDATE list_parted set b = 1 WHERE c = 70,update.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4",update.sql,SAME,,"[('list_part1', Decimal('2'), 52, 50), ('list_part1', Decimal('3'), 6, 60), ('sub_part1', Decimal('1'), 1, 70), ('sub_part2', Decimal('1'), 2, 10)]"
postgresql,postgresql,DROP FUNCTION func_parted_mod_b(),update.sql,SAME,,[]
postgresql,postgresql,UPDATE list_parted t1 set a = 2 FROM non_parted t2 WHERE t1.a = t2.id and a = 1,update.sql,SAME,,[]
postgresql,postgresql,"SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4",update.sql,SAME,,"[('list_part1', Decimal('2'), 1, 70), ('list_part1', Decimal('2'), 2, 10), ('list_part1', Decimal('2'), 52, 50), ('list_part1', Decimal('3'), 6, 60)]"
postgresql,postgresql,"create or replace function dummy_hashint4(a int4, seed int8) returns int8 as $$ begin return (a + seed); end; $$ language 'plpgsql' immutable",update.sql,SAME,,[]
postgresql,postgresql,"drop function dummy_hashint4(a int4, seed int8)",update.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_input_is_valid('11', 'uuid')",uuid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('11', 'uuid')",uuid.sql,SAME,,"[('invalid input syntax for type uuid: ""11""', None, None, '22P02')]"
postgresql,postgresql,SELECT guid_field FROM guid1,uuid.sql,SAME,,"[('11111111-1111-1111-1111-111111111111',), ('22222222-2222-2222-2222-222222222222',), ('3f3e3c3b-3a30-3938-3736-353433a2313e',)]"
postgresql,postgresql,SELECT guid_field FROM guid1 ORDER BY guid_field ASC,uuid.sql,SAME,,"[('11111111-1111-1111-1111-111111111111',), ('22222222-2222-2222-2222-222222222222',), ('3f3e3c3b-3a30-3938-3736-353433a2313e',)]"
postgresql,postgresql,SELECT guid_field FROM guid1 ORDER BY guid_field DESC,uuid.sql,SAME,,"[('3f3e3c3b-3a30-3938-3736-353433a2313e',), ('22222222-2222-2222-2222-222222222222',), ('11111111-1111-1111-1111-111111111111',)]"
postgresql,postgresql,SELECT COUNT(*) FROM guid1 WHERE guid_field = '3f3e3c3b-3a30-3938-3736-353433a2313e',uuid.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT COUNT(*) FROM guid1 WHERE guid_field <> '11111111111111111111111111111111',uuid.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT COUNT(*) FROM guid1 WHERE guid_field < '22222222-2222-2222-2222-222222222222',uuid.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT COUNT(*) FROM guid1 WHERE guid_field <= '22222222-2222-2222-2222-222222222222',uuid.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT COUNT(*) FROM guid1 WHERE guid_field > '22222222-2222-2222-2222-222222222222',uuid.sql,SAME,,"[(1,)]"
postgresql,postgresql,SELECT COUNT(*) FROM guid1 WHERE guid_field >= '22222222-2222-2222-2222-222222222222',uuid.sql,SAME,,"[(2,)]"
postgresql,postgresql,CREATE INDEX guid1_btree ON guid1 USING BTREE (guid_field),uuid.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX guid1_hash  ON guid1 USING HASH  (guid_field),uuid.sql,SAME,,[]
postgresql,postgresql,CREATE UNIQUE INDEX guid1_unique_BTREE ON guid1 USING BTREE (guid_field),uuid.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM pg_class WHERE relkind='i' AND relname LIKE 'guid%',uuid.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT COUNT(*) FROM guid1 g1 INNER JOIN guid2 g2 ON g1.guid_field = g2.guid_field,uuid.sql,SAME,,"[(3,)]"
postgresql,postgresql,SELECT COUNT(*) FROM guid1 g1 LEFT JOIN guid2 g2 ON g1.guid_field = g2.guid_field WHERE g2.guid_field IS NULL,uuid.sql,SAME,,"[(1,)]"
postgresql,postgresql,TRUNCATE guid1,uuid.sql,SAME,,[]
postgresql,postgresql,SELECT count(DISTINCT guid_field) FROM guid1,uuid.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT count(*) FROM vactst,vacuum.sql,SAME,,"[(2049,)]"
postgresql,postgresql,DELETE FROM vactst WHERE i != 0,vacuum.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM vactst,vacuum.sql,SAME,,"[(0,)]"
postgresql,postgresql,VACUUM FULL vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,UPDATE vactst SET i = i + 1,vacuum.sql,SAME,,[]
postgresql,postgresql,SELECT count(*) FROM vactst,vacuum.sql,SAME,,"[(2049,)]"
postgresql,postgresql,DELETE FROM vactst WHERE i != 0,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (FULL) vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,DELETE FROM vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (FULL, FREEZE) vactst",vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (ANALYZE, FULL) vactst",vacuum.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE vaccluster CLUSTER ON vaccluster_pkey,vacuum.sql,SAME,,[]
postgresql,postgresql,CLUSTER vaccluster,vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION do_analyze() RETURNS VOID VOLATILE LANGUAGE SQL 	AS 'ANALYZE pg_am',vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION wrap_do_analyze(c INT) RETURNS INT IMMUTABLE LANGUAGE SQL 	AS 'SELECT $1 FROM public.do_analyze()',vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX ON vaccluster(wrap_do_analyze(i)),vacuum.sql,SAME,,[]
postgresql,postgresql,DELETE FROM vactst WHERE i % 7 = 0,vacuum.sql,SAME,,[]
postgresql,postgresql,BEGIN,vacuum.sql,SAME,,[]
postgresql,postgresql,DELETE FROM vactst WHERE i % 5 <> 0,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,COMMIT,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM FULL pg_am,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM FULL pg_class,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM FULL pg_database,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM FULL vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (DISABLE_PAGE_SKIPPING) vaccluster,vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX btree_pvactst ON pvactst USING btree (i),vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX hash_pvactst ON pvactst USING hash (i),vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX brin_pvactst ON pvactst USING brin (i),vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX gin_pvactst ON pvactst USING gin (a),vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX gist_pvactst ON pvactst USING gist (p),vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX spgist_pvactst ON pvactst USING spgist (p),vacuum.sql,SAME,,[]
postgresql,postgresql,SET min_parallel_index_scan_size to 0,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (PARALLEL 2) pvactst,vacuum.sql,SAME,,[]
postgresql,postgresql,UPDATE pvactst SET i = i WHERE i < 1000,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (PARALLEL 2) pvactst,vacuum.sql,SAME,,[]
postgresql,postgresql,UPDATE pvactst SET i = i WHERE i < 1000,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (PARALLEL 0) pvactst,vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (PARALLEL 2, INDEX_CLEANUP FALSE) pvactst",vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE TEMPORARY TABLE tmp (a int PRIMARY KEY),vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX tmp_idx1 ON tmp (a),vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (PARALLEL 1, FULL FALSE) tmp",vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (PARALLEL 0, FULL TRUE) tmp",vacuum.sql,SAME,,[]
postgresql,postgresql,RESET min_parallel_index_scan_size,vacuum.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX no_index_cleanup_idx ON no_index_cleanup(t),vacuum.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE no_index_cleanup ALTER COLUMN t SET STORAGE EXTERNAL,vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (INDEX_CLEANUP TRUE, FULL TRUE) no_index_cleanup",vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (FULL TRUE) no_index_cleanup,vacuum.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE no_index_cleanup SET (vacuum_index_cleanup = false),vacuum.sql,SAME,,[]
postgresql,postgresql,DELETE FROM no_index_cleanup WHERE i < 15,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM no_index_cleanup,vacuum.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE no_index_cleanup SET (vacuum_index_cleanup = true),vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM no_index_cleanup,vacuum.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE no_index_cleanup SET (vacuum_index_cleanup = auto),vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM no_index_cleanup,vacuum.sql,SAME,,[]
postgresql,postgresql,DELETE FROM no_index_cleanup WHERE i < 45,vacuum.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE no_index_cleanup SET (vacuum_index_cleanup = off,     toast.vacuum_index_cleanup = yes)",vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM no_index_cleanup,vacuum.sql,SAME,,[]
postgresql,postgresql,"ALTER TABLE no_index_cleanup SET (vacuum_index_cleanup = true,     toast.vacuum_index_cleanup = false)",vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM no_index_cleanup,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (INDEX_CLEANUP FALSE) vaccluster,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (INDEX_CLEANUP AUTO) vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (INDEX_CLEANUP FALSE, FREEZE TRUE) vaccluster",vacuum.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP TABLE vac_truncate_test(i INT NOT NULL, j text) 	WITH (vacuum_truncate=true, autovacuum_enabled=false)",vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (TRUNCATE FALSE, DISABLE_PAGE_SKIPPING) vac_truncate_test",vacuum.sql,SAME,,[]
postgresql,postgresql,SELECT pg_relation_size('vac_truncate_test') > 0,vacuum.sql,SAME,,"[(False,)]"
postgresql,postgresql,VACUUM (DISABLE_PAGE_SKIPPING) vac_truncate_test,vacuum.sql,SAME,,[]
postgresql,postgresql,SELECT pg_relation_size('vac_truncate_test') = 0,vacuum.sql,SAME,,"[(True,)]"
postgresql,postgresql,"VACUUM (TRUNCATE FALSE, FULL TRUE) vac_truncate_test",vacuum.sql,SAME,,[]
postgresql,postgresql,UPDATE vacparted SET b = 'b',vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacparted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (FULL) vacparted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (FREEZE) vacparted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacparted_i,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (FULL) vacparted_i,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (FREEZE) vacparted_i,vacuum.sql,SAME,,[]
postgresql,postgresql,"SELECT relname, relhasindex FROM pg_class   WHERE relname LIKE 'vacparted_i%' AND relkind IN ('p','r')   ORDER BY relname",vacuum.sql,SAME,,"[('vacparted_i', True), ('vacparted_i1', True), ('vacparted_i2', True)]"
postgresql,postgresql,"VACUUM vaccluster, vactst",vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (FREEZE) vacparted, vaccluster, vactst",vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM ANALYZE vactst, vacparted (a)",vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM FULL vacparted, vactst",vacuum.sql,SAME,,[]
postgresql,postgresql,"ANALYZE vactst, vacparted",vacuum.sql,SAME,,[]
postgresql,postgresql,"ANALYZE vacparted (b), vactst",vacuum.sql,SAME,,[]
postgresql,postgresql,"ANALYZE vactst, vactst",vacuum.sql,SAME,,[]
postgresql,postgresql,BEGIN,vacuum.sql,SAME,,[]
postgresql,postgresql,"ANALYZE vactst, vactst",vacuum.sql,SAME,,[]
postgresql,postgresql,COMMIT,vacuum.sql,SAME,,[]
postgresql,postgresql,SET client_min_messages TO 'ERROR',vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (SKIP_LOCKED) vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,"VACUUM (SKIP_LOCKED, FULL) vactst",vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE (SKIP_LOCKED) vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,RESET client_min_messages,vacuum.sql,SAME,,[]
postgresql,postgresql,SET default_transaction_isolation = serializable,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,RESET default_transaction_isolation,vacuum.sql,SAME,,[]
postgresql,postgresql,BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,COMMIT,vacuum.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE vac_option_tab ALTER COLUMN t SET STORAGE EXTERNAL,vacuum.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW vac_option_tab_counts AS   SELECT CASE WHEN c.relname IS NULL     THEN 'main' ELSE 'toast' END as rel,   s.vacuum_count   FROM pg_stat_all_tables s   LEFT JOIN pg_class c ON s.relid = c.reltoastrelid   WHERE c.relname = 'vac_option_tab' OR s.relname = 'vac_option_tab'   ORDER BY rel",vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (PROCESS_TOAST TRUE) vac_option_tab,vacuum.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM vac_option_tab_counts,vacuum.sql,SAME,,"[('main', 1), ('toast', 1)]"
postgresql,postgresql,VACUUM (PROCESS_TOAST FALSE) vac_option_tab,vacuum.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM vac_option_tab_counts,vacuum.sql,SAME,,"[('main', 2), ('toast', 1)]"
postgresql,postgresql,VACUUM (PROCESS_MAIN FALSE) vac_option_tab,vacuum.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM vac_option_tab_counts,vacuum.sql,SAME,,"[('main', 2), ('toast', 2)]"
postgresql,postgresql,"VACUUM (PROCESS_MAIN FALSE, PROCESS_TOAST FALSE) vac_option_tab",vacuum.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM vac_option_tab_counts,vacuum.sql,SAME,,"[('main', 2), ('toast', 2)]"
postgresql,postgresql,VACUUM (BUFFER_USAGE_LIMIT '512 kB') vac_option_tab,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE (BUFFER_USAGE_LIMIT '512 kB') vac_option_tab,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (BUFFER_USAGE_LIMIT 0) vac_option_tab,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE (BUFFER_USAGE_LIMIT 0) vac_option_tab,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (SKIP_DATABASE_STATS) vactst,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ONLY_DATABASE_STATS),vacuum.sql,SAME,,[]
postgresql,postgresql,DROP VIEW vac_option_tab_counts,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM pg_catalog.pg_class,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE pg_catalog.pg_class,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) pg_catalog.pg_class,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM pg_catalog.pg_authid,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE pg_catalog.pg_authid,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) pg_catalog.pg_authid,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,vacuum.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE vacowned_parted OWNER TO CURRENT_USER,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,vacuum.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE vacowned_part1 OWNER TO CURRENT_USER,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,ANALYZE vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_parted,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_part1,vacuum.sql,SAME,,[]
postgresql,postgresql,VACUUM (ANALYZE) vacowned_part2,vacuum.sql,SAME,,[]
postgresql,postgresql,RESET ROLE,vacuum.sql,SAME,,[]
postgresql,postgresql,SET max_parallel_maintenance_workers TO 4,vacuum_parallel.sql,SAME,,[]
postgresql,postgresql,SET min_parallel_index_scan_size TO '128kB',vacuum_parallel.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX regular_sized_index ON parallel_vacuum_table(a),vacuum_parallel.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX typically_sized_index ON parallel_vacuum_table(a),vacuum_parallel.sql,SAME,,[]
postgresql,postgresql,CREATE INDEX vacuum_in_leader_small_index ON parallel_vacuum_table((1)),vacuum_parallel.sql,SAME,,[]
postgresql,postgresql,SELECT EXISTS ( SELECT 1 FROM pg_class WHERE oid = 'vacuum_in_leader_small_index'::regclass AND   pg_relation_size(oid) <   pg_size_bytes(current_setting('min_parallel_index_scan_size')) ) as leader_will_handle_small_index,vacuum_parallel.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT count(*) as trigger_parallel_vacuum_nindexes FROM pg_class WHERE oid in ('regular_sized_index'::regclass, 'typically_sized_index'::regclass) AND   pg_relation_size(oid) >=   pg_size_bytes(current_setting('min_parallel_index_scan_size'))",vacuum_parallel.sql,SAME,,"[(2,)]"
postgresql,postgresql,DELETE FROM parallel_vacuum_table,vacuum_parallel.sql,SAME,,[]
postgresql,postgresql,"VACUUM (PARALLEL 4, INDEX_CLEANUP ON) parallel_vacuum_table",vacuum_parallel.sql,SAME,,[]
postgresql,postgresql,RESET max_parallel_maintenance_workers,vacuum_parallel.sql,SAME,,[]
postgresql,postgresql,RESET min_parallel_index_scan_size,vacuum_parallel.sql,SAME,,[]
postgresql,postgresql,CREATE TEMP TABLE VARCHAR_TBL(f1 varchar(1)),varchar.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM VARCHAR_TBL,varchar.sql,SAME,,"[('a',), ('A',), ('1',), ('2',), ('3',), ('',), ('c',)]"
postgresql,postgresql,SELECT c.*    FROM VARCHAR_TBL c    WHERE c.f1 <> 'a',varchar.sql,SAME,,"[('A',), ('1',), ('2',), ('3',), ('',), ('c',)]"
postgresql,postgresql,SELECT c.*    FROM VARCHAR_TBL c    WHERE c.f1 = 'a',varchar.sql,SAME,,"[('a',)]"
postgresql,postgresql,SELECT c.*    FROM VARCHAR_TBL c    WHERE c.f1 < 'a',varchar.sql,SAME,,"[('A',), ('1',), ('2',), ('3',), ('',)]"
postgresql,postgresql,SELECT c.*    FROM VARCHAR_TBL c    WHERE c.f1 <= 'a',varchar.sql,SAME,,"[('a',), ('A',), ('1',), ('2',), ('3',), ('',)]"
postgresql,postgresql,SELECT c.*    FROM VARCHAR_TBL c    WHERE c.f1 > 'a',varchar.sql,SAME,,"[('c',)]"
postgresql,postgresql,SELECT c.*    FROM VARCHAR_TBL c    WHERE c.f1 >= 'a',varchar.sql,SAME,,"[('a',), ('c',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('abcd  ', 'varchar(4)')",varchar.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('abcde', 'varchar(4)')",varchar.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('abcde', 'varchar(4)')",varchar.sql,SAME,,"[('value too long for type character varying(4)', None, None, '22001')]"
postgresql,postgresql,"CREATE TEMPORARY TABLE empsalary (     depname varchar,     empno bigint,     salary int,     enroll_date date )",window.sql,SAME,,[]
postgresql,postgresql,"SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname) FROM empsalary ORDER BY depname, salary",window.sql,SAME,,"[('develop', 7, 4200, 25100), ('develop', 9, 4500, 25100), ('develop', 11, 5200, 25100), ('develop', 10, 5200, 25100), ('develop', 8, 6000, 25100), ('personnel', 5, 3500, 7400), ('personnel', 2, 3900, 7400), ('sales', 3, 4800, 14600), ('sales', 4, 4800, 14600), ('sales', 1, 5000, 14600)]"
postgresql,postgresql,"SELECT depname, empno, salary, rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary",window.sql,SAME,,"[('develop', 7, 4200, 1), ('develop', 9, 4500, 2), ('develop', 11, 5200, 3), ('develop', 10, 5200, 3), ('develop', 8, 6000, 5), ('personnel', 5, 3500, 1), ('personnel', 2, 3900, 2), ('sales', 3, 4800, 1), ('sales', 4, 4800, 1), ('sales', 1, 5000, 3)]"
postgresql,postgresql,"SELECT depname, empno, salary, sum(salary) OVER w FROM empsalary WINDOW w AS (PARTITION BY depname)",window.sql,SAME,,"[('develop', 11, 5200, 25100), ('develop', 7, 4200, 25100), ('develop', 9, 4500, 25100), ('develop', 8, 6000, 25100), ('develop', 10, 5200, 25100), ('personnel', 5, 3500, 7400), ('personnel', 2, 3900, 7400), ('sales', 3, 4800, 14600), ('sales', 1, 5000, 14600), ('sales', 4, 4800, 14600)]"
postgresql,postgresql,"SELECT depname, empno, salary, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) ORDER BY rank() OVER w",window.sql,SAME,,"[('develop', 7, 4200, 1), ('personnel', 5, 3500, 1), ('sales', 3, 4800, 1), ('sales', 4, 4800, 1), ('personnel', 2, 3900, 2), ('develop', 9, 4500, 2), ('sales', 1, 5000, 3), ('develop', 11, 5200, 3), ('develop', 10, 5200, 3), ('develop', 8, 6000, 5)]"
postgresql,postgresql,"SELECT sum(salary), 	row_number() OVER (ORDER BY depname), 	sum(sum(salary)) OVER (ORDER BY depname DESC) FROM empsalary GROUP BY depname",window.sql,SAME,,"[(25100, 1, Decimal('47100')), (7400, 2, Decimal('22000')), (14600, 3, Decimal('14600'))]"
postgresql,postgresql,"SELECT sum(salary) OVER w1, count(*) OVER w2 FROM empsalary WINDOW w1 AS (ORDER BY salary), w2 AS (ORDER BY salary)",window.sql,SAME,,"[(3500, 1), (7400, 2), (11600, 3), (16100, 4), (25700, 6), (25700, 6), (30700, 7), (41100, 9), (41100, 9), (47100, 10)]"
postgresql,postgresql,"SELECT sum(salary) OVER w, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary DESC)",window.sql,SAME,,"[(6000, 1), (16400, 2), (16400, 2), (20900, 4), (25100, 5), (3900, 1), (7400, 2), (5000, 1), (14600, 2), (14600, 2)]"
postgresql,postgresql,"SELECT empno, depname, salary, bonus, depadj, MIN(bonus) OVER (ORDER BY empno), MAX(depadj) OVER () FROM( 	SELECT *, 		CASE WHEN enroll_date < '2008-01-01' THEN 2008 - extract(YEAR FROM enroll_date) END * 500 AS bonus, 		CASE WHEN 			AVG(salary) OVER (PARTITION BY depname) < salary 		THEN 200 END AS depadj FROM empsalary )s",window.sql,SAME,,"[(1, 'sales', 5000, Decimal('1000'), 200, Decimal('1000'), 200), (2, 'personnel', 3900, Decimal('1000'), 200, Decimal('1000'), 200), (3, 'sales', 4800, Decimal('500'), None, Decimal('500'), 200), (4, 'sales', 4800, Decimal('500'), None, Decimal('500'), 200), (5, 'personnel', 3500, Decimal('500'), None, Decimal('500'), 200), (7, 'develop', 4200, None, None, Decimal('500'), 200), (8, 'develop', 6000, Decimal('1000'), 200, Decimal('500'), 200), (9, 'develop', 4500, None, None, Decimal('500'), 200), (10, 'develop', 5200, Decimal('500'), 200, Decimal('500'), 200), (11, 'develop', 5200, Decimal('500'), 200, Decimal('500'), 200)]"
postgresql,postgresql,"select x, lag(x, 1) over (order by x), lead(x, 3) over (order by x) from (select x::numeric as x from generate_series(1,10) x)",window.sql,SAME,,"[(Decimal('1'), None, Decimal('4')), (Decimal('2'), Decimal('1'), Decimal('5')), (Decimal('3'), Decimal('2'), Decimal('6')), (Decimal('4'), Decimal('3'), Decimal('7')), (Decimal('5'), Decimal('4'), Decimal('8')), (Decimal('6'), Decimal('5'), Decimal('9')), (Decimal('7'), Decimal('6'), Decimal('10')), (Decimal('8'), Decimal('7'), None), (Decimal('9'), Decimal('8'), None), (Decimal('10'), Decimal('9'), None)]"
postgresql,postgresql,"CREATE TEMP VIEW v_window AS 	SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following) as sum_rows 	FROM generate_series(1, 10) i",window.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v_window,window.sql,SAME,,"[(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 19)]"
postgresql,postgresql,SELECT pg_get_viewdef('v_window'),window.sql,SAME,,"[(' SELECT i,\n    sum(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS sum_rows\n   FROM generate_series(1, 10) i(i);',)]"
postgresql,postgresql,"CREATE OR REPLACE TEMP VIEW v_window AS 	SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following 	exclude current row) as sum_rows FROM generate_series(1, 10) i",window.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v_window,window.sql,SAME,,"[(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18), (10, 9)]"
postgresql,postgresql,SELECT pg_get_viewdef('v_window'),window.sql,SAME,,"[(' SELECT i,\n    sum(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING EXCLUDE CURRENT ROW) AS sum_rows\n   FROM generate_series(1, 10) i(i);',)]"
postgresql,postgresql,"CREATE OR REPLACE TEMP VIEW v_window AS 	SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following 	exclude group) as sum_rows FROM generate_series(1, 10) i",window.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v_window,window.sql,SAME,,"[(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18), (10, 9)]"
postgresql,postgresql,SELECT pg_get_viewdef('v_window'),window.sql,SAME,,"[(' SELECT i,\n    sum(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING EXCLUDE GROUP) AS sum_rows\n   FROM generate_series(1, 10) i(i);',)]"
postgresql,postgresql,"CREATE OR REPLACE TEMP VIEW v_window AS 	SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following 	exclude ties) as sum_rows FROM generate_series(1, 10) i",window.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v_window,window.sql,SAME,,"[(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 19)]"
postgresql,postgresql,SELECT pg_get_viewdef('v_window'),window.sql,SAME,,"[(' SELECT i,\n    sum(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING EXCLUDE TIES) AS sum_rows\n   FROM generate_series(1, 10) i(i);',)]"
postgresql,postgresql,"CREATE OR REPLACE TEMP VIEW v_window AS 	SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following 	exclude no others) as sum_rows FROM generate_series(1, 10) i",window.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v_window,window.sql,SAME,,"[(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 19)]"
postgresql,postgresql,SELECT pg_get_viewdef('v_window'),window.sql,SAME,,"[(' SELECT i,\n    sum(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS sum_rows\n   FROM generate_series(1, 10) i(i);',)]"
postgresql,postgresql,"CREATE OR REPLACE TEMP VIEW v_window AS 	SELECT i, sum(i) over (order by i groups between 1 preceding and 1 following) as sum_rows FROM generate_series(1, 10) i",window.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM v_window,window.sql,SAME,,"[(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 19)]"
postgresql,postgresql,SELECT pg_get_viewdef('v_window'),window.sql,SAME,,"[(' SELECT i,\n    sum(i) OVER (ORDER BY i GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS sum_rows\n   FROM generate_series(1, 10) i(i);',)]"
postgresql,postgresql,DROP VIEW v_window,window.sql,SAME,,[]
postgresql,postgresql,"CREATE TEMP VIEW v_window AS 	SELECT i, min(i) over (order by i range between '1 day' preceding and '10 days' following) as min_i   FROM generate_series(now(), now()+'100 days'::interval, '1 hour') i",window.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_viewdef('v_window'),window.sql,SAME,,"[("" SELECT i,\n    min(i) OVER (ORDER BY i RANGE BETWEEN '1 day'::interval PRECEDING AND '10 days'::interval FOLLOWING) AS min_i\n   FROM generate_series(now(), (now() + '100 days'::interval), '01:00:00'::interval) i(i);"",)]"
postgresql,postgresql,"select sum(salary) over (order by enroll_date range between '1 year'::interval preceding and '1 year'::interval following), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(34900, 5000, datetime.date(2006, 10, 1)), (34900, 6000, datetime.date(2006, 10, 1)), (38400, 3900, datetime.date(2006, 12, 23)), (47100, 4800, datetime.date(2007, 8, 1)), (47100, 5200, datetime.date(2007, 8, 1)), (47100, 4800, datetime.date(2007, 8, 8)), (47100, 5200, datetime.date(2007, 8, 15)), (36100, 3500, datetime.date(2007, 12, 10)), (32200, 4500, datetime.date(2008, 1, 1)), (32200, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select sum(salary) over (order by enroll_date desc range between '1 year'::interval preceding and '1 year'::interval following), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(32200, 4200, datetime.date(2008, 1, 1)), (32200, 4500, datetime.date(2008, 1, 1)), (36100, 3500, datetime.date(2007, 12, 10)), (47100, 5200, datetime.date(2007, 8, 15)), (47100, 4800, datetime.date(2007, 8, 8)), (47100, 4800, datetime.date(2007, 8, 1)), (47100, 5200, datetime.date(2007, 8, 1)), (38400, 3900, datetime.date(2006, 12, 23)), (34900, 5000, datetime.date(2006, 10, 1)), (34900, 6000, datetime.date(2006, 10, 1))]"
postgresql,postgresql,"select sum(salary) over (order by enroll_date desc range between '1 year'::interval following and '1 year'::interval following), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(None, 4200, datetime.date(2008, 1, 1)), (None, 4500, datetime.date(2008, 1, 1)), (None, 3500, datetime.date(2007, 12, 10)), (None, 5200, datetime.date(2007, 8, 15)), (None, 4800, datetime.date(2007, 8, 8)), (None, 4800, datetime.date(2007, 8, 1)), (None, 5200, datetime.date(2007, 8, 1)), (None, 3900, datetime.date(2006, 12, 23)), (None, 5000, datetime.date(2006, 10, 1)), (None, 6000, datetime.date(2006, 10, 1))]"
postgresql,postgresql,"select sum(salary) over (order by enroll_date range between '1 year'::interval preceding and '1 year'::interval following 	exclude current row), salary, enroll_date from empsalary",window.sql,SAME,,"[(29900, 5000, datetime.date(2006, 10, 1)), (28900, 6000, datetime.date(2006, 10, 1)), (34500, 3900, datetime.date(2006, 12, 23)), (42300, 4800, datetime.date(2007, 8, 1)), (41900, 5200, datetime.date(2007, 8, 1)), (42300, 4800, datetime.date(2007, 8, 8)), (41900, 5200, datetime.date(2007, 8, 15)), (32600, 3500, datetime.date(2007, 12, 10)), (27700, 4500, datetime.date(2008, 1, 1)), (28000, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select sum(salary) over (order by enroll_date range between '1 year'::interval preceding and '1 year'::interval following 	exclude group), salary, enroll_date from empsalary",window.sql,SAME,,"[(23900, 5000, datetime.date(2006, 10, 1)), (23900, 6000, datetime.date(2006, 10, 1)), (34500, 3900, datetime.date(2006, 12, 23)), (37100, 4800, datetime.date(2007, 8, 1)), (37100, 5200, datetime.date(2007, 8, 1)), (42300, 4800, datetime.date(2007, 8, 8)), (41900, 5200, datetime.date(2007, 8, 15)), (32600, 3500, datetime.date(2007, 12, 10)), (23500, 4500, datetime.date(2008, 1, 1)), (23500, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select sum(salary) over (order by enroll_date range between '1 year'::interval preceding and '1 year'::interval following 	exclude ties), salary, enroll_date from empsalary",window.sql,SAME,,"[(28900, 5000, datetime.date(2006, 10, 1)), (29900, 6000, datetime.date(2006, 10, 1)), (38400, 3900, datetime.date(2006, 12, 23)), (41900, 4800, datetime.date(2007, 8, 1)), (42300, 5200, datetime.date(2007, 8, 1)), (47100, 4800, datetime.date(2007, 8, 8)), (47100, 5200, datetime.date(2007, 8, 15)), (36100, 3500, datetime.date(2007, 12, 10)), (28000, 4500, datetime.date(2008, 1, 1)), (27700, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select first_value(salary) over(order by salary range between 1000 preceding and 1000 following), 	lead(salary) over(order by salary range between 1000 preceding and 1000 following), 	nth_value(salary, 1) over(order by salary range between 1000 preceding and 1000 following), 	salary from empsalary",window.sql,SAME,,"[(3500, 3900, 3500, 3500), (3500, 4200, 3500, 3900), (3500, 4500, 3500, 4200), (3500, 4800, 3500, 4500), (3900, 4800, 3900, 4800), (3900, 5000, 3900, 4800), (4200, 5200, 4200, 5000), (4200, 5200, 4200, 5200), (4200, 6000, 4200, 5200), (5000, None, 5000, 6000)]"
postgresql,postgresql,"select last_value(salary) over(order by salary range between 1000 preceding and 1000 following), 	lag(salary) over(order by salary range between 1000 preceding and 1000 following), 	salary from empsalary",window.sql,SAME,,"[(4500, None, 3500), (4800, 3500, 3900), (5200, 3900, 4200), (5200, 4200, 4500), (5200, 4500, 4800), (5200, 4800, 4800), (6000, 4800, 5000), (6000, 5000, 5200), (6000, 5200, 5200), (6000, 5200, 6000)]"
postgresql,postgresql,"select first_value(salary) over(order by salary range between 1000 following and 3000 following 	exclude current row), 	lead(salary) over(order by salary range between 1000 following and 3000 following exclude ties), 	nth_value(salary, 1) over(order by salary range between 1000 following and 3000 following 	exclude ties), 	salary from empsalary",window.sql,SAME,,"[(4500, 3900, 4500, 3500), (5000, 4200, 5000, 3900), (5200, 4500, 5200, 4200), (6000, 4800, 6000, 4500), (6000, 4800, 6000, 4800), (6000, 5000, 6000, 4800), (6000, 5200, 6000, 5000), (None, 5200, None, 5200), (None, 6000, None, 5200), (None, None, None, 6000)]"
postgresql,postgresql,"select last_value(salary) over(order by salary range between 1000 following and 3000 following 	exclude group), 	lag(salary) over(order by salary range between 1000 following and 3000 following exclude group), 	salary from empsalary",window.sql,SAME,,"[(6000, None, 3500), (6000, 3500, 3900), (6000, 3900, 4200), (6000, 4200, 4500), (6000, 4500, 4800), (6000, 4800, 4800), (6000, 4800, 5000), (None, 5000, 5200), (None, 5200, 5200), (None, 5200, 6000)]"
postgresql,postgresql,"select first_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following 	exclude ties), 	last_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(5000, 5200, 5000, datetime.date(2006, 10, 1)), (6000, 5200, 6000, datetime.date(2006, 10, 1)), (5000, 3500, 3900, datetime.date(2006, 12, 23)), (5000, 4200, 4800, datetime.date(2007, 8, 1)), (5000, 4200, 5200, datetime.date(2007, 8, 1)), (5000, 4200, 4800, datetime.date(2007, 8, 8)), (5000, 4200, 5200, datetime.date(2007, 8, 15)), (5000, 4200, 3500, datetime.date(2007, 12, 10)), (5000, 4200, 4500, datetime.date(2008, 1, 1)), (5000, 4200, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select first_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following 	exclude ties), 	last_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following 	exclude ties), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(5000, 5200, 5000, datetime.date(2006, 10, 1)), (6000, 5200, 6000, datetime.date(2006, 10, 1)), (5000, 3500, 3900, datetime.date(2006, 12, 23)), (5000, 4200, 4800, datetime.date(2007, 8, 1)), (5000, 4200, 5200, datetime.date(2007, 8, 1)), (5000, 4200, 4800, datetime.date(2007, 8, 8)), (5000, 4200, 5200, datetime.date(2007, 8, 15)), (5000, 4200, 3500, datetime.date(2007, 12, 10)), (5000, 4500, 4500, datetime.date(2008, 1, 1)), (5000, 4200, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select first_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following 	exclude group), 	last_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following 	exclude group), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(3900, 5200, 5000, datetime.date(2006, 10, 1)), (3900, 5200, 6000, datetime.date(2006, 10, 1)), (5000, 3500, 3900, datetime.date(2006, 12, 23)), (5000, 4200, 4800, datetime.date(2007, 8, 1)), (5000, 4200, 5200, datetime.date(2007, 8, 1)), (5000, 4200, 4800, datetime.date(2007, 8, 8)), (5000, 4200, 5200, datetime.date(2007, 8, 15)), (5000, 4200, 3500, datetime.date(2007, 12, 10)), (5000, 3500, 4500, datetime.date(2008, 1, 1)), (5000, 3500, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select first_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following 	exclude current row), 	last_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following 	exclude current row), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(6000, 5200, 5000, datetime.date(2006, 10, 1)), (5000, 5200, 6000, datetime.date(2006, 10, 1)), (5000, 3500, 3900, datetime.date(2006, 12, 23)), (5000, 4200, 4800, datetime.date(2007, 8, 1)), (5000, 4200, 5200, datetime.date(2007, 8, 1)), (5000, 4200, 4800, datetime.date(2007, 8, 8)), (5000, 4200, 5200, datetime.date(2007, 8, 15)), (5000, 4200, 3500, datetime.date(2007, 12, 10)), (5000, 4200, 4500, datetime.date(2008, 1, 1)), (5000, 4500, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select x, y,        first_value(y) over w,        last_value(y) over w from   (select x, x as y from generate_series(1,5) as x    union all select null, 42    union all select null, 43) ss window w as   (order by x asc nulls first range between 2 preceding and 2 following)",window.sql,SAME,,"[(None, 42, 42, 43), (None, 43, 42, 43), (1, 1, 1, 3), (2, 2, 1, 4), (3, 3, 1, 5), (4, 4, 2, 5), (5, 5, 3, 5)]"
postgresql,postgresql,"select x, y,        first_value(y) over w,        last_value(y) over w from   (select x, x as y from generate_series(1,5) as x    union all select null, 42    union all select null, 43) ss window w as   (order by x asc nulls last range between 2 preceding and 2 following)",window.sql,SAME,,"[(1, 1, 1, 3), (2, 2, 1, 4), (3, 3, 1, 5), (4, 4, 2, 5), (5, 5, 3, 5), (None, 42, 42, 43), (None, 43, 42, 43)]"
postgresql,postgresql,"select x, y,        first_value(y) over w,        last_value(y) over w from   (select x, x as y from generate_series(1,5) as x    union all select null, 42    union all select null, 43) ss window w as   (order by x desc nulls first range between 2 preceding and 2 following)",window.sql,SAME,,"[(None, 43, 43, 42), (None, 42, 43, 42), (5, 5, 5, 3), (4, 4, 5, 2), (3, 3, 5, 1), (2, 2, 4, 1), (1, 1, 3, 1)]"
postgresql,postgresql,"select x, y,        first_value(y) over w,        last_value(y) over w from   (select x, x as y from generate_series(1,5) as x    union all select null, 42    union all select null, 43) ss window w as   (order by x desc nulls last range between 2 preceding and 2 following)",window.sql,SAME,,"[(5, 5, 5, 3), (4, 4, 5, 2), (3, 3, 5, 1), (2, 2, 4, 1), (1, 1, 3, 1), (None, 42, 42, 43), (None, 43, 42, 43)]"
postgresql,postgresql,END,window.sql,SAME,,[]
postgresql,postgresql,END,window.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION unbounded(x int) RETURNS int LANGUAGE SQL IMMUTABLE RETURN x,window.sql,SAME,,[]
postgresql,postgresql,DROP FUNCTION unbounded,window.sql,SAME,,[]
postgresql,postgresql,"select x, last_value(x) over (order by x::smallint range between current row and 2147450884 following) from generate_series(32764, 32766) x",window.sql,SAME,,"[(32764, 32766), (32765, 32766), (32766, 32766)]"
postgresql,postgresql,"select x, last_value(x) over (order by x::smallint desc range between current row and 2147450885 following) from generate_series(-32766, -32764) x",window.sql,SAME,,"[(-32764, -32766), (-32765, -32766), (-32766, -32766)]"
postgresql,postgresql,"select x, last_value(x) over (order by x range between current row and 4 following) from generate_series(2147483644, 2147483646) x",window.sql,SAME,,"[(2147483644, 2147483646), (2147483645, 2147483646), (2147483646, 2147483646)]"
postgresql,postgresql,"select x, last_value(x) over (order by x desc range between current row and 5 following) from generate_series(-2147483646, -2147483644) x",window.sql,SAME,,"[(-2147483644, -2147483646), (-2147483645, -2147483646), (-2147483646, -2147483646)]"
postgresql,postgresql,"select x, last_value(x) over (order by x range between current row and 4 following) from generate_series(9223372036854775804, 9223372036854775806) x",window.sql,SAME,,"[(9223372036854775804, 9223372036854775806), (9223372036854775805, 9223372036854775806), (9223372036854775806, 9223372036854775806)]"
postgresql,postgresql,"select x, last_value(x) over (order by x desc range between current row and 5 following) from generate_series(-9223372036854775806, -9223372036854775804) x",window.sql,SAME,,"[(-9223372036854775804, -9223372036854775806), (-9223372036854775805, -9223372036854775806), (-9223372036854775806, -9223372036854775806)]"
postgresql,postgresql,"create temp table numerics(     id int,     f_float4 float4,     f_float8 float8,     f_numeric numeric )",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between              1 preceding and 1 following)",window.sql,SAME,,"[(0, -inf, 0, 0), (1, -3.0, 1, 1), (2, -1.0, 2, 3), (3, 0.0, 2, 3), (4, 1.1, 4, 6), (5, 1.12, 4, 6), (6, 2.0, 4, 6), (7, 100.0, 7, 7), (8, inf, 8, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between              1 preceding and 1.1::float4 following)",window.sql,SAME,,"[(0, -inf, 0, 0), (1, -3.0, 1, 1), (2, -1.0, 2, 3), (3, 0.0, 2, 4), (4, 1.1, 4, 6), (5, 1.12, 4, 6), (6, 2.0, 4, 6), (7, 100.0, 7, 7), (8, inf, 8, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between              'inf' preceding and 'inf' following)",window.sql,SAME,,"[(0, -inf, 0, 8), (1, -3.0, 0, 8), (2, -1.0, 0, 8), (3, 0.0, 0, 8), (4, 1.1, 0, 8), (5, 1.12, 0, 8), (6, 2.0, 0, 8), (7, 100.0, 0, 8), (8, inf, 0, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between              'inf' preceding and 'inf' preceding)",window.sql,SAME,,"[(0, -inf, 0, 0), (1, -3.0, 0, 0), (2, -1.0, 0, 0), (3, 0.0, 0, 0), (4, 1.1, 0, 0), (5, 1.12, 0, 0), (6, 2.0, 0, 0), (7, 100.0, 0, 0), (8, inf, 0, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between              'inf' following and 'inf' following)",window.sql,SAME,,"[(0, -inf, 0, 8), (1, -3.0, 8, 8), (2, -1.0, 8, 8), (3, 0.0, 8, 8), (4, 1.1, 8, 8), (5, 1.12, 8, 8), (6, 2.0, 8, 8), (7, 100.0, 8, 8), (8, inf, 8, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between              1 preceding and 1 following)",window.sql,SAME,,"[(0, -inf, 0, 0), (1, -3.0, 1, 1), (2, -1.0, 2, 3), (3, 0.0, 2, 3), (4, 1.1, 4, 6), (5, 1.12, 4, 6), (6, 2.0, 4, 6), (7, 100.0, 7, 7), (8, inf, 8, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between              1 preceding and 1.1::float8 following)",window.sql,SAME,,"[(0, -inf, 0, 0), (1, -3.0, 1, 1), (2, -1.0, 2, 3), (3, 0.0, 2, 4), (4, 1.1, 4, 6), (5, 1.12, 4, 6), (6, 2.0, 4, 6), (7, 100.0, 7, 7), (8, inf, 8, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between              'inf' preceding and 'inf' following)",window.sql,SAME,,"[(0, -inf, 0, 8), (1, -3.0, 0, 8), (2, -1.0, 0, 8), (3, 0.0, 0, 8), (4, 1.1, 0, 8), (5, 1.12, 0, 8), (6, 2.0, 0, 8), (7, 100.0, 0, 8), (8, inf, 0, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between              'inf' preceding and 'inf' preceding)",window.sql,SAME,,"[(0, -inf, 0, 0), (1, -3.0, 0, 0), (2, -1.0, 0, 0), (3, 0.0, 0, 0), (4, 1.1, 0, 0), (5, 1.12, 0, 0), (6, 2.0, 0, 0), (7, 100.0, 0, 0), (8, inf, 0, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between              'inf' following and 'inf' following)",window.sql,SAME,,"[(0, -inf, 0, 8), (1, -3.0, 8, 8), (2, -1.0, 8, 8), (3, 0.0, 8, 8), (4, 1.1, 8, 8), (5, 1.12, 8, 8), (6, 2.0, 8, 8), (7, 100.0, 8, 8), (8, inf, 8, 8), (9, nan, 9, 9)]"
postgresql,postgresql,"select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between              1 preceding and 1 following)",window.sql,SAME,,"[(0, Decimal('-Infinity'), 0, 0), (1, Decimal('-3'), 1, 1), (2, Decimal('-1'), 2, 3), (3, Decimal('0'), 2, 3), (4, Decimal('1.1'), 4, 6), (5, Decimal('1.12'), 4, 6), (6, Decimal('2'), 4, 6), (7, Decimal('100'), 7, 7), (8, Decimal('Infinity'), 8, 8), (9, Decimal('NaN'), 9, 9)]"
postgresql,postgresql,"select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between              1 preceding and 1.1::numeric following)",window.sql,SAME,,"[(0, Decimal('-Infinity'), 0, 0), (1, Decimal('-3'), 1, 1), (2, Decimal('-1'), 2, 3), (3, Decimal('0'), 2, 4), (4, Decimal('1.1'), 4, 6), (5, Decimal('1.12'), 4, 6), (6, Decimal('2'), 4, 6), (7, Decimal('100'), 7, 7), (8, Decimal('Infinity'), 8, 8), (9, Decimal('NaN'), 9, 9)]"
postgresql,postgresql,"select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between              'inf' preceding and 'inf' following)",window.sql,SAME,,"[(0, Decimal('-Infinity'), 0, 8), (1, Decimal('-3'), 0, 8), (2, Decimal('-1'), 0, 8), (3, Decimal('0'), 0, 8), (4, Decimal('1.1'), 0, 8), (5, Decimal('1.12'), 0, 8), (6, Decimal('2'), 0, 8), (7, Decimal('100'), 0, 8), (8, Decimal('Infinity'), 0, 8), (9, Decimal('NaN'), 9, 9)]"
postgresql,postgresql,"select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between              'inf' preceding and 'inf' preceding)",window.sql,SAME,,"[(0, Decimal('-Infinity'), 0, 0), (1, Decimal('-3'), 0, 0), (2, Decimal('-1'), 0, 0), (3, Decimal('0'), 0, 0), (4, Decimal('1.1'), 0, 0), (5, Decimal('1.12'), 0, 0), (6, Decimal('2'), 0, 0), (7, Decimal('100'), 0, 0), (8, Decimal('Infinity'), 0, 8), (9, Decimal('NaN'), 9, 9)]"
postgresql,postgresql,"select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between              'inf' following and 'inf' following)",window.sql,SAME,,"[(0, Decimal('-Infinity'), 0, 8), (1, Decimal('-3'), 8, 8), (2, Decimal('-1'), 8, 8), (3, Decimal('0'), 8, 8), (4, Decimal('1.1'), 8, 8), (5, Decimal('1.12'), 8, 8), (6, Decimal('2'), 8, 8), (7, Decimal('100'), 8, 8), (8, Decimal('Infinity'), 8, 8), (9, Decimal('NaN'), 9, 9)]"
postgresql,postgresql,"create temp table datetimes(     id int,     f_time time,     f_timetz timetz,     f_interval interval,     f_timestamptz timestamptz,     f_timestamp timestamp )",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time range between              '70 min'::interval preceding and '2 hours'::interval following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time desc range between              '70 min' preceding and '2 hours' following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time desc range between              '-70 min' preceding and '2 hours' following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz range between              '70 min'::interval preceding and '2 hours'::interval following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz desc range between              '70 min' preceding and '2 hours' following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz desc range between              '70 min' preceding and '-2 hours' following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval range between              '1 year'::interval preceding and '1 year'::interval following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval desc range between              '1 year' preceding and '1 year' following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval desc range between              '-1 year' preceding and '1 year' following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz range between              '1 year'::interval preceding and '1 year'::interval following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz desc range between              '1 year' preceding and '1 year' following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz desc range between              '1 year' preceding and '-1 year' following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp range between              '1 year'::interval preceding and '1 year'::interval following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp desc range between              '1 year' preceding and '1 year' following)",window.sql,SAME,,[]
postgresql,postgresql,"select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp desc range between              '-1 year' preceding and '1 year' following)",window.sql,SAME,,[]
postgresql,postgresql,"select first_value(salary) over(order by enroll_date groups between 1 preceding and 1 following), 	lead(salary) over(order by enroll_date groups between 1 preceding and 1 following), 	nth_value(salary, 1) over(order by enroll_date groups between 1 preceding and 1 following), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(5000, 6000, 5000, 5000, datetime.date(2006, 10, 1)), (5000, 3900, 5000, 6000, datetime.date(2006, 10, 1)), (5000, 4800, 5000, 3900, datetime.date(2006, 12, 23)), (3900, 5200, 3900, 4800, datetime.date(2007, 8, 1)), (3900, 4800, 3900, 5200, datetime.date(2007, 8, 1)), (4800, 5200, 4800, 4800, datetime.date(2007, 8, 8)), (4800, 3500, 4800, 5200, datetime.date(2007, 8, 15)), (5200, 4500, 5200, 3500, datetime.date(2007, 12, 10)), (3500, 4200, 3500, 4500, datetime.date(2008, 1, 1)), (3500, None, 3500, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select last_value(salary) over(order by enroll_date groups between 1 preceding and 1 following), 	lag(salary) over(order by enroll_date groups between 1 preceding and 1 following), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(3900, None, 5000, datetime.date(2006, 10, 1)), (3900, 5000, 6000, datetime.date(2006, 10, 1)), (5200, 6000, 3900, datetime.date(2006, 12, 23)), (4800, 3900, 4800, datetime.date(2007, 8, 1)), (4800, 4800, 5200, datetime.date(2007, 8, 1)), (5200, 5200, 4800, datetime.date(2007, 8, 8)), (3500, 4800, 5200, datetime.date(2007, 8, 15)), (4200, 5200, 3500, datetime.date(2007, 12, 10)), (4200, 3500, 4500, datetime.date(2008, 1, 1)), (4200, 4500, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select first_value(salary) over(order by enroll_date groups between 1 following and 3 following 	exclude current row), 	lead(salary) over(order by enroll_date groups between 1 following and 3 following exclude ties), 	nth_value(salary, 1) over(order by enroll_date groups between 1 following and 3 following 	exclude ties), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(3900, 6000, 3900, 5000, datetime.date(2006, 10, 1)), (3900, 3900, 3900, 6000, datetime.date(2006, 10, 1)), (4800, 4800, 4800, 3900, datetime.date(2006, 12, 23)), (4800, 5200, 4800, 4800, datetime.date(2007, 8, 1)), (4800, 4800, 4800, 5200, datetime.date(2007, 8, 1)), (5200, 5200, 5200, 4800, datetime.date(2007, 8, 8)), (3500, 3500, 3500, 5200, datetime.date(2007, 8, 15)), (4500, 4500, 4500, 3500, datetime.date(2007, 12, 10)), (None, 4200, None, 4500, datetime.date(2008, 1, 1)), (None, None, None, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"select last_value(salary) over(order by enroll_date groups between 1 following and 3 following 	exclude group), 	lag(salary) over(order by enroll_date groups between 1 following and 3 following exclude group), 	salary, enroll_date from empsalary",window.sql,SAME,,"[(4800, None, 5000, datetime.date(2006, 10, 1)), (4800, 5000, 6000, datetime.date(2006, 10, 1)), (5200, 6000, 3900, datetime.date(2006, 12, 23)), (3500, 3900, 4800, datetime.date(2007, 8, 1)), (3500, 4800, 5200, datetime.date(2007, 8, 1)), (4200, 5200, 4800, datetime.date(2007, 8, 8)), (4200, 4800, 5200, datetime.date(2007, 8, 15)), (4200, 5200, 3500, datetime.date(2007, 12, 10)), (None, 3500, 4500, datetime.date(2008, 1, 1)), (None, 4500, 4200, datetime.date(2008, 1, 1))]"
postgresql,postgresql,"WITH cte (x) AS (         SELECT * FROM generate_series(1, 35, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following)",window.sql,SAME,,"[(1, 4), (3, 9), (5, 15), (7, 21), (9, 27), (11, 33), (13, 39), (15, 45), (17, 51), (19, 57), (21, 63), (23, 69), (25, 75), (27, 81), (29, 87), (31, 93), (33, 99), (35, 68)]"
postgresql,postgresql,"WITH cte (x) AS (         SELECT * FROM generate_series(1, 35, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)",window.sql,SAME,,"[(1, 1), (3, 3), (5, 5), (7, 7), (9, 9), (11, 11), (13, 13), (15, 15), (17, 17), (19, 19), (21, 21), (23, 23), (25, 25), (27, 27), (29, 29), (31, 31), (33, 33), (35, 35)]"
postgresql,postgresql,"WITH cte (x) AS (         SELECT * FROM generate_series(1, 35, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x groups between 1 preceding and 1 following)",window.sql,SAME,,"[(1, 4), (3, 9), (5, 15), (7, 21), (9, 27), (11, 33), (13, 39), (15, 45), (17, 51), (19, 57), (21, 63), (23, 69), (25, 75), (27, 81), (29, 87), (31, 93), (33, 99), (35, 68)]"
postgresql,postgresql,"WITH cte (x) AS (         select 1 union all select 1 union all select 1 union all         SELECT * FROM generate_series(5, 49, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following)",window.sql,SAME,,"[(1, 2), (1, 3), (1, 7), (5, 13), (7, 21), (9, 27), (11, 33), (13, 39), (15, 45), (17, 51), (19, 57), (21, 63), (23, 69), (25, 75), (27, 81), (29, 87), (31, 93), (33, 99), (35, 105), (37, 111), (39, 117), (41, 123), (43, 129), (45, 135), (47, 141), (49, 96)]"
postgresql,postgresql,"WITH cte (x) AS (         select 1 union all select 1 union all select 1 union all         SELECT * FROM generate_series(5, 49, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)",window.sql,SAME,,"[(1, 3), (1, 3), (1, 3), (5, 5), (7, 7), (9, 9), (11, 11), (13, 13), (15, 15), (17, 17), (19, 19), (21, 21), (23, 23), (25, 25), (27, 27), (29, 29), (31, 31), (33, 33), (35, 35), (37, 37), (39, 39), (41, 41), (43, 43), (45, 45), (47, 47), (49, 49)]"
postgresql,postgresql,"WITH cte (x) AS (         select 1 union all select 1 union all select 1 union all         SELECT * FROM generate_series(5, 49, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x groups between 1 preceding and 1 following)",window.sql,SAME,,"[(1, 8), (1, 8), (1, 8), (5, 15), (7, 21), (9, 27), (11, 33), (13, 39), (15, 45), (17, 51), (19, 57), (21, 63), (23, 69), (25, 75), (27, 81), (29, 87), (31, 93), (33, 99), (35, 105), (37, 111), (39, 117), (41, 123), (43, 129), (45, 135), (47, 141), (49, 96)]"
postgresql,postgresql,"create temp table t1 (f1 int, f2 int8)",window.sql,SAME,,[]
postgresql,postgresql,"explain (costs off) select f1, sum(f1) over (partition by f1 order by f2                          range between 1 preceding and 1 following) from t1 where f1 = f2",window.sql,SAME,,"[('WindowAgg',), ('  ->  Sort',), ('        Sort Key: f1',), ('        ->  Seq Scan on t1',), ('              Filter: (f1 = f2)',)]"
postgresql,postgresql,"select f1, sum(f1) over (partition by f1 order by f2                          range between 1 preceding and 1 following) from t1 where f1 = f2",window.sql,SAME,,"[(1, 1), (2, 2)]"
postgresql,postgresql,"select f1, sum(f1) over (partition by f1, f1 order by f2                          range between 2 preceding and 1 preceding) from t1 where f1 = f2",window.sql,SAME,,"[(1, None), (2, None)]"
postgresql,postgresql,"select f1, sum(f1) over (partition by f1, f2 order by f2                          range between 1 following and 2 following) from t1 where f1 = f2",window.sql,SAME,,"[(1, None), (2, None)]"
postgresql,postgresql,"explain (costs off) select f1, sum(f1) over (partition by f1 order by f2                          groups between 1 preceding and 1 following) from t1 where f1 = f2",window.sql,SAME,,"[('WindowAgg',), ('  ->  Sort',), ('        Sort Key: f1',), ('        ->  Seq Scan on t1',), ('              Filter: (f1 = f2)',)]"
postgresql,postgresql,"select f1, sum(f1) over (partition by f1 order by f2                          groups between 1 preceding and 1 following) from t1 where f1 = f2",window.sql,SAME,,"[(1, 1), (2, 2)]"
postgresql,postgresql,"select f1, sum(f1) over (partition by f1, f1 order by f2                          groups between 2 preceding and 1 preceding) from t1 where f1 = f2",window.sql,SAME,,"[(1, None), (2, None)]"
postgresql,postgresql,"select f1, sum(f1) over (partition by f1, f2 order by f2                          groups between 1 following and 2 following) from t1 where f1 = f2",window.sql,SAME,,"[(1, None), (2, None)]"
postgresql,postgresql,SELECT rank() OVER (ORDER BY length('abc')),window.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT sum(salary), row_number() OVER (ORDER BY depname), sum(     sum(salary) FILTER (WHERE enroll_date > '2007-01-01') ) FILTER (WHERE depname <> 'sales') OVER (ORDER BY depname DESC) AS ""filtered_sum"",     depname FROM empsalary GROUP BY depname",window.sql,SAME,,"[(25100, 1, Decimal('22600'), 'develop'), (7400, 2, Decimal('3500'), 'personnel'), (14600, 3, None, 'sales')]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT     empno,     depname,     row_number() OVER (PARTITION BY depname ORDER BY enroll_date) rn,     rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN                  UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) rnk,     dense_rank() OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                        CURRENT ROW AND CURRENT ROW) drnk,     ntile(10) OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                     CURRENT ROW AND UNBOUNDED FOLLOWING) nt,     percent_rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN                          CURRENT ROW AND UNBOUNDED FOLLOWING) pr,     cume_dist() OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                       CURRENT ROW AND UNBOUNDED FOLLOWING) cd FROM empsalary",window.sql,SAME,,"[('WindowAgg',), ('  ->  Sort',), ('        Sort Key: depname, enroll_date',), ('        ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF, VERBOSE) SELECT     empno,     depname,     row_number() OVER (PARTITION BY depname ORDER BY enroll_date) rn,     rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN                  UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) rnk,     count(*) OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                    CURRENT ROW AND CURRENT ROW) cnt FROM empsalary",window.sql,SAME,,"[('WindowAgg',), ('  Output: empno, depname, (row_number() OVER (?)), (rank() OVER (?)), count(*) OVER (?), enroll_date',), ('  ->  WindowAgg',), ('        Output: depname, enroll_date, empno, row_number() OVER (?), rank() OVER (?)',), ('        ->  Sort',), ('              Output: depname, enroll_date, empno',), ('              Sort Key: empsalary.depname, empsalary.enroll_date',), ('              ->  Seq Scan on pg_temp.empsalary',), ('                    Output: depname, enroll_date, empno',)]"
postgresql,postgresql,"SELECT     empno,     depname,     row_number() OVER (PARTITION BY depname ORDER BY enroll_date) rn,     rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN                  UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) rnk,     count(*) OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN                    CURRENT ROW AND CURRENT ROW) cnt FROM empsalary",window.sql,SAME,,"[(8, 'develop', 1, 1, 1), (10, 'develop', 2, 2, 1), (11, 'develop', 3, 3, 1), (9, 'develop', 4, 4, 2), (7, 'develop', 5, 4, 2), (2, 'personnel', 1, 1, 1), (5, 'personnel', 2, 2, 1), (1, 'sales', 1, 1, 1), (3, 'sales', 2, 2, 1), (4, 'sales', 3, 3, 1)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT depname,           sum(salary) OVER (PARTITION BY depname) depsalary,           min(salary) OVER (PARTITION BY depname || 'A', depname) depminsalary    FROM empsalary) emp WHERE depname = 'sales'",window.sql,SAME,,"[('Subquery Scan on emp',), ('  ->  WindowAgg',), ('        ->  WindowAgg',), ('              ->  Sort',), (""                    Sort Key: (((empsalary.depname)::text || 'A'::text))"",), ('                    ->  Seq Scan on empsalary',), (""                          Filter: ((depname)::text = 'sales'::text)"",)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT depname,           sum(salary) OVER (PARTITION BY enroll_date) enroll_salary,           min(salary) OVER (PARTITION BY depname) depminsalary    FROM empsalary) emp WHERE depname = 'sales'",window.sql,SAME,,"[('Subquery Scan on emp',), (""  Filter: ((emp.depname)::text = 'sales'::text)"",), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.enroll_date',), ('              ->  WindowAgg',), ('                    ->  Sort',), ('                          Sort Key: empsalary.depname',), ('                          ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           row_number() OVER (ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3",window.sql,SAME,,"[('WindowAgg',), ('  Run Condition: (row_number() OVER (?) < 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.empno',), ('        ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT empno,           row_number() OVER (ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3",window.sql,SAME,,"[(1, 1), (2, 2)]"
postgresql,postgresql,"SELECT * FROM   (SELECT empno,           row_number() OVER (ORDER BY empno) rn    FROM empsalary) emp WHERE 3 > rn",window.sql,SAME,,"[(1, 1), (2, 2)]"
postgresql,postgresql,"SELECT * FROM   (SELECT empno,           row_number() OVER (ORDER BY empno) rn    FROM empsalary) emp WHERE 2 >= rn",window.sql,SAME,,"[(1, 1), (2, 2)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           rank() OVER (ORDER BY salary DESC) r    FROM empsalary) emp WHERE r <= 3",window.sql,SAME,,"[('WindowAgg',), ('  Run Condition: (rank() OVER (?) <= 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.salary DESC',), ('        ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT empno,           salary,           rank() OVER (ORDER BY salary DESC) r    FROM empsalary) emp WHERE r <= 3",window.sql,SAME,,"[(8, 6000, 1), (10, 5200, 2), (11, 5200, 2)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           dense_rank() OVER (ORDER BY salary DESC) dr    FROM empsalary) emp WHERE dr = 1",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: (emp.dr = 1)',), ('  ->  WindowAgg',), ('        Run Condition: (dense_rank() OVER (?) <= 1)',), ('        ->  Sort',), ('              Sort Key: empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT empno,           salary,           dense_rank() OVER (ORDER BY salary DESC) dr    FROM empsalary) emp WHERE dr = 1",window.sql,SAME,,"[(8, 6000, 1)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3",window.sql,SAME,,"[('WindowAgg',), ('  Run Condition: (count(*) OVER (?) <= 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.salary DESC',), ('        ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3",window.sql,SAME,,"[(8, 6000, 1), (10, 5200, 3), (11, 5200, 3)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(empno) OVER (ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: (emp.c <= 3)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT empno,           salary,           count(empno) OVER (ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3",window.sql,SAME,,"[(8, 6000, 1), (10, 5200, 3), (11, 5200, 3)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) c    FROM empsalary) emp WHERE c >= 3",window.sql,SAME,,"[('WindowAgg',), ('  Run Condition: (count(*) OVER (?) >= 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.salary DESC',), ('        ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER () c    FROM empsalary) emp WHERE 11 <= c",window.sql,SAME,,"[('WindowAgg',), ('  Run Condition: (11 <= count(*) OVER (?))',), ('  ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC) c,           dense_rank() OVER (ORDER BY salary DESC) dr    FROM empsalary) emp WHERE dr = 1",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: (emp.dr = 1)',), ('  ->  WindowAgg',), ('        Run Condition: (dense_rank() OVER (?) <= 1)',), ('        ->  Sort',), ('              Sort Key: empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           depname,           row_number() OVER (PARTITION BY depname ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3",window.sql,SAME,,"[('WindowAgg',), ('  Run Condition: (row_number() OVER (?) < 3)',), ('  ->  Sort',), ('        Sort Key: empsalary.depname, empsalary.empno',), ('        ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT empno,           depname,           row_number() OVER (PARTITION BY depname ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3",window.sql,SAME,,"[(7, 'develop', 1), (8, 'develop', 2), (2, 'personnel', 1), (5, 'personnel', 2), (1, 'sales', 1), (3, 'sales', 2)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT empno, depname FROM   (SELECT empno,           depname,           row_number() OVER (PARTITION BY depname ORDER BY empno) rn    FROM empsalary) emp WHERE rn < 3",window.sql,SAME,,"[('Subquery Scan on emp',), ('  ->  WindowAgg',), ('        Run Condition: (row_number() OVER (?) < 3)',), ('        ->  Sort',), ('              Sort Key: empsalary.depname, empsalary.empno',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           depname,           salary,           count(empno) OVER (PARTITION BY depname ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: (emp.c <= 3)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.depname, empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT empno,           depname,           salary,           count(empno) OVER (PARTITION BY depname ORDER BY salary DESC) c    FROM empsalary) emp WHERE c <= 3",window.sql,SAME,,"[(8, 'develop', 6000, 1), (10, 'develop', 5200, 3), (11, 'develop', 5200, 3), (2, 'personnel', 3900, 1), (5, 'personnel', 3500, 2), (1, 'sales', 5000, 1), (4, 'sales', 4800, 3), (3, 'sales', 4800, 3)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           depname,           salary,           count(empno) OVER () c    FROM empsalary) emp WHERE c = 1",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: (emp.c = 1)',), ('  ->  WindowAgg',), ('        ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT *,           count(salary) OVER (PARTITION BY depname || '') c1,            row_number() OVER (PARTITION BY depname) rn,            count(*) OVER (PARTITION BY depname) c2,            count(*) OVER (PARTITION BY '' || depname) c3,            ntile(2) OVER (PARTITION BY depname) nt     FROM empsalary ) e WHERE rn <= 1 AND c1 <= 3 AND nt < 2",window.sql,SAME,,"[('Subquery Scan on e',), ('  Filter: (e.c1 <= 3)',), ('  ->  WindowAgg',), ('        Filter: (((row_number() OVER (?)) <= 1) AND ((ntile(2) OVER (?)) < 2))',), ('        ->  Sort',), (""              Sort Key: (((empsalary.depname)::text || ''::text))"",), ('              ->  WindowAgg',), ('                    Run Condition: ((row_number() OVER (?) <= 1) AND (ntile(2) OVER (?) < 2))',), ('                    ->  Sort',), ('                          Sort Key: empsalary.depname',), ('                          ->  WindowAgg',), ('                                ->  Sort',), (""                                      Sort Key: ((''::text || (empsalary.depname)::text))"",), ('                                      ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT *,           count(salary) OVER (PARTITION BY depname || '') c1,            row_number() OVER (PARTITION BY depname) rn,            count(*) OVER (PARTITION BY depname) c2,            count(*) OVER (PARTITION BY '' || depname) c3,            ntile(2) OVER (PARTITION BY depname) nt     FROM empsalary ) e WHERE rn <= 1 AND c1 <= 3 AND nt < 2",window.sql,SAME,,"[('personnel', 5, 3500, datetime.date(2007, 12, 10), 2, 1, 2, 2, 1), ('sales', 3, 4800, datetime.date(2007, 8, 1), 3, 1, 3, 3, 1)]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT 1 FROM   (SELECT ntile(e2.salary) OVER (PARTITION BY e1.depname) AS c    FROM empsalary e1 LEFT JOIN empsalary e2 ON TRUE    WHERE e1.empno = e2.empno) s WHERE s.c = 1,window.sql,SAME,,"[('Subquery Scan on s',), ('  Filter: (s.c = 1)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: e1.depname',), ('              ->  Merge Join',), ('                    Merge Cond: (e1.empno = e2.empno)',), ('                    ->  Sort',), ('                          Sort Key: e1.empno',), ('                          ->  Seq Scan on empsalary e1',), ('                    ->  Sort',), ('                          Sort Key: e2.empno',), ('                          ->  Seq Scan on empsalary e2',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) c    FROM empsalary) emp WHERE c <= 3",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: (emp.c <= 3)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.salary DESC',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(*) OVER (ORDER BY salary) c    FROM empsalary) emp WHERE 3 <= c",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: (3 <= emp.c)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.salary',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count(random()) OVER (ORDER BY empno DESC) c    FROM empsalary) emp WHERE c = 1",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: (emp.c = 1)',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: empsalary.empno DESC',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT empno,           salary,           count((SELECT 1)) OVER (ORDER BY empno DESC) c    FROM empsalary) emp WHERE c = 1",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: (emp.c = 1)',), ('  ->  WindowAgg',), ('        InitPlan 1 (returns $0)',), ('          ->  Result',), ('        ->  Sort',), ('              Sort Key: empsalary.empno DESC',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT depname,           sum(salary) OVER (PARTITION BY depname order by empno) depsalary,           min(salary) OVER (PARTITION BY depname, empno order by enroll_date) depminsalary    FROM empsalary) emp WHERE depname = 'sales'",window.sql,SAME,,"[('Subquery Scan on emp',), ('  ->  WindowAgg',), ('        ->  WindowAgg',), ('              ->  Sort',), ('                    Sort Key: empsalary.empno, empsalary.enroll_date',), ('                    ->  Seq Scan on empsalary',), (""                          Filter: ((depname)::text = 'sales'::text)"",)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT empno,        enroll_date,        depname,        sum(salary) OVER (PARTITION BY depname order by empno) depsalary,        min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, empno",window.sql,SAME,,"[('WindowAgg',), ('  ->  Incremental Sort',), ('        Sort Key: depname, empno',), ('        Presorted Key: depname',), ('        ->  WindowAgg',), ('              ->  Sort',), ('                    Sort Key: depname, enroll_date',), ('                    ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT empno,        enroll_date,        depname,        sum(salary) OVER (PARTITION BY depname order by empno) depsalary,        min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, enroll_date",window.sql,SAME,,"[('WindowAgg',), ('  ->  Incremental Sort',), ('        Sort Key: depname, enroll_date',), ('        Presorted Key: depname',), ('        ->  WindowAgg',), ('              ->  Sort',), ('                    Sort Key: depname, empno',), ('                    ->  Seq Scan on empsalary',)]"
postgresql,postgresql,SET enable_hashagg TO off,window.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT DISTINCT        empno,        enroll_date,        depname,        sum(salary) OVER (PARTITION BY depname order by empno) depsalary,        min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, enroll_date",window.sql,SAME,,"[('Unique',), ('  ->  Incremental Sort',), ('        Sort Key: depname, enroll_date, empno, (sum(salary) OVER (?)), (min(salary) OVER (?))',), ('        Presorted Key: depname, enroll_date',), ('        ->  WindowAgg',), ('              ->  Incremental Sort',), ('                    Sort Key: depname, enroll_date',), ('                    Presorted Key: depname',), ('                    ->  WindowAgg',), ('                          ->  Sort',), ('                                Sort Key: depname, empno',), ('                                ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT DISTINCT        empno,        enroll_date,        depname,        sum(salary) OVER (PARTITION BY depname order by empno) depsalary,        min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, empno",window.sql,SAME,,"[('Unique',), ('  ->  Incremental Sort',), ('        Sort Key: depname, empno, enroll_date, (sum(salary) OVER (?)), (min(salary) OVER (?))',), ('        Presorted Key: depname, empno',), ('        ->  WindowAgg',), ('              ->  Incremental Sort',), ('                    Sort Key: depname, empno',), ('                    Presorted Key: depname',), ('                    ->  WindowAgg',), ('                          ->  Sort',), ('                                Sort Key: depname, enroll_date',), ('                                ->  Seq Scan on empsalary',)]"
postgresql,postgresql,RESET enable_hashagg,window.sql,SAME,,[]
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT   lead(1) OVER (PARTITION BY depname ORDER BY salary, enroll_date),   lag(1) OVER (PARTITION BY depname ORDER BY salary,enroll_date,empno) FROM empsalary",window.sql,SAME,,"[('WindowAgg',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: depname, salary, enroll_date, empno',), ('              ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF) SELECT * FROM   (SELECT depname,           empno,           salary,           enroll_date,           row_number() OVER (PARTITION BY depname ORDER BY enroll_date) AS first_emp,           row_number() OVER (PARTITION BY depname ORDER BY enroll_date DESC) AS last_emp    FROM empsalary) emp WHERE first_emp = 1 OR last_emp = 1",window.sql,SAME,,"[('Subquery Scan on emp',), ('  Filter: ((emp.first_emp = 1) OR (emp.last_emp = 1))',), ('  ->  WindowAgg',), ('        ->  Incremental Sort',), ('              Sort Key: empsalary.depname, empsalary.enroll_date',), ('              Presorted Key: empsalary.depname',), ('              ->  WindowAgg',), ('                    ->  Sort',), ('                          Sort Key: empsalary.depname, empsalary.enroll_date DESC',), ('                          ->  Seq Scan on empsalary',)]"
postgresql,postgresql,"SELECT * FROM   (SELECT depname,           empno,           salary,           enroll_date,           row_number() OVER (PARTITION BY depname ORDER BY enroll_date) AS first_emp,           row_number() OVER (PARTITION BY depname ORDER BY enroll_date DESC) AS last_emp    FROM empsalary) emp WHERE first_emp = 1 OR last_emp = 1",window.sql,SAME,,"[('develop', 8, 6000, datetime.date(2006, 10, 1), 1, 5), ('develop', 7, 4200, datetime.date(2008, 1, 1), 5, 1), ('personnel', 2, 3900, datetime.date(2006, 12, 23), 1, 2), ('personnel', 5, 3500, datetime.date(2007, 12, 10), 2, 1), ('sales', 1, 5000, datetime.date(2006, 10, 1), 1, 3), ('sales', 4, 4800, datetime.date(2007, 8, 8), 3, 1)]"
postgresql,postgresql,"CREATE FUNCTION logging_sfunc_nonstrict(text, anyelement) RETURNS text AS $$ SELECT COALESCE($1, '') || '*' || quote_nullable($2) $$ LANGUAGE SQL IMMUTABLE",window.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION logging_msfunc_nonstrict(text, anyelement) RETURNS text AS $$ SELECT COALESCE($1, '') || '+' || quote_nullable($2) $$ LANGUAGE SQL IMMUTABLE",window.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION logging_minvfunc_nonstrict(text, anyelement) RETURNS text AS $$ SELECT $1 || '-' || quote_nullable($2) $$ LANGUAGE SQL IMMUTABLE",window.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE logging_agg_nonstrict (anyelement) ( 	stype = text, 	sfunc = logging_sfunc_nonstrict, 	mstype = text, 	msfunc = logging_msfunc_nonstrict, 	minvfunc = logging_minvfunc_nonstrict )",window.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE logging_agg_nonstrict_initcond (anyelement) ( 	stype = text, 	sfunc = logging_sfunc_nonstrict, 	mstype = text, 	msfunc = logging_msfunc_nonstrict, 	minvfunc = logging_minvfunc_nonstrict, 	initcond = 'I', 	minitcond = 'MI' )",window.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION logging_sfunc_strict(text, anyelement) RETURNS text AS $$ SELECT $1 || '*' || quote_nullable($2) $$ LANGUAGE SQL STRICT IMMUTABLE",window.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION logging_msfunc_strict(text, anyelement) RETURNS text AS $$ SELECT $1 || '+' || quote_nullable($2) $$ LANGUAGE SQL STRICT IMMUTABLE",window.sql,SAME,,[]
postgresql,postgresql,"CREATE FUNCTION logging_minvfunc_strict(text, anyelement) RETURNS text AS $$ SELECT $1 || '-' || quote_nullable($2) $$ LANGUAGE SQL STRICT IMMUTABLE",window.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE logging_agg_strict (text) ( 	stype = text, 	sfunc = logging_sfunc_strict, 	mstype = text, 	msfunc = logging_msfunc_strict, 	minvfunc = logging_minvfunc_strict )",window.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE logging_agg_strict_initcond (anyelement) ( 	stype = text, 	sfunc = logging_sfunc_strict, 	mstype = text, 	msfunc = logging_msfunc_strict, 	minvfunc = logging_minvfunc_strict, 	initcond = 'I', 	minitcond = 'MI' )",window.sql,SAME,,[]
postgresql,postgresql,"SELECT 	p::text || ',' || i::text || ':' || COALESCE(v::text, 'NULL') AS row, 	logging_agg_nonstrict(v) over wnd as nstrict, 	logging_agg_nonstrict_initcond(v) over wnd as nstrict_init, 	logging_agg_strict(v::text) over wnd as strict, 	logging_agg_strict_initcond(v) over wnd as strict_init FROM (VALUES 	(1, 1, NULL), 	(1, 2, 'a'), 	(1, 3, 'b'), 	(1, 4, NULL), 	(1, 5, NULL), 	(1, 6, 'c'), 	(2, 1, NULL), 	(2, 2, 'x'), 	(3, 1, 'z') ) AS t(p, i, v) WINDOW wnd AS (PARTITION BY P ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY p, i",window.sql,SAME,,"[('1,1:NULL', '+NULL', 'MI+NULL', None, 'MI'), ('1,2:a', ""+NULL+'a'"", ""MI+NULL+'a'"", 'a', ""MI+'a'""), ('1,3:b', ""+NULL+'a'-NULL+'b'"", ""MI+NULL+'a'-NULL+'b'"", ""a+'b'"", ""MI+'a'+'b'""), ('1,4:NULL', ""+NULL+'a'-NULL+'b'-'a'+NULL"", ""MI+NULL+'a'-NULL+'b'-'a'+NULL"", ""a+'b'-'a'"", ""MI+'a'+'b'-'a'""), ('1,5:NULL', ""+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL"", ""MI+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL"", None, 'MI'), ('1,6:c', ""+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL-NULL+'c'"", ""MI+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL-NULL+'c'"", 'c', ""MI+'c'""), ('2,1:NULL', '+NULL', 'MI+NULL', None, 'MI'), ('2,2:x', ""+NULL+'x'"", ""MI+NULL+'x'"", 'x', ""MI+'x'""), ('3,1:z', ""+'z'"", ""MI+'z'"", 'z', ""MI+'z'"")]"
postgresql,postgresql,"SELECT 	p::text || ',' || i::text || ':' || 		CASE WHEN f THEN COALESCE(v::text, 'NULL') ELSE '-' END as row, 	logging_agg_nonstrict(v) filter(where f) over wnd as nstrict_filt, 	logging_agg_nonstrict_initcond(v) filter(where f) over wnd as nstrict_init_filt, 	logging_agg_strict(v::text) filter(where f) over wnd as strict_filt, 	logging_agg_strict_initcond(v) filter(where f) over wnd as strict_init_filt FROM (VALUES 	(1, 1, true,  NULL), 	(1, 2, false, 'a'), 	(1, 3, true,  'b'), 	(1, 4, false, NULL), 	(1, 5, false, NULL), 	(1, 6, false, 'c'), 	(2, 1, false, NULL), 	(2, 2, true,  'x'), 	(3, 1, true,  'z') ) AS t(p, i, f, v) WINDOW wnd AS (PARTITION BY p ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY p, i",window.sql,SAME,,"[('1,1:NULL', '+NULL', 'MI+NULL', None, 'MI'), ('1,2:-', '+NULL', 'MI+NULL', None, 'MI'), ('1,3:b', ""+'b'"", ""MI+'b'"", 'b', ""MI+'b'""), ('1,4:-', ""+'b'"", ""MI+'b'"", 'b', ""MI+'b'""), ('1,5:-', None, 'MI', None, 'MI'), ('1,6:-', None, 'MI', None, 'MI'), ('2,1:-', None, 'MI', None, 'MI'), ('2,2:x', ""+'x'"", ""MI+'x'"", 'x', ""MI+'x'""), ('3,1:z', ""+'z'"", ""MI+'z'"", 'z', ""MI+'z'"")]"
postgresql,postgresql,"SELECT 	i::text || ':' || COALESCE(v::text, 'NULL') as row, 	logging_agg_strict(v::text) 		over wnd as inverse, 	logging_agg_strict(v::text || CASE WHEN random() < 0 then '?' ELSE '' END) 		over wnd as noinverse FROM (VALUES 	(1, 'a'), 	(2, 'b'), 	(3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY i",window.sql,SAME,,"[('1:a', 'a', 'a'), ('2:b', ""a+'b'"", ""a*'b'""), ('3:c', ""a+'b'-'a'+'c'"", ""b*'c'"")]"
postgresql,postgresql,"SELECT 	i::text || ':' || COALESCE(v::text, 'NULL') as row, 	logging_agg_strict(v::text) filter(where true) 		over wnd as inverse, 	logging_agg_strict(v::text) filter(where random() >= 0) 		over wnd as noinverse FROM (VALUES 	(1, 'a'), 	(2, 'b'), 	(3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY i",window.sql,SAME,,"[('1:a', 'a', 'a'), ('2:b', ""a+'b'"", ""a*'b'""), ('3:c', ""a+'b'-'a'+'c'"", ""b*'c'"")]"
postgresql,postgresql,"SELECT 	logging_agg_strict(v::text) OVER wnd FROM (VALUES 	(1, 'a'), 	(2, 'b'), 	(3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN CURRENT ROW AND CURRENT ROW) ORDER BY i",window.sql,SAME,,"[('a',), ('b',), ('c',)]"
postgresql,postgresql,"CREATE FUNCTION sum_int_randrestart_minvfunc(int4, int4) RETURNS int4 AS $$ SELECT CASE WHEN random() < 0.2 THEN NULL ELSE $1 - $2 END $$ LANGUAGE SQL STRICT",window.sql,SAME,,[]
postgresql,postgresql,"CREATE AGGREGATE sum_int_randomrestart (int4) ( 	stype = int4, 	sfunc = int4pl, 	mstype = int4, 	msfunc = int4pl, 	minvfunc = sum_int_randrestart_minvfunc )",window.sql,SAME,,[]
postgresql,postgresql,"WITH vs AS ( 	SELECT i, (random() * 100)::int4 AS v 	FROM generate_series(1, 100) AS i ), sum_following AS ( 	SELECT i, SUM(v) OVER 		(ORDER BY i DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS s 	FROM vs ) SELECT DISTINCT 	sum_following.s = sum_int_randomrestart(v) OVER fwd AS eq1, 	-sum_following.s = sum_int_randomrestart(-v) OVER fwd AS eq2, 	100*3+(vs.i-1)*3 = length(logging_agg_nonstrict(''::text) OVER fwd) AS eq3 FROM vs JOIN sum_following ON sum_following.i = vs.i WINDOW fwd AS ( 	ORDER BY vs.i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )",window.sql,SAME,,"[(True, True, True)]"
postgresql,postgresql,"SELECT i,AVG(v::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, Decimal('1.5000000000000000')), (2, Decimal('2.0000000000000000')), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,AVG(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, Decimal('1.5000000000000000')), (2, Decimal('2.0000000000000000')), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,AVG(v::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, Decimal('1.5000000000000000')), (2, Decimal('2.0000000000000000')), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,AVG(v::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1.5),(2,2.5),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, Decimal('2.0000000000000000')), (2, Decimal('2.5000000000000000')), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,AVG(v::interval) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,'1 sec'),(2,'2 sec'),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, datetime.timedelta(seconds=1, microseconds=500000)), (2, datetime.timedelta(seconds=2)), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,SUM(v::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, 3), (2, 2), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, 3), (2, 2), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,SUM(v::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, Decimal('3')), (2, Decimal('2')), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,SUM(v::money) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,'1.10'),(2,'2.20'),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, '$3.30'), (2, '$2.20'), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,SUM(v::interval) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,'1 sec'),(2,'2 sec'),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, datetime.timedelta(seconds=3)), (2, datetime.timedelta(seconds=2)), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,SUM(v::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1.1),(2,2.2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, Decimal('3.3')), (2, Decimal('2.2')), (3, None), (4, None)]"
postgresql,postgresql,"SELECT SUM(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1.01),(2,2),(3,3)) v(i,n)",window.sql,SAME,,"[(Decimal('6.01'),), (Decimal('5'),), (Decimal('3'),)]"
postgresql,postgresql,"SELECT i,COUNT(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, 2), (2, 1), (3, 0), (4, 0)]"
postgresql,postgresql,"SELECT i,COUNT(*) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, 4), (2, 3), (3, 2), (4, 1)]"
postgresql,postgresql,"SELECT VAR_POP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('21704.000000000000'),), (Decimal('13868.750000000000'),), (Decimal('11266.666666666667'),), (Decimal('4225.0000000000000000'),), (Decimal('0'),)]"
postgresql,postgresql,"SELECT VAR_POP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('21704.000000000000'),), (Decimal('13868.750000000000'),), (Decimal('11266.666666666667'),), (Decimal('4225.0000000000000000'),), (Decimal('0'),)]"
postgresql,postgresql,"SELECT VAR_POP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('21704.000000000000'),), (Decimal('13868.750000000000'),), (Decimal('11266.666666666667'),), (Decimal('4225.0000000000000000'),), (Decimal('0'),)]"
postgresql,postgresql,"SELECT VAR_POP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('21704.000000000000'),), (Decimal('13868.750000000000'),), (Decimal('11266.666666666667'),), (Decimal('4225.0000000000000000'),), (Decimal('0'),)]"
postgresql,postgresql,"SELECT VAR_SAMP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('27130.000000000000'),), (Decimal('18491.666666666667'),), (Decimal('16900.000000000000'),), (Decimal('8450.0000000000000000'),), (None,)]"
postgresql,postgresql,"SELECT VAR_SAMP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('27130.000000000000'),), (Decimal('18491.666666666667'),), (Decimal('16900.000000000000'),), (Decimal('8450.0000000000000000'),), (None,)]"
postgresql,postgresql,"SELECT VAR_SAMP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('27130.000000000000'),), (Decimal('18491.666666666667'),), (Decimal('16900.000000000000'),), (Decimal('8450.0000000000000000'),), (None,)]"
postgresql,postgresql,"SELECT VAR_SAMP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('27130.000000000000'),), (Decimal('18491.666666666667'),), (Decimal('16900.000000000000'),), (Decimal('8450.0000000000000000'),), (None,)]"
postgresql,postgresql,"SELECT VARIANCE(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('27130.000000000000'),), (Decimal('18491.666666666667'),), (Decimal('16900.000000000000'),), (Decimal('8450.0000000000000000'),), (None,)]"
postgresql,postgresql,"SELECT VARIANCE(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('27130.000000000000'),), (Decimal('18491.666666666667'),), (Decimal('16900.000000000000'),), (Decimal('8450.0000000000000000'),), (None,)]"
postgresql,postgresql,"SELECT VARIANCE(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('27130.000000000000'),), (Decimal('18491.666666666667'),), (Decimal('16900.000000000000'),), (Decimal('8450.0000000000000000'),), (None,)]"
postgresql,postgresql,"SELECT VARIANCE(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('27130.000000000000'),), (Decimal('18491.666666666667'),), (Decimal('16900.000000000000'),), (Decimal('8450.0000000000000000'),), (None,)]"
postgresql,postgresql,"SELECT STDDEV_POP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)",window.sql,SAME,,"[(Decimal('147.322774885623'),), (Decimal('147.322774885623'),), (Decimal('117.765657133139'),), (Decimal('106.144555520604'),), (Decimal('65.0000000000000000'),), (Decimal('0'),)]"
postgresql,postgresql,"SELECT STDDEV_POP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)",window.sql,SAME,,"[(Decimal('147.322774885623'),), (Decimal('147.322774885623'),), (Decimal('117.765657133139'),), (Decimal('106.144555520604'),), (Decimal('65.0000000000000000'),), (Decimal('0'),)]"
postgresql,postgresql,"SELECT STDDEV_POP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)",window.sql,SAME,,"[(Decimal('147.322774885623'),), (Decimal('147.322774885623'),), (Decimal('117.765657133139'),), (Decimal('106.144555520604'),), (Decimal('65.0000000000000000'),), (Decimal('0'),)]"
postgresql,postgresql,"SELECT STDDEV_POP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)",window.sql,SAME,,"[(Decimal('147.322774885623'),), (Decimal('147.322774885623'),), (Decimal('117.765657133139'),), (Decimal('106.144555520604'),), (Decimal('65.0000000000000000'),), (Decimal('0'),)]"
postgresql,postgresql,"SELECT STDDEV_SAMP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)",window.sql,SAME,,"[(Decimal('164.711869639076'),), (Decimal('164.711869639076'),), (Decimal('135.984067694222'),), (Decimal('130.000000000000'),), (Decimal('91.9238815542511782'),), (None,)]"
postgresql,postgresql,"SELECT STDDEV_SAMP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)",window.sql,SAME,,"[(Decimal('164.711869639076'),), (Decimal('164.711869639076'),), (Decimal('135.984067694222'),), (Decimal('130.000000000000'),), (Decimal('91.9238815542511782'),), (None,)]"
postgresql,postgresql,"SELECT STDDEV_SAMP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)",window.sql,SAME,,"[(Decimal('164.711869639076'),), (Decimal('164.711869639076'),), (Decimal('135.984067694222'),), (Decimal('130.000000000000'),), (Decimal('91.9238815542511782'),), (None,)]"
postgresql,postgresql,"SELECT STDDEV_SAMP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)",window.sql,SAME,,"[(Decimal('164.711869639076'),), (Decimal('164.711869639076'),), (Decimal('135.984067694222'),), (Decimal('130.000000000000'),), (Decimal('91.9238815542511782'),), (None,)]"
postgresql,postgresql,"SELECT STDDEV(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('164.711869639076'),), (Decimal('164.711869639076'),), (Decimal('135.984067694222'),), (Decimal('130.000000000000'),), (Decimal('91.9238815542511782'),), (None,)]"
postgresql,postgresql,"SELECT STDDEV(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('164.711869639076'),), (Decimal('164.711869639076'),), (Decimal('135.984067694222'),), (Decimal('130.000000000000'),), (Decimal('91.9238815542511782'),), (None,)]"
postgresql,postgresql,"SELECT STDDEV(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('164.711869639076'),), (Decimal('164.711869639076'),), (Decimal('135.984067694222'),), (Decimal('130.000000000000'),), (Decimal('91.9238815542511782'),), (None,)]"
postgresql,postgresql,"SELECT STDDEV(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)   FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)",window.sql,SAME,,"[(Decimal('164.711869639076'),), (Decimal('164.711869639076'),), (Decimal('135.984067694222'),), (Decimal('130.000000000000'),), (Decimal('91.9238815542511782'),), (None,)]"
postgresql,postgresql,"SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND CURRENT ROW)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, 1), (2, 2), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)",window.sql,SAME,,"[(1, 3), (2, 2), (3, None), (4, None)]"
postgresql,postgresql,"SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)   FROM (VALUES(1,1),(2,2),(3,3),(4,4)) t(i,v)",window.sql,SAME,,"[(1, 3), (2, 6), (3, 9), (4, 7)]"
postgresql,postgresql,"SELECT a, b,        SUM(b) OVER(ORDER BY A ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) FROM (VALUES(1,1::numeric),(2,2),(3,'NaN'),(4,3),(5,4)) t(a,b)",window.sql,SAME,,"[(1, Decimal('1'), Decimal('1')), (2, Decimal('2'), Decimal('3')), (3, Decimal('NaN'), Decimal('NaN')), (4, Decimal('3'), Decimal('NaN')), (5, Decimal('4'), Decimal('7'))]"
postgresql,postgresql,"SELECT to_char(SUM(n::float8) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING),'999999999999999999999D9')   FROM (VALUES(1,1e20),(2,1)) n(i,n)",window.sql,SAME,,"[(' 100000000000000000000',), ('                     1.0',)]"
postgresql,postgresql,"SELECT i, b, bool_and(b) OVER w, bool_or(b) OVER w   FROM (VALUES (1,true), (2,true), (3,false), (4,false), (5,true)) v(i,b)   WINDOW w AS (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)",window.sql,SAME,,"[(1, True, True, True), (2, True, False, True), (3, False, False, False), (4, False, False, True), (5, True, True, True)]"
postgresql,postgresql,"SELECT array_agg(i) OVER w   FROM generate_series(1,5) i WINDOW w AS (ORDER BY i ROWS BETWEEN (('foo' < 'foobar')::integer) PRECEDING AND CURRENT ROW)",window.sql,SAME,,"[([1],), ([1, 2],), ([2, 3],), ([3, 4],), ([4, 5],)]"
postgresql,postgresql,"CREATE FUNCTION pg_temp.f(group_size BIGINT) RETURNS SETOF integer[] AS $$     SELECT array_agg(s) OVER w       FROM generate_series(1,5) s     WINDOW w AS (ORDER BY s ROWS BETWEEN CURRENT ROW AND GROUP_SIZE FOLLOWING) $$ LANGUAGE SQL STABLE",window.sql,SAME,,[]
postgresql,postgresql,EXPLAIN (costs off) SELECT * FROM pg_temp.f(2),window.sql,SAME,,"[('Subquery Scan on f',), ('  ->  WindowAgg',), ('        ->  Sort',), ('              Sort Key: s.s',), ('              ->  Function Scan on generate_series s',)]"
postgresql,postgresql,SELECT * FROM pg_temp.f(2),window.sql,SAME,,"[([1, 2, 3],), ([2, 3, 4],), ([3, 4, 5],), ([4, 5],), ([5],)]"
postgresql,postgresql,"SET datestyle TO ISO, YMD",without_overlaps.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_rng_pk',without_overlaps.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_rng_pk'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_rng2_pk',without_overlaps.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_rng2_pk'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE textrange2 AS range (subtype=text, collation=""C"")",without_overlaps.sql,SAME,,[]
postgresql,postgresql,DROP TYPE textrange2,without_overlaps.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_mltrng2_pk',without_overlaps.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_mltrng2_pk'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_rng3_uq',without_overlaps.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_rng3_uq'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_rng3_uq',without_overlaps.sql,SAME,,[]
postgresql,postgresql,"SELECT pg_get_indexdef(conindid, 0, true) FROM pg_constraint WHERE conname = 'temporal_rng3_uq'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"CREATE TYPE textrange2 AS range (subtype=text, collation=""C"")",without_overlaps.sql,SAME,,[]
postgresql,postgresql,DROP TYPE textrange2,without_overlaps.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX idx_temporal3_uq ON temporal3 USING gist (id, valid_at)",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"CREATE INDEX idx_temporal3_uq ON temporal3 USING gist (id, valid_at)",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"CREATE UNIQUE INDEX idx_temporal3_uq ON temporal3 (id, valid_at)",without_overlaps.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE temporal3 	ADD CONSTRAINT temporal3_uq 	UNIQUE USING INDEX idx_temporal3_uq,without_overlaps.sql,SAME,,[]
postgresql,postgresql,DELETE FROM temporal_rng,without_overlaps.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_fk_rng2rng_fk',without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,COMMIT,without_overlaps.sql,SAME,,[]
postgresql,postgresql,"UPDATE temporal_rng SET valid_at = daterange('2016-01-01', '2016-02-01') WHERE id = '[5,6)'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM temporal_rng WHERE id = '[5,6)'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"UPDATE temporal_rng SET valid_at = daterange('2016-02-01', '2016-03-01') WHERE id = '[5,6)' AND valid_at = daterange('2018-02-01', '2018-03-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"UPDATE temporal_rng SET valid_at = daterange('2016-01-01', '2016-02-01') WHERE id = '[5,6)' AND valid_at = daterange('2018-01-01', '2018-02-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,COMMIT,without_overlaps.sql,SAME,,[]
postgresql,postgresql,"UPDATE temporal_rng SET id = '[7,8)' WHERE id = '[5,6)' AND valid_at = daterange('2018-01-01', '2018-02-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"UPDATE temporal_rng SET valid_at = daterange('2016-01-01', '2016-02-01') WHERE id = '[5,6)' AND valid_at = daterange('2018-01-01', '2018-02-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"UPDATE temporal_rng SET valid_at = daterange('2016-01-01', '2016-02-01') WHERE id = '[5,6)'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM temporal_rng WHERE id = '[5,6)'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"UPDATE temporal_rng SET valid_at = daterange('2016-02-01', '2016-03-01') WHERE id = '[5,6)' AND valid_at = daterange('2018-02-01', '2018-03-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,without_overlaps.sql,SAME,,[]
postgresql,postgresql,"UPDATE temporal_rng SET id = '[7,8)' WHERE id = '[5,6)' AND valid_at = daterange('2018-01-01', '2018-02-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"UPDATE temporal_rng SET valid_at = daterange('2016-01-01', '2016-02-01') WHERE id = '[5,6)' AND valid_at = daterange('2018-01-01', '2018-02-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM temporal_rng WHERE id = '[5,6)'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM temporal_rng WHERE id = '[5,6)' AND valid_at = daterange('2018-02-01', '2018-03-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM temporal_rng WHERE id = '[5,6)' AND valid_at = daterange('2018-01-01', '2018-02-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,COMMIT,without_overlaps.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM temporal_rng WHERE id = '[5,6)' AND valid_at = daterange('2018-01-01', '2018-02-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM temporal_rng WHERE id = '[5,6)'",without_overlaps.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM temporal_rng WHERE id = '[5,6)' AND valid_at = daterange('2018-02-01', '2018-03-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,without_overlaps.sql,SAME,,[]
postgresql,postgresql,"DELETE FROM temporal_rng WHERE id = '[5,6)' AND valid_at = daterange('2018-01-01', '2018-02-01')",without_overlaps.sql,SAME,,[]
postgresql,postgresql,SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname = 'temporal_fk_mltrng2mltrng_fk',without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,COMMIT,without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,COMMIT,without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,COMMIT,without_overlaps.sql,SAME,,[]
postgresql,postgresql,BEGIN,without_overlaps.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,without_overlaps.sql,SAME,,[]
postgresql,postgresql,RESET datestyle,without_overlaps.sql,SAME,,[]
postgresql,postgresql,begin,write_parallel.sql,SAME,,[]
postgresql,postgresql,set parallel_setup_cost=0,write_parallel.sql,SAME,,[]
postgresql,postgresql,set parallel_tuple_cost=0,write_parallel.sql,SAME,,[]
postgresql,postgresql,set min_parallel_table_scan_size=0,write_parallel.sql,SAME,,[]
postgresql,postgresql,set max_parallel_workers_per_gather=4,write_parallel.sql,SAME,,[]
postgresql,postgresql,rollback,write_parallel.sql,SAME,,[]
postgresql,postgresql,"select '010'::xid,        '42'::xid,        '0xffffffff'::xid,        '-1'::xid, 	   '010'::xid8, 	   '42'::xid8, 	   '0xffffffffffffffff'::xid8, 	   '-1'::xid8",xid.sql,SAME,,"[('8', '42', '4294967295', '4294967295', '8', '42', '18446744073709551615', '18446744073709551615')]"
postgresql,postgresql,"SELECT pg_input_is_valid('42', 'xid')",xid.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('asdf', 'xid')",xid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('0xffffffffff', 'xid')",xid.sql,SAME,,"[('value ""0xffffffffff"" is out of range for type xid', None, None, '22003')]"
postgresql,postgresql,"SELECT pg_input_is_valid('42', 'xid8')",xid.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('asdf', 'xid8')",xid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT * FROM pg_input_error_info('0xffffffffffffffffffff', 'xid8')",xid.sql,SAME,,"[('value ""0xffffffffffffffffffff"" is out of range for type xid8', None, None, '22003')]"
postgresql,postgresql,select '1'::xid = '1'::xid,xid.sql,SAME,,"[(True,)]"
postgresql,postgresql,select '1'::xid != '1'::xid,xid.sql,SAME,,"[(False,)]"
postgresql,postgresql,select '1'::xid8 = '1'::xid8,xid.sql,SAME,,"[(True,)]"
postgresql,postgresql,select '1'::xid8 != '1'::xid8,xid.sql,SAME,,"[(False,)]"
postgresql,postgresql,select '1'::xid = '1'::xid8::xid,xid.sql,SAME,,"[(True,)]"
postgresql,postgresql,select '1'::xid != '1'::xid8::xid,xid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select '1'::xid8 < '2'::xid8, '2'::xid8 < '2'::xid8, '2'::xid8 < '1'::xid8",xid.sql,SAME,,"[(True, False, False)]"
postgresql,postgresql,"select '1'::xid8 <= '2'::xid8, '2'::xid8 <= '2'::xid8, '2'::xid8 <= '1'::xid8",xid.sql,SAME,,"[(True, True, False)]"
postgresql,postgresql,"select '1'::xid8 > '2'::xid8, '2'::xid8 > '2'::xid8, '2'::xid8 > '1'::xid8",xid.sql,SAME,,"[(False, False, True)]"
postgresql,postgresql,"select '1'::xid8 >= '2'::xid8, '2'::xid8 >= '2'::xid8, '2'::xid8 >= '1'::xid8",xid.sql,SAME,,"[(False, True, True)]"
postgresql,postgresql,"select xid8cmp('1', '2'), xid8cmp('2', '2'), xid8cmp('2', '1')",xid.sql,SAME,,"[(-1, 0, 1)]"
postgresql,postgresql,"select min(x), max(x) from xid8_t1",xid.sql,SAME,,"[('0', '18446744073709551615')]"
postgresql,postgresql,create index on xid8_t1 using btree(x),xid.sql,SAME,,[]
postgresql,postgresql,create index on xid8_t1 using hash(x),xid.sql,SAME,,[]
postgresql,postgresql,select '12:13:'::pg_snapshot,xid.sql,SAME,,"[('12:13:',)]"
postgresql,postgresql,"select '12:18:14,16'::pg_snapshot",xid.sql,SAME,,"[('12:18:14,16',)]"
postgresql,postgresql,"select '12:16:14,14'::pg_snapshot",xid.sql,SAME,,"[('12:16:14',)]"
postgresql,postgresql,"select pg_input_is_valid('12:13:', 'pg_snapshot')",xid.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_input_is_valid('31:12:', 'pg_snapshot')",xid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('31:12:', 'pg_snapshot')",xid.sql,SAME,,"[('invalid input syntax for type pg_snapshot: ""31:12:""', None, None, '22P02')]"
postgresql,postgresql,"select pg_input_is_valid('12:16:14,13', 'pg_snapshot')",xid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select * from pg_input_error_info('12:16:14,13', 'pg_snapshot')",xid.sql,SAME,,"[('invalid input syntax for type pg_snapshot: ""12:16:14,13""', None, None, '22P02')]"
postgresql,postgresql,"create temp table snapshot_test ( 	nr	integer, 	snap	pg_snapshot )",xid.sql,SAME,,[]
postgresql,postgresql,select snap from snapshot_test order by nr,xid.sql,SAME,,"[('12:13:',), ('12:20:13,15,18',), ('100001:100009:100005,100007,100008',), ('100:150:101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131',)]"
postgresql,postgresql,"select  pg_snapshot_xmin(snap), 	pg_snapshot_xmax(snap), 	pg_snapshot_xip(snap) from snapshot_test order by nr",xid.sql,SAME,,"[('12', '20', '13'), ('12', '20', '15'), ('12', '20', '18'), ('100001', '100009', '100005'), ('100001', '100009', '100007'), ('100001', '100009', '100008'), ('100', '150', '101'), ('100', '150', '102'), ('100', '150', '103'), ('100', '150', '104'), ('100', '150', '105'), ('100', '150', '106'), ('100', '150', '107'), ('100', '150', '108'), ('100', '150', '109'), ('100', '150', '110'), ('100', '150', '111'), ('100', '150', '112'), ('100', '150', '113'), ('100', '150', '114'), ('100', '150', '115'), ('100', '150', '116'), ('100', '150', '117'), ('100', '150', '118'), ('100', '150', '119'), ('100', '150', '120'), ('100', '150', '121'), ('100', '150', '122'), ('100', '150', '123'), ('100', '150', '124'), ('100', '150', '125'), ('100', '150', '126'), ('100', '150', '127'), ('100', '150', '128'), ('100', '150', '129'), ('100', '150', '130'), ('100', '150', '131')]"
postgresql,postgresql,"select id, pg_visible_in_snapshot(id::text::xid8, snap) from snapshot_test, generate_series(11, 21) id where nr = 2",xid.sql,SAME,,"[(11, True), (12, True), (13, False), (14, True), (15, False), (16, True), (17, True), (18, False), (19, True), (20, False), (21, False)]"
postgresql,postgresql,"select id, pg_visible_in_snapshot(id::text::xid8, snap) from snapshot_test, generate_series(90, 160) id where nr = 4",xid.sql,SAME,,"[(90, True), (91, True), (92, True), (93, True), (94, True), (95, True), (96, True), (97, True), (98, True), (99, True), (100, True), (101, False), (102, False), (103, False), (104, False), (105, False), (106, False), (107, False), (108, False), (109, False), (110, False), (111, False), (112, False), (113, False), (114, False), (115, False), (116, False), (117, False), (118, False), (119, False), (120, False), (121, False), (122, False), (123, False), (124, False), (125, False), (126, False), (127, False), (128, False), (129, False), (130, False), (131, False), (132, True), (133, True), (134, True), (135, True), (136, True), (137, True), (138, True), (139, True), (140, True), (141, True), (142, True), (143, True), (144, True), (145, True), (146, True), (147, True), (148, True), (149, True), (150, False), (151, False), (152, False), (153, False), (154, False), (155, False), (156, False), (157, False), (158, False), (159, False), (160, False)]"
postgresql,postgresql,select pg_current_xact_id() >= pg_snapshot_xmin(pg_current_snapshot()),xid.sql,SAME,,"[(True,)]"
postgresql,postgresql,"select pg_visible_in_snapshot(pg_current_xact_id(), pg_current_snapshot())",xid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select pg_snapshot '1000100010001000:1000100010001100:1000100010001012,1000100010001013'",xid.sql,SAME,,"[('1000100010001000:1000100010001100:1000100010001012,1000100010001013',)]"
postgresql,postgresql,"select pg_visible_in_snapshot('1000100010001012', '1000100010001000:1000100010001100:1000100010001012,1000100010001013')",xid.sql,SAME,,"[(False,)]"
postgresql,postgresql,"select pg_visible_in_snapshot('1000100010001015', '1000100010001000:1000100010001100:1000100010001012,1000100010001013')",xid.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT pg_snapshot '1:9223372036854775807:3',xid.sql,SAME,,"[('1:9223372036854775807:3',)]"
postgresql,postgresql,BEGIN,xid.sql,SAME,,[]
postgresql,postgresql,SELECT pg_current_xact_id_if_assigned() IS NULL,xid.sql,SAME,,"[(True,)]"
postgresql,postgresql,COMMIT,xid.sql,SAME,,[]
postgresql,postgresql,BEGIN,xid.sql,SAME,,[]
postgresql,postgresql,COMMIT,xid.sql,SAME,,[]
postgresql,postgresql,BEGIN,xid.sql,SAME,,[]
postgresql,postgresql,CREATE FUNCTION test_future_xid_status(xid8) RETURNS void LANGUAGE plpgsql AS $$ BEGIN   PERFORM pg_xact_status($1);   RAISE EXCEPTION 'didn''t ERROR at xid in the future as expected'; EXCEPTION   WHEN invalid_parameter_value THEN     RAISE NOTICE 'Got expected error for xid in the future'; END; $$,xid.sql,SAME,,[]
postgresql,postgresql,ROLLBACK,xid.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM xmltest,xml.sql,SAME,,"[(1, '<value>one</value>'), (2, '<value>two</value>')]"
postgresql,postgresql,"SELECT pg_input_is_valid('<value>one</value>', 'xml')",xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT pg_input_is_valid('<value>one</', 'xml')",xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT message FROM pg_input_error_info('<value>one</', 'xml')",xml.sql,SAME,,"[('invalid XML content',)]"
postgresql,postgresql,"SELECT pg_input_is_valid('<?xml version=""1.0"" standalone=""y""?><foo/>', 'xml')",xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT message FROM pg_input_error_info('<?xml version=""1.0"" standalone=""y""?><foo/>', 'xml')",xml.sql,SAME,,"[('invalid XML content: invalid XML declaration',)]"
postgresql,postgresql,SELECT xmlcomment('test'),xml.sql,SAME,,"[('<!--test-->',)]"
postgresql,postgresql,SELECT xmlcomment('-test'),xml.sql,SAME,,"[('<!---test-->',)]"
postgresql,postgresql,"SELECT xmlconcat(xmlcomment('hello'),                  xmlelement(NAME qux, 'foo'),                  xmlcomment('world'))",xml.sql,SAME,,"[('<!--hello--><qux>foo</qux><!--world-->',)]"
postgresql,postgresql,"SELECT xmlconcat('hello', 'you')",xml.sql,SAME,,"[('helloyou',)]"
postgresql,postgresql,"SELECT xmlconcat('<foo/>', NULL, '<?xml version=""1.1"" standalone=""no""?><bar/>')",xml.sql,SAME,,"[('<foo/><bar/>',)]"
postgresql,postgresql,"SELECT xmlconcat('<?xml version=""1.1""?><foo/>', NULL, '<?xml version=""1.1"" standalone=""no""?><bar/>')",xml.sql,SAME,,"[('<?xml version=""1.1""?><foo/><bar/>',)]"
postgresql,postgresql,SELECT xmlconcat(NULL),xml.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT xmlconcat(NULL, NULL)",xml.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT xmlelement(name element,                   xmlattributes (1 as one, 'deuce' as two),                   'content')",xml.sql,SAME,,"[('<element one=""1"" two=""deuce"">content</element>',)]"
postgresql,postgresql,"SELECT xmlelement(name element, xmlelement(name nested, 'stuff'))",xml.sql,SAME,,"[('<element><nested>stuff</nested></element>',)]"
postgresql,postgresql,"SELECT xmlelement(name num, 37)",xml.sql,SAME,,"[('<num>37</num>',)]"
postgresql,postgresql,"SELECT xmlelement(name foo, text 'bar')",xml.sql,SAME,,"[('<foo>bar</foo>',)]"
postgresql,postgresql,"SELECT xmlelement(name foo, xml 'bar')",xml.sql,SAME,,"[('<foo>bar</foo>',)]"
postgresql,postgresql,"SELECT xmlelement(name foo, text 'b<a/>r')",xml.sql,SAME,,"[('<foo>b&lt;a/&gt;r</foo>',)]"
postgresql,postgresql,"SELECT xmlelement(name foo, xml 'b<a/>r')",xml.sql,SAME,,"[('<foo>b<a/>r</foo>',)]"
postgresql,postgresql,"SELECT xmlelement(name foo, array[1, 2, 3])",xml.sql,SAME,,"[('<foo><element>1</element><element>2</element><element>3</element></foo>',)]"
postgresql,postgresql,SET xmlbinary TO base64,xml.sql,SAME,,[]
postgresql,postgresql,"SELECT xmlelement(name foo, bytea 'bar')",xml.sql,SAME,,"[('<foo>YmFy</foo>',)]"
postgresql,postgresql,SET xmlbinary TO hex,xml.sql,SAME,,[]
postgresql,postgresql,"SELECT xmlelement(name foo, bytea 'bar')",xml.sql,SAME,,"[('<foo>626172</foo>',)]"
postgresql,postgresql,"SELECT xmlelement(name foo, xmlattributes(true as bar))",xml.sql,SAME,,"[('<foo bar=""true""/>',)]"
postgresql,postgresql,"SELECT xmlelement(name foo, xmlattributes('2009-04-09 00:24:37'::timestamp as bar))",xml.sql,SAME,,"[('<foo bar=""2009-04-09T00:24:37""/>',)]"
postgresql,postgresql,"SELECT xmlelement(name foo, xmlattributes('<>&""''' as funny, xml 'b<a/>r' as funnier))",xml.sql,SAME,,"[('<foo funny=""&lt;&gt;&amp;&quot;\'"" funnier=""b&lt;a/&gt;r""/>',)]"
postgresql,postgresql,SELECT xmlparse(content ''),xml.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT xmlparse(content '  '),xml.sql,SAME,,"[('  ',)]"
postgresql,postgresql,SELECT xmlparse(content 'abc'),xml.sql,SAME,,"[('abc',)]"
postgresql,postgresql,SELECT xmlparse(content '<abc>x</abc>'),xml.sql,SAME,,"[('<abc>x</abc>',)]"
postgresql,postgresql,SELECT xmlparse(content '<relativens xmlns=''relative''/>'),xml.sql,SAME,,"[(""<relativens xmlns='relative'/>"",)]"
postgresql,postgresql,SELECT xmlparse(content '<nosuchprefix:tag/>'),xml.sql,SAME,,"[('<nosuchprefix:tag/>',)]"
postgresql,postgresql,SELECT xmlparse(document '<abc>x</abc>'),xml.sql,SAME,,"[('<abc>x</abc>',)]"
postgresql,postgresql,SELECT xmlparse(document '<relativens xmlns=''relative''/>'),xml.sql,SAME,,"[(""<relativens xmlns='relative'/>"",)]"
postgresql,postgresql,SELECT xmlparse(document '<nosuchprefix:tag/>'),xml.sql,SAME,,"[('<nosuchprefix:tag/>',)]"
postgresql,postgresql,SELECT xmlpi(name foo),xml.sql,SAME,,"[('<?foo?>',)]"
postgresql,postgresql,SELECT xmlpi(name xmlstuff),xml.sql,SAME,,"[('<?xmlstuff?>',)]"
postgresql,postgresql,"SELECT xmlpi(name foo, 'bar')",xml.sql,SAME,,"[('<?foo bar?>',)]"
postgresql,postgresql,"SELECT xmlpi(name foo, null)",xml.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT xmlpi(name xmlstuff, null)",xml.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT xmlpi(name ""xml-stylesheet"", 'href=""mystyle.css"" type=""text/css""')",xml.sql,SAME,,"[('<?xml-stylesheet href=""mystyle.css"" type=""text/css""?>',)]"
postgresql,postgresql,"SELECT xmlpi(name foo, '   bar')",xml.sql,SAME,,"[('<?foo bar?>',)]"
postgresql,postgresql,"SELECT xmlroot(xml '<foo/>', version no value, standalone no value)",xml.sql,SAME,,"[('<foo/>',)]"
postgresql,postgresql,"SELECT xmlroot(xml '<foo/>', version '2.0')",xml.sql,SAME,,"[('<?xml version=""2.0""?><foo/>',)]"
postgresql,postgresql,"SELECT xmlroot(xml '<foo/>', version no value, standalone yes)",xml.sql,SAME,,"[('<?xml version=""1.0"" standalone=""yes""?><foo/>',)]"
postgresql,postgresql,"SELECT xmlroot(xml '<?xml version=""1.1""?><foo/>', version no value, standalone yes)",xml.sql,SAME,,"[('<?xml version=""1.0"" standalone=""yes""?><foo/>',)]"
postgresql,postgresql,"SELECT xmlroot(xmlroot(xml '<foo/>', version '1.0'), version '1.1', standalone no)",xml.sql,SAME,,"[('<?xml version=""1.1"" standalone=""no""?><foo/>',)]"
postgresql,postgresql,"SELECT xmlroot('<?xml version=""1.1"" standalone=""yes""?><foo/>', version no value, standalone no)",xml.sql,SAME,,"[('<?xml version=""1.0"" standalone=""no""?><foo/>',)]"
postgresql,postgresql,"SELECT xmlroot('<?xml version=""1.1"" standalone=""yes""?><foo/>', version no value, standalone no value)",xml.sql,SAME,,"[('<foo/>',)]"
postgresql,postgresql,"SELECT xmlroot('<?xml version=""1.1"" standalone=""yes""?><foo/>', version no value)",xml.sql,SAME,,"[('<?xml version=""1.0"" standalone=""yes""?><foo/>',)]"
postgresql,postgresql,"SELECT xmlroot (   xmlelement (     name gazonk,     xmlattributes (       'val' AS name,       1 + 1 AS num     ),     xmlelement (       NAME qux,       'foo'     )   ),   version '1.0',   standalone yes )",xml.sql,SAME,,"[('<?xml version=""1.0"" standalone=""yes""?><gazonk name=""val"" num=""2""><qux>foo</qux></gazonk>',)]"
postgresql,postgresql,SELECT xmlserialize(content data as character varying(20)) FROM xmltest,xml.sql,SAME,,"[('<value>one</value>',), ('<value>two</value>',)]"
postgresql,postgresql,SELECT xmlserialize(content 'good' as char(10)),xml.sql,SAME,,"[('good      ',)]"
postgresql,postgresql,"SELECT xmlserialize(DOCUMENT '<foo><bar><val x=""y"">42</val></bar></foo>' AS text INDENT)",xml.sql,SAME,,"[('<foo>\n  <bar>\n    <val x=""y"">42</val>\n  </bar>\n</foo>\n',)]"
postgresql,postgresql,"SELECT xmlserialize(CONTENT  '<foo><bar><val x=""y"">42</val></bar></foo>' AS text INDENT)",xml.sql,SAME,,"[('<foo>\n  <bar>\n    <val x=""y"">42</val>\n  </bar>\n</foo>',)]"
postgresql,postgresql,"SELECT xmlserialize(DOCUMENT '<foo><bar><val x=""y"">42</val></bar></foo>' AS text NO INDENT)",xml.sql,SAME,,"[('<foo><bar><val x=""y"">42</val></bar></foo>',)]"
postgresql,postgresql,"SELECT xmlserialize(CONTENT  '<foo><bar><val x=""y"">42</val></bar></foo>' AS text NO INDENT)",xml.sql,SAME,,"[('<foo><bar><val x=""y"">42</val></bar></foo>',)]"
postgresql,postgresql,"SELECT xmlserialize(CONTENT  '<foo>73</foo><bar><val x=""y"">42</val></bar>' AS text INDENT)",xml.sql,SAME,,"[('<foo>73</foo>\n<bar>\n  <val x=""y"">42</val>\n</bar>',)]"
postgresql,postgresql,"SELECT xmlserialize(CONTENT  'text node<foo>73</foo>text node<bar><val x=""y"">42</val></bar>' AS text INDENT)",xml.sql,SAME,,"[('text node\n<foo>73</foo>text node\n<bar>\n  <val x=""y"">42</val>\n</bar>',)]"
postgresql,postgresql,"SELECT xmlserialize(DOCUMENT '<foo><bar><val x=""y"">42</val><val x=""y"">text node<val>73</val></val></bar></foo>' AS text INDENT)",xml.sql,SAME,,"[('<foo>\n  <bar>\n    <val x=""y"">42</val>\n    <val x=""y"">text node<val>73</val></val>\n  </bar>\n</foo>\n',)]"
postgresql,postgresql,"SELECT xmlserialize(CONTENT  '<foo><bar><val x=""y"">42</val><val x=""y"">text node<val>73</val></val></bar></foo>' AS text INDENT)",xml.sql,SAME,,"[('<foo>\n  <bar>\n    <val x=""y"">42</val>\n    <val x=""y"">text node<val>73</val></val>\n  </bar>\n</foo>',)]"
postgresql,postgresql,SELECT xmlserialize(CONTENT  '' AS text INDENT),xml.sql,SAME,,"[('',)]"
postgresql,postgresql,SELECT xmlserialize(CONTENT  '  ' AS text INDENT),xml.sql,SAME,,"[('  ',)]"
postgresql,postgresql,SELECT xmlserialize(DOCUMENT NULL AS text INDENT),xml.sql,SAME,,"[(None,)]"
postgresql,postgresql,SELECT xmlserialize(CONTENT  NULL AS text INDENT),xml.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT xmlserialize(DOCUMENT '<?xml version=""1.0"" encoding=""UTF-8""?><foo><bar><val>73</val></bar></foo>' AS text INDENT)",xml.sql,SAME,,"[('<?xml version=""1.0"" encoding=""UTF-8""?>\n<foo>\n  <bar>\n    <val>73</val>\n  </bar>\n</foo>\n',)]"
postgresql,postgresql,"SELECT xmlserialize(CONTENT  '<?xml version=""1.0"" encoding=""UTF-8""?><foo><bar><val>73</val></bar></foo>' AS text INDENT)",xml.sql,SAME,,"[('<foo>\n  <bar>\n    <val>73</val>\n  </bar>\n</foo>',)]"
postgresql,postgresql,SELECT xmlserialize(DOCUMENT '<!DOCTYPE a><a/>' AS text INDENT),xml.sql,SAME,,"[('<!DOCTYPE a>\n<a/>\n',)]"
postgresql,postgresql,SELECT xmlserialize(CONTENT  '<!DOCTYPE a><a/>' AS text INDENT),xml.sql,SAME,,"[('<!DOCTYPE a>\n<a/>\n',)]"
postgresql,postgresql,SELECT xmlserialize(DOCUMENT '<foo><bar></bar></foo>' AS text INDENT),xml.sql,SAME,,"[('<foo>\n  <bar/>\n</foo>\n',)]"
postgresql,postgresql,SELECT xmlserialize(CONTENT  '<foo><bar></bar></foo>' AS text INDENT),xml.sql,SAME,,"[('<foo>\n  <bar/>\n</foo>',)]"
postgresql,postgresql,"SELECT xmlserialize(DOCUMENT '<foo><bar><val x=""y"">42</val></bar></foo>' AS text) = xmlserialize(DOCUMENT '<foo><bar><val x=""y"">42</val></bar></foo>' AS text NO INDENT)",xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT xmlserialize(CONTENT  '<foo><bar><val x=""y"">42</val></bar></foo>' AS text) = xmlserialize(CONTENT '<foo><bar><val x=""y"">42</val></bar></foo>' AS text NO INDENT)",xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT xml '<foo>bar</foo>' IS DOCUMENT,xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT xml '<foo>bar</foo><bar>foo</bar>' IS DOCUMENT,xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT xml '<abc/>' IS NOT DOCUMENT,xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT xml 'abc' IS NOT DOCUMENT,xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT xmlagg(data) FROM xmltest,xml.sql,SAME,,"[('<value>one</value><value>two</value>',)]"
postgresql,postgresql,SELECT xmlagg(data) FROM xmltest WHERE id > 10,xml.sql,SAME,,"[(None,)]"
postgresql,postgresql,"SELECT xmlpi(name "":::_xml_abc135.%-&_"")",xml.sql,SAME,,"[('<?_x003A_::_x005F_xml_abc135._x0025_-_x0026__?>',)]"
postgresql,postgresql,"SELECT xmlpi(name ""123"")",xml.sql,SAME,,"[('<?_x0031_23?>',)]"
postgresql,postgresql,"PREPARE foo (xml) AS SELECT xmlconcat('<foo/>', $1)",xml.sql,SAME,,[]
postgresql,postgresql,SET XML OPTION DOCUMENT,xml.sql,SAME,,[]
postgresql,postgresql,EXECUTE foo ('<bar/>'),xml.sql,SAME,,"[('<foo/><bar/>',)]"
postgresql,postgresql,SET XML OPTION CONTENT,xml.sql,SAME,,[]
postgresql,postgresql,EXECUTE foo ('<bar/>'),xml.sql,SAME,,"[('<foo/><bar/>',)]"
postgresql,postgresql,EXECUTE foo ('good'),xml.sql,SAME,,"[('<foo/>good',)]"
postgresql,postgresql,CREATE VIEW xmlview1 AS SELECT xmlcomment('test'),xml.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW xmlview2 AS SELECT xmlconcat('hello', 'you')",xml.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW xmlview3 AS SELECT xmlelement(name element, xmlattributes (1 as "":one:"", 'deuce' as two), 'content&')",xml.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW xmlview5 AS SELECT xmlparse(content '<abc>x</abc>'),xml.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW xmlview6 AS SELECT xmlpi(name foo, 'bar')",xml.sql,SAME,,[]
postgresql,postgresql,"CREATE VIEW xmlview7 AS SELECT xmlroot(xml '<foo/>', version no value, standalone yes)",xml.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW xmlview8 AS SELECT xmlserialize(content 'good' as char(10)),xml.sql,SAME,,[]
postgresql,postgresql,CREATE VIEW xmlview9 AS SELECT xmlserialize(content 'good' as text),xml.sql,SAME,,[]
postgresql,postgresql,"SELECT table_name, view_definition FROM information_schema.views   WHERE table_name LIKE 'xmlview%' ORDER BY 1",xml.sql,SAME,,"[('xmlview1', "" SELECT xmlcomment('test'::text) AS xmlcomment;""), ('xmlview2', ' SELECT XMLCONCAT(\'hello\'::xml, \'you\'::xml) AS ""xmlconcat"";'), ('xmlview3', ' SELECT XMLELEMENT(NAME element, XMLATTRIBUTES(1 AS "":one:"", \'deuce\' AS two), \'content&\') AS ""xmlelement"";'), ('xmlview5', ' SELECT XMLPARSE(CONTENT \'<abc>x</abc>\'::text STRIP WHITESPACE) AS ""xmlparse"";'), ('xmlview6', ' SELECT XMLPI(NAME foo, \'bar\'::text) AS ""xmlpi"";'), ('xmlview7', ' SELECT XMLROOT(\'<foo/>\'::xml, VERSION NO VALUE, STANDALONE YES) AS ""xmlroot"";'), ('xmlview8', ' SELECT (XMLSERIALIZE(CONTENT \'good\'::xml AS character(10)))::character(10) AS ""xmlserialize"";'), ('xmlview9', ' SELECT XMLSERIALIZE(CONTENT \'good\'::xml AS text) AS ""xmlserialize"";')]"
postgresql,postgresql,"SELECT xpath('/value', data) FROM xmltest",xml.sql,SAME,,"[('{<value>one</value>}',), ('{<value>two</value>}',)]"
postgresql,postgresql,"SELECT xpath(NULL, NULL) IS NULL FROM xmltest",xml.sql,SAME,,"[(True,), (True,)]"
postgresql,postgresql,"SELECT xpath('//loc:piece/@id', '<local:data xmlns:local=""http://127.0.0.1""><local:piece id=""1"">number one</local:piece><local:piece id=""2"" /></local:data>', ARRAY[ARRAY['loc', 'http://127.0.0.1']])",xml.sql,SAME,,"[('{1,2}',)]"
postgresql,postgresql,"SELECT xpath('//loc:piece', '<local:data xmlns:local=""http://127.0.0.1""><local:piece id=""1"">number one</local:piece><local:piece id=""2"" /></local:data>', ARRAY[ARRAY['loc', 'http://127.0.0.1']])",xml.sql,SAME,,"[('{""<local:piece xmlns:local=\\""http://127.0.0.1\\"" id=\\""1\\"">number one</local:piece>"",""<local:piece xmlns:local=\\""http://127.0.0.1\\"" id=\\""2\\""/>""}',)]"
postgresql,postgresql,"SELECT xpath('//loc:piece', '<local:data xmlns:local=""http://127.0.0.1"" xmlns=""http://127.0.0.2""><local:piece id=""1""><internal>number one</internal><internal2/></local:piece><local:piece id=""2"" /></local:data>', ARRAY[ARRAY['loc', 'http://127.0.0.1']])",xml.sql,SAME,,"[('{""<local:piece xmlns:local=\\""http://127.0.0.1\\"" xmlns=\\""http://127.0.0.2\\"" id=\\""1\\""><internal>number one</internal><internal2/></local:piece>"",""<local:piece xmlns:local=\\""http://127.0.0.1\\"" id=\\""2\\""/>""}',)]"
postgresql,postgresql,"SELECT xpath('//b', '<a>one <b>two</b> three <b>etc</b></a>')",xml.sql,SAME,,"[('{<b>two</b>,<b>etc</b>}',)]"
postgresql,postgresql,"SELECT xpath('''<<invalid>>''', '<root/>')",xml.sql,SAME,,"[('{&lt;&lt;invalid&gt;&gt;}',)]"
postgresql,postgresql,"SELECT xpath('count(//*)', '<root><sub/><sub/></root>')",xml.sql,SAME,,"[('{3}',)]"
postgresql,postgresql,"SELECT xpath('count(//*)=0', '<root><sub/><sub/></root>')",xml.sql,SAME,,"[('{false}',)]"
postgresql,postgresql,"SELECT xpath('count(//*)=3', '<root><sub/><sub/></root>')",xml.sql,SAME,,"[('{true}',)]"
postgresql,postgresql,"SELECT xpath('name(/*)', '<root><sub/><sub/></root>')",xml.sql,SAME,,"[('{root}',)]"
postgresql,postgresql,"SELECT xpath('/nosuchtag', '<root/>')",xml.sql,SAME,,"[('{}',)]"
postgresql,postgresql,"SELECT xpath('root', '<root/>')",xml.sql,SAME,,"[('{<root/>}',)]"
postgresql,postgresql,SELECT xmlexists('//town[text() = ''Toronto'']' PASSING BY REF '<towns><town>Bidford-on-Avon</town><town>Cwmbran</town><town>Bristol</town></towns>'),xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT xmlexists('//town[text() = ''Cwmbran'']' PASSING BY REF '<towns><town>Bidford-on-Avon</town><town>Cwmbran</town><town>Bristol</town></towns>'),xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT xmlexists('count(/nosuchtag)' PASSING BY REF '<root/>'),xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT xpath_exists('//town[text() = ''Toronto'']','<towns><town>Bidford-on-Avon</town><town>Cwmbran</town><town>Bristol</town></towns>'::xml)",xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT xpath_exists('//town[text() = ''Cwmbran'']','<towns><town>Bidford-on-Avon</town><town>Cwmbran</town><town>Bristol</town></towns>'::xml)",xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT xpath_exists('count(/nosuchtag)', '<root/>'::xml)",xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT COUNT(id) FROM xmltest WHERE xmlexists('/menu/beer' PASSING data),xml.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(id) FROM xmltest WHERE xmlexists('/menu/beer' PASSING BY REF data BY REF),xml.sql,SAME,,"[(0,)]"
postgresql,postgresql,SELECT COUNT(id) FROM xmltest WHERE xmlexists('/menu/beers' PASSING BY REF data),xml.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT COUNT(id) FROM xmltest WHERE xmlexists('/menu/beers/name[text() = ''Molson'']' PASSING BY REF data),xml.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/menu/beer',data)",xml.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/menu/beers',data)",xml.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/menu/beers/name[text() = ''Molson'']',data)",xml.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/myns:menu/myns:beer',data,ARRAY[ARRAY['myns','http://myns.com']])",xml.sql,SAME,,"[(0,)]"
postgresql,postgresql,"SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/myns:menu/myns:beers',data,ARRAY[ARRAY['myns','http://myns.com']])",xml.sql,SAME,,"[(2,)]"
postgresql,postgresql,"SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/myns:menu/myns:beers/myns:name[text() = ''Molson'']',data,ARRAY[ARRAY['myns','http://myns.com']])",xml.sql,SAME,,"[(1,)]"
postgresql,postgresql,"SELECT COUNT(id) FROM xmltest, query WHERE xmlexists(expr PASSING BY REF data)",xml.sql,SAME,,"[(2,)]"
postgresql,postgresql,SELECT xml_is_well_formed_document('<foo>bar</foo>'),xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT xml_is_well_formed_document('abc'),xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT xml_is_well_formed_content('<foo>bar</foo>'),xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT xml_is_well_formed_content('abc'),xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SET xmloption TO DOCUMENT,xml.sql,SAME,,[]
postgresql,postgresql,SELECT xml_is_well_formed('abc'),xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT xml_is_well_formed('<>'),xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT xml_is_well_formed('<abc/>'),xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT xml_is_well_formed('<foo>bar</foo>'),xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT xml_is_well_formed('<foo>bar</foo'),xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT xml_is_well_formed('<foo><bar>baz</foo>'),xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT xml_is_well_formed('<local:data xmlns:local=""http://127.0.0.1""><local:piece id=""1"">number one</local:piece><local:piece id=""2"" /></local:data>')",xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT xml_is_well_formed('<pg:foo xmlns:pg=""http://postgresql.org/stuff"">bar</my:foo>')",xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,"SELECT xml_is_well_formed('<pg:foo xmlns:pg=""http://postgresql.org/stuff"">bar</pg:foo>')",xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SELECT xml_is_well_formed('<invalidentity>&</abc>'),xml.sql,SAME,,"[(False,)]"
postgresql,postgresql,SELECT xml_is_well_formed('<relativens xmlns=''relative''/>'),xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,SET xmloption TO CONTENT,xml.sql,SAME,,[]
postgresql,postgresql,SELECT xml_is_well_formed('abc'),xml.sql,SAME,,"[(True,)]"
postgresql,postgresql,"SELECT xpath('/*', '<relativens xmlns=''relative''/>')",xml.sql,SAME,,"[('{""<relativens xmlns=\\""relative\\""/>""}',)]"
postgresql,postgresql,"SELECT  xmltable.*    FROM (SELECT data FROM xmldata) x,         LATERAL XMLTABLE('/ROWS/ROW'                          PASSING data                          COLUMNS id int PATH '@id',                                   _id FOR ORDINALITY,                                   country_name text PATH 'COUNTRY_NAME/text()' NOT NULL,                                   country_id text PATH 'COUNTRY_ID',                                   region_id int PATH 'REGION_ID',                                   size float PATH 'SIZE',                                   unit text PATH 'SIZE/@unit',                                   premier_name text PATH 'PREMIER_NAME' DEFAULT 'not specified')",xml.sql,SAME,,"[(1, 1, 'Australia', 'AU', 3, None, None, 'not specified'), (2, 2, 'China', 'CN', 3, None, None, 'not specified'), (3, 3, 'HongKong', 'HK', 3, None, None, 'not specified'), (4, 4, 'India', 'IN', 3, None, None, 'not specified'), (5, 5, 'Japan', 'JP', 3, None, None, 'Sinzo Abe'), (6, 6, 'Singapore', 'SG', 3, 791.0, 'km', 'not specified')]"
postgresql,postgresql,"CREATE VIEW xmltableview1 AS SELECT  xmltable.*    FROM (SELECT data FROM xmldata) x,         LATERAL XMLTABLE('/ROWS/ROW'                          PASSING data                          COLUMNS id int PATH '@id',                                   _id FOR ORDINALITY,                                   country_name text PATH 'COUNTRY_NAME/text()' NOT NULL,                                   country_id text PATH 'COUNTRY_ID',                                   region_id int PATH 'REGION_ID',                                   size float PATH 'SIZE',                                   unit text PATH 'SIZE/@unit',                                   premier_name text PATH 'PREMIER_NAME' DEFAULT 'not specified')",xml.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM xmltableview1,xml.sql,SAME,,"[(1, 1, 'Australia', 'AU', 3, None, None, 'not specified'), (2, 2, 'China', 'CN', 3, None, None, 'not specified'), (3, 3, 'HongKong', 'HK', 3, None, None, 'not specified'), (4, 4, 'India', 'IN', 3, None, None, 'not specified'), (5, 5, 'Japan', 'JP', 3, None, None, 'Sinzo Abe'), (6, 6, 'Singapore', 'SG', 3, 791.0, 'km', 'not specified')]"
postgresql,postgresql,EXPLAIN (COSTS OFF) SELECT * FROM xmltableview1,xml.sql,SAME,,"[('Nested Loop',), ('  ->  Seq Scan on xmldata',), ('  ->  Table Function Scan on ""xmltable""',)]"
postgresql,postgresql,"EXPLAIN (COSTS OFF, VERBOSE) SELECT * FROM xmltableview1",xml.sql,SAME,,"[('Nested Loop',), ('  Output: ""xmltable"".id, ""xmltable""._id, ""xmltable"".country_name, ""xmltable"".country_id, ""xmltable"".region_id, ""xmltable"".size, ""xmltable"".unit, ""xmltable"".premier_name',), ('  ->  Seq Scan on public.xmldata',), ('        Output: xmldata.data',), ('  ->  Table Function Scan on ""xmltable""',), ('        Output: ""xmltable"".id, ""xmltable""._id, ""xmltable"".country_name, ""xmltable"".country_id, ""xmltable"".region_id, ""xmltable"".size, ""xmltable"".unit, ""xmltable"".premier_name',), (""        Table Function Call: XMLTABLE(('/ROWS/ROW'::text) PASSING (xmldata.data) COLUMNS id integer PATH ('@id'::text), _id FOR ORDINALITY, country_name text PATH ('COUNTRY_NAME/text()'::text) NOT NULL, country_id text PATH ('COUNTRY_ID'::text), region_id integer PATH ('REGION_ID'::text), size double precision PATH ('SIZE'::text), unit text PATH ('SIZE/@unit'::text), premier_name text DEFAULT ('not specified'::text) PATH ('PREMIER_NAME'::text))"",)]"
postgresql,postgresql,"SELECT * FROM XMLTABLE(XMLNAMESPACES('http://x.y' AS zz),                       '/zz:rows/zz:row'                       PASSING '<rows xmlns=""http://x.y""><row><a>10</a></row></rows>'                       COLUMNS a int PATH 'zz:a')",xml.sql,SAME,,"[(10,)]"
postgresql,postgresql,"CREATE VIEW xmltableview2 AS SELECT * FROM XMLTABLE(XMLNAMESPACES('http://x.y' AS zz),                       '/zz:rows/zz:row'                       PASSING '<rows xmlns=""http://x.y""><row><a>10</a></row></rows>'                       COLUMNS a int PATH 'zz:a')",xml.sql,SAME,,[]
postgresql,postgresql,SELECT * FROM xmltableview2,xml.sql,SAME,,"[(10,)]"
postgresql,postgresql,SELECT * FROM XMLTABLE('.'                        PASSING '<foo/>'                        COLUMNS a text PATH 'foo/namespace::node()'),xml.sql,SAME,,"[('http://www.w3.org/XML/1998/namespace',)]"
postgresql,postgresql,"PREPARE pp AS SELECT  xmltable.*    FROM (SELECT data FROM xmldata) x,         LATERAL XMLTABLE('/ROWS/ROW'                          PASSING data                          COLUMNS id int PATH '@id',                                   _id FOR ORDINALITY,                                   country_name text PATH 'COUNTRY_NAME' NOT NULL,                                   country_id text PATH 'COUNTRY_ID',                                   region_id int PATH 'REGION_ID',                                   size float PATH 'SIZE',                                   unit text PATH 'SIZE/@unit',                                   premier_name text PATH 'PREMIER_NAME' DEFAULT 'not specified')",xml.sql,SAME,,[]
postgresql,postgresql,EXECUTE pp,xml.sql,SAME,,"[(1, 1, 'Australia', 'AU', 3, None, None, 'not specified'), (2, 2, 'China', 'CN', 3, None, None, 'not specified'), (3, 3, 'HongKong', 'HK', 3, None, None, 'not specified'), (4, 4, 'India', 'IN', 3, None, None, 'not specified'), (5, 5, 'Japan', 'JP', 3, None, None, 'Sinzo Abe'), (6, 6, 'Singapore', 'SG', 3, 791.0, 'km', 'not specified')]"
postgresql,postgresql,"SELECT xmltable.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS ""COUNTRY_NAME"" text, ""REGION_ID"" int)",xml.sql,SAME,,"[('India', 3), ('Japan', 3)]"
postgresql,postgresql,"SELECT xmltable.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS id FOR ORDINALITY, ""COUNTRY_NAME"" text, ""REGION_ID"" int)",xml.sql,SAME,,"[(1, 'India', 3), (2, 'Japan', 3)]"
postgresql,postgresql,"SELECT xmltable.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS id int PATH '@id', ""COUNTRY_NAME"" text, ""REGION_ID"" int)",xml.sql,SAME,,"[(4, 'India', 3), (5, 'Japan', 3)]"
postgresql,postgresql,"SELECT xmltable.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS id int PATH '@id')",xml.sql,SAME,,"[(4,), (5,)]"
postgresql,postgresql,"SELECT xmltable.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS id FOR ORDINALITY)",xml.sql,SAME,,"[(1,), (2,)]"
postgresql,postgresql,"SELECT xmltable.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS id int PATH '@id', ""COUNTRY_NAME"" text, ""REGION_ID"" int, rawdata xml PATH '.')",xml.sql,SAME,,"[(4, 'India', 3, '<ROW id=""4"">\n  <COUNTRY_ID>IN</COUNTRY_ID>\n  <COUNTRY_NAME>India</COUNTRY_NAME>\n  <REGION_ID>3</REGION_ID>\n</ROW>'), (5, 'Japan', 3, '<ROW id=""5"">\n  <COUNTRY_ID>JP</COUNTRY_ID>\n  <COUNTRY_NAME>Japan</COUNTRY_NAME>\n  <REGION_ID>3</REGION_ID><PREMIER_NAME>Sinzo Abe</PREMIER_NAME>\n</ROW>')]"
postgresql,postgresql,"SELECT xmltable.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS id int PATH '@id', ""COUNTRY_NAME"" text, ""REGION_ID"" int, rawdata xml PATH './*')",xml.sql,SAME,,"[(4, 'India', 3, '<COUNTRY_ID>IN</COUNTRY_ID><COUNTRY_NAME>India</COUNTRY_NAME><REGION_ID>3</REGION_ID>'), (5, 'Japan', 3, '<COUNTRY_ID>JP</COUNTRY_ID><COUNTRY_NAME>Japan</COUNTRY_NAME><REGION_ID>3</REGION_ID><PREMIER_NAME>Sinzo Abe</PREMIER_NAME>')]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT  xmltable.*    FROM (SELECT data FROM xmldata) x,         LATERAL XMLTABLE('/ROWS/ROW'                          PASSING data                          COLUMNS id int PATH '@id',                                   _id FOR ORDINALITY,                                   country_name text PATH 'COUNTRY_NAME' NOT NULL,                                   country_id text PATH 'COUNTRY_ID',                                   region_id int PATH 'REGION_ID',                                   size float PATH 'SIZE',                                   unit text PATH 'SIZE/@unit',                                   premier_name text PATH 'PREMIER_NAME' DEFAULT 'not specified')",xml.sql,SAME,,"[('Nested Loop',), ('  Output: ""xmltable"".id, ""xmltable""._id, ""xmltable"".country_name, ""xmltable"".country_id, ""xmltable"".region_id, ""xmltable"".size, ""xmltable"".unit, ""xmltable"".premier_name',), ('  ->  Seq Scan on public.xmldata',), ('        Output: xmldata.data',), ('  ->  Table Function Scan on ""xmltable""',), ('        Output: ""xmltable"".id, ""xmltable""._id, ""xmltable"".country_name, ""xmltable"".country_id, ""xmltable"".region_id, ""xmltable"".size, ""xmltable"".unit, ""xmltable"".premier_name',), (""        Table Function Call: XMLTABLE(('/ROWS/ROW'::text) PASSING (xmldata.data) COLUMNS id integer PATH ('@id'::text), _id FOR ORDINALITY, country_name text PATH ('COUNTRY_NAME'::text) NOT NULL, country_id text PATH ('COUNTRY_ID'::text), region_id integer PATH ('REGION_ID'::text), size double precision PATH ('SIZE'::text), unit text PATH ('SIZE/@unit'::text), premier_name text DEFAULT ('not specified'::text) PATH ('PREMIER_NAME'::text))"",)]"
postgresql,postgresql,"SELECT xmltable.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS ""COUNTRY_NAME"" text, ""REGION_ID"" int) WHERE ""COUNTRY_NAME"" = 'Japan'",xml.sql,SAME,,"[('Japan', 3)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT f.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS ""COUNTRY_NAME"" text, ""REGION_ID"" int) AS f WHERE ""COUNTRY_NAME"" = 'Japan'",xml.sql,SAME,,"[('Nested Loop',), ('  Output: f.""COUNTRY_NAME"", f.""REGION_ID""',), ('  ->  Seq Scan on public.xmldata',), ('        Output: xmldata.data',), ('  ->  Table Function Scan on ""xmltable"" f',), ('        Output: f.""COUNTRY_NAME"", f.""REGION_ID""',), ('        Table Function Call: XMLTABLE((\'/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]\'::text) PASSING (xmldata.data) COLUMNS ""COUNTRY_NAME"" text, ""REGION_ID"" integer)',), ('        Filter: (f.""COUNTRY_NAME"" = \'Japan\'::text)',)]"
postgresql,postgresql,"EXPLAIN (VERBOSE, FORMAT JSON, COSTS OFF) SELECT f.* FROM xmldata, LATERAL xmltable('/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]' PASSING data COLUMNS ""COUNTRY_NAME"" text, ""REGION_ID"" int) AS f WHERE ""COUNTRY_NAME"" = 'Japan'",xml.sql,SAME,,"[([{'Plan': {'Node Type': 'Nested Loop', 'Parallel Aware': False, 'Async Capable': False, 'Join Type': 'Inner', 'Output': ['f.""COUNTRY_NAME""', 'f.""REGION_ID""'], 'Inner Unique': False, 'Plans': [{'Node Type': 'Seq Scan', 'Parent Relationship': 'Outer', 'Parallel Aware': False, 'Async Capable': False, 'Relation Name': 'xmldata', 'Schema': 'public', 'Alias': 'xmldata', 'Output': ['xmldata.data']}, {'Node Type': 'Table Function Scan', 'Parent Relationship': 'Inner', 'Parallel Aware': False, 'Async Capable': False, 'Table Function Name': 'xmltable', 'Alias': 'f', 'Output': ['f.""COUNTRY_NAME""', 'f.""REGION_ID""'], 'Table Function Call': 'XMLTABLE((\'/ROWS/ROW[COUNTRY_NAME=""Japan"" or COUNTRY_NAME=""India""]\'::text) PASSING (xmldata.data) COLUMNS ""COUNTRY_NAME"" text, ""REGION_ID"" integer)', 'Filter': '(f.""COUNTRY_NAME"" = \'Japan\'::text)'}]}}],)]"
postgresql,postgresql,"SELECT  xmltable.*    FROM (SELECT data FROM xmldata) x,         LATERAL XMLTABLE('/ROWS/ROW'                          PASSING data                          COLUMNS id int PATH '@id',                                   _id FOR ORDINALITY,                                   country_name text PATH 'COUNTRY_NAME' NOT NULL,                                   country_id text PATH 'COUNTRY_ID',                                   region_id int PATH 'REGION_ID',                                   size float PATH 'SIZE',                                   unit text PATH 'SIZE/@unit',                                   premier_name text PATH 'PREMIER_NAME' DEFAULT 'not specified')",xml.sql,SAME,,"[(1, 1, 'Australia', 'AU', 3, None, None, 'not specified'), (2, 2, 'China', 'CN', 3, None, None, 'not specified'), (3, 3, 'HongKong', 'HK', 3, None, None, 'not specified'), (4, 4, 'India', 'IN', 3, None, None, 'not specified'), (5, 5, 'Japan', 'JP', 3, None, None, 'Sinzo Abe'), (6, 6, 'Singapore', 'SG', 3, 791.0, 'km', 'not specified'), (10, 1, 'Czech Republic', 'CZ', 2, None, None, 'Milos Zeman'), (11, 2, 'Germany', 'DE', 2, None, None, 'not specified'), (12, 3, 'France', 'FR', 2, None, None, 'not specified'), (20, 1, 'Egypt', 'EG', 1, None, None, 'not specified'), (21, 2, 'Sudan', 'SD', 1, None, None, 'not specified')]"
postgresql,postgresql,"SELECT  xmltable.*    FROM (SELECT data FROM xmldata) x,         LATERAL XMLTABLE('/ROWS/ROW'                          PASSING data                          COLUMNS id int PATH '@id',                                   _id FOR ORDINALITY,                                   country_name text PATH 'COUNTRY_NAME' NOT NULL,                                   country_id text PATH 'COUNTRY_ID',                                   region_id int PATH 'REGION_ID',                                   size float PATH 'SIZE',                                   unit text PATH 'SIZE/@unit',                                   premier_name text PATH 'PREMIER_NAME' DEFAULT 'not specified')   WHERE region_id = 2",xml.sql,SAME,,"[(10, 1, 'Czech Republic', 'CZ', 2, None, None, 'Milos Zeman'), (11, 2, 'Germany', 'DE', 2, None, None, 'not specified'), (12, 3, 'France', 'FR', 2, None, None, 'not specified')]"
postgresql,postgresql,"EXPLAIN (VERBOSE, COSTS OFF) SELECT  xmltable.*    FROM (SELECT data FROM xmldata) x,         LATERAL XMLTABLE('/ROWS/ROW'                          PASSING data                          COLUMNS id int PATH '@id',                                   _id FOR ORDINALITY,                                   country_name text PATH 'COUNTRY_NAME' NOT NULL,                                   country_id text PATH 'COUNTRY_ID',                                   region_id int PATH 'REGION_ID',                                   size float PATH 'SIZE',                                   unit text PATH 'SIZE/@unit',                                   premier_name text PATH 'PREMIER_NAME' DEFAULT 'not specified')   WHERE region_id = 2",xml.sql,SAME,,"[('Nested Loop',), ('  Output: ""xmltable"".id, ""xmltable""._id, ""xmltable"".country_name, ""xmltable"".country_id, ""xmltable"".region_id, ""xmltable"".size, ""xmltable"".unit, ""xmltable"".premier_name',), ('  ->  Seq Scan on public.xmldata',), ('        Output: xmldata.data',), ('  ->  Table Function Scan on ""xmltable""',), ('        Output: ""xmltable"".id, ""xmltable""._id, ""xmltable"".country_name, ""xmltable"".country_id, ""xmltable"".region_id, ""xmltable"".size, ""xmltable"".unit, ""xmltable"".premier_name',), (""        Table Function Call: XMLTABLE(('/ROWS/ROW'::text) PASSING (xmldata.data) COLUMNS id integer PATH ('@id'::text), _id FOR ORDINALITY, country_name text PATH ('COUNTRY_NAME'::text) NOT NULL, country_id text PATH ('COUNTRY_ID'::text), region_id integer PATH ('REGION_ID'::text), size double precision PATH ('SIZE'::text), unit text PATH ('SIZE/@unit'::text), premier_name text DEFAULT ('not specified'::text) PATH ('PREMIER_NAME'::text))"",), ('        Filter: (""xmltable"".region_id = 2)',)]"
postgresql,postgresql,"WITH    x AS (SELECT proname, proowner, procost::numeric, pronargs,                 array_to_string(proargnames,',') as proargnames,                 case when proargtypes <> '' then array_to_string(proargtypes::oid[],',') end as proargtypes            FROM pg_proc WHERE proname = 'f_leak'),    y AS (SELECT xmlelement(name proc,                            xmlforest(proname, proowner,                                      procost, pronargs,                                      proargnames, proargtypes)) as proc            FROM x),    z AS (SELECT xmltable.*            FROM y,                 LATERAL xmltable('/proc' PASSING proc                                  COLUMNS proname name,                                          proowner oid,                                          procost float,                                          pronargs int,                                          proargnames text,                                          proargtypes text))    SELECT * FROM z    EXCEPT SELECT * FROM x",xml.sql,SAME,,[]
postgresql,postgresql,"WITH    x AS (SELECT proname, proowner, procost::numeric, pronargs,                 array_to_string(proargnames,',') as proargnames,                 case when proargtypes <> '' then array_to_string(proargtypes::oid[],',') end as proargtypes            FROM pg_proc),    y AS (SELECT xmlelement(name data,                            xmlagg(xmlelement(name proc,                                              xmlforest(proname, proowner, procost,                                                        pronargs, proargnames, proargtypes)))) as doc            FROM x),    z AS (SELECT xmltable.*            FROM y,                 LATERAL xmltable('/data/proc' PASSING doc                                  COLUMNS proname name,                                          proowner oid,                                          procost float,                                          pronargs int,                                          proargnames text,                                          proargtypes text))    SELECT * FROM z    EXCEPT SELECT * FROM x",xml.sql,SAME,,[]
postgresql,postgresql,"SELECT xmltable.* FROM xmltest2, LATERAL xmltable('/d/r' PASSING x COLUMNS a int PATH '' || lower(_path) || 'c')",xml.sql,SAME,,"[(1,), (2,), (3,), (2,)]"
postgresql,postgresql,"SELECT xmltable.* FROM xmltest2, LATERAL xmltable(('/d/r/' || lower(_path) || 'c') PASSING x COLUMNS a int PATH '.')",xml.sql,SAME,,"[(1,), (2,), (3,), (2,)]"
postgresql,postgresql,"SELECT xmltable.* FROM xmltest2, LATERAL xmltable(('/d/r/' || lower(_path) || 'c') PASSING x COLUMNS a int PATH 'x' DEFAULT ascii(_path) - 54)",xml.sql,SAME,,"[(11,), (12,), (13,), (14,)]"
postgresql,postgresql,"SELECT * FROM XMLTABLE('*' PASSING '<a>a</a>' COLUMNS a xml PATH '.', b text PATH '.', c text PATH '""hi""', d boolean PATH '. = ""a""', e integer PATH 'string-length(.)')",xml.sql,SAME,,"[('<a>a</a>', 'a', 'hi', True, 1)]"
postgresql,postgresql,CREATE SCHEMA testxmlschema,xmlmap.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN testxmldomain AS varchar,xmlmap.sql,SAME,,[]
postgresql,postgresql,ALTER TABLE testxmlschema.test2 DROP COLUMN aaa,xmlmap.sql,SAME,,[]
postgresql,postgresql,"SELECT table_to_xml('testxmlschema.test1', false, false, '')",xmlmap.sql,SAME,,"[('<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n\n<row>\n  <a>1</a>\n  <b>one</b>\n</row>\n\n<row>\n  <a>2</a>\n  <b>two</b>\n</row>\n\n<row>\n  <a>-1</a>\n</row>\n\n</test1>\n',)]"
postgresql,postgresql,"SELECT table_to_xml('testxmlschema.test1', true, false, 'foo')",xmlmap.sql,SAME,,"[('<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""foo"">\n\n<row>\n  <a>1</a>\n  <b>one</b>\n</row>\n\n<row>\n  <a>2</a>\n  <b>two</b>\n</row>\n\n<row>\n  <a>-1</a>\n  <b xsi:nil=""true""/>\n</row>\n\n</test1>\n',)]"
postgresql,postgresql,"SELECT table_to_xml('testxmlschema.test1', false, true, '')",xmlmap.sql,SAME,,"[('<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>1</a>\n  <b>one</b>\n</test1>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>2</a>\n  <b>two</b>\n</test1>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>-1</a>\n</test1>\n\n',)]"
postgresql,postgresql,"SELECT table_to_xml('testxmlschema.test1', true, true, '')",xmlmap.sql,SAME,,"[('<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>1</a>\n  <b>one</b>\n</test1>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>2</a>\n  <b>two</b>\n</test1>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>-1</a>\n  <b xsi:nil=""true""/>\n</test1>\n\n',)]"
postgresql,postgresql,"SELECT table_to_xml('testxmlschema.test2', false, false, '')",xmlmap.sql,SAME,,"[('<test2 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n\n<row>\n  <z>55</z>\n  <y>abc</y>\n  <x>def   </x>\n  <w>98.60</w>\n  <v>2</v>\n  <u>999</u>\n  <t>0</t>\n  <s>21:07:00</s>\n  <stz>21:11:00+05</stz>\n  <r>2009-06-08T21:07:30</r>\n  <rtz>2009-06-09T06:07:30+02:00</rtz>\n  <q>2009-06-08</q>\n  <o>ABC</o>\n  <n>true</n>\n  <m>WFla</m>\n</row>\n\n</test2>\n',)]"
postgresql,postgresql,"SELECT table_to_xmlschema('testxmlschema.test1', false, false, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" minOccurs=""0""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:complexType name=""TableType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""row"" type=""RowType.test_db.testxmlschema.test1"" minOccurs=""0"" maxOccurs=""unbounded""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""test1"" type=""TableType.test_db.testxmlschema.test1""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,"SELECT table_to_xmlschema('testxmlschema.test1', true, false, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" nillable=""true""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" nillable=""true""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:complexType name=""TableType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""row"" type=""RowType.test_db.testxmlschema.test1"" minOccurs=""0"" maxOccurs=""unbounded""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""test1"" type=""TableType.test_db.testxmlschema.test1""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,"SELECT table_to_xmlschema('testxmlschema.test1', false, true, 'foo')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema""\n    targetNamespace=""foo""\n    elementFormDefault=""qualified"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" minOccurs=""0""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""test1"" type=""RowType.test_db.testxmlschema.test1""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,"SELECT table_to_xmlschema('testxmlschema.test1', true, true, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" nillable=""true""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" nillable=""true""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""test1"" type=""RowType.test_db.testxmlschema.test1""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,"SELECT table_to_xmlschema('testxmlschema.test2', false, false, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""VARCHAR"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""CHAR"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""NUMERIC"">\n</xsd:simpleType>\n\n<xsd:simpleType name=""SMALLINT"">\n  <xsd:restriction base=""xsd:short"">\n    <xsd:maxInclusive value=""32767""/>\n    <xsd:minInclusive value=""-32768""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""BIGINT"">\n  <xsd:restriction base=""xsd:long"">\n    <xsd:maxInclusive value=""9223372036854775807""/>\n    <xsd:minInclusive value=""-9223372036854775808""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""REAL"">\n  <xsd:restriction base=""xsd:float""></xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIME"">\n  <xsd:restriction base=""xsd:time"">\n    <xsd:pattern value=""\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIME_WTZ"">\n  <xsd:restriction base=""xsd:time"">\n    <xsd:pattern value=""\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?(\\+|-)\\p{Nd}{2}:\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIMESTAMP"">\n  <xsd:restriction base=""xsd:dateTime"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}T\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIMESTAMP_WTZ"">\n  <xsd:restriction base=""xsd:dateTime"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}T\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?(\\+|-)\\p{Nd}{2}:\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""DATE"">\n  <xsd:restriction base=""xsd:date"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType mixed=""true"">\n  <xsd:sequence>\n    <xsd:any name=""element"" minOccurs=""0"" maxOccurs=""unbounded"" processContents=""skip""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:simpleType name=""Domain.test_db.public.testxmldomain"">\n  <xsd:restriction base=""VARCHAR""/>\n</xsd:simpleType>\n\n<xsd:simpleType name=""BOOLEAN"">\n  <xsd:restriction base=""xsd:boolean""></xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.bytea"">\n  <xsd:restriction base=""xsd:base64Binary"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType.test_db.testxmlschema.test2"">\n  <xsd:sequence>\n    <xsd:element name=""z"" type=""INTEGER"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""y"" type=""VARCHAR"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""x"" type=""CHAR"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""w"" type=""NUMERIC"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""v"" type=""SMALLINT"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""u"" type=""BIGINT"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""t"" type=""REAL"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""s"" type=""TIME"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""stz"" type=""TIME_WTZ"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""r"" type=""TIMESTAMP"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""rtz"" type=""TIMESTAMP_WTZ"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""q"" type=""DATE"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""p"" type=""XML"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""o"" type=""Domain.test_db.public.testxmldomain"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""n"" type=""BOOLEAN"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""m"" type=""UDT.test_db.pg_catalog.bytea"" minOccurs=""0""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:complexType name=""TableType.test_db.testxmlschema.test2"">\n  <xsd:sequence>\n    <xsd:element name=""row"" type=""RowType.test_db.testxmlschema.test2"" minOccurs=""0"" maxOccurs=""unbounded""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""test2"" type=""TableType.test_db.testxmlschema.test2""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,"SELECT table_to_xml_and_xmlschema('testxmlschema.test1', false, false, '')",xmlmap.sql,SAME,,"[('<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""#"">\n\n<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" minOccurs=""0""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:complexType name=""TableType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""row"" type=""RowType.test_db.testxmlschema.test1"" minOccurs=""0"" maxOccurs=""unbounded""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""test1"" type=""TableType.test_db.testxmlschema.test1""/>\n\n</xsd:schema>\n\n<row>\n  <a>1</a>\n  <b>one</b>\n</row>\n\n<row>\n  <a>2</a>\n  <b>two</b>\n</row>\n\n<row>\n  <a>-1</a>\n</row>\n\n</test1>\n',)]"
postgresql,postgresql,"SELECT table_to_xml_and_xmlschema('testxmlschema.test1', true, false, '')",xmlmap.sql,SAME,,"[('<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""#"">\n\n<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" nillable=""true""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" nillable=""true""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:complexType name=""TableType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""row"" type=""RowType.test_db.testxmlschema.test1"" minOccurs=""0"" maxOccurs=""unbounded""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""test1"" type=""TableType.test_db.testxmlschema.test1""/>\n\n</xsd:schema>\n\n<row>\n  <a>1</a>\n  <b>one</b>\n</row>\n\n<row>\n  <a>2</a>\n  <b>two</b>\n</row>\n\n<row>\n  <a>-1</a>\n  <b xsi:nil=""true""/>\n</row>\n\n</test1>\n',)]"
postgresql,postgresql,"SELECT table_to_xml_and_xmlschema('testxmlschema.test1', false, true, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" minOccurs=""0""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""test1"" type=""RowType.test_db.testxmlschema.test1""/>\n\n</xsd:schema>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>1</a>\n  <b>one</b>\n</test1>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>2</a>\n  <b>two</b>\n</test1>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>-1</a>\n</test1>\n\n',)]"
postgresql,postgresql,"SELECT table_to_xml_and_xmlschema('testxmlschema.test1', true, true, 'foo')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema""\n    targetNamespace=""foo""\n    elementFormDefault=""qualified"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType.test_db.testxmlschema.test1"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" nillable=""true""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" nillable=""true""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""test1"" type=""RowType.test_db.testxmlschema.test1""/>\n\n</xsd:schema>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""foo"">\n  <a>1</a>\n  <b>one</b>\n</test1>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""foo"">\n  <a>2</a>\n  <b>two</b>\n</test1>\n\n<test1 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""foo"">\n  <a>-1</a>\n  <b xsi:nil=""true""/>\n</test1>\n\n',)]"
postgresql,postgresql,"SELECT query_to_xml('SELECT * FROM testxmlschema.test1', false, false, '')",xmlmap.sql,SAME,,"[('<table xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n\n<row>\n  <a>1</a>\n  <b>one</b>\n</row>\n\n<row>\n  <a>2</a>\n  <b>two</b>\n</row>\n\n<row>\n  <a>-1</a>\n</row>\n\n</table>\n',)]"
postgresql,postgresql,"SELECT query_to_xmlschema('SELECT * FROM testxmlschema.test1', false, false, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" minOccurs=""0""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:complexType name=""TableType"">\n  <xsd:sequence>\n    <xsd:element name=""row"" type=""RowType"" minOccurs=""0"" maxOccurs=""unbounded""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""table"" type=""TableType""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,"SELECT query_to_xml_and_xmlschema('SELECT * FROM testxmlschema.test1', true, true, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" nillable=""true""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" nillable=""true""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""row"" type=""RowType""/>\n\n</xsd:schema>\n\n<row xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>1</a>\n  <b>one</b>\n</row>\n\n<row xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>2</a>\n  <b>two</b>\n</row>\n\n<row xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>-1</a>\n  <b xsi:nil=""true""/>\n</row>\n\n',)]"
postgresql,postgresql,"DECLARE xc CURSOR WITH HOLD FOR SELECT * FROM testxmlschema.test1 ORDER BY 1, 2",xmlmap.sql,SAME,,[]
postgresql,postgresql,"SELECT cursor_to_xml('xc'::refcursor, 5, false, true, '')",xmlmap.sql,SAME,,"[('<row xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>-1</a>\n</row>\n\n<row xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>1</a>\n  <b>one</b>\n</row>\n\n<row xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <a>2</a>\n  <b>two</b>\n</row>\n\n',)]"
postgresql,postgresql,"SELECT cursor_to_xmlschema('xc'::refcursor, false, true, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" minOccurs=""0""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" minOccurs=""0""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""row"" type=""RowType""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,MOVE BACKWARD ALL IN xc,xmlmap.sql,SAME,,[]
postgresql,postgresql,"SELECT cursor_to_xml('xc'::refcursor, 5, true, false, '')",xmlmap.sql,SAME,,"[('<table xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n\n<row>\n  <a>-1</a>\n  <b xsi:nil=""true""/>\n</row>\n\n<row>\n  <a>1</a>\n  <b>one</b>\n</row>\n\n<row>\n  <a>2</a>\n  <b>two</b>\n</row>\n\n</table>\n',)]"
postgresql,postgresql,"SELECT cursor_to_xmlschema('xc'::refcursor, true, false, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""RowType"">\n  <xsd:sequence>\n    <xsd:element name=""a"" type=""INTEGER"" nillable=""true""></xsd:element>\n    <xsd:element name=""b"" type=""UDT.test_db.pg_catalog.text"" nillable=""true""></xsd:element>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:complexType name=""TableType"">\n  <xsd:sequence>\n    <xsd:element name=""row"" type=""RowType"" minOccurs=""0"" maxOccurs=""unbounded""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""table"" type=""TableType""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,"SELECT schema_to_xml('testxmlschema', false, true, '')",xmlmap.sql,SAME,,"[('<testxmlschema xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n\n<test1>\n  <a>1</a>\n  <b>one</b>\n</test1>\n\n<test1>\n  <a>2</a>\n  <b>two</b>\n</test1>\n\n<test1>\n  <a>-1</a>\n</test1>\n\n\n<test2>\n  <z>55</z>\n  <y>abc</y>\n  <x>def   </x>\n  <w>98.60</w>\n  <v>2</v>\n  <u>999</u>\n  <t>0</t>\n  <s>21:07:00</s>\n  <stz>21:11:00+05</stz>\n  <r>2009-06-08T21:07:30</r>\n  <rtz>2009-06-09T06:07:30+02:00</rtz>\n  <q>2009-06-08</q>\n  <o>ABC</o>\n  <n>true</n>\n  <m>WFla</m>\n</test2>\n\n\n</testxmlschema>\n',)]"
postgresql,postgresql,"SELECT schema_to_xml('testxmlschema', true, false, '')",xmlmap.sql,SAME,,"[('<testxmlschema xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n\n<test1>\n\n<row>\n  <a>1</a>\n  <b>one</b>\n</row>\n\n<row>\n  <a>2</a>\n  <b>two</b>\n</row>\n\n<row>\n  <a>-1</a>\n  <b xsi:nil=""true""/>\n</row>\n\n</test1>\n\n<test2>\n\n<row>\n  <z>55</z>\n  <y>abc</y>\n  <x>def   </x>\n  <w>98.60</w>\n  <v>2</v>\n  <u>999</u>\n  <t>0</t>\n  <s>21:07:00</s>\n  <stz>21:11:00+05</stz>\n  <r>2009-06-08T21:07:30</r>\n  <rtz>2009-06-09T06:07:30+02:00</rtz>\n  <q>2009-06-08</q>\n  <p xsi:nil=""true""/>\n  <o>ABC</o>\n  <n>true</n>\n  <m>WFla</m>\n</row>\n\n</test2>\n\n</testxmlschema>\n',)]"
postgresql,postgresql,"SELECT schema_to_xmlschema('testxmlschema', false, true, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""VARCHAR"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""CHAR"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""NUMERIC"">\n</xsd:simpleType>\n\n<xsd:simpleType name=""SMALLINT"">\n  <xsd:restriction base=""xsd:short"">\n    <xsd:maxInclusive value=""32767""/>\n    <xsd:minInclusive value=""-32768""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""BIGINT"">\n  <xsd:restriction base=""xsd:long"">\n    <xsd:maxInclusive value=""9223372036854775807""/>\n    <xsd:minInclusive value=""-9223372036854775808""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""REAL"">\n  <xsd:restriction base=""xsd:float""></xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIME"">\n  <xsd:restriction base=""xsd:time"">\n    <xsd:pattern value=""\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIME_WTZ"">\n  <xsd:restriction base=""xsd:time"">\n    <xsd:pattern value=""\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?(\\+|-)\\p{Nd}{2}:\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIMESTAMP"">\n  <xsd:restriction base=""xsd:dateTime"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}T\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIMESTAMP_WTZ"">\n  <xsd:restriction base=""xsd:dateTime"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}T\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?(\\+|-)\\p{Nd}{2}:\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""DATE"">\n  <xsd:restriction base=""xsd:date"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType mixed=""true"">\n  <xsd:sequence>\n    <xsd:any name=""element"" minOccurs=""0"" maxOccurs=""unbounded"" processContents=""skip""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:simpleType name=""Domain.test_db.public.testxmldomain"">\n  <xsd:restriction base=""VARCHAR""/>\n</xsd:simpleType>\n\n<xsd:simpleType name=""BOOLEAN"">\n  <xsd:restriction base=""xsd:boolean""></xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.bytea"">\n  <xsd:restriction base=""xsd:base64Binary"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""SchemaType.test_db.testxmlschema"">\n  <xsd:sequence>\n    <xsd:element name=""test1"" type=""RowType.test_db.testxmlschema.test1"" minOccurs=""0"" maxOccurs=""unbounded""/>\n    <xsd:element name=""test2"" type=""RowType.test_db.testxmlschema.test2"" minOccurs=""0"" maxOccurs=""unbounded""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""testxmlschema"" type=""SchemaType.test_db.testxmlschema""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,"SELECT schema_to_xmlschema('testxmlschema', true, false, '')",xmlmap.sql,SAME,,"[('<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""VARCHAR"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""CHAR"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""NUMERIC"">\n</xsd:simpleType>\n\n<xsd:simpleType name=""SMALLINT"">\n  <xsd:restriction base=""xsd:short"">\n    <xsd:maxInclusive value=""32767""/>\n    <xsd:minInclusive value=""-32768""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""BIGINT"">\n  <xsd:restriction base=""xsd:long"">\n    <xsd:maxInclusive value=""9223372036854775807""/>\n    <xsd:minInclusive value=""-9223372036854775808""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""REAL"">\n  <xsd:restriction base=""xsd:float""></xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIME"">\n  <xsd:restriction base=""xsd:time"">\n    <xsd:pattern value=""\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIME_WTZ"">\n  <xsd:restriction base=""xsd:time"">\n    <xsd:pattern value=""\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?(\\+|-)\\p{Nd}{2}:\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIMESTAMP"">\n  <xsd:restriction base=""xsd:dateTime"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}T\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIMESTAMP_WTZ"">\n  <xsd:restriction base=""xsd:dateTime"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}T\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?(\\+|-)\\p{Nd}{2}:\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""DATE"">\n  <xsd:restriction base=""xsd:date"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType mixed=""true"">\n  <xsd:sequence>\n    <xsd:any name=""element"" minOccurs=""0"" maxOccurs=""unbounded"" processContents=""skip""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:simpleType name=""Domain.test_db.public.testxmldomain"">\n  <xsd:restriction base=""VARCHAR""/>\n</xsd:simpleType>\n\n<xsd:simpleType name=""BOOLEAN"">\n  <xsd:restriction base=""xsd:boolean""></xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.bytea"">\n  <xsd:restriction base=""xsd:base64Binary"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""SchemaType.test_db.testxmlschema"">\n  <xsd:all>\n    <xsd:element name=""test1"" type=""TableType.test_db.testxmlschema.test1""/>\n    <xsd:element name=""test2"" type=""TableType.test_db.testxmlschema.test2""/>\n  </xsd:all>\n</xsd:complexType>\n\n<xsd:element name=""testxmlschema"" type=""SchemaType.test_db.testxmlschema""/>\n\n</xsd:schema>',)]"
postgresql,postgresql,"SELECT schema_to_xml_and_xmlschema('testxmlschema', true, true, 'foo')",xmlmap.sql,SAME,,"[('<testxmlschema xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""foo"" xsi:schemaLocation=""foo #"">\n\n<xsd:schema\n    xmlns:xsd=""http://www.w3.org/2001/XMLSchema""\n    targetNamespace=""foo""\n    elementFormDefault=""qualified"">\n\n<xsd:simpleType name=""INTEGER"">\n  <xsd:restriction base=""xsd:int"">\n    <xsd:maxInclusive value=""2147483647""/>\n    <xsd:minInclusive value=""-2147483648""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.text"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""VARCHAR"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""CHAR"">\n  <xsd:restriction base=""xsd:string"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""NUMERIC"">\n</xsd:simpleType>\n\n<xsd:simpleType name=""SMALLINT"">\n  <xsd:restriction base=""xsd:short"">\n    <xsd:maxInclusive value=""32767""/>\n    <xsd:minInclusive value=""-32768""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""BIGINT"">\n  <xsd:restriction base=""xsd:long"">\n    <xsd:maxInclusive value=""9223372036854775807""/>\n    <xsd:minInclusive value=""-9223372036854775808""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""REAL"">\n  <xsd:restriction base=""xsd:float""></xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIME"">\n  <xsd:restriction base=""xsd:time"">\n    <xsd:pattern value=""\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIME_WTZ"">\n  <xsd:restriction base=""xsd:time"">\n    <xsd:pattern value=""\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?(\\+|-)\\p{Nd}{2}:\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIMESTAMP"">\n  <xsd:restriction base=""xsd:dateTime"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}T\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""TIMESTAMP_WTZ"">\n  <xsd:restriction base=""xsd:dateTime"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}T\\p{Nd}{2}:\\p{Nd}{2}:\\p{Nd}{2}(.\\p{Nd}+)?(\\+|-)\\p{Nd}{2}:\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""DATE"">\n  <xsd:restriction base=""xsd:date"">\n    <xsd:pattern value=""\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}""/>\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType mixed=""true"">\n  <xsd:sequence>\n    <xsd:any name=""element"" minOccurs=""0"" maxOccurs=""unbounded"" processContents=""skip""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:simpleType name=""Domain.test_db.public.testxmldomain"">\n  <xsd:restriction base=""VARCHAR""/>\n</xsd:simpleType>\n\n<xsd:simpleType name=""BOOLEAN"">\n  <xsd:restriction base=""xsd:boolean""></xsd:restriction>\n</xsd:simpleType>\n\n<xsd:simpleType name=""UDT.test_db.pg_catalog.bytea"">\n  <xsd:restriction base=""xsd:base64Binary"">\n  </xsd:restriction>\n</xsd:simpleType>\n\n<xsd:complexType name=""SchemaType.test_db.testxmlschema"">\n  <xsd:sequence>\n    <xsd:element name=""test1"" type=""RowType.test_db.testxmlschema.test1"" minOccurs=""0"" maxOccurs=""unbounded""/>\n    <xsd:element name=""test2"" type=""RowType.test_db.testxmlschema.test2"" minOccurs=""0"" maxOccurs=""unbounded""/>\n  </xsd:sequence>\n</xsd:complexType>\n\n<xsd:element name=""testxmlschema"" type=""SchemaType.test_db.testxmlschema""/>\n\n</xsd:schema>\n\n<test1>\n  <a>1</a>\n  <b>one</b>\n</test1>\n\n<test1>\n  <a>2</a>\n  <b>two</b>\n</test1>\n\n<test1>\n  <a>-1</a>\n  <b xsi:nil=""true""/>\n</test1>\n\n\n<test2>\n  <z>55</z>\n  <y>abc</y>\n  <x>def   </x>\n  <w>98.60</w>\n  <v>2</v>\n  <u>999</u>\n  <t>0</t>\n  <s>21:07:00</s>\n  <stz>21:11:00+05</stz>\n  <r>2009-06-08T21:07:30</r>\n  <rtz>2009-06-09T06:07:30+02:00</rtz>\n  <q>2009-06-08</q>\n  <p xsi:nil=""true""/>\n  <o>ABC</o>\n  <n>true</n>\n  <m>WFla</m>\n</test2>\n\n\n</testxmlschema>\n',)]"
postgresql,postgresql,CREATE DOMAIN testboolxmldomain AS bool,xmlmap.sql,SAME,,[]
postgresql,postgresql,CREATE DOMAIN testdatexmldomain AS date,xmlmap.sql,SAME,,[]
postgresql,postgresql,"SELECT xmlforest(c1, c2, c3, c4) FROM testxmlschema.test3",xmlmap.sql,SAME,,"[('<c1>true</c1><c2>true</c2><c3>2013-02-21</c3><c4>2013-02-21</c4>',)]"
postgresql,postgresql,"SELECT table_to_xml('testxmlschema.test3', true, true, '')",xmlmap.sql,SAME,,"[('<test3 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">\n  <c1>true</c1>\n  <c2>true</c2>\n  <c3>2013-02-21</c3>\n  <c4>2013-02-21</c4>\n</test3>\n\n',)]"
